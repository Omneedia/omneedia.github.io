/*

Gantt Pro 5.1.3
Copyright(c) 2009-2017 Bryntum AB
https://bryntum.com/contact
https://bryntum.com/license

*/

Ext.define('Ext.ux.Scheduler.util.Patch', {
	target: null
	, minVersion: null
	, maxVersion: null
	, reportUrl: null
	, obsoleteTestName: null
	, description: null
	, applyFn: null
	, ieOnly: false
	, macOnly: false
	, overrides: null
	, onClassExtended: function (_0x9f6cx1, _0x9f6cx2) {
		if (Ext.ux.Scheduler['disableOverrides']) {
			return
		};
		if (_0x9f6cx2['ieOnly'] && !Ext['isIE']) {
			return
		};
		if (_0x9f6cx2['macOnly'] && !Ext['isMac']) {
			return
		};
		if ((!_0x9f6cx2['minVersion'] || Ext['versions']['extjs']['equals'](_0x9f6cx2['minVersion']) || Ext['versions']['extjs']['isGreaterThan'](_0x9f6cx2['minVersion'])) && (!_0x9f6cx2['maxVersion'] || Ext['versions']['extjs']['equals'](_0x9f6cx2['maxVersion']) || Ext['versions']['extjs']['isLessThan'](_0x9f6cx2['maxVersion']))) {
			Ext['require'](_0x9f6cx2['target'], function () {
				if (_0x9f6cx2['applyFn']) {
					_0x9f6cx2['applyFn']()
				}
				else {
					if (_0x9f6cx2['overrides']) {
						Ext['ClassManager']['get'](_0x9f6cx2['target'])['override'](_0x9f6cx2['overrides'])
					}
				}
			})
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.EXTJS_23846', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, requires: ['Ext.dom.Element', 'Ext.event.publisher.Gesture']
	, target: ['Ext.dom.Element', 'Ext.event.publisher.Gesture']
	, maxVersion: '6.2.2'
	, applyFn: function () {
		if (Ext['firefoxVersion'] < 51) {
			return
		};
		Ext.define('EXTJS_23846.Element', {
			override: 'Ext.dom.Element'
		}, function (_0x9f6cx2) {
			var _0x9f6cx1 = Ext['supports']
				, _0x9f6cx3 = _0x9f6cx2['prototype']
				, _0x9f6cx4 = _0x9f6cx3['eventMap']
				, _0x9f6cx5 = _0x9f6cx3['additiveEvents'];
			if (Ext['os']['is']['Desktop'] && _0x9f6cx1['TouchEvents'] && !_0x9f6cx1['PointerEvents']) {
				_0x9f6cx4['touchstart'] = 'mousedown';
				_0x9f6cx4['touchmove'] = 'mousemove';
				_0x9f6cx4['touchend'] = 'mouseup';
				_0x9f6cx4['touchcancel'] = 'mouseup';
				_0x9f6cx5['mousedown'] = 'mousedown';
				_0x9f6cx5['mousemove'] = 'mousemove';
				_0x9f6cx5['mouseup'] = 'mouseup';
				_0x9f6cx5['touchstart'] = 'touchstart';
				_0x9f6cx5['touchmove'] = 'touchmove';
				_0x9f6cx5['touchend'] = 'touchend';
				_0x9f6cx5['touchcancel'] = 'touchcancel';
				_0x9f6cx5['pointerdown'] = 'mousedown';
				_0x9f6cx5['pointermove'] = 'mousemove';
				_0x9f6cx5['pointerup'] = 'mouseup';
				_0x9f6cx5['pointercancel'] = 'mouseup'
			}
		});
		Ext.define('EXTJS_23846.Gesture', {
			override: 'Ext.event.publisher.Gesture'
		}, function (_0x9f6cx1) {
			var _0x9f6cx2 = _0x9f6cx1['instance'];
			if (Ext['supports']['TouchEvents'] && !Ext['isWebKit'] && Ext['os']['is']['Desktop']) {
				_0x9f6cx2['handledDomEvents']['push']('mousedown', 'mousemove', 'mouseup');
				_0x9f6cx2['registerEvents']()
			}
		})
	}
});
Ext.define('Ext.ux.Scheduler.locale.Locale', {
	l10n: null
	, legacyMode: true
	, localeName: null
	, namespaceId: null
	, constructor: function () {
		if (!Ext.ux.Scheduler['locale']['Active']) {
			Ext.ux.Scheduler['locale']['Active'] = {};
			this['bindRequire']()
		};
		var _0x9f6cx2 = this['self']['getName']()['split']('.');
		var _0x9f6cx1 = this['localeName'] = _0x9f6cx2['pop']();
		this['namespaceId'] = _0x9f6cx2.join('.');
		var _0x9f6cx5 = Ext.ux.Scheduler['locale']['Active'][this['namespaceId']];
		if (!(_0x9f6cx1 == 'En' && _0x9f6cx5 && _0x9f6cx5['localeName'] != 'En')) {
			this['apply']()
		}
	}
	, bindRequire: function () {
		var _0x9f6cx1 = Ext['ClassManager']['triggerCreated'];
		Ext['ClassManager']['triggerCreated'] = function (_0x9f6cx3) {
			_0x9f6cx1['apply'](this, arguments);
			if (_0x9f6cx3) {
				var _0x9f6cx5 = Ext['ClassManager']['get'](_0x9f6cx3);
				for (var _0x9f6cx2 in Ext.ux.Scheduler['locale']['Active']) {
					Ext.ux.Scheduler['locale']['Active'][_0x9f6cx2]['apply'](_0x9f6cx5)
				}
			}
		}
	}
	, applyToClass: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx3 = this
			, _0x9f6cx6 = _0x9f6cx3['self']['getName']();
		_0x9f6cx2 = _0x9f6cx2 || Ext['ClassManager']['get'](_0x9f6cx5);
		if (_0x9f6cx2 && (_0x9f6cx2['activeLocaleId'] !== _0x9f6cx6)) {
			var _0x9f6cx1 = _0x9f6cx3['l10n'][_0x9f6cx5];
			if (typeof _0x9f6cx1 === 'function') {
				_0x9f6cx1(_0x9f6cx5)
			}
			else {
				if (_0x9f6cx2['singleton']) {
					_0x9f6cx2['l10n'] = Ext['apply']({}, _0x9f6cx1, _0x9f6cx2['prototype'] && _0x9f6cx2['prototype']['l10n'])
				}
				else {
					Ext['override'](_0x9f6cx2, {
						l10n: _0x9f6cx1
					})
				}
			};
			if (_0x9f6cx3['legacyMode']) {
				var _0x9f6cx7;
				if (_0x9f6cx2['prototype']) {
					_0x9f6cx7 = _0x9f6cx2['prototype']
				}
				else {
					if (_0x9f6cx2['singleton']) {
						_0x9f6cx7 = _0x9f6cx2
					}
				};
				if (_0x9f6cx7 && _0x9f6cx7['legacyMode']) {
					if (_0x9f6cx7['legacyHolderProp']) {
						if (!_0x9f6cx7[_0x9f6cx7['legacyHolderProp']]) {
							_0x9f6cx7[_0x9f6cx7['legacyHolderProp']] = {}
						};
						_0x9f6cx7 = _0x9f6cx7[_0x9f6cx7['legacyHolderProp']]
					};
					for (var _0x9f6cx4 in _0x9f6cx1) {
						if (typeof _0x9f6cx7[_0x9f6cx4] !== 'function') {
							_0x9f6cx7[_0x9f6cx4] = _0x9f6cx1[_0x9f6cx4]
						}
					}
				}
			};
			_0x9f6cx2['activeLocaleId'] = _0x9f6cx6;
			if (_0x9f6cx2['onLocalized']) {
				_0x9f6cx2['onLocalized']()
			}
		}
	}
	, apply: function (_0x9f6cx6) {
		if (this['l10n']) {
			var _0x9f6cx7 = this;
			if (_0x9f6cx6) {
				if (!Ext['isArray'](_0x9f6cx6)) {
					_0x9f6cx6 = [_0x9f6cx6]
				};
				var _0x9f6cx5, _0x9f6cx2;
				for (var _0x9f6cx3 = 0, _0x9f6cx1 = _0x9f6cx6['length']; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
					if (Ext['isObject'](_0x9f6cx6[_0x9f6cx3])) {
						if (_0x9f6cx6[_0x9f6cx3]['singleton']) {
							_0x9f6cx2 = _0x9f6cx6[_0x9f6cx3];
							_0x9f6cx5 = Ext['getClassName'](Ext['getClass'](_0x9f6cx2))
						}
						else {
							_0x9f6cx2 = Ext['getClass'](_0x9f6cx6[_0x9f6cx3]);
							_0x9f6cx5 = Ext['getClassName'](_0x9f6cx2)
						}
					}
					else {
						_0x9f6cx2 = null;
						_0x9f6cx5 = 'string' === typeof _0x9f6cx6[_0x9f6cx3] ? _0x9f6cx6[_0x9f6cx3] : Ext['getClassName'](_0x9f6cx6[_0x9f6cx3])
					};
					if (_0x9f6cx5) {
						if (_0x9f6cx5 in this['l10n']) {
							_0x9f6cx7['applyToClass'](_0x9f6cx5, _0x9f6cx2)
						}
					}
				}
			}
			else {
				Ext.ux.Scheduler['locale']['Active'][this['namespaceId']] = this;
				for (var _0x9f6cx4 in this['l10n']) {
					_0x9f6cx7['applyToClass'](_0x9f6cx4)
				}
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.locale.En', {
	extend: 'Ext.ux.Scheduler.locale.Locale'
	, singleton: true
	, l10n: {
		"Ext.ux.Scheduler.util.Date": {
			unitNames: {
				YEAR: {
					single: 'year'
					, plural: 'years'
					, abbrev: 'yr'
				}
				, QUARTER: {
					single: 'quarter'
					, plural: 'quarters'
					, abbrev: 'q'
				}
				, MONTH: {
					single: 'month'
					, plural: 'months'
					, abbrev: 'mon'
				}
				, WEEK: {
					single: 'week'
					, plural: 'weeks'
					, abbrev: 'w'
				}
				, DAY: {
					single: 'day'
					, plural: 'days'
					, abbrev: 'd'
				}
				, HOUR: {
					single: 'hour'
					, plural: 'hours'
					, abbrev: 'h'
				}
				, MINUTE: {
					single: 'minute'
					, plural: 'minutes'
					, abbrev: 'min'
				}
				, SECOND: {
					single: 'second'
					, plural: 'seconds'
					, abbrev: 's'
				}
				, MILLI: {
					single: 'ms'
					, plural: 'ms'
					, abbrev: 'ms'
				}
			}
		}
		, "Ext.ux.Scheduler.panel.TimelineGridPanel": {
			weekStartDay: 1
			, loadingText: 'Loading, please wait...'
			, savingText: 'Saving changes, please wait...'
		}
		, "Ext.ux.Scheduler.panel.TimelineTreePanel": {
			weekStartDay: 1
			, loadingText: 'Loading, please wait...'
			, savingText: 'Saving changes, please wait...'
		}
		, "Ext.ux.Scheduler.mixin.SchedulerView": {
			loadingText: 'Loading events...'
		}
		, "Ext.ux.Scheduler.plugin.CurrentTimeLine": {
			tooltipText: 'Current time'
		}
		, "Ext.ux.Scheduler.widget.EventEditor": {
			saveText: 'Save'
			, deleteText: 'Delete'
			, cancelText: 'Cancel'
			, nameText: 'Name'
			, startDateText: 'Start'
			, endDateText: 'End'
			, resourceText: 'Resource'
		}
		, "Ext.ux.Scheduler.plugin.SimpleEditor": {
			newEventText: 'New booking...'
		}
		, "Ext.ux.Scheduler.widget.ExportDialogForm": {
			formatFieldLabel: 'Paper format'
			, orientationFieldLabel: 'Orientation'
			, rangeFieldLabel: 'Schedule range'
			, showHeaderLabel: 'Show header'
			, showFooterLabel: 'Show footer'
			, orientationPortraitText: 'Portrait'
			, orientationLandscapeText: 'Landscape'
			, completeViewText: 'Complete schedule'
			, currentViewText: 'Visible schedule'
			, dateRangeText: 'Date range'
			, dateRangeFromText: 'Export from'
			, dateRangeToText: 'Export to'
			, exportersFieldLabel: 'Control pagination'
			, adjustCols: 'Adjust column width'
			, adjustColsAndRows: 'Adjust column width and row height'
			, specifyDateRange: 'Specify date range'
			, columnPickerLabel: 'Select columns'
			, completeDataText: 'Complete schedule (for all events)'
			, dpiFieldLabel: 'DPI (dots per inch)'
			, rowsRangeLabel: 'Rows range'
			, allRowsLabel: 'All rows'
			, visibleRowsLabel: 'Visible rows'
			, columnEmptyText: '[no title]'
		}
		, "Ext.ux.Scheduler.widget.ExportDialog": {
			title: 'Export Settings'
			, exportButtonText: 'Export'
			, cancelButtonText: 'Cancel'
			, progressBarText: 'Exporting...'
		}
		, "Ext.ux.Scheduler.plugin.Export": {
			generalError: 'An error occurred'
			, fetchingRows: 'Fetching row {0} of {1}'
			, builtPage: 'Built page {0} of {1}'
			, requestingPrintServer: 'Please wait...'
		}
		, "Ext.ux.Scheduler.plugin.Printable": {
			dialogTitle: 'Print settings'
			, exportButtonText: 'Print'
		}
		, "Ext.ux.Scheduler.plugin.exporter.AbstractExporter": {
			name: 'Exporter'
		}
		, "Ext.ux.Scheduler.plugin.exporter.SinglePage": {
			name: 'Single page'
		}
		, "Ext.ux.Scheduler.plugin.exporter.MultiPageVertical": {
			name: 'Multiple pages (vertically)'
		}
		, "Ext.ux.Scheduler.plugin.exporter.MultiPage": {
			name: 'Multiple pages'
		}
		, "Ext.ux.Scheduler.column.ResourceName": {
			name: 'Name'
		}
		, "Ext.ux.Scheduler.template.DependencyInfo": {
			fromText: 'From'
			, toText: 'To'
		}
		, "Ext.ux.Scheduler.preset.Manager": {
			hourAndDay: {
				displayDateFormat: 'G:i'
				, middleDateFormat: 'G:i'
				, topDateFormat: 'D d/m'
			}
			, secondAndMinute: {
				displayDateFormat: 'g:i:s'
				, topDateFormat: 'D, d g:iA'
			}
			, dayAndWeek: {
				displayDateFormat: 'm/d h:i A'
				, middleDateFormat: 'D d M'
			}
			, weekAndDay: {
				displayDateFormat: 'm/d'
				, bottomDateFormat: 'd M'
				, middleDateFormat: 'Y F d'
			}
			, weekAndMonth: {
				displayDateFormat: 'm/d/Y'
				, middleDateFormat: 'm/d'
				, topDateFormat: 'm/d/Y'
			}
			, weekAndDayLetter: {
				displayDateFormat: 'm/d/Y'
				, middleDateFormat: 'D d M Y'
			}
			, weekDateAndMonth: {
				displayDateFormat: 'm/d/Y'
				, middleDateFormat: 'd'
				, topDateFormat: 'Y F'
			}
			, monthAndYear: {
				displayDateFormat: 'm/d/Y'
				, middleDateFormat: 'M Y'
				, topDateFormat: 'Y'
			}
			, year: {
				displayDateFormat: 'm/d/Y'
				, middleDateFormat: 'Y'
			}
			, manyYears: {
				displayDateFormat: 'm/d/Y'
				, middleDateFormat: 'Y'
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.mixin.Localizable', {
	requires: ['Ext.ux.Scheduler.locale.En']
	, legacyMode: false
	, activeLocaleId: ''
	, l10n: null
	, isLocaleApplied: function () {
		var _0x9f6cx2 = (this['singleton'] && this['activeLocaleId']) || this['self']['activeLocaleId'];
		if (!_0x9f6cx2) {
			return false
		};
		for (var _0x9f6cx1 in Ext.ux.Scheduler['locale']['Active']) {
			if (_0x9f6cx2 === Ext.ux.Scheduler['locale']['Active'][_0x9f6cx1]['self']['getName']()) {
				return true
			}
		};
		return false
	}
	, applyLocale: function () {
		for (var _0x9f6cx1 in Ext.ux.Scheduler['locale']['Active']) {
			Ext.ux.Scheduler['locale']['Active'][_0x9f6cx1]['apply'](this['singleton'] ? this : this['self']['getName']())
		}
	}
	, L: function () {
		return this['localize']['apply'](this, arguments)
	}
	, localize: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = this['getLocale'](_0x9f6cx3, _0x9f6cx2, _0x9f6cx5);
		if (_0x9f6cx1 === null || _0x9f6cx1 === undefined) {
			throw 'Cannot find locale: ' + _0x9f6cx3 + ' [' + this['self']['getName']() + ']'
		};
		return _0x9f6cx1
	}
	, getLocale: function (_0x9f6cx2, _0x9f6cx3, _0x9f6cx6) {
		if (!this['isLocaleApplied']() && !_0x9f6cx6) {
			this['applyLocale']()
		};
		if (this['hasOwnProperty']('l10n') && this['l10n']['hasOwnProperty'](_0x9f6cx2) && 'function' != typeof this['l10n'][_0x9f6cx2]) {
			return this['l10n'][_0x9f6cx2]
		};
		var _0x9f6cx5 = this['self'] && this['self']['prototype'];
		if (this['legacyMode']) {
			var _0x9f6cx1 = _0x9f6cx3 || this['legacyHolderProp'];
			var _0x9f6cx8 = _0x9f6cx1 ? this[_0x9f6cx1] : this;
			if (_0x9f6cx8 && _0x9f6cx8['hasOwnProperty'](_0x9f6cx2) && 'function' != typeof _0x9f6cx8[_0x9f6cx2]) {
				return _0x9f6cx8[_0x9f6cx2]
			};
			if (_0x9f6cx5) {
				var _0x9f6cx4 = _0x9f6cx1 ? _0x9f6cx5[_0x9f6cx1] : _0x9f6cx5;
				if (_0x9f6cx4 && _0x9f6cx4['hasOwnProperty'](_0x9f6cx2) && 'function' != typeof _0x9f6cx4[_0x9f6cx2]) {
					return _0x9f6cx4[_0x9f6cx2]
				}
			}
		};
		var _0x9f6cx9 = _0x9f6cx5['l10n'] && _0x9f6cx5['l10n'][_0x9f6cx2];
		if (_0x9f6cx9 === null || _0x9f6cx9 === undefined) {
			var _0x9f6cx7 = _0x9f6cx5 && _0x9f6cx5['superclass'];
			if (_0x9f6cx7 && _0x9f6cx7['localize']) {
				_0x9f6cx9 = _0x9f6cx7['localize'](_0x9f6cx2, _0x9f6cx3, _0x9f6cx6)
			}
		};
		return _0x9f6cx9
	}
});
Ext.define('Ext.ux.Gantt.locale.En', {
	extend: 'Ext.ux.Scheduler.locale.Locale'
	, requires: 'Ext.ux.Scheduler.locale.En'
	, singleton: true
	, l10n: {
		"Ext.ux.Gantt.util.DurationParser": {
			unitsRegex: {
				MILLI: /^ms$|^mil/i
				, SECOND: /^s$|^sec/i
				, MINUTE: /^m$|^min/i
				, HOUR: /^h$|^hr$|^hour/i
				, DAY: /^d$|^day/i
				, WEEK: /^w$|^wk|^week/i
				, MONTH: /^mo|^mnt/i
				, QUARTER: /^q$|^quar|^qrt/i
				, YEAR: /^y$|^yr|^year/i
			}
		}
		, "Ext.ux.Gantt.util.DependencyParser": {
			typeText: {
				SS: 'SS'
				, SF: 'SF'
				, FS: 'FS'
				, FF: 'FF'
			}
		}
		, "Ext.ux.Gantt.panel.Timeline": {
			start: 'Start'
			, end: 'End'
			, format: 'm/d/Y'
		}
		, "Ext.ux.Gantt.field.ShowInTimeline": {
			yes: 'Yes'
			, no: 'No'
		}
		, "Ext.ux.Gantt.column.ShowInTimeline": {
			text: 'Show in timeline'
		}
		, "Ext.ux.Gantt.field.ConstraintType": {
			none: 'None'
			, invalidText: 'Invalid value'
		}
		, "Ext.ux.Gantt.field.Duration": {
			invalidText: 'Invalid value'
		}
		, "Ext.ux.Gantt.field.Cost": {
			invalidText: 'Invalid value'
			, currencySymbol: '$'
			, currencySymbolAlign: 'left'
		}
		, "Ext.ux.Gantt.field.Effort": {
			invalidText: 'Invalid effort value'
		}
		, "Ext.ux.Gantt.field.Percent": {
			invalidText: 'Invalid value'
		}
		, "Ext.ux.Gantt.field.SchedulingMode": {
			Normal: 'Normal'
			, FixedDuration: 'Fixed duration'
			, EffortDriven: 'Effort driven'
			, DynamicAssignment: 'Dynamic assignment'
			, invalidText: 'Invalid value'
		}
		, "Ext.ux.Gantt.template.Deadline": {
			deadline: 'Deadline'
		}
		, "Ext.ux.Gantt.column.DeadlineDate": {
			text: 'Deadline'
		}
		, "Ext.ux.Gantt.Tooltip": {
			startText: 'Starts: '
			, endText: 'Ends: '
			, durationText: 'Duration: '
		}
		, "Ext.ux.Gantt.template.TaskTooltip": {
			startText: 'Start'
			, endText: 'End'
			, percentText: 'Complete'
			, format: 'm/d/Y'
		}
		, "Ext.ux.Gantt.plugin.TaskContextMenu": {
			taskInformation: 'Task information...'
			, projectInformation: 'Project information...'
			, newTaskText: 'New task'
			, deleteTask: 'Delete task(s)'
			, editLeftLabel: 'Edit left label'
			, editRightLabel: 'Edit right label'
			, add: 'Add...'
			, deleteDependency: 'Delete dependency...'
			, addTaskAbove: 'Task above'
			, addTaskBelow: 'Task below'
			, addMilestone: 'Milestone'
			, addSubtask: 'Sub-task'
			, addSuccessor: 'Successor'
			, addPredecessor: 'Predecessor'
			, convertToMilestone: 'Convert to milestone'
			, convertToRegular: 'Convert to regular task'
			, splitTask: 'Split task'
		}
		, "Ext.ux.Gantt.plugin.DependencyEditor": {
			fromText: 'From'
			, toText: 'To'
			, typeText: 'Type'
			, lagText: 'Lag'
			, endToStartText: 'Finish-To-Start'
			, startToStartText: 'Start-To-Start'
			, endToEndText: 'Finish-To-Finish'
			, startToEndText: 'Start-To-Finish'
			, okButtonText: 'Ok'
			, cancelButtonText: 'Cancel'
			, deleteButtonText: 'Delete'
		}
		, "Ext.ux.Gantt.widget.calendar.Calendar": {
			dayOverrideNameHeaderText: 'Name'
			, overrideName: 'Name'
			, startDate: 'Start Date'
			, endDate: 'End Date'
			, error: 'Error'
			, dateText: 'Date'
			, addText: 'Add'
			, editText: 'Edit'
			, removeText: 'Remove'
			, workingDayText: 'Working day'
			, weekendsText: 'Weekends'
			, overriddenDayText: 'Overridden day'
			, overriddenWeekText: 'Overridden week'
			, workingTimeText: 'Working time'
			, nonworkingTimeText: 'Non-working time'
			, dayOverridesText: 'Day overrides'
			, weekOverridesText: 'Week overrides'
			, okText: 'OK'
			, cancelText: 'Cancel'
			, parentCalendarText: 'Parent calendar'
			, noParentText: 'No parent'
			, selectParentText: 'Select parent'
			, newDayName: '[Without name]'
			, calendarNameText: 'Calendar name'
			, isProjectCalendarText: 'Project calendar'
			, tplTexts: {
				tplWorkingHours: 'Working hours for'
				, tplIsNonWorking: 'is non-working'
				, tplOverride: 'override'
				, tplInCalendar: 'in calendar'
				, tplDayInCalendar: 'standard day in calendar'
				, tplBasedOn: 'Based on'
			}
			, overrideErrorText: 'There is already an override for this day'
			, overrideDateError: 'There is already a week override on this date: {0}'
			, startAfterEndError: 'Start date should be less than end date'
			, weeksIntersectError: 'Week overrides should not intersect'
		}
		, "Ext.ux.Gantt.widget.calendar.AvailabilityGrid": {
			startText: 'Start'
			, endText: 'End'
			, addText: 'Add'
			, removeText: 'Remove'
			, error: 'Error'
		}
		, "Ext.ux.Gantt.widget.calendar.DayEditor": {
			workingTimeText: 'Working time'
			, nonworkingTimeText: 'Non-working time'
		}
		, "Ext.ux.Gantt.widget.calendar.WeekEditor": {
			defaultTimeText: 'Default time'
			, workingTimeText: 'Working time'
			, nonworkingTimeText: 'Non-working time'
			, error: 'Error'
			, noOverrideError: 'Week override contains only \'default\' days - can\'t save it'
		}
		, "Ext.ux.Gantt.widget.calendar.ResourceCalendarGrid": {
			name: 'Name'
			, calendar: 'Calendar'
		}
		, "Ext.ux.Gantt.widget.calendar.CalendarWindow": {
			title: 'Calendar'
			, ok: 'Ok'
			, cancel: 'Cancel'
		}
		, "Ext.ux.Gantt.widget.calendar.CalendarManager": {
			addText: 'Add'
			, removeText: 'Remove'
			, add_child: 'Add child'
			, add_node: 'Add calendar'
			, add_sibling: 'Add sibling'
			, remove: 'Remove'
			, calendarName: 'Calendar'
			, confirm_action: 'Confirm action'
			, confirm_message: 'Calendar has unsaved changes. Would you like to save your changes?'
		}
		, "Ext.ux.Gantt.widget.calendar.CalendarManagerWindow": {
			title: 'Calendar manager'
			, ok: 'Apply changes'
			, cancel: 'Close'
			, confirm_action: 'Confirm action'
			, confirm_message: 'Calendar has unsaved changes. Would you like to save your changes?'
		}
		, "Ext.ux.Gantt.field.Assignment": {
			cancelText: 'Cancel'
			, closeText: 'Save and Close'
		}
		, "Ext.ux.Gantt.column.AssignmentUnits": {
			text: 'Units'
		}
		, "Ext.ux.Gantt.column.Duration": {
			text: 'Duration'
		}
		, "Ext.ux.Gantt.column.Effort": {
			text: 'Effort'
		}
		, "Ext.ux.Gantt.column.BaselineEffort": {
			text: 'Baseline Effort'
		}
		, "Ext.ux.Gantt.column.ActualEffort": {
			text: 'Actual Effort'
		}
		, "Ext.ux.Gantt.column.EffortVariance": {
			text: 'Effort Variance'
		}
		, "Ext.ux.Gantt.column.Cost": {
			text: 'Cost'
		}
		, "Ext.ux.Gantt.column.BaselineCost": {
			text: 'Baseline Cost'
		}
		, "Ext.ux.Gantt.column.ActualCost": {
			text: 'Actual Cost'
		}
		, "Ext.ux.Gantt.column.CostVariance": {
			text: 'Cost Variance'
			, currencySymbol: '$'
			, currencySymbolAlign: 'left'
		}
		, "Ext.ux.Gantt.column.EndDate": {
			text: 'Finish'
		}
		, "Ext.ux.Gantt.column.PercentDone": {
			text: '% Done'
		}
		, "Ext.ux.Gantt.column.ResourceAssignment": {
			text: 'Assigned Resources'
		}
		, "Ext.ux.Gantt.column.ResourceName": {
			text: 'Resource Name'
		}
		, "Ext.ux.Gantt.column.Rollup": {
			text: 'Rollup task'
			, no: 'No'
			, yes: 'Yes'
		}
		, "Ext.ux.Gantt.field.ManuallyScheduled": {
			yes: 'Yes'
			, no: 'No'
		}
		, "Ext.ux.Gantt.field.ReadOnly": {
			yes: 'Yes'
			, no: 'No'
		}
		, "Ext.ux.Gantt.column.ManuallyScheduled": {
			text: 'Manual mode'
		}
		, "Ext.ux.Gantt.column.SchedulingMode": {
			text: 'Mode'
		}
		, "Ext.ux.Gantt.column.Predecessor": {
			text: 'Predecessors'
		}
		, "Ext.ux.Gantt.column.Successor": {
			text: 'Successors'
		}
		, "Ext.ux.Gantt.column.StartDate": {
			text: 'Start'
		}
		, "Ext.ux.Gantt.column.WBS": {
			text: 'WBS'
		}
		, "Ext.ux.Gantt.column.Sequence": {
			text: '#'
		}
		, "Ext.ux.Gantt.column.Calendar": {
			text: 'Calendar'
		}
		, "Ext.ux.Gantt.column.ReadOnly": {
			text: 'Read Only'
		}
		, "Ext.ux.Gantt.widget.taskeditor.ProjectForm": {
			nameText: 'Name'
			, startText: 'Start'
			, finishText: 'Finish'
			, calendarText: 'Calendar'
			, readOnlyText: 'Read Only'
			, allowDependenciesText: 'Allow cross-project dependencies'
		}
		, "Ext.ux.Gantt.widget.taskeditor.TaskForm": {
			taskNameText: 'Name'
			, durationText: 'Duration'
			, datesText: 'Dates'
			, baselineText: 'Baseline'
			, startText: 'Start'
			, finishText: 'Finish'
			, percentDoneText: 'Percent Complete'
			, baselineStartText: 'Start'
			, baselineFinishText: 'Finish'
			, baselinePercentDoneText: 'Percent Complete'
			, baselineEffortText: 'Effort'
			, effortText: 'Effort'
			, invalidEffortText: 'Invalid effort value'
			, calendarText: 'Calendar'
			, manuallyScheduledText: 'Manually Scheduled'
			, schedulingModeText: 'Scheduling Mode'
			, rollupText: 'Rollup'
			, wbsCodeText: 'WBS code'
			, "Constraint Type": 'Constraint Type'
			, "Constraint Date": 'Constraint Date'
			, readOnlyText: 'Read Only'
		}
		, "Ext.ux.Gantt.widget.DependencyGrid": {
			addDependencyText: 'Add new'
			, dropDependencyText: 'Remove'
			, idText: 'ID'
			, snText: 'SN'
			, taskText: 'Task Name'
			, blankTaskText: 'Please select task'
			, invalidDependencyText: 'Invalid dependency'
			, parentChildDependencyText: 'Dependency between child and parent found'
			, duplicatingDependencyText: 'Duplicate dependency found'
			, transitiveDependencyText: 'Transitive dependency'
			, cyclicDependencyText: 'Cyclic dependency'
			, typeText: 'Type'
			, lagText: 'Lag'
			, clsText: 'CSS class'
			, endToStartText: 'Finish-To-Start'
			, startToStartText: 'Start-To-Start'
			, endToEndText: 'Finish-To-Finish'
			, startToEndText: 'Start-To-Finish'
			, predecessorsText: 'Predecessors'
			, successorsText: 'Successors'
		}
		, "Ext.ux.Gantt.widget.AssignmentEditGrid": {
			confirmAddResourceTitle: 'Confirm'
			, confirmAddResourceText: 'Resource &quot;{0}&quot; not found in list. Would you like to add it?'
			, noValueText: 'Please select resource to assign'
			, noResourceText: 'No resource &quot;{0}&quot; found in the list'
			, "Resource is already assigned": 'Resource is already assigned'
			, addAssignmentText: 'Add new'
			, dropAssignmentText: 'Remove'
		}
		, "Ext.ux.Gantt.widget.taskeditor.TaskEditor": {
			generalText: 'General'
			, resourcesText: 'Resources'
			, notesText: 'Notes'
			, advancedText: 'Advanced'
		}
		, "Ext.ux.Gantt.widget.taskeditor.ProjectEditor": {
			generalText: 'General'
			, descriptionText: 'Description'
		}
		, "Ext.ux.Gantt.plugin.taskeditor.BaseEditor": {
			title: 'Task Information'
			, alertCaption: 'Information'
			, alertText: 'Please correct marked errors to save changes'
			, okText: 'Ok'
			, cancelText: 'Cancel'
		}
		, "Ext.ux.Gantt.plugin.taskeditor.ProjectEditor": {
			title: 'Project Information'
		}
		, "Ext.ux.Gantt.field.EndDate": {
			endBeforeStartText: 'End date is before start date'
		}
		, "Ext.ux.Gantt.field.ConstraintDate": {
			format: 'm/d/Y H:i'
		}
		, "Ext.ux.Gantt.column.Note": {
			text: 'Note'
		}
		, "Ext.ux.Gantt.column.AddNew": {
			text: 'Add new column...'
		}
		, "Ext.ux.Gantt.column.EarlyStartDate": {
			text: 'Early Start'
		}
		, "Ext.ux.Gantt.column.EarlyEndDate": {
			text: 'Early Finish'
		}
		, "Ext.ux.Gantt.column.LateStartDate": {
			text: 'Late Start'
		}
		, "Ext.ux.Gantt.column.LateEndDate": {
			text: 'Late Finish'
		}
		, "Ext.ux.Gantt.field.Calendar": {
			calendarNotApplicable: 'Task calendar has no overlapping with assigned resources calendars'
			, invalidText: 'Invalid value'
		}
		, "Ext.ux.Gantt.column.Slack": {
			text: 'Free Slack'
		}
		, "Ext.ux.Gantt.column.TotalSlack": {
			text: 'Total Slack'
		}
		, "Ext.ux.Gantt.column.Name": {
			text: 'Task Name'
		}
		, "Ext.ux.Gantt.column.BaselineStartDate": {
			text: 'Baseline Start Date'
		}
		, "Ext.ux.Gantt.column.BaselineEndDate": {
			text: 'Baseline End Date'
		}
		, "Ext.ux.Gantt.column.Milestone": {
			text: 'Milestone'
		}
		, "Ext.ux.Gantt.field.Milestone": {
			yes: 'Yes'
			, no: 'No'
		}
		, "Ext.ux.Gantt.field.Dependency": {
			invalidFormatText: 'Invalid dependency format'
			, invalidDependencyText: 'Invalid dependency found, please make sure you have no cyclic paths between your tasks'
			, invalidDependencyType: 'Invalid dependency type {0}. Allowed values are: {1}.'
		}
		, "Ext.ux.Gantt.constraint.Base": {
			name: 'A constraint'
			, "Remove the constraint": 'Continue. Remove the {0} constraint'
			, "Cancel the change and do nothing": 'Cancel the change and do nothing'
			, "This action will cause a scheduling conflict": 'This action will cause a scheduling conflict for summary task "{0}". The {1} constraint on the summary task puts it in conflict with one of its subtasks.'
		}
		, "Ext.ux.Gantt.constraint.implicit.Dependency": {
			"You moved the task away": 'You moved the task "{2}" away from "{1}" and the two tasks are linked ({0}). As a result the link between the tasks will not drive the later task position.'
			, "You moved the task before": 'You moved the task "{2}" before "{1}" and the two tasks are linked ({0}). As a result the link cannot be honored.'
			, "Remove the constraint": 'Remove the dependency'
			, depType0: 'Start-To-Start'
			, depType1: 'Start-To-Finish'
			, depType2: 'Finish-To-Start'
			, depType3: 'Finish-To-Finish'
			, "Keep the dependency & move the task": 'Keep the dependency and move the task to {0}'
		}
		, "Ext.ux.Gantt.constraint.implicit.PotentialConflict": {
			"This could result in a scheduling conflict": 'You set a {0} constraint on the task "{1}". This could result in a scheduling conflict since the task has a predecessor.'
			, "Remove the constraint": 'Continue. Set the {0} constraint'
			, "Replace the constraint": 'Continue but avoid the conflict by using a {0} constraint instead'
		}
		, "Ext.ux.Gantt.constraint.FinishNoEarlierThan": {
			name: 'Finish no earlier than'
			, "Move the task to finish on {0}": 'Move the task to finish on {0}'
		}
		, "Ext.ux.Gantt.constraint.FinishNoLaterThan": {
			name: 'Finish no later than'
			, "Move the task to finish on {0}": 'Move the task to finish on {0}'
		}
		, "Ext.ux.Gantt.constraint.MustFinishOn": {
			name: 'Must finish on'
			, "Move the task to finish on {0}": 'Move the task to finish on {0}'
		}
		, "Ext.ux.Gantt.constraint.MustStartOn": {
			name: 'Must start on'
			, "Move the task to start at {0}": 'Move the task to start at {0}'
		}
		, "Ext.ux.Gantt.constraint.StartNoEarlierThan": {
			name: 'Start no earlier than'
			, "Move the task to start at {0}": 'Move the task to start at {0}'
		}
		, "Ext.ux.Gantt.constraint.StartNoLaterThan": {
			name: 'Start no later than'
			, "Move the task to start at {0}": 'Move the task to start at {0}'
		}
		, "Ext.ux.Gantt.column.ConstraintDate": {
			text: 'Constraint date'
			, format: 'm/d/Y H:i'
		}
		, "Ext.ux.Gantt.column.ConstraintType": {
			text: 'Constraint'
		}
		, "Ext.ux.Gantt.widget.ConstraintResolutionForm": {
			dateFormat: 'm/d/Y H:i'
			, OK: 'OK'
			, Cancel: 'Cancel'
			, "Resolution options": 'Resolution options'
			, "Don\'t ask again": 'Don\'t ask again'
			, "Task {0} violates constraint {1}": 'Task "{0}" violates constraint {1}'
			, "Task {0} violates constraint {1} {2}": 'Task "{0}" violates constraint {1} {2}'
		}
		, "Ext.ux.Gantt.widget.ConstraintResolutionWindow": {
			"Constraint violation": 'Constraint violation'
		}
		, "Ext.ux.Gantt.panel.ResourceHistogram": {
			resourceText: 'Resource'
		}
	}
	, apply: function (_0x9f6cx1) {
		Ext.ux.Scheduler['locale']['En']['apply'](_0x9f6cx1);
		this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Gantt.mixin.Localizable', {
	extend: 'Ext.ux.Scheduler.mixin.Localizable'
	, requires: ['Ext.ux.Gantt.locale.En']
});
Ext.define('Ext.ux.Gantt.Tooltip', {
	extend: 'Ext.tip.ToolTip'
	, alias: 'widget.gantt_task_tooltip'
	, requires: ['Ext.Template']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, anchor: 'bottom'
	, autoHide: false
	, maskOnDisable: false
	, mode: 'startend'
	, durationDecimalPrecision: 1
	, template: null
	, avoidPointer: false
	, gantt: null
	, lastTarget: null
	, defaultAlign: 'bl-tl?'
	, reverseDefaultAlign: 'tl-bl?'
	, initComponent: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['initialDefaultAlign'] = _0x9f6cx1['defaultAlign'];
		_0x9f6cx1['rtl'] = _0x9f6cx1['gantt']['rtl'];
		_0x9f6cx1['startLabel'] = _0x9f6cx1.L('startText');
		_0x9f6cx1['label2Text'] = _0x9f6cx1['mode'] === 'duration' ? _0x9f6cx1.L('durationText') : _0x9f6cx1.L('endText');
		if (!_0x9f6cx1['template']) {
			_0x9f6cx1['template'] = new Ext.Template('<div class="sch-timetipwrap x-fa {cls}"><table cellpadding="0" cellspacing="0"><tpl if="value1"><tr><td class="sch-gantt-tip-desc">{label1}</td><td class="sch-gantt-tip-value">{value1}</td></tr></tpl><tr><td class="sch-gantt-tip-desc">{label2}</td><td class="sch-gantt-tip-value">{value2}</td></tr></table></div>')['compile']()
		};
		_0x9f6cx1['callParent'](arguments);
		_0x9f6cx1['update'](_0x9f6cx1['template']['apply']({
			value1: ''
			, value2: ''
		}));
		_0x9f6cx1['addCls']('gnt-tooltip');
		if (_0x9f6cx1['avoidPointer']) {
			_0x9f6cx1['on']({
				scope: _0x9f6cx1
				, mouseover: {
					element: 'el'
					, fn: _0x9f6cx1['onTipElementMouseOver']
				}
			})
		}
	}
	, updateContent: function (_0x9f6cx7, _0x9f6cx2, _0x9f6cx4, _0x9f6cx1) {
		var _0x9f6cx3 = this
			, _0x9f6cx5;
		if (_0x9f6cx3['mode'] === 'duration') {
			_0x9f6cx5 = _0x9f6cx3['getDurationContent'](_0x9f6cx7, _0x9f6cx2, _0x9f6cx4, _0x9f6cx1)
		}
		else {
			_0x9f6cx5 = _0x9f6cx3['getStartEndContent'](_0x9f6cx7, _0x9f6cx2, _0x9f6cx4, _0x9f6cx1)
		};
		_0x9f6cx3['update'](_0x9f6cx5)
	}
	, getStartEndContent: function (_0x9f6cx8, _0x9f6cx2, _0x9f6cx7, _0x9f6cx1) {
		var _0x9f6cx5 = this['gantt']
			, _0x9f6cx4 = _0x9f6cx8 && _0x9f6cx5['getFormattedDate'](_0x9f6cx8)
			, _0x9f6cx3;
		if (_0x9f6cx8) {
			if (_0x9f6cx2 - _0x9f6cx8 > 0) {
				_0x9f6cx3 = _0x9f6cx5['getFormattedEndDate'](_0x9f6cx2, _0x9f6cx8)
			}
			else {
				_0x9f6cx3 = _0x9f6cx4
			}
		}
		else {
			_0x9f6cx3 = _0x9f6cx5['getFormattedEndDate'](_0x9f6cx2)
		};
		var _0x9f6cx6 = {
			cls: _0x9f6cx7 ? 'sch-tip-ok fa-check' : 'sch-tip-notok fa-ban'
			, label2: this['label2Text']
			, value2: _0x9f6cx3
			, task: _0x9f6cx1
		};
		if (_0x9f6cx8) {
			_0x9f6cx6['label1'] = this['startLabel'];
			_0x9f6cx6['value1'] = _0x9f6cx8 && _0x9f6cx5['getFormattedDate'](_0x9f6cx8)
		};
		return this['template']['apply'](_0x9f6cx6)
	}
	, getDurationContent: function (_0x9f6cx7, _0x9f6cx2, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx5 = _0x9f6cx1['getDurationUnit']();
		var _0x9f6cx4 = _0x9f6cx1['calculateDuration'](_0x9f6cx7, _0x9f6cx2, _0x9f6cx5);
		return this['template']['apply']({
			cls: _0x9f6cx3 ? 'sch-tip-ok fa-check' : 'sch-tip-notok fa-ban'
			, label1: this['startLabel']
			, value1: this['gantt']['getFormattedDate'](_0x9f6cx7)
			, label2: this['label2Text']
			, value2: parseFloat(Ext['Number']['toFixed'](_0x9f6cx4, this['durationDecimalPrecision'])) + ' ' + Ext.ux.Scheduler['util']['Date']['getReadableNameOfUnit'](_0x9f6cx5, _0x9f6cx4 > 1)
			, task: _0x9f6cx1
		})
	}
	, onTipElementMouseOver: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['defaultAlign'];
		_0x9f6cx1['defaultAlign'] = _0x9f6cx1['reverseDefaultAlign'];
		_0x9f6cx1['reverseDefaultAlign'] = _0x9f6cx2;
		_0x9f6cx1['lastTarget'] && _0x9f6cx1['showBy'](_0x9f6cx1['lastTarget'])
	}
	, showBy: function (_0x9f6cx5) {
		var _0x9f6cx4 = this
			, _0x9f6cx6, _0x9f6cx7, _0x9f6cx3, _0x9f6cx2, _0x9f6cx1, _0x9f6cx8;
		_0x9f6cx4['defaultAlign'] = _0x9f6cx4['initialDefaultAlign'];
		_0x9f6cx4['lastTarget'] = _0x9f6cx5;
		if (_0x9f6cx4['anchor']) {
			_0x9f6cx4['anchorTarget'] = _0x9f6cx5
		};
		_0x9f6cx4['callParent']([_0x9f6cx5]);
		if (Ext['getVersion']()['isLessThanOrEqual']('6.0.2.*') && _0x9f6cx4['syncAnchor']) {
			_0x9f6cx6 = Ext['fly'](_0x9f6cx5)['getRegion']();
			_0x9f6cx7 = _0x9f6cx4['getEl']()['getRegion']();
			if (_0x9f6cx6['bottom'] <= _0x9f6cx7['top'] && _0x9f6cx4['tipAnchor'] != 'top') {
				_0x9f6cx2 = 'top';
				_0x9f6cx1 = 'tl-bl?'
			}
			else {
				if (_0x9f6cx6['top'] >= _0x9f6cx7['bottom'] && _0x9f6cx4['tipAnchor'] != 'bottom') {
					_0x9f6cx2 = 'bottom';
					_0x9f6cx1 = 'bl-tl?'
				}
				else {
					if (_0x9f6cx6['right'] <= _0x9f6cx7['left'] && _0x9f6cx4['tipAnchor'] != 'left') {
						_0x9f6cx2 = 'left';
						_0x9f6cx1 = 'l-r?'
					}
					else {
						if (_0x9f6cx6['left'] >= _0x9f6cx7['right'] && _0x9f6cx4['tipAnchor'] != 'right') {
							_0x9f6cx2 = 'right';
							_0x9f6cx1 = 'r-l?'
						}
					}
				}
			};
			if (_0x9f6cx4['tipAnchor'] != _0x9f6cx2) {
				_0x9f6cx4['tipAnchor'] = _0x9f6cx4['anchor'] = _0x9f6cx2;
				_0x9f6cx4['syncAnchor']();
				_0x9f6cx3 = Ext['fly'](_0x9f6cx4['getEl']()['down']('.' + Ext['baseCSSPrefix'] + 'tip-anchor'))['getRegion']();
				switch (_0x9f6cx2) {
				case 'top':
					_0x9f6cx8 = [0, (_0x9f6cx3['bottom'] - _0x9f6cx3['top']) / 2];
					break;
				case 'bottom':
					_0x9f6cx8 = [0, (_0x9f6cx3['top'] - _0x9f6cx3['bottom']) / 2];
					break;
				case 'left':
					_0x9f6cx8 = [(_0x9f6cx3['left'] - _0x9f6cx3['right']) / 2, 0];
					break;
				case 'right':
					_0x9f6cx8 = [(_0x9f6cx3['right'] - _0x9f6cx3['left']) / 2, 0];
					break
				};
				_0x9f6cx4['alignTo'](_0x9f6cx5, _0x9f6cx1, _0x9f6cx8);
				_0x9f6cx4['getTargetXY']()
			}
		}
	}
	, afterHide: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['callParent']([_0x9f6cx5, _0x9f6cx3, _0x9f6cx1]);
		_0x9f6cx2['lastTarget'] = null
	}
});
Ext.define('Ext.ux.Gantt.field.mixin.TaskField', {
	extend: 'Ext.Mixin'
	, taskField: ''
	, fieldProperty: ''
	, getTaskValueMethod: ''
	, setTaskValueMethod: ''
	, isTaskField: true
	, task: null
	, taskStore: null
	, suppressTaskUpdate: 0
	, highlightTaskUpdates: true
	, highlightColor: '#009900'
	, lastHighlight: 0
	, instantUpdate: true
	, originalInstantUpdate: null
	, readOnlyUpdateSuspended: 0
	, mixinConfig: {
		before: {
			constructor: 'beforeConstructed'
			, destroy: 'beforeDestroyed'
		}
		, after: {
			constructor: 'afterConstructed'
		}
	}
	, beforeConstructed: function () {
		this['setSuppressTaskUpdate'](true)
	}
	, afterConstructed: function () {
		this['taskField'] = this['taskField'] || this['fieldProperty'];
		this['task'] && this['setTask'](this['task']);
		this['setSuppressTaskUpdate'](false)
	}
	, setInstantUpdate: function (_0x9f6cx1) {
		this['instantUpdate'] = _0x9f6cx1
	}
	, beforeDestroyed: function () {
		this['destroyTaskListener']()
	}
	, setTask: function (_0x9f6cx1) {
		if (!_0x9f6cx1) {
			return
		};
		this['destroyTaskListener']();
		this['updateReadOnly'](_0x9f6cx1);
		this['task'] = _0x9f6cx1;
		_0x9f6cx1['on']('taskupdated', this['onTaskUpdateProcess'], this);
		if (!_0x9f6cx1['getCalendar'](true) && !_0x9f6cx1['getTaskStore'](true)) {
			_0x9f6cx1['taskStore'] = _0x9f6cx1['getTaskStore'](true) || this['taskStore'];
			if (!_0x9f6cx1['taskStore']) {
				throw 'Configuration issue: Ext.ux.Gantt.data.taskStore instance should be provided.'
			};
			if (!_0x9f6cx1['getCalendar'](true) && !_0x9f6cx1['taskStore']['getCalendar']()) {
				throw 'Configuration issue: Ext.ux.Gantt.data.Calendar instance should be provided.'
			}
		};
		this['setSuppressTaskUpdate'](true);
		this['onSetTask'](_0x9f6cx1);
		this['setSuppressTaskUpdate'](false)
	}
	, onSetTask: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		this['setValue'](this['getTaskValue'](_0x9f6cx1))
	}
	, setSuppressTaskUpdate: function (_0x9f6cx1) {
		_0x9f6cx1 ? this['suppressTaskUpdate']++ : this['suppressTaskUpdate']--
	}
	, getSuppressTaskUpdate: function () {
		return this['suppressTaskUpdate']
	}
	, isReadOnlyUpdateSuspended: function () {
		return this['readOnlyUpdateSuspended']
	}
	, suspendReadOnlyUpdate: function () {
		this['readOnlyUpdateSuspended']++
	}
	, resumeReadOnlyUpdate: function () {
		if (this['isReadOnlyUpdateSuspended']()) {
			this['readOnlyUpdateSuspended']--
		};
		if (!this['readOnlyUpdateSuspended']) {
			this['updateReadOnly'](this['task'])
		};
		return this['readOnlyUpdateSuspended']
	}
	, updateReadOnly: function (_0x9f6cx1) {
		if (!this['disabled'] && !this['forceReadOnly'] && !this['isReadOnlyUpdateSuspended']()) {
			if (this['editable'] === false) {
				if (!_0x9f6cx1['isEditable'](_0x9f6cx1[this['taskField']])) {
					this['setReadOnly'](true)
				}
				else {
					this['setReadOnly'](false);
					if (this['inputEl']) {
						this['inputEl']['dom']['readOnly'] = true
					}
				}
			}
			else {
				this['setReadOnly'](!_0x9f6cx1['isEditable'](_0x9f6cx1[this['taskField']]))
			}
		}
	}
	, onTaskUpdateProcess: function (_0x9f6cx1, _0x9f6cx3) {
		if (_0x9f6cx3 !== this) {
			var _0x9f6cx5 = this['getValue']();
			this['updateReadOnly'](_0x9f6cx1);
			this['setSuppressTaskUpdate'](true);
			if (this['onTaskUpdate']) {
				this['onTaskUpdate'](_0x9f6cx1, _0x9f6cx3)
			}
			else {
				this['onSetTask'](_0x9f6cx1)
			};
			this['setSuppressTaskUpdate'](false);
			if (this['highlightTaskUpdates']) {
				var _0x9f6cx4 = this['getValue']()
					, _0x9f6cx2 = Ext['isDate'](_0x9f6cx5);
				if (_0x9f6cx2 && (_0x9f6cx5 - _0x9f6cx4 !== 0) || (!_0x9f6cx2 && String(_0x9f6cx5) !== String(_0x9f6cx4))) {
					this['highlightField']()
				}
			}
		}
	}
	, highlightField: function (_0x9f6cx1, _0x9f6cx2) {
		if (this['rendered'] && (new Date() - this['lastHighlight'] > 1000)) {
			this['lastHighlight'] = new Date();
			this['inputEl']['highlight'](_0x9f6cx1 || this['highlightColor'], _0x9f6cx2 || {
				attr: 'color'
			})
		}
	}
	, destroyTaskListener: function () {
		if (this['task']) {
			this['task']['un']('taskupdated', this['onTaskUpdateProcess'], this)
		}
	}
	, callTaskMethod: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx2) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		return _0x9f6cx1 && _0x9f6cx1[_0x9f6cx5]['apply'](_0x9f6cx1, _0x9f6cx2)
	}
	, getTaskValue: function (_0x9f6cx1) {
		return this['callTaskMethod'](_0x9f6cx1, this['getTaskValueMethod'], Ext['Array']['slice'](arguments, 1))
	}
	, setTaskValue: function (_0x9f6cx1) {
		if (_0x9f6cx1['propagating']) {
			return
		};
		return this['callTaskMethod'](_0x9f6cx1, this['setTaskValueMethod'], Ext['Array']['slice'](arguments, 1))
	}
	, applyChanges: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		this['setTaskValue'](_0x9f6cx1, this['getValue']());
		_0x9f6cx1['fireEvent']('taskupdated', _0x9f6cx1, this)
	}
});
Ext.define('Ext.ux.Gantt.field.Cost', {
	extend: 'Ext.form.field.Number'
	, alias: 'widget.costfield'
	, mixins: ['Ext.ux.Gantt.field.mixin.TaskField', 'Ext.ux.Gantt.mixin.Localizable']
	, alternateClassName: 'Ext.ux.Gantt.widget.CostField'
	, disableKeyFilter: false
	, minValue: 0
	, allowExponential: false
	, baseChars: '0123456789'
	, taskField: 'costField'
	, setTaskValueMethod: 'setCost'
	, getTaskValueMethod: 'getCost'
	, instantUpdate: true
	, currencySymbol: null
	, currencySymbolAlign: null
	, initComponent: function () {
		this['invalidText'] = this.L('invalidText');
		this['currencySymbol'] = this['currencySymbol'] || this.L('currencySymbol');
		this['currencySymbolAlign'] = this['currencySymbolAlign'] || this.L('currencySymbolAlign');
		this['baseChars'] = this['baseChars'] + this['currencySymbol'];
		this['callParent'](arguments)
	}
	, valueToRaw: function (_0x9f6cx1) {
		return this['valueToVisible'](_0x9f6cx1)
	}
	, valueToVisible: function (_0x9f6cx2) {
		var _0x9f6cx1 = '';
		if (Ext['isNumber'](_0x9f6cx2)) {
			_0x9f6cx1 = Ext['Number']['toFixed'](_0x9f6cx2, this['decimalPrecision']);
			if (this['currencySymbolAlign'] == 'left') {
				_0x9f6cx1 = this['currencySymbol'] + ' ' + _0x9f6cx1
			}
			else {
				_0x9f6cx1 += ' ' + this['currencySymbol']
			}
		};
		return _0x9f6cx1
	}
	, rawToValue: function (_0x9f6cx1) {
		if (_0x9f6cx1) {
			return this['parseValue'](_0x9f6cx1)
		};
		return _0x9f6cx1
	}
	, parseValue: function (_0x9f6cx1) {
		return this['callParent']([_0x9f6cx1 && _0x9f6cx1['replace'](this['currencySymbol'], '')])
	}
	, getErrors: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['parseValue'](_0x9f6cx1);
		if (_0x9f6cx2 === null) {
			if (_0x9f6cx1 !== null && _0x9f6cx1 !== '') {
				return [this['invalidText']]
			}
			else {
				_0x9f6cx2 = ''
			}
		};
		return this['callParent']([_0x9f6cx2])
	}
	, setValue: function (_0x9f6cx1) {
		this['callParent']([_0x9f6cx1]);
		if (this['instantUpdate'] && !this['getSuppressTaskUpdate']() && this['task']) {
			this['applyChanges']()
		}
	}
});
Ext.define('Ext.ux.Gantt.column.mixin.TaskFieldColumn', {
	extend: 'Ext.Mixin'
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, instantUpdate: false
	, field: null
	, fieldProperty: ''
	, fieldConfigs: 'instantUpdate,fieldProperty'
	, defaultEditor: 'textfield'
	, useRenderer: true
	, htmlEncode: true
	, mixinConfig: {
		after: {
			initComponent: 'afterInitComponent'
			, onRender: '_beforeRender'
		}
		, afterIf: {
			applyColumnCls: 'applyColumnCls'
		}
	}
	, _beforeRender: function () {
		var _0x9f6cx1 = this['getEditor'] && this['getEditor']();
		if (_0x9f6cx1 && _0x9f6cx1['setInstantUpdate']) {
			_0x9f6cx1['originalInstantUpdate'] = _0x9f6cx1['instantUpdate'];
			_0x9f6cx1['setInstantUpdate'](false)
		}
	}
	, initTaskFieldColumn: function (_0x9f6cx1) {
		this['text'] = this['config']['text'] || this.L('text');
		this['initColumnEditor'](_0x9f6cx1);
		this['scope'] = this['scope'] || this;
		if (this['useRenderer']) {
			this['renderer'] = this['renderer'] || this['taskFieldRenderer']
		};
		this['on']('added', this['onColumnAdded'], this)
	}
	, applyColumnCls: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (!_0x9f6cx1['isEditable'](this['dataIndex'])) {
			_0x9f6cx5['tdCls'] = (_0x9f6cx5['tdCls'] || '') + ' sch-column-readonly'
		}
	}
	, afterInitComponent: function () {
		this['hasCustomRenderer'] = true
	}
	, initColumnEditor: function (_0x9f6cx2) {
		var _0x9f6cx5 = this['editor'];
		if (_0x9f6cx5) {
			if ('string' == typeof _0x9f6cx5) {
				_0x9f6cx5 = {
					xtype: _0x9f6cx5
				}
			};
			if (!_0x9f6cx5['isInstance']) {
				if (!_0x9f6cx5['xtype'] && !_0x9f6cx5['xclass']) {
					_0x9f6cx5['xtype'] = this['defaultEditor']
				};
				var _0x9f6cx1 = Ext['copyTo'](Ext['apply']({}, _0x9f6cx2), this, this['fieldConfigs'], true);
				this['editor'] = Ext['ComponentManager']['create'](Ext['apply'](_0x9f6cx1, _0x9f6cx5))
			};
			this['field'] = this['editor']
		}
	}
	, onColumnAdded: function () {
		var _0x9f6cx1 = this['up']('[taskStore]') || this['up']('[store]');
		var _0x9f6cx2 = _0x9f6cx1['taskStore'] || _0x9f6cx1['store'];
		if (!this['dataIndex']) {
			this['dataIndex'] = _0x9f6cx2['model']['prototype'][this['fieldProperty']]
		};
		if (this['onReadOnlySet']) {
			this['mon'](_0x9f6cx1, 'setreadonly', this['onReadOnlySet'], this)
		}
	}
	, getValueToRender: function (_0x9f6cx2, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx5 = this['field'];
		return _0x9f6cx5 && _0x9f6cx5['valueToVisible'] && _0x9f6cx5['valueToVisible'](_0x9f6cx2, _0x9f6cx1) || _0x9f6cx2
	}
	, taskFieldRenderer: function (_0x9f6cx3, _0x9f6cx4, _0x9f6cx2) {
		var _0x9f6cx5 = this['getValueToRender']['apply'](this, arguments);
		var _0x9f6cx1 = this['htmlEncode'] ? Ext['util']['Format']['htmlEncode'](_0x9f6cx5) : _0x9f6cx5;
		this['applyColumnCls'](_0x9f6cx3, _0x9f6cx4, _0x9f6cx2);
		return _0x9f6cx1
	}
	, afterClassMixedIn: function (_0x9f6cx2) {
		var _0x9f6cx5 = this['prototype']
			, _0x9f6cx1 = _0x9f6cx5['mixinConfig']
			, _0x9f6cx4 = _0x9f6cx1 && _0x9f6cx1['beforeIf']
			, _0x9f6cx3 = _0x9f6cx1 && _0x9f6cx1['afterIf'];
		_0x9f6cx4 && Ext['Object']['each'](_0x9f6cx4, function (_0x9f6cx7, _0x9f6cx6) {
			if (_0x9f6cx7 in _0x9f6cx2['prototype']) {
				_0x9f6cx2['addMember'](_0x9f6cx7, function () {
					if (_0x9f6cx5[_0x9f6cx6]['apply'](this, arguments) !== false) {
						return this['callParent'](arguments)
					}
				})
			}
			else {
				_0x9f6cx2['addMember'](_0x9f6cx7, function () {
					_0x9f6cx5[_0x9f6cx6]['apply'](this, arguments)
				})
			}
		});
		_0x9f6cx3 && Ext['Object']['each'](_0x9f6cx3, function (_0x9f6cx7, _0x9f6cx6) {
			if (_0x9f6cx7 in _0x9f6cx2['prototype']) {
				_0x9f6cx2['addMember'](_0x9f6cx7, function () {
					this['callParent'](arguments);
					_0x9f6cx5[_0x9f6cx6]['apply'](this, arguments)
				})
			}
			else {
				_0x9f6cx2['addMember'](_0x9f6cx7, function () {
					_0x9f6cx5[_0x9f6cx6]['apply'](this, arguments)
				})
			}
		})
	}
});
Ext.define('Ext.ux.Gantt.column.Cost', {
	extend: 'Ext.grid.column.Column'
	, alias: ['widget.costcolumn', 'widget.ganttcolumn.cost']
	, requires: ['Ext.ux.Gantt.field.Cost']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, width: 80
	, align: 'left'
	, decimalPrecision: 2
	, instantUpdate: true
	, fieldProperty: 'costField'
	, fieldConfigs: ['instantUpdate', 'decimalPrecision', 'currencySymbol', 'currencySymbolAlign', 'fieldProperty']
	, currencySymbol: null
	, currencySymbolAlign: null
	, editor: 'costfield'
	, defaultEditor: 'costfield'
	, editorConfig: null
	, initComponent: function () {
		this['initTaskFieldColumn'](this['editorConfig']);
		this['callParent'](arguments)
	}
	, getValueToRender: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return this['field']['valueToVisible'](_0x9f6cx2)
	}
	, putRawData: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1['set'](_0x9f6cx1[this['fieldProperty']], _0x9f6cx2)
	}
});
Ext.define('Ext.ux.Gantt.field.ActualCost', {
	extend: 'Ext.ux.Gantt.field.Cost'
	, alias: 'widget.actualcostfield'
	, alternateClassName: 'Ext.ux.Gantt.widget.ActualCostField'
	, taskField: 'actualCostField'
	, setTaskValueMethod: 'setActualCost'
	, getTaskValueMethod: 'getActualCost'
});
Ext.define('Ext.ux.Gantt.column.ActualCost', {
	extend: 'Ext.ux.Gantt.column.Cost'
	, alias: ['widget.actualcostcolumn', 'widget.ganttcolumn.actualcost']
	, requires: ['Ext.ux.Gantt.field.ActualCost']
	, fieldProperty: 'actualCostField'
	, editor: 'actualcostfield'
	, defaultEditor: 'actualcostfield'
});
Ext.define('Ext.ux.Scheduler.util.Date', {
	requires: 'Ext.Date'
	, mixins: ['Ext.ux.Scheduler.mixin.Localizable']
	, singleton: true
	, stripEscapeRe: /(\\.)/g
	, hourInfoRe: /([gGhHisucUOPZ]|MS)/
	, unitHash: null
	, unitsByName: {}
	, MIN_VALUE: new Date(-8640000000000000)
	, MAX_VALUE: new Date(8640000000000000)
	, constructor: function () {
		var _0x9f6cx1 = Ext['Date'];
		var _0x9f6cx5 = this['unitHash'] = {
			MILLI: _0x9f6cx1['MILLI']
			, SECOND: _0x9f6cx1['SECOND']
			, MINUTE: _0x9f6cx1['MINUTE']
			, HOUR: _0x9f6cx1['HOUR']
			, DAY: _0x9f6cx1['DAY']
			, WEEK: 'w'
			, MONTH: _0x9f6cx1['MONTH']
			, QUARTER: 'q'
			, YEAR: _0x9f6cx1['YEAR']
		};
		Ext['apply'](this, _0x9f6cx5);
		var _0x9f6cx2 = this;
		this['units'] = [_0x9f6cx2['MILLI'], _0x9f6cx2['SECOND'], _0x9f6cx2['MINUTE'], _0x9f6cx2['HOUR'], _0x9f6cx2['DAY'], _0x9f6cx2['WEEK'], _0x9f6cx2['MONTH'], _0x9f6cx2['QUARTER'], _0x9f6cx2['YEAR']]
	}
	, onLocalized: function () {
		this['setUnitNames'](this.L('unitNames'))
	}
	, setUnitNames: function (_0x9f6cx4) {
		var _0x9f6cx3 = this['unitsByName'] = {};
		this['l10n']['unitNames'] = _0x9f6cx4;
		this['_unitNames'] = Ext['apply']({}, _0x9f6cx4);
		var _0x9f6cx2 = this['unitHash'];
		for (var _0x9f6cx1 in _0x9f6cx2) {
			if (_0x9f6cx2['hasOwnProperty'](_0x9f6cx1)) {
				var _0x9f6cx5 = _0x9f6cx2[_0x9f6cx1];
				this['_unitNames'][_0x9f6cx5] = this['_unitNames'][_0x9f6cx1];
				_0x9f6cx3[_0x9f6cx1] = _0x9f6cx5;
				_0x9f6cx3[_0x9f6cx5] = _0x9f6cx5
			}
		}
	}
	, betweenLesser: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return _0x9f6cx5 <= _0x9f6cx2 && _0x9f6cx2 < _0x9f6cx1
	}
	, betweenLesserEqual: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return _0x9f6cx5 <= _0x9f6cx2 && _0x9f6cx2 <= _0x9f6cx1
	}
	, constrain: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return this['min'](this['max'](_0x9f6cx2, _0x9f6cx5), _0x9f6cx1)
	}
	, compareUnits: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = Ext['Array']['indexOf'](this['units'], _0x9f6cx5)
			, _0x9f6cx3 = Ext['Array']['indexOf'](this['units'], _0x9f6cx2);
		return _0x9f6cx1 > _0x9f6cx3 ? 1 : (_0x9f6cx1 < _0x9f6cx3 ? -1 : 0)
	}
	, isUnitGreater: function (_0x9f6cx2, _0x9f6cx1) {
		return this['compareUnits'](_0x9f6cx2, _0x9f6cx1) > 0
	}
	, copyTimeValues: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx2['setHours'](_0x9f6cx1['getHours']());
		_0x9f6cx2['setMinutes'](_0x9f6cx1['getMinutes']());
		_0x9f6cx2['setSeconds'](_0x9f6cx1['getSeconds']());
		_0x9f6cx2['setMilliseconds'](_0x9f6cx1['getMilliseconds']())
	}
	, add: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx4) {
		var _0x9f6cx7 = Ext['Date']['clone'](_0x9f6cx2);
		if (!_0x9f6cx5 || _0x9f6cx4 === 0) {
			return _0x9f6cx7
		};
		switch (_0x9f6cx5['toLowerCase']()) {
		case this['MILLI']:
			_0x9f6cx7 = new Date(_0x9f6cx2['getTime']() + _0x9f6cx4);
			break;
		case this['SECOND']:
			_0x9f6cx7 = new Date(_0x9f6cx2['getTime']() + (_0x9f6cx4 * 1000));
			break;
		case this['MINUTE']:
			_0x9f6cx7 = new Date(_0x9f6cx2['getTime']() + (_0x9f6cx4 * 60000));
			break;
		case this['HOUR']:
			_0x9f6cx7 = new Date(_0x9f6cx2['getTime']() + (_0x9f6cx4 * 3600000));
			break;
		case this['DAY']:
			_0x9f6cx7['setDate'](_0x9f6cx2['getDate']() + _0x9f6cx4);
			if (_0x9f6cx7['getHours']() === 23 && _0x9f6cx2['getHours']() === 0) {
				_0x9f6cx7 = Ext['Date']['add'](_0x9f6cx7, Ext['Date'].HOUR, 1)
			};
			break;
		case this['WEEK']:
			_0x9f6cx7['setDate'](_0x9f6cx2['getDate']() + _0x9f6cx4 * 7);
			break;
		case this['MONTH']:
			var _0x9f6cx1 = _0x9f6cx2['getDate']();
			if (_0x9f6cx1 > 28) {
				_0x9f6cx1 = Math['min'](_0x9f6cx1, Ext['Date']['getLastDateOfMonth'](this['add'](Ext['Date']['getFirstDateOfMonth'](_0x9f6cx2), this.MONTH, _0x9f6cx4))['getDate']())
			};
			_0x9f6cx7['setDate'](_0x9f6cx1);
			_0x9f6cx7['setMonth'](_0x9f6cx7['getMonth']() + _0x9f6cx4);
			break;
		case this['QUARTER']:
			_0x9f6cx7 = this['add'](_0x9f6cx2, this.MONTH, _0x9f6cx4 * 3);
			break;
		case this['YEAR']:
			_0x9f6cx7['setFullYear'](_0x9f6cx2['getFullYear']() + _0x9f6cx4);
			break
		};
		return _0x9f6cx7
	}
	, getUnitDurationInMs: function (_0x9f6cx1) {
		return this['add'](new Date(1, 0, 1), _0x9f6cx1, 1) - new Date(1, 0, 1)
	}
	, getMeasuringUnit: function (_0x9f6cx1) {
		if (_0x9f6cx1 === this['WEEK']) {
			return this['DAY']
		};
		return _0x9f6cx1
	}
	, getDurationInUnit: function (_0x9f6cx4, _0x9f6cx1, _0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx2;
		switch (_0x9f6cx5) {
		case this['YEAR']:
			_0x9f6cx2 = this['getDurationInYears'](_0x9f6cx4, _0x9f6cx1);
			break;
		case this['QUARTER']:
			_0x9f6cx2 = this['getDurationInMonths'](_0x9f6cx4, _0x9f6cx1) / 3;
			break;
		case this['MONTH']:
			_0x9f6cx2 = this['getDurationInMonths'](_0x9f6cx4, _0x9f6cx1);
			break;
		case this['WEEK']:
			_0x9f6cx2 = this['getDurationInDays'](_0x9f6cx4, _0x9f6cx1) / 7;
			break;
		case this['DAY']:
			_0x9f6cx2 = this['getDurationInDays'](_0x9f6cx4, _0x9f6cx1);
			break;
		case this['HOUR']:
			_0x9f6cx2 = this['getDurationInHours'](_0x9f6cx4, _0x9f6cx1);
			break;
		case this['MINUTE']:
			_0x9f6cx2 = this['getDurationInMinutes'](_0x9f6cx4, _0x9f6cx1);
			break;
		case this['SECOND']:
			_0x9f6cx2 = this['getDurationInSeconds'](_0x9f6cx4, _0x9f6cx1);
			break;
		case this['MILLI']:
			_0x9f6cx2 = this['getDurationInMilliseconds'](_0x9f6cx4, _0x9f6cx1);
			break
		};
		return _0x9f6cx3 ? _0x9f6cx2 : Math['round'](_0x9f6cx2)
	}
	, getUnitToBaseUnitRatio: function (_0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx2 === _0x9f6cx1) {
			return 1
		};
		switch (_0x9f6cx2) {
		case this['YEAR']:
			switch (_0x9f6cx1) {
			case this['QUARTER']:
				return 1 / 4;
			case this['MONTH']:
				return 1 / 12
			};
			break;
		case this['QUARTER']:
			switch (_0x9f6cx1) {
			case this['YEAR']:
				return 4;
			case this['MONTH']:
				return 1 / 3
			};
			break;
		case this['MONTH']:
			switch (_0x9f6cx1) {
			case this['YEAR']:
				return 12;
			case this['QUARTER']:
				return 3
			};
			break;
		case this['WEEK']:
			switch (_0x9f6cx1) {
			case this['DAY']:
				return 1 / 7;
			case this['HOUR']:
				return 1 / 168
			};
			break;
		case this['DAY']:
			switch (_0x9f6cx1) {
			case this['WEEK']:
				return 7;
			case this['HOUR']:
				return 1 / 24;
			case this['MINUTE']:
				return 1 / 1440
			};
			break;
		case this['HOUR']:
			switch (_0x9f6cx1) {
			case this['DAY']:
				return 24;
			case this['MINUTE']:
				return 1 / 60
			};
			break;
		case this['MINUTE']:
			switch (_0x9f6cx1) {
			case this['HOUR']:
				return 60;
			case this['SECOND']:
				return 1 / 60;
			case this['MILLI']:
				return 1 / 60000
			};
			break;
		case this['SECOND']:
			switch (_0x9f6cx1) {
			case this['MILLI']:
				return 1 / 1000
			};
			break;
		case this['MILLI']:
			switch (_0x9f6cx1) {
			case this['SECOND']:
				return 1000
			};
			break
		};
		return -1
	}
	, isUnitDivisibleIntoSubunit: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = _0x9f6cx2 === this['MONTH'] && _0x9f6cx1 === this['WEEK'];
		return !_0x9f6cx5
	}
	, getDurationInMilliseconds: function (_0x9f6cx2, _0x9f6cx1) {
		return (_0x9f6cx1 - _0x9f6cx2)
	}
	, getDurationInSeconds: function (_0x9f6cx2, _0x9f6cx1) {
		return (_0x9f6cx1 - _0x9f6cx2) / 1000
	}
	, getDurationInMinutes: function (_0x9f6cx2, _0x9f6cx1) {
		return (_0x9f6cx1 - _0x9f6cx2) / 60000
	}
	, getDurationInHours: function (_0x9f6cx2, _0x9f6cx1) {
		return (_0x9f6cx1 - _0x9f6cx2) / 3600000
	}
	, getDurationInDays: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx5['getTimezoneOffset']() - _0x9f6cx2['getTimezoneOffset']();
		return (_0x9f6cx2 - _0x9f6cx5 + _0x9f6cx1 * 60 * 1000) / 86400000
	}
	, getDurationInMonths: function (_0x9f6cx2, _0x9f6cx1) {
		return ((_0x9f6cx1['getFullYear']() - _0x9f6cx2['getFullYear']()) * 12) + (_0x9f6cx1['getMonth']() - _0x9f6cx2['getMonth']())
	}
	, getDurationInYears: function (_0x9f6cx2, _0x9f6cx1) {
		return this['getDurationInMonths'](_0x9f6cx2, _0x9f6cx1) / 12
	}
	, min: function (_0x9f6cx2, _0x9f6cx1) {
		return (_0x9f6cx2 && _0x9f6cx2.valueOf() || _0x9f6cx2) < (_0x9f6cx1 && _0x9f6cx1.valueOf() || _0x9f6cx1) ? _0x9f6cx2 : _0x9f6cx1
	}
	, max: function (_0x9f6cx2, _0x9f6cx1) {
		return (_0x9f6cx2 && _0x9f6cx2.valueOf() || _0x9f6cx2) > (_0x9f6cx1 && _0x9f6cx1.valueOf() || _0x9f6cx1) ? _0x9f6cx2 : _0x9f6cx1
	}
	, intersectSpans: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx2, _0x9f6cx1) {
		return this['betweenLesser'](_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) || this['betweenLesser'](_0x9f6cx2, _0x9f6cx5, _0x9f6cx3)
	}
	, getNameOfUnit: function (_0x9f6cx1) {
		_0x9f6cx1 = this['getUnitByName'](_0x9f6cx1);
		switch (_0x9f6cx1['toLowerCase']()) {
		case this['YEAR']:
			return 'YEAR';
		case this['QUARTER']:
			return 'QUARTER';
		case this['MONTH']:
			return 'MONTH';
		case this['WEEK']:
			return 'WEEK';
		case this['DAY']:
			return 'DAY';
		case this['HOUR']:
			return 'HOUR';
		case this['MINUTE']:
			return 'MINUTE';
		case this['SECOND']:
			return 'SECOND';
		case this['MILLI']:
			return 'MILLI'
		};
		throw 'Incorrect UnitName'
	}
	, getReadableNameOfUnit: function (_0x9f6cx2, _0x9f6cx1) {
		if (!this['isLocaleApplied']()) {
			this['applyLocale']()
		};
		return this['_unitNames'][_0x9f6cx2][_0x9f6cx1 ? 'plural' : 'single']
	}
	, getShortNameOfUnit: function (_0x9f6cx1) {
		if (!this['isLocaleApplied']()) {
			this['applyLocale']()
		};
		return this['_unitNames'][_0x9f6cx1]['abbrev']
	}
	, getUnitByName: function (_0x9f6cx1) {
		if (!this['isLocaleApplied']()) {
			this['applyLocale']()
		};
		if (!this['unitsByName'][_0x9f6cx1]) {
			Ext['Error']['raise']('Unknown unit name: ' + _0x9f6cx1)
		};
		return this['unitsByName'][_0x9f6cx1]
	}
	, getNext: function (_0x9f6cx5, _0x9f6cx6, _0x9f6cx1, _0x9f6cx7) {
		var _0x9f6cx4 = Ext['Date']['clone'](_0x9f6cx5);
		_0x9f6cx7 = arguments['length'] < 4 ? 1 : _0x9f6cx7;
		_0x9f6cx1 = _0x9f6cx1 == null ? 1 : _0x9f6cx1;
		switch (_0x9f6cx6) {
		case this['MILLI']:
			_0x9f6cx4 = this['add'](_0x9f6cx5, _0x9f6cx6, _0x9f6cx1);
			break;
		case this['SECOND']:
			_0x9f6cx4 = this['add'](_0x9f6cx5, _0x9f6cx6, _0x9f6cx1);
			if (_0x9f6cx4['getMilliseconds']() > 0) {
				_0x9f6cx4['setMilliseconds'](0)
			};
			break;
		case this['MINUTE']:
			_0x9f6cx4 = this['add'](_0x9f6cx5, _0x9f6cx6, _0x9f6cx1);
			if (_0x9f6cx4['getSeconds']() > 0) {
				_0x9f6cx4['setSeconds'](0)
			};
			if (_0x9f6cx4['getMilliseconds']() > 0) {
				_0x9f6cx4['setMilliseconds'](0)
			};
			break;
		case this['HOUR']:
			_0x9f6cx4 = this['add'](_0x9f6cx5, _0x9f6cx6, _0x9f6cx1);
			if (_0x9f6cx4['getMinutes']() > 0) {
				_0x9f6cx4['setMinutes'](0)
			};
			if (_0x9f6cx4['getSeconds']() > 0) {
				_0x9f6cx4['setSeconds'](0)
			};
			if (_0x9f6cx4['getMilliseconds']() > 0) {
				_0x9f6cx4['setMilliseconds'](0)
			};
			break;
		case this['DAY']:
			var _0x9f6cx3 = _0x9f6cx5['getHours']() === 23 && this['add'](_0x9f6cx4, this.HOUR, 1)['getHours']() === 1;
			if (_0x9f6cx3) {
				_0x9f6cx4 = this['add'](_0x9f6cx4, this.DAY, 2);
				this['clearTime'](_0x9f6cx4);
				return _0x9f6cx4
			};
			this['clearTime'](_0x9f6cx4);
			_0x9f6cx4 = this['add'](_0x9f6cx4, this.DAY, _0x9f6cx1);
			if (_0x9f6cx4['getHours']() === 1) {
				this['clearTime'](_0x9f6cx4)
			};
			break;
		case this['WEEK']:
			this['clearTime'](_0x9f6cx4);
			var _0x9f6cx2 = _0x9f6cx4['getDay']();
			_0x9f6cx4 = this['add'](_0x9f6cx4, this.DAY, _0x9f6cx7 - _0x9f6cx2 + 7 * (_0x9f6cx1 - (_0x9f6cx7 <= _0x9f6cx2 ? 0 : 1)));
			if (_0x9f6cx4['getDay']() !== _0x9f6cx7) {
				_0x9f6cx4 = this['add'](_0x9f6cx4, this.HOUR, 1)
			}
			else {
				this['clearTime'](_0x9f6cx4)
			};
			break;
		case this['MONTH']:
			_0x9f6cx4 = this['add'](_0x9f6cx4, this.MONTH, _0x9f6cx1);
			_0x9f6cx4['setDate'](1);
			this['clearTime'](_0x9f6cx4);
			break;
		case this['QUARTER']:
			_0x9f6cx4 = this['add'](_0x9f6cx4, this.MONTH, ((_0x9f6cx1 - 1) * 3) + (3 - (_0x9f6cx4['getMonth']() % 3)));
			this['clearTime'](_0x9f6cx4);
			_0x9f6cx4['setDate'](1);
			break;
		case this['YEAR']:
			_0x9f6cx4 = new Date(_0x9f6cx4['getFullYear']() + _0x9f6cx1, 0, 1);
			break;
		default:
			throw new Error('Invalid date unit' + _0x9f6cx6)
		};
		return _0x9f6cx4
	}
	, getNumberOfMsFromTheStartOfDay: function (_0x9f6cx1) {
		return _0x9f6cx1 - this['clearTime'](_0x9f6cx1, true) || 86400000
	}
	, getNumberOfMsTillTheEndOfDay: function (_0x9f6cx1) {
		return this['getStartOfNextDay'](_0x9f6cx1, true) - _0x9f6cx1
	}
	, getStartOfNextDay: function (_0x9f6cx2, _0x9f6cx7, _0x9f6cx4) {
		var _0x9f6cx3 = this['add'](_0x9f6cx4 ? _0x9f6cx2 : this['clearTime'](_0x9f6cx2, _0x9f6cx7), this.DAY, 1);
		if (_0x9f6cx3['getDate']() == _0x9f6cx2['getDate']()) {
			var _0x9f6cx5 = this['add'](this['clearTime'](_0x9f6cx2, _0x9f6cx7), this.DAY, 2)['getTimezoneOffset']();
			var _0x9f6cx1 = _0x9f6cx2['getTimezoneOffset']();
			_0x9f6cx3 = this['add'](_0x9f6cx3, this.MINUTE, _0x9f6cx1 - _0x9f6cx5)
		};
		return _0x9f6cx3
	}
	, getEndOfPreviousDay: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = _0x9f6cx5 ? _0x9f6cx2 : this['clearTime'](_0x9f6cx2, true);
		if (_0x9f6cx1 - _0x9f6cx2) {
			return _0x9f6cx1
		}
		else {
			return this['add'](_0x9f6cx1, this.DAY, -1)
		}
	}
	, timeSpanContains: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx3, _0x9f6cx1) {
		return (_0x9f6cx3 - _0x9f6cx5) >= 0 && (_0x9f6cx2 - _0x9f6cx1) >= 0
	}
	, compareWithPrecision: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx7) {
		var _0x9f6cx3 = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cx2 = Ext['Date']
			, _0x9f6cx1;
		switch (_0x9f6cx7) {
		case _0x9f6cx3['DAY']:
			_0x9f6cx4 = Number(_0x9f6cx2['format'](_0x9f6cx4, 'Ymd'));
			_0x9f6cx5 = Number(_0x9f6cx2['format'](_0x9f6cx5, 'Ymd'));
			break;
		case _0x9f6cx3['WEEK']:
			_0x9f6cx4 = Number(_0x9f6cx2['format'](_0x9f6cx4, 'YmW'));
			_0x9f6cx5 = Number(_0x9f6cx2['format'](_0x9f6cx5, 'YmW'));
			break;
		case _0x9f6cx3['MONTH']:
			_0x9f6cx4 = Number(_0x9f6cx2['format'](_0x9f6cx4, 'Ym'));
			_0x9f6cx5 = Number(_0x9f6cx2['format'](_0x9f6cx5, 'Ym'));
			break;
		case _0x9f6cx3['QUARTER']:
			_0x9f6cx4 = _0x9f6cx4['getFullYear']() * 4 + Math['floor'](_0x9f6cx4['getMonth']() / 3);
			_0x9f6cx5 = _0x9f6cx5['getFullYear']() * 4 + Math['floor'](_0x9f6cx5['getMonth']() / 3);
			break;
		case _0x9f6cx3['YEAR']:
			_0x9f6cx4 = _0x9f6cx4['getFullYear']();
			_0x9f6cx5 = _0x9f6cx5['getFullYear']();
			break;
		default:
			;
		case _0x9f6cx3['MILLI']:
			;
		case _0x9f6cx3['SECOND']:
			;
		case _0x9f6cx3['MINUTE']:
			;
		case _0x9f6cx3['HOUR']:
			_0x9f6cx7 = _0x9f6cx7 && this['getUnitDurationInMs'](_0x9f6cx7) || 1;
			_0x9f6cx4 = Math['floor'](_0x9f6cx4.valueOf() / _0x9f6cx7);
			_0x9f6cx5 = Math['floor'](_0x9f6cx5.valueOf() / _0x9f6cx7);
			break
		};
		((_0x9f6cx4 < _0x9f6cx5) && (_0x9f6cx1 = -1)) || ((_0x9f6cx4 > _0x9f6cx5) && (_0x9f6cx1 = +1)) || (_0x9f6cx1 = 0);
		return _0x9f6cx1
	}
	, getValueInUnits: function (_0x9f6cx1, _0x9f6cx2) {
		switch (_0x9f6cx2) {
		case this['YEAR']:
			return _0x9f6cx1['getFullYear']();
		case this['QUARTER']:
			return Math['floor'](_0x9f6cx1['getMonth']() / 3) + 1;
		case this['MONTH']:
			return _0x9f6cx1['getMonth']();
		case this['WEEK']:
			return Ext['Date']['getWeekOfYear'](_0x9f6cx1);
		case this['DAY']:
			return _0x9f6cx1['getDate']();
		case this['HOUR']:
			return _0x9f6cx1['getHours']();
		case this['MINUTE']:
			return _0x9f6cx1['getMinutes']();
		case this['SECOND']:
			return _0x9f6cx1['getSeconds']()
		}
	}
	, setValueInUnits: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx4) {
		var _0x9f6cx1 = Ext['Date']['clone'](_0x9f6cx2)
			, _0x9f6cx3;
		switch (_0x9f6cx5) {
		case this['YEAR']:
			_0x9f6cx3 = 'setFullYear';
			break;
		case this['MONTH']:
			_0x9f6cx3 = 'setMonth';
			break;
		case this['DAY']:
			_0x9f6cx3 = 'setDate';
			break;
		case this['HOUR']:
			_0x9f6cx3 = 'setHours';
			break;
		case this['MINUTE']:
			_0x9f6cx3 = 'setMinutes';
			break;
		case this['SECOND']:
			_0x9f6cx3 = 'setSeconds';
			break;
		case this['MILLI']:
			_0x9f6cx3 = 'setMilliseconds';
			break
		};
		_0x9f6cx1[_0x9f6cx3](_0x9f6cx4);
		return _0x9f6cx1
	}
	, getSubUnit: function (_0x9f6cx1) {
		switch (_0x9f6cx1) {
		case this['YEAR']:
			return this['MONTH'];
		case this['MONTH']:
			return this['DAY'];
		case this['DAY']:
			return this['HOUR'];
		case this['HOUR']:
			return this['MINUTE'];
		case this['MINUTE']:
			return this['SECOND'];
		case this['SECOND']:
			return this['MILLI']
		}
	}
	, setValueInSubUnits: function (_0x9f6cx1, _0x9f6cx2, _0x9f6cx5) {
		_0x9f6cx2 = this['getSubUnit'](_0x9f6cx2);
		return this['setValueInUnits'](_0x9f6cx1, _0x9f6cx2, _0x9f6cx5)
	}
	, mergeDates: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx3 = Ext['Date']['clone'](_0x9f6cx5);
		switch (_0x9f6cx1) {
		case this['YEAR']:
			_0x9f6cx3['setFullYear'](_0x9f6cx2['getFullYear']());
		case this['MONTH']:
			_0x9f6cx3['setMonth'](_0x9f6cx2['getMonth']());
		case this['WEEK']:
			;
		case this['DAY']:
			if (_0x9f6cx1 === this['WEEK']) {
				_0x9f6cx3 = this['add'](_0x9f6cx3, this.DAY, _0x9f6cx2['getDay']() - _0x9f6cx3['getDay']())
			}
			else {
				_0x9f6cx3['setDate'](_0x9f6cx2['getDate']())
			};
		case this['HOUR']:
			_0x9f6cx3['setHours'](_0x9f6cx2['getHours']());
		case this['MINUTE']:
			_0x9f6cx3['setMinutes'](_0x9f6cx2['getMinutes']());
		case this['SECOND']:
			_0x9f6cx3['setSeconds'](_0x9f6cx2['getSeconds']());
		case this['MILLI']:
			_0x9f6cx3['setMilliseconds'](_0x9f6cx2['getMilliseconds']())
		};
		return _0x9f6cx3
	}
	, splitToSubUnits: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx1, _0x9f6cx2) {
		_0x9f6cx1 = _0x9f6cx1 || 1;
		_0x9f6cx2 = arguments['length'] < 4 ? 1 : _0x9f6cx2;
		switch (_0x9f6cx5) {
		case this['MONTH']:
			return this['splitMonth'](_0x9f6cx3, _0x9f6cx1, _0x9f6cx2);
		case this['WEEK']:
			;
		case this['DAY']:
			return this['splitDay'](_0x9f6cx3, _0x9f6cx1);
		default:
			break
		}
	}
	, splitYear: function (_0x9f6cx4, _0x9f6cx5) {
		var _0x9f6cx2 = this['clearTime'](_0x9f6cx4, true);
		_0x9f6cx2['setMonth'](0);
		_0x9f6cx2['setDate'](1);
		var _0x9f6cx1 = [];
		for (var _0x9f6cx3 = 0; _0x9f6cx3 <= 12; _0x9f6cx3 = _0x9f6cx3 + _0x9f6cx5) {
			_0x9f6cx1['push'](this['add'](_0x9f6cx2, this.MONTH, _0x9f6cx3))
		};
		return _0x9f6cx1
	}
	, splitMonth: function (_0x9f6cx8, _0x9f6cx5, _0x9f6cx6) {
		var _0x9f6cx2 = this['clearTime'](_0x9f6cx8, true);
		_0x9f6cx2['setDate'](1);
		_0x9f6cx2 = this['add'](_0x9f6cx2, this.DAY, _0x9f6cx6 - _0x9f6cx2['getDay']());
		var _0x9f6cx3 = Ext['Date']['clone'](_0x9f6cx2);
		var _0x9f6cx7 = this['add'](_0x9f6cx2, this.MONTH, 1);
		var _0x9f6cx1 = [];
		for (var _0x9f6cx4 = 0; _0x9f6cx3['getTime']() < _0x9f6cx7['getTime'](); _0x9f6cx4 = _0x9f6cx4 + _0x9f6cx5) {
			_0x9f6cx3 = this['add'](_0x9f6cx2, this.WEEK, _0x9f6cx4);
			_0x9f6cx1['push'](_0x9f6cx3)
		};
		return _0x9f6cx1
	}
	, splitWeek: function (_0x9f6cx7, _0x9f6cx5, _0x9f6cx4) {
		var _0x9f6cx2 = this['add'](_0x9f6cx7, this.DAY, _0x9f6cx4 - _0x9f6cx7['getDay']());
		_0x9f6cx2 = this['clearTime'](_0x9f6cx2);
		var _0x9f6cx1 = [];
		for (var _0x9f6cx3 = 0; _0x9f6cx3 <= 7; _0x9f6cx3 = _0x9f6cx3 + _0x9f6cx5) {
			_0x9f6cx1['push'](this['add'](_0x9f6cx2, this.DAY, _0x9f6cx3))
		};
		return _0x9f6cx1
	}
	, splitDay: function (_0x9f6cx4, _0x9f6cx2) {
		var _0x9f6cx3 = this['clearTime'](_0x9f6cx4, true);
		var _0x9f6cx1 = [];
		for (var _0x9f6cx5 = 0; _0x9f6cx5 <= 24; _0x9f6cx5 = _0x9f6cx5 + _0x9f6cx2) {
			_0x9f6cx1['push'](this['add'](_0x9f6cx3, this.HOUR, _0x9f6cx5))
		};
		return _0x9f6cx1
	}
	, splitHour: function (_0x9f6cx4, _0x9f6cx2) {
		var _0x9f6cx3 = new Date(_0x9f6cx4['getTime']());
		_0x9f6cx3['setMinutes'](0);
		_0x9f6cx3['setSeconds'](0);
		_0x9f6cx3['setMilliseconds'](0);
		var _0x9f6cx1 = [];
		for (var _0x9f6cx5 = 0; _0x9f6cx5 <= 60; _0x9f6cx5 = _0x9f6cx5 + _0x9f6cx2) {
			_0x9f6cx1['push'](this['add'](_0x9f6cx3, this.MINUTE, _0x9f6cx5))
		};
		return _0x9f6cx1
	}
	, splitMinute: function (_0x9f6cx4, _0x9f6cx2) {
		var _0x9f6cx3 = Ext['Date']['clone'](_0x9f6cx4);
		_0x9f6cx3['setSeconds'](0);
		_0x9f6cx3['setMilliseconds'](0);
		var _0x9f6cx1 = [];
		for (var _0x9f6cx5 = 0; _0x9f6cx5 <= 60; _0x9f6cx5 = _0x9f6cx5 + _0x9f6cx2) {
			_0x9f6cx1['push'](this['add'](_0x9f6cx3, this.SECOND, _0x9f6cx5))
		};
		return _0x9f6cx1
	}
	, clearTime: function (_0x9f6cx1, _0x9f6cx2) {
		if (_0x9f6cx1['getHours']() > 0 || _0x9f6cx1['getMinutes']() > 0 || _0x9f6cx1['getSeconds']() > 0) {
			return Ext['Date']['clearTime'](_0x9f6cx1, _0x9f6cx2)
		};
		return _0x9f6cx2 ? Ext['Date']['clone'](_0x9f6cx1) : _0x9f6cx1
	}
	, getWeekNumber: function (_0x9f6cx1) {
		var _0x9f6cx2 = new Date(_0x9f6cx1.valueOf());
		var _0x9f6cx5 = (_0x9f6cx1['getDay']() + 6) % 7;
		_0x9f6cx2['setDate'](_0x9f6cx2['getDate']() - _0x9f6cx5 + 3);
		var _0x9f6cx3 = _0x9f6cx2.valueOf();
		_0x9f6cx2['setMonth'](0, 1);
		if (_0x9f6cx2['getDay']() != 4) {
			_0x9f6cx2['setMonth'](0, 1 + ((4 - _0x9f6cx2['getDay']()) + 7) % 7)
		};
		return 1 + Math['ceil']((_0x9f6cx3 - _0x9f6cx2) / 604800000)
	}
	, getWeekStartDate: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this['setDateToMidday'](_0x9f6cx1, true);
		_0x9f6cx5 = typeof _0x9f6cx5 !== 'number' ? 1 : _0x9f6cx5;
		while (_0x9f6cx2['getDay']() !== _0x9f6cx5) {
			_0x9f6cx2 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].DAY, -1)
		};
		return _0x9f6cx2
	}
	, getWeekEndDate: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this['setDateToMidday'](_0x9f6cx2, true);
		_0x9f6cx1 = typeof _0x9f6cx1 !== 'number' ? 0 : _0x9f6cx1;
		while (_0x9f6cx5['getDay']() !== _0x9f6cx1) {
			_0x9f6cx5 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx5, Ext.ux.Scheduler['util']['Date'].DAY, 1)
		};
		return _0x9f6cx5
	}
	, setDateToHours: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (_0x9f6cx5) {
			return new Date(_0x9f6cx2['getFullYear'](), _0x9f6cx2['getMonth'](), _0x9f6cx2['getDate'](), _0x9f6cx1)
		};
		_0x9f6cx2['setHours'](_0x9f6cx1);
		_0x9f6cx2['setMinutes'](0);
		_0x9f6cx2['setSeconds'](0);
		_0x9f6cx2['setMilliseconds'](0);
		return _0x9f6cx2
	}
	, setDateToMidnight: function (_0x9f6cx1, _0x9f6cx2) {
		return this['setDateToHours'](_0x9f6cx1, _0x9f6cx2, 0)
	}
	, setDateToMidday: function (_0x9f6cx1, _0x9f6cx2) {
		return this['setDateToHours'](_0x9f6cx1, _0x9f6cx2, 12)
	}
	, isLaterDate: function (_0x9f6cx1, _0x9f6cx2) {
		return !this['isSameDate'](_0x9f6cx1, _0x9f6cx2) && _0x9f6cx1 > _0x9f6cx2
	}
	, isSameDate: function (_0x9f6cx1, _0x9f6cx2) {
		return _0x9f6cx1['getFullYear']() === _0x9f6cx2['getFullYear']() && _0x9f6cx1['getMonth']() === _0x9f6cx2['getMonth']() && _0x9f6cx1['getDate']() === _0x9f6cx2['getDate']()
	}
	, isEarlierDate: function (_0x9f6cx1, _0x9f6cx2) {
		return !this['isSameDate'](_0x9f6cx1, _0x9f6cx2) && _0x9f6cx1 < _0x9f6cx2
	}
});
Ext.define('Ext.ux.Gantt.util.DurationParser', {
	requires: ['Ext.ux.Scheduler.util.Date']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, parseNumberFn: null
	, durationRegex: null
	, allowDecimals: true
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1);
		if (this['unitsRegex']) {
			Ext['apply'](this['l10n']['unitsRegex'], this['unitsRegex'])
		};
		if (!this['durationRegex']) {
			this['durationRegex'] = this['allowDecimals'] ? /^\s*([\-+]?\d+(?:[.,]\d*)?|[\-+]?(?:[.,]\d+))\s*([^\s]+)?/i : /^\s*([\-+]?\d+)(?![.,])\s*([^\s]+)?/i
		}
	}
	, parse: function (_0x9f6cx5) {
		var _0x9f6cx1 = this['durationRegex']['exec'](_0x9f6cx5);
		if (_0x9f6cx5 == null || !_0x9f6cx1) {
			return null
		};
		var _0x9f6cx4 = this['parseNumberFn'](_0x9f6cx1[1]);
		var _0x9f6cx2 = _0x9f6cx1[2];
		var _0x9f6cx3;
		if (_0x9f6cx2) {
			Ext['iterate'](this.L('unitsRegex'), function (_0x9f6cx7, _0x9f6cx6) {
				if (_0x9f6cx6['test'](_0x9f6cx2)) {
					_0x9f6cx3 = Ext.ux.Scheduler['util']['Date']['getUnitByName'](_0x9f6cx7);
					return false
				}
			});
			if (!_0x9f6cx3) {
				return null
			}
		};
		return {
			value: _0x9f6cx4
			, unit: _0x9f6cx3
		}
	}
});
Ext.define('Ext.ux.Gantt.field.trigger.DurationSpinner', {
	extend: 'Ext.form.trigger.Spinner'
	, alias: 'trigger.gantt_durationspinner'
	, initEvents: function () {
		var _0x9f6cx3 = this
			, _0x9f6cx1 = _0x9f6cx3['isFieldEnabled']
			, _0x9f6cx5 = _0x9f6cx3['getStateEl']()
			, _0x9f6cx2 = _0x9f6cx3['el'];
		_0x9f6cx5['addClsOnOver'](_0x9f6cx3['overCls'], _0x9f6cx1, _0x9f6cx3);
		_0x9f6cx5['addClsOnClick'](_0x9f6cx3['clickCls'], _0x9f6cx1, _0x9f6cx3);
		if (_0x9f6cx3['repeatClick']) {
			_0x9f6cx3['clickRepeater'] = new Ext['util'].ClickRepeater(_0x9f6cx2, Ext['apply']({
				preventDefault: true
				, handler: _0x9f6cx3['onClick']
				, delay: Ext['isIE'] ? 1000 : 250
				, listeners: {
					mousedown: _0x9f6cx3['onClickRepeaterMouseDown']
					, scope: _0x9f6cx3
				}
				, scope: _0x9f6cx3
			}, this['repeaterConfig']))
		}
		else {
			_0x9f6cx3['field']['mon'](_0x9f6cx2, {
				click: _0x9f6cx3['onClick']
				, mousedown: _0x9f6cx3['onMouseDown']
				, scope: _0x9f6cx3
			})
		}
	}
	, onClick: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = arguments
			, _0x9f6cx3 = _0x9f6cx2['clickRepeater'] ? _0x9f6cx1[1] : _0x9f6cx1[0]
			, _0x9f6cx5 = _0x9f6cx2['field'];
		if (!_0x9f6cx5['readOnly'] && !_0x9f6cx5['disabled']) {
			if (_0x9f6cx2['upEl']['contains'](_0x9f6cx3['target'])) {
				Ext['callback'](_0x9f6cx2['upHandler'], _0x9f6cx2['scope'], [_0x9f6cx5, _0x9f6cx2, _0x9f6cx3], 0, _0x9f6cx5)
			}
			else {
				if (_0x9f6cx2['downEl']['contains'](_0x9f6cx3['target'])) {
					Ext['callback'](_0x9f6cx2['downHandler'], _0x9f6cx2['scope'], [_0x9f6cx5, _0x9f6cx2, _0x9f6cx3], 0, _0x9f6cx5)
				}
			}
		};
		!Ext['isIE'] && _0x9f6cx5['inputEl']['focus']()
	}
});
Ext.define('Ext.ux.Gantt.field.Duration', {
	extend: 'Ext.form.field.Number'
	, requires: ['Ext.ux.Gantt.util.DurationParser', 'Ext.ux.Gantt.field.trigger.DurationSpinner']
	, mixins: ['Ext.ux.Gantt.field.mixin.TaskField', 'Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.durationfield'
	, alternateClassName: 'Ext.ux.Gantt.widget.DurationField'
	, disableKeyFilter: true
	, allowExponential: false
	, minValue: 0
	, durationUnit: ''
	, config: {
		triggers: {
			spinner: {
				type: 'gantt_durationspinner'
				, upHandler: 'onSpinnerUpClick'
				, downHandler: 'onSpinnerDownClick'
				, scope: 'this'
			}
		}
	}
	, useAbbreviation: false
	, getDurationUnitMethod: 'getDurationUnit'
	, setTaskValueMethod: 'setDuration'
	, getTaskValueMethod: 'getDuration'
	, fieldProperty: 'durationField'
	, durationParser: null
	, durationParserConfig: null
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		Ext['apply'](this, _0x9f6cx1);
		this['originalDurationUnit'] = this['durationUnit'];
		this['durationParser'] = new Ext.ux.Gantt['util'].DurationParser(Ext['apply']({
			parseNumberFn: function () {
				return _0x9f6cx2['parseValue']['apply'](_0x9f6cx2, arguments)
			}
			, allowDecimals: this['decimalPrecision'] > 0
		}, this['durationParserConfig']));
		this['callParent'](arguments);
		this['invalidText'] = this.L('invalidText')
	}
	, onSetTask: function () {
		this['durationUnit'] = this['originalDurationUnit'] || this['task'][this['getDurationUnitMethod']]();
		var _0x9f6cx1 = this['getTaskValueMethod'] ? this['getTaskValue'](null, this['durationUnit']) : this['task']['get'](this['task'][this['fieldProperty']]);
		this['setValue'](_0x9f6cx1);
		this['setSpinUpEnabled'](_0x9f6cx1 == null || _0x9f6cx1 < this['maxValue'], true);
		this['setSpinDownEnabled'](_0x9f6cx1 > this['minValue'], true)
	}
	, rawToValue: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['parseDuration'](_0x9f6cx2);
		if (!_0x9f6cx1) {
			return null
		};
		this['durationUnit'] = _0x9f6cx1['unit'];
		return _0x9f6cx1['value'] != null ? _0x9f6cx1['value'] : null
	}
	, valueToVisible: function (_0x9f6cx5, _0x9f6cx3) {
		if (Ext['isNumber'](_0x9f6cx5)) {
			var _0x9f6cx2 = parseInt(_0x9f6cx5, 10)
				, _0x9f6cx1 = Ext['Number']['toFixed'](_0x9f6cx5, this['decimalPrecision']);
			return String(_0x9f6cx2 == _0x9f6cx1 ? _0x9f6cx2 : _0x9f6cx1)['replace']('.', this['decimalSeparator']) + ' ' + Ext.ux.Scheduler['util']['Date'][this['useAbbreviation'] ? 'getShortNameOfUnit' : 'getReadableNameOfUnit'](_0x9f6cx3 || this['durationUnit'], _0x9f6cx5 !== 1)
		};
		return ''
	}
	, valueToRaw: function (_0x9f6cx1) {
		return this['valueToVisible'](_0x9f6cx1, this['durationUnit'] || 'h', this['decimalPrecision'], this['useAbbreviation'])
	}
	, parseDuration: function (_0x9f6cx1) {
		if (_0x9f6cx1 == null) {
			return null
		};
		var _0x9f6cx2 = this['durationParser']['parse'](_0x9f6cx1);
		if (!_0x9f6cx2) {
			return null
		};
		_0x9f6cx2['unit'] = _0x9f6cx2['unit'] || this['durationUnit'];
		return _0x9f6cx2
	}
	, getDurationValue: function () {
		return this['parseDuration'](this['getRawValue']())
	}
	, getErrors: function (_0x9f6cx2) {
		var _0x9f6cx1;
		if (_0x9f6cx2) {
			_0x9f6cx1 = this['parseDuration'](_0x9f6cx2);
			if (!_0x9f6cx1) {
				return [this.L('invalidText')]
			};
			_0x9f6cx2 = _0x9f6cx1['value']
		};
		if (arguments['length'] > 0 && _0x9f6cx2 == null) {
			_0x9f6cx2 = ''
		};
		return this['callParent'](arguments)
	}
	, checkChange: function () {
		if (!this['suspendCheckChange']) {
			var _0x9f6cx3 = this
				, _0x9f6cx5 = _0x9f6cx3['getDurationValue']()
				, _0x9f6cx1 = _0x9f6cx3['lastValue'];
			var _0x9f6cx2 = _0x9f6cx5 && !_0x9f6cx1 || !_0x9f6cx5 && _0x9f6cx1 || _0x9f6cx5 && _0x9f6cx1 && (_0x9f6cx5['value'] != _0x9f6cx1['value'] || _0x9f6cx5['unit'] != _0x9f6cx1['unit']);
			if (_0x9f6cx2 && !_0x9f6cx3['isDestroyed']) {
				_0x9f6cx3['lastValue'] = _0x9f6cx5;
				_0x9f6cx3['fireEvent']('change', _0x9f6cx3, _0x9f6cx5, _0x9f6cx1);
				_0x9f6cx3['onChange'](_0x9f6cx5, _0x9f6cx1)
			}
		}
	}
	, getValue: function () {
		return this['value']
	}
	, applyChanges: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		this['setTaskValue'](_0x9f6cx1, this['getValue'](), this['durationUnit']);
		_0x9f6cx1['fireEvent']('taskupdated', _0x9f6cx1, this)
	}
	, onBlur: function (_0x9f6cx5) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['blurring'] = true;
		var _0x9f6cx1 = _0x9f6cx2['callParent'](arguments);
		_0x9f6cx2['blurring'] = false;
		return _0x9f6cx1
	}
	, setValue: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = _0x9f6cx2;
		if (Ext['isObject'](_0x9f6cx2)) {
			this['durationUnit'] = _0x9f6cx2['unit'];
			_0x9f6cx5 = _0x9f6cx2['value']
		};
		this['callParent']([_0x9f6cx5]);
		if (!this['readOnly'] && (_0x9f6cx1 || this['blurring'] || this['instantUpdate']) && !this['getSuppressTaskUpdate']() && this['task']) {
			this['applyChanges']()
		}
	}
	, assertValue: function () {
		var _0x9f6cx3 = this
			, _0x9f6cx1 = _0x9f6cx3['getValue']()
			, _0x9f6cx4 = _0x9f6cx3['durationUnit']
			, _0x9f6cx5 = _0x9f6cx3['getDurationValue']();
		if (this['isValid']()) {
			var _0x9f6cx2 = !_0x9f6cx5 && _0x9f6cx1 || _0x9f6cx5 && (_0x9f6cx5['value'] != _0x9f6cx1 || _0x9f6cx5['unit'] != _0x9f6cx4);
			if (_0x9f6cx2) {
				_0x9f6cx3['setValue'](_0x9f6cx5, true)
			}
		}
	}
	, beforeBlur: function () {
		this['assertValue']()
	}
	, onSpinUp: function () {
		var _0x9f6cx1 = this;
		if (!_0x9f6cx1['readOnly']) {
			var _0x9f6cx2 = _0x9f6cx1['getValue']() || 0;
			_0x9f6cx1['setSpinValue'](Ext['Number']['constrain'](_0x9f6cx2 + _0x9f6cx1['step'], _0x9f6cx1['minValue'], _0x9f6cx1['maxValue']))
		}
	}
	, onSpinDown: function () {
		var _0x9f6cx1 = this;
		if (!_0x9f6cx1['readOnly']) {
			var _0x9f6cx2 = _0x9f6cx1['getValue']() || 0;
			_0x9f6cx1['setSpinValue'](Ext['Number']['constrain'](_0x9f6cx2 - _0x9f6cx1['step'], _0x9f6cx1['minValue'], _0x9f6cx1['maxValue']))
		}
	}
});
Ext.define('Ext.ux.Gantt.column.Duration', {
	extend: 'Ext.grid.column.Column'
	, alias: ['widget.durationcolumn', 'widget.ganttcolumn.duration']
	, requires: ['Ext.ux.Gantt.field.Duration']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, isDurationColumn: true
	, width: 80
	, align: 'left'
	, decimalPrecision: 2
	, useAbbreviation: false
	, instantUpdate: true
	, fieldProperty: 'durationField'
	, fieldConfigs: ['instantUpdate', 'useAbbreviation', 'decimalPrecision', 'fieldProperty']
	, editor: 'durationfield'
	, defaultEditor: 'durationfield'
	, initComponent: function () {
		this['initTaskFieldColumn']();
		this['callParent'](arguments)
	}
	, afterRender: function () {
		this['callParent'](arguments);
		this['setSorter'](Ext['Function']['bind'](this['sorterFn'], this))
	}
	, getValueToRender: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		if (!Ext['isNumber'](_0x9f6cx5)) {
			return ''
		};
		var _0x9f6cx2 = this['field']['originalDurationUnit'] || _0x9f6cx1['getDurationUnit']();
		_0x9f6cx5 = _0x9f6cx1['getDuration'](_0x9f6cx2);
		return this['field']['valueToVisible'](_0x9f6cx5, _0x9f6cx2)
	}
	, putRawData: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1['setDuration'](_0x9f6cx2)
	}
	, sorterFn: function (_0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx2 = _0x9f6cx3['getCalendar']()['convertDurationToMs'](_0x9f6cx3['getDuration'](), _0x9f6cx3['getDurationUnit']())
			, _0x9f6cx1 = _0x9f6cx5['getCalendar']()['convertDurationToMs'](_0x9f6cx5['getDuration'](), _0x9f6cx5['getDurationUnit']());
		return _0x9f6cx2 < _0x9f6cx1 ? -1 : 1
	}
});
Ext.define('Ext.ux.Gantt.field.Effort', {
	extend: 'Ext.ux.Gantt.field.Duration'
	, alias: 'widget.effortfield'
	, alternateClassName: 'Ext.ux.Gantt.widget.EffortField'
	, fieldProperty: 'effortField'
	, getDurationUnitMethod: 'getEffortUnit'
	, setTaskValueMethod: 'setEffort'
	, getTaskValueMethod: 'getEffort'
	, applyChanges: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		this['setTaskValue'](_0x9f6cx1, this['getValue']() || null, this['durationUnit']);
		_0x9f6cx1['fireEvent']('taskupdated', _0x9f6cx1, this)
	}
});
Ext.define('Ext.ux.Gantt.field.ActualEffort', {
	extend: 'Ext.ux.Gantt.field.Effort'
	, alias: 'widget.actualeffortfield'
	, alternateClassName: 'Ext.ux.Gantt.widget.ActualEffortField'
	, taskField: 'actualEffortField'
	, setTaskValueMethod: 'setActualEffort'
	, getTaskValueMethod: 'getActualEffort'
});
Ext.define('Ext.ux.Gantt.column.ActualEffort', {
	extend: 'Ext.ux.Gantt.column.Duration'
	, alias: ['widget.actualeffortcolumn', 'widget.ganttcolumn.actualeffort']
	, requires: ['Ext.ux.Gantt.field.ActualEffort']
	, fieldProperty: 'actualEffortField'
	, editor: 'actualeffortfield'
	, defaultEditor: 'actualeffortfield'
	, getValueToRender: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (!Ext['isNumber'](_0x9f6cx2)) {
			return ''
		};
		return this['field']['valueToVisible'](_0x9f6cx2, _0x9f6cx1['getEffortUnit']())
	}
	, putRawData: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1['setActualEffort'](_0x9f6cx2)
	}
});
Ext.define('Ext.ux.Gantt.field.Percent', {
	extend: 'Ext.form.field.Number'
	, alias: 'widget.percentfield'
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alternateClassName: 'Ext.ux.Gantt.widget.PercentField'
	, disableKeyFilter: false
	, minValue: 0
	, maxValue: 100
	, allowExponential: false
	, baseChars: '0123456789%'
	, constructor: function () {
		this['callParent'](arguments);
		this['invalidText'] = this.L('invalidText')
	}
	, valueToRaw: function (_0x9f6cx1) {
		if (Ext['isNumber'](_0x9f6cx1)) {
			return parseFloat(Ext['Number']['toFixed'](_0x9f6cx1, this['decimalPrecision'])) + '%'
		};
		return ''
	}
	, getErrors: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['parseValue'](_0x9f6cx2);
		if (_0x9f6cx1 === null) {
			if (_0x9f6cx2 !== null && _0x9f6cx2 !== '') {
				return [this['invalidText']]
			}
			else {
				_0x9f6cx1 = ''
			}
		};
		return this['callParent']([_0x9f6cx1])
	}
});
Ext.define('Ext.ux.Gantt.column.AssignmentUnits', {
	extend: 'Ext.grid.column.Number'
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, requires: ['Ext.ux.Gantt.field.Percent']
	, alias: 'widget.assignmentunitscolumn'
	, dataIndex: 'Units'
	, format: '0 %'
	, align: 'left'
	, editor: {
		xtype: 'percentfield'
		, minValue: 0
		, maxValue: undefined
		, step: 10
		, selectOnFocus: Ext['isIE'] ? false : true
	}
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		this['text'] = _0x9f6cx1['text'] || this.L('text');
		this['scope'] = this;
		this['callParent'](arguments)
	}
	, renderer: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (_0x9f6cx2) {
			return Ext['util']['Format']['number'](_0x9f6cx2, this['format'])
		}
	}
});
Ext.define('Ext.ux.Gantt.field.Date', {
	extend: 'Ext.form.field.Date'
	, mixins: ['Ext.ux.Gantt.field.mixin.TaskField', 'Ext.ux.Gantt.mixin.Localizable']
	, adjustMilestones: true
	, keepDuration: false
	, reAssertValue: true
	, keepTime: true
	, onExpand: function () {
		var _0x9f6cx1 = this['valueToVisible'](this['getValue']());
		this['_expanding'] = false;
		if (!this['isValid']()) {
			_0x9f6cx1 = this['getRawValue']();
			if (_0x9f6cx1) {
				_0x9f6cx1 = Ext['Date']['parse'](_0x9f6cx1, this['format'])
			}
		};
		this['picker']['setValue'](Ext['isDate'](_0x9f6cx1) ? _0x9f6cx1 : new Date())
	}
	, applyKeptTimeToValue: function (_0x9f6cx1) {
		if (this['keepTime'] && !Ext['Date']['formatContainsHourInfo'](this['format'])) {
			this['applyTimeToValue'](_0x9f6cx1, this['getTaskValue']())
		};
		return _0x9f6cx1
	}
	, applyTimeToValue: function (_0x9f6cx1, _0x9f6cx2) {
		_0x9f6cx2 = _0x9f6cx2 || this['getTaskValue']();
		if (Ext['isDate'](_0x9f6cx1) && _0x9f6cx2) {
			_0x9f6cx1['setHours'](_0x9f6cx2['getHours']());
			_0x9f6cx1['setMinutes'](_0x9f6cx2['getMinutes']())
		};
		return _0x9f6cx1
	}
	, onSelect: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx3 = this;
		if (this['keepTime'] || Ext['Date']['formatContainsHourInfo'](this['format'])) {
			_0x9f6cx3['applyTimeToValue'](_0x9f6cx1, this['getTaskValue']())
		};
		var _0x9f6cx2 = _0x9f6cx3['getValue']();
		var _0x9f6cx7 = this['visibleToValue'](_0x9f6cx1);
		var _0x9f6cx4 = Ext['Date']['format'](_0x9f6cx1, this['format']);
		if (_0x9f6cx2 != _0x9f6cx7) {
			if (this['getErrors'](_0x9f6cx4)['length'] > 0) {
				_0x9f6cx3['setRawValue'](_0x9f6cx4);
				_0x9f6cx3['collapse']();
				_0x9f6cx3['validate']()
			}
			else {
				_0x9f6cx3['setValue'](_0x9f6cx7, true);
				_0x9f6cx3['fireEvent']('select', _0x9f6cx3, _0x9f6cx7);
				if (Ext['getVersion']()['isGreaterThan']('6.0.1')) {
					_0x9f6cx3['onTabOut'](_0x9f6cx5)
				}
				else {
					_0x9f6cx3['inputEl']['focus']();
					_0x9f6cx3['collapse']()
				}
			}
		}
	}
	, setValue: function (_0x9f6cx5, _0x9f6cx2) {
		if (this['_expanding']) {
			return
		};
		this['callParent']([_0x9f6cx5]);
		var _0x9f6cx1 = this['task'];
		if (!this['readOnly'] && (_0x9f6cx2 || this['instantUpdate']) && !this['getSuppressTaskUpdate']() && _0x9f6cx1 && _0x9f6cx1['taskStore'] && _0x9f6cx5 && (!this['validateOnBlur'] || this['isValid']())) {
			this['applyChanges']();
			if (this['reAssertValue']) {
				var _0x9f6cx3 = this['getTaskValue']();
				if (_0x9f6cx3 - this['getValue']() !== 0) {
					this['callParent']([_0x9f6cx3])
				}
			};
			_0x9f6cx1['fireEvent']('taskupdated', _0x9f6cx1, this)
		}
	}
	, rawToValue: function (_0x9f6cx2) {
		if (!_0x9f6cx2) {
			return null
		};
		var _0x9f6cx1 = this['applyKeptTimeToValue'](this['parseDate'](_0x9f6cx2));
		return this['visibleToValue'](_0x9f6cx1) || _0x9f6cx2 || null
	}
	, valueToRaw: function (_0x9f6cx1) {
		if (!_0x9f6cx1) {
			return _0x9f6cx1
		};
		return Ext['Date']['format'](this['valueToVisible'](_0x9f6cx1), this['format'])
	}
	, getValue: function () {
		return Ext['isEmpty'](this['value']) ? null : this['value']
	}
	, visibleToValue: function () {
		throw 'Abstract visibleToValue method called'
	}
	, valueToVisible: function () {
		throw 'Abstract valueToVisible method called'
	}
	, checkChange: function () {
		if (!this['suspendCheckChange']) {
			var _0x9f6cx5 = this
				, _0x9f6cx2 = _0x9f6cx5['rawToValue']((_0x9f6cx5['inputEl'] ? _0x9f6cx5['inputEl']['getValue']() : Ext['valueFrom'](_0x9f6cx5['rawValue'], '')))
				, _0x9f6cx1 = _0x9f6cx5['lastValue'];
			if (!_0x9f6cx5['isEqual'](_0x9f6cx2, _0x9f6cx1) && !_0x9f6cx5['isDestroyed']) {
				_0x9f6cx5['lastValue'] = _0x9f6cx2;
				_0x9f6cx5['fireEvent']('change', _0x9f6cx5, _0x9f6cx2, _0x9f6cx1);
				_0x9f6cx5['onChange'](_0x9f6cx2, _0x9f6cx1)
			}
		}
	}
	, assertValue: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx3 = _0x9f6cx5['rawValue']
			, _0x9f6cx7 = _0x9f6cx5['getRawValue']()
			, _0x9f6cx1 = _0x9f6cx5['getValue']()
			, _0x9f6cx4 = _0x9f6cx5['rawToValue'](_0x9f6cx7)
			, _0x9f6cx2 = _0x9f6cx5['focusTask'];
		if (_0x9f6cx2) {
			_0x9f6cx2['cancel']()
		};
		if ((_0x9f6cx3 != _0x9f6cx7) || (_0x9f6cx4 - _0x9f6cx1 !== 0)) {
			if (!_0x9f6cx5['validateOnBlur'] || _0x9f6cx5['isValid']()) {
				_0x9f6cx5['setValue'](_0x9f6cx4, true)
			}
		}
	}
	, applyChanges: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		var _0x9f6cx2 = _0x9f6cx1['getTaskStore'](true) || this['taskStore'];
		if (this['value']) {
			this['setTaskValue'](_0x9f6cx1, this['value'], this['keepDuration'], _0x9f6cx2['skipWeekendsDuringDragDrop'])
		}
		else {
			this['setTaskValue'](_0x9f6cx1, null)
		}
	}
	, expand: function () {
		this['_expanding'] = true;
		this['callParent'](arguments)
	}
	, beforeBlur: function () {
		this['assertValue']()
	}
});
Ext.define('Ext.ux.Gantt.field.EndDate', {
	extend: 'Ext.ux.Gantt.field.Date'
	, requires: ['Ext.ux.Scheduler.util.Date']
	, alias: 'widget.enddatefield'
	, fieldProperty: 'endDateField'
	, getTaskValueMethod: 'getEndDate'
	, setTaskValueMethod: 'setEndDate'
	, validateStartDate: true
	, isBaseline: false
	, valueToVisible: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		return _0x9f6cx1 && _0x9f6cx1['getDisplayEndDate'](this['format'], this['adjustMilestones'], _0x9f6cx2, true, this['isBaseline'])
	}
	, visibleToValue: function (_0x9f6cx5, _0x9f6cx1) {
		if (_0x9f6cx5) {
			var _0x9f6cx2 = this;
			_0x9f6cx1 = _0x9f6cx1 || _0x9f6cx2['task'];
			if (_0x9f6cx5 && (!_0x9f6cx1['isMilestone'](_0x9f6cx2['isBaseline']) || _0x9f6cx2['adjustMilestones']) && _0x9f6cx5 - Ext['Date']['clearTime'](_0x9f6cx5, true) === 0 && !Ext['Date']['formatContainsHourInfo'](_0x9f6cx2['format'])) {
				_0x9f6cx5 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx5, Ext.ux.Scheduler['util']['Date'].DAY, 1)
			}
		}
		else {
			_0x9f6cx5 = null
		};
		return _0x9f6cx5
	}
	, isValidAgainstStartDate: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['task'];
		return !_0x9f6cx1 || !_0x9f6cx2 || (!_0x9f6cx1['getDuration']() ? _0x9f6cx2 >= _0x9f6cx1['getStartDate']() : _0x9f6cx2 > _0x9f6cx1['getStartDate']())
	}
	, getErrors: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['callParent'](arguments);
		if (_0x9f6cx2 && _0x9f6cx2['length']) {
			return _0x9f6cx2
		};
		if (this['validateStartDate']) {
			if (!this['isValidAgainstStartDate'](this['rawToValue'](_0x9f6cx1))) {
				return [this.L('endBeforeStartText')]
			}
		};
		return []
	}
});
Ext.define('Ext.ux.Gantt.column.EndDate', {
	extend: 'Ext.grid.column.Date'
	, alias: ['widget.enddatecolumn', 'widget.ganttcolumn.enddate']
	, requires: ['Ext.grid.CellEditor', 'Ext.ux.Gantt.field.EndDate']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, isEndDateColumn: true
	, width: 100
	, align: 'left'
	, editorFormat: null
	, adjustMilestones: true
	, validateStartDate: true
	, keepDuration: false
	, fieldProperty: 'endDateField'
	, fieldConfigs: ['instantUpdate', 'adjustMilestones', 'keepDuration', 'validateStartDate', 'fieldProperty']
	, editor: 'enddatefield'
	, defaultEditor: 'enddatefield'
	, initComponent: function () {
		this['initTaskFieldColumn']({
			format: this['editorFormat'] || this['format'] || Ext['Date']['defaultFormat']
		});
		this['callParent'](arguments)
	}
	, getValueToRender: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return _0x9f6cx2 && Ext['Date']['format'](this['field']['valueToVisible'](_0x9f6cx2, _0x9f6cx1), this['format']) || ''
	}
	, getRawData: function (_0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx1['getEndDate']();
		return _0x9f6cx2 ? new Date(this['getValueToRender'](_0x9f6cx2, null, _0x9f6cx1)) : null
	}
	, prepareNewEndDate: function (_0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx2) {
			if (!(_0x9f6cx2 instanceof Date)) {
				_0x9f6cx2 = Ext['Date']['parse'](_0x9f6cx2, this['format'])
			};
			_0x9f6cx2 = this['field']['visibleToValue'](_0x9f6cx2, _0x9f6cx1)
		};
		return _0x9f6cx2
	}
	, putRawData: function (_0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx2) {
			_0x9f6cx2 = this['prepareNewEndDate'](_0x9f6cx2, _0x9f6cx1);
			if (_0x9f6cx1['getStartDate']() && _0x9f6cx1['getStartDate']() > _0x9f6cx2) {
				_0x9f6cx1['setDuration'](0)
			}
		};
		_0x9f6cx1['setEndDate'](_0x9f6cx2, _0x9f6cx1['isMilestone'](), false)
	}
});
Ext.define('Ext.ux.Gantt.field.BaselineEndDate', {
	extend: 'Ext.ux.Gantt.field.EndDate'
	, alias: 'widget.baselineenddatefield'
	, fieldProperty: 'baselineEndDateField'
	, getTaskValueMethod: 'getBaselineEndDate'
	, setTaskValueMethod: 'setBaselineEndDate'
	, isBaseline: true
	, isValidAgainstStartDate: function (_0x9f6cx1) {
		return !this['task'] || !_0x9f6cx1 || _0x9f6cx1 >= this['task']['getBaselineStartDate']()
	}
	, applyChanges: function (_0x9f6cx1, _0x9f6cx2) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		this['setTaskValue'](_0x9f6cx1, this['value'] || null);
		if (!_0x9f6cx2) {
			_0x9f6cx1['fireEvent']('taskupdated', _0x9f6cx1, this)
		}
	}
});
Ext.define('Ext.ux.Gantt.column.BaselineEndDate', {
	extend: 'Ext.ux.Gantt.column.EndDate'
	, requires: ['Ext.ux.Gantt.field.BaselineEndDate']
	, alias: ['widget.baselineenddatecolumn', 'widget.ganttcolumn.baselineenddate']
	, width: 100
	, fieldProperty: 'baselineEndDateField'
	, fieldConfigs: ['instantUpdate', 'adjustMilestones', 'keepDuration', 'validateStartDate', 'fieldProperty']
	, editor: 'baselineenddatefield'
	, defaultEditor: 'baselineenddatefield'
	, getRawData: function (_0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx1['getBaselineEndDate']();
		return _0x9f6cx2 ? new Date(this['getValueToRender'](_0x9f6cx2, null, _0x9f6cx1)) : null
	}
	, putRawData: function (_0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx2) {
			_0x9f6cx2 = this['prepareNewEndDate'](_0x9f6cx2, _0x9f6cx1)
		};
		_0x9f6cx1['setBaselineEndDate'](_0x9f6cx2)
	}
});
Ext.define('Ext.ux.Gantt.field.BaselineCost', {
	extend: 'Ext.ux.Gantt.field.Cost'
	, alias: 'widget.baselinecostfield'
	, alternateClassName: 'Ext.ux.Gantt.widget.BaselineCostField'
	, taskField: 'baselineCostField'
	, setTaskValueMethod: 'setBaselineCost'
	, getTaskValueMethod: 'getBaselineCost'
});
Ext.define('Ext.ux.Gantt.column.BaselineCost', {
	extend: 'Ext.ux.Gantt.column.Cost'
	, alias: ['widget.baselinecostcolumn', 'widget.ganttcolumn.baselinecost']
	, requires: ['Ext.ux.Gantt.field.BaselineCost']
	, fieldProperty: 'baselineCostField'
	, editor: 'baselinecostfield'
	, defaultEditor: 'baselinecostfield'
});
Ext.define('Ext.ux.Gantt.field.BaselineEffort', {
	extend: 'Ext.ux.Gantt.field.Effort'
	, alias: 'widget.baselineeffortfield'
	, alternateClassName: 'Ext.ux.Gantt.widget.BaselineEffortField'
	, taskField: 'baselineEffortField'
	, setTaskValueMethod: 'setBaselineEffort'
	, getTaskValueMethod: 'getBaselineEffort'
});
Ext.define('Ext.ux.Gantt.column.BaselineEffort', {
	extend: 'Ext.ux.Gantt.column.Duration'
	, alias: ['widget.baselineeffortcolumn', 'widget.ganttcolumn.baselineeffort']
	, requires: ['Ext.ux.Gantt.field.BaselineEffort']
	, fieldProperty: 'baselineEffortField'
	, editor: 'baselineeffortfield'
	, defaultEditor: 'baselineeffortfield'
	, getValueToRender: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (!Ext['isNumber'](_0x9f6cx2)) {
			return ''
		};
		return this['field']['valueToVisible'](_0x9f6cx2, _0x9f6cx1['getEffortUnit']())
	}
	, putRawData: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1['setEffort'](_0x9f6cx2)
	}
});
Ext.define('Ext.ux.Gantt.field.StartDate', {
	extend: 'Ext.ux.Gantt.field.Date'
	, alias: 'widget.startdatefield'
	, keepDuration: true
	, fieldProperty: 'startDateField'
	, getTaskValueMethod: 'getStartDate'
	, setTaskValueMethod: 'setStartDate'
	, isBaseline: false
	, valueToVisible: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		return _0x9f6cx1 && _0x9f6cx1['getDisplayStartDate'](this['format'], this['adjustMilestones'], _0x9f6cx2, true, this['isBaseline'])
	}
	, visibleToValue: function (_0x9f6cx5, _0x9f6cx2) {
		_0x9f6cx2 = _0x9f6cx2 || this['task'];
		if (_0x9f6cx2 && _0x9f6cx5) {
			var _0x9f6cx1 = !Ext['isDate'](this['lastValue']) || this['lastValue'] - Ext['Date']['clearTime'](this['lastValue'], true) === 0;
			if (this['adjustMilestones'] && _0x9f6cx2['isMilestone'](this['isBaseline']) && _0x9f6cx5 - Ext['Date']['clearTime'](_0x9f6cx5, true) === 0 && _0x9f6cx1 && !Ext['Date']['formatContainsHourInfo'](this['format'])) {
				_0x9f6cx5 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx5, Ext.ux.Scheduler['util']['Date'].DAY, 1)
			}
		};
		return _0x9f6cx5
	}
});
Ext.define('Ext.ux.Gantt.column.StartDate', {
	extend: 'Ext.grid.column.Date'
	, alias: ['widget.startdatecolumn', 'widget.ganttcolumn.startdate']
	, requires: ['Ext.ux.Gantt.field.StartDate']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, isStartDateColumn: true
	, width: 100
	, align: 'left'
	, editorFormat: null
	, adjustMilestones: true
	, keepDuration: true
	, fieldProperty: 'startDateField'
	, fieldConfigs: ['instantUpdate', 'adjustMilestones', 'keepDuration', 'fieldProperty']
	, editor: 'startdatefield'
	, defaultEditor: 'startdatefield'
	, initComponent: function () {
		this['initTaskFieldColumn']({
			format: this['editorFormat'] || this['format'] || Ext['Date']['defaultFormat']
		});
		this['callParent'](arguments)
	}
	, getValueToRender: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return _0x9f6cx2 && Ext['Date']['format'](this['field']['valueToVisible'](_0x9f6cx2, _0x9f6cx1), this['format']) || ''
	}
	, putRawData: function (_0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx2 && !(_0x9f6cx2 instanceof Date)) {
			_0x9f6cx2 = Ext['Date']['parse'](_0x9f6cx2, this['format'])
		};
		_0x9f6cx1['setStartDate'](_0x9f6cx2)
	}
});
Ext.define('Ext.ux.Gantt.field.BaselineStartDate', {
	extend: 'Ext.ux.Gantt.field.StartDate'
	, alias: 'widget.baselinestartdatefield'
	, fieldProperty: 'baselineStartDateField'
	, getTaskValueMethod: 'getBaselineStartDate'
	, setTaskValueMethod: 'setBaselineStartDate'
	, isBaseline: true
	, applyChanges: function (_0x9f6cx1, _0x9f6cx2) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		this['setTaskValue'](_0x9f6cx1, this['value']);
		if (!_0x9f6cx2) {
			_0x9f6cx1['fireEvent']('taskupdated', _0x9f6cx1, this)
		}
	}
});
Ext.define('Ext.ux.Gantt.column.BaselineStartDate', {
	extend: 'Ext.ux.Gantt.column.StartDate'
	, requires: ['Ext.ux.Gantt.field.BaselineStartDate']
	, alias: ['widget.baselinestartdatecolumn', 'widget.ganttcolumn.baselinestartdate']
	, width: 100
	, fieldProperty: 'baselineStartDateField'
	, fieldConfigs: ['instantUpdate', 'adjustMilestones', 'fieldProperty']
	, editor: 'baselinestartdatefield'
	, defaultEditor: 'baselinestartdatefield'
	, putRawData: function (_0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx2 && !(_0x9f6cx2 instanceof Date)) {
			_0x9f6cx2 = Ext['Date']['parse'](_0x9f6cx2, this['format'])
		};
		_0x9f6cx1['setBaselineStartDate'](_0x9f6cx2)
	}
});
Ext.define('Robo.data.Model', {
	extend: 'Ext.Mixin'
	, modelName: null
	, editMementoFix: null
	, mixinConfig: {
		before: {
			endEdit: 'onBeforeEndEdit'
		}
		, after: {
			endEdit: 'onAfterEndEdit'
		}
	}
	, onBeforeEndEdit: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = this['editMemento'];
		if (_0x9f6cx1) {
			this['editMementoFix'] = _0x9f6cx1;
			if (!_0x9f6cx5) {
				_0x9f6cx5 = this['getModifiedFieldNames'](_0x9f6cx1['data'])
			};
			if (!_0x9f6cx1['previousValues']) {
				_0x9f6cx1['previousValues'] = {}
			};
			Ext['Array']['each'](_0x9f6cx5, function (_0x9f6cx3) {
				_0x9f6cx1['previousValues'][_0x9f6cx3] = _0x9f6cx1['data'][_0x9f6cx3]
			})
		}
	}
	, onAfterEndEdit: function (_0x9f6cx1, _0x9f6cx2) {
		delete this['editMementoFix']
	}
	, getTitle: function () {
		return ''
	}
});
Ext.define('Ext.ux.Scheduler.model.Customizable', function (_0x9f6cx1) {
	return {
		extend: 'Ext.data.Model'
		, mixins: {
			robo: 'Robo.data.Model'
		}
		, isCustomizableModel: true
		, customizableFields: null
		, previous: null
		, __editing: null
		, __editCounter: 0
		, constructor: function () {
			var _0x9f6cx2 = this['callParent'](arguments);
			return _0x9f6cx2
		}
		, storePreviousFlex: Ext['Function']['flexSetter'](function (_0x9f6cx4, _0x9f6cx3) {
			var _0x9f6cx5 = this
				, _0x9f6cx2 = _0x9f6cx5['get'](_0x9f6cx4);
			if (_0x9f6cx2 instanceof Date && !(_0x9f6cx3 instanceof Date)) {
				_0x9f6cx3 = _0x9f6cx5['getField'](_0x9f6cx4)['convert'](_0x9f6cx3, _0x9f6cx5)
			};
			if ((_0x9f6cx2 instanceof Date && (_0x9f6cx2 - _0x9f6cx3)) || !(_0x9f6cx2 instanceof Date) && _0x9f6cx2 !== _0x9f6cx3) {
				_0x9f6cx5['previous'][_0x9f6cx4] = _0x9f6cx2
			}
		})
		, deletePreviousFlex: Ext['Function']['flexSetter'](function (_0x9f6cx5, _0x9f6cx2) {
			delete this['previous'][_0x9f6cx5]
		})
		, set: function (_0x9f6cx7, _0x9f6cx4) {
			var _0x9f6cx3 = this
				, _0x9f6cx5 = false
				, _0x9f6cx2 = null;
			if (!_0x9f6cx3['previous']) {
				_0x9f6cx5 = true;
				_0x9f6cx3['previous'] = {}
			};
			_0x9f6cx3['storePreviousFlex'](_0x9f6cx7, _0x9f6cx4);
			_0x9f6cx2 = _0x9f6cx3['callParent'](arguments);
			if (!_0x9f6cx3['__editing']) {
				if (_0x9f6cx5) {
					delete _0x9f6cx3['previous']
				}
				else {
					_0x9f6cx3['deletePreviousFlex'](_0x9f6cx7, _0x9f6cx4)
				}
			};
			return _0x9f6cx2
		}
		, reject: function () {
			var _0x9f6cx5 = this
				, _0x9f6cx2 = _0x9f6cx5['modified'] || {}
				, _0x9f6cx3;
			_0x9f6cx5['__editing'] = true;
			_0x9f6cx5['previous'] = _0x9f6cx5['previous'] || {};
			for (_0x9f6cx3 in _0x9f6cx2) {
				if (_0x9f6cx2['hasOwnProperty'](_0x9f6cx3)) {
					if (typeof _0x9f6cx2[_0x9f6cx3] != 'function') {
						_0x9f6cx5['previous'][_0x9f6cx3] = _0x9f6cx5['get'](_0x9f6cx3)
					}
				}
			};
			_0x9f6cx5['callParent'](arguments);
			delete _0x9f6cx5['previous'];
			_0x9f6cx5['__editing'] = false
		}
		, beginEdit: function () {
			this['__editCounter']++;
			this['__editing'] = true;
			this['callParent'](arguments)
		}
		, cancelEdit: function () {
			this['__editCounter'] = 0;
			this['__editing'] = false;
			this['callParent'](arguments);
			delete this['previous']
		}
		, endEdit: function (_0x9f6cx5, _0x9f6cx3) {
			if (--this['__editCounter'] === 0) {
				if (!_0x9f6cx5 && this['getModifiedFieldNames']) {
					var _0x9f6cx2 = this['editMemento'];
					if (!_0x9f6cx3) {
						_0x9f6cx3 = this['getModifiedFieldNames'](_0x9f6cx2['data'])
					};
					if (_0x9f6cx3 && _0x9f6cx3['length'] === 0) {
						_0x9f6cx5 = true
					}
				};
				this['callParent']([_0x9f6cx5]['concat'](Array['prototype']['slice']['call'](arguments, 1)));
				this['__editing'] = false;
				delete this['previous']
			}
		}
	}
}, function (_0x9f6cx1) {
	_0x9f6cx1['$onExtended']['unshift']({
		fn: function (_0x9f6cx2, _0x9f6cx5) {
			if (_0x9f6cx5) {
				if (Ext['isArray'](_0x9f6cx5)) {
					_0x9f6cx2['fieldsInitialValue'] = _0x9f6cx5['slice']()
				}
				else {
					if (_0x9f6cx5['fields']) {
						if (!Ext['isArray'](_0x9f6cx5['fields'])) {
							_0x9f6cx2['fieldsInitialValue'] = [_0x9f6cx5['fields']]
						}
						else {
							_0x9f6cx2['fieldsInitialValue'] = _0x9f6cx5['fields']['slice']()
						}
					}
				}
			}
		}
	});
	_0x9f6cx1['onExtended'](function (_0x9f6cx3, _0x9f6cx7, _0x9f6cx5) {
		var _0x9f6cx2 = Ext['ClassManager']
			, _0x9f6cx4 = _0x9f6cx2['triggerCreated'];
		_0x9f6cx2['triggerCreated'] = function (_0x9f6cxa) {
			var _0x9f6cxb = _0x9f6cx3['prototype'];
			if (_0x9f6cx7['customizableFields']) {
				_0x9f6cxb['allCustomizableFields'] = (_0x9f6cx3['superclass']['allCustomizableFields'] || [])['concat'](_0x9f6cx7['customizableFields'])
			}
			else {
				_0x9f6cxb['allCustomizableFields'] = (_0x9f6cx3['superclass']['allCustomizableFields'] || [])
			};
			var _0x9f6cxc = {};
			Ext['Array']['each'](_0x9f6cxb['allCustomizableFields'], function (_0x9f6cxd) {
				if (typeof _0x9f6cxd == 'string') {
					_0x9f6cxd = {
						name: _0x9f6cxd
					}
				};
				_0x9f6cxc[_0x9f6cxd['name']] = _0x9f6cxd
			});
			var _0x9f6cx6 = _0x9f6cxb['fields'];
			var _0x9f6cx8 = [];
			var _0x9f6cx9 = [];
			Ext['Array']['each'](_0x9f6cx6, function (_0x9f6cxd) {
				if (_0x9f6cxd['isCustomizableField']) {
					_0x9f6cx9['push'](_0x9f6cxd['getName']())
				}
			});
			if (_0x9f6cxb['idProperty'] !== 'id' && _0x9f6cxb['getField']('id')) {
				if (!_0x9f6cxb['getField']('id')['hasOwnProperty']('name')) {
					_0x9f6cx9['push']('id')
				}
			};
			if (_0x9f6cxb['idProperty'] !== 'Id' && _0x9f6cxb['getField']('Id')) {
				if (!_0x9f6cxb['getField']('Id')['hasOwnProperty']('name')) {
					_0x9f6cx9['push']('Id')
				}
			};
			_0x9f6cx3['removeFields'](_0x9f6cx9);

			function _0x9f6cxe(_0x9f6cxf, _0x9f6cxd, _0x9f6cx10) {
				if (!_0x9f6cxd) {
					return
				};
				if (!Ext['isArray'](_0x9f6cxd)) {
					_0x9f6cxd = [_0x9f6cxd]
				};
				var _0x9f6cx11;
				for (var _0x9f6cx12 = _0x9f6cxd['length'] - 1; _0x9f6cx12 >= 0; _0x9f6cx12--) {
					if (_0x9f6cxd[_0x9f6cx12]['name'] == _0x9f6cx10) {
						_0x9f6cx11 = _0x9f6cxd[_0x9f6cx12];
						break
					}
				};
				Ext['applyIf'](_0x9f6cxf, _0x9f6cx11)
			}

			function _0x9f6cx13(_0x9f6cxf) {
				var _0x9f6cx14 = _0x9f6cx3
					, _0x9f6cx12 = _0x9f6cx14['prototype']
					, _0x9f6cx11 = _0x9f6cxf === 'Id' ? 'idProperty' : _0x9f6cxf['charAt'](0)['toLowerCase']() + _0x9f6cxf['substr'](1) + 'Field'
					, _0x9f6cxd = {
						name: _0x9f6cx12[_0x9f6cx11] || _0x9f6cxf
						, isCustomizableField: true
					}
					, _0x9f6cx10;
				while (_0x9f6cx12 && _0x9f6cx12['isCustomizableModel']) {
					_0x9f6cx10 = _0x9f6cx12[_0x9f6cx11] || _0x9f6cxf;
					_0x9f6cx12['hasOwnProperty']('customizableFields') && _0x9f6cxe(_0x9f6cxd, _0x9f6cx12['customizableFields'], _0x9f6cxf);
					_0x9f6cxe(_0x9f6cxd, _0x9f6cx14['fieldsInitialValue'], _0x9f6cx10);
					_0x9f6cx12 = _0x9f6cx14['superclass'];
					_0x9f6cx14 = _0x9f6cx12 && _0x9f6cx12['self']
				};
				return _0x9f6cxd
			}
			_0x9f6cx9 = [];
			Ext['Object']['each'](_0x9f6cxc, function (_0x9f6cxd, _0x9f6cx11) {
				var _0x9f6cx10 = _0x9f6cx11['name'] || _0x9f6cx11['getName']();
				var _0x9f6cx15 = _0x9f6cx10 === 'Id' ? 'idProperty' : _0x9f6cx10['charAt'](0)['toLowerCase']() + _0x9f6cx10['substr'](1) + 'Field';
				var _0x9f6cx16 = _0x9f6cxb[_0x9f6cx15] || _0x9f6cx10;
				_0x9f6cxb['getField'](_0x9f6cx16) && _0x9f6cx9['push'](_0x9f6cx16);
				var _0x9f6cx17 = _0x9f6cx13(_0x9f6cx10);
				_0x9f6cx8['push'](Ext['create']('data.field.' + (_0x9f6cx17['type'] || 'auto'), _0x9f6cx17));
				var _0x9f6cx12 = Ext['String']['capitalize'](_0x9f6cx10);
				if (_0x9f6cx12 != 'Id') {
					var _0x9f6cx14 = 'get' + _0x9f6cx12;
					var _0x9f6cxf = 'set' + _0x9f6cx12;
					if (!_0x9f6cxb[_0x9f6cx14] || _0x9f6cxb[_0x9f6cx14]['__getterFor__'] && _0x9f6cxb[_0x9f6cx14]['__getterFor__'] != _0x9f6cx16) {
						_0x9f6cxb[_0x9f6cx14] = function () {
							return this['get'](this[_0x9f6cx15] || _0x9f6cx16)
						};
						_0x9f6cxb[_0x9f6cx14]['__getterFor__'] = _0x9f6cx16
					};
					if (!_0x9f6cxb[_0x9f6cxf] || _0x9f6cxb[_0x9f6cxf]['__setterFor__'] && _0x9f6cxb[_0x9f6cxf]['__setterFor__'] != _0x9f6cx16) {
						_0x9f6cxb[_0x9f6cxf] = function (_0x9f6cx18) {
							return this['set'](this[_0x9f6cx15] || _0x9f6cx16, _0x9f6cx18)
						};
						_0x9f6cxb[_0x9f6cxf]['__setterFor__'] = _0x9f6cx16
					}
				}
			});
			_0x9f6cx3['replaceFields'](_0x9f6cx8, _0x9f6cx9);
			_0x9f6cx4['apply'](this, arguments);
			_0x9f6cx2['triggerCreated'] = _0x9f6cx4
		}
	})
});
Ext.define('Ext.ux.Gantt.model.Calendar', {
	extend: 'Ext.ux.Scheduler.model.Customizable'
	, requires: ['Ext.data.NodeInterface']
	, idProperty: 'Id'
	, calendar: null
	, nameField: 'Name'
	, daysPerMonthField: 'DaysPerMonth'
	, daysPerWeekField: 'DaysPerWeek'
	, hoursPerDayField: 'HoursPerDay'
	, weekendsAreWorkdaysField: 'WeekendsAreWorkdays'
	, weekendFirstDayField: 'WeekendFirstDay'
	, weekendSecondDayField: 'WeekendSecondDay'
	, defaultAvailabilityField: 'DefaultAvailability'
	, daysField: 'Days'
	, calendarClassField: 'CalendarClass'
	, phantomIdField: 'PhantomId'
	, phantomParentIdField: 'PhantomParentId'
	, customizableFields: [{
		name: 'Name'
	}, {
		name: 'DaysPerMonth'
		, type: 'number'
	}, {
		name: 'DaysPerWeek'
		, type: 'number'
	}, {
		name: 'HoursPerDay'
		, type: 'number'
	}, {
		name: 'WeekendsAreWorkdays'
		, type: 'boolean'
	}, {
		name: 'WeekendFirstDay'
		, type: 'integer'
	}, {
		name: 'WeekendSecondDay'
		, type: 'integer'
	}, {
		name: 'DefaultAvailability'
	}, {
		name: 'Days'
	}, {
		name: 'CalendarClass'
		, defaultValue: 'Ext.ux.Gantt.data.Calendar'
	}, {
		name: 'PhantomId'
	}, {
		name: 'PhantomParentId'
	}]
	, constructor: function (_0x9f6cx2, _0x9f6cx4, _0x9f6cx5) {
		var _0x9f6cx1 = _0x9f6cx2 || _0x9f6cx5 || {};
		var _0x9f6cx3 = _0x9f6cx1['calendar'] || _0x9f6cx1['Days'];
		_0x9f6cx2 && delete _0x9f6cx2['calendar'];
		_0x9f6cx5 && delete _0x9f6cx5['calendar'];
		this['rawConfig'] = Ext['apply']({}, _0x9f6cx2);
		this['callParent'](arguments);
		this['setDays'](_0x9f6cx3);
		this['data'][this['phantomIdField']] = this['getId']()
	}
	, get: function (_0x9f6cx1) {
		if (_0x9f6cx1 === 'Days') {
			return this['getCalendar']() || this['data'][this['daysField']]
		}
		else {
			return this['callParent'](arguments)
		}
	}
	, set: function (_0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx2 === 'Days') {
			if (_0x9f6cx1 instanceof Ext.ux.Gantt['data']['Calendar']) {
				this['setCalendar'](_0x9f6cx1)
			}
			else {
				this['data'][this['daysField']] = _0x9f6cx1
			}
		}
		else {
			return this['callParent'](arguments)
		}
	}
	, getCalendar: function () {
		return this['calendar']
	}
	, setCalendar: function (_0x9f6cx1) {
		this['calendar'] = _0x9f6cx1
	}
	, getCalendarConfig: function () {
		var _0x9f6cx7 = this;
		var _0x9f6cx2 = {
			calendarId: _0x9f6cx7['getId']()
			, parent: _0x9f6cx7['parentNode'] && _0x9f6cx7['parentNode']['getCalendar']()
		};
		var _0x9f6cx3 = ['daysPerMonth', 'daysPerWeek', 'hoursPerDay', 'name', 'weekendFirstDay', 'weekendSecondDay', 'weekendsAreWorkdays', 'defaultAvailability'];
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx3['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			var _0x9f6cx6 = _0x9f6cx3[_0x9f6cx5];
			if (_0x9f6cx7[_0x9f6cx6 + 'Field'] in _0x9f6cx7['rawConfig']) {
				var _0x9f6cx4 = 'get' + Ext['String']['capitalize'](_0x9f6cx6);
				_0x9f6cx2[_0x9f6cx6] = _0x9f6cx7[_0x9f6cx4]()
			}
		};
		return _0x9f6cx2
	}
	, getModelConfig: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = {};
		if (!_0x9f6cx2) {
			_0x9f6cx1['parentId'] = _0x9f6cx5['parent'] && _0x9f6cx5['parent']['calendarId'];
			_0x9f6cx1['calendar'] = _0x9f6cx5
		};
		_0x9f6cx1[this['daysPerMonthField']] = _0x9f6cx5['daysPerMonth'];
		_0x9f6cx1[this['daysPerWeekField']] = _0x9f6cx5['daysPerWeek'];
		_0x9f6cx1[this['hoursPerDayField']] = _0x9f6cx5['hoursPerDay'];
		_0x9f6cx1[this['nameField']] = _0x9f6cx5['name'];
		_0x9f6cx1[this['weekendFirstDayField']] = _0x9f6cx5['weekendFirstDay'];
		_0x9f6cx1[this['weekendSecondDayField']] = _0x9f6cx5['weekendSecondDay'];
		if (_0x9f6cx5['hasOwnProperty']('weekendsAreWorkdays')) {
			_0x9f6cx1[this['weekendsAreWorkdaysField']] = _0x9f6cx5['weekendsAreWorkdays']
		};
		if (_0x9f6cx5['hasOwnProperty']('defaultAvailability')) {
			_0x9f6cx1[this['defaultAvailabilityField']] = _0x9f6cx5['defaultAvailability']
		};
		_0x9f6cx1[this['calendarClassField']] = Ext['getClassName'](_0x9f6cx5);
		return _0x9f6cx1
	}
	, setCalendarManager: function (_0x9f6cx1) {
		this['calendarManager'] = _0x9f6cx1
	}
	, getCalendarManager: function () {
		return this['calendarManager']
	}
	, getParentCalendarClass: function () {
		var _0x9f6cx2 = this['parentNode']
			, _0x9f6cx1;
		while (_0x9f6cx2 && !_0x9f6cx1) {
			_0x9f6cx1 = _0x9f6cx2['getCalendarClass']();
			_0x9f6cx2 = _0x9f6cx2['parentNode']
		};
		return _0x9f6cx1
	}
	, fillDataFromPrototype: function (_0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx2[this['calendarClassField']] || this['treeStore'] && this['treeStore']['getCalendarClass']() || this['getCalendarClass']() || this['getParentCalendarClass']() || this['getField'](this['calendarClassField'])['getDefaultValue']();
		if (_0x9f6cx1) {
			if (!_0x9f6cx2[this['calendarClassField']]) {
				_0x9f6cx2[this['calendarClassField']] = _0x9f6cx1
			};
			var _0x9f6cx3 = _0x9f6cx2['children'];
			if (_0x9f6cx3 && _0x9f6cx3['length']) {
				for (var _0x9f6cx5 = 0; _0x9f6cx5 < _0x9f6cx3['length']; _0x9f6cx5++) {
					this['fillDataFromPrototype'](_0x9f6cx3[_0x9f6cx5])
				}
			}
		}
	}
	, prepareCalendarNode: function (_0x9f6cx1) {
		if (_0x9f6cx1 instanceof Ext.ux.Gantt['data']['Calendar']) {
			_0x9f6cx1 = this['getModelConfig'](_0x9f6cx1)
		}
		else {
			if (Ext['isObject'](_0x9f6cx1) && !(_0x9f6cx1 instanceof Ext.ux.Gantt['model']['Calendar'])) {
				this['fillDataFromPrototype'](_0x9f6cx1)
			}
		};
		_0x9f6cx1 = this['createNode'](_0x9f6cx1);
		if (this['phantom']) {
			if (this['getId']() !== _0x9f6cx1['data'][this['phantomParentIdField']]) {
				_0x9f6cx1['modified'] = _0x9f6cx1['modified'] || {};
				_0x9f6cx1['modified'][this['phantomParentIdField']] = _0x9f6cx1['data'][this['phantomParentIdField']];
				_0x9f6cx1['data'][this['phantomParentIdField']] = this['getId']()
			}
		};
		return _0x9f6cx1
	}
}, function () {
	Ext['data']['NodeInterface']['decorate'](this);
	this['override']({
		insertBefore: function (_0x9f6cx1) {
			_0x9f6cx1 = this['prepareCalendarNode'](_0x9f6cx1);
			return this['callParent'](arguments)
		}
		, appendChild: function (_0x9f6cx2) {
			if (_0x9f6cx2 instanceof Array) {
				for (var _0x9f6cx1 = 0; _0x9f6cx1 < _0x9f6cx2['length']; _0x9f6cx1++) {
					_0x9f6cx2[_0x9f6cx1] = this['prepareCalendarNode'](_0x9f6cx2[_0x9f6cx1])
				}
			}
			else {
				_0x9f6cx2 = this['prepareCalendarNode'](_0x9f6cx2)
			};
			return this['callParent'](arguments)
		}
	})
});
Ext.define('Ext.ux.Scheduler.model.CalendarDay', {
	requires: ['Ext.data.Types']
	, extend: 'Ext.ux.Scheduler.model.Customizable'
	, idProperty: 'Id'
	, customizableFields: [{
		name: 'Date'
		, type: 'date'
		, dateFormat: 'c'
		, persist: true
		, convert: function (_0x9f6cx2, _0x9f6cx1) {
			if (!_0x9f6cx2) {
				return
			};
			var _0x9f6cx5 = Ext['data']['Types']['DATE']['convert']['call'](this, _0x9f6cx2);
			if (_0x9f6cx5) {
				Ext['Date']['clearTime'](_0x9f6cx5)
			};
			return _0x9f6cx5
		}
	}, {
		name: 'Weekday'
		, type: 'int'
	}, {
		name: 'OverrideStartDate'
		, type: 'date'
		, dateFormat: 'c'
	}, {
		name: 'OverrideEndDate'
		, type: 'date'
		, dateFormat: 'c'
	}, {
		name: 'Type'
		, defaultValue: 'DAY'
	}, {
		name: 'IsWorkingDay'
		, type: 'boolean'
		, defaultValue: false
	}, {
		name: 'Cls'
		, defaultValue: 'sch-nonworkingtime'
	}, 'Name', {
		name: 'Availability'
		, persist: true
		, convert: function (_0x9f6cx2, _0x9f6cx1) {
			if (_0x9f6cx2) {
				return typeof _0x9f6cx2 === 'string' ? [_0x9f6cx2] : _0x9f6cx2
			}
			else {
				return []
			}
		}
	}]
	, availabilityCache: null
	, weekdayField: 'Weekday'
	, overrideStartDateField: 'OverrideStartDate'
	, overrideEndDateField: 'OverrideEndDate'
	, typeField: 'Type'
	, dateField: 'Date'
	, isWorkingDayField: 'IsWorkingDay'
	, clsField: 'Cls'
	, nameField: 'Name'
	, availabilityField: 'Availability'
	, setDate: function (_0x9f6cx1) {
		if (_0x9f6cx1) {
			_0x9f6cx1 = Ext['Date']['clearTime'](_0x9f6cx1, true)
		};
		this['set'](this['dateField'], _0x9f6cx1)
	}
	, clearDate: function () {
		this['set'](this['dateField'], null)
	}
	, getAvailability: function (_0x9f6cx2) {
		var _0x9f6cx5 = this;
		if (_0x9f6cx2) {
			return this['get'](this['availabilityField'])
		};
		if (this['availabilityCache']) {
			return this['availabilityCache']
		};
		var _0x9f6cx1 = Ext['Array']['map'](this['get'](this['availabilityField']), function (_0x9f6cx3) {
			return typeof _0x9f6cx3 === 'string' ? _0x9f6cx5['parseInterval'](_0x9f6cx3) : _0x9f6cx3
		});
		this['verifyAvailability'](_0x9f6cx1);
		return this['availabilityCache'] = _0x9f6cx1
	}
	, setAvailability: function (_0x9f6cx1) {
		this['availabilityCache'] = null;
		this['set'](this['availabilityField'], this['stringifyIntervals'](_0x9f6cx1));
		this['getAvailability']()
	}
	, verifyAvailability: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx1['sort'](function (_0x9f6cx3, _0x9f6cx5) {
			return _0x9f6cx3['startTime'] - _0x9f6cx5['startTime']
		});
		Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cx5, _0x9f6cx3) {
			if (_0x9f6cx5['startTime'] > _0x9f6cx5['endTime']) {
				throw new Error('Start time ' + Ext['Date']['format'](_0x9f6cx5['startTime'], 'H:i') + ' is greater than end time ' + Ext['Date']['format'](_0x9f6cx5['endTime'], 'H:i'))
			};
			if (_0x9f6cx3 > 0 && _0x9f6cx1[_0x9f6cx3 - 1]['endTime'] > _0x9f6cx5['startTime']) {
				throw new Error('Availability intervals should not intersect: [' + _0x9f6cx2['stringifyInterval'](_0x9f6cx1[_0x9f6cx3 - 1]) + '] and [' + _0x9f6cx2['stringifyInterval'](_0x9f6cx5) + ']')
			}
		})
	}
	, prependZero: function (_0x9f6cx1) {
		return _0x9f6cx1 < 10 ? '0' + _0x9f6cx1 : _0x9f6cx1
	}
	, stringifyInterval: function (_0x9f6cx2) {
		var _0x9f6cx5 = _0x9f6cx2['startTime'];
		var _0x9f6cx1 = _0x9f6cx2['endTime'];
		return this['prependZero'](_0x9f6cx5['getHours']()) + ':' + this['prependZero'](_0x9f6cx5['getMinutes']()) + '-' + (_0x9f6cx1['getDate']() == 1 ? 24 : this['prependZero'](_0x9f6cx1['getHours']())) + ':' + this['prependZero'](_0x9f6cx1['getMinutes']())
	}
	, stringifyIntervals: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return Ext['Array']['map'](_0x9f6cx1, function (_0x9f6cx5) {
			if (typeof _0x9f6cx5 === 'string') {
				return _0x9f6cx5
			};
			return _0x9f6cx2['stringifyInterval'](_0x9f6cx5)
		})
	}
	, parseInterval: function (_0x9f6cx2) {
		var _0x9f6cx1 = /(\d\d):(\d\d)-(\d\d):(\d\d)/ ['exec'](_0x9f6cx2);
		if (!_0x9f6cx1) {
			throw new Error('Invalid format for availability string: ' + _0x9f6cx2 + '. It should have exact format: hh:mm-hh:mm')
		};
		return {
			startTime: new Date(2016, 11, 0, _0x9f6cx1[1], _0x9f6cx1[2])
			, endTime: new Date(2016, 11, 0, _0x9f6cx1[3], _0x9f6cx1[4])
		}
	}
	, getTotalHours: function () {
		return this['getTotalMS']() / 1000 / 60 / 60
	}
	, getTotalMS: function () {
		var _0x9f6cx1 = 0;
		Ext['Array']['each'](this['getAvailability'](), function (_0x9f6cx2) {
			_0x9f6cx1 += _0x9f6cx2['endTime'] - _0x9f6cx2['startTime']
		});
		return _0x9f6cx1
	}
	, addAvailabilityInterval: function (_0x9f6cx4, _0x9f6cx5) {
		var _0x9f6cx2;

		function _0x9f6cx1(_0x9f6cx7) {
			return new Date(2016, 11, _0x9f6cx7['getDate']() == 1 ? 1 : 0, _0x9f6cx7['getHours'](), _0x9f6cx7['getMinutes']())
		}
		if (_0x9f6cx4 instanceof Date) {
			_0x9f6cx2 = {
				startTime: _0x9f6cx1(_0x9f6cx4)
				, endTime: _0x9f6cx1(_0x9f6cx5)
			}
		}
		else {
			_0x9f6cx2 = this['parseInterval'](_0x9f6cx4 + (_0x9f6cx5 ? '-' + _0x9f6cx5 : ''))
		};
		var _0x9f6cx3 = this['getAvailability']()['concat'](_0x9f6cx2);
		this['verifyAvailability'](_0x9f6cx3);
		this['setAvailability'](_0x9f6cx3)
	}
	, removeAvailabilityInterval: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getAvailability']();
		_0x9f6cx2['splice'](_0x9f6cx1, 1);
		this['setAvailability'](_0x9f6cx2)
	}
	, getAvailabilityIntervalsFor: function (_0x9f6cx5) {
		_0x9f6cx5 = typeof _0x9f6cx5 == 'number' ? new Date(_0x9f6cx5) : _0x9f6cx5;
		var _0x9f6cx2 = _0x9f6cx5['getFullYear']();
		var _0x9f6cx3 = _0x9f6cx5['getMonth']();
		var _0x9f6cx1 = _0x9f6cx5['getDate']();
		return Ext['Array']['map'](this['getAvailability'](), function (_0x9f6cx4) {
			var _0x9f6cx7 = _0x9f6cx4['endTime']['getDate']();
			return {
				startDate: new Date(_0x9f6cx2, _0x9f6cx3, _0x9f6cx1, _0x9f6cx4['startTime']['getHours'](), _0x9f6cx4['startTime']['getMinutes']())
				, endDate: new Date(_0x9f6cx2, _0x9f6cx3, _0x9f6cx1 + (_0x9f6cx7 == 1 ? 1 : 0), _0x9f6cx4['endTime']['getHours'](), _0x9f6cx4['endTime']['getMinutes']())
			}
		})
	}
	, getAvailabilityStartFor: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['getAvailabilityIntervalsFor'](_0x9f6cx2);
		if (!_0x9f6cx1['length']) {
			return null
		};
		return _0x9f6cx1[0]['startDate']
	}
	, getAvailabilityEndFor: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['getAvailabilityIntervalsFor'](_0x9f6cx2);
		if (!_0x9f6cx1['length']) {
			return null
		};
		return _0x9f6cx1[_0x9f6cx1['length'] - 1]['endDate']
	}
});
Ext.define('Ext.ux.Scheduler.model.Range', {
	extend: 'Ext.ux.Scheduler.model.Customizable'
	, requires: ['Ext.ux.Scheduler.util.Date']
	, idProperty: 'Id'
	, startDateField: 'StartDate'
	, endDateField: 'EndDate'
	, nameField: 'Name'
	, clsField: 'Cls'
	, customizableFields: [{
		name: 'StartDate'
		, type: 'date'
		, dateFormat: 'c'
	}, {
		name: 'EndDate'
		, type: 'date'
		, dateFormat: 'c'
	}, {
		name: 'Cls'
		, type: 'string'
	}, {
		name: 'Name'
		, type: 'string'
	}]
	, setStartDate: function (_0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx5 = this['getEndDate']();
		var _0x9f6cx2 = this['getStartDate']();
		this['beginEdit']();
		this['set'](this['startDateField'], _0x9f6cx1);
		if (_0x9f6cx3 === true && _0x9f6cx5 && _0x9f6cx2) {
			this['setEndDate'](Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx1, Ext.ux.Scheduler['util']['Date'].MILLI, _0x9f6cx5 - _0x9f6cx2))
		};
		this['endEdit']()
	}
	, setEndDate: function (_0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx1 = this['getStartDate']();
		var _0x9f6cx5 = this['getEndDate']();
		this['beginEdit']();
		this['set'](this['endDateField'], _0x9f6cx2);
		if (_0x9f6cx3 === true && _0x9f6cx1 && _0x9f6cx5) {
			this['setStartDate'](Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].MILLI, -(_0x9f6cx5 - _0x9f6cx1)))
		};
		this['endEdit']()
	}
	, setStartEndDate: function (_0x9f6cx2, _0x9f6cx1) {
		this['beginEdit']();
		this['set'](this['startDateField'], _0x9f6cx2);
		this['set'](this['endDateField'], _0x9f6cx1);
		this['endEdit']()
	}
	, getDates: function () {
		var _0x9f6cx3 = []
			, _0x9f6cx5 = this['getEndDate']();
		if (this['isScheduled']()) {
			var _0x9f6cx2 = Ext['Date']['clearTime'](this['getStartDate'](), true);
			if (_0x9f6cx5 - this['getStartDate']() === 0) {
				_0x9f6cx3['push'](_0x9f6cx2)
			}
			else {
				for (var _0x9f6cx1 = _0x9f6cx2; _0x9f6cx1 < _0x9f6cx5; _0x9f6cx1 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx1, Ext.ux.Scheduler['util']['Date'].DAY, 1)) {
					_0x9f6cx3['push'](_0x9f6cx1)
				}
			}
		};
		return _0x9f6cx3
	}
	, forEachDate: function (_0x9f6cx2, _0x9f6cx1) {
		return Ext['Array']['each'](this['getDates'](), _0x9f6cx2, _0x9f6cx1)
	}
	, isScheduled: function () {
		var _0x9f6cx1 = this;
		return Boolean(_0x9f6cx1['getStartDate']() && _0x9f6cx1['getEndDate']() && _0x9f6cx1['areDatesValid']())
	}
	, isValid: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['callParent']()
			, _0x9f6cx3, _0x9f6cx2;
		if (_0x9f6cx1) {
			_0x9f6cx3 = _0x9f6cx5['getStartDate'](), _0x9f6cx2 = _0x9f6cx5['getEndDate']();
			_0x9f6cx1 = !_0x9f6cx3 || !_0x9f6cx2 || (_0x9f6cx2 - _0x9f6cx3 >= 0)
		};
		return _0x9f6cx1
	}
	, areDatesValid: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx5 = _0x9f6cx2['getStartDate']()
			, _0x9f6cx1 = _0x9f6cx2['getEndDate']();
		return !_0x9f6cx5 || !_0x9f6cx1 || (_0x9f6cx1 - _0x9f6cx5 >= 0)
	}
	, shift: function (_0x9f6cx2, _0x9f6cx1) {
		this['setStartEndDate'](Ext.ux.Scheduler['util']['Date']['add'](this['getStartDate'](), _0x9f6cx2, _0x9f6cx1), Ext.ux.Scheduler['util']['Date']['add'](this['getEndDate'](), _0x9f6cx2, _0x9f6cx1))
	}
	, fullCopy: function () {
		return this['copy']['apply'](this, arguments)
	}
	, intersectsRange: function (_0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx5 = this['getStartDate']();
		var _0x9f6cx2 = this['getEndDate']();
		return _0x9f6cx5 && _0x9f6cx2 && Ext.ux.Scheduler['util']['Date']['intersectSpans'](_0x9f6cx5, _0x9f6cx2, _0x9f6cx3, _0x9f6cx1)
	}
});
Ext.define('Ext.ux.Scheduler.data.mixin.UniversalModelGetter', {
	onClassMixedIn: function (_0x9f6cx1) {
		var _0x9f6cx2 = {};
		if (_0x9f6cx1['prototype']['isTreeStore']) {
			_0x9f6cx2['getModelById'] = _0x9f6cx1['prototype']['getNodeById']
		}
		else {
			_0x9f6cx2['getModelById'] = _0x9f6cx1['prototype']['getById']
		};
		if (_0x9f6cx1['prototype']['isTreeStore']) {
			_0x9f6cx2['getModelByInternalId'] = function (_0x9f6cx5) {
				return this['byInternalIdMap'][_0x9f6cx5] || null
			}
		}
		else {
			_0x9f6cx2['getModelByInternalId'] = _0x9f6cx1['prototype']['getByInternalId']
		};
		Ext['override'](_0x9f6cx1, _0x9f6cx2)
	}
});
Ext.define('Robo.data.Store', {
	extend: 'Ext.Mixin'
	, requires: ['Ext.util.Observable']
	, undoRedoPostponed: null
	, inUndoRedoTransaction: false
	, undoRedoEventBus: null
	, mixinConfig: {
		before: {
			constructor: 'constructor'
			, destroy: 'destroy'
			, fireEventArgs: 'fireEventArgs'
			, setRoot: 'beforeSetRoot'
			, fillNode: 'beforeFillNode'
		}
		, after: {
			setRoot: 'afterSetRoot'
			, fillNode: 'afterFillNode'
		}
	}
	, constructor: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['undoRedoEventBus'] = new Ext['util'].Observable()
	}
	, destroy: function () {
		Ext['destroy'](this['undoRedoEventBus'])
	}
	, fireEventArgs: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = this;
		if (!_0x9f6cx2['hasOwnProperty']('$undoRedoEventBusFired')) {
			_0x9f6cx2['$undoRedoEventBusFired'] = {}
		};
		if (!_0x9f6cx2['$undoRedoEventBusFired'][_0x9f6cx1]) {
			_0x9f6cx2['$undoRedoEventBusFired'][_0x9f6cx1] = true;
			_0x9f6cx5['undoRedoEventBus']['hasListener'](_0x9f6cx1) && _0x9f6cx5['undoRedoEventBus']['fireEventArgs'](_0x9f6cx1, _0x9f6cx2)
		}
	}
	, isInUndoRedoTransaction: function () {
		return this['inUndoRedoTransaction']
	}
	, onUndoRedoTransactionStart: function (_0x9f6cx1, _0x9f6cx2) {
		this['inUndoRedoTransaction'] = true
	}
	, onUndoRedoTransactionEnd: function (_0x9f6cx1, _0x9f6cx2) {
		this['inUndoRedoTransaction'] = false
	}
	, isUndoingOrRedoing: function () {
		return !!this['undoRedoPostponed']
	}
	, beforeUndoRedo: function (_0x9f6cx1) {
		this['undoRedoPostponed'] = []
	}
	, afterUndoRedo: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		Ext['Array']['forEach'](_0x9f6cx2['undoRedoPostponed'], function (_0x9f6cx5) {
			_0x9f6cx5()
		});
		_0x9f6cx2['undoRedoPostponed'] = null
	}
	, postponeAfterUndoRedo: function (_0x9f6cx1) {
		Ext['Assert'] && Ext['Assert']['isFunction'](_0x9f6cx1, 'Parameter must be a function');
		this['undoRedoPostponed']['push'](_0x9f6cx1)
	}
	, beforeSetRoot: function () {
		this['__isSettingRoot'] = true
	}
	, afterSetRoot: function () {
		this['__isSettingRoot'] = false;
		if (!this['getRoot']()) {
			this['fireEvent']('clear', this)
		}
	}
	, beforeFillNode: function (_0x9f6cx1) {
		if (_0x9f6cx1['isRoot']()) {
			this['beforeSetRoot']()
		}
	}
	, afterFillNode: function (_0x9f6cx1) {
		if (_0x9f6cx1['isRoot']()) {
			this['afterSetRoot']()
		}
	}
	, isRootSettingOrLoading: function () {
		return this['isLoading']() || (this['isTreeStore'] && this['__isSettingRoot'])
	}
});
Ext.define('Ext.ux.Scheduler.data.Calendar', {
	extend: 'Ext.data.Store'
	, alias: 'store.calendar'
	, requires: ['Ext.Date', 'Ext.ux.Scheduler.model.CalendarDay', 'Ext.ux.Scheduler.model.Range', 'Ext.ux.Scheduler.util.Date']
	, mixins: ['Ext.ux.Scheduler.data.mixin.UniversalModelGetter', 'Robo.data.Store']
	, model: 'Ext.ux.Scheduler.model.CalendarDay'
	, daysPerMonth: 30
	, daysPerWeek: 7
	, hoursPerDay: 24
	, unitsInMs: null
	, defaultNonWorkingTimeCssCls: 'sch-nonworkingtime'
	, weekendsAreWorkdays: false
	, weekendFirstDay: 6
	, weekendSecondDay: 0
	, holidaysCache: null
	, availabilityIntervalsCache: null
	, daysIndex: null
	, weekAvailability: null
	, defaultWeekAvailability: null
	, nonStandardWeeksByStartDate: null
	, nonStandardWeeksStartDates: null
	, calendarId: null
	, parent: null
	, defaultAvailability: ['00:00-24:00']
	, name: null
	, suspendCacheUpdate: 0
	, availabilitySearchLimit: 1825
	, inheritableStatics: {
		getCalendar: function (_0x9f6cx1) {
			if (_0x9f6cx1 instanceof Ext.ux.Scheduler['data']['Calendar']) {
				return _0x9f6cx1
			};
			return Ext['data']['StoreManager']['lookup']('GNT_CALENDAR:' + _0x9f6cx1)
		}
		, getAllCalendars: function () {
			var _0x9f6cx1 = [];
			Ext['data']['StoreManager']['each'](function (_0x9f6cx2) {
				if (_0x9f6cx2 instanceof Ext.ux.Scheduler['data']['Calendar']) {
					_0x9f6cx1['push'](_0x9f6cx2)
				}
			});
			return _0x9f6cx1
		}
		, removeAll: function () {
			var _0x9f6cx1 = Ext['data']['StoreManager'];
			_0x9f6cx1['each'](function (_0x9f6cx2) {
				if (_0x9f6cx2 instanceof Ext.ux.Scheduler['data']['Calendar']) {
					_0x9f6cx1['unregister'](_0x9f6cx2);
					Ext['destroy'](_0x9f6cx2)
				}
			})
		}
	}
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		var _0x9f6cx2 = _0x9f6cx1['parent'];
		delete _0x9f6cx1['parent'];
		var _0x9f6cx5 = _0x9f6cx1['calendarId'];
		delete _0x9f6cx1['calendarId'];
		this['callParent'](arguments);
		this['setParent'](_0x9f6cx2);
		this['setCalendarId'](_0x9f6cx5);
		this['unitsInMs'] = {
			MILLI: 1
			, SECOND: 1000
			, MINUTE: 60 * 1000
			, HOUR: 60 * 60 * 1000
			, DAY: this['hoursPerDay'] * 60 * 60 * 1000
			, WEEK: this['daysPerWeek'] * this['hoursPerDay'] * 60 * 60 * 1000
			, MONTH: this['daysPerMonth'] * this['hoursPerDay'] * 60 * 60 * 1000
			, QUARTER: 3 * this['daysPerMonth'] * 24 * 60 * 60 * 1000
			, YEAR: 4 * 3 * this['daysPerMonth'] * 24 * 60 * 60 * 1000
		};
		this['defaultWeekAvailability'] = this['getDefaultWeekAvailability']();
		this['on']({
			update: this['clearCache']
			, add: this['clearCache']
			, remove: this['clearCache']
			, filter: this['clearCache']
			, sort: this['clearCache']
			, clear: this['clearCache']
			, refresh: this['clearCache']
			, write: this['clearCache']
			, scope: this
		});
		this['clearCache']()
	}
	, getCalendarId: function () {
		return this['calendarId']
	}
	, setCalendarId: function (_0x9f6cx2) {
		if (this['calendarId'] != null) {
			Ext['data']['StoreManager']['unregister'](this)
		};
		this['calendarId'] = _0x9f6cx2;
		if (_0x9f6cx2 != null) {
			this['storeId'] = 'GNT_CALENDAR:' + _0x9f6cx2;
			Ext['data']['StoreManager']['register'](this)
		}
		else {
			this['storeId'] = null
		};
		var _0x9f6cx1 = this['proxy'];
		if (_0x9f6cx1 && _0x9f6cx1['extraParams']) {
			_0x9f6cx1['extraParams']['calendarId'] = _0x9f6cx2
		}
	}
	, getDefaultWeekAvailability: function () {
		var _0x9f6cx4 = this['defaultAvailability'];
		var _0x9f6cx3 = this['weekendFirstDay'];
		var _0x9f6cx1 = this['weekendSecondDay'];
		var _0x9f6cx5 = [];
		for (var _0x9f6cx2 = 0; _0x9f6cx2 < 7; _0x9f6cx2++) {
			_0x9f6cx5['push'](this['weekendsAreWorkdays'] || _0x9f6cx2 != _0x9f6cx3 && _0x9f6cx2 != _0x9f6cx1 ? new this['model']({
				Type: 'WEEKDAY'
				, Weekday: _0x9f6cx2
				, Availability: _0x9f6cx4 && _0x9f6cx4['slice']() || []
				, IsWorkingDay: true
			}) : new this['model']({
				Type: 'WEEKDAY'
				, Weekday: _0x9f6cx2
				, Availability: []
			}))
		};
		return _0x9f6cx5
	}
	, clearCache: function () {
		if (this['suspendCacheUpdate'] > 0) {
			return
		};
		this['holidaysCache'] = {};
		this['availabilityIntervalsCache'] = {};
		var _0x9f6cx5 = this['daysIndex'] = {};
		var _0x9f6cx1 = this['weekAvailability'] = [];
		var _0x9f6cx3 = this['nonStandardWeeksStartDates'] = [];
		var _0x9f6cx2 = this['nonStandardWeeksByStartDate'] = {};
		this['each'](function (_0x9f6cxa) {
			var _0x9f6cx4 = _0x9f6cxa['getId']();
			var _0x9f6cxe = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/ ['exec'](_0x9f6cx4);
			var _0x9f6cxc = /^WEEKDAY:(\d+)$/ ['exec'](_0x9f6cx4);
			var _0x9f6cxb = _0x9f6cxa['getType']();
			var _0x9f6cx13 = _0x9f6cxa['getWeekday']();
			if (_0x9f6cxb == 'WEEKDAYOVERRIDE' || _0x9f6cxe) {
				var _0x9f6cx7, _0x9f6cx9;
				if (_0x9f6cxb == 'WEEKDAYOVERRIDE') {
					_0x9f6cx7 = _0x9f6cxa['getOverrideStartDate']();
					_0x9f6cx9 = _0x9f6cxa['getOverrideEndDate']()
				};
				if (_0x9f6cxe) {
					_0x9f6cx7 = Ext['Date']['parse'](_0x9f6cxe[2], 'Y/m/d');
					_0x9f6cx9 = Ext['Date']['parse'](_0x9f6cxe[3], 'Y/m/d');
					_0x9f6cx13 = _0x9f6cxe[1]
				};
				if (_0x9f6cx7 && _0x9f6cx9 && _0x9f6cx13 != null) {
					var _0x9f6cx8 = _0x9f6cx7 - 0;
					if (!_0x9f6cx2[_0x9f6cx8]) {
						_0x9f6cx2[_0x9f6cx8] = {
							startDate: new Date(_0x9f6cx7)
							, endDate: new Date(_0x9f6cx9)
							, name: _0x9f6cxa['getName']()
							, weekAvailability: []
							, mainDay: null
						};
						_0x9f6cx3['push'](_0x9f6cx8)
					};
					if (_0x9f6cx13 >= 0) {
						_0x9f6cx2[_0x9f6cx8]['weekAvailability'][_0x9f6cx13] = _0x9f6cxa
					}
					else {
						_0x9f6cx2[_0x9f6cx8]['mainDay'] = _0x9f6cxa
					}
				}
			}
			else {
				if (_0x9f6cxb == 'WEEKDAY' || _0x9f6cxc) {
					if (_0x9f6cxc) {
						_0x9f6cx13 = _0x9f6cxc[1]
					};
					if (_0x9f6cx13 != null) {
						if (_0x9f6cx13 < 0 || _0x9f6cx13 > 6) {
							throw new Error('Incorrect week day index')
						};
						_0x9f6cx1[_0x9f6cx13] = _0x9f6cxa
					}
				}
				else {
					var _0x9f6cx6 = _0x9f6cxa['getDate']();
					if (_0x9f6cx6) {
						_0x9f6cx5[_0x9f6cx6 - 0] = _0x9f6cxa
					}
				}
			}
		});
		_0x9f6cx3['sort'](function (_0x9f6cx7, _0x9f6cx4) {
			return _0x9f6cx7 - _0x9f6cx4
		});
		this['fireEvent']('calendarchange', this)
	}
	, intersectsWithCurrentWeeks: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = false;
		this['forEachNonStandardWeek'](function (_0x9f6cx7) {
			var _0x9f6cx3 = _0x9f6cx7['startDate'];
			var _0x9f6cx4 = _0x9f6cx7['endDate'];
			if (_0x9f6cx3 <= _0x9f6cx2 && _0x9f6cx2 < _0x9f6cx4 || _0x9f6cx3 < _0x9f6cx5 && _0x9f6cx5 <= _0x9f6cx4) {
				_0x9f6cx1 = true;
				return false
			}
		});
		return _0x9f6cx1
	}
	, addNonStandardWeek: function (_0x9f6cx2, _0x9f6cx7, _0x9f6cx1, _0x9f6cx5) {
		_0x9f6cx2 = Ext['Date']['clearTime'](new Date(_0x9f6cx2));
		_0x9f6cx7 = Ext['Date']['clearTime'](new Date(_0x9f6cx7));
		if (this['intersectsWithCurrentWeeks'](_0x9f6cx2, _0x9f6cx7)) {
			throw new Error('Can not add intersecting week')
		};
		var _0x9f6cx4 = this['model'];
		var _0x9f6cx6 = [];
		Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cx8, _0x9f6cx9) {
			if (_0x9f6cx8 instanceof Ext.ux.Scheduler['model']['CalendarDay']) {
				_0x9f6cx8['setType']('WEEKDAYOVERRIDE');
				_0x9f6cx8['setOverrideStartDate'](_0x9f6cx2);
				_0x9f6cx8['setOverrideEndDate'](_0x9f6cx7);
				_0x9f6cx8['setWeekday'](_0x9f6cx9);
				_0x9f6cx8['setName'](_0x9f6cx5 || 'Week override');
				_0x9f6cx6['push'](_0x9f6cx8)
			}
			else {
				if (Ext['isArray'](_0x9f6cx8)) {
					var _0x9f6cxc = new _0x9f6cx4();
					_0x9f6cxc['setType']('WEEKDAYOVERRIDE');
					_0x9f6cxc['setOverrideStartDate'](_0x9f6cx2);
					_0x9f6cxc['setOverrideEndDate'](_0x9f6cx7);
					_0x9f6cxc['setWeekday'](_0x9f6cx9);
					_0x9f6cxc['setName'](_0x9f6cx5 || 'Week override');
					_0x9f6cxc['setAvailability'](_0x9f6cx8);
					_0x9f6cx6['push'](_0x9f6cxc)
				}
			}
		});
		var _0x9f6cx3 = new _0x9f6cx4();
		_0x9f6cx3['setType']('WEEKDAYOVERRIDE');
		_0x9f6cx3['setOverrideStartDate'](_0x9f6cx2);
		_0x9f6cx3['setOverrideEndDate'](_0x9f6cx7);
		_0x9f6cx3['setWeekday'](-1);
		_0x9f6cx3['setName'](_0x9f6cx5 || 'Week override');
		_0x9f6cx6['push'](_0x9f6cx3);
		this['add'](_0x9f6cx6)
	}
	, getNonStandardWeekByStartDate: function (_0x9f6cx1) {
		return this['nonStandardWeeksByStartDate'][Ext['Date']['clearTime'](new Date(_0x9f6cx1)) - 0] || null
	}
	, getNonStandardWeekByDate: function (_0x9f6cx3) {
		_0x9f6cx3 = Ext['Date']['clearTime'](new Date(_0x9f6cx3)) - 0;
		var _0x9f6cx4 = this['nonStandardWeeksStartDates'];
		var _0x9f6cx1 = this['nonStandardWeeksByStartDate'];
		for (var _0x9f6cx5 = 0; _0x9f6cx5 < _0x9f6cx4['length']; _0x9f6cx5++) {
			var _0x9f6cx2 = _0x9f6cx1[_0x9f6cx4[_0x9f6cx5]];
			if (_0x9f6cx2['startDate'] > _0x9f6cx3) {
				break
			};
			if (_0x9f6cx2['startDate'] <= _0x9f6cx3 && _0x9f6cx3 <= _0x9f6cx2['endDate']) {
				return _0x9f6cx2
			}
		};
		return null
	}
	, removeNonStandardWeek: function (_0x9f6cx1) {
		_0x9f6cx1 = Ext['Date']['clearTime'](new Date(_0x9f6cx1)) - 0;
		var _0x9f6cx2 = this['getNonStandardWeekByStartDate'](_0x9f6cx1);
		if (!_0x9f6cx2) {
			return
		};
		this['remove'](Ext['Array']['clean'](_0x9f6cx2['weekAvailability'])['concat'](_0x9f6cx2['mainDay']))
	}
	, forEachNonStandardWeek: function (_0x9f6cx4, _0x9f6cx5) {
		var _0x9f6cx3 = this;
		var _0x9f6cx7 = this['nonStandardWeeksStartDates'];
		var _0x9f6cx1 = this['nonStandardWeeksByStartDate'];
		for (var _0x9f6cx2 = 0; _0x9f6cx2 < _0x9f6cx7['length']; _0x9f6cx2++) {
			if (_0x9f6cx4['call'](_0x9f6cx5 || _0x9f6cx3, _0x9f6cx1[_0x9f6cx7[_0x9f6cx2]]) === false) {
				return false
			}
		}
	}
	, setWeekendsAreWorkDays: function (_0x9f6cx1) {
		if (_0x9f6cx1 !== this['weekendsAreWorkdays']) {
			this['weekendsAreWorkdays'] = _0x9f6cx1;
			this['defaultWeekAvailability'] = this['getDefaultWeekAvailability']();
			this['clearCache']()
		}
	}
	, areWeekendsWorkDays: function () {
		return this['weekendsAreWorkdays']
	}
	, getCalendarDay: function (_0x9f6cx1) {
		_0x9f6cx1 = typeof _0x9f6cx1 == 'number' ? new Date(_0x9f6cx1) : _0x9f6cx1;
		return this['getOverrideDay'](_0x9f6cx1) || this['getWeekDay'](_0x9f6cx1['getDay'](), _0x9f6cx1) || this['getDefaultCalendarDay'](_0x9f6cx1['getDay']())
	}
	, getOverrideDay: function (_0x9f6cx1) {
		return this['getOwnCalendarDay'](_0x9f6cx1) || this['parent'] && this['parent']['getOverrideDay'](_0x9f6cx1) || null
	}
	, getOwnCalendarDay: function (_0x9f6cx1) {
		_0x9f6cx1 = typeof _0x9f6cx1 == 'number' ? new Date(_0x9f6cx1) : _0x9f6cx1;
		return this['daysIndex'][Ext['Date']['clearTime'](_0x9f6cx1, true) - 0]
	}
	, getWeekDay: function (_0x9f6cx5, _0x9f6cx2) {
		if (_0x9f6cx2) {
			var _0x9f6cx1 = this['getNonStandardWeekByDate'](_0x9f6cx2);
			if (_0x9f6cx1 && _0x9f6cx1['weekAvailability'][_0x9f6cx5]) {
				return _0x9f6cx1['weekAvailability'][_0x9f6cx5]
			}
		};
		return this['weekAvailability'][_0x9f6cx5] || this['parent'] && this['parent']['getWeekDay'](_0x9f6cx5, _0x9f6cx2) || null
	}
	, getDefaultCalendarDay: function (_0x9f6cx1) {
		if (!this['hasOwnProperty']('defaultAvailability') && !this['hasOwnProperty']('weekendsAreWorkdays') && this['parent']) {
			return this['parent']['getDefaultCalendarDay'](_0x9f6cx1)
		};
		return this['defaultWeekAvailability'][_0x9f6cx1]
	}
	, isHoliday: function (_0x9f6cx5) {
		var _0x9f6cx2 = _0x9f6cx5 - 0;
		var _0x9f6cx3 = this['holidaysCache'];
		if (_0x9f6cx3[_0x9f6cx2] != null) {
			return _0x9f6cx3[_0x9f6cx2]
		};
		_0x9f6cx5 = typeof _0x9f6cx5 == 'number' ? new Date(_0x9f6cx5) : _0x9f6cx5;
		var _0x9f6cx1 = this['getCalendarDay'](_0x9f6cx5);
		if (!_0x9f6cx1) {
			throw new Error('can\'t find day for ' + _0x9f6cx5)
		};
		return _0x9f6cx3[_0x9f6cx2] = !_0x9f6cx1['getIsWorkingDay']()
	}
	, isWeekend: function (_0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx2['getDay']();
		return _0x9f6cx1 === this['weekendFirstDay'] || _0x9f6cx1 === this['weekendSecondDay']
	}
	, isWorkingDay: function (_0x9f6cx1) {
		return !this['isHoliday'](_0x9f6cx1)
	}
	, convertMSDurationToUnit: function (_0x9f6cx1, _0x9f6cx2) {
		return _0x9f6cx1 / this['unitsInMs'][Ext.ux.Scheduler['util']['Date']['getNameOfUnit'](_0x9f6cx2)]
	}
	, convertDurationToMs: function (_0x9f6cx2, _0x9f6cx1) {
		return _0x9f6cx2 * this['unitsInMs'][Ext.ux.Scheduler['util']['Date']['getNameOfUnit'](_0x9f6cx1)]
	}
	, convertDuration: function (_0x9f6cx4, _0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx4;
		if (_0x9f6cx3 != _0x9f6cx2) {
			_0x9f6cx1 = _0x9f6cx5['convertMSDurationToUnit'](_0x9f6cx5['convertDurationToMs'](_0x9f6cx4, _0x9f6cx3), _0x9f6cx2)
		};
		return _0x9f6cx1
	}
	, getHolidaysRanges: function (_0x9f6cx5, _0x9f6cx7, _0x9f6cx1) {
		if (_0x9f6cx5 > _0x9f6cx7) {
			Ext['Error']['raise']('startDate can\'t be bigger than endDate')
		};
		_0x9f6cx5 = Ext['Date']['clearTime'](_0x9f6cx5, true);
		_0x9f6cx7 = Ext['Date']['clearTime'](_0x9f6cx7, true);
		var _0x9f6cx2 = []
			, _0x9f6cx6, _0x9f6cx3;
		for (_0x9f6cx3 = _0x9f6cx5; _0x9f6cx3 < _0x9f6cx7; _0x9f6cx3 = Ext.ux.Scheduler['util']['Date']['getNext'](_0x9f6cx3, Ext.ux.Scheduler['util']['Date'].DAY, 1)) {
			if (this['isHoliday'](_0x9f6cx3) || (this['weekendsAreWorkdays'] && _0x9f6cx1 && this['isWeekend'](_0x9f6cx3))) {
				var _0x9f6cx8 = this['getCalendarDay'](_0x9f6cx3);
				var _0x9f6cx9 = _0x9f6cx8 && _0x9f6cx8['getCls']() || this['defaultNonWorkingTimeCssCls'];
				var _0x9f6cx4 = Ext.ux.Scheduler['util']['Date']['getNext'](_0x9f6cx3, Ext.ux.Scheduler['util']['Date'].DAY, 1);
				if (!_0x9f6cx6) {
					_0x9f6cx6 = new Ext.ux.Scheduler['model'].Range({
						StartDate: _0x9f6cx3
						, EndDate: _0x9f6cx4
						, Cls: _0x9f6cx9
					})
				}
				else {
					if (_0x9f6cx6['getCls']() == _0x9f6cx9) {
						_0x9f6cx6['setEndDate'](_0x9f6cx4)
					}
					else {
						_0x9f6cx2['push'](_0x9f6cx6);
						_0x9f6cx6 = new Ext.ux.Scheduler['model'].Range({
							StartDate: _0x9f6cx3
							, EndDate: _0x9f6cx4
							, Cls: _0x9f6cx9
						})
					}
				}
			}
			else {
				if (_0x9f6cx6) {
					_0x9f6cx2['push'](_0x9f6cx6);
					_0x9f6cx6 = null
				}
			}
		};
		if (_0x9f6cx6) {
			_0x9f6cx2['push'](_0x9f6cx6)
		};
		return _0x9f6cx2
	}
	, forEachAvailabilityInterval: function (_0x9f6cx11, _0x9f6cx7, _0x9f6cx12) {
		_0x9f6cx12 = _0x9f6cx12 || this;
		var _0x9f6cxb = this;
		var _0x9f6cx3 = _0x9f6cx11['startDate'];
		var _0x9f6cxa = _0x9f6cx11['endDate'];
		var _0x9f6cxf = _0x9f6cx11['isForward'] !== false;
		if (_0x9f6cxf ? !_0x9f6cx3 : !_0x9f6cxa) {
			throw new Error('At least `startDate` or `endDate` is required, depending from the `isForward` option')
		};
		var _0x9f6cx1 = new Date(_0x9f6cxf ? _0x9f6cx3 : _0x9f6cxa);
		var _0x9f6cx5 = Ext.ux.Scheduler['util']['Date'];
		if (_0x9f6cxf) {
			if (!_0x9f6cxa) {
				_0x9f6cxa = _0x9f6cx5['add'](_0x9f6cx3, _0x9f6cx5.DAY, _0x9f6cx11['availabilitySearchLimit'] || this['availabilitySearchLimit'] || 5 * 365)
			}
		}
		else {
			if (!_0x9f6cx3) {
				_0x9f6cx3 = _0x9f6cx5['add'](_0x9f6cxa, _0x9f6cx5.DAY, -(_0x9f6cx11['availabilitySearchLimit'] || this['availabilitySearchLimit'] || 5 * 365))
			}
		};
		var _0x9f6cx6 = false;
		while (_0x9f6cxf ? _0x9f6cx1 < _0x9f6cxa : _0x9f6cx1 > _0x9f6cx3) {
			var _0x9f6cxc = this['getAvailabilityIntervalsFor'](_0x9f6cx1 - (_0x9f6cxf ? 0 : 1), _0x9f6cxf ? _0x9f6cx6 : false);
			for (var _0x9f6cx8 = _0x9f6cxf ? 0 : _0x9f6cxc['length'] - 1; _0x9f6cxf ? _0x9f6cx8 < _0x9f6cxc['length'] : _0x9f6cx8 >= 0; _0x9f6cxf ? _0x9f6cx8++ : _0x9f6cx8--) {
				var _0x9f6cx2 = _0x9f6cxc[_0x9f6cx8];
				var _0x9f6cx13 = _0x9f6cx2['startDate'];
				var _0x9f6cxd = _0x9f6cx2['endDate'];
				if (_0x9f6cx13 >= _0x9f6cxa || _0x9f6cxd <= _0x9f6cx3) {
					continue
				};
				var _0x9f6cx4 = _0x9f6cx13 < _0x9f6cx3 ? _0x9f6cx3 : _0x9f6cx13;
				var _0x9f6cxe = _0x9f6cxd > _0x9f6cxa ? _0x9f6cxa : _0x9f6cxd;
				if (_0x9f6cx7['call'](_0x9f6cx12, _0x9f6cx4, _0x9f6cxe) === false) {
					return false
				}
			};
			_0x9f6cx1 = _0x9f6cxf ? _0x9f6cx5['getStartOfNextDay'](_0x9f6cx1, false, _0x9f6cx6) : _0x9f6cx5['getEndOfPreviousDay'](_0x9f6cx1, _0x9f6cx6);
			_0x9f6cx6 = true
		}
	}
	, calculateDuration: function (_0x9f6cx1, _0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx5 = 0;
		this['forEachAvailabilityInterval']({
			startDate: _0x9f6cx1
			, endDate: _0x9f6cx3
		}, function (_0x9f6cx6, _0x9f6cx7) {
			var _0x9f6cx4 = _0x9f6cx6['getTimezoneOffset']() - _0x9f6cx7['getTimezoneOffset']();
			_0x9f6cx5 += _0x9f6cx7 - _0x9f6cx6 + _0x9f6cx4 * 60 * 1000
		});
		return this['convertMSDurationToUnit'](_0x9f6cx5, _0x9f6cx2)
	}
	, calculateEndDate: function (_0x9f6cx1, _0x9f6cx7, _0x9f6cx2) {
		if (!_0x9f6cx7) {
			return new Date(_0x9f6cx1)
		};
		var _0x9f6cx4 = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cx3;
		_0x9f6cx7 = this['convertDurationToMs'](_0x9f6cx7, _0x9f6cx2);
		var _0x9f6cx5 = _0x9f6cx7 === 0 && Ext['Date']['clearTime'](_0x9f6cx1, true) - _0x9f6cx1 === 0 ? _0x9f6cx4['add'](_0x9f6cx1, Ext.ux.Scheduler['util']['Date'].DAY, -1) : _0x9f6cx1;
		this['forEachAvailabilityInterval']({
			startDate: _0x9f6cx5
		}, function (_0x9f6cx9, _0x9f6cx8) {
			var _0x9f6cxc = _0x9f6cx8 - _0x9f6cx9;
			var _0x9f6cx6 = _0x9f6cx9['getTimezoneOffset']() - _0x9f6cx8['getTimezoneOffset']();
			if (_0x9f6cxc >= _0x9f6cx7) {
				_0x9f6cx3 = new Date(_0x9f6cx9 - 0 + _0x9f6cx7);
				return false
			}
			else {
				_0x9f6cx7 -= _0x9f6cxc + _0x9f6cx6 * 60 * 1000
			}
		});
		return _0x9f6cx3
	}
	, calculateStartDate: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx2) {
		if (!_0x9f6cx5) {
			return new Date(_0x9f6cx3)
		};
		var _0x9f6cx1;
		_0x9f6cx5 = this['convertDurationToMs'](_0x9f6cx5, _0x9f6cx2);
		this['forEachAvailabilityInterval']({
			endDate: _0x9f6cx3
			, isForward: false
		}, function (_0x9f6cx7, _0x9f6cx4) {
			var _0x9f6cx6 = _0x9f6cx4 - _0x9f6cx7;
			if (_0x9f6cx6 >= _0x9f6cx5) {
				_0x9f6cx1 = new Date(_0x9f6cx4 - _0x9f6cx5);
				return false
			}
			else {
				_0x9f6cx5 -= _0x9f6cx6
			}
		});
		return _0x9f6cx1
	}
	, skipNonWorkingTime: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = false;
		this['forEachAvailabilityInterval'](_0x9f6cx5 ? {
			startDate: _0x9f6cx1
		} : {
			endDate: _0x9f6cx1
			, isForward: false
		}, function (_0x9f6cx4, _0x9f6cx3) {
			_0x9f6cx1 = _0x9f6cx5 ? _0x9f6cx4 : _0x9f6cx3;
			_0x9f6cx2 = true;
			return false
		});
		if (!_0x9f6cx2) {
			throw new Error('skipNonWorkingTime: Cannot skip non-working time, please ensure that this calendar has any working period of time specified')
		};
		return new Date(_0x9f6cx1)
	}
	, skipWorkingTime: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx2) {
		return _0x9f6cx5 >= 0 ? this['calculateEndDate'](_0x9f6cx1, _0x9f6cx5, _0x9f6cx2) : this['calculateStartDate'](_0x9f6cx1, -_0x9f6cx5, _0x9f6cx2)
	}
	, getAvailabilityIntervalsFor: function (_0x9f6cx1, _0x9f6cx2) {
		if (_0x9f6cx2) {
			_0x9f6cx1 = (_0x9f6cx1).valueOf()
		}
		else {
			if (_0x9f6cx1 instanceof Date) {
				_0x9f6cx1 = (new Date(_0x9f6cx1['getFullYear'](), _0x9f6cx1['getMonth'](), _0x9f6cx1['getDate']())).valueOf()
			}
			else {
				_0x9f6cx1 = Ext['Date']['clearTime'](new Date(_0x9f6cx1)).valueOf()
			}
		};
		return this['availabilityIntervalsCache'][_0x9f6cx1] = (this['availabilityIntervalsCache'][_0x9f6cx1] || this['getCalendarDay'](_0x9f6cx1)['getAvailabilityIntervalsFor'](_0x9f6cx1))
	}
	, isChildOf: function (_0x9f6cx5) {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = false;
		while (_0x9f6cx1 && !_0x9f6cx2) {
			_0x9f6cx2 = _0x9f6cx1 === _0x9f6cx5;
			_0x9f6cx1 = _0x9f6cx1['parent']
		};
		return _0x9f6cx2
	}
	, getParentableCalendars: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = []
			, _0x9f6cx5 = Ext.ux.Scheduler['data']['Calendar']['getAllCalendars']();
		Ext['Array']['each'](_0x9f6cx5, function (_0x9f6cx3) {
			if (_0x9f6cx3 !== _0x9f6cx2 && !_0x9f6cx3['isChildOf'](_0x9f6cx2)) {
				_0x9f6cx1['push']({
					Id: _0x9f6cx3['calendarId']
					, Name: _0x9f6cx3['name'] || _0x9f6cx3['calendarId']
				})
			}
		});
		return _0x9f6cx1
	}
	, setParent: function (_0x9f6cx4) {
		var _0x9f6cx3 = Ext.ux.Scheduler['data']['Calendar']['getCalendar'](_0x9f6cx4);
		if (_0x9f6cx4 && !_0x9f6cx3) {
			throw new Error('Invalid parent specified for the calendar')
		};
		if (this['parent'] != _0x9f6cx3) {
			var _0x9f6cx2 = this['proxy'];
			var _0x9f6cx5 = {
				calendarchange: this['clearCache']
				, destroy: this['onParentDestroy']
				, scope: this
			};
			var _0x9f6cx1 = this['parent'];
			if (_0x9f6cx1) {
				_0x9f6cx1['un'](_0x9f6cx5)
			};
			this['parent'] = _0x9f6cx3;
			if (_0x9f6cx3) {
				_0x9f6cx3['on'](_0x9f6cx5)
			};
			if (_0x9f6cx2 && _0x9f6cx2['extraParams']) {
				_0x9f6cx2['extraParams']['parentId'] = _0x9f6cx3 ? _0x9f6cx3['calendarId'] : null
			};
			this['clearCache']();
			this['fireEvent']('parentchange', this, _0x9f6cx3, _0x9f6cx1)
		}
	}
	, onParentDestroy: function () {
		this['setParent'](null)
	}
	, isAvailabilityIntersected: function (_0x9f6cxf, _0x9f6cx2, _0x9f6cxb) {
		var _0x9f6cxe, _0x9f6cx1, _0x9f6cx4, _0x9f6cx8;
		for (var _0x9f6cx6 = 0; _0x9f6cx6 < 7; _0x9f6cx6++) {
			_0x9f6cxe = this['getWeekDay'](_0x9f6cx6) || this['getDefaultCalendarDay'](_0x9f6cx6);
			_0x9f6cx4 = _0x9f6cxf['getWeekDay'](_0x9f6cx6) || _0x9f6cxf['getDefaultCalendarDay'](_0x9f6cx6);
			if (!_0x9f6cxe || !_0x9f6cx4) {
				continue
			};
			_0x9f6cx1 = _0x9f6cxe['getAvailability']();
			_0x9f6cx8 = _0x9f6cx4['getAvailability']();
			for (var _0x9f6cx7 = 0, _0x9f6cx5 = _0x9f6cx1['length']; _0x9f6cx7 < _0x9f6cx5; _0x9f6cx7++) {
				for (var _0x9f6cx3 = 0, _0x9f6cxd = _0x9f6cx8['length']; _0x9f6cx3 < _0x9f6cxd; _0x9f6cx3++) {
					if (_0x9f6cx8[_0x9f6cx3]['startTime'] < _0x9f6cx1[_0x9f6cx7]['endTime'] && _0x9f6cx8[_0x9f6cx3]['endTime'] > _0x9f6cx1[_0x9f6cx7]['startTime']) {
						return true
					}
				}
			}
		};
		var _0x9f6cx12 = false;
		this['forEachNonStandardWeek'](function (_0x9f6cx9) {
			if (_0x9f6cx9['startDate'] >= _0x9f6cxb) {
				return false
			};
			if (_0x9f6cx2 < _0x9f6cx9['endDate']) {
				_0x9f6cx12 = true;
				return false
			}
		});
		return _0x9f6cx12
	}
});
Ext.define('Ext.ux.Gantt.model.CalendarDay', {
	extend: 'Ext.ux.Scheduler.model.CalendarDay'
	, customizableFields: [{
		name: 'Cls'
		, defaultValue: 'gnt-holiday'
	}]
});
Ext.define('Ext.ux.Gantt.data.Calendar', {
	extend: 'Ext.ux.Scheduler.data.Calendar'
	, model: 'Ext.ux.Gantt.model.CalendarDay'
	, defaultNonWorkingTimeCssCls: 'gnt-holiday'
});
Ext.define('Ext.ux.Gantt.field.Calendar', {
	extend: 'Ext.form.field.ComboBox'
	, requires: ['Ext.data.Store', 'Ext.ux.Gantt.model.Calendar', 'Ext.ux.Gantt.data.Calendar']
	, mixins: ['Ext.ux.Gantt.field.mixin.TaskField', 'Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.calendarfield'
	, alternateClassName: 'Ext.ux.Gantt.widget.CalendarField'
	, fieldProperty: 'calendarIdField'
	, getTaskValueMethod: 'getCalendarId'
	, setTaskValueMethod: 'setCalendarId'
	, pickerAlign: 'tl-bl?'
	, matchFieldWidth: true
	, editable: true
	, triggerAction: 'all'
	, valueField: 'Id'
	, displayField: 'Name'
	, queryMode: 'local'
	, forceSelection: true
	, allowBlank: true
	, initComponent: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getInitialConfig']();
		if (!_0x9f6cx1['store'] || _0x9f6cx2['store']['isEmptyStore']) {
			_0x9f6cx2['store'] = {
				xclass: 'Ext.data.Store'
				, autoDestroy: true
				, model: 'Ext.ux.Gantt.model.Calendar'
			}
		};
		if (!(_0x9f6cx2['store'] instanceof Ext['data']['Store'])) {
			_0x9f6cx2['store'] = Ext['create'](_0x9f6cx2['store'])
		};
		_0x9f6cx2['callParent'](arguments);
		this['updateCalendarsStore']();
		_0x9f6cx2['on']({
			expand: _0x9f6cx2['updateCalendarsStore']
			, show: function () {
				_0x9f6cx2['setReadOnly'](_0x9f6cx2['readOnly'])
			}
			, change: _0x9f6cx2['onFieldChange']
			, scope: _0x9f6cx2
		})
	}
	, updateCalendarsStore: function () {
		var _0x9f6cx1 = Ext['Array']['map'](Ext.ux.Gantt['data']['Calendar']['getAllCalendars'](), function (_0x9f6cx2) {
			return {
				Id: _0x9f6cx2['calendarId']
				, Name: _0x9f6cx2['name'] || _0x9f6cx2['calendarId']
			}
		});
		this['store']['loadData'](_0x9f6cx1)
	}
	, setReadOnly: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['store']['count']() === 0;
		this['callParent']([_0x9f6cx1])
	}
	, onSetTask: function () {
		this['setReadOnly'](this['readOnly']);
		this['setValue'](this['getTaskValue']())
	}
	, valueToVisible: function (_0x9f6cx4, _0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx3 = [];
		var _0x9f6cx1 = this['findRecordByValue'](_0x9f6cx4);
		if (_0x9f6cx1) {
			_0x9f6cx3['push'](_0x9f6cx1['data'])
		}
		else {
			if (Ext['isDefined'](_0x9f6cx5['valueNotFoundText']) && typeof _0x9f6cx5['valueNotFoundText'] == 'string') {
				_0x9f6cx3['push'](_0x9f6cx5['valueNotFoundText'])
			}
		};
		return _0x9f6cx5['displayTpl']['apply'](_0x9f6cx3)
	}
	, getValue: function () {
		return this['value'] || ''
	}
	, getErrors: function (_0x9f6cx2) {
		if (_0x9f6cx2) {
			var _0x9f6cx1 = this['findRecordByDisplay'](_0x9f6cx2);
			if (_0x9f6cx1) {
				if (this['task'] && !this['task']['isCalendarApplicable'](_0x9f6cx1['getId']())) {
					return [this.L('calendarNotApplicable')]
				}
			}
		};
		var _0x9f6cx5 = this['callParent'](arguments);
		if (_0x9f6cx5 && _0x9f6cx5['length']) {
			return _0x9f6cx5
		};
		if (!Ext['isEmpty'](_0x9f6cx2) && !(this['findRecordByDisplay'](_0x9f6cx2) || this['findRecordByValue'](_0x9f6cx2))) {
			return [this.L('invalidText')]
		}
		else {
			return []
		}
	}
	, onFieldChange: function (_0x9f6cx2, _0x9f6cx1) {
		this['setValue'](_0x9f6cx1)
	}
	, setValue: function (_0x9f6cx1) {
		this['callParent']([_0x9f6cx1]);
		if (undefined === _0x9f6cx1 || null === _0x9f6cx1 || '' === _0x9f6cx1) {
			this['value'] = ''
		};
		if (this['instantUpdate'] && !this['getSuppressTaskUpdate']() && this['task']) {
			if (this['getTaskValue']() != this['value']) {
				this['applyChanges']()
			}
		}
	}
	, assertValue: function () {
		var _0x9f6cx1 = this['getRawValue']();
		if (!_0x9f6cx1 && this['value']) {
			this['setValue']('')
		}
		else {
			this['callParent'](arguments)
		}
	}
});
Ext.define('Ext.ux.Gantt.column.Calendar', {
	extend: 'Ext.grid.column.Column'
	, alias: ['widget.calendarcolumn', 'widget.ganttcolumn.calendar']
	, requires: ['Ext.ux.Gantt.model.Calendar', 'Ext.ux.Gantt.field.Calendar']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, width: 100
	, align: 'left'
	, instantUpdate: true
	, store: null
	, fieldProperty: 'calendarIdField'
	, fieldConfigs: ['instantUpdate', 'store', 'fieldProperty']
	, editor: 'calendarfield'
	, defaultEditor: 'calendarfield'
	, initComponent: function () {
		this['initTaskFieldColumn']({
			format: this['editorFormat'] || this['format'] || Ext['Date']['defaultFormat']
		});
		this['callParent'](arguments)
	}
	, applyColumnCls: function (_0x9f6cx4, _0x9f6cx7, _0x9f6cx2, _0x9f6cx3, _0x9f6cx5, _0x9f6cx1) {
		if (!_0x9f6cx4) {
			_0x9f6cx7['tdCls'] = (_0x9f6cx7['tdCls'] || '') + ' gnt-default'
		}
	}
	, getValueToRender: function (_0x9f6cx4, _0x9f6cx7, _0x9f6cx2, _0x9f6cx3, _0x9f6cx5, _0x9f6cx1) {
		_0x9f6cx4 = _0x9f6cx4 || (_0x9f6cx1['calendar'] ? _0x9f6cx1['calendar']['calendarId'] : '');
		return this['field']['valueToVisible'](_0x9f6cx4, _0x9f6cx2) || _0x9f6cx4
	}
});
Ext.define('Ext.ux.Gantt.field.ConstraintDate', {
	extend: 'Ext.ux.Gantt.field.Date'
	, alias: 'widget.constraintdatefield'
	, fieldProperty: 'constraintDateField'
	, getTaskValueMethod: 'getConstraintDate'
	, setTaskValueMethod: 'setConstraintDate'
	, reAssertValue: false
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		this['format'] = _0x9f6cx1['format'] || this.L('format');
		return this['callParent'](arguments)
	}
	, valueToVisible: function (_0x9f6cx3, _0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx1 && _0x9f6cx1['getConstraintClass']()
			, _0x9f6cx4 = _0x9f6cx5['format'] || Ext['Date']['defaultFormat'];
		if (_0x9f6cx2) {
			return _0x9f6cx2['getDisplayableConstraintDateForFormat'](_0x9f6cx3, _0x9f6cx4, _0x9f6cx1)
		}
		else {
			return _0x9f6cx3
		}
	}
	, visibleToValue: function (_0x9f6cx3) {
		var _0x9f6cx5 = this
			, _0x9f6cx4 = _0x9f6cx5['format'] || Ext['Date']['defaultFormat']
			, _0x9f6cx1 = _0x9f6cx5['task']
			, _0x9f6cx2 = _0x9f6cx1 && _0x9f6cx1['getConstraintClass']();
		if (_0x9f6cx2 && !Ext['isEmpty'](_0x9f6cx3)) {
			_0x9f6cx3 = _0x9f6cx2['adjustConstraintDateFromDisplayableWithFormat'](_0x9f6cx3, _0x9f6cx4, _0x9f6cx1)
		};
		return _0x9f6cx3
	}
});
Ext.define('Ext.ux.Gantt.column.ConstraintDate', {
	extend: 'Ext.grid.column.Date'
	, alias: ['widget.constraintdatecolumn', 'widget.ganttcolumn.constraintdate']
	, requires: ['Ext.ux.Gantt.field.ConstraintDate']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, width: 100
	, align: 'left'
	, fieldProperty: 'constraintDateField'
	, editor: 'constraintdatefield'
	, defaultEditor: 'constraintdatefield'
	, initComponent: function () {
		this['format'] = this['format'] || this.L('format');
		this['initTaskFieldColumn']({
			format: this['editorFormat'] || this['format']
			, taskField: this['fieldProperty']
		});
		this['callParent'](arguments)
	}
	, getValueToRender: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return _0x9f6cx2 && Ext['Date']['format'](this['field']['valueToVisible'](_0x9f6cx2, _0x9f6cx1), this['format']) || ''
	}
});
Ext.define('Ext.ux.Gantt.field.ConstraintType', {
	extend: 'Ext.form.field.ComboBox'
	, mixins: ['Ext.ux.Gantt.field.mixin.TaskField', 'Ext.ux.Gantt.mixin.Localizable']
	, uses: ['Ext.ux.Gantt.constraint.Base']
	, alias: 'widget.constrainttypefield'
	, alternateClassName: 'Ext.ux.Gantt.widget.ConstraintType.Field'
	, fieldProperty: 'constraintTypeField'
	, getTaskValueMethod: 'getConstraintType'
	, setTaskValueMethod: 'setConstraint'
	, pickerAlign: 'tl-bl?'
	, matchFieldWidth: false
	, forceSelection: true
	, triggerAction: 'all'
	, initComponent: function () {
		var _0x9f6cx2 = this;
		var _0x9f6cx1 = _0x9f6cx2.L('none');
		_0x9f6cx2['store'] = _0x9f6cx2['store'] || Ext.ux.Gantt['field']['ConstraintType']['buildDefaultConstraintTypeList'](_0x9f6cx1);
		_0x9f6cx2['emptyText'] = _0x9f6cx2['emptyText'] || _0x9f6cx1;
		this['on']('change', this['onFieldChange'], this);
		_0x9f6cx2['callParent'](arguments);
		this['optionsFilter'] = new Ext['util'].Filter({
			id: _0x9f6cx2['getId']() + '-filter'
			, filterFn: _0x9f6cx2['filterOptions']
			, scope: _0x9f6cx2
		});
		_0x9f6cx2['store']['addFilter'](this['optionsFilter'])
	}
	, filterOptions: function (_0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx1['get'](this['valueField'])
			, _0x9f6cx5 = Ext.ux.Gantt['constraint']['Base']['getConstraintClass'](_0x9f6cx2);
		return !this['task'] || !_0x9f6cx2 || _0x9f6cx5 && _0x9f6cx5['isApplicable'](this['task'])
	}
	, onSetTask: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		this['store'] && this['store']['addFilter'](this['optionsFilter']);
		this['setValue'](this['getTaskValue'](_0x9f6cx1))
	}
	, getErrors: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['callParent'](arguments);
		if (_0x9f6cx2 && _0x9f6cx2['length']) {
			return _0x9f6cx2
		};
		if (!Ext['isEmpty'](_0x9f6cx1) && !(this['findRecordByDisplay'](_0x9f6cx1) || this['findRecordByValue'](_0x9f6cx1))) {
			return [this.L('invalidText')]
		}
		else {
			return []
		}
	}
	, valueToVisible: function (_0x9f6cx4, _0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx3 = [];
		var _0x9f6cx1 = this['findRecordByValue'](!Ext['isEmpty'](_0x9f6cx4) ? _0x9f6cx4 : null);
		if (_0x9f6cx1) {
			_0x9f6cx3['push'](_0x9f6cx1['data'])
		}
		else {
			if (Ext['isDefined'](_0x9f6cx5['valueNotFoundText'])) {
				_0x9f6cx3['push'](_0x9f6cx5['valueNotFoundText'] || '')
			}
		};
		return _0x9f6cx5['displayTpl']['apply'](_0x9f6cx3)
	}
	, applyChanges: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx3 = _0x9f6cx5['getValue']()
			, _0x9f6cx2;
		_0x9f6cx1 = _0x9f6cx1 || _0x9f6cx5['task'];
		_0x9f6cx2 = Ext.ux.Gantt['constraint']['Base']['getConstraintClass'](_0x9f6cx3);
		_0x9f6cx5['setTaskValue'](_0x9f6cx1, _0x9f6cx3, _0x9f6cx2 && _0x9f6cx2['getInitialConstraintDate'](_0x9f6cx1) || null);
		_0x9f6cx1['fireEvent']('taskupdated', _0x9f6cx1, _0x9f6cx5)
	}
	, findRecordByDisplay: function (_0x9f6cx1) {
		if (!_0x9f6cx1) {
			return this['store']['first']()
		};
		return this['callParent'](arguments)
	}
	, onFieldChange: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this;
		if (!_0x9f6cx1['getSuppressTaskUpdate']() && _0x9f6cx1['task'] && (_0x9f6cx2 || this['getRawValue']() == _0x9f6cx1.L('none') || (!_0x9f6cx2 && !this['getRawValue']()))) {
			_0x9f6cx1['applyChanges']()
		}
	}
	, statics: {
		buildDefaultConstraintTypeList: function (_0x9f6cx2) {
			var _0x9f6cx1 = [];
			Ext['Array']['each'](Ext['ClassManager']['getNamesByExpression']('gntconstraint.*'), function (_0x9f6cx5) {
				var _0x9f6cx4 = Ext['ClassManager']['get'](_0x9f6cx5)
					, _0x9f6cx3 = _0x9f6cx4['alias'][0]
					, _0x9f6cx7 = _0x9f6cx3['split']('.')['pop']();
				_0x9f6cx4 && (_0x9f6cx1['push']([_0x9f6cx7, _0x9f6cx4.L('name')]))
			});
			_0x9f6cx1 = Ext['Array']['sort'](_0x9f6cx1, function (_0x9f6cx3, _0x9f6cx5) {
				return _0x9f6cx3[1] > _0x9f6cx5[1] ? 1 : -1
			});
			_0x9f6cx2 && _0x9f6cx1['unshift']([null, _0x9f6cx2]);
			return _0x9f6cx1
		}
	}
});
Ext.define('Ext.ux.Gantt.column.ConstraintType', {
	extend: 'Ext.grid.column.Column'
	, requires: ['Ext.ux.Gantt.field.ConstraintType']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, alias: ['widget.constrainttypecolumn', 'widget.ganttcolumn.constrainttype']
	, width: 100
	, align: 'left'
	, data: null
	, fieldProperty: 'constraintTypeField'
	, editor: 'constrainttypefield'
	, defaultEditor: 'constrainttypefield'
	, initComponent: function () {
		this['initTaskFieldColumn']({
			store: this['data']
			, taskField: this['fieldProperty']
		});
		this['callParent'](arguments)
	}
	, getValueToRender: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return _0x9f6cx2 && this['field']['valueToVisible'](_0x9f6cx2, _0x9f6cx1) || ''
	}
});
Ext.define('Ext.ux.Gantt.column.CostVariance', {
	extend: 'Ext.grid.column.Column'
	, requires: ['Ext.util.Format']
	, alias: ['widget.costvariancecolumn', 'widget.ganttcolumn.costvariance']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, width: 80
	, decimalPrecision: 2
	, decimalSeparator: null
	, fieldProperty: 'costVarianceField'
	, currencySymbol: null
	, currencySymbolAlign: null
	, initComponent: function () {
		this['currencySymbol'] = this['currencySymbol'] || this.L('currencySymbol');
		this['currencySymbolAlign'] = this['currencySymbolAlign'] || this.L('currencySymbolAlign');
		this['initTaskFieldColumn']();
		this['decimalSeparator'] = this['decimalSeparator'] || Ext['util']['Format']['decimalSeparator'];
		this['callParent'](arguments)
	}
	, getValueToRender: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx1 = '';
		if (Ext['isNumber'](_0x9f6cx5)) {
			_0x9f6cx1 = Ext['Number']['toFixed'](_0x9f6cx5, this['decimalPrecision']);
			if (this['currencySymbolAlign'] == 'left') {
				_0x9f6cx1 = this['currencySymbol'] + ' ' + _0x9f6cx1
			}
			else {
				_0x9f6cx1 += ' ' + this['currencySymbol']
			}
		};
		return _0x9f6cx1
	}
});
Ext.define('Ext.ux.Gantt.field.DeadlineDate', {
	extend: 'Ext.ux.Gantt.field.Date'
	, requires: ['Ext.ux.Scheduler.util.Date']
	, alias: 'widget.deadlinedatefield'
	, fieldProperty: 'deadlineDateField'
	, getTaskValueMethod: 'getDeadlineDate'
	, setTaskValueMethod: 'setDeadlineDate'
	, valueToVisible: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		return _0x9f6cx1['getDisplayEndDate'](this['format'], true, _0x9f6cx2, true)
	}
	, visibleToValue: function (_0x9f6cx1) {
		if (_0x9f6cx1 && _0x9f6cx1 - Ext['Date']['clearTime'](_0x9f6cx1, true) === 0) {
			_0x9f6cx1 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx1, Ext.ux.Scheduler['util']['Date'].DAY, 1)
		};
		return _0x9f6cx1
	}
});
Ext.define('Ext.ux.Gantt.column.DeadlineDate', {
	extend: 'Ext.grid.column.Date'
	, requires: ['Ext.ux.Gantt.field.DeadlineDate']
	, alias: ['widget.deadlinecolumn', 'widget.ganttcolumn.deadline']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, draggable: true
	, fieldProperty: 'deadlineDateField'
	, editor: 'deadlinedatefield'
	, initComponent: function () {
		this['initTaskFieldColumn']();
		this['callParent'](arguments)
	}
	, getValueToRender: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return _0x9f6cx2 && Ext['Date']['format'](this['field']['valueToVisible'](_0x9f6cx2, _0x9f6cx1), this['format']) || ''
	}
});
Ext.define('Ext.ux.Gantt.util.DependencyParser', {
	requires: ['Ext.ux.Scheduler.util.Date', 'Ext.ux.Gantt.util.DurationParser']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, separator: /\s*;\s*/
	, parseNumberFn: null
	, dependencyRegex: null
	, types: null
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1);
		this['initTypes']();
		var _0x9f6cx3 = this.L('typeText');
		for (var _0x9f6cx2 = 0; _0x9f6cx2 < this['types']['length']; _0x9f6cx2++) {
			this['types'][_0x9f6cx2] = (_0x9f6cx3[this['types'][_0x9f6cx2]] || this['types'][_0x9f6cx2])
		};
		var _0x9f6cx5 = '(-?\d+)(' + this['types'].join('|') + ')?([\+\-].*)?';
		this['dependencyRegex'] = this['dependencyRegex'] || new RegExp(_0x9f6cx5, 'i');
		this['durationParser'] = new Ext.ux.Gantt['util'].DurationParser({
			parseNumberFn: this['parseNumberFn']
		})
	}
	, initTypes: function () {
		this['types'] = this['types'] || ['SS', 'SF', 'FS', 'FF']
	}
	, parse: function (_0x9f6cxc) {
		if (!_0x9f6cxc) {
			return []
		};
		var _0x9f6cx3 = _0x9f6cxc['split'](this['separator']);
		var _0x9f6cxa = [];
		var _0x9f6cx5 = this['dependencyRegex'];
		for (var _0x9f6cx7 = 0; _0x9f6cx7 < _0x9f6cx3['length']; _0x9f6cx7++) {
			var _0x9f6cx1 = _0x9f6cx3[_0x9f6cx7];
			if (!_0x9f6cx1 && _0x9f6cx7 == _0x9f6cx3['length'] - 1) {
				continue
			};
			var _0x9f6cx6 = _0x9f6cx5['exec'](_0x9f6cx1);
			var _0x9f6cx4 = {};
			if (!_0x9f6cx6) {
				return null
			};
			_0x9f6cx4['taskId'] = parseInt(_0x9f6cx6[1], 10);
			_0x9f6cx4['type'] = Ext['Array']['indexOf'](this['types'], (_0x9f6cx6[2] || this['types'][2])['toUpperCase']());
			var _0x9f6cx8 = _0x9f6cx6[3];
			if (_0x9f6cx8) {
				var _0x9f6cx2 = this['durationParser']['parse'](_0x9f6cx8);
				if (!_0x9f6cx2) {
					return null
				};
				_0x9f6cx4['lag'] = _0x9f6cx2['value'];
				_0x9f6cx4['lagUnit'] = _0x9f6cx2['unit'] || Ext.ux.Scheduler['util']['Date']['DAY']
			};
			_0x9f6cxa['push'](_0x9f6cx4)
		};
		return _0x9f6cxa
	}
});
Ext.define('Ext.ux.Gantt.field.Dependency', {
	extend: 'Ext.form.field.Text'
	, alternateClassName: 'Ext.ux.Gantt.widget.DependencyField'
	, alias: 'widget.dependencyfield'
	, requires: ['Ext.ux.Scheduler.util.Date', 'Ext.ux.Gantt.util.DependencyParser']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, type: 'predecessors'
	, separator: ';'
	, task: null
	, dependencyParser: null
	, dependencyParserConfig: null
	, useSequenceNumber: false
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		Ext['apply'](this, _0x9f6cx1);
		this['dependencyParser'] = new Ext.ux.Gantt['util'].DependencyParser(Ext['apply']({
			parseNumberFn: function () {
				return Ext.ux.Gantt['widget']['DurationField']['prototype']['parseValue']['apply'](_0x9f6cx2, arguments)
			}
		}, this['dependencyParserConfig']));
		this['callParent'](arguments);
		this['addCls']('gnt-field-dependency')
	}
	, isPredecessor: function () {
		return this['type'] === 'predecessors'
	}
	, setTask: function (_0x9f6cx1) {
		this['task'] = _0x9f6cx1;
		this['setRawValue'](this['getFieldDisplayValue'](_0x9f6cx1))
	}
	, getDependencies: function () {
		return this['dependencyParser']['parse'](this['getRawValue']())
	}
	, getTaskIdFromDependency: function (_0x9f6cx5) {
		var _0x9f6cx2 = this['task']['getTaskStore']()
			, _0x9f6cx3 = _0x9f6cx5['taskId']
			, _0x9f6cx1;
		if (this['useSequenceNumber']) {
			_0x9f6cx1 = _0x9f6cx2['getBySequenceNumber'](_0x9f6cx3);
			_0x9f6cx3 = _0x9f6cx1 && _0x9f6cx1['getId']()
		};
		return _0x9f6cx3
	}
	, getErrors: function (_0x9f6cxe) {
		if (!_0x9f6cxe) {
			return []
		};
		var _0x9f6cx4 = this['dependencyParser']['parse'](_0x9f6cxe);
		if (!_0x9f6cx4) {
			return [this.L('invalidFormatText')]
		};
		var _0x9f6cx6 = this['getDependencies']()
			, _0x9f6cxb = this['isPredecessor']()
			, _0x9f6cx10 = this['task']
			, _0x9f6cx17 = _0x9f6cx10['getTaskStore']()['dependencyStore']
			, _0x9f6cx13 = _0x9f6cx10[_0x9f6cxb ? 'predecessors' : 'successors']
			, _0x9f6cx8 = this['dependencyParser']['types']
			, _0x9f6cx3 = _0x9f6cx17['allowedDependencyTypes']
			, _0x9f6cx7 = _0x9f6cx17['model']['Type']
			, _0x9f6cx1;
		var _0x9f6cx14 = [];
		for (var _0x9f6cx11 = 0; _0x9f6cx11 < _0x9f6cx6['length']; _0x9f6cx11++) {
			var _0x9f6cxf = _0x9f6cx6[_0x9f6cx11];
			_0x9f6cx1 = this['getTaskIdFromDependency'](_0x9f6cxf);
			if (!_0x9f6cx1) {
				return [this.L('invalidDependencyText')]
			};
			if (_0x9f6cx17['allowedDependencyTypes'] && !_0x9f6cx17['isValidDependencyType'](_0x9f6cxf['type'])) {
				var _0x9f6cx2 = '';
				for (var _0x9f6cx12 = 0, _0x9f6cxd = _0x9f6cx3['length']; _0x9f6cx12 < _0x9f6cxd; _0x9f6cx12++) {
					_0x9f6cx2 += _0x9f6cx8[_0x9f6cx7[_0x9f6cx3[_0x9f6cx12]]] + ','
				};
				return [Ext['String']['format'](this.L('invalidDependencyType'), _0x9f6cx8[_0x9f6cxf['type']], _0x9f6cx2['substring'](0, _0x9f6cx2['length'] - 1))]
			};
			var _0x9f6cx5 = new _0x9f6cx17['model']();
			_0x9f6cx5['setSourceId'](_0x9f6cxb ? _0x9f6cx1 : _0x9f6cx10['getId']());
			_0x9f6cx5['setTargetId'](_0x9f6cxb ? _0x9f6cx10['getId']() : _0x9f6cx1);
			_0x9f6cx5['setType'](_0x9f6cxf['type']);
			_0x9f6cx5['setLag'](_0x9f6cxf['lag'], _0x9f6cxf['lagUnit']);
			_0x9f6cx14['push'](_0x9f6cx5)
		};
		for (_0x9f6cx11 = 0; _0x9f6cx11 < _0x9f6cx14['length']; _0x9f6cx11++) {
			if (!_0x9f6cx17['isValidDependency'](_0x9f6cx14[_0x9f6cx11], _0x9f6cx14, _0x9f6cx13)) {
				return [this.L('invalidDependencyText')]
			}
		};
		return this['callParent']([_0x9f6cx4['value']])
	}
	, getFieldDisplayValue: function (_0x9f6cx1) {
		var _0x9f6cx8 = this['isPredecessor']()
			, _0x9f6cx13 = _0x9f6cx8 ? _0x9f6cx1['getIncomingDependencies'](true) : _0x9f6cx1['getOutgoingDependencies'](true)
			, _0x9f6cxc = this['dependencyParser']['types']
			, _0x9f6cx4 = Ext.ux.Gantt['model']['Dependency']['Type']['EndToStart']
			, _0x9f6cxa = []
			, _0x9f6cxb;
		for (var _0x9f6cx3 = 0; _0x9f6cx3 < _0x9f6cx13['length']; _0x9f6cx3++) {
			var _0x9f6cx6 = _0x9f6cx13[_0x9f6cx3];
			_0x9f6cxb = _0x9f6cx8 ? _0x9f6cx6['getSourceTask']() : _0x9f6cx6['getTargetTask']();
			if (_0x9f6cxb && _0x9f6cx6['isValid'](false)) {
				var _0x9f6cx7 = _0x9f6cx6['getType']()
					, _0x9f6cx2 = _0x9f6cx6['getLag']()
					, _0x9f6cx5 = _0x9f6cx6['getLagUnit']();
				_0x9f6cxa['push'](Ext['String']['format']('{0}{1}{2}{3}{4}', this['useSequenceNumber'] ? _0x9f6cxb['getSequenceNumber']() : _0x9f6cxb['getId'](), _0x9f6cx2 || _0x9f6cx7 !== _0x9f6cx4 ? _0x9f6cxc[_0x9f6cx7] : '', _0x9f6cx2 > 0 ? '+' : '', _0x9f6cx2 || '', _0x9f6cx2 && _0x9f6cx5 !== Ext.ux.Scheduler['util']['Date']['DAY'] ? _0x9f6cx5 : ''))
			}
		};
		return _0x9f6cxa.join(this['separator'])
	}
	, isDirty: function (_0x9f6cx5) {
		_0x9f6cx5 = _0x9f6cx5 || this['task'];
		if (!_0x9f6cx5) {
			return false
		};
		var _0x9f6cx1 = this['isPredecessor']()
			, _0x9f6cx3 = _0x9f6cx5['getTaskStore']()['dependencyStore']
			, _0x9f6cx8 = _0x9f6cx1 ? _0x9f6cx5['getIncomingDependencies']() : _0x9f6cx5['getOutgoingDependencies']()
			, _0x9f6cx7 = _0x9f6cx5['getId']();
		for (var _0x9f6cx4 = 0, _0x9f6cx2 = _0x9f6cx8['length']; _0x9f6cx4 < _0x9f6cx2; _0x9f6cx4++) {
			if (_0x9f6cx8[_0x9f6cx4]['dirty'] || _0x9f6cx8[_0x9f6cx4]['phantom']) {
				return true
			}
		};
		if (_0x9f6cx3) {
			var _0x9f6cx6 = _0x9f6cx1 ? 'getTargetId' : 'getSourceId';
			_0x9f6cx8 = _0x9f6cx3['getRemovedRecords']();
			for (_0x9f6cx4 = 0, _0x9f6cx2 = _0x9f6cx8['length']; _0x9f6cx4 < _0x9f6cx2; _0x9f6cx4++) {
				if (_0x9f6cx8[_0x9f6cx4][_0x9f6cx6]() == _0x9f6cx7) {
					return true
				}
			}
		};
		return false
	}
	, applyChanges: function (_0x9f6cx3) {
		_0x9f6cx3 = _0x9f6cx3 || this['task'];
		var _0x9f6cx13 = _0x9f6cx3['getTaskStore']()['dependencyStore']
			, _0x9f6cx6 = this['getDependencies']()
			, _0x9f6cxc = this['isPredecessor']()
			, _0x9f6cxa = _0x9f6cxc ? _0x9f6cx3['getIncomingDependencies'](true) : _0x9f6cx3['getOutgoingDependencies'](true)
			, _0x9f6cx5 = []
			, _0x9f6cx7;
		var _0x9f6cx1 = Ext['Array']['map'](_0x9f6cx6, function (_0x9f6cx9) {
			return this['getTaskIdFromDependency'](_0x9f6cx9)
		}, this);
		for (_0x9f6cx7 = 0; _0x9f6cx7 < _0x9f6cxa['length']; _0x9f6cx7++) {
			if (!Ext['Array']['contains'](_0x9f6cx1, _0x9f6cxa[_0x9f6cx7][_0x9f6cxc ? 'getSourceId' : 'getTargetId']())) {
				_0x9f6cx5['push'](_0x9f6cxa[_0x9f6cx7])
			}
		};
		if (_0x9f6cx5['length'] > 0) {
			_0x9f6cx13['remove'](_0x9f6cx5)
		};
		var _0x9f6cxb = [];
		for (_0x9f6cx7 = 0; _0x9f6cx7 < _0x9f6cx6['length']; _0x9f6cx7++) {
			var _0x9f6cx4 = _0x9f6cx6[_0x9f6cx7];
			var _0x9f6cx2 = this['getTaskIdFromDependency'](_0x9f6cx4);
			var _0x9f6cx8 = _0x9f6cx13['getTasksLinkingDependency'](_0x9f6cx2, _0x9f6cx3['getId']());
			if (_0x9f6cx8) {
				_0x9f6cx8['beginEdit']();
				_0x9f6cx8['setType'](_0x9f6cx4['type']);
				_0x9f6cx8['setLag'](_0x9f6cx4['lag'], _0x9f6cx4['lagUnit']);
				_0x9f6cx8['endEdit']()
			}
			else {
				_0x9f6cx8 = new _0x9f6cx13['model']();
				_0x9f6cx8['setSourceId'](_0x9f6cxc ? _0x9f6cx2 : _0x9f6cx3['getId']());
				_0x9f6cx8['setTargetId'](_0x9f6cxc ? _0x9f6cx3['getId']() : _0x9f6cx2);
				_0x9f6cx8['setType'](_0x9f6cx4['type']);
				_0x9f6cx8['setLag'](_0x9f6cx4['lag'], _0x9f6cx4['lagUnit']);
				_0x9f6cxb['push'](_0x9f6cx8)
			}
		};
		if (_0x9f6cxb['length'] > 0) {
			_0x9f6cx13['add'](_0x9f6cxb)
		}
	}
});
Ext.define('Ext.ux.Gantt.column.Dependency', {
	extend: 'Ext.grid.column.Column'
	, requires: ['Ext.ux.Gantt.field.Dependency']
	, isDependencyColumn: true
	, separator: ';'
	, type: 'predecessors'
	, field: null
	, useSequenceNumber: false
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		var _0x9f6cx2 = _0x9f6cx1['editor'];
		delete _0x9f6cx1['editor'];
		Ext['apply'](this, _0x9f6cx1);
		_0x9f6cx1['editor'] = _0x9f6cx2 || Ext['create']('Ext.ux.Gantt.field.Dependency', {
			type: this['type']
			, separator: this['separator']
			, useSequenceNumber: this['useSequenceNumber']
		});
		if (!(_0x9f6cx1['editor'] instanceof Ext.ux.Gantt['field']['Dependency'])) {
			_0x9f6cx1['editor'] = Ext['ComponentManager']['create'](_0x9f6cx1['editor'], 'dependencyfield')
		};
		_0x9f6cx1['field'] = _0x9f6cx1['editor'];
		this['scope'] = this;
		this['callParent']([_0x9f6cx1])
	}
	, afterRender: function () {
		var _0x9f6cx1 = this['up']('ganttpanel');
		_0x9f6cx1['registerLockedDependencyListeners']();
		this['callParent'](arguments)
	}
	, getContainingPanel: function () {
		if (!this['panel']) {
			this['panel'] = this['up']('tablepanel')
		};
		return this['panel']
	}
	, setDirtyClass: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this['getContainingPanel']()['getView']();
		if (_0x9f6cx1['markDirty'] && this['field']['isDirty'](_0x9f6cx2)) {
			_0x9f6cx5['tdCls'] = _0x9f6cx1['dirtyCls']
		}
	}
	, isEditable: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['gantt'] || this['up']('ganttpanel');
		if (_0x9f6cx2['isProject']) {
			return false
		};
		return !_0x9f6cx2['isProject'] && (_0x9f6cx1 && _0x9f6cx1['allowParentTaskDependencies'] || _0x9f6cx2['isLeaf']())
	}
	, getRawData: function (_0x9f6cx1) {
		var _0x9f6cx2;
		if (this['type'] === 'predecessors') {
			_0x9f6cx2 = _0x9f6cx1['getIncomingDependencies'](true)
		}
		else {
			_0x9f6cx2 = _0x9f6cx1['getOutgoingDependencies'](true)
		};
		return Ext['Array']['map'](_0x9f6cx2, function (_0x9f6cx5) {
			var _0x9f6cx3 = _0x9f6cx5['copy'](null)['data'];
			delete _0x9f6cx3[_0x9f6cx5['idProperty']];
			return _0x9f6cx3
		})
	}
	, renderer: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (!_0x9f6cx1['isEditable'](this['dataIndex']) || !this['isEditable'](_0x9f6cx1)) {
			_0x9f6cx5['tdCls'] = (_0x9f6cx5['tdCls'] || '') + ' sch-column-readonly'
		}
		else {
			this['setDirtyClass'](_0x9f6cx5, _0x9f6cx1)
		};
		return this['field']['getFieldDisplayValue'](_0x9f6cx1)
	}
});
Ext.define('Ext.ux.Gantt.column.EarlyEndDate', {
	extend: 'Ext.grid.column.Date'
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: ['widget.earlyenddatecolumn', 'widget.ganttcolumn.earlyenddate']
	, isEarlyEndDateColumn: true
	, width: 100
	, align: 'left'
	, adjustMilestones: true
	, earlyEndDateFnOptions: null
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		this['text'] = _0x9f6cx1['text'] || this.L('text');
		this['callParent'](arguments);
		this['renderer'] = _0x9f6cx1['renderer'] || this['rendererFunc'];
		this['scope'] = _0x9f6cx1['scope'] || this;
		this['hasCustomRenderer'] = true
	}
	, afterRender: function () {
		var _0x9f6cx1 = this['up']('ganttpanel');
		_0x9f6cx1['registerLockedDependencyListeners']();
		this['callParent'](arguments)
	}
	, rendererFunc: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		_0x9f6cx5['tdCls'] = (_0x9f6cx5['tdCls'] || '') + ' sch-column-readonly';
		return _0x9f6cx1['getDisplayEndDate'](this['format'], this['adjustMilestones'], _0x9f6cx1['getEarlyEndDate'](this['earlyEndDateFnOptions']))
	}
});
Ext.define('Ext.ux.Gantt.column.EarlyStartDate', {
	extend: 'Ext.grid.column.Date'
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: ['widget.earlystartdatecolumn', 'widget.ganttcolumn.earlystartdate']
	, isEarlyStartDateColumn: true
	, width: 100
	, align: 'left'
	, adjustMilestones: true
	, earlyStartDateFnOptions: null
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		this['text'] = _0x9f6cx1['text'] || this.L('text');
		this['callParent'](arguments);
		this['renderer'] = _0x9f6cx1['renderer'] || this['rendererFunc'];
		this['scope'] = _0x9f6cx1['scope'] || this;
		this['hasCustomRenderer'] = true
	}
	, afterRender: function () {
		var _0x9f6cx1 = this['up']('ganttpanel');
		_0x9f6cx1['registerLockedDependencyListeners']();
		this['callParent'](arguments)
	}
	, rendererFunc: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		_0x9f6cx5['tdCls'] = (_0x9f6cx5['tdCls'] || '') + ' sch-column-readonly';
		return _0x9f6cx1['getDisplayStartDate'](this['format'], this['adjustMilestones'], _0x9f6cx1['getEarlyStartDate'](this['earlyStartDateFnOptions']))
	}
});
Ext.define('Ext.ux.Gantt.column.Effort', {
	extend: 'Ext.ux.Gantt.column.Duration'
	, alias: ['widget.effortcolumn', 'widget.ganttcolumn.effort']
	, requires: ['Ext.ux.Gantt.field.Effort']
	, isEffortColumn: true
	, fieldProperty: 'effortField'
	, editor: 'effortfield'
	, defaultEditor: 'effortfield'
	, getValueToRender: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (!Ext['isNumber'](_0x9f6cx2)) {
			return ''
		};
		return this['field']['valueToVisible'](_0x9f6cx2, _0x9f6cx1['getEffortUnit']())
	}
	, putRawData: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1['setEffort'](_0x9f6cx2)
	}
	, sorterFn: function (_0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx2 = _0x9f6cx3['getCalendar']()['convertDurationToMs'](_0x9f6cx3['getEffort'](), _0x9f6cx3['getEffortUnit']())
			, _0x9f6cx1 = _0x9f6cx5['getCalendar']()['convertDurationToMs'](_0x9f6cx5['getEffort'](), _0x9f6cx5['getEffortUnit']());
		return _0x9f6cx2 < _0x9f6cx1 ? -1 : 1
	}
});
Ext.define('Ext.ux.Gantt.column.EffortVariance', {
	extend: 'Ext.grid.column.Column'
	, requires: ['Ext.util.Format']
	, alias: ['widget.effortvariancecolumn', 'widget.ganttcolumn.effortvariance']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, width: 80
	, decimalPrecision: 2
	, decimalSeparator: null
	, useAbbreviation: false
	, fieldProperty: 'effortVarianceField'
	, initComponent: function () {
		this['initTaskFieldColumn']();
		this['decimalSeparator'] = this['decimalSeparator'] || Ext['util']['Format']['decimalSeparator'];
		this['callParent'](arguments)
	}
	, getValueToRender: function (_0x9f6cx4, _0x9f6cx7, _0x9f6cx2) {
		if (!Ext['isNumber'](_0x9f6cx4)) {
			return ''
		};
		var _0x9f6cx5 = parseInt(_0x9f6cx4, 10)
			, _0x9f6cx1 = Ext['Number']['toFixed'](_0x9f6cx4, this['decimalPrecision'])
			, _0x9f6cx3 = _0x9f6cx2['getEffortUnit']();
		return String(_0x9f6cx5 == _0x9f6cx1 ? _0x9f6cx5 : _0x9f6cx1)['replace']('.', this['decimalSeparator']) + ' ' + Ext.ux.Scheduler['util']['Date'][this['useAbbreviation'] ? 'getShortNameOfUnit' : 'getReadableNameOfUnit'](_0x9f6cx3, _0x9f6cx4 !== 1)
	}
});
Ext.define('Ext.ux.Gantt.column.LateEndDate', {
	extend: 'Ext.grid.column.Date'
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: ['widget.lateenddatecolumn', 'widget.ganttcolumn.lateenddate']
	, isLateEndDateColumn: true
	, width: 100
	, align: 'left'
	, adjustMilestones: true
	, lateEndDateFnOptions: null
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		this['text'] = _0x9f6cx1['text'] || this.L('text');
		this['callParent'](arguments);
		this['renderer'] = _0x9f6cx1['renderer'] || this['rendererFunc'];
		this['scope'] = _0x9f6cx1['scope'] || this;
		this['hasCustomRenderer'] = true
	}
	, afterRender: function () {
		var _0x9f6cx1 = this['up']('ganttpanel');
		_0x9f6cx1['registerLockedDependencyListeners']();
		this['callParent'](arguments)
	}
	, rendererFunc: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		_0x9f6cx5['tdCls'] = (_0x9f6cx5['tdCls'] || '') + ' sch-column-readonly';
		return _0x9f6cx1['getDisplayEndDate'](this['format'], this['adjustMilestones'], _0x9f6cx1['getLateEndDate'](this['lateEndDateFnOptions']))
	}
});
Ext.define('Ext.ux.Gantt.column.LateStartDate', {
	extend: 'Ext.grid.column.Date'
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: ['widget.latestartdatecolumn', 'widget.ganttcolumn.latestartdate']
	, isLateStartDateColumn: true
	, width: 100
	, align: 'left'
	, adjustMilestones: true
	, lateStartDateFnOptions: null
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		this['text'] = _0x9f6cx1['text'] || this.L('text');
		this['callParent'](arguments);
		this['renderer'] = _0x9f6cx1['renderer'] || this['rendererFunc'];
		this['scope'] = _0x9f6cx1['scope'] || this;
		this['hasCustomRenderer'] = true
	}
	, afterRender: function () {
		var _0x9f6cx1 = this['up']('ganttpanel');
		_0x9f6cx1['registerLockedDependencyListeners']();
		this['callParent'](arguments)
	}
	, rendererFunc: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		_0x9f6cx5['tdCls'] = (_0x9f6cx5['tdCls'] || '') + ' sch-column-readonly';
		return _0x9f6cx1['getDisplayStartDate'](this['format'], this['adjustMilestones'], _0x9f6cx1['getLateStartDate'](this['lateStartDateFnOptions']))
	}
});
Ext.define('Ext.ux.Gantt.field.ManuallyScheduled', {
	extend: 'Ext.form.field.Checkbox'
	, mixins: ['Ext.ux.Gantt.field.mixin.TaskField', 'Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.manuallyscheduledfield'
	, alternateClassName: ['Ext.ux.Gantt.widget.ManuallyScheduledField']
	, fieldProperty: 'manuallyScheduledField'
	, setTaskValueMethod: 'setManuallyScheduled'
	, getTaskValueMethod: 'getManuallyScheduled'
	, instantUpdate: true
	, valueToVisible: function (_0x9f6cx1) {
		return _0x9f6cx1 ? this.L('yes') : this.L('no')
	}
	, getValue: function () {
		return this['value']
	}
	, initEvents: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['on']('change', _0x9f6cx1['onFieldValueChange'], _0x9f6cx1);
		return _0x9f6cx1['callParent']()
	}
	, onFieldValueChange: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (_0x9f6cx2['instantUpdate'] && !_0x9f6cx2['getSuppressTaskUpdate']() && _0x9f6cx2['task']) {
			_0x9f6cx2['applyChanges']()
		}
	}
});
Ext.define('Ext.ux.Gantt.column.ManuallyScheduled', {
	extend: 'Ext.grid.Column'
	, alias: ['widget.manuallyscheduledcolumn', 'widget.ganttcolumn.manuallyscheduledcolumn']
	, requires: ['Ext.ux.Gantt.field.ManuallyScheduled']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, width: 50
	, align: 'center'
	, instantUpdate: false
	, fieldProperty: 'manuallyScheduledField'
	, editor: 'manuallyscheduledfield'
	, defaultEditor: 'manuallyscheduledfield'
	, initComponent: function () {
		this['initTaskFieldColumn']();
		this['callParent'](arguments)
	}
	, getValueToRender: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return this['field']['valueToVisible'](_0x9f6cx1['getManuallyScheduled']())
	}
});
Ext.define('Ext.ux.Gantt.field.Milestone', {
	extend: 'Ext.form.field.ComboBox'
	, requires: 'Ext.data.JsonStore'
	, mixins: ['Ext.ux.Gantt.field.mixin.TaskField', 'Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.milestonefield'
	, instantUpdate: false
	, allowBlank: false
	, forceSelection: true
	, displayField: 'text'
	, valueField: 'value'
	, queryMode: 'local'
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1);
		this['store'] = new Ext['data'].JsonStore({
			fields: ['value', 'text']
			, autoDestroy: true
			, data: [{
				value: 0
				, text: this.L('no')
			}, {
				value: 1
				, text: this.L('yes')
			}]
		});
		this['callParent'](arguments);
		this['on']('change', this['onFieldChange'], this)
	}
	, onSetTask: function () {
		this['setValue'](this['task']['isMilestone']() ? 1 : 0)
	}
	, valueToVisible: function (_0x9f6cx1) {
		return _0x9f6cx1 ? this.L('yes') : this.L('no')
	}
	, onFieldChange: function (_0x9f6cx2, _0x9f6cx1) {
		if (this['instantUpdate'] && !this['getSuppressTaskUpdate']() && this['task']) {
			if (this['task']['isMilestone']() != Boolean(this['value'])) {
				this['applyChanges']()
			}
		}
	}
	, getValue: function () {
		return this['value']
	}
	, applyChanges: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		if (this['getValue']()) {
			_0x9f6cx1['convertToMilestone']()
		}
		else {
			_0x9f6cx1['convertToRegular']()
		};
		_0x9f6cx1['fireEvent']('taskupdated', _0x9f6cx1, this)
	}
});
Ext.define('Ext.ux.Gantt.column.Milestone', {
	extend: 'Ext.grid.column.Column'
	, alias: ['widget.milestonecolumn', 'widget.ganttcolumn.milestone']
	, requires: ['Ext.ux.Gantt.field.Milestone']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, width: 50
	, align: 'center'
	, editor: 'milestonefield'
	, defaultEditor: 'milestonefield'
	, initComponent: function () {
		this['initTaskFieldColumn']();
		this['callParent'](arguments)
	}
	, getValueToRender: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return this['field']['valueToVisible'](_0x9f6cx1['isMilestone']())
	}
	, applyColumnCls: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (!_0x9f6cx1['isEditable'](_0x9f6cx1['durationField']) && !_0x9f6cx1['isEditable'](_0x9f6cx1['endDateField'])) {
			_0x9f6cx5['tdCls'] = (_0x9f6cx5['tdCls'] || '') + ' sch-column-readonly'
		}
	}
});
Ext.define('Ext.ux.Gantt.column.Name', {
	extend: 'Ext.tree.Column'
	, alias: ['widget.namecolumn', 'widget.ganttcolumn.name']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, draggable: true
	, fieldProperty: 'nameField'
	, editor: 'textfield'
	, initComponent: function () {
		this['initTaskFieldColumn']();
		this['callParent'](arguments)
	}
	, applyColumnCls: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		_0x9f6cx5['tdCls'] = (_0x9f6cx5['tdCls'] || '');
		if (_0x9f6cx1['isProject']) {
			_0x9f6cx5['tdCls'] += ' sch-gantt-project-name'
		};
		if (!_0x9f6cx1['isLeaf']()) {
			_0x9f6cx5['tdCls'] += ' sch-gantt-parent-cell'
		}
	}
});
Ext.define('Ext.ux.Gantt.field.Note', {
	extend: 'Ext.form.field.Picker'
	, alias: ['widget.notefield', 'widget.noteeditor']
	, alternateClassName: 'Ext.ux.Gantt.widget.NoteField'
	, requires: ['Ext.form.field.HtmlEditor']
	, mixins: ['Ext.ux.Gantt.field.mixin.TaskField', 'Ext.ux.Gantt.mixin.Localizable']
	, matchFieldWidth: false
	, editable: false
	, pickerConfig: null
	, previewFn: null
	, previewFnScope: null
	, fieldProperty: 'noteField'
	, getTaskValueMethod: 'getNote'
	, setTaskValueMethod: 'setNote'
	, afterRender: function () {
		this['callParent'](arguments);
		this['on']('collapse', this['onPickerCollapse'], this)
	}
	, valueToVisible: function (_0x9f6cx1) {
		if (this['previewFn']) {
			return this['previewFn']['call'](this['previewFnScope'] || this, _0x9f6cx1)
		}
		else {
			return Ext['util']['Format']['stripTags'](_0x9f6cx1)
		}
	}
	, createPicker: function () {
		var _0x9f6cx1 = new Ext['form']['field'].HtmlEditor(Ext['apply']({
			frame: true
			, shadow: false
			, floating: true
			, height: 200
			, width: 300
			, listeners: {
				change: this['onPickerChange']
				, initialize: this['onPickerInit']
				, scope: this
			}
		}, this['pickerConfig'] || {}));
		return _0x9f6cx1
	}
	, onPickerInit: function (_0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx2['win']['document']['body'];
		var _0x9f6cx5 = this;
		_0x9f6cx2['win']['document']['onkeydown'] = function (_0x9f6cx3) {
			var _0x9f6cx4 = new Ext['event'].Event(_0x9f6cx3);
			if (_0x9f6cx4['keyCode'] === _0x9f6cx4['ESC']) {
				_0x9f6cx5['collapse']()
			}
		}
	}
	, onPickerChange: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx3 = document['createElement']('div');
		_0x9f6cx3['innerHTML'] = _0x9f6cx2;
		var _0x9f6cx5 = _0x9f6cx3['innerText'] || _0x9f6cx3['textContent'];
		this['setRawValue'](this['valueToVisible'](_0x9f6cx5))
	}
	, getValue: function () {
		return this['getPicker']()['getValue']()
	}
	, setValue: function (_0x9f6cx1) {
		this['callParent']([this['valueToVisible'](_0x9f6cx1)]);
		this['getPicker']()['setValue'](_0x9f6cx1);
		if (this['instantUpdate'] && !this['getSuppressTaskUpdate']() && this['task']) {
			this['applyChanges']()
		}
	}
	, onFocusLeave: Ext['emptyFn']
	, onPickerCollapse: function () {
		this['setValue'](this['getPicker']()['getValue']())
	}
	, onTriggerClick: function () {
		var _0x9f6cx1 = this;
		if (!_0x9f6cx1['readOnly'] && !_0x9f6cx1['disabled']) {
			if (_0x9f6cx1['isExpanded']) {
				_0x9f6cx1['collapse']()
			}
			else {
				_0x9f6cx1['expand']()
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.column.Note', {
	extend: 'Ext.grid.column.Column'
	, requires: ['Ext.ux.Gantt.field.Note']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, alias: ['widget.notecolumn', 'widget.ganttcolumn.note']
	, editor: 'notefield'
	, defaultEditor: 'notefield'
	, fieldProperty: 'noteField'
	, previewFn: null
	, previewFnScope: null
	, htmlEncode: false
	, fieldConfigs: ['instantUpdate', 'previewFn', 'previewFnScope', 'fieldProperty']
	, initComponent: function () {
		this['initTaskFieldColumn']();
		this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Gantt.field.PercentDone', {
	extend: 'Ext.ux.Gantt.field.Percent'
	, alias: 'widget.percentdonefield'
	, mixins: ['Ext.ux.Gantt.field.mixin.TaskField']
	, alternateClassName: 'Ext.ux.Gantt.widget.PercentDoneField'
	, taskField: 'percentDoneField'
	, setTaskValueMethod: 'setPercentDone'
	, getTaskValueMethod: 'getPercentDone'
	, instantUpdate: true
	, setValue: function (_0x9f6cx1) {
		this['callParent']([_0x9f6cx1]);
		if (this['instantUpdate'] && !this['getSuppressTaskUpdate']() && this['task']) {
			this['applyChanges']()
		}
	}
});
Ext.define('Ext.ux.Gantt.column.PercentDone', {
	extend: 'Ext.grid.column.Number'
	, requires: ['Ext.ux.Gantt.field.PercentDone']
	, alias: ['widget.percentdonecolumn', 'widget.ganttcolumn.percentdone']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, width: 90
	, format: '0'
	, align: 'center'
	, editor: 'percentdonefield'
	, defaultEditor: 'percentdonefield'
	, fieldProperty: 'percentDoneField'
	, useRenderer: false
	, fieldConfigs: 'instantUpdate,fieldProperty,decimalPrecision'
	, decimalPrecision: 0
	, initComponent: function () {
		this['initTaskFieldColumn']();
		this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Gantt.column.Predecessor', {
	extend: 'Ext.ux.Gantt.column.Dependency'
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: ['widget.predecessorcolumn', 'widget.ganttcolumn.predecessor']
	, isPredecessorColumn: true
	, type: 'predecessors'
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		this['text'] = _0x9f6cx1['text'] || this.L('text');
		this['callParent'](arguments)
	}
	, putRawData: function (_0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx1['getDependencyStore']();
		var _0x9f6cx5 = [];
		_0x9f6cx2['remove'](_0x9f6cx1['getIncomingDependencies'](true));
		Ext['isArray'](_0x9f6cx3) && Ext['Array']['each'](_0x9f6cx3, function (_0x9f6cx7) {
			if (_0x9f6cx1['getTaskStore']()['getById'](_0x9f6cx7[_0x9f6cx2['model']['prototype']['fromField']])) {
				var _0x9f6cx4 = new _0x9f6cx2['model'](_0x9f6cx7);
				_0x9f6cx4['setTargetId'](_0x9f6cx1['getId']());
				if (_0x9f6cx2['isValidDependency'](_0x9f6cx4)) {
					_0x9f6cx5['push'](_0x9f6cx4)
				}
			}
		});
		_0x9f6cx2['add'](_0x9f6cx5)
	}
});
Ext.define('Ext.ux.Gantt.column.ReadOnly', {
	extend: 'Ext.grid.Column'
	, alias: ['widget.readonlycolumn', 'widget.ganttcolumn.readonly']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, fieldProperty: 'readOnlyField'
	, defaultEditor: 'readonlyfield'
	, editor: 'readonlyfield'
	, initComponent: function () {
		this['initTaskFieldColumn']();
		this['callParent'](arguments)
	}
	, getValueToRender: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return this['field']['valueToVisible'](_0x9f6cx2)
	}
});
Ext.define('Ext.ux.Gantt.column.ResourceName', {
	extend: 'Ext.grid.column.Column'
	, alias: 'widget.resourcenamecolumn'
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, flex: 1
	, align: 'left'
	, resourceStore: null
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		this['text'] = _0x9f6cx1['text'] || this.L('text');
		Ext['apply'](this, _0x9f6cx1);
		this['scope'] = this['scope'] || this;
		this['callParent'](arguments)
	}
	, renderer: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx2 = _0x9f6cx3['getResource'](this['resourceStore']);
		return Ext['String']['htmlEncode'](_0x9f6cx2 && _0x9f6cx2['getName']() || _0x9f6cx5)
	}
});
Ext.define('Ext.ux.Gantt.widget.AssignmentGrid', {
	extend: 'Ext.grid.Panel'
	, alias: 'widget.assignmentgrid'
	, requires: ['Ext.data.Store', 'Ext.grid.plugin.CellEditing', 'Ext.ux.Gantt.column.ResourceName', 'Ext.ux.Gantt.column.AssignmentUnits']
	, assignmentStore: null
	, resourceStore: null
	, readOnly: false
	, cls: 'gnt-assignmentgrid'
	, height: 200
	, width: 300
	, frame: true
	, floating: true
	, focusOnToFront: false
	, taskId: null
	, cellEditing: null
	, sortResourcesFn: null
	, assignmentUnitsEditor: null
	, selModel: {
		selType: 'checkboxmodel'
		, mode: 'MULTI'
		, checkOnly: true
	}
	, viewConfig: {
		markDirty: false
	}
	, initComponent: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (!this['readOnly']) {
			this['plugins'] = this['buildPlugins']()
		};
		this['store'] = this['store'] || new Ext['data'].Store({
			proxy: 'memory'
			, autoDestroy: true
			, model: this['assignmentStore']['getModel']()
		});
		this['columns'] = this['columns'] || this['buildColumns']();
		this['sortResourcesFn'] = this['sortResourcesFn'] || function (_0x9f6cx7, _0x9f6cx4) {
			var _0x9f6cx3 = _0x9f6cx7['getUnits']()
				, _0x9f6cx5 = _0x9f6cx4['getUnits']();
			if ((!_0x9f6cx3 && !_0x9f6cx5) || (_0x9f6cx3 && _0x9f6cx5)) {
				return _0x9f6cx7['getResource'](_0x9f6cx2['resourceStore'])['getName']() < _0x9f6cx4['getResource'](_0x9f6cx2['resourceStore'])['getName']() ? -1 : 1
			};
			return _0x9f6cx3 ? -1 : 1
		};
		this['loadResources']();
		this['mon'](this['resourceStore'], {
			datachanged: this['loadResources']
			, scope: this
		});
		this['callParent'](arguments);
		this['getSelectionModel']()['on']({
			select: this['onSelect']
			, deselect: this['onDeselect']
			, scope: this
		})
	}
	, onSelect: function (_0x9f6cx2, _0x9f6cx1) {
		if ((!this['cellEditing'] || !this['cellEditing']['getActiveEditor']()) && !_0x9f6cx1['getUnits']()) {
			_0x9f6cx1['setUnits'](_0x9f6cx1['getField'](_0x9f6cx1['unitsField'])['defaultValue'])
		}
	}
	, onDeselect: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1['setUnits'](0)
	}
	, loadResources: function () {
		var _0x9f6cx5 = this['assignmentStore']['getModel']()['prototype']['resourceIdField'];
		var _0x9f6cx1 = this['assignmentStore']['getModel']()['prototype']['unitsField'];
		var _0x9f6cx2 = Ext['Array']['map'](this['resourceStore']['getRange'](), function (_0x9f6cx3) {
			var _0x9f6cx4 = {};
			_0x9f6cx4[_0x9f6cx5] = _0x9f6cx3['getId']();
			_0x9f6cx4[_0x9f6cx1] = '';
			return _0x9f6cx4
		});
		this['store']['loadData'](_0x9f6cx2)
	}
	, buildPlugins: function () {
		this['cellEditing'] = Ext['create']('Ext.grid.plugin.CellEditing', {
			clicksToEdit: 1
			, listeners: {
				edit: this['onEditingDone']
				, scope: this
			}
		});
		return [this['cellEditing']]
	}
	, hide: function () {
		this['cellEditing']['cancelEdit']();
		this['callParent'](arguments)
	}
	, onEditingDone: function (_0x9f6cx1, _0x9f6cx2) {
		if (_0x9f6cx2['value']) {
			this['getSelectionModel']()['select'](_0x9f6cx2['record'], true)
		}
		else {
			this['getSelectionModel']()['deselect'](_0x9f6cx2['record']);
			_0x9f6cx2['record']['reject']()
		}
	}
	, buildColumns: function () {
		return [{
			xtype: 'resourcenamecolumn'
			, resourceStore: this['resourceStore']
		}, {
			xtype: 'assignmentunitscolumn'
		}]
	}
	, setEditableFields: function (_0x9f6cx5) {
		if (!this['assignmentUnitsEditor']) {
			var _0x9f6cx3 = this['down']('assignmentunitscolumn');
			this['assignmentUnitsEditor'] = _0x9f6cx3 && _0x9f6cx3['getEditor']()
		};
		if (this['assignmentUnitsEditor']) {
			var _0x9f6cx2 = this['assignmentStore'] && this['assignmentStore']['getTaskStore']()
				, _0x9f6cx1 = _0x9f6cx2 && _0x9f6cx2['getModelById'](_0x9f6cx5);
			if (_0x9f6cx1) {
				switch (_0x9f6cx1['getSchedulingMode']()) {
				case 'DynamicAssignment':
					this['assignmentUnitsEditor']['setReadOnly'](true);
					break;
				default:
					this['assignmentUnitsEditor']['setReadOnly'](false)
				}
			}
		}
	}
	, loadTaskAssignments: function (_0x9f6cx4) {
		var _0x9f6cx5 = this['store']
			, _0x9f6cx6 = this['getSelectionModel']();
		this['taskId'] = _0x9f6cx4;
		_0x9f6cx6['deselectAll'](true);
		for (var _0x9f6cx3 = 0, _0x9f6cx2 = _0x9f6cx5['getCount'](); _0x9f6cx3 < _0x9f6cx2; _0x9f6cx3++) {
			var _0x9f6cx1 = _0x9f6cx5['getAt'](_0x9f6cx3);
			_0x9f6cx1['data'][_0x9f6cx1['unitsField']] = 0;
			_0x9f6cx1['data'][_0x9f6cx1['idProperty']] = null;
			delete _0x9f6cx1['__id__']
		};
		var _0x9f6cx7 = this['assignmentStore']['getAssignmentsForTask'](_0x9f6cx4);
		Ext['Array']['each'](_0x9f6cx7, function (_0x9f6cxc) {
			var _0x9f6cx8 = _0x9f6cx5['findRecord'](_0x9f6cxc['resourceIdField'], _0x9f6cxc['getResourceId'](), 0, false, true, true);
			if (_0x9f6cx8) {
				var _0x9f6cx9 = Ext['apply']({}, _0x9f6cxc['data']);
				delete _0x9f6cx9[_0x9f6cxc['idProperty']];
				_0x9f6cx8['set'](_0x9f6cx9);
				_0x9f6cx8['__id__'] = _0x9f6cxc['getId']();
				_0x9f6cx6['select'](_0x9f6cx8, true, true)
			}
		});
		_0x9f6cx5['sort']({
			sorterFn: this['sortResourcesFn']
		});
		_0x9f6cx5['getSorters']()['removeAll']();
		this['setEditableFields'](_0x9f6cx4)
	}
	, saveTaskAssignments: function () {
		var _0x9f6cx1 = this['assignmentStore']
			, _0x9f6cx4 = this['taskId'];
		var _0x9f6cx3 = {};
		var _0x9f6cx5 = [];
		this['getSelectionModel']()['selected']['each'](function (_0x9f6cx6) {
			var _0x9f6cx7 = _0x9f6cx6['getUnits']();
			if (_0x9f6cx7 > 0) {
				var _0x9f6cxc = _0x9f6cx6['__id__'];
				if (_0x9f6cxc) {
					var _0x9f6cx9 = Ext['apply']({}, _0x9f6cx6['data']);
					delete _0x9f6cx9[_0x9f6cx6['idProperty']];
					_0x9f6cx3[_0x9f6cxc] = true;
					_0x9f6cx1['getModelById'](_0x9f6cxc)['set'](_0x9f6cx9)
				}
				else {
					var _0x9f6cx8 = _0x9f6cx6['copy']();
					_0x9f6cx8['setTaskId'](_0x9f6cx4);
					_0x9f6cx3[_0x9f6cx8['internalId']] = true;
					_0x9f6cx5['push'](_0x9f6cx8)
				}
			}
		});
		var _0x9f6cx2 = [];
		_0x9f6cx1['each'](function (_0x9f6cx7) {
			if (_0x9f6cx7['getTaskId']() == _0x9f6cx4 && !_0x9f6cx3[_0x9f6cx7['getId']() || _0x9f6cx7['internalId']]) {
				_0x9f6cx2['push'](_0x9f6cx7)
			}
		});
		_0x9f6cx1['fireEvent']('beforetaskassignmentschange', _0x9f6cx1, _0x9f6cx4, _0x9f6cx5);
		_0x9f6cx1['suspendAutoSync']();
		_0x9f6cx1['remove'](_0x9f6cx2);
		_0x9f6cx1['add'](_0x9f6cx5);
		_0x9f6cx1['resumeAutoSync']();
		_0x9f6cx1['fireEvent']('taskassignmentschanged', _0x9f6cx1, _0x9f6cx4, _0x9f6cx5);
		if (_0x9f6cx1['autoSync']) {
			_0x9f6cx1['sync']()
		}
	}
	, isDataChanged: function () {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['store'] && _0x9f6cx1['store']['getUpdatedRecords']()['length'] > 0 || _0x9f6cx1['store']['getNewRecords']()['length'] > 0 || _0x9f6cx1['store']['getRemovedRecords']()['length'] > 0
	}
	, isDataValid: function () {
		return this['store']['findBy'](function (_0x9f6cx1) {
			return !_0x9f6cx1['isValid']()
		}) < 0
	}
	, isEditing: function () {
		return Boolean(this['cellEditing']['getActiveEditor']())
	}
	, getTask: function () {
		var _0x9f6cx1 = this['assignmentStore'] && this['assignmentStore']['getTaskStore']();
		return this['taskId'] && _0x9f6cx1 && _0x9f6cx1['getNodeById'](this['taskId']) || null
	}
});
Ext.define('Ext.ux.Gantt.patches.CheckboxModel', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.selection.CheckboxModel'
	, overrides: {
		renderer: function (_0x9f6cx7, _0x9f6cx5, _0x9f6cx2, _0x9f6cx6, _0x9f6cx4, _0x9f6cx3, _0x9f6cx1) {
			return '<div class="' + Ext['baseCSSPrefix'] + 'grid-row-checker" role="button" tabIndex="-1">&#160;</div>'
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.NavigationModel', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.NavigationModel'
	, maxVersion: '6.0.2'
	, overrides: {
		onCellMouseDown: function (_0x9f6cx7, _0x9f6cx6, _0x9f6cx4, _0x9f6cx3, _0x9f6cx9, _0x9f6cx5, _0x9f6cx2) {
			var _0x9f6cx1 = Ext['Component']['fromElement'](_0x9f6cx2['target'], _0x9f6cx6)
				, _0x9f6cx8;
			if (_0x9f6cx7['actionableMode'] && (_0x9f6cx2['getTarget'](null, null, true)['isTabbable']() || ((_0x9f6cx8 = Ext['ComponentManager']['getActiveComponent']()) && _0x9f6cx8['owns'](_0x9f6cx2)))) {
				return
			};
			if (_0x9f6cx2['pointerType'] !== 'touch') {
				_0x9f6cx2['preventDefault']();
				this['setPosition'](_0x9f6cx2['position'], null, _0x9f6cx2)
			};
			if (_0x9f6cx1 && _0x9f6cx1['isFocusable'] && _0x9f6cx1['isFocusable']()) {
				_0x9f6cx7['setActionableMode'](true, _0x9f6cx2['position']);
				_0x9f6cx1['focus']()
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.field.Assignment', {
	extend: 'Ext.form.field.Picker'
	, alias: ['widget.assignmentfield', 'widget.assignmenteditor']
	, alternateClassName: 'Ext.ux.Gantt.widget.AssignmentField'
	, requires: ['Ext.ux.Gantt.widget.AssignmentGrid', 'Ext.ux.Gantt.patches.CheckboxModel', 'Ext.ux.Gantt.patches.NavigationModel']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, matchFieldWidth: false
	, editable: false
	, task: null
	, focusTimer: null
	, assignmentStore: null
	, resourceStore: null
	, gridConfig: null
	, formatString: '{0} [{1}%]'
	, unitDecimalPrecision: 1
	, expandPickerOnFocus: false
	, returnFocusToField: true
	, initEvents: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['callParent']();
		_0x9f6cx1['on']({
			expand: _0x9f6cx1['onExpandHandler']
			, collapse: _0x9f6cx1['onCollapseHandler']
			, scope: _0x9f6cx1
		})
	}
	, onFocusEnter: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['callParent']([_0x9f6cx2]);
		_0x9f6cx1['expandPickerOnFocus'] && _0x9f6cx1['expand']()
	}
	, focusPickerView: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['getPicker']()['getView']();
		_0x9f6cx2['focusCell']((new Ext['grid'].CellContext(_0x9f6cx2))['setPosition'](0, 0))
	}
	, onExpandHandler: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getPicker']();
		_0x9f6cx1['loadTaskAssignments'](this['task']['getId']());
		this['focusTimer'] = Ext['Function']['defer'](function () {
			_0x9f6cx2['focusPickerView']()
		}, 10)
	}
	, onCollapseHandler: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['returnFocusToField'] && _0x9f6cx1['hasFocus'] && _0x9f6cx1['focus'](true)
	}
	, createPicker: function () {
		var _0x9f6cx1 = Ext['widget'](Ext['apply']({
			xclass: 'Ext.ux.Gantt.widget.AssignmentGrid'
			, ownerCmp: this
			, resourceStore: this['task']['getResourceStore']()
			, assignmentStore: this['task']['getAssignmentStore']()
			, fbar: this['buildButtons']()
			, listeners: {
				cellkeydown: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cx7, _0x9f6cx5, _0x9f6cx8, _0x9f6cxc, _0x9f6cx9) {
					var _0x9f6cx6 = _0x9f6cx3['headerCt']['getComponent'](_0x9f6cx7);
					if (_0x9f6cx9['getKey']() === _0x9f6cx9['ESC'] && !_0x9f6cx1['isEditing']()) {
						this['collapse']()
					}
					else {
						if (_0x9f6cx9['getKey']() === _0x9f6cx9['ENTER'] && !_0x9f6cx1['isEditing']() && !(_0x9f6cx6['field'] || _0x9f6cx6['editor'])) {
							this['onSaveClick']()
						}
					}
				}
				, scope: this
			}
		}, this['gridConfig'] || {}));
		return _0x9f6cx1
	}
	, buildButtons: function () {
		return ['->', {
			text: this.L('closeText')
			, handler: function () {
				this['saveTimer'] = Ext['Function']['defer'](this['onSaveClick'], Ext['isIE'] && !Ext['isIE9'] ? 60 : 30, this)
			}
			, scope: this
		}, {
			text: this.L('cancelText')
			, handler: function () {
				this['collapse']()
			}
			, scope: this
		}]
	}
	, setTask: function (_0x9f6cx1) {
		this['task'] = _0x9f6cx1;
		this['setRawValue'](this['getFieldDisplayValue'](_0x9f6cx1))
	}
	, onSaveClick: function () {
		var _0x9f6cx2 = this['picker']['getSelectionModel']()
			, _0x9f6cx1 = _0x9f6cx2['selected'];
		this['picker']['setActionableMode'](false);
		this['collapse']();
		this['fireEvent']('select', this, _0x9f6cx1);
		this['picker']['saveTaskAssignments']();
		this['setRawValue'](this['getFieldDisplayValue'](this['task']))
	}
	, isDirty: function (_0x9f6cx5) {
		_0x9f6cx5 = _0x9f6cx5 || this['task'];
		if (!_0x9f6cx5) {
			return false
		};
		var _0x9f6cx4 = this['picker'] && this['picker']['assignmentStore'] || _0x9f6cx5['getAssignmentStore']()
			, _0x9f6cx2 = _0x9f6cx5['getAssignments']();
		for (var _0x9f6cx3 = 0, _0x9f6cx1 = _0x9f6cx2['length']; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
			if (_0x9f6cx2[_0x9f6cx3]['dirty'] || _0x9f6cx2[_0x9f6cx3]['phantom']) {
				return true
			}
		};
		if (_0x9f6cx4) {
			_0x9f6cx2 = _0x9f6cx4['getRemovedRecords']();
			for (_0x9f6cx3 = 0, _0x9f6cx1 = _0x9f6cx2['length']; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
				if (_0x9f6cx2[_0x9f6cx3]['getTaskId']() == _0x9f6cx5['getId']()) {
					return true
				}
			}
		};
		return false
	}
	, getFieldDisplayValue: function (_0x9f6cx5) {
		_0x9f6cx5 = _0x9f6cx5 || this['task'];
		var _0x9f6cx2 = this['unitDecimalPrecision'];
		var _0x9f6cx1 = Ext['Array']['map'](_0x9f6cx5['getAssignments'](), function (_0x9f6cx4) {
			var _0x9f6cx3 = parseFloat(Ext['Number']['toFixed'](_0x9f6cx4['getUnits'](), _0x9f6cx2));
			var _0x9f6cx7 = Ext['String']['format'](this['formatString'], _0x9f6cx4['getResourceName'](), _0x9f6cx3);
			return Ext['String']['htmlEncode'](_0x9f6cx7)
		}, this);
		return _0x9f6cx1.join(', ')
	}
	, destroy: function () {
		clearTimeout(this['focusTimer']);
		clearTimeout(this['saveTimer']);
		this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Gantt.column.ResourceAssignment', {
	extend: 'Ext.grid.column.Column'
	, alias: ['widget.resourceassignmentcolumn', 'widget.ganttcolumn.resourceassignment']
	, requires: ['Ext.ux.Gantt.field.Assignment']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, tdCls: 'sch-assignment-cell'
	, showUnits: true
	, unitDecimalPrecision: 1
	, field: null
	, dirtyCls: null
	, initComponent: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['text'] = _0x9f6cx1.L('text');
		_0x9f6cx1['editor'] = _0x9f6cx1['editor'] || {};
		if (!(this['editor'] instanceof Ext['form']['Field'])) {
			_0x9f6cx1['editor'] = Ext['ComponentManager']['create'](Ext['applyIf'](_0x9f6cx1['editor'], {
				expandPickerOnFocus: true
				, returnFocusToField: true
				, unitDecimalPrecision: _0x9f6cx1['unitDecimalPrecision']
				, formatString: '{0}' + (_0x9f6cx1['showUnits'] ? ' [{1}%]' : '')
			}), 'assignmentfield')
		};
		_0x9f6cx1['field'] = _0x9f6cx1['editor'];
		_0x9f6cx1['callParent'](arguments);
		_0x9f6cx1['scope'] = _0x9f6cx1
	}
	, getTableView: function () {
		return this['up']('tablepanel')['getView']()
	}
	, sorterFn: function (_0x9f6cx4, _0x9f6cx3) {
		var _0x9f6cx1 = this;
		var _0x9f6cx5 = _0x9f6cx1['field']['getFieldDisplayValue'](_0x9f6cx4)
			, _0x9f6cx2 = _0x9f6cx1['field']['getFieldDisplayValue'](_0x9f6cx3);
		return _0x9f6cx5 && (_0x9f6cx5 > _0x9f6cx2) ? -1 : 1
	}
	, afterRender: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getTableView']();
		if (_0x9f6cx1['markDirty']) {
			_0x9f6cx2['dirtyCls'] = _0x9f6cx1['dirtyCls']
		};
		_0x9f6cx2['callParent'](arguments);
		if (_0x9f6cx2['field']) {
			_0x9f6cx2['field']['on']('collapse', function () {
				_0x9f6cx2['getTableView']()['setActionableMode'](false)
			})
		};
		_0x9f6cx2['setSorter'](Ext['Function']['bind'](_0x9f6cx2['sorterFn'], _0x9f6cx2))
	}
	, getRawData: function (_0x9f6cx1) {
		return Ext['Array']['map'](_0x9f6cx1['getAssignments'](), function (_0x9f6cx5) {
			var _0x9f6cx2 = _0x9f6cx5['copy'](null)['data'];
			delete _0x9f6cx2[_0x9f6cx5['idProperty']];
			return _0x9f6cx2
		})
	}
	, putRawData: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx3 = _0x9f6cx1['getAssignmentStore']();
		var _0x9f6cx2 = [];
		_0x9f6cx3['removeAssignmentsForTask'](_0x9f6cx1);
		Ext['isArray'](_0x9f6cx5) && Ext['Array']['each'](_0x9f6cx5, function (_0x9f6cx4) {
			if (_0x9f6cx1['getResourceStore']()['getById'](_0x9f6cx4[_0x9f6cx3['model']['prototype']['resourceIdField']])) {
				_0x9f6cx4[_0x9f6cx3['model']['prototype']['taskIdField']] = _0x9f6cx1['getId']();
				_0x9f6cx2['push'](_0x9f6cx4)
			}
		});
		_0x9f6cx3['add'](_0x9f6cx2)
	}
	, renderer: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (this['dirtyCls'] && this['field']['isDirty'](_0x9f6cx1)) {
			_0x9f6cx5['tdCls'] = this['dirtyCls']
		};
		return this['field']['getFieldDisplayValue'](_0x9f6cx1)
	}
});
Ext.define('Ext.ux.Gantt.column.Rollup', {
	extend: 'Ext.grid.Column'
	, alias: ['widget.rollupcolumn', 'widget.ganttcolumn.rollup']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, fieldProperty: 'rollupField'
	, editor: 'combobox'
	, defaultEditor: 'combobox'
	, initComponent: function () {
		this['initTaskFieldColumn']({
			store: [[false, this.L('no')], [true, this.L('yes')]]
		});
		this['callParent'](arguments)
	}
	, getValueToRender: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return this.L(_0x9f6cx2 ? 'yes' : 'no')
	}
});
Ext.define('Ext.ux.Gantt.field.SchedulingMode', {
	extend: 'Ext.form.field.ComboBox'
	, mixins: ['Ext.ux.Gantt.field.mixin.TaskField', 'Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.schedulingmodefield'
	, alternateClassName: 'Ext.ux.Gantt.widget.SchedulingmodeField'
	, fieldProperty: 'schedulingModeField'
	, setTaskValueMethod: 'setSchedulingMode'
	, getTaskValueMethod: 'getSchedulingMode'
	, pickerAlign: 'tl-bl?'
	, matchFieldWidth: true
	, editable: false
	, forceSelection: true
	, triggerAction: 'all'
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		if (!_0x9f6cx1['store']) {
			this['initStore'](_0x9f6cx1)
		};
		this['callParent']([_0x9f6cx1]);
		this['on']('change', this['onFieldChange'], this)
	}
	, initStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx1['store'] = _0x9f6cx2['getDefaultSchedulingModes']()
	}
	, getDefaultSchedulingModes: function () {
		var _0x9f6cx1 = this;
		return [['Normal', _0x9f6cx1.L('Normal')], ['FixedDuration', _0x9f6cx1.L('FixedDuration')], ['EffortDriven', _0x9f6cx1.L('EffortDriven')], ['DynamicAssignment', _0x9f6cx1.L('DynamicAssignment')]]
	}
	, valueToVisible: function (_0x9f6cx4, _0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx3 = [];
		var _0x9f6cx1 = this['findRecordByValue'](_0x9f6cx4);
		if (_0x9f6cx1) {
			_0x9f6cx3['push'](_0x9f6cx1['data'])
		}
		else {
			if (Ext['isDefined'](_0x9f6cx5['valueNotFoundText'])) {
				_0x9f6cx3['push'](_0x9f6cx5['valueNotFoundText'])
			}
		};
		return _0x9f6cx5['displayTpl']['apply'](_0x9f6cx3)
	}
	, getErrors: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['callParent'](arguments);
		if (_0x9f6cx2 && _0x9f6cx2['length']) {
			return _0x9f6cx2
		};
		if (!Ext['isEmpty'](_0x9f6cx1) && !(this['findRecordByDisplay'](_0x9f6cx1) || this['findRecordByValue'](_0x9f6cx1))) {
			return [this.L('invalidText')]
		}
		else {
			return []
		}
	}
	, getValue: function () {
		return this['value']
	}
	, onFieldChange: function (_0x9f6cx2, _0x9f6cx1) {
		if (this['instantUpdate'] && !this['getSuppressTaskUpdate']() && this['task'] && this['value']) {
			this['applyChanges']()
		}
	}
});
Ext.define('Ext.ux.Gantt.column.SchedulingMode', {
	extend: 'Ext.grid.column.Column'
	, requires: ['Ext.ux.Gantt.field.SchedulingMode']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, alias: ['widget.schedulingmodecolumn', 'widget.ganttcolumn.schedulingmode']
	, width: 100
	, align: 'left'
	, data: null
	, fieldProperty: 'schedulingModeField'
	, editor: 'schedulingmodefield'
	, defaultEditor: 'schedulingmodefield'
	, instantUpdate: false
	, initComponent: function () {
		this['initTaskFieldColumn']({
			store: this['data']
		});
		this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Gantt.column.Sequence', {
	extend: 'Ext.grid.column.Column'
	, alias: ['widget.sequencecolumn', 'widget.ganttcolumn.sequence']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, isSequenceColumn: true
	, width: 40
	, align: 'right'
	, sortable: false
	, dataIndex: 'index'
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		this['text'] = _0x9f6cx1['text'] || this.L('text');
		this['callParent'](arguments)
	}
	, renderer: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return _0x9f6cx1['getSequenceNumber']()
	}
});
Ext.define('Ext.ux.Gantt.column.ShowInTimeline', {
	extend: 'Ext.grid.column.Check'
	, alias: ['widget.showintimelinecolumn', 'widget.ganttcolumn.showintimeline']
	, uses: ['Ext.ux.Gantt.patches.CheckColumn']
	, mixins: ['Ext.ux.Gantt.column.mixin.TaskFieldColumn']
	, fieldProperty: 'showInTimelineField'
	, initComponent: function (_0x9f6cx1) {
		this['initTaskFieldColumn']();
		this['callParent']([_0x9f6cx1]);
		this['tdCls'] = (this['tdCls'] || '') + ' gnt-showintimeline-cell'
	}
	, onReadOnlySet: function (_0x9f6cx1, _0x9f6cx2) {
		this['setDisabled'](_0x9f6cx2)
	}
	, taskFieldRenderer: function () {
		var _0x9f6cx1 = this['defaultRenderer']['apply'](this, arguments);
		this['applyColumnCls']['apply'](this, arguments);
		return _0x9f6cx1
	}
});
Ext.define('Ext.ux.Gantt.column.Slack', {
	extend: 'Ext.grid.column.Column'
	, alternateClassName: ['Ext.ux.Gantt.column.FreeSlack']
	, requires: ['Ext.Number', 'Ext.ux.Scheduler.util.Date']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: ['widget.slackcolumn', 'widget.freeslackcolumn', 'widget.ganttcolumn.slack']
	, isFreeSlackColumn: true
	, decimalPrecision: 2
	, useAbbreviation: false
	, slackUnit: 'd'
	, width: 100
	, align: 'left'
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		this['text'] = _0x9f6cx1['text'] || this.L('text');
		this['callParent'](arguments);
		this['renderer'] = _0x9f6cx1['renderer'] || this['rendererFunc'];
		this['scope'] = _0x9f6cx1['scope'] || this;
		this['hasCustomRenderer'] = true
	}
	, afterRender: function () {
		var _0x9f6cx1 = this['up']('ganttpanel');
		_0x9f6cx1['registerLockedDependencyListeners']();
		this['callParent'](arguments)
	}
	, getSlackValue: function (_0x9f6cx1) {
		return _0x9f6cx1['getSlack'](this['slackUnit'])
	}
	, rendererFunc: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		_0x9f6cx5['tdCls'] = (_0x9f6cx5['tdCls'] || '') + ' sch-column-readonly';
		_0x9f6cx2 = this['getSlackValue'](_0x9f6cx1);
		if (Ext['isNumber'](_0x9f6cx2)) {
			return parseFloat(Ext['Number']['toFixed'](_0x9f6cx2, this['decimalPrecision'])) + ' ' + Ext.ux.Scheduler['util']['Date'][this['useAbbreviation'] ? 'getShortNameOfUnit' : 'getReadableNameOfUnit'](this['slackUnit'], _0x9f6cx2 !== 1)
		};
		return ''
	}
});
Ext.define('Ext.ux.Gantt.column.Successor', {
	extend: 'Ext.ux.Gantt.column.Dependency'
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: ['widget.successorcolumn', 'widget.ganttcolumn.successor']
	, isSuccessorColumn: true
	, type: 'successors'
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		this['text'] = _0x9f6cx1['text'] || this.L('text');
		this['callParent'](arguments)
	}
	, putRawData: function (_0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx1['getDependencyStore']();
		var _0x9f6cx5 = [];
		_0x9f6cx2['remove'](_0x9f6cx1['getOutgoingDependencies'](true));
		Ext['isArray'](_0x9f6cx3) && Ext['Array']['each'](_0x9f6cx3, function (_0x9f6cx7) {
			if (_0x9f6cx1['getTaskStore']()['getById'](_0x9f6cx7[_0x9f6cx2['model']['prototype']['toField']])) {
				var _0x9f6cx4 = new _0x9f6cx2['model'](_0x9f6cx7);
				_0x9f6cx4['setSourceId'](_0x9f6cx1['getId']());
				if (_0x9f6cx2['isValidDependency'](_0x9f6cx4)) {
					_0x9f6cx5['push'](_0x9f6cx4)
				}
			}
		});
		_0x9f6cx2['add'](_0x9f6cx5)
	}
});
Ext.define('Ext.ux.Gantt.column.WBS', {
	extend: 'Ext.grid.column.Column'
	, alias: ['widget.wbscolumn', 'widget.ganttcolumn.wbs']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, isWBSColumn: true
	, width: 40
	, align: 'left'
	, sortable: false
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		this['text'] = _0x9f6cx1['text'] || this.L('text');
		this['callParent'](arguments);
		this['tdCls'] = (this['tdCls'] || '') + ' gnt-wbs-cell'
	}
	, renderer: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return _0x9f6cx1['getWBSCode']()
	}
});
Ext.define('Ext.ux.Gantt.column.TotalSlack', {
	extend: 'Ext.ux.Gantt.column.Slack'
	, isTotalSlackColumn: true
	, alias: ['widget.totalslackcolumn', 'widget.ganttcolumn.totalslack']
	, getSlackValue: function (_0x9f6cx1) {
		return _0x9f6cx1['getTotalSlack'](this['slackUnit'])
	}
});
Ext.define('Ext.ux.Gantt.column.AddNew', {
	extend: 'Ext.grid.column.Column'
	, alias: ['widget.addnewcolumn', 'widget.ganttcolumn.addnew']
	, requires: ['Ext.form.field.ComboBox', 'Ext.Editor', 'Ext.ux.Gantt.column.ActualCost', 'Ext.ux.Gantt.column.ActualEffort', 'Ext.ux.Gantt.column.AssignmentUnits', 'Ext.ux.Gantt.column.BaselineEndDate', 'Ext.ux.Gantt.column.BaselineCost', 'Ext.ux.Gantt.column.BaselineEffort', 'Ext.ux.Gantt.column.BaselineStartDate', 'Ext.ux.Gantt.column.Calendar', 'Ext.ux.Gantt.column.ConstraintDate', 'Ext.ux.Gantt.column.ConstraintType', 'Ext.ux.Gantt.column.Cost', 'Ext.ux.Gantt.column.CostVariance', 'Ext.ux.Gantt.column.DeadlineDate', 'Ext.ux.Gantt.column.Dependency', 'Ext.ux.Gantt.column.Duration', 'Ext.ux.Gantt.column.EarlyEndDate', 'Ext.ux.Gantt.column.EarlyStartDate', 'Ext.ux.Gantt.column.Effort', 'Ext.ux.Gantt.column.EffortVariance', 'Ext.ux.Gantt.column.EndDate', 'Ext.ux.Gantt.column.LateEndDate', 'Ext.ux.Gantt.column.LateStartDate', 'Ext.ux.Gantt.column.ManuallyScheduled', 'Ext.ux.Gantt.column.Milestone', 'Ext.ux.Gantt.column.Name', 'Ext.ux.Gantt.column.Note', 'Ext.ux.Gantt.column.PercentDone', 'Ext.ux.Gantt.column.Predecessor', 'Ext.ux.Gantt.column.ReadOnly', 'Ext.ux.Gantt.column.ResourceAssignment', 'Ext.ux.Gantt.column.ResourceName', 'Ext.ux.Gantt.column.Rollup', 'Ext.ux.Gantt.column.SchedulingMode', 'Ext.ux.Gantt.column.Sequence', 'Ext.ux.Gantt.column.ShowInTimeline', 'Ext.ux.Gantt.column.Slack', 'Ext.ux.Gantt.column.StartDate', 'Ext.ux.Gantt.column.Successor', 'Ext.ux.Gantt.column.WBS', 'Ext.ux.Gantt.column.TotalSlack']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, text: ''
	, width: 100
	, resizable: false
	, menuDisabled: true
	, sortable: false
	, draggable: false
	, colEditor: null
	, colEditorStore: null
	, layout: 'fit'
	, ignoreInAddMenu: true
	, ignoreInExport: true
	, ignoreExport: true
	, columnList: null
	, initComponent: function () {
		this['addCls']('gnt-addnewcolumn');
		this['items'] = this['getColEditor']();
		this['text'] = this['text'] || this.L('text');
		this['callParent'](arguments)
	}
	, getGantt: function () {
		if (!this['gantt']) {
			this['gantt'] = this['up']('ganttpanel')
		};
		return this['gantt']
	}
	, getColEditor: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1;
		if (!_0x9f6cx2['colEditor']) {
			_0x9f6cx1 = _0x9f6cx2['colEditor'] = new Ext['form']['field'].ComboBox({
				itemId: 'addNewEditor'
				, displayField: 'text'
				, valueField: 'clsName'
				, hideTrigger: true
				, queryMode: 'local'
				, multiSelect: false
				, emptyText: this.L('text')
				, listConfig: {
					itemId: 'addNewEditorComboList'
					, minWidth: 150
				}
				, store: _0x9f6cx2['getColEditorStore']()
				, pickerAlign: 'tl-bl'
				, listeners: {
					focus: _0x9f6cx2['onInputFocus']
					, blur: _0x9f6cx2['onFieldBlur']
					, select: _0x9f6cx2['onSelect']
					, scope: _0x9f6cx2
				}
			});
			if (Ext['isIE8m']) {
				_0x9f6cx1['on']('resize', function (_0x9f6cx7, _0x9f6cx4, _0x9f6cx5, _0x9f6cx3, _0x9f6cx6) {
					_0x9f6cx7['inputEl']['setStyle']('line-height', +_0x9f6cx5 + 'px');
					_0x9f6cx7['setValue'](_0x9f6cx7['getValue']() + ' ')
				})
			}
		};
		return _0x9f6cx2['colEditor']
	}
	, onFieldBlur: function (_0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx1 = _0x9f6cx3['getPicker']();
		var _0x9f6cx2 = _0x9f6cx1['el'] && _0x9f6cx1['el']['dom'];
		if (!_0x9f6cx5['relatedTarget'] || _0x9f6cx5['relatedTarget'] !== _0x9f6cx2) {
			this['resetField']()
		}
	}
	, resetField: function () {
		this['getColEditor']()['store']['clearFilter']();
		this['getColEditor']()['reset']();
		this['getColEditor']()['collapse']()
	}
	, getColEditorStore: function () {
		var _0x9f6cx1 = this;
		if (!_0x9f6cx1['colEditorStore']) {
			_0x9f6cx1['columnList'] = _0x9f6cx1['columnList'] || Ext.ux.Gantt['column']['AddNew']['buildDefaultColumnList']();
			_0x9f6cx1['colEditorStore'] = new Ext['data'].Store({
				fields: ['text', 'clsName', 'config']
				, data: _0x9f6cx1['columnList']
				, sorters: [{
					property: 'text'
					, direction: 'ASC'
				}]
			})
		};
		return _0x9f6cx1['colEditorStore']
	}
	, onInputFocus: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx2['ownerCt']['updateLayout']();
		_0x9f6cx2['expand']()
	}
	, onSelect: function (_0x9f6cx2, _0x9f6cx1) {
		this['resetField']();
		this['getColEditor']()['blur']();
		this['addColumn'](Ext['isArray'](_0x9f6cx1) ? _0x9f6cx1[0] : _0x9f6cx1)
	}
	, addColumn: function (_0x9f6cx2) {
		var _0x9f6cx4 = this;
		var _0x9f6cx6 = _0x9f6cx2;
		var _0x9f6cx1 = _0x9f6cx4['up']('headercontainer');
		var _0x9f6cx7 = _0x9f6cx6['get']('text');
		var _0x9f6cx5 = Ext['apply']({}, _0x9f6cx6['get']('config'));
		var _0x9f6cx3 = _0x9f6cx6['get']('clsName') || _0x9f6cx5['xclass'] || 'Ext.grid.column.Column';
		Ext['require'](_0x9f6cx3, function () {
			_0x9f6cx5['xclass'] = _0x9f6cx3;
			_0x9f6cx5['text'] = _0x9f6cx7;
			_0x9f6cx5['lockable'] = false;
			var _0x9f6cx8 = Ext['create'](_0x9f6cx5);
			_0x9f6cx1['insert'](_0x9f6cx1['items']['indexOf'](_0x9f6cx4), _0x9f6cx8)
		})
	}
	, destroy: function () {
		this['colEditorStore'] && this['colEditorStore']['destroy']();
		this['callParent'](arguments)
	}
	, statics: {
		buildDefaultColumnList: function () {
			var _0x9f6cx1 = [];
			Ext['Array']['each'](Ext['ClassManager']['getNamesByExpression']('widget.ganttcolumn.*'), function (_0x9f6cx5) {
				var _0x9f6cx2 = Ext['ClassManager']['get'](_0x9f6cx5);
				if (_0x9f6cx2 && !_0x9f6cx2['prototype']['ignoreInAddMenu']) {
					_0x9f6cx1['push']({
						clsName: _0x9f6cx5
						, text: _0x9f6cx2['prototype']['localize'] ? _0x9f6cx2['prototype']['localize']('text') : _0x9f6cx2['prototype']['text']
					})
				}
			});
			return _0x9f6cx1['sort'](function (_0x9f6cx3, _0x9f6cx5) {
				return _0x9f6cx3['text'] > _0x9f6cx5['text'] ? 1 : -1
			})
		}
	}
});
Ext.define('Ext.ux.Gantt.column.DragDrop', {
	extend: 'Ext.grid.column.Column'
	, alias: ['widget.dragdropcolumn', 'widget.ganttcolumn.dragdrop']
	, width: 35
	, tdCls: 'sch-gantt-column-dragdrop'
	, cls: 'sch-gantt-column-dragdrop-header'
	, ignoreInAddMenu: true
	, ignoreExport: true
	, ignoreInExport: true
	, sortable: false
	, resizable: false
	, hideable: false
	, menuDisabled: true
	, draggable: false
	, align: 'center'
	, processEvent: function (_0x9f6cx1) {
		return _0x9f6cx1 !== 'click'
	}
});
Ext.define('Ext.ux.Gantt.column.Scale', {
	extend: 'Ext.grid.column.Template'
	, alias: 'widget.scalecolumn'
	, sortable: false
	, scalePoints: null
	, scaleStep: 2
	, scaleLabelStep: 4
	, scaleMin: 0
	, scaleMax: 24
	, width: 40
	, scaleCellCls: 'gnt-scalecolumn'
	, tpl: '<div class="gnt-scalecolumn-wrap" style="height:{scaleHeight}px;"><tpl for="scalePoints"><tpl if="label !== \'\'"><span class="gnt-scalecolumn-label-line {cls}" style="bottom:{bottom}px"><span class="gnt-scalecolumn-label">{label}</span></span><tpl else><span class="gnt-scalecolumn-line {cls}" style="bottom:{bottom}px"></span></tpl></tpl></div>'
	, initComponent: function () {
		this['tdCls'] = (this['tdCls'] || '') + ' ' + this['scaleCellCls'];
		this['callParent'](arguments)
	}
	, onAdded: function () {
		this['callParent'](arguments);
		this['setAvailableHeight'](this['up']('timelinegrid')['rowHeight'], true)
	}
	, setAvailableHeight: function (_0x9f6cx1, _0x9f6cx2) {
		this['availableHeight'] = _0x9f6cx1;
		if (!this['scalePoints']) {
			this['scaleStepHeight'] = this['availableHeight'] / (this['scaleMax'] - this['scaleMin'] + this['scaleStep']);
			this['scalePoints'] = this['buildScalePoints']()
		}
		else {
			if (_0x9f6cx2) {
				this['scalePoints']['sort'](function (_0x9f6cx3, _0x9f6cx5) {
					return _0x9f6cx3['value'] - _0x9f6cx5['value']
				});
				this['scaleMin'] = this['scalePoints'][0]['value'];
				this['scaleMax'] = this['scalePoints'][this['scalePoints']['length'] - 1]['value'];
				this['scaleStep'] = (this['scaleMax'] - this['scaleMin']) / 10
			};
			this['scaleStepHeight'] = this['availableHeight'] / (this['scaleMax'] - this['scaleMin'] + this['scaleStep']);
			this['updateScalePoints']()
		}
	}
	, defaultRenderer: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = {
			record: Ext['apply']({}, _0x9f6cx1['data'], _0x9f6cx1['getAssociatedData']())
			, scaleHeight: this['availableHeight']
			, scalePoints: this['scalePoints']
		};
		return this['tpl']['apply'](_0x9f6cx2)
	}
	, buildScalePoints: function () {
		var _0x9f6cx6 = this['scaleMin']
			, _0x9f6cx8 = _0x9f6cx6
			, _0x9f6cx5 = this['scaleStep']
			, _0x9f6cx7 = this['scaleLabelStep']
			, _0x9f6cx3 = this['scaleStepHeight']
			, _0x9f6cx2 = this['availableHeight']
			, _0x9f6cx1 = this['scaleCellCls']
			, _0x9f6cx9 = _0x9f6cx1 + '-min'
			, _0x9f6cxc = [];
		var _0x9f6cx4 = function (_0x9f6cxb, _0x9f6cx13, _0x9f6cxa) {
			return {
				bottom: Math['round']((_0x9f6cxb - _0x9f6cx6) * _0x9f6cx3)
				, value: _0x9f6cxb
				, label: _0x9f6cx13 != 'undefined' ? _0x9f6cx13 : ''
				, cls: _0x9f6cxa || ''
			}
		};
		while (_0x9f6cx8 < this['scaleMax']) {
			if (_0x9f6cx8 > 0) {
				_0x9f6cxc['push'](_0x9f6cx4(_0x9f6cx8, _0x9f6cx8 % _0x9f6cx7 || _0x9f6cx8 === _0x9f6cx6 ? '' : _0x9f6cx8, _0x9f6cx9))
			};
			_0x9f6cx9 = '';
			_0x9f6cx8 += _0x9f6cx5
		};
		_0x9f6cxc['push'](_0x9f6cx4(this['scaleMax'], this['scaleMax'], _0x9f6cx1 + '-max'));
		return _0x9f6cxc
	}
	, updateScalePoints: function () {
		var _0x9f6cx1 = this['scaleStepHeight']
			, _0x9f6cx2 = this['availableHeight'];
		Ext['Array']['each'](this['scalePoints'], function (_0x9f6cx5) {
			_0x9f6cx5['bottom'] = Math['round'](_0x9f6cx5['value'] * _0x9f6cx1)
		})
	}
});
Ext.define('Ext.ux.Gantt.constraint.Base', {
	requires: ['Ext.String']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, isSatisfied: function (_0x9f6cx1, _0x9f6cx2) {
		throw 'Abstract method'
	}
	, isApplicable: function (_0x9f6cx1) {
		return true
	}
	, getResolution: function (_0x9f6cx13, _0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx8 = this
			, _0x9f6cx9 = false;
		_0x9f6cx5 = _0x9f6cx5 || _0x9f6cx1['getConstraintDate']();
		var _0x9f6cx7 = function () {
			if (!_0x9f6cx9) {
				_0x9f6cx9 = true;
				_0x9f6cx13['apply'](this, arguments)
			}
		};
		var _0x9f6cx3 = {
			title: _0x9f6cx8.L('name')
			, task: _0x9f6cx1
			, date: _0x9f6cx5
			, constraintClassName: Ext['getClassName'](_0x9f6cx8)
			, resolutions: this['getResolutionOptions'](_0x9f6cx7, _0x9f6cx1, _0x9f6cx5)
			, getCancelActionOption: function () {
				return this['resolutions'][0]
			}
			, cancelAction: function () {
				return this['getCancelActionOption']()['resolve']()
			}
			, proceedAction: function () {
				_0x9f6cx7()
			}
			, getResolution: function (_0x9f6cxb) {
				return Ext['Array']['findBy'](this['resolutions'], function (_0x9f6cxe) {
					return _0x9f6cxe['id'] == _0x9f6cxb
				})
			}
		};
		_0x9f6cx3['defaultAction'] = _0x9f6cx3['cancelAction'];
		var _0x9f6cxc = _0x9f6cx1['getTaskStore'](true);
		if (_0x9f6cxc && _0x9f6cxc['scheduleByConstraints'] && _0x9f6cx8['hasThisConstraintApplied'](_0x9f6cx1) && _0x9f6cx1['propagating'] && _0x9f6cx1['childNodes']['length']) {
			var _0x9f6cx4 = _0x9f6cx1['getUnprojected'](_0x9f6cx1['constraintTypeField'])
				, _0x9f6cxa = _0x9f6cx1['getUnprojected'](_0x9f6cx1['constraintDateField'])
				, _0x9f6cx6 = _0x9f6cx1['getConstraintType']()
				, _0x9f6cx2 = _0x9f6cx1['getConstraintDate']();
			if ((_0x9f6cx4 != _0x9f6cx6) || (!_0x9f6cxa && _0x9f6cx2) || (_0x9f6cxa && !_0x9f6cx2) || (_0x9f6cxa - _0x9f6cx2)) {
				_0x9f6cx3['description'] = Ext['String']['format'](_0x9f6cx8.L('This action will cause a scheduling conflict'), _0x9f6cx1['getName'](), _0x9f6cx8.L('name'))
			}
		};
		return _0x9f6cx3
	}
	, getResolutionOptions: function (_0x9f6cx7, _0x9f6cx5, _0x9f6cx3) {
		_0x9f6cx3 = _0x9f6cx3 || _0x9f6cx5['getConstraintDate']();
		var _0x9f6cx4 = this;
		var _0x9f6cx1 = [{
			id: 'cancel'
			, title: _0x9f6cx4.L('Cancel the change and do nothing')
			, resolve: function () {
				_0x9f6cx7(true)
			}
		}];
		var _0x9f6cx2 = _0x9f6cx5['getTaskStore'](true);
		_0x9f6cx4['hasThisConstraintApplied'](_0x9f6cx5) && _0x9f6cx1['push']({
			id: 'remove-constraint'
			, title: Ext['String']['format'](_0x9f6cx4.L('Remove the constraint'), _0x9f6cx4.L('name'))
			, resolve: function () {
				_0x9f6cx5['setConstraintWithoutPropagation']('');
				if (_0x9f6cx2['scheduleByConstraints'] && (_0x9f6cx5['getEarlyStartDate']() < _0x9f6cx5['getStartDate']())) {
					_0x9f6cx5['pinWithoutPropagation']()
				};
				_0x9f6cx7()
			}
		});
		return _0x9f6cx1
	}
	, canResolve: function (_0x9f6cx1, _0x9f6cx2) {
		return false
	}
	, resolve: function (_0x9f6cx1, _0x9f6cx2) {}
	, hasThisConstraintApplied: function (_0x9f6cx1) {
		return _0x9f6cx1['getConstraintClass']() === this
	}
	, getInitialConstraintDate: function (_0x9f6cx1) {
		return _0x9f6cx1['getConstraintDate']()
	}
	, getDisplayableConstraintDateForFormat: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return _0x9f6cx2
	}
	, adjustConstraintDateFromDisplayableWithFormat: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return _0x9f6cx2
	}
	, statics: {
		getConstraintClass: function (_0x9f6cx2) {
			var _0x9f6cx1 = !Ext['isEmpty'](_0x9f6cx2) && Ext['ClassManager']['getByAlias']('gntconstraint.' + _0x9f6cx2);
			Ext['isEmpty'](_0x9f6cx2) || _0x9f6cx1 || Ext['Error']['raise']('can\'t get constraint class, unrecognized constraint type: ' + _0x9f6cx2);
			return _0x9f6cx1 || null
		}
	}
});
Ext.define('Ext.ux.Gantt.constraint.AsLateAsPossible', {
	extend: 'Ext.ux.Gantt.constraint.Base'
	, singleton: true
	, isSatisfied: function (_0x9f6cx1) {
		throw 'Abstract method'
	}
});
Ext.define('Ext.ux.Gantt.constraint.AsSoonAsPossible', {
	extend: 'Ext.ux.Gantt.constraint.Base'
	, singleton: true
	, isSatisfied: function (_0x9f6cx1) {
		throw 'Abstract method'
	}
});
Ext.define('Ext.ux.Gantt.constraint.FinishNoEarlierThan', {
	extend: 'Ext.ux.Gantt.constraint.Base'
	, alias: 'gntconstraint.finishnoearlierthan'
	, singleton: true
	, requires: ['Ext.ux.Scheduler.util.Date']
	, isApplicable: function (_0x9f6cx1) {
		return _0x9f6cx1['get']('leaf')
	}
	, isSatisfied: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = _0x9f6cx1['getEndDate']();
		_0x9f6cx2 = _0x9f6cx2 || _0x9f6cx1['getConstraintDate']();
		return !_0x9f6cx2 || !_0x9f6cx5 || _0x9f6cx5 >= _0x9f6cx2
	}
	, getResolutionOptions: function (_0x9f6cx6, _0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx7 = this
			, _0x9f6cx1 = _0x9f6cx7['callParent'](arguments);
		var _0x9f6cx2 = _0x9f6cx5['getTaskStore'](true)
			, _0x9f6cx4 = _0x9f6cx2 && _0x9f6cx2['scheduleByConstraints'];
		if (!_0x9f6cx4) {
			_0x9f6cx3 = _0x9f6cx3 || _0x9f6cx5['getConstraintDate']();
			_0x9f6cx1['push']({
				id: 'move-task'
				, title: _0x9f6cx7.L('Move the task to finish on {0}')
				, resolve: function () {
					_0x9f6cx5['setEndDateWithoutPropagation'](_0x9f6cx3, true);
					_0x9f6cx6()
				}
			})
		};
		return _0x9f6cx1
	}
	, getInitialConstraintDate: function (_0x9f6cx1) {
		return _0x9f6cx1['getEndDate']()
	}
	, getRestrictions: function (_0x9f6cx1) {
		return this['hasThisConstraintApplied'](_0x9f6cx1) && {
			min: {
				endDate: _0x9f6cx1['getConstraintDate']()
			}
		}
	}
	, getDisplayableConstraintDateForFormat: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (_0x9f6cx2 && !Ext['Date']['formatContainsHourInfo'](_0x9f6cx5) && (_0x9f6cx2 - Ext['Date']['clearTime'](_0x9f6cx2, true) === 0)) {
			_0x9f6cx2 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].DAY, -1)
		};
		return _0x9f6cx2
	}
	, adjustConstraintDateFromDisplayableWithFormat: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (_0x9f6cx2 && !Ext['Date']['formatContainsHourInfo'](_0x9f6cx5) && (_0x9f6cx2 - Ext['Date']['clearTime'](_0x9f6cx2, true) === 0)) {
			_0x9f6cx2 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].DAY, 1)
		};
		return _0x9f6cx2
	}
});
Ext.define('Ext.ux.Gantt.constraint.FinishNoLaterThan', {
	extend: 'Ext.ux.Gantt.constraint.Base'
	, alias: 'gntconstraint.finishnolaterthan'
	, singleton: true
	, requires: ['Ext.ux.Scheduler.util.Date']
	, isSatisfied: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = _0x9f6cx1['getEndDate']();
		_0x9f6cx2 = _0x9f6cx2 || _0x9f6cx1['getConstraintDate']();
		return !_0x9f6cx2 || !_0x9f6cx5 || _0x9f6cx5 <= _0x9f6cx2
	}
	, getResolutionOptions: function (_0x9f6cx8, _0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx7 = this
			, _0x9f6cx2 = _0x9f6cx5['getTaskStore'](true)
			, _0x9f6cx4 = _0x9f6cx2 && _0x9f6cx2['scheduleByConstraints']
			, _0x9f6cx1 = _0x9f6cx7['callParent'](arguments);
		if (!_0x9f6cx4) {
			_0x9f6cx3 = _0x9f6cx3 || _0x9f6cx5['getConstraintDate']();
			_0x9f6cx1['push']({
				id: 'move-task'
				, title: _0x9f6cx7.L('Move the task to finish on {0}')
				, resolve: function () {
					_0x9f6cx5['setEndDateWithoutPropagation'](_0x9f6cx3, true);
					_0x9f6cx8()
				}
			})
		};
		var _0x9f6cx6 = Ext['Array']['findBy'](_0x9f6cx1, function (_0x9f6cx9) {
			return _0x9f6cx9['id'] == 'remove-constraint'
		});
		if (_0x9f6cx6) {
			_0x9f6cx6['getTitleValues'] = function () {
				return [_0x9f6cx5['getEndDate']()]
			}
		};
		return _0x9f6cx1
	}
	, getInitialConstraintDate: function (_0x9f6cx1) {
		return _0x9f6cx1['getEndDate']()
	}
	, getRestrictions: function (_0x9f6cx1) {
		return this['hasThisConstraintApplied'](_0x9f6cx1) && {
			max: {
				endDate: _0x9f6cx1['getConstraintDate']()
			}
		}
	}
	, getDisplayableConstraintDateForFormat: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (_0x9f6cx2 && !Ext['Date']['formatContainsHourInfo'](_0x9f6cx5) && (_0x9f6cx2 - Ext['Date']['clearTime'](_0x9f6cx2, true) === 0)) {
			_0x9f6cx2 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].DAY, -1)
		};
		return _0x9f6cx2
	}
	, adjustConstraintDateFromDisplayableWithFormat: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (_0x9f6cx2 && !Ext['Date']['formatContainsHourInfo'](_0x9f6cx5) && (_0x9f6cx2 - Ext['Date']['clearTime'](_0x9f6cx2, true) === 0)) {
			_0x9f6cx2 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].DAY, 1)
		};
		return _0x9f6cx2
	}
});
Ext.define('Ext.ux.Gantt.constraint.MustFinishOn', {
	extend: 'Ext.ux.Gantt.constraint.Base'
	, alias: 'gntconstraint.mustfinishon'
	, singleton: true
	, requires: ['Ext.ux.Scheduler.util.Date']
	, isApplicable: function (_0x9f6cx1) {
		return _0x9f6cx1['get']('leaf')
	}
	, isSatisfied: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = _0x9f6cx1['getEndDate']();
		_0x9f6cx2 = _0x9f6cx2 || _0x9f6cx1['getConstraintDate']();
		return !_0x9f6cx2 || !_0x9f6cx5 || (_0x9f6cx5.valueOf() == _0x9f6cx2.valueOf())
	}
	, getResolutionOptions: function (_0x9f6cx8, _0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx7 = this
			, _0x9f6cx1 = _0x9f6cx7['callParent'](arguments);
		var _0x9f6cx2 = _0x9f6cx5['getTaskStore'](true)
			, _0x9f6cx4 = _0x9f6cx2 && _0x9f6cx2['scheduleByConstraints'];
		if (!_0x9f6cx4) {
			_0x9f6cx3 = _0x9f6cx3 || _0x9f6cx5['getConstraintDate']();
			_0x9f6cx1['push']({
				id: 'move-task'
				, title: _0x9f6cx7.L('Move the task to finish on {0}')
				, resolve: function () {
					_0x9f6cx5['setEndDateWithoutPropagation'](_0x9f6cx3, true);
					_0x9f6cx8()
				}
			})
		};
		var _0x9f6cx6 = Ext['Array']['findBy'](_0x9f6cx1, function (_0x9f6cx9) {
			return _0x9f6cx9['id'] == 'remove-constraint'
		});
		if (_0x9f6cx6) {
			_0x9f6cx6['getTitleValues'] = function () {
				return [_0x9f6cx5['getEndDate']()]
			}
		};
		return _0x9f6cx1
	}
	, getInitialConstraintDate: function (_0x9f6cx1) {
		return _0x9f6cx1['getEndDate']()
	}
	, getRestrictions: function (_0x9f6cx1) {
		return this['hasThisConstraintApplied'](_0x9f6cx1) && {
			endDate: _0x9f6cx1['getConstraintDate']()
		}
	}
	, getDisplayableConstraintDateForFormat: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (_0x9f6cx2 && !Ext['Date']['formatContainsHourInfo'](_0x9f6cx5) && (_0x9f6cx2 - Ext['Date']['clearTime'](_0x9f6cx2, true) === 0)) {
			_0x9f6cx2 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].DAY, -1)
		};
		return _0x9f6cx2
	}
	, adjustConstraintDateFromDisplayableWithFormat: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (_0x9f6cx2 && !Ext['Date']['formatContainsHourInfo'](_0x9f6cx5) && (_0x9f6cx2 - Ext['Date']['clearTime'](_0x9f6cx2, true) === 0)) {
			_0x9f6cx2 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].DAY, 1)
		};
		return _0x9f6cx2
	}
});
Ext.define('Ext.ux.Gantt.constraint.MustStartOn', {
	extend: 'Ext.ux.Gantt.constraint.Base'
	, alias: 'gntconstraint.muststarton'
	, singleton: true
	, requires: ['Ext.ux.Scheduler.util.Date']
	, isApplicable: function (_0x9f6cx1) {
		return _0x9f6cx1['get']('leaf')
	}
	, isSatisfied: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = _0x9f6cx2['getStartDate']();
		_0x9f6cx5 = _0x9f6cx5 || _0x9f6cx2['getConstraintDate']();
		return !_0x9f6cx5 || !_0x9f6cx1 || (_0x9f6cx1.valueOf() == _0x9f6cx5.valueOf())
	}
	, getResolutionOptions: function (_0x9f6cx8, _0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx7 = this
			, _0x9f6cx1 = _0x9f6cx7['callParent'](arguments);
		var _0x9f6cx2 = _0x9f6cx5['getTaskStore'](true)
			, _0x9f6cx4 = _0x9f6cx2 && _0x9f6cx2['scheduleByConstraints'];
		if (!_0x9f6cx4) {
			_0x9f6cx3 = _0x9f6cx3 || _0x9f6cx5['getConstraintDate']();
			_0x9f6cx1['push']({
				id: 'move-task'
				, title: _0x9f6cx7.L('Move the task to start at {0}')
				, resolve: function () {
					_0x9f6cx5['setStartDateWithoutPropagation'](_0x9f6cx3, true);
					_0x9f6cx8()
				}
			})
		};
		var _0x9f6cx6 = Ext['Array']['findBy'](_0x9f6cx1, function (_0x9f6cx9) {
			return _0x9f6cx9['id'] == 'remove-constraint'
		});
		if (_0x9f6cx6) {
			_0x9f6cx6['getTitleValues'] = function () {
				return [_0x9f6cx5['getStartDate']()]
			}
		};
		return _0x9f6cx1
	}
	, getInitialConstraintDate: function (_0x9f6cx1) {
		return _0x9f6cx1['getStartDate']()
	}
	, getRestrictions: function (_0x9f6cx1) {
		return this['hasThisConstraintApplied'](_0x9f6cx1) && {
			startDate: _0x9f6cx1['getConstraintDate']()
		}
	}
});
Ext.define('Ext.ux.Gantt.constraint.StartNoEarlierThan', {
	extend: 'Ext.ux.Gantt.constraint.Base'
	, alias: 'gntconstraint.startnoearlierthan'
	, singleton: true
	, requires: ['Ext.ux.Scheduler.util.Date']
	, isSatisfied: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = _0x9f6cx2['getStartDate']();
		_0x9f6cx5 = _0x9f6cx5 || _0x9f6cx2['getConstraintDate']();
		return !_0x9f6cx5 || !_0x9f6cx1 || (_0x9f6cx1 >= _0x9f6cx5)
	}
	, getResolutionOptions: function (_0x9f6cx6, _0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx7 = this
			, _0x9f6cx1 = _0x9f6cx7['callParent'](arguments);
		var _0x9f6cx2 = _0x9f6cx5['getTaskStore'](true)
			, _0x9f6cx4 = _0x9f6cx2 && _0x9f6cx2['scheduleByConstraints'];
		if (!_0x9f6cx4) {
			_0x9f6cx3 = _0x9f6cx3 || _0x9f6cx5['getConstraintDate']();
			_0x9f6cx1['push']({
				id: 'move-task'
				, title: _0x9f6cx7.L('Move the task to start at {0}')
				, resolve: function () {
					_0x9f6cx5['setStartDateWithoutPropagation'](_0x9f6cx3, true);
					_0x9f6cx6()
				}
			})
		};
		return _0x9f6cx1
	}
	, getInitialConstraintDate: function (_0x9f6cx1) {
		return _0x9f6cx1['getStartDate']()
	}
	, getRestrictions: function (_0x9f6cx1) {
		return this['hasThisConstraintApplied'](_0x9f6cx1) && {
			min: {
				startDate: _0x9f6cx1['getConstraintDate']()
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.constraint.StartNoLaterThan', {
	extend: 'Ext.ux.Gantt.constraint.Base'
	, alias: 'gntconstraint.startnolaterthan'
	, singleton: true
	, requires: ['Ext.ux.Scheduler.util.Date']
	, isApplicable: function (_0x9f6cx1) {
		return _0x9f6cx1['get']('leaf')
	}
	, isSatisfied: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = _0x9f6cx2['getStartDate']();
		_0x9f6cx5 = _0x9f6cx5 || _0x9f6cx2['getConstraintDate']();
		return !_0x9f6cx5 || !_0x9f6cx1 || (_0x9f6cx1 <= _0x9f6cx5)
	}
	, getResolutionOptions: function (_0x9f6cx8, _0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx7 = this
			, _0x9f6cx1 = _0x9f6cx7['callParent'](arguments);
		var _0x9f6cx2 = _0x9f6cx5['getTaskStore'](true)
			, _0x9f6cx4 = _0x9f6cx2 && _0x9f6cx2['scheduleByConstraints'];
		if (!_0x9f6cx4) {
			_0x9f6cx3 = _0x9f6cx3 || _0x9f6cx5['getConstraintDate']();
			_0x9f6cx1['push']({
				id: 'move-task'
				, title: _0x9f6cx7.L('Move the task to start at {0}')
				, resolve: function () {
					_0x9f6cx5['setStartDateWithoutPropagation'](_0x9f6cx3, true);
					_0x9f6cx8()
				}
			})
		};
		var _0x9f6cx6 = Ext['Array']['findBy'](_0x9f6cx1, function (_0x9f6cx9) {
			return _0x9f6cx9['id'] == 'remove-constraint'
		});
		_0x9f6cx6['getTitleValues'] = function () {
			return [_0x9f6cx5['getStartDate']()]
		};
		return _0x9f6cx1
	}
	, getInitialConstraintDate: function (_0x9f6cx1) {
		return _0x9f6cx1['getStartDate']()
	}
	, getRestrictions: function (_0x9f6cx1) {
		return this['hasThisConstraintApplied'](_0x9f6cx1) && {
			max: {
				startDate: _0x9f6cx1['getConstraintDate']()
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.constraint.implicit.Dependency', {
	extend: 'Ext.ux.Gantt.constraint.Base'
	, singleton: true
	, requires: ['Ext.String']
	, getTaskDrivingDependenciesContexts: function (_0x9f6cx5) {
		var _0x9f6cx7 = _0x9f6cx5['getIncomingDependenciesConstraintContext']({
				ignoreParents: true
				, fetchAll: true
				, skipNonWorkingTime: true
			})
			, _0x9f6cx3 = _0x9f6cx5['getEarlyStartDate']()
			, _0x9f6cx1 = [];
		if (_0x9f6cx7) {
			for (var _0x9f6cx4 = 0; _0x9f6cx4 < _0x9f6cx7['all']['length']; _0x9f6cx4++) {
				var _0x9f6cx2 = _0x9f6cx7['all'][_0x9f6cx4];
				if (_0x9f6cx2['startDate'] - _0x9f6cx3 === 0) {
					_0x9f6cx1['push'](_0x9f6cx2)
				}
			}
		};
		return _0x9f6cx1
	}
	, canResolve: function (_0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx4 = this['getTaskDrivingDependenciesContexts'](_0x9f6cx2)
			, _0x9f6cx1 = _0x9f6cx2['getStartDate']()
			, _0x9f6cx5 = _0x9f6cx2['getEarlyStartDate']();
		return (_0x9f6cx1 - _0x9f6cx5) && _0x9f6cx4['length'] > 1 && (_0x9f6cx2['isPinned']() || !_0x9f6cx2['getConstraintType']())
	}
	, resolve: function (_0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx2['getStartDate']()
			, _0x9f6cx5 = _0x9f6cx2['getEarlyStartDate']();
		if (_0x9f6cx1 < _0x9f6cx5) {
			_0x9f6cx2['setStartDateWithoutPropagation'](_0x9f6cx5)
		}
		else {
			_0x9f6cx2['pinWithoutPropagation']()
		}
	}
	, isSatisfied: function (_0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx4 = this['getTaskDrivingDependenciesContexts'](_0x9f6cx2)
			, _0x9f6cx1 = _0x9f6cx2['getStartDate']()
			, _0x9f6cx5 = _0x9f6cx2['getEarlyStartDate']();
		return !_0x9f6cx1 || _0x9f6cx2['isManuallyScheduled']() || _0x9f6cx2['isReadOnly']() || !_0x9f6cx4['length'] || _0x9f6cx1 - _0x9f6cx5 === 0
	}
	, hasThisConstraintApplied: function (_0x9f6cx1) {
		return Boolean(_0x9f6cx1['propagating'] && _0x9f6cx1['getIncomingDependencies']()['length'])
	}
	, getResolution: function (_0x9f6cxa, _0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx9 = this
			, _0x9f6cx8 = _0x9f6cx1['getIncomingDependenciesConstraintContext']()
			, _0x9f6cx4 = _0x9f6cx9['callParent']([_0x9f6cxa, _0x9f6cx1, _0x9f6cx8]);
		_0x9f6cx4['dependenciesLimits'] = _0x9f6cx8;
		_0x9f6cx4['date'] = null;
		var _0x9f6cx3 = _0x9f6cx8['constrainingDependency']
			, _0x9f6cx2 = _0x9f6cx3['getSourceTask']()
			, _0x9f6cx6 = _0x9f6cx3['getTargetTask']();
		_0x9f6cx4['description'] = Ext['String']['format'](_0x9f6cx9.L(_0x9f6cx1['getStartDate']() > _0x9f6cx8['startDate'] ? 'You moved the task away' : 'You moved the task before'), _0x9f6cx9.L('depType' + _0x9f6cx3['getType']()), _0x9f6cx2['getName'](), _0x9f6cx6['getName']());
		_0x9f6cx4['defaultAction'] = function () {
			_0x9f6cx9['resolve'](_0x9f6cx1)
		};
		var _0x9f6cxc = _0x9f6cx1['getDependencyStore']();
		var _0x9f6cx7 = _0x9f6cx4['getResolution']('remove-constraint');
		_0x9f6cx7['resolve'] = function () {
			_0x9f6cx1['pinWithoutPropagation']();
			_0x9f6cxc['remove'](_0x9f6cx3);
			_0x9f6cxa()
		};
		if (_0x9f6cx1['getStartDate']() > _0x9f6cx8['startDate']) {
			_0x9f6cx4['resolutions']['push']({
				id: 'pin-task'
				, title: _0x9f6cx9.L('Keep the dependency & move the task')
				, getTitleValues: function () {
					return [_0x9f6cx1['getStartDate']()]
				}
				, resolve: function () {
					_0x9f6cx1['pinWithoutPropagation']();
					_0x9f6cxa()
				}
			})
		};
		return _0x9f6cx4
	}
});
Ext.define('Ext.ux.Gantt.constraint.implicit.PotentialConflict', {
	extend: 'Ext.ux.Gantt.constraint.Base'
	, singleton: true
	, requires: ['Ext.String']
	, isSatisfied: function (_0x9f6cx3) {
		var _0x9f6cx5 = true;
		if (this['hasThisConstraintApplied'](_0x9f6cx3)) {
			var _0x9f6cx2 = _0x9f6cx3['getUnprojected'](_0x9f6cx3['constraintTypeField'])
				, _0x9f6cx1 = _0x9f6cx3['getConstraintType']();
			_0x9f6cx5 = !(_0x9f6cx2 != _0x9f6cx1 && this['isConstraintTypeHandled'](_0x9f6cx1))
		};
		return _0x9f6cx5
	}
	, isConstraintTypeHandled: function (_0x9f6cx1) {
		return Boolean(this['getConstraintTypeForReplacement'](_0x9f6cx1))
	}
	, hasThisConstraintApplied: function (_0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx2['getTaskStore'](true);
		return Boolean(_0x9f6cx1 && _0x9f6cx1['scheduleByConstraints'] && _0x9f6cx2['propagating'] && _0x9f6cx2['getIncomingDependencies']()['length'])
	}
	, getConstraintTypeForReplacement: function (_0x9f6cx2) {
		var _0x9f6cx1;
		switch (_0x9f6cx2) {
		case 'startnolaterthan':
			;
		case 'muststarton':
			_0x9f6cx1 = 'startnoearlierthan';
			break;
		case 'finishnolaterthan':
			;
		case 'mustfinishon':
			_0x9f6cx1 = 'finishnoearlierthan';
			break
		};
		return _0x9f6cx1
	}
	, getResolution: function (_0x9f6cxc, _0x9f6cx1) {
		var _0x9f6cx7 = this
			, _0x9f6cx2 = _0x9f6cx7['callParent'](arguments);
		_0x9f6cx2['defaultAction'] = _0x9f6cx2['proceedAction'];
		if (_0x9f6cx7['hasThisConstraintApplied'](_0x9f6cx1)) {
			var _0x9f6cx3 = _0x9f6cx1['getUnprojected'](_0x9f6cx1['constraintTypeField'])
				, _0x9f6cx6 = _0x9f6cx1['getConstraintType']();
			if (_0x9f6cx3 != _0x9f6cx6 && _0x9f6cx7['isConstraintTypeHandled'](_0x9f6cx6)) {
				var _0x9f6cx5 = Ext.ux.Gantt['constraint']['Base']['getConstraintClass'](_0x9f6cx6).L('name')
					, _0x9f6cx4 = _0x9f6cx2['getResolution']('remove-constraint');
				_0x9f6cx2['description'] = Ext['String']['format'](_0x9f6cx7.L('This could result in a scheduling conflict'), _0x9f6cx5, _0x9f6cx1['getName']());
				Ext['apply'](_0x9f6cx4, {
					title: Ext['String']['format'](_0x9f6cx7.L('Remove the constraint'), _0x9f6cx5)
					, resolve: _0x9f6cx2['proceedAction']
				});
				var _0x9f6cx9 = _0x9f6cx7['getConstraintTypeForReplacement'](_0x9f6cx1['getConstraintType']())
					, _0x9f6cx8 = Ext.ux.Gantt['constraint']['Base']['getConstraintClass'](_0x9f6cx9).L('name');
				Ext['Array']['insert'](_0x9f6cx2['resolutions'], Ext['Array']['indexOf'](_0x9f6cx2['resolutions'], _0x9f6cx4), [{
					id: 'replace-constraint'
					, title: Ext['String']['format'](_0x9f6cx7.L('Replace the constraint'), _0x9f6cx8)
					, resolve: function () {
						_0x9f6cx1['setConstraintWithoutPropagation'](_0x9f6cx9);
						_0x9f6cxc()
					}
				}])
			}
		};
		return _0x9f6cx2
	}
});
Ext.define('Ext.ux.Scheduler.patches.CollectionKey', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.util.CollectionKey'
	, minVersion: '6.0.0'
	, maxVersion: '6.5.1'
	, reportUrl: 'https://www.sencha.com/forum/showthread.php?310532-Ext.util.Collection-key-configuration-application-and-cloning-is-broken'
	, obsoleteTestName: 'patches/001_collection_key.t.js'
	, description: ['Ext.util.CollectionKey::clone() is broken due to wrong usage of Ext\'s configuration facility.', 'We relay on the (though) private Ext.data.LocalStore::extraKeys configuration, we use it to define additional', 'unique but complex keys for Assignment and Dependency stores. Upon store filtering such keys are being cloned', 'but due to the broken config key\'s clone() method throws an exception'].join(' ')
	, applyFn: function () {
		var _0x9f6cx1;
		_0x9f6cx1 = Ext['util']['CollectionKey']['prototype']['applyKeyFn'];
		Ext['util']['CollectionKey']['prototype']['applyKeyFn'] = Ext['identityFn'];
		Ext['util']['CollectionKey']['prototype']['updateKeyFn'] = _0x9f6cx1
	}
});
Ext.define('Ext.ux.Scheduler.util.Cache', {
	cache: null
	, constructor: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['cache'] = {};
		_0x9f6cx1['self']['stats'][Ext['getClassName'](_0x9f6cx1)] = _0x9f6cx1['stats'] = {
			hit: 0
			, miss: 0
		}
	}
	, key: function (_0x9f6cx2) {
		var _0x9f6cx1;
		if (_0x9f6cx2 instanceof Ext['data']['Model']) {
			_0x9f6cx1 = _0x9f6cx2['getId']().toString()
		}
		else {
			if (_0x9f6cx2 === undefined || _0x9f6cx2 === null) {
				_0x9f6cx1 = '[ undefined / null ]'
			}
			else {
				_0x9f6cx1 = (_0x9f6cx2).toString()
			}
		};
		return _0x9f6cx1
	}
	, has: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx1 = _0x9f6cx2['key'](_0x9f6cx1);
		return _0x9f6cx2['cache']['hasOwnProperty'](_0x9f6cx1)
	}
	, get: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx3 = this
			, _0x9f6cx1;
		_0x9f6cx2 = _0x9f6cx3['key'](_0x9f6cx2);
		_0x9f6cx1 = _0x9f6cx3['cache']['hasOwnProperty'](_0x9f6cx2) && _0x9f6cx3['cache'][_0x9f6cx2];
		!_0x9f6cx1 && _0x9f6cx5 ? (++_0x9f6cx3['stats']['miss']) : (++_0x9f6cx3['stats']['hit']);
		if (!_0x9f6cx1 && _0x9f6cx5) {
			_0x9f6cx1 = _0x9f6cx5()
		}
		else {
			if (!_0x9f6cx1) {
				_0x9f6cx1 = []
			}
		};
		_0x9f6cx3['cache'][_0x9f6cx2] = _0x9f6cx1;
		return _0x9f6cx1
	}
	, add: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx3 = this
			, _0x9f6cx1 = _0x9f6cx3['key'](_0x9f6cx5);
		if (!_0x9f6cx3['cache']['hasOwnProperty'](_0x9f6cx1)) {
			_0x9f6cx3['cache'][_0x9f6cx1] = _0x9f6cx3['get'](_0x9f6cx5)
		};
		arguments['length'] > 1 && Ext['Array']['include'](_0x9f6cx3['cache'][_0x9f6cx1], _0x9f6cx2);
		return _0x9f6cx3
	}
	, set: function (_0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['key'](_0x9f6cx2);
		_0x9f6cx5['cache'][_0x9f6cx1] = _0x9f6cx3;
		return _0x9f6cx5
	}
	, remove: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		_0x9f6cx2 = _0x9f6cx5['key'](_0x9f6cx2);
		if (_0x9f6cx5['cache']['hasOwnProperty'](_0x9f6cx2)) {
			Ext['Array']['remove'](_0x9f6cx5['cache'][_0x9f6cx2], _0x9f6cx1)
		};
		return _0x9f6cx5
	}
	, move: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx5 = _0x9f6cx2['key'](_0x9f6cx5);
		_0x9f6cx3 = _0x9f6cx2['key'](_0x9f6cx3);
		if (_0x9f6cx5 != _0x9f6cx3 && arguments['length'] >= 3) {
			_0x9f6cx2['remove'](_0x9f6cx5, _0x9f6cx1);
			_0x9f6cx2['add'](_0x9f6cx3, _0x9f6cx1)
		}
		else {
			if (_0x9f6cx5 != _0x9f6cx3 && _0x9f6cx2['cache']['hasOwnProperty'](_0x9f6cx5) && _0x9f6cx2['cache']['hasOwnProperty'](_0x9f6cx3)) {
				_0x9f6cx2['cache'][_0x9f6cx3] = Ext['Array']['union'](_0x9f6cx2['cache'][_0x9f6cx3], _0x9f6cx2['cache'][_0x9f6cx5]);
				_0x9f6cx2['cache'][_0x9f6cx5] = []
			}
			else {
				if (_0x9f6cx5 != _0x9f6cx3 && _0x9f6cx2['cache']['hasOwnProperty'](_0x9f6cx5)) {
					_0x9f6cx2['cache'][_0x9f6cx3] = _0x9f6cx2['cache'][_0x9f6cx5];
					_0x9f6cx2['cache'][_0x9f6cx5] = []
				}
			}
		};
		return _0x9f6cx2
	}
	, clear: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (!arguments['length']) {
			_0x9f6cx2['cache'] = {}
		}
		else {
			_0x9f6cx1 = _0x9f6cx2['key'](_0x9f6cx1);
			if (_0x9f6cx2['cache']['hasOwnProperty'](_0x9f6cx1)) {
				delete _0x9f6cx2['cache'][_0x9f6cx1]
			}
		};
		return _0x9f6cx2
	}
	, uncache: function (_0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1;
		for (_0x9f6cx1 in _0x9f6cx5['cache']) {
			if (_0x9f6cx5['cache']['hasOwnProperty'](_0x9f6cx1)) {
				_0x9f6cx5['cache'][_0x9f6cx1] = Ext['Array']['remove'](_0x9f6cx5['cache'][_0x9f6cx1], _0x9f6cx2)
			}
		};
		return _0x9f6cx5
	}
	, inheritableStatics: {
		stats: {}
	}
});
Ext.define('Ext.ux.Scheduler.data.util.EventAssignmentsCache', {
	extend: 'Ext.ux.Scheduler.util.Cache'
	, requires: ['Ext.data.Model']
	, assignmentStore: null
	, assignmentStoreDetacher: null
	, assignmentStoreFiltersDetacher: null
	, eventStoreDetacher: null
	, constructor: function (_0x9f6cx6) {
		var _0x9f6cx8 = this
			, _0x9f6cx3 = _0x9f6cx6['getEventStore']();
		_0x9f6cx8['callParent']();

		function _0x9f6cxc(_0x9f6cxe, _0x9f6cxb) {
			Ext['Array']['each'](_0x9f6cxb, function (_0x9f6cxd) {
				_0x9f6cx8['add'](_0x9f6cxd['getEventId'](), _0x9f6cxd)
			})
		}

		function _0x9f6cx2(_0x9f6cxe, _0x9f6cxb) {
			Ext['Array']['each'](_0x9f6cxb, function (_0x9f6cxd) {
				_0x9f6cx8['remove'](_0x9f6cxd['getEventId'](), _0x9f6cxd)
			})
		}

		function _0x9f6cx13(_0x9f6cxd, _0x9f6cx11, _0x9f6cxe) {
			var _0x9f6cxf = _0x9f6cx11['eventIdField']
				, _0x9f6cxb = _0x9f6cx11['previous'] && _0x9f6cxf in _0x9f6cx11['previous']
				, _0x9f6cx12 = _0x9f6cxb && _0x9f6cx11['previous'][_0x9f6cxf];
			if (_0x9f6cxb) {
				_0x9f6cx8['move'](_0x9f6cx12, _0x9f6cx11['getEventId'](), _0x9f6cx11)
			}
		}

		function _0x9f6cxa(_0x9f6cxb) {
			_0x9f6cx8['clear']()
		}

		function _0x9f6cx5(_0x9f6cxb, _0x9f6cxe) {
			_0x9f6cx8['clear']();
			_0x9f6cx1(_0x9f6cxe)
		}

		function _0x9f6cx9(_0x9f6cxe, _0x9f6cxd, _0x9f6cxf, _0x9f6cxb) {
			_0x9f6cx8['move'](_0x9f6cxf, _0x9f6cxb)
		}

		function _0x9f6cx4(_0x9f6cxe, _0x9f6cxb) {
			Ext['Array']['each'](_0x9f6cxb, function (_0x9f6cxd) {
				_0x9f6cx8['clear'](_0x9f6cxd)
			})
		}

		function _0x9f6cx7() {
			_0x9f6cx8['clear']()
		}

		function _0x9f6cx1(_0x9f6cxb) {
			Ext['destroy'](_0x9f6cx8['eventStoreDetacher']);
			_0x9f6cx8['eventStoreDetacher'] = _0x9f6cxb && _0x9f6cxb['on']({
				idchanged: _0x9f6cx9
				, remove: _0x9f6cx4
				, cacheresethint: _0x9f6cx7
				, clear: _0x9f6cx7
				, rootchange: _0x9f6cx7
				, priority: 100
				, destroyable: true
			})
		}
		_0x9f6cx8['assignmentStoreDetacher'] = _0x9f6cx6['on']({
			add: _0x9f6cxc
			, remove: _0x9f6cx2
			, update: _0x9f6cx13
			, cacheresethint: _0x9f6cxa
			, clear: _0x9f6cxa
			, eventstorechange: _0x9f6cx5
			, priority: 100
			, destroyable: true
		});
		_0x9f6cx8['assignmentStoreFiltersDetacher'] = _0x9f6cx6['getFilters']()['on']({
			endupdate: _0x9f6cxa
			, priority: 1002
			, destroyable: true
		});
		_0x9f6cx1(_0x9f6cx3);
		_0x9f6cx8['assignmentStore'] = _0x9f6cx6
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		Ext['destroyMembers'](_0x9f6cx1, 'assignmentStoreDetacher', 'assignmentStoreFiltersDetacher', 'eventStoreDetacher');
		_0x9f6cx1['assignmentStore'] = null
	}
	, get: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = this;
		_0x9f6cx1 = _0x9f6cx5['key'](_0x9f6cx1);
		_0x9f6cx2 = _0x9f6cx2 || function () {
			return Ext['Array']['filter'](_0x9f6cx5['assignmentStore']['getRange'](), function (_0x9f6cx3) {
				return _0x9f6cx3['getEventId']() == _0x9f6cx1
			})
		};
		return _0x9f6cx5['callParent']([_0x9f6cx1, _0x9f6cx2])
	}
});
Ext.define('Ext.ux.Scheduler.data.util.ResourceAssignmentsCache', {
	extend: 'Ext.ux.Scheduler.util.Cache'
	, requires: ['Ext.data.Model']
	, assignmentStore: null
	, assignmentStoreDetacher: null
	, eventStoreDetacher: null
	, resourceStoreDetacher: null
	, constructor: function (_0x9f6cx8) {
		var _0x9f6cxc = this
			, _0x9f6cx7 = _0x9f6cx8['getEventStore']()
			, _0x9f6cxb = _0x9f6cx7 && _0x9f6cx7['getResourceStore']();
		_0x9f6cxc['callParent']();

		function _0x9f6cxa(_0x9f6cx12, _0x9f6cxf) {
			Ext['Array']['each'](_0x9f6cxf, function (_0x9f6cx11) {
				_0x9f6cxc['add'](_0x9f6cx11['getResourceId'](), _0x9f6cx11)
			})
		}

		function _0x9f6cx2(_0x9f6cx12, _0x9f6cxf) {
			Ext['Array']['each'](_0x9f6cxf, function (_0x9f6cx11) {
				_0x9f6cxc['remove'](_0x9f6cx11['getResourceId'](), _0x9f6cx11)
			})
		}

		function _0x9f6cxd(_0x9f6cx11, _0x9f6cx17, _0x9f6cx12) {
			var _0x9f6cx14 = _0x9f6cx17['resourceIdField']
				, _0x9f6cx10 = _0x9f6cx17['previous'] && _0x9f6cx14 in _0x9f6cx17['previous']
				, _0x9f6cxf = _0x9f6cx10 && _0x9f6cx17['previous'][_0x9f6cx14];
			if (_0x9f6cx10) {
				_0x9f6cxc['move'](_0x9f6cxf, _0x9f6cx17['getResourceId'](), _0x9f6cx17)
			}
		}

		function _0x9f6cx13(_0x9f6cxf) {
			_0x9f6cxc['clear']()
		}

		function _0x9f6cx5(_0x9f6cxf, _0x9f6cx12) {
			_0x9f6cx1(_0x9f6cx12);
			_0x9f6cx3(_0x9f6cx12 && _0x9f6cx12['getResourceStore']())
		}

		function _0x9f6cxe(_0x9f6cxf, _0x9f6cx12) {
			_0x9f6cxc['clear']();
			_0x9f6cx3(_0x9f6cx12)
		}

		function _0x9f6cx9(_0x9f6cx12, _0x9f6cx11, _0x9f6cx10, _0x9f6cxf) {
			_0x9f6cxc['move'](_0x9f6cx10, _0x9f6cxf)
		}

		function _0x9f6cx6(_0x9f6cxf, _0x9f6cx12) {
			Ext['Array']['each'](_0x9f6cx12, function (_0x9f6cx11) {
				_0x9f6cxc['clear'](_0x9f6cx11)
			})
		}

		function _0x9f6cx4() {
			_0x9f6cxc['clear']()
		}

		function _0x9f6cx1(_0x9f6cxf) {
			Ext['destroy'](_0x9f6cxc['eventStoreDetacher']);
			_0x9f6cxc['eventStoreDetacher'] = _0x9f6cxf && _0x9f6cxf['on']({
				resourcestorechange: _0x9f6cxe
				, priority: 100
				, destroyable: true
			})
		}

		function _0x9f6cx3(_0x9f6cxf) {
			Ext['destroy'](_0x9f6cxc['resourceStoreDetacher']);
			_0x9f6cxc['resourceStoreDetacher'] = _0x9f6cxf && _0x9f6cxf['on']({
				idchanged: _0x9f6cx9
				, remove: _0x9f6cx6
				, clear: _0x9f6cx4
				, cacheresethint: _0x9f6cx4
				, rootchange: _0x9f6cx4
				, priority: 100
				, destroyable: true
			})
		}
		_0x9f6cxc['assignmentStoreDetacher'] = _0x9f6cx8['on']({
			add: _0x9f6cxa
			, remove: _0x9f6cx2
			, update: _0x9f6cxd
			, clear: _0x9f6cx13
			, cacheresethint: _0x9f6cx13
			, eventstorechange: _0x9f6cx5
			, priority: 100
			, destroyable: true
		});
		_0x9f6cxc['assignmentStoreFiltersDetacher'] = _0x9f6cx8['getFilters']()['on']('endupdate', _0x9f6cx13, _0x9f6cxc, {
			priority: 1002
			, destroyable: true
		});
		_0x9f6cx1(_0x9f6cx7);
		_0x9f6cx3(_0x9f6cxb);
		_0x9f6cxc['assignmentStore'] = _0x9f6cx8
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		Ext['destroyMembers'](_0x9f6cx1, 'assignmentStoreDetacher', 'assignmentStoreFiltersDetacher', 'eventStoreDetacher', 'resourceStoreDetacher');
		_0x9f6cx1['assignmentStore'] = null
	}
	, get: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = this;
		_0x9f6cx1 = _0x9f6cx5['key'](_0x9f6cx1);
		_0x9f6cx2 = _0x9f6cx2 || function () {
			return Ext['Array']['filter'](_0x9f6cx5['assignmentStore']['getRange'](), function (_0x9f6cx3) {
				return _0x9f6cx3['getResourceId']() == _0x9f6cx1
			})
		};
		return _0x9f6cx5['callParent']([_0x9f6cx1, _0x9f6cx2])
	}
});
Ext.define('Ext.ux.Scheduler.data.mixin.CacheHintHelper', {
	extend: 'Ext.Mixin'
	, mixinConfig: {
		before: {
			loadRecords: 'loadRecords'
			, removeAll: 'removeAll'
		}
	}
	, loadRecords: function () {
		this['fireEvent']('cacheresethint', this)
	}
	, removeAll: function (_0x9f6cx1) {
		if (_0x9f6cx1) {
			this['fireEvent']('cacheresethint', this)
		}
	}
});
Ext.define('Ext.ux.Scheduler.model.Assignment', {
	extend: 'Ext.ux.Scheduler.model.Customizable'
	, idProperty: 'Id'
	, customizableFields: [{
		name: 'ResourceId'
	}, {
		name: 'EventId'
	}]
	, resourceIdField: 'ResourceId'
	, eventIdField: 'EventId'
	, getInternalId: function () {
		return this['internalId']
	}
	, getAssignmentStore: function () {
		return this['joined'] && this['joined'][0]
	}
	, getEventStore: function () {
		var _0x9f6cx1 = this['getAssignmentStore']();
		return _0x9f6cx1 && _0x9f6cx1['getEventStore']()
	}
	, getResourceStore: function () {
		var _0x9f6cx1 = this['getEventStore']();
		return _0x9f6cx1 && _0x9f6cx1['getResourceStore']()
	}
	, getEvent: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx1 = _0x9f6cx1 || _0x9f6cx2['getEventStore']();
		return _0x9f6cx1 && _0x9f6cx1['getModelById'](_0x9f6cx2['getEventId']())
	}
	, getResource: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx2 = _0x9f6cx2 || _0x9f6cx1['getResourceStore']();
		return _0x9f6cx2 && _0x9f6cx2['getModelById'](_0x9f6cx1['getResourceId']())
	}
	, getEventName: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getEvent'](_0x9f6cx1);
		return _0x9f6cx2 && _0x9f6cx2['getName']() || ''
	}
	, getResourceName: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getResource'](_0x9f6cx1);
		return _0x9f6cx2 && _0x9f6cx2['getName']() || ''
	}
	, isPersistable: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getEvent']()
			, _0x9f6cx5 = _0x9f6cx2['getResource']();
		return _0x9f6cx1 && !_0x9f6cx1['phantom'] && _0x9f6cx5 && !_0x9f6cx5['phantom']
	}
	, fullCopy: function () {
		return this['copy']['apply'](this, arguments)
	}
	, getEventResourceCompositeKey: function () {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['self']['makeAssignmentEventResourceCompositeKey'](_0x9f6cx1['getEventId'](), _0x9f6cx1['getResourceId']())
	}
	, inheritableStatics: {
		makeAssignmentEventResourceCompositeKey: function () {
			var _0x9f6cx1 = [];
			return function (_0x9f6cx2, _0x9f6cx5) {
				_0x9f6cx1['length'] = 0;
				_0x9f6cx1['push']('event(', _0x9f6cx2, ')-resource(', _0x9f6cx5, ')');
				return _0x9f6cx1.join('')
			}
		}()
	}
});
Ext.define('Ext.ux.Scheduler.data.AssignmentStore', {
	extend: 'Ext.data.Store'
	, requires: ['Ext.ux.Scheduler.patches.CollectionKey', 'Ext.ux.Scheduler.data.util.EventAssignmentsCache', 'Ext.ux.Scheduler.data.util.ResourceAssignmentsCache']
	, uses: ['Ext.ux.Scheduler.data.util.EventAssignmentsCache', 'Ext.ux.Scheduler.data.util.ResourceAssignmentsCache', 'Ext.ux.Scheduler.data.util.AssignmentStoreEventResourcesCache', 'Ext.ux.Scheduler.data.util.AssignmentStoreResourceEventsCache']
	, mixins: ['Ext.ux.Scheduler.data.mixin.UniversalModelGetter', 'Ext.ux.Scheduler.data.mixin.CacheHintHelper', 'Robo.data.Store']
	, config: {
		extraKeys: {
			byEventIdResourceId: {
				keyFn: 'getEventResourceCompositeKey'
			}
		}
	}
	, model: 'Ext.ux.Scheduler.model.Assignment'
	, alias: 'store.assignmentstore'
	, storeId: 'assignments'
	, eventResourceCache: null
	, resourceEventsCache: null
	, eventStoreDetacher: null
	, resourceStoreDetacher: null
	, eventStore: null
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['callParent']([_0x9f6cx1]);
		_0x9f6cx2['eventAssignmentsCache'] = _0x9f6cx2['eventAssignmentsCache'] || _0x9f6cx2['createEventAssignmentCache']();
		_0x9f6cx2['resourceAssignmentsCache'] = _0x9f6cx2['resourceAssignmentsCache'] || _0x9f6cx2['createResourceAssignmentCache']()
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		Ext['destroyMembers'](_0x9f6cx1, 'eventResourceCache', 'resourceEventsCache', 'eventAssignmentsCache', 'resourceEventsCache', 'eventStoreDetacher', 'resourceStoreDetacher');
		_0x9f6cx1['callParent']()
	}
	, createEventAssignmentCache: function () {
		return new Ext.ux.Scheduler['data']['util'].EventAssignmentsCache(this)
	}
	, createResourceAssignmentCache: function () {
		return new Ext.ux.Scheduler['data']['util'].ResourceAssignmentsCache(this)
	}
	, createAssignmentStoreEventResourcesCache: function () {
		return new Ext.ux.Scheduler['data']['util'].AssignmentStoreEventResourcesCache(this)
	}
	, createAssignmentStoreResourceEventsCache: function () {
		return new Ext.ux.Scheduler['data']['util'].AssignmentStoreResourceEventsCache(this)
	}
	, getEventStore: function () {
		return this['eventStore']
	}
	, setEventStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = this
			, _0x9f6cx5 = _0x9f6cx2['eventStore'];
		_0x9f6cx2['eventStore'] = _0x9f6cx1 && Ext['StoreMgr']['lookup'](_0x9f6cx1) || null;
		_0x9f6cx2['attachToEventStore'](_0x9f6cx2['eventStore']);
		if ((_0x9f6cx5 || _0x9f6cx1) && _0x9f6cx5 !== _0x9f6cx1) {
			_0x9f6cx2['fireEvent']('eventstorechange', _0x9f6cx2, _0x9f6cx1, _0x9f6cx5)
		}
	}
	, attachToEventStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		Ext['destroy'](_0x9f6cx2['eventStoreDetacher']);
		if (_0x9f6cx1 && _0x9f6cx1['isTreeStore']) {
			_0x9f6cx2['eventStoreDetacher'] = _0x9f6cx1['on']({
				noderemove: _0x9f6cx2['onEventNodeRemove']
				, resourcestorechange: _0x9f6cx2['onEventStoreResourceStoreChange']
				, scope: _0x9f6cx2
				, destroyable: true
				, priority: 200
			})
		}
		else {
			if (_0x9f6cx1) {
				_0x9f6cx2['eventStoreDetacher'] = _0x9f6cx1['on']({
					remove: _0x9f6cx2['onEventRemove']
					, resourcestorechange: _0x9f6cx2['onEventStoreResourceStoreChange']
					, scope: _0x9f6cx2
					, destroyable: true
					, priority: 200
				})
			}
		};
		_0x9f6cx2['attachToResourceStore'](_0x9f6cx1 && _0x9f6cx1['getResourceStore']())
	}
	, attachToResourceStore: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		Ext['destroy'](_0x9f6cx1['resourceStoreDetacher']);
		if (_0x9f6cx2) {
			if (_0x9f6cx2['isTreeStore']) {
				_0x9f6cx1['resourceStoreDetacher'] = _0x9f6cx2['on']({
					noderemove: _0x9f6cx1['onResourceNodeRemove']
					, scope: _0x9f6cx1
					, destroyable: true
					, priority: 200
				})
			}
			else {
				_0x9f6cx1['resourceStoreDetacher'] = _0x9f6cx2['on']({
					remove: _0x9f6cx1['onResourceRemove']
					, scope: _0x9f6cx1
					, destroyable: true
					, priority: 200
				})
			}
		}
	}
	, onEventStoreResourceStoreChange: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5) {
		this['attachToResourceStore'](_0x9f6cx1)
	}
	, onEventRemove: function (_0x9f6cx4, _0x9f6cx3, _0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx7 = this
			, _0x9f6cx1;
		if (!_0x9f6cx2) {
			_0x9f6cx1 = [];
			Ext['Array']['each'](_0x9f6cx3, function (_0x9f6cx6) {
				_0x9f6cx1 = _0x9f6cx1['concat'](_0x9f6cx7['getAssignmentsForEvent'](_0x9f6cx6))
			});
			_0x9f6cx1['length'] && _0x9f6cx7['remove'](_0x9f6cx1)
		}
	}
	, onEventNodeRemove: function (_0x9f6cx5, _0x9f6cx4, _0x9f6cx2) {
		var _0x9f6cx3 = this
			, _0x9f6cx1;
		if (!_0x9f6cx2) {
			_0x9f6cx1 = [];
			_0x9f6cx4['cascadeBy'](function (_0x9f6cx7) {
				_0x9f6cx1 = _0x9f6cx1['concat'](_0x9f6cx3['getAssignmentsForEvent'](_0x9f6cx7))
			});
			_0x9f6cx1['length'] && _0x9f6cx3['remove'](_0x9f6cx1)
		}
	}
	, onResourceRemove: function (_0x9f6cx4, _0x9f6cx7, _0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx3 = this
			, _0x9f6cx1;
		if (!_0x9f6cx2) {
			_0x9f6cx1 = [];
			Ext['Array']['each'](_0x9f6cx7, function (_0x9f6cx6) {
				_0x9f6cx1 = _0x9f6cx1['concat'](_0x9f6cx3['getAssignmentsForResource'](_0x9f6cx6))
			});
			_0x9f6cx1['length'] && _0x9f6cx3['remove'](_0x9f6cx1)
		}
	}
	, onResourceNodeRemove: function (_0x9f6cx3, _0x9f6cx4, _0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1;
		if (!_0x9f6cx2) {
			_0x9f6cx1 = [];
			_0x9f6cx4['cascadeBy'](function (_0x9f6cx7) {
				_0x9f6cx1 = _0x9f6cx1['concat'](_0x9f6cx5['getAssignmentsForResource'](_0x9f6cx7))
			});
			_0x9f6cx1['length'] && _0x9f6cx5['remove'](_0x9f6cx1)
		}
	}
	, mapAssignmentsForEvent: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cx4) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = [];
		_0x9f6cx2 = _0x9f6cx2 || Ext['identityFn'];
		_0x9f6cx4 = _0x9f6cx4 || Ext['returnTrue'];
		if (_0x9f6cx2 !== Ext['identityFn'] || _0x9f6cx4 !== Ext['returnTrue']) {
			Ext['Array']['each'](_0x9f6cx5['eventAssignmentsCache']['get'](_0x9f6cx3), function (_0x9f6cx6) {
				var _0x9f6cx7 = _0x9f6cx2(_0x9f6cx6);
				_0x9f6cx4(_0x9f6cx7) && _0x9f6cx1['push'](_0x9f6cx7)
			})
		}
		else {
			_0x9f6cx1 = _0x9f6cx1['concat'](_0x9f6cx5['eventAssignmentsCache']['get'](_0x9f6cx3))
		};
		return _0x9f6cx1
	}
	, mapAssignmentsForResource: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cx4) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = [];
		_0x9f6cx2 = _0x9f6cx2 || Ext['identityFn'];
		_0x9f6cx4 = _0x9f6cx4 || Ext['returnTrue'];
		if (_0x9f6cx2 !== Ext['identityFn'] || _0x9f6cx4 !== Ext['returnTrue']) {
			Ext['Array']['each'](_0x9f6cx5['resourceAssignmentsCache']['get'](_0x9f6cx3), function (_0x9f6cx6) {
				var _0x9f6cx7 = _0x9f6cx2(_0x9f6cx6);
				_0x9f6cx4(_0x9f6cx7) && _0x9f6cx1['push'](_0x9f6cx7)
			})
		}
		else {
			_0x9f6cx1 = []['concat'](_0x9f6cx5['resourceAssignmentsCache']['get'](_0x9f6cx3))
		};
		return _0x9f6cx1
	}
	, getAssignmentsForEvent: function (_0x9f6cx1) {
		return this['mapAssignmentsForEvent'](_0x9f6cx1)
	}
	, removeAssignmentsForEvent: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['remove'](_0x9f6cx1['getAssignmentsForEvent'](_0x9f6cx2))
	}
	, getAssignmentsForResource: function (_0x9f6cx1) {
		return this['mapAssignmentsForResource'](_0x9f6cx1)
	}
	, removeAssignmentsForResource: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['remove'](_0x9f6cx1['getAssignmentsForResource'](_0x9f6cx2))
	}
	, getResourcesForEvent: function (_0x9f6cx3) {
		var _0x9f6cx5 = this
			, _0x9f6cx1;
		if (_0x9f6cx5['eventResourceCache']) {
			_0x9f6cx1 = _0x9f6cx5['eventResourceCache']['get'](_0x9f6cx3)
		}
		else {
			_0x9f6cx1 = _0x9f6cx5['mapAssignmentsForEvent'](_0x9f6cx3, function _0x9f6cx4(_0x9f6cx7) {
				return _0x9f6cx7['getResource']()
			}, function _0x9f6cx2(_0x9f6cx7) {
				return !!_0x9f6cx7
			})
		};
		return _0x9f6cx1
	}
	, getEventsForResource: function (_0x9f6cx3) {
		var _0x9f6cx5 = this
			, _0x9f6cx1;
		if (_0x9f6cx5['resourceEventsCache']) {
			_0x9f6cx1 = _0x9f6cx5['resourceEventsCache']['get'](_0x9f6cx3)
		}
		else {
			_0x9f6cx1 = _0x9f6cx5['mapAssignmentsForResource'](_0x9f6cx3, function _0x9f6cx4(_0x9f6cx7) {
				return _0x9f6cx7['getEvent']()
			}, function _0x9f6cx2(_0x9f6cx7) {
				return !!_0x9f6cx7
			})
		};
		return _0x9f6cx1
	}
	, assignEventToResource: function (_0x9f6cx5, _0x9f6cx4, _0x9f6cx3) {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = [];
		_0x9f6cx3 = _0x9f6cx3 || Ext['identityFn'];
		var _0x9f6cx7 = Ext['isArray'](_0x9f6cx4) ? _0x9f6cx4 : [_0x9f6cx4];
		Ext['Array']['each'](_0x9f6cx7, function (_0x9f6cx6) {
			if (!_0x9f6cx2['isEventAssignedToResource'](_0x9f6cx5, _0x9f6cx6)) {
				var _0x9f6cx8 = new _0x9f6cx2['model']();
				_0x9f6cx8['setEventId'](_0x9f6cx5 instanceof Ext['data']['Model'] && _0x9f6cx5['getId']() || _0x9f6cx5);
				_0x9f6cx8['setResourceId'](_0x9f6cx6 instanceof Ext['data']['Model'] && _0x9f6cx6['getId']() || _0x9f6cx6);
				_0x9f6cx8 = _0x9f6cx3(_0x9f6cx8);
				_0x9f6cx1['push'](_0x9f6cx8)
			}
		});
		_0x9f6cx2['add'](_0x9f6cx1);
		return _0x9f6cx1
	}
	, unassignEventFromResource: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = this
			, _0x9f6cx3;
		if (!_0x9f6cx5) {
			this['removeAssignmentsForEvent'](_0x9f6cx2)
		}
		else {
			if (_0x9f6cx1['isEventAssignedToResource'](_0x9f6cx2, _0x9f6cx5)) {
				_0x9f6cx3 = _0x9f6cx1['getAssignmentForEventAndResource'](_0x9f6cx2, _0x9f6cx5);
				_0x9f6cx1['remove'](_0x9f6cx3)
			}
		};
		return _0x9f6cx3
	}
	, isEventAssignedToResource: function (_0x9f6cx7, _0x9f6cx6) {
		var _0x9f6cx4 = this
			, _0x9f6cx5 = _0x9f6cx4['getResourcesForEvent'](_0x9f6cx7)
			, _0x9f6cx2 = false
			, _0x9f6cx3, _0x9f6cx1;
		_0x9f6cx6 = _0x9f6cx6 instanceof Ext['data']['Model'] && _0x9f6cx6['getId']() || _0x9f6cx6;
		for (_0x9f6cx3 = 0, _0x9f6cx1 = _0x9f6cx5['length']; !_0x9f6cx2 && _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
			_0x9f6cx2 = _0x9f6cx5[_0x9f6cx3];
			_0x9f6cx2 = _0x9f6cx2['getId']() == _0x9f6cx6
		};
		return _0x9f6cx2
	}
	, getAssignmentForEventAndResource: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = this;
		_0x9f6cx2 = _0x9f6cx2 instanceof Ext['data']['Model'] && _0x9f6cx2['getId']() || _0x9f6cx2;
		_0x9f6cx5 = _0x9f6cx5 instanceof Ext['data']['Model'] && _0x9f6cx5['getId']() || _0x9f6cx5;
		return _0x9f6cx1['byEventIdResourceId']['get'](_0x9f6cx1['model']['makeAssignmentEventResourceCompositeKey'](_0x9f6cx2, _0x9f6cx5))
	}
});
Ext.define('Ext.ux.Gantt.model.Assignment', {
	extend: 'Ext.ux.Scheduler.model.Assignment'
	, uses: ['Ext.ux.Scheduler.util.Date']
	, customizableFields: [{
		name: 'TaskId'
	}, {
		name: 'Units'
		, type: 'float'
		, defaultValue: 100
	}]
	, taskIdField: 'TaskId'
	, eventIdField: 'TaskId'
	, unitsField: 'Units'
	, constructor: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['eventIdField'] = _0x9f6cx1['taskIdField'];
		_0x9f6cx1['callParent']([_0x9f6cx2, _0x9f6cx5])
	}
	, getEventId: function () {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['get'](_0x9f6cx1['taskIdField'])
	}
	, setEventId: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return _0x9f6cx2['set'](_0x9f6cx2['taskIdField'], _0x9f6cx1)
	}
	, getTaskStore: function () {
		return this['store'] && this['store']['getTaskStore']() || null
	}
	, getEventStore: function () {
		return this['getTaskStore']()
	}
	, getUnits: function () {
		var _0x9f6cx1 = this;
		return Math['max'](0, _0x9f6cx1['get'](_0x9f6cx1['unitsField']))
	}
	, setUnits: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx2 < 0 && Ext['Error']['raise']('`Units` value for an assignment can\'t be less than 0');
		_0x9f6cx1['set'](_0x9f6cx1['unitsField'], _0x9f6cx2)
	}
	, getTask: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return _0x9f6cx2['getEvent'](_0x9f6cx1)
	}
	, getTaskName: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['getTask'](_0x9f6cx2);
		return _0x9f6cx1 && _0x9f6cx1['getName']() || ''
	}
	, getEffort: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getTask']()
			, _0x9f6cx3 = 0;
		if (_0x9f6cx1) {
			_0x9f6cx1['forEachAvailabilityIntervalWithResources']({
				startDate: _0x9f6cx1['getStartDate']()
				, endDate: _0x9f6cx1['getEndDate']()
				, resources: [_0x9f6cx2['getResource']()]
			}, function (_0x9f6cx8, _0x9f6cx6, _0x9f6cx7) {
				var _0x9f6cx4, _0x9f6cxc;
				for (_0x9f6cx4 in _0x9f6cx7) {
					_0x9f6cxc = _0x9f6cx7[_0x9f6cx4]['units']
				};
				_0x9f6cx3 += (_0x9f6cx6 - _0x9f6cx8) * _0x9f6cxc / 100
			});
			return _0x9f6cx1['getProjectCalendar']()['convertMSDurationToUnit'](_0x9f6cx3, _0x9f6cx5 || _0x9f6cx1['getEffortUnit']())
		}
	}
	, getCost: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['getResource']();
		if (_0x9f6cx1['getTask']()) {
			return _0x9f6cx2['getRate']() * _0x9f6cx1['getEffort'](_0x9f6cx2['getRateUnit']())
		}
	}
	, getEffortAtDate: function (_0x9f6cx5, _0x9f6cx9) {
		var _0x9f6cx7 = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cx8 = this
			, _0x9f6cx1 = _0x9f6cx8['getTask']()
			, _0x9f6cx2 = _0x9f6cx1 && _0x9f6cx1['getStartDate']()
			, _0x9f6cx4 = _0x9f6cx1 && _0x9f6cx1['getEndDate']()
			, _0x9f6cx3 = _0x9f6cx8['getResource']()
			, _0x9f6cx6 = 0;
		if (_0x9f6cx1 && _0x9f6cx3 && _0x9f6cx2 && _0x9f6cx4) {
			_0x9f6cx5 = _0x9f6cx7['constrain'](_0x9f6cx5, _0x9f6cx2, _0x9f6cx4);
			_0x9f6cx1['forEachAvailabilityIntervalWithResources']({
				startDate: _0x9f6cx2
				, endDate: _0x9f6cx5
				, resources: [_0x9f6cx3]
			}, function (_0x9f6cxe, _0x9f6cxb, _0x9f6cxc) {
				var _0x9f6cx13 = 0;
				for (var _0x9f6cxa in _0x9f6cxc) {
					_0x9f6cx13 = _0x9f6cxc[_0x9f6cxa]['units']
				};
				_0x9f6cx6 += (_0x9f6cxb - _0x9f6cxe) * _0x9f6cx13 / 100
			});
			_0x9f6cx6 = _0x9f6cx1['getCalendar']()['convertMSDurationToUnit'](_0x9f6cx6, _0x9f6cx9 || _0x9f6cx1['getEffortUnit']())
		};
		return _0x9f6cx6
	}
});
Ext.define('Ext.ux.Gantt.data.AssignmentStore', {
	extend: 'Ext.ux.Scheduler.data.AssignmentStore'
	, requires: ['Ext.ux.Gantt.model.Assignment']
	, model: 'Ext.ux.Gantt.model.Assignment'
	, alias: 'store.gantt_assignmentstore'
	, storeId: 'assignments'
	, attachToEventStore: Ext['emptyFn']
	, attachToResourceStore: Ext['emptyFn']
	, getTaskStore: function () {
		return this['getEventStore']()
	}
	, setTaskStore: function (_0x9f6cx1) {
		return this['setEventStore'](_0x9f6cx1)
	}
	, mapAssignmentsForTask: function (_0x9f6cx1, _0x9f6cx2, _0x9f6cx5) {
		return this['mapAssignmentsForEvent'](_0x9f6cx1, _0x9f6cx2, _0x9f6cx5)
	}
	, getAssignmentsForTask: function (_0x9f6cx1) {
		return this['getAssignmentsForEvent'](_0x9f6cx1)
	}
	, removeAssignmentsForTask: function (_0x9f6cx1) {
		return this['removeAssignmentsForEvent'](_0x9f6cx1)
	}
	, getResourcesForTask: function (_0x9f6cx1) {
		return this['getResourcesForEvent'](_0x9f6cx1)
	}
	, getTasksForResource: function (_0x9f6cx1) {
		return this['getEventsForResource'](_0x9f6cx1)
	}
	, assignTaskToResource: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return this['assignEventToResource'](_0x9f6cx2, _0x9f6cx5, function (_0x9f6cx3) {
			_0x9f6cx3['setUnits'](_0x9f6cx1);
			return _0x9f6cx3
		})
	}
	, unassignTaskFromResource: function (_0x9f6cx1, _0x9f6cx2) {
		return this['unassignEventFromResource'](_0x9f6cx1, _0x9f6cx2)
	}
	, isTaskAssignedToResource: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx2) {
		return this['isEventAssignedToResource'](_0x9f6cx1, _0x9f6cx5, _0x9f6cx2)
	}
	, getAssignmentForTaskAndResource: function (_0x9f6cx1, _0x9f6cx2) {
		return this['getAssignmentForEventAndResource'](_0x9f6cx1, _0x9f6cx2)
	}
});
Ext.define('Ext.ux.Gantt.data.CalendarManager', {
	extend: 'Ext.data.TreeStore'
	, requires: ['Ext.ux.Gantt.data.Calendar']
	, mixins: ['Robo.data.Store', 'Ext.ux.Scheduler.data.mixin.UniversalModelGetter']
	, model: 'Ext.ux.Gantt.model.Calendar'
	, alias: 'store.calendarmanager'
	, storeId: 'calendars'
	, calendarClass: 'Ext.ux.Gantt.data.Calendar'
	, calendarConfig: null
	, projectCalendar: null
	, myListeners: null
	, proxy: 'memory'
	, constructor: function (_0x9f6cx2) {
		this['callParent'](arguments);
		this['myListeners'] = this['on']({
			idchanged: this['onChangeId']
			, rootchange: this['onNewRoot']
			, nodeappend: this['onNewNode']
			, nodeinsert: this['onNewNode']
			, noderemove: this['onRemoveNode']
			, destroyable: true
			, scope: this
		});
		var _0x9f6cx1 = this['getRoot']();
		if (_0x9f6cx1) {
			this['bindCalendars'](_0x9f6cx1)
		}
		else {
			this['setRoot']({
				expanded: true
			})
		}
	}
	, destroy: function () {
		this['getRoot']()['cascadeBy'](function (_0x9f6cx1) {
			if (_0x9f6cx1['calendar'] instanceof Ext.ux.Gantt['data']['Calendar']) {
				_0x9f6cx1['calendar']['destroy']()
			}
		});
		this['myListeners']['destroy']();
		this['callParent'](arguments)
	}
	, onChangeId: function (_0x9f6cx1, _0x9f6cx3, _0x9f6cx7, _0x9f6cx5, _0x9f6cx2) {
		if (!(_0x9f6cx3 instanceof Ext.ux.Gantt['model']['Calendar'])) {
			return
		};
		var _0x9f6cx4 = this['getCalendar'](_0x9f6cx7 || _0x9f6cx2);
		_0x9f6cx4['setCalendarId'](_0x9f6cx5)
	}
	, onNewNode: function (_0x9f6cx1, _0x9f6cx5) {
		this['bindCalendars'](_0x9f6cx5);
		if (_0x9f6cx5 !== this['getRoot']()) {
			this['fixCalendarParent'](_0x9f6cx5)
		};
		var _0x9f6cx2 = this;
		_0x9f6cx5['cascadeBy'](function (_0x9f6cx3) {
			_0x9f6cx3['setCalendarManager'](_0x9f6cx2)
		})
	}
	, onNewRoot: function (_0x9f6cx1) {
		this['onNewNode'](null, _0x9f6cx1)
	}
	, onRemoveNode: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (!_0x9f6cx1) {
			var _0x9f6cx3 = _0x9f6cx5['calendar'];
			if (_0x9f6cx3) {
				this['unbindCalendarEvents'](_0x9f6cx3);
				if (!this['__loading']) {
					_0x9f6cx3['destroy']();
					Ext['data']['StoreManager']['unregister'](_0x9f6cx3)
				};
				_0x9f6cx5['setCalendarManager'](null)
			}
		}
	}
	, suspendCalendarsEvents: function (_0x9f6cx1) {
		this['getRoot']()['cascadeBy'](function (_0x9f6cx2) {
			var _0x9f6cx3 = _0x9f6cx2['getCalendar']();
			if (_0x9f6cx3) {
				_0x9f6cx3['suspendEvents'](_0x9f6cx1)
			}
		}, this)
	}
	, resumeCalendarsEvents: function () {
		this['getRoot']()['cascadeBy'](function (_0x9f6cx1) {
			var _0x9f6cx2 = _0x9f6cx1['getCalendar']();
			if (_0x9f6cx2) {
				_0x9f6cx2['resumeEvents']()
			}
		}, this)
	}
	, getCalendarClass: function () {
		return this['calendarClass']
	}
	, getProjectCalendar: function () {
		return this['projectCalendar']
	}
	, setProjectCalendar: function (_0x9f6cx1) {
		if (this['settingProjectCalendar']) {
			return
		};
		if (typeof _0x9f6cx1 !== 'object') {
			_0x9f6cx1 = this['getCalendar'](_0x9f6cx1) || Ext.ux.Gantt['data']['Calendar']['getCalendar'](_0x9f6cx1)
		};
		if (!_0x9f6cx1 || this['getProjectCalendar']() === _0x9f6cx1) {
			return
		};
		this['settingProjectCalendar'] = true;
		this['projectCalendar'] = _0x9f6cx1;
		this['fireEvent']('projectcalendarset', this, _0x9f6cx1);
		this['settingProjectCalendar'] = false
	}
	, getCalendar: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['getModelById'](_0x9f6cx2);
		return _0x9f6cx1 && _0x9f6cx1['getCalendar']()
	}
	, getNodeByCalendar: function (_0x9f6cx2) {
		if (!_0x9f6cx2) {
			return this['getRoot']()
		};
		var _0x9f6cx1 = this['getModelById'](_0x9f6cx2['calendarId']);
		if (!_0x9f6cx1) {
			this['getRoot']()['cascadeBy'](function (_0x9f6cx3) {
				var _0x9f6cx4 = _0x9f6cx3['getCalendar']();
				if (_0x9f6cx4 === _0x9f6cx2) {
					_0x9f6cx1 = _0x9f6cx3;
					return false
				}
			}, this)
		};
		return _0x9f6cx1
	}
	, onParentChange: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this['getNodeByCalendar'](_0x9f6cx3);
		if (_0x9f6cx5 && !_0x9f6cx5['syncingCalendarParent']) {
			this['fixNodeParent'](_0x9f6cx5)
		}
	}
	, bindCalendarEvents: function (_0x9f6cx1) {
		this['relayEvents'](_0x9f6cx1, ['load'], 'calendar');
		this['relayEvents'](_0x9f6cx1, ['add', 'update', 'remove', 'bulkremove'], 'day');
		this['relayEvents'](_0x9f6cx1, ['calendarchange']);
		_0x9f6cx1['on']('parentchange', this['onParentChange'], this);
		this['on']({
			dayadd: this['onDayAdd']
			, dayupdate: this['onDayUpdate']
			, dayremove: this['onDayRemove']
			, scope: this
		})
	}
	, unbindCalendarEvents: function (_0x9f6cx1) {
		this['un']({
			dayadd: this['onDayAdd']
			, dayupdate: this['onDayUpdate']
			, dayremove: this['onDayRemove']
			, scope: this
		});
		_0x9f6cx1 && _0x9f6cx1['un']({
			parentchange: this['onParentChange']
			, scope: this
		})
	}
	, onDayAdd: function (_0x9f6cx2, _0x9f6cx1) {
		this['getModelById'](_0x9f6cx2['getCalendarId']())['dirty'] = true
	}
	, onDayUpdate: function (_0x9f6cx2, _0x9f6cx1) {
		this['getModelById'](_0x9f6cx2['getCalendarId']())['dirty'] = true
	}
	, onDayRemove: function (_0x9f6cx2, _0x9f6cx1) {
		this['getModelById'](_0x9f6cx2['getCalendarId']())['dirty'] = true
	}
	, fixCalendarParent: function (_0x9f6cx2) {
		if (_0x9f6cx2['syncingCalendarParent']) {
			return
		};
		var _0x9f6cx1 = _0x9f6cx2['parentNode']['getCalendar']()
			, _0x9f6cx5 = _0x9f6cx2['getCalendar']();
		if (_0x9f6cx1 !== _0x9f6cx5['parent']) {
			_0x9f6cx2['syncingCalendarParent'] = true;
			_0x9f6cx5['setParent'](_0x9f6cx1);
			_0x9f6cx2['syncingCalendarParent'] = false
		}
	}
	, fixNodeParent: function (_0x9f6cx3) {
		var _0x9f6cx1 = _0x9f6cx3['parentNode']['getCalendar']()
			, _0x9f6cx2 = _0x9f6cx3['getCalendar']()['parent'];
		if (_0x9f6cx1 !== _0x9f6cx2) {
			var _0x9f6cx5 = this['getNodeByCalendar'](_0x9f6cx2);
			_0x9f6cx5 && _0x9f6cx5['appendChild'](_0x9f6cx3)
		}
	}
	, bindCalendar: function (_0x9f6cx2) {
		if (!_0x9f6cx2 || this['getRoot']() === _0x9f6cx2) {
			return
		};
		var _0x9f6cx4 = _0x9f6cx2['getCalendar']();
		var _0x9f6cx6 = _0x9f6cx2['getDays']();
		var _0x9f6cx7 = _0x9f6cx2['getId']() || _0x9f6cx2['internalId'];
		_0x9f6cx6 = Ext['isArray'](_0x9f6cx6) && _0x9f6cx6;
		if (!_0x9f6cx4 || _0x9f6cx6) {
			if (!_0x9f6cx4) {
				_0x9f6cx4 = Ext.ux.Gantt['data']['Calendar']['getCalendar'](_0x9f6cx7)
			};
			if (!_0x9f6cx4) {
				var _0x9f6cx5 = _0x9f6cx2['parentNode'] && _0x9f6cx2['parentNode']['getCalendar']();
				var _0x9f6cx3 = Ext['ClassManager']['get'](_0x9f6cx2['getCalendarClass']() || this['calendarClass']);
				var _0x9f6cx1 = Ext['applyIf'](_0x9f6cx2['getCalendarConfig'](), {
					data: _0x9f6cx6
					, parent: _0x9f6cx5
				});
				_0x9f6cx4 = Ext['create'](_0x9f6cx3, Ext['apply'](_0x9f6cx1, this['calendarConfig']))
			};
			_0x9f6cx2['setCalendar'](_0x9f6cx4);
			this['bindCalendarEvents'](_0x9f6cx4)
		}
		else {
			if (!this['getCalendar'](_0x9f6cx4['calendarId'])) {
				this['bindCalendarEvents'](_0x9f6cx4)
			}
		};
		this['fireEvent']('calendarbound', this, _0x9f6cx4, _0x9f6cx2)
	}
	, unbindCalendar: function (_0x9f6cx1) {
		if (!_0x9f6cx1 || this['getRoot']() === _0x9f6cx1) {
			return
		};
		var _0x9f6cx2 = _0x9f6cx1['getCalendar']();
		if (!_0x9f6cx2) {
			return
		};
		this['unbindCalendarEvents'](_0x9f6cx2);
		this['fireEvent']('calendarunbound', this, _0x9f6cx2, _0x9f6cx1)
	}
	, bindCalendars: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		if (_0x9f6cx2) {
			Ext['Array']['each']([]['concat'](_0x9f6cx2), function (_0x9f6cx5) {
				_0x9f6cx5['cascadeBy'](_0x9f6cx1['bindCalendar'], _0x9f6cx1)
			})
		}
	}
	, unbindCalendars: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		if (_0x9f6cx2) {
			Ext['Array']['each']([]['concat'](_0x9f6cx2), function (_0x9f6cx5) {
				_0x9f6cx5['cascadeBy'](_0x9f6cx1['unbindCalendar'], _0x9f6cx1)
			})
		}
	}
});
Ext.define('Ext.ux.Scheduler.crud.AbstractManager', {
	requires: ['Ext.data.StoreManager']
	, mixins: {
		observable: 'Ext.util.Observable'
	}
	, revision: null
	, stores: null
	, storeIdProperty: 'storeId'
	, filterParam: 'filter'
	, storesIndex: null
	, activeRequests: null
	, delayedSyncs: null
	, transport: null
	, trackResponseType: false
	, phantomIdField: '$PhantomId'
	, autoLoad: false
	, autoSyncTimeout: 100
	, autoSync: false
	, resetIdsBeforeSync: true
	, syncApplySequence: null
	, writeAllFields: false
	, destroyed: false
	, ignoreUpdates: 0
	, loaded: false
	, createMissingRecords: false
	, autoSyncTimerId: null
	, applyingLoadResponse: false
	, applyingSyncResponse: false
	, constructor: function (_0x9f6cx2) {
		_0x9f6cx2 = _0x9f6cx2 || {};
		this['mixins']['observable']['constructor']['call'](this, _0x9f6cx2);
		this['activeRequests'] = {};
		this['delayedSyncs'] = [];
		this['transport'] = _0x9f6cx2['transport'] || this['transport'] || {};
		var _0x9f6cx1 = _0x9f6cx2['stores'] || this['stores'];
		this['stores'] = [];
		this['addStore'](_0x9f6cx1);
		var _0x9f6cx5 = _0x9f6cx2['syncApplySequence'] || this['syncApplySequence'];
		if (_0x9f6cx5) {
			this['syncApplySequence'] = null;
			this['addStoreToApplySequence'](_0x9f6cx5)
		};
		if (this['autoLoad']) {
			this['load']()
		}
	}
	, updateStoreIndex: function () {
		var _0x9f6cx2 = {};
		for (var _0x9f6cx3 = 0, _0x9f6cx1 = this['stores']['length']; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
			var _0x9f6cx5 = this['stores'][_0x9f6cx3];
			if (_0x9f6cx5['storeId']) {
				_0x9f6cx2[_0x9f6cx5['storeId']] = this['stores'][_0x9f6cx3]
			}
		};
		this['storesIndex'] = _0x9f6cx2
	}
	, getStoreDescriptor: function (_0x9f6cx2) {
		if (!_0x9f6cx2) {
			return
		};
		if (_0x9f6cx2['isStore']) {
			for (var _0x9f6cx5 = 0, _0x9f6cx1 = this['stores']['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
				if (this['stores'][_0x9f6cx5]['store'] === _0x9f6cx2) {
					return this['stores'][_0x9f6cx5]
				}
			}
		}
		else {
			if (typeof _0x9f6cx2 == 'object') {
				return this['storesIndex'][_0x9f6cx2['storeId']]
			}
			else {
				return this['storesIndex'][_0x9f6cx2] || this['getStoreDescriptor'](Ext['data']['StoreManager']['get'](_0x9f6cx2))
			}
		}
	}
	, getStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getStoreDescriptor'](_0x9f6cx1);
		return _0x9f6cx2 && _0x9f6cx2['store']
	}
	, forEachStore: function (_0x9f6cx4, _0x9f6cx3) {
		if (!_0x9f6cx4) {
			return
		};
		var _0x9f6cx2 = this['stores'];
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx2['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			if (_0x9f6cx4['call'](_0x9f6cx3 || this, _0x9f6cx2[_0x9f6cx5]['store'], _0x9f6cx2[_0x9f6cx5]['storeId'], _0x9f6cx2[_0x9f6cx5]) === false) {
				break
			}
		}
	}
	, addStore: function (_0x9f6cxf, _0x9f6cx8, _0x9f6cx1) {
		if (!_0x9f6cxf) {
			return
		};
		if (!Ext['isArray'](_0x9f6cxf)) {
			_0x9f6cxf = [_0x9f6cxf]
		};
		var _0x9f6cx7 = [];
		for (var _0x9f6cx6 = 0, _0x9f6cx5 = _0x9f6cxf['length']; _0x9f6cx6 < _0x9f6cx5; _0x9f6cx6++) {
			var _0x9f6cxd = _0x9f6cxf[_0x9f6cx6];
			if (_0x9f6cxd['isStore']) {
				_0x9f6cxd = {
					store: _0x9f6cxd
				}
			}
			else {
				if (typeof _0x9f6cxd == 'object') {
					if (_0x9f6cxd['stores']) {
						if (!Ext['isArray'](_0x9f6cxd['stores'])) {
							_0x9f6cxd['stores'] = [_0x9f6cxd['stores']]
						};
						for (var _0x9f6cx3 = 0, _0x9f6cx2 = _0x9f6cxd['stores']['length']; _0x9f6cx3 < _0x9f6cx2; _0x9f6cx3++) {
							var _0x9f6cxa = _0x9f6cxd['stores'][_0x9f6cx3]
								, _0x9f6cx4 = _0x9f6cxa;
							if ('string' === typeof _0x9f6cxa) {
								_0x9f6cx4 = {
									storeId: _0x9f6cxa
								}
							};
							_0x9f6cx4['masterStoreInfo'] = _0x9f6cxd;
							_0x9f6cxd['stores'][_0x9f6cx3] = _0x9f6cx4
						}
					}
				}
				else {
					_0x9f6cxd = {
						store: Ext['data']['StoreManager']['get'](_0x9f6cxd)
					}
				}
			};
			_0x9f6cx7['push'](this['fillStoreDescriptor'](_0x9f6cxd));
			if (_0x9f6cxd['store']['setCrudManager']) {
				_0x9f6cxd['store']['setCrudManager'](this)
			}
			else {
				_0x9f6cxd['store']['crudManager'] = this
			};
			if (_0x9f6cxd['store']['isTreeStore']) {
				_0x9f6cxd['store']['setProxy']({
					type: 'memory'
				})
			};
			_0x9f6cxd['store']['setAsynchronousLoad'](false);
			this['bindStoreListeners'](_0x9f6cxd['store'])
		};
		if (typeof _0x9f6cx8 === 'undefined') {
			this['stores']['push']['apply'](this['stores'], _0x9f6cx7)
		}
		else {
			var _0x9f6cxb = _0x9f6cx8;
			if (_0x9f6cx1) {
				if (_0x9f6cx1['isStore'] || typeof _0x9f6cx1 !== 'object') {
					_0x9f6cx1 = this['getStoreDescriptor'](_0x9f6cx1)
				};
				_0x9f6cxb += Ext['Array']['indexOf'](this['stores'], _0x9f6cx1)
			};
			this['stores']['splice']['apply'](this['stores'], []['concat']([_0x9f6cxb, 0], _0x9f6cx7))
		};
		this['updateStoreIndex']()
	}
	, bindStoreListeners: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = {
			update: this['onStoreUpdate']
			, clear: this['onStoreChange']
			, scope: this
		};
		if (_0x9f6cx2['isTreeStore']) {
			Ext['apply'](_0x9f6cx5, {
				nodeappend: this['onTreeStoreInsertOrAppend']
				, nodeinsert: this['onTreeStoreInsertOrAppend']
				, noderemove: this['onNodeRemove']
			})
		}
		else {
			Ext['apply'](_0x9f6cx5, {
				add: this['onStoreChange']
				, remove: this['onStoreChange']
			})
		};
		if (_0x9f6cx1) {
			this['mun'](_0x9f6cx2, _0x9f6cx5)
		}
		else {
			this['mon'](_0x9f6cx2, _0x9f6cx5)
		}
	}
	, unbindStoreListeners: function (_0x9f6cx1) {
		this['bindStoreListeners'](_0x9f6cx1, true)
	}
	, fillStoreDescriptor: function (_0x9f6cx3) {
		var _0x9f6cx1 = _0x9f6cx3['store']
			, _0x9f6cx5 = _0x9f6cx1['storeIdProperty'] || this['storeIdProperty']
			, _0x9f6cx2 = _0x9f6cx1['getModel'] && _0x9f6cx1['getModel']() || _0x9f6cx1['model'];
		_0x9f6cx2 = _0x9f6cx2 && _0x9f6cx2['prototype'];
		Ext['applyIf'](_0x9f6cx3, {
			storeId: _0x9f6cx1[_0x9f6cx5]
			, phantomIdField: _0x9f6cx2 && _0x9f6cx2['phantomIdField']
			, idProperty: _0x9f6cx2 && _0x9f6cx2['idProperty']
			, writeAllFields: _0x9f6cx1['writeAllFields']
		});
		return _0x9f6cx3
	}
	, removeStore: function (_0x9f6cx2) {
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = this['stores']['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			var _0x9f6cx3 = this['stores'][_0x9f6cx5];
			if (_0x9f6cx3 === _0x9f6cx2 || _0x9f6cx3['store'] === _0x9f6cx2 || _0x9f6cx3['storeId'] === _0x9f6cx2) {
				this['unbindStoreListeners'](_0x9f6cx3['store']);
				delete this['storesIndex'][_0x9f6cx3['storeId']];
				this['stores']['splice'](_0x9f6cx5, 1);
				if (this['syncApplySequence']) {
					this['removeStoreFromApplySequence'](_0x9f6cx2)
				};
				break
			}
		}
	}
	, addStoreToApplySequence: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx4) {
		if (!_0x9f6cx5) {
			return
		};
		if (!Ext['isArray'](_0x9f6cx5)) {
			_0x9f6cx5 = [_0x9f6cx5]
		};
		var _0x9f6cx6 = [];
		for (var _0x9f6cx3 = 0, _0x9f6cx2 = _0x9f6cx5['length']; _0x9f6cx3 < _0x9f6cx2; _0x9f6cx3++) {
			var _0x9f6cx7 = this['getStoreDescriptor'](_0x9f6cx5[_0x9f6cx3]);
			if (_0x9f6cx7) {
				_0x9f6cx6['push'](_0x9f6cx7)
			}
		};
		if (!this['syncApplySequence']) {
			this['syncApplySequence'] = []
		};
		if (typeof _0x9f6cx1 === 'undefined') {
			this['syncApplySequence']['push']['apply'](this['syncApplySequence'], _0x9f6cx6)
		}
		else {
			var _0x9f6cx8 = _0x9f6cx1;
			if (_0x9f6cx4) {
				if (_0x9f6cx4['isStore'] || typeof _0x9f6cx4 !== 'object') {
					_0x9f6cx4 = this['getStoreDescriptor'](_0x9f6cx4)
				};
				_0x9f6cx8 += Ext['Array']['indexOf'](this['syncApplySequence'], _0x9f6cx4)
			};
			this['syncApplySequence']['splice']['apply'](this['syncApplySequence'], []['concat']([_0x9f6cx8, 0], _0x9f6cx6))
		}
	}
	, removeStoreFromApplySequence: function (_0x9f6cx2) {
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = this['syncApplySequence']['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			var _0x9f6cx3 = this['syncApplySequence'][_0x9f6cx5];
			if (_0x9f6cx3 === _0x9f6cx2 || _0x9f6cx3['store'] === _0x9f6cx2 || _0x9f6cx3['storeId'] === _0x9f6cx2) {
				this['syncApplySequence']['splice'](_0x9f6cx5, 1);
				break
			}
		}
	}
	, onNodeRemove: function (_0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx1 && _0x9f6cx1['getTreeStore']();
		_0x9f6cx2 && _0x9f6cx2['on']('endupdate', this['onStoreChange'], this, {
			single: true
		})
	}
	, onStoreUpdate: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx3, _0x9f6cx2) {
		if ((!_0x9f6cx4['isTreeStore'] || _0x9f6cx5 !== _0x9f6cx4['getRoot']())) {
			var _0x9f6cx1 = _0x9f6cx2 && _0x9f6cx2['length'] === 1 && _0x9f6cx5['getField'](_0x9f6cx2[0]) && !_0x9f6cx5['getField'](_0x9f6cx2[0])['persist'];
			if (!_0x9f6cx1) {
				this['onStoreChange']()
			}
		}
	}
	, onTreeStoreInsertOrAppend: function (_0x9f6cx1, _0x9f6cx2) {
		if (!_0x9f6cx2['isRoot']()) {
			this['onStoreChange']()
		}
	}
	, suspendChangesTracking: function () {
		this['ignoreUpdates']++
	}
	, resumeChangesTracking: function (_0x9f6cx1) {
		this['ignoreUpdates']--;
		_0x9f6cx1 && this['onStoreChange']()
	}
	, onStoreChange: function () {
		if (this['ignoreUpdates']) {
			return
		};
		var _0x9f6cx1 = this;
		if (this['hasChanges']()) {
			this['fireEvent']('haschanges', this);
			if (this['autoSync']) {
				if (!this['autoSyncTimerId']) {
					this['autoSyncTimerId'] = setTimeout(function () {
						_0x9f6cx1['autoSyncTimerId'] = null;
						_0x9f6cx1['sync']()
					}, this['autoSyncTimeout'])
				}
			}
		}
		else {
			this['fireEvent']('nochanges', this)
		}
	}
	, hasChanges: function (_0x9f6cx2) {
		var _0x9f6cx5;
		if (_0x9f6cx2) {
			_0x9f6cx5 = this['getStore'](_0x9f6cx2);
			if (!_0x9f6cx5) {
				return false
			};
			return this['isStoreDirty'](_0x9f6cx5)
		};
		for (var _0x9f6cx3 = 0, _0x9f6cx1 = this['stores']['length']; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
			if (this['isStoreDirty'](this['stores'][_0x9f6cx3]['store'])) {
				return true
			}
		};
		return false
	}
	, isStoreDirty: function (_0x9f6cx3) {
		if (_0x9f6cx3['getRemovedRecords']()['length']) {
			return true
		};
		if (_0x9f6cx3['isTreeStore']) {
			for (var _0x9f6cx7 in _0x9f6cx3['byIdMap']) {
				var _0x9f6cx2 = _0x9f6cx3['byIdMap'][_0x9f6cx7];
				if (_0x9f6cx2['dirty'] === true && (!_0x9f6cx2['get']('root') || Ext['Object']['getKeys'](_0x9f6cx2['modified'])['length'] !== 1 || !('expanded' in _0x9f6cx2['modified']))) {
					return true
				}
				else {
					if (!_0x9f6cx2['get']('root') && _0x9f6cx2['phantom'] && _0x9f6cx2['isValid']()) {
						return true
					}
				}
			}
		}
		else {
			var _0x9f6cx5 = _0x9f6cx3['getData']()['items'];
			for (var _0x9f6cx4 = 0, _0x9f6cx1 = _0x9f6cx5['length']; _0x9f6cx4 < _0x9f6cx1; _0x9f6cx4++) {
				if (_0x9f6cx5[_0x9f6cx4]['dirty'] || _0x9f6cx5[_0x9f6cx4]['phantom']) {
					return true
				}
			}
		};
		return false
	}
	, getLoadPackage: function (_0x9f6cxe) {
		var _0x9f6cxc = {
			type: 'load'
			, requestId: this['getRequestId']()
			, stores: []
		};
		var _0x9f6cxb = this['stores']
			, _0x9f6cx3 = _0x9f6cxc['stores'];
		for (var _0x9f6cx6 = 0, _0x9f6cx4 = _0x9f6cxb['length']; _0x9f6cx6 < _0x9f6cx4; _0x9f6cx6++) {
			var _0x9f6cxa = _0x9f6cxb[_0x9f6cx6]
				, _0x9f6cx2 = _0x9f6cxa['filterParam'] || _0x9f6cxa['store']['filterParam'] || this['filterParam']
				, _0x9f6cx1 = _0x9f6cxe && _0x9f6cxe[_0x9f6cxa['storeId']]
				, _0x9f6cx8 = _0x9f6cxa['pageSize'] || _0x9f6cxa['store']['pageSize'];
			if (_0x9f6cxa['store']['remoteFilter'] && _0x9f6cx2) {
				_0x9f6cx1 = _0x9f6cx1 || {};
				var _0x9f6cx5 = [];
				_0x9f6cxa['store']['getFilters']()['each'](function (_0x9f6cx9) {
					_0x9f6cx5['push'](_0x9f6cx9['serialize']())
				});
				_0x9f6cx1[_0x9f6cx2] = _0x9f6cx5
			};
			if (_0x9f6cx1 || _0x9f6cx8) {
				var _0x9f6cx7 = Ext['apply']({
					storeId: _0x9f6cxa['storeId']
					, page: 1
					, pageSize: _0x9f6cx8
				}, _0x9f6cx1);
				_0x9f6cxb[_0x9f6cx6]['currentPage'] = _0x9f6cx7['page'];
				_0x9f6cx3['push'](_0x9f6cx7)
			}
			else {
				_0x9f6cx3['push'](_0x9f6cxa['storeId'])
			}
		};
		return _0x9f6cxc
	}
	, prepareAdded: function (_0x9f6cx8, _0x9f6cxb, _0x9f6cxa) {
		var _0x9f6cxd = [];
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx8['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			var _0x9f6cx3 = _0x9f6cx8[_0x9f6cx5]
				, _0x9f6cx2 = {}
				, _0x9f6cx4 = _0x9f6cx3['getFields']();
			if (!_0x9f6cx2['hasOwnProperty'](_0x9f6cxb)) {
				_0x9f6cx2[_0x9f6cxb] = _0x9f6cx3['getId']()
			};
			for (var _0x9f6cx6 = 0, _0x9f6cxe = _0x9f6cx4['length']; _0x9f6cx6 < _0x9f6cxe; _0x9f6cx6++) {
				var _0x9f6cxc = _0x9f6cx4[_0x9f6cx6];
				if (_0x9f6cxc) {
					if (_0x9f6cxc['persist'] && (_0x9f6cx3['data']['hasOwnProperty'](_0x9f6cxc['name']) || _0x9f6cxc['critical'])) {
						if (_0x9f6cxc['serialize']) {
							_0x9f6cx2[_0x9f6cxc['name']] = _0x9f6cxc['serialize'](_0x9f6cx3['data'][_0x9f6cxc['name']], _0x9f6cx3)
						}
						else {
							_0x9f6cx2[_0x9f6cxc['name']] = _0x9f6cx3['data'][_0x9f6cxc['name']]
						}
					}
				}
			};
			if (this['resetIdsBeforeSync']) {
				delete _0x9f6cx2[_0x9f6cx3['idProperty']]
			};
			if (_0x9f6cxa) {
				this['processSubStores'](_0x9f6cx3, _0x9f6cx2, _0x9f6cxa)
			};
			_0x9f6cxd['push'](_0x9f6cx2)
		};
		return _0x9f6cxd
	}
	, prepareUpdated: function (_0x9f6cxb, _0x9f6cxf, _0x9f6cxd) {
		var _0x9f6cx12 = []
			, _0x9f6cx2 = _0x9f6cxd['writeAllFields'] || (_0x9f6cxd['writeAllFields'] !== false && this['writeAllFields'])
			, _0x9f6cx4, _0x9f6cxe;
		for (var _0x9f6cx6 = 0, _0x9f6cx5 = _0x9f6cxb['length']; _0x9f6cx6 < _0x9f6cx5; _0x9f6cx6++) {
			var _0x9f6cx8 = _0x9f6cxb[_0x9f6cx6]
				, _0x9f6cxa;
			if (_0x9f6cx2) {
				_0x9f6cx4 = _0x9f6cx8['getData']();
				_0x9f6cx4[_0x9f6cx8['idProperty']] = _0x9f6cx8['getId']();
				for (_0x9f6cxa in _0x9f6cx4) {
					_0x9f6cxe = _0x9f6cx8['getField'](_0x9f6cxa);
					if (!_0x9f6cxe || !_0x9f6cxe['persist'] && !_0x9f6cxe['critical']) {
						delete _0x9f6cx4[_0x9f6cxa]
					}
					else {
						if (_0x9f6cxe['serialize']) {
							_0x9f6cx4[_0x9f6cxa] = _0x9f6cxe['serialize'](_0x9f6cx4[_0x9f6cxa], _0x9f6cx8)
						}
						else {
							_0x9f6cx4[_0x9f6cxa] = _0x9f6cx8['get'](_0x9f6cxa)
						}
					}
				}
			}
			else {
				_0x9f6cx4 = _0x9f6cx8['getChanges']();
				_0x9f6cx4[_0x9f6cx8['idProperty']] = _0x9f6cx8['getId']();
				for (_0x9f6cxa in _0x9f6cx4) {
					_0x9f6cxe = _0x9f6cx8['getField'](_0x9f6cxa);
					if (!_0x9f6cxe || !_0x9f6cxe['persist']) {
						delete _0x9f6cx4[_0x9f6cxa]
					}
					else {
						if (_0x9f6cxe['serialize']) {
							_0x9f6cx4[_0x9f6cxa] = _0x9f6cxe['serialize'](_0x9f6cx4[_0x9f6cxa], _0x9f6cx8)
						}
						else {
							_0x9f6cx4[_0x9f6cxa] = _0x9f6cx8['get'](_0x9f6cxa)
						}
					}
				};
				var _0x9f6cx1 = _0x9f6cx8['getCriticalFields']();
				for (var _0x9f6cx3 = 0; _0x9f6cx3 < _0x9f6cx1['length']; _0x9f6cx3++) {
					_0x9f6cxe = _0x9f6cx1[_0x9f6cx3];
					if (_0x9f6cxe['serialize']) {
						_0x9f6cx4[_0x9f6cxe['getName']()] = _0x9f6cxe['serialize'](_0x9f6cx8['get'](_0x9f6cxe['getName']()), _0x9f6cx8)
					}
					else {
						_0x9f6cx4[_0x9f6cxe['getName']()] = _0x9f6cx8['get'](_0x9f6cxe['getName']())
					}
				}
			};
			if (_0x9f6cxf) {
				this['processSubStores'](_0x9f6cx8, _0x9f6cx4, _0x9f6cxf)
			};
			_0x9f6cx12['push'](_0x9f6cx4)
		};
		return _0x9f6cx12
	}
	, prepareRemoved: function (_0x9f6cx4) {
		var _0x9f6cx1 = []
			, _0x9f6cx3;
		for (var _0x9f6cx5 = 0, _0x9f6cx2 = _0x9f6cx4['length']; _0x9f6cx5 < _0x9f6cx2; _0x9f6cx5++) {
			_0x9f6cx3 = {};
			_0x9f6cx3[_0x9f6cx4[_0x9f6cx5]['idProperty']] = _0x9f6cx4[_0x9f6cx5]['getId']();
			_0x9f6cx1['push'](_0x9f6cx3)
		};
		return _0x9f6cx1
	}
	, processSubStores: function (_0x9f6cx2, _0x9f6cx7, _0x9f6cx1) {
		for (var _0x9f6cx3 = 0, _0x9f6cx8 = _0x9f6cx1['length']; _0x9f6cx3 < _0x9f6cx8; _0x9f6cx3++) {
			var _0x9f6cx6 = _0x9f6cx1[_0x9f6cx3]['storeId']
				, _0x9f6cx5 = _0x9f6cx2['get'](_0x9f6cx6);
			if (_0x9f6cx5) {
				var _0x9f6cx4 = this['getStoreChanges'](Ext['apply']({
					store: _0x9f6cx5
				}, _0x9f6cx1[_0x9f6cx3]));
				if (_0x9f6cx4) {
					_0x9f6cx7[_0x9f6cx6] = Ext['apply'](_0x9f6cx4, {
						$store: true
					})
				}
				else {
					delete _0x9f6cx7[_0x9f6cx6]
				}
			}
			else {
				delete _0x9f6cx7[_0x9f6cx6]
			}
		}
	}
	, getStoreChanges: function (_0x9f6cx3, _0x9f6cx6) {
		_0x9f6cx6 = _0x9f6cx6 || _0x9f6cx3['phantomIdField'] || this['phantomIdField'];
		var _0x9f6cx7 = _0x9f6cx3['store']
			, _0x9f6cx4 = _0x9f6cx7['getNewRecords']()
			, _0x9f6cx5 = _0x9f6cx7['getUpdatedRecords']()
			, _0x9f6cx8 = _0x9f6cx7['getRemovedRecords']()
			, _0x9f6cx2 = _0x9f6cx3['stores'];
		var _0x9f6cx1;
		if (_0x9f6cx4['length']) {
			_0x9f6cx4 = this['prepareAdded'](_0x9f6cx4, _0x9f6cx6, _0x9f6cx2)
		};
		if (_0x9f6cx5['length']) {
			_0x9f6cx5 = this['prepareUpdated'](_0x9f6cx5, _0x9f6cx2, _0x9f6cx3)
		};
		if (_0x9f6cx8['length']) {
			_0x9f6cx8 = this['prepareRemoved'](_0x9f6cx8)
		};
		if (_0x9f6cx4['length'] || _0x9f6cx5['length'] || _0x9f6cx8['length']) {
			_0x9f6cx1 = {};
			if (_0x9f6cx4['length']) {
				_0x9f6cx1['added'] = _0x9f6cx4
			};
			if (_0x9f6cx5['length']) {
				_0x9f6cx1['updated'] = _0x9f6cx5
			};
			if (_0x9f6cx8['length']) {
				_0x9f6cx1['removed'] = _0x9f6cx8
			}
		};
		return _0x9f6cx1
	}
	, getChangeSetPackage: function () {
		var _0x9f6cx3 = {
			type: 'sync'
			, requestId: this['getRequestId']()
			, revision: this['revision']
		};
		var _0x9f6cx7 = this['stores']
			, _0x9f6cxc = 0;
		for (var _0x9f6cx2 = 0, _0x9f6cx1 = _0x9f6cx7['length']; _0x9f6cx2 < _0x9f6cx1; _0x9f6cx2++) {
			var _0x9f6cx4 = _0x9f6cx7[_0x9f6cx2]
				, _0x9f6cx6 = _0x9f6cx4['phantomIdField'] || this['phantomIdField']
				, _0x9f6cx8 = _0x9f6cx4['storeId'];
			var _0x9f6cx5 = this['getStoreChanges'](_0x9f6cx4, _0x9f6cx6);
			if (_0x9f6cx5) {
				_0x9f6cxc++;
				_0x9f6cx3[_0x9f6cx8] = _0x9f6cx5
			}
		};
		return _0x9f6cxc ? _0x9f6cx3 : null
	}
	, getSubStoresData: function (_0x9f6cx8, _0x9f6cx7, _0x9f6cx6, _0x9f6cx4) {
		if (!_0x9f6cx8) {
			return
		};
		var _0x9f6cxc = [];
		var _0x9f6cx1 = function (_0x9f6cxe, _0x9f6cxd) {
			for (var _0x9f6cx13 = 0, _0x9f6cx9 = _0x9f6cxd['length']; _0x9f6cx13 < _0x9f6cx9; _0x9f6cx13++) {
				var _0x9f6cxa = _0x9f6cxd[_0x9f6cx13]['storeId'];
				if (_0x9f6cxe[_0x9f6cxa]) {
					_0x9f6cxc['push']({
						id: _0x9f6cxe[_0x9f6cx6]
						, storeDesc: _0x9f6cxd[_0x9f6cx13]
						, data: _0x9f6cxe[_0x9f6cxa]
					});
					delete _0x9f6cxe[_0x9f6cxa]
				}
			}
		};
		var _0x9f6cx3 = 0
			, _0x9f6cx5 = _0x9f6cx8['length'];
		if (_0x9f6cx4) {
			for (; _0x9f6cx3 < _0x9f6cx5; _0x9f6cx3++) {
				_0x9f6cx1(_0x9f6cx8[_0x9f6cx3], _0x9f6cx7);
				var _0x9f6cx2 = this['getSubStoresData'](_0x9f6cx8[_0x9f6cx3]['children'], _0x9f6cx7, _0x9f6cx6, true);
				if (_0x9f6cx2) {
					_0x9f6cxc = _0x9f6cxc['concat'](_0x9f6cx2)
				}
			}
		}
		else {
			for (; _0x9f6cx3 < _0x9f6cx5; _0x9f6cx3++) {
				_0x9f6cx1(_0x9f6cx8[_0x9f6cx3], _0x9f6cx7)
			}
		};
		return _0x9f6cxc
	}
	, loadDataToTreeStore: function (_0x9f6cx2, _0x9f6cx4, _0x9f6cx5, _0x9f6cx7) {
		var _0x9f6cx3 = _0x9f6cx4 && _0x9f6cx4['rows'];
		var _0x9f6cx1 = _0x9f6cx2['getRoot']();
		if (_0x9f6cx1) {
			_0x9f6cx1['modified'] = null;
			_0x9f6cx1['reject']()
		};
		_0x9f6cx2['proxy']['data'] = _0x9f6cx3;
		_0x9f6cx2['load']()
	}
	, loadDataToFlatStore: function (_0x9f6cx2, _0x9f6cx4, _0x9f6cx5, _0x9f6cx7) {
		var _0x9f6cx3 = _0x9f6cx4 && _0x9f6cx4['rows'];
		_0x9f6cx2['totalCount'] = _0x9f6cx4['total'];
		_0x9f6cx2['currentPage'] = _0x9f6cx7['currentPage'];
		var _0x9f6cx1 = Ext['Array']['map'](_0x9f6cx3, function (_0x9f6cx6) {
			return new _0x9f6cx2['model'](_0x9f6cx6)
		});
		_0x9f6cx2['loadData'](_0x9f6cx1, _0x9f6cx5 && _0x9f6cx5['append'] || _0x9f6cx4['append']);
		_0x9f6cx2['fireEvent']('load', _0x9f6cx2, _0x9f6cx1, true)
	}
	, loadDataToStore: function (_0x9f6cx2, _0x9f6cx7, _0x9f6cx12) {
		var _0x9f6cxb = _0x9f6cx2['store']
			, _0x9f6cx6 = _0x9f6cxb['getModel']()
			, _0x9f6cxe = _0x9f6cx2['stores']
			, _0x9f6cxd = _0x9f6cx2['idProperty'] || _0x9f6cx6 && _0x9f6cx6['prototype'] && _0x9f6cx6['prototype']['idProperty'] || 'id'
			, _0x9f6cxc = _0x9f6cxb['isTreeStore']
			, _0x9f6cxa;
		_0x9f6cxb['__loading'] = true;
		var _0x9f6cxf = _0x9f6cx7 && _0x9f6cx7['rows']
			, _0x9f6cx1 = _0x9f6cx7 && _0x9f6cx7['metaData'];
		if (_0x9f6cx1) {
			if (_0x9f6cxb['applyMetaData']) {
				_0x9f6cxb['applyMetaData'](_0x9f6cx1)
			}
			else {
				_0x9f6cxb['metaData'] = _0x9f6cx1
			}
		};
		if (_0x9f6cxf) {
			if (_0x9f6cxe) {
				_0x9f6cxa = this['getSubStoresData'](_0x9f6cxf, _0x9f6cxe, _0x9f6cxd, _0x9f6cxc)
			};
			var _0x9f6cx3 = _0x9f6cxc ? this['loadDataToTreeStore'] : this['loadDataToFlatStore'];
			_0x9f6cx3['call'](this, _0x9f6cxb, _0x9f6cx7, _0x9f6cx12, _0x9f6cx2);
			if (_0x9f6cxa) {
				for (var _0x9f6cx4 = 0, _0x9f6cx5 = _0x9f6cxa['length']; _0x9f6cx4 < _0x9f6cx5; _0x9f6cx4++) {
					var _0x9f6cx8 = _0x9f6cxa[_0x9f6cx4];
					this['loadDataToStore'](Ext['apply']({
						store: _0x9f6cxb[_0x9f6cxc ? 'getNodeById' : 'getById'](_0x9f6cx8['id'])['get'](_0x9f6cx8['storeDesc']['storeId'])
					}, _0x9f6cx8['storeDesc']), _0x9f6cx8['data'])
				}
			}
		};
		_0x9f6cxb['__loading'] = false
	}
	, loadData: function (_0x9f6cx5, _0x9f6cx3) {
		_0x9f6cx3 = _0x9f6cx3 || {};
		this['suspendChangesTracking']();
		for (var _0x9f6cx4 = 0, _0x9f6cx2 = this['stores']['length']; _0x9f6cx4 < _0x9f6cx2; _0x9f6cx4++) {
			var _0x9f6cx6 = this['stores'][_0x9f6cx4]
				, _0x9f6cx1 = _0x9f6cx6['storeId']
				, _0x9f6cx7 = _0x9f6cx5[_0x9f6cx1];
			if (_0x9f6cx7) {
				this['loadDataToStore'](_0x9f6cx6, _0x9f6cx7, _0x9f6cx3[_0x9f6cx1])
			}
		};
		this['resumeChangesTracking']()
	}
	, applyChangesToRecord: function (_0x9f6cx6, _0x9f6cx9, _0x9f6cxd, _0x9f6cxb) {
		var _0x9f6cx7 = _0x9f6cx6['data']
			, _0x9f6cx4 = {}
			, _0x9f6cx5 = false
			, _0x9f6cx1;
		if (_0x9f6cxd) {
			for (var _0x9f6cx3 = 0, _0x9f6cx2 = _0x9f6cxd['length']; _0x9f6cx3 < _0x9f6cx2; _0x9f6cx3++) {
				_0x9f6cx1 = _0x9f6cxd[_0x9f6cx3]['storeId'];
				if (_0x9f6cx9['hasOwnProperty'](_0x9f6cx1)) {
					_0x9f6cx4[_0x9f6cx1] = true;
					var _0x9f6cx8 = _0x9f6cx6['get'](_0x9f6cx1);
					if (_0x9f6cx8) {
						this['applyChangesToStore'](Ext['apply']({
							store: _0x9f6cx8
						}, _0x9f6cxd[_0x9f6cx3]), _0x9f6cx9[_0x9f6cx1])
					}
					else {
						Ext['log']('can\'t find store for the response sub-package')
					}
				}
			}
		};
		for (_0x9f6cx1 in _0x9f6cx9) {
			if (_0x9f6cx9['hasOwnProperty'](_0x9f6cx1) && !_0x9f6cx4[_0x9f6cx1]) {
				var _0x9f6cx13 = _0x9f6cx9[_0x9f6cx1];
				if (!_0x9f6cx6['isEqual'](_0x9f6cx7[_0x9f6cx1], _0x9f6cx13)) {
					if (!_0x9f6cx5) {
						_0x9f6cx5 = true;
						_0x9f6cx6['beginEdit']()
					};
					if (_0x9f6cx1 === _0x9f6cx6['idProperty']) {
						_0x9f6cx6['setId'](_0x9f6cx13)
					}
					else {
						if (_0x9f6cx1 == 'parentId' && _0x9f6cxb['isTreeStore']) {
							var _0x9f6cxa = (_0x9f6cx13 && _0x9f6cxb['getNodeById'](_0x9f6cx13)) || _0x9f6cxb['getRoot']();
							_0x9f6cxa['appendChild'](_0x9f6cx6)
						}
						else {
							_0x9f6cx6['set'](_0x9f6cx1, _0x9f6cx13)
						}
					}
				}
			}
		};
		this['suspendChangesTracking']();
		if (_0x9f6cx5) {
			_0x9f6cx6['endEdit']()
		};
		this['resumeChangesTracking']();
		_0x9f6cx6['commit']()
	}
	, applyRemovals: function (_0x9f6cxd, _0x9f6cxb, _0x9f6cx3) {
		var _0x9f6cxf = _0x9f6cx3['idProperty']
			, _0x9f6cxe = _0x9f6cxd['isTreeStore'] ? _0x9f6cxd['removedNodes'] : _0x9f6cxd['removed']
			, _0x9f6cx12 = _0x9f6cx3['findByIdFn']
			, _0x9f6cx1 = _0x9f6cx3['removeRecordFn']
			, _0x9f6cx8 = 0;
		for (var _0x9f6cx6 = 0, _0x9f6cx4 = _0x9f6cxb['length']; _0x9f6cx6 < _0x9f6cx4; _0x9f6cx6++) {
			var _0x9f6cx7 = false;
			var _0x9f6cx5 = _0x9f6cxb[_0x9f6cx6][_0x9f6cxf];
			for (var _0x9f6cx13 = 0, _0x9f6cx2 = _0x9f6cxe['length']; _0x9f6cx13 < _0x9f6cx2; _0x9f6cx13++) {
				if (_0x9f6cxe[_0x9f6cx13]['getId']() == _0x9f6cx5) {
					_0x9f6cxe['splice'](_0x9f6cx13, 1);
					_0x9f6cx7 = true;
					_0x9f6cx8++;
					break
				}
			};
			if (!_0x9f6cx7) {
				var _0x9f6cx9 = _0x9f6cx12(_0x9f6cx5);
				if (_0x9f6cx9) {
					this['suspendChangesTracking']();
					_0x9f6cx1(_0x9f6cx9);
					Ext['Array']['remove'](_0x9f6cxe, _0x9f6cx9);
					_0x9f6cx8++;
					this['resumeChangesTracking']()
				}
				else {
					Ext['log']('can\'t find record to remove from the response package')
				}
			}
		};
		return _0x9f6cx8
	}
	, getApplyChangesToStoreHelpers: function (_0x9f6cx1) {
		if (_0x9f6cx1['isTreeStore']) {
			var _0x9f6cx2 = function (_0x9f6cx5) {
				return _0x9f6cx1['getNodeById'](_0x9f6cx5)
			};
			return {
				findByPhantomFn: _0x9f6cx2
				, findByIdFn: _0x9f6cx2
				, addRecordFn: function (_0x9f6cx3) {
					var _0x9f6cx5 = (_0x9f6cx3['parentId'] && _0x9f6cx1['getNodeById'](_0x9f6cx3['parentId'])) || _0x9f6cx1['getRoot']();
					return _0x9f6cx5['appendChild'](_0x9f6cx3)
				}
				, removeRecordFn: function (_0x9f6cx5) {
					return _0x9f6cx5['parentNode']['removeChild'](_0x9f6cx5)
				}
			}
		}
		else {
			return {
				findByPhantomFn: function (_0x9f6cx5) {
					return _0x9f6cx1['data']['getByKey'](_0x9f6cx5)
				}
				, findByIdFn: function (_0x9f6cx5) {
					return _0x9f6cx1['getById'](_0x9f6cx5)
				}
				, addRecordFn: function (_0x9f6cx5) {
					return _0x9f6cx1['add'](_0x9f6cx5)[0]
				}
				, removeRecordFn: function (_0x9f6cx5) {
					return _0x9f6cx1['remove'](_0x9f6cx5)
				}
			}
		}
	}
	, applyChangesToStore: function (_0x9f6cx13, _0x9f6cx17) {
		var _0x9f6cx16 = this
			, _0x9f6cx2 = _0x9f6cx13['phantomIdField'] || _0x9f6cx16['phantomIdField']
			, _0x9f6cx8 = _0x9f6cx13['idProperty']
			, _0x9f6cx6 = _0x9f6cx13['store'];
		if (!_0x9f6cx8) {
			var _0x9f6cx4 = _0x9f6cx6['getModel'] && _0x9f6cx6['getModel']() || _0x9f6cx6['model'];
			_0x9f6cx4 = _0x9f6cx4 && _0x9f6cx4['prototype'];
			_0x9f6cx8 = _0x9f6cx4 && _0x9f6cx4['idProperty'] || 'id'
		};
		var _0x9f6cxf = _0x9f6cx16['getApplyChangesToStoreHelpers'](_0x9f6cx6)
			, _0x9f6cxe = _0x9f6cxf['findByPhantomFn']
			, _0x9f6cxb = _0x9f6cxf['findByIdFn']
			, _0x9f6cx1 = _0x9f6cxf['addRecordFn']
			, _0x9f6cx14 = _0x9f6cxf['removeRecordFn'];
		var _0x9f6cx9 = _0x9f6cx17['rows']
			, _0x9f6cx10 = _0x9f6cx17['removed']
			, _0x9f6cx5;
		if (_0x9f6cx9) {
			var _0x9f6cx15, _0x9f6cxd, _0x9f6cx3, _0x9f6cx7 = _0x9f6cx13['stores'];
			for (var _0x9f6cx11 = 0, _0x9f6cx12 = _0x9f6cx9['length']; _0x9f6cx11 < _0x9f6cx12; _0x9f6cx11++) {
				_0x9f6cx15 = _0x9f6cx9[_0x9f6cx11];
				_0x9f6cx3 = _0x9f6cx15[_0x9f6cx2];
				_0x9f6cxd = _0x9f6cx15[_0x9f6cx8];
				_0x9f6cx5 = null;
				if (_0x9f6cx3 != null) {
					_0x9f6cx5 = _0x9f6cxe(_0x9f6cx3)
				}
				else {
					if (_0x9f6cx8) {
						_0x9f6cx5 = _0x9f6cxb(_0x9f6cxd)
					}
				};
				if (_0x9f6cx5) {
					_0x9f6cx16['applyChangesToRecord'](_0x9f6cx5, _0x9f6cx15, _0x9f6cx7, _0x9f6cx6)
				}
				else {
					_0x9f6cx16['suspendChangesTracking']();
					_0x9f6cx5 = _0x9f6cx1(_0x9f6cx15);
					_0x9f6cx16['resumeChangesTracking']();
					_0x9f6cx5['commit']()
				}
			}
		};
		if (_0x9f6cx10 && _0x9f6cx16['applyRemovals'](_0x9f6cx6, _0x9f6cx10, {
				idProperty: _0x9f6cx8
				, findByIdFn: _0x9f6cxb
				, removeRecordFn: _0x9f6cx14
			})) {
			_0x9f6cx6['fireEvent']('datachanged', _0x9f6cx6)
		}
	}
	, applySyncResponse: function (_0x9f6cx5) {
		this['applyingSyncResponse'] = true;
		var _0x9f6cx2 = this['syncApplySequence'] || this['stores'];
		for (var _0x9f6cx3 = 0, _0x9f6cx1 = _0x9f6cx2['length']; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
			var _0x9f6cx4 = _0x9f6cx5[_0x9f6cx2[_0x9f6cx3]['storeId']];
			if (_0x9f6cx4) {
				this['applyChangesToStore'](_0x9f6cx2[_0x9f6cx3], _0x9f6cx4)
			}
		};
		this['applyingSyncResponse'] = false
	}
	, applyLoadResponse: function (_0x9f6cx1, _0x9f6cx2) {
		this['applyingLoadResponse'] = true;
		this['loadData'](_0x9f6cx1, _0x9f6cx2);
		this['applyingLoadResponse'] = false
	}
	, applyResponse: function (_0x9f6cx1, _0x9f6cx2, _0x9f6cx5) {
		if (this['trackResponseType']) {
			_0x9f6cx1 = _0x9f6cx2['type'] || _0x9f6cx1
		};
		switch (_0x9f6cx1) {
		case 'load':
			this['applyLoadResponse'](_0x9f6cx2, _0x9f6cx5);
			break;
		case 'sync':
			this['applySyncResponse'](_0x9f6cx2);
			break
		}
	}
	, getRequestId: function () {
		return Ext['Date']['now']()
	}
	, onResponse: function (_0x9f6cx1, _0x9f6cx3, _0x9f6cx4, _0x9f6cx5) {
		this['activeRequests'][_0x9f6cx1] = null;
		var _0x9f6cx2 = this['decode'](_0x9f6cx3);
		if (!_0x9f6cx2 || !_0x9f6cx2['success']) {
			this['fireEvent']('requestfail', this, _0x9f6cx1, _0x9f6cx2, _0x9f6cx4);
			this['fireEvent'](_0x9f6cx1 + 'fail', this, _0x9f6cx2, _0x9f6cx4, _0x9f6cx5);
			if ('string' != typeof _0x9f6cx3) {
				_0x9f6cx3 = '' + _0x9f6cx3
			};
			this['warn']('CrudManager: ' + _0x9f6cx1 + ' failed, please inspect the server response', _0x9f6cx3['length'] < 1024 * 1024 && _0x9f6cx3 || '');
			return _0x9f6cx2
		};
		if ((this['fireEvent']('beforeresponseapply', this, _0x9f6cx1, _0x9f6cx2) !== false) && (this['fireEvent']('before' + _0x9f6cx1 + 'apply', this, _0x9f6cx2, _0x9f6cx5) !== false)) {
			this['revision'] = _0x9f6cx2['revision'];
			this['applyResponse'](_0x9f6cx1, _0x9f6cx2, _0x9f6cx5);
			this['fireEvent']('requestdone', this, _0x9f6cx1, _0x9f6cx2, _0x9f6cx4);
			this['fireEvent'](_0x9f6cx1, this, _0x9f6cx2, _0x9f6cx4, _0x9f6cx5);
			if (_0x9f6cx1 === 'load' || !this['hasChanges']()) {
				this['fireEvent']('nochanges', this)
			}
		};
		return _0x9f6cx2
	}
	, onLoad: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		this['loaded'] = true;
		return this['onResponse']('load', _0x9f6cx2, _0x9f6cx5, _0x9f6cx1)
	}
	, onSync: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return this['onResponse']('sync', _0x9f6cx2, _0x9f6cx5, _0x9f6cx1)
	}
	, load: function (_0x9f6cx4, _0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx2;
		if (typeof _0x9f6cx4 === 'object') {
			_0x9f6cx2 = _0x9f6cx4;
			_0x9f6cx4 = _0x9f6cx1;
			_0x9f6cx1 = _0x9f6cx3;
			_0x9f6cx3 = arguments[3]
		};
		var _0x9f6cx5 = this['getLoadPackage'](_0x9f6cx2);
		if (this['fireEvent']('beforeload', this, _0x9f6cx5) !== false) {
			_0x9f6cx3 = _0x9f6cx3 || this;
			if (this['activeRequests']['load']) {
				this['cancelRequest'](this['activeRequests']['load']['desc']);
				this['fireEvent']('loadcanceled', this, _0x9f6cx5)
			};
			this['activeRequests']['load'] = {
				id: _0x9f6cx5['requestId']
			};
			this['activeRequests']['load']['desc'] = this['sendRequest']({
				data: this['encode'](_0x9f6cx5)
				, type: 'load'
				, success: function (_0x9f6cx6, _0x9f6cx8) {
					var _0x9f6cx7 = this['onLoad'](_0x9f6cx6, _0x9f6cx8, _0x9f6cx2);
					if (_0x9f6cx1 && (!_0x9f6cx7 || !_0x9f6cx7['success'])) {
						_0x9f6cx1['call'](_0x9f6cx3, _0x9f6cx7, _0x9f6cx6, _0x9f6cx2)
					}
					else {
						if (_0x9f6cx4) {
							_0x9f6cx4['call'](_0x9f6cx3, _0x9f6cx7, _0x9f6cx6, _0x9f6cx2)
						}
					}
				}
				, failure: function (_0x9f6cx7, _0x9f6cx6) {
					this['onLoad'](_0x9f6cx7, _0x9f6cx6);
					if (_0x9f6cx1) {
						_0x9f6cx1['apply'](_0x9f6cx3, arguments)
					}
				}
				, scope: this
			})
		}
		else {
			this['fireEvent']('loadcanceled', this, _0x9f6cx5)
		}
	}
	, sync: function (_0x9f6cx3, _0x9f6cx1, _0x9f6cx5) {
		if (this['activeRequests']['sync']) {
			this['delayedSyncs']['push'](arguments);
			this['fireEvent']('syncdelayed', this, arguments);
			return
		};
		var _0x9f6cx2 = this['getChangeSetPackage']();
		_0x9f6cx5 = _0x9f6cx5 || this;
		if (!_0x9f6cx2) {
			if (_0x9f6cx3) {
				_0x9f6cx3['call'](_0x9f6cx5, null, null)
			};
			return
		};
		if (this['fireEvent']('beforesync', this, _0x9f6cx2) === false) {
			this['fireEvent']('synccanceled', this, _0x9f6cx2);
			return
		};
		this['activeRequests']['sync'] = {
			id: _0x9f6cx2['requestId']
		};
		this['activeRequests']['sync']['desc'] = this['sendRequest']({
			data: this['encode'](_0x9f6cx2)
			, type: 'sync'
			, success: function (_0x9f6cx8, _0x9f6cx7) {
				var _0x9f6cx6 = this['activeRequests']['sync'];
				var _0x9f6cx4 = this['onSync'](_0x9f6cx8, _0x9f6cx7);
				if (_0x9f6cx1 && (!_0x9f6cx4 || !_0x9f6cx4['success'])) {
					_0x9f6cx1['call'](_0x9f6cx5, _0x9f6cx4, _0x9f6cx8, _0x9f6cx6)
				}
				else {
					if (_0x9f6cx3) {
						_0x9f6cx3['call'](_0x9f6cx5, _0x9f6cx4, _0x9f6cx8, _0x9f6cx6)
					}
				};
				this['runDelayedSync']()
			}
			, failure: function (_0x9f6cx7, _0x9f6cx4) {
				this['onSync'](_0x9f6cx7, _0x9f6cx4);
				if (_0x9f6cx1) {
					_0x9f6cx1['apply'](_0x9f6cx5, arguments)
				};
				this['runDelayedSync']()
			}
			, scope: this
		})
	}
	, runDelayedSync: function () {
		var _0x9f6cx1 = this['delayedSyncs']['shift']();
		if (!_0x9f6cx1) {
			return
		};
		this['sync']['apply'](this, _0x9f6cx1)
	}
	, commit: function () {
		for (var _0x9f6cx2 = 0, _0x9f6cx1 = this['stores']['length']; _0x9f6cx2 < _0x9f6cx1; _0x9f6cx2++) {
			this['stores'][_0x9f6cx2]['store']['commitChanges']()
		}
	}
	, reject: function () {
		for (var _0x9f6cx2 = 0, _0x9f6cx1 = this['stores']['length']; _0x9f6cx2 < _0x9f6cx1; _0x9f6cx2++) {
			this['stores'][_0x9f6cx2]['store']['rejectChanges']()
		}
	}
	, warn: function () {
		if ('console' in window) {
			var _0x9f6cx1 = console;
			_0x9f6cx1['log'] && _0x9f6cx1['log']['apply'] && _0x9f6cx1['log']['apply'](_0x9f6cx1, arguments)
		}
	}
	, isLoading: function () {
		return Boolean(this['activeRequests']['load'] || this['applyingLoadResponse'])
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['destroyed']) {
			return
		};
		_0x9f6cx1['activeRequests']['load'] && _0x9f6cx1['cancelRequest'](_0x9f6cx1['activeRequests']['load']['desc']);
		_0x9f6cx1['activeRequests']['sync'] && _0x9f6cx1['cancelRequest'](_0x9f6cx1['activeRequests']['sync']['desc']);
		while (_0x9f6cx1['stores']['length'] > 0) {
			_0x9f6cx1['removeStore'](_0x9f6cx1['stores'][0])
		};
		clearTimeout(_0x9f6cx1['autoSyncTimerId']);
		_0x9f6cx1['destroyed'] = true
	}
});
Ext.define('Ext.ux.Scheduler.crud.encoder.Json', {
	format: 'json'
	, encode: function (_0x9f6cx1) {
		return Ext['JSON']['encode'](_0x9f6cx1)
	}
	, decode: function (_0x9f6cx1) {
		if (typeof _0x9f6cx1 == 'object') {
			return _0x9f6cx1
		};
		return Ext['JSON']['decode'](_0x9f6cx1, true)
	}
});
Ext.define('Ext.ux.Scheduler.crud.transport.Ajax', {
	defaultMethod: {
		load: 'GET'
		, sync: 'POST'
	}
	, cancelRequest: function (_0x9f6cx1) {
		Ext['Ajax']['abort'](_0x9f6cx1)
	}
	, sendRequest: function (_0x9f6cx2) {
		var _0x9f6cx5 = _0x9f6cx2['data']
			, _0x9f6cx3 = this['transport'][_0x9f6cx2['type']]
			, _0x9f6cx4 = _0x9f6cx3['paramName']
			, _0x9f6cx7 = Ext['apply']({}, _0x9f6cx3 && _0x9f6cx3['params'])
			, _0x9f6cx6 = _0x9f6cx3['method'] || this['defaultMethod'][_0x9f6cx2['type']];
		var _0x9f6cx1 = Ext['apply']({
			url: _0x9f6cx3['url']
			, method: _0x9f6cx6
			, params: _0x9f6cx7
			, failure: _0x9f6cx2['failure']
			, success: function (_0x9f6cx8, _0x9f6cx9) {
				if (_0x9f6cx2['success']) {
					_0x9f6cx2['success']['call'](_0x9f6cx2['scope'] || this, _0x9f6cx8['responseXml'] || _0x9f6cx8['responseText'])
				}
			}
			, scope: _0x9f6cx2['scope']
		}, _0x9f6cx3['requestConfig']);
		if (!_0x9f6cx4) {
			if (this['format'] === 'xml') {
				Ext['apply'](_0x9f6cx1, {
					xmlData: _0x9f6cx5
				})
			}
			else {
				Ext['apply'](_0x9f6cx1, {
					jsonData: _0x9f6cx5
				})
			}
		}
		else {
			_0x9f6cx1['params'] = _0x9f6cx1['params'] || {};
			_0x9f6cx1['params'][_0x9f6cx4] = _0x9f6cx5
		};
		this['fireEvent']('beforesend', this, _0x9f6cx7, _0x9f6cx2['type'], _0x9f6cx1);
		return Ext['Ajax']['request'](_0x9f6cx1)
	}
});
Ext.define('Ext.ux.Scheduler.patches.TreeStore', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.data.TreeStore'
	, minVersion: '5.1.0'
	, overrides: {
		getRejectRecords: function () {
			return this['getModifiedRecords']()
		}
		, rejectChanges: function () {
			this['removed'] = this['removedNodes'];
			this['callParent'](arguments)
		}
		, remove: function (_0x9f6cx2) {
			if (_0x9f6cx2['isModel']) {
				_0x9f6cx2['remove']()
			}
			else {
				if (_0x9f6cx2 instanceof Array && _0x9f6cx2[0]['isModel']) {
					for (var _0x9f6cx1 = 0; _0x9f6cx1 < _0x9f6cx2['length']; _0x9f6cx1++) {
						_0x9f6cx2[_0x9f6cx1]['remove']()
					}
				}
				else {
					this['callParent'](arguments)
				}
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.TreeStoreInternalIdMap', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.data.TreeStore'
	, minVersion: '5.1.1'
	, overrides: {
		registerNode: function (_0x9f6cx5, _0x9f6cx1) {
			var _0x9f6cx2 = this;
			if (!_0x9f6cx2['byInternalIdMap']) {
				_0x9f6cx2['byInternalIdMap'] = {}
			};
			_0x9f6cx2['byInternalIdMap'][_0x9f6cx5['internalId']] = _0x9f6cx5;
			_0x9f6cx2['callParent'](arguments)
		}
		, unregisterNode: function (_0x9f6cx5, _0x9f6cx1) {
			var _0x9f6cx2 = this;
			if (_0x9f6cx2['byInternalIdMap']) {
				delete _0x9f6cx2['byInternalIdMap'][_0x9f6cx5['internalId']]
			};
			_0x9f6cx2['callParent'](arguments)
		}
		, updateRoot: function () {
			this['byInternalIdMap'] = {};
			this['callParent'](arguments)
		}
	}
});
Ext.define('Ext.ux.Gantt.data.linearizator.CycleResolvers', function (_0x9f6cxa) {
	function _0x9f6cx9() {
		return false
	}

	function _0x9f6cx13() {
		Ext['Error']['raise']('can\'t linearize dependent tasks, there\'s a cycle in the dependency chain!')
	}

	function _0x9f6cx1(_0x9f6cxf, _0x9f6cx11) {
		var _0x9f6cx14 = _0x9f6cx7(_0x9f6cxf, _0x9f6cx11)
			, _0x9f6cxd = {}
			, _0x9f6cx10 = function (_0x9f6cx16, _0x9f6cx17) {
				(_0x9f6cxd[_0x9f6cx16] || (_0x9f6cxd[_0x9f6cx16] = []))['push'](_0x9f6cx17)
			};
		_0x9f6cx8(_0x9f6cx14, function _0x9f6cx12(_0x9f6cx17) {
			if (_0x9f6cx17['prevSibling']) {
				_0x9f6cx17['foldedDeps'] = _0x9f6cx5(_0x9f6cx17['prevSibling']['foldedDeps'], _0x9f6cx17['foldedDeps'], _0x9f6cx10)
			};
			if (!_0x9f6cx17['nextSibling'] && _0x9f6cx17['parentNode']) {
				_0x9f6cx17['parentNode']['foldedDeps'] = _0x9f6cxe(_0x9f6cx17['foldedDeps'], _0x9f6cx17['parentNode']['foldedDeps'], _0x9f6cx10)
			}
		});
		_0x9f6cx4(_0x9f6cx11['fromById'], _0x9f6cxd);
		return true
	}

	function _0x9f6cx7(_0x9f6cxd, _0x9f6cx17) {
		var _0x9f6cx12, _0x9f6cxf = []
			, _0x9f6cx10 = {}
			, _0x9f6cx11, _0x9f6cx14;
		for (_0x9f6cx11 in _0x9f6cxd) {
			if (_0x9f6cxd['hasOwnProperty'](_0x9f6cx11)) {
				_0x9f6cx14 = _0x9f6cx10[_0x9f6cx11] = _0x9f6cxc(_0x9f6cxd[_0x9f6cx11]['task'], _0x9f6cxd, _0x9f6cx17);
				if (!_0x9f6cxd['hasOwnProperty'](_0x9f6cx14['parentNode'])) {
					_0x9f6cxf['push'](_0x9f6cx14)
				}
			}
		};
		for (_0x9f6cx11 in _0x9f6cx10) {
			if (_0x9f6cx10['hasOwnProperty'](_0x9f6cx11)) {
				_0x9f6cx10[_0x9f6cx11] = _0x9f6cxb(_0x9f6cx10[_0x9f6cx11], _0x9f6cx10)
			}
		};
		if (_0x9f6cxf['length'] == 1) {
			_0x9f6cx12 = _0x9f6cxf[0]
		}
		else {
			_0x9f6cx12 = {
				parentNode: null
				, prevSibling: null
				, nextSibling: null
				, children: _0x9f6cxf
				, foldedDeps: {}
			}
		};
		return _0x9f6cx12
	}

	function _0x9f6cxc(_0x9f6cx19, _0x9f6cx11, _0x9f6cx1a) {
		var _0x9f6cx1b = Ext['Object']
			, _0x9f6cx17 = _0x9f6cx1a['fromById']
			, _0x9f6cx10 = {}
			, _0x9f6cx1c = _0x9f6cx19['internalId']
			, _0x9f6cxd, _0x9f6cx15, _0x9f6cx14, _0x9f6cx1d, _0x9f6cx12, _0x9f6cx1e, _0x9f6cxf, _0x9f6cx16, _0x9f6cx18;
		_0x9f6cxd = _0x9f6cx1b['getKeys'](_0x9f6cx17[_0x9f6cx1c]);
		if (_0x9f6cxd['length']) {
			_0x9f6cx10[_0x9f6cx1c] = _0x9f6cxd
		}
		else {
			_0x9f6cx10[_0x9f6cx1c] = {}
		};
		_0x9f6cx15 = _0x9f6cx19['parentNode'] && _0x9f6cx11['hasOwnProperty'](_0x9f6cx19['parentNode']['internalId']) && _0x9f6cx19['parentNode']['internalId'];
		_0x9f6cx12 = _0x9f6cx19['childNodes'] || [];
		_0x9f6cxf = [];
		for (_0x9f6cx16 = 0, _0x9f6cx18 = _0x9f6cx12['length']; _0x9f6cx16 < _0x9f6cx18; _0x9f6cx16++) {
			_0x9f6cx1e = _0x9f6cx12[_0x9f6cx16]['internalId'];
			if (_0x9f6cx11['hasOwnProperty'](_0x9f6cx1e)) {
				_0x9f6cxf['push'](_0x9f6cx1e)
			}
		};
		_0x9f6cx1d = _0x9f6cx19['previousSibling'];
		while (_0x9f6cx1d && !_0x9f6cx11['hasOwnProperty'](_0x9f6cx1d['internalId'])) {
			_0x9f6cx1d = _0x9f6cx1d['previousSibling']
		};
		_0x9f6cx1d = _0x9f6cx1d && _0x9f6cx1d['internalId'];
		_0x9f6cx14 = _0x9f6cx19['nextSibling'];
		while (_0x9f6cx14 && !_0x9f6cx11['hasOwnProperty'](_0x9f6cx14['internalId'])) {
			_0x9f6cx14 = _0x9f6cx14['nextSibling']
		};
		_0x9f6cx14 = _0x9f6cx14 && _0x9f6cx14['internalId'];
		return {
			parentNode: _0x9f6cx15
			, prevSibling: _0x9f6cx1d
			, nextSibling: _0x9f6cx14
			, children: _0x9f6cxf
			, foldedDeps: _0x9f6cx10
		}
	}

	function _0x9f6cxb(_0x9f6cx10, _0x9f6cxf) {
		var _0x9f6cx11, _0x9f6cxd, _0x9f6cx12 = _0x9f6cx10['children'];
		for (_0x9f6cx11 = 0, _0x9f6cxd = _0x9f6cx12['length']; _0x9f6cx11 < _0x9f6cxd; _0x9f6cx11++) {
			_0x9f6cx12[_0x9f6cx11] = _0x9f6cxf[_0x9f6cx12[_0x9f6cx11]]
		};
		_0x9f6cx10['parentNode'] = (_0x9f6cx10['parentNode'] || _0x9f6cx10['parentNode'] === 0) && _0x9f6cxf[_0x9f6cx10['parentNode']] || null;
		_0x9f6cx10['prevSibling'] = (_0x9f6cx10['prevSibling'] || _0x9f6cx10['prevSibling'] === 0) && _0x9f6cxf[_0x9f6cx10['prevSibling']] || null;
		_0x9f6cx10['nextSibling'] = (_0x9f6cx10['nextSibling'] || _0x9f6cx10['nextSibling'] === 0) && _0x9f6cxf[_0x9f6cx10['nextSibling']] || null;
		return _0x9f6cx10
	}

	function _0x9f6cx8(_0x9f6cx10, _0x9f6cx11) {
		var _0x9f6cx12 = _0x9f6cx10['children']
			, _0x9f6cxf, _0x9f6cxd;
		for (_0x9f6cxf = 0, _0x9f6cxd = _0x9f6cx12['length']; _0x9f6cxf < _0x9f6cxd; _0x9f6cxf++) {
			_0x9f6cx8(_0x9f6cx12[_0x9f6cxf], _0x9f6cx11)
		};
		_0x9f6cx11(_0x9f6cx10);
		return _0x9f6cx10
	}

	function _0x9f6cx5(_0x9f6cx16, _0x9f6cx17, _0x9f6cxd) {
		var _0x9f6cxf = _0x9f6cx3(_0x9f6cx16, _0x9f6cx17)
			, _0x9f6cx15 = _0x9f6cxf['fromAtoB']
			, _0x9f6cx14 = _0x9f6cxf['fromBtoA']
			, _0x9f6cx11 = _0x9f6cxf['fromAtoBtotal']
			, _0x9f6cx10 = _0x9f6cxf['fromBtoAtotal']
			, _0x9f6cx12 = {};
		if (_0x9f6cx11 > 0 && _0x9f6cx10 > 0) {
			_0x9f6cx12 = _0x9f6cx11 < _0x9f6cx10 ? _0x9f6cx15 : _0x9f6cx14
		};
		_0x9f6cx6(_0x9f6cx12, _0x9f6cxd);
		return _0x9f6cx2(_0x9f6cx16, _0x9f6cx17, _0x9f6cx12)
	}

	function _0x9f6cxe(_0x9f6cx14, _0x9f6cxf, _0x9f6cx16) {
		var _0x9f6cx12 = Ext['Object']
			, _0x9f6cx10 = _0x9f6cx3(_0x9f6cx14, _0x9f6cxf)
			, _0x9f6cx17 = _0x9f6cx10['fromAtoB']
			, _0x9f6cx11 = _0x9f6cx10['fromBtoA']
			, _0x9f6cxd;
		_0x9f6cxd = _0x9f6cx12['merge']({}, _0x9f6cx17, _0x9f6cx11);
		_0x9f6cx6(_0x9f6cxd, _0x9f6cx16);
		return _0x9f6cx2(_0x9f6cx14, _0x9f6cxf, _0x9f6cxd)
	}

	function _0x9f6cx3(_0x9f6cx1c, _0x9f6cx18) {
		var _0x9f6cx16 = Ext['Object']
			, _0x9f6cxf = Ext['Array']
			, _0x9f6cx1e = _0x9f6cx16['getKeys'](_0x9f6cx1c)
			, _0x9f6cx14 = _0x9f6cx16['getKeys'](_0x9f6cx18)
			, _0x9f6cx1d = {}
			, _0x9f6cx15 = {}
			, _0x9f6cx12 = 0
			, _0x9f6cx11 = 0
			, _0x9f6cx10, _0x9f6cx17, _0x9f6cxd, _0x9f6cx1b;
		for (_0x9f6cx10 = 0, _0x9f6cx17 = _0x9f6cx1e['length']; _0x9f6cx10 < _0x9f6cx17; ++_0x9f6cx10) {
			_0x9f6cxd = _0x9f6cx1e[_0x9f6cx10];
			_0x9f6cx1b = _0x9f6cxf['intersect'](_0x9f6cx14, _0x9f6cx1c[_0x9f6cxd]);
			if (_0x9f6cx1b['length']) {
				_0x9f6cx1d[_0x9f6cxd] = _0x9f6cx1b;
				_0x9f6cx12 += _0x9f6cx1b['length']
			}
		};
		for (_0x9f6cx10 = 0, _0x9f6cx17 = _0x9f6cx14['length']; _0x9f6cx10 < _0x9f6cx17; ++_0x9f6cx10) {
			_0x9f6cxd = _0x9f6cx14[_0x9f6cx10];
			_0x9f6cx1b = _0x9f6cxf['intersect'](_0x9f6cx1e, _0x9f6cx18[_0x9f6cxd]);
			if (_0x9f6cx1b['length']) {
				_0x9f6cx15[_0x9f6cxd] = _0x9f6cx1b;
				_0x9f6cx11 += _0x9f6cx1b['length']
			}
		};
		return {
			fromAtoB: _0x9f6cx1d
			, fromBtoA: _0x9f6cx15
			, fromAtoBtotal: _0x9f6cx12
			, fromBtoAtotal: _0x9f6cx11
		}
	}

	function _0x9f6cx6(_0x9f6cxf, _0x9f6cx11) {
		var _0x9f6cx14, _0x9f6cx12, _0x9f6cxd, _0x9f6cx10;
		for (_0x9f6cx14 in _0x9f6cxf) {
			if (_0x9f6cxf['hasOwnProperty'](_0x9f6cx14)) {
				_0x9f6cx10 = _0x9f6cxf[_0x9f6cx14];
				for (_0x9f6cx12 = 0, _0x9f6cxd = _0x9f6cx10['length']; _0x9f6cx12 < _0x9f6cxd; ++_0x9f6cx12) {
					_0x9f6cx11(_0x9f6cx14, _0x9f6cx10[_0x9f6cx12])
				}
			}
		}
	}

	function _0x9f6cx2(_0x9f6cx10, _0x9f6cx12, _0x9f6cxf) {
		var _0x9f6cx11 = Ext['Object']
			, _0x9f6cx14 = Ext['Array']
			, _0x9f6cxd, _0x9f6cx17;
		_0x9f6cxd = _0x9f6cx11['merge']({}, _0x9f6cx10, _0x9f6cx12);
		for (_0x9f6cx17 in _0x9f6cxf) {
			if (_0x9f6cxf['hasOwnProperty'](_0x9f6cx17) && _0x9f6cxd['hasOwnProperty'](_0x9f6cx17)) {
				_0x9f6cxd[_0x9f6cx17] = _0x9f6cx14['difference'](_0x9f6cxd[_0x9f6cx17], _0x9f6cxf[_0x9f6cx17])
			}
		};
		return _0x9f6cxd
	}

	function _0x9f6cx4(_0x9f6cx17, _0x9f6cxf) {
		var _0x9f6cx11, _0x9f6cx14, _0x9f6cx12, _0x9f6cx10, _0x9f6cxd;
		for (_0x9f6cx11 in _0x9f6cxf) {
			if (_0x9f6cxf['hasOwnProperty'](_0x9f6cx11)) {
				_0x9f6cx14 = _0x9f6cxf[_0x9f6cx11];
				for (_0x9f6cx10 = 0, _0x9f6cxd = _0x9f6cx14['length']; _0x9f6cx10 < _0x9f6cxd; ++_0x9f6cx10) {
					_0x9f6cx12 = _0x9f6cx14[_0x9f6cx10];
					_0x9f6cx17[_0x9f6cx11][_0x9f6cx12][0] = 'green'
				}
			}
		};
		return _0x9f6cx17
	}
	return {
		singleton: true
		, none: _0x9f6cx9
		, exception: _0x9f6cx13
		, cut: _0x9f6cx1
	}
});
Ext.define('Ext.ux.Gantt.data.Linearizator', function (_0x9f6cx17) {
	var _0x9f6cx11 = {};

	function _0x9f6cx5(_0x9f6cx1b, _0x9f6cx18, _0x9f6cx15) {
		Ext['isObject'](_0x9f6cx1b) || Ext['isArray'](_0x9f6cx1b) || Ext['Error']['raise']('Invalid arguments, source task list must be either a task or array of tasks!');
		Ext['isFunction'](_0x9f6cx18) || Ext['Error']['raise']('Invalid arguments, processor function must be a function!');
		Ext['isObject'](_0x9f6cx15) || Ext['Error']['raise']('Invalid arguments, walking specification must be an object!');
		_0x9f6cx15 = _0x9f6cx13(_0x9f6cx15);
		return _0x9f6cx4([]['concat'](_0x9f6cx1b), _0x9f6cx18, _0x9f6cx15['tasksDepsCollectingFn'], _0x9f6cx15['cycleSolverFn'])
	}

	function _0x9f6cx4(_0x9f6cx1c, _0x9f6cx1a, _0x9f6cx18, _0x9f6cx1d) {
		var _0x9f6cx1e = false
			, _0x9f6cx1f = true
			, _0x9f6cx20, _0x9f6cx21, _0x9f6cx19, _0x9f6cx15, _0x9f6cx1b;
		_0x9f6cx20 = _0x9f6cxa();
		_0x9f6cx21 = _0x9f6cx8();
		_0x9f6cx6(_0x9f6cx1c, _0x9f6cx18, _0x9f6cx20, _0x9f6cx21);
		while (_0x9f6cx1f) {
			_0x9f6cx1e = false;
			while (!_0x9f6cx1e) {
				_0x9f6cx1e = true;
				_0x9f6cx1f = false;
				for (_0x9f6cx19 in _0x9f6cx20) {
					if (_0x9f6cx20['hasOwnProperty'](_0x9f6cx19) && _0x9f6cx20[_0x9f6cx19]['color'] != 'green') {
						_0x9f6cx15 = _0x9f6cx20[_0x9f6cx19]['task'];
						_0x9f6cx1b = _0x9f6cx7(_0x9f6cx15, _0x9f6cx21);
						if (_0x9f6cx1b != 'red') {
							_0x9f6cx16(_0x9f6cx1b, _0x9f6cx15, _0x9f6cx20, _0x9f6cx21);
							_0x9f6cx1a(_0x9f6cx15, _0x9f6cx1b, _0x9f6cx20, _0x9f6cx21);
							_0x9f6cx1e = false
						}
						else {
							_0x9f6cx1f = true
						}
					}
				}
			};
			if (_0x9f6cx1f) {
				_0x9f6cx1f = _0x9f6cx1d && _0x9f6cx1d(_0x9f6cx20, _0x9f6cx21)
			}
		}
	}

	function _0x9f6cx13(_0x9f6cx1b) {
		var _0x9f6cx18 = _0x9f6cxe(_0x9f6cx1b)
			, _0x9f6cx1c, _0x9f6cx1e, _0x9f6cx15;
		_0x9f6cx15 = _0x9f6cx11[_0x9f6cx18];
		if (!_0x9f6cx15) {
			_0x9f6cx1c = Ext.ux.Gantt['data']['linearizator']['CycleResolvers'][_0x9f6cx1b['cycles'] || 'none'];
			_0x9f6cx1c || Ext['Error']['raise']('can\'t resolve cycle resolution function, ' + _0x9f6cx1b['cycles'] + ' is unknown!');
			_0x9f6cx1e = [];
			_0x9f6cx1b['self'] && (_0x9f6cx1e['push'](_0x9f6cx3));
			_0x9f6cx1b['ancestors'] && (_0x9f6cx1e['push'](_0x9f6cx9));
			_0x9f6cx1b['descendants'] && (_0x9f6cx1e['push'](_0x9f6cx14));
			_0x9f6cx1b['successors'] && (_0x9f6cx1e['push'](_0x9f6cxf));
			_0x9f6cx1e = _0x9f6cx12(_0x9f6cx1e);
			_0x9f6cx15 = {
				tasksDepsCollectingFn: _0x9f6cx1e
				, cycleSolverFn: _0x9f6cx1c
			};
			_0x9f6cx11[_0x9f6cx18] = _0x9f6cx15
		};
		return _0x9f6cx15
	}

	function _0x9f6cxe(_0x9f6cx18) {
		var _0x9f6cx15 = []
			, _0x9f6cx1b;
		for (_0x9f6cx1b in _0x9f6cx18) {
			if (_0x9f6cx18['hasOwnProperty'](_0x9f6cx1b)) {
				_0x9f6cx15['push'](_0x9f6cx1b, '=', String(_0x9f6cx18[_0x9f6cx1b]))
			}
		};
		return _0x9f6cx15.join(';')
	}

	function _0x9f6cx12(_0x9f6cx15) {
		return function (_0x9f6cx1b, _0x9f6cx18, _0x9f6cx1e) {
			var _0x9f6cx1c = [];
			Ext['Array']['each'](_0x9f6cx15, function (_0x9f6cx1d) {
				_0x9f6cx1c = _0x9f6cx1c['concat'](_0x9f6cx1d(_0x9f6cx1b, _0x9f6cx18, _0x9f6cx1e))
			});
			return _0x9f6cx1c
		}
	}

	function _0x9f6cx6(_0x9f6cx1e, _0x9f6cx1b, _0x9f6cx18, _0x9f6cx15) {
		Ext['Array']['each'](_0x9f6cx1e, function (_0x9f6cx1c) {
			var _0x9f6cx1d = _0x9f6cx1b(_0x9f6cx1c, _0x9f6cx18, _0x9f6cx15);
			if (_0x9f6cx1d['length'] > 0) {
				_0x9f6cx6(_0x9f6cx1d, _0x9f6cx1b, _0x9f6cx18, _0x9f6cx15)
			}
		})
	}

	function _0x9f6cx3(_0x9f6cx18, _0x9f6cx15, _0x9f6cx1b) {
		var _0x9f6cx1c = []
			, _0x9f6cx1e = _0x9f6cx18['internalId'];
		if (!_0x9f6cx15['hasOwnProperty'](_0x9f6cx1e)) {
			_0x9f6cx15[_0x9f6cx1e] = {
				task: _0x9f6cx18
				, color: 'red'
			};
			_0x9f6cx1c = [_0x9f6cx18]
		};
		return _0x9f6cx1c
	}

	function _0x9f6cx9(_0x9f6cx18, _0x9f6cx22, _0x9f6cx23) {
		var _0x9f6cx15 = []
			, _0x9f6cx1e = _0x9f6cx23['downFromById']
			, _0x9f6cx1a = _0x9f6cx23['downToById']
			, _0x9f6cx1d = _0x9f6cx23['upFromById']
			, _0x9f6cx19 = _0x9f6cx23['upToById']
			, _0x9f6cx1f = _0x9f6cx18['internalId']
			, _0x9f6cx1b = _0x9f6cx18['parentNode']
			, _0x9f6cx1c = _0x9f6cx1b && _0x9f6cx1b['internalId']
			, _0x9f6cx21, _0x9f6cx20;
		if (_0x9f6cx1b && !_0x9f6cx22['hasOwnProperty'](_0x9f6cx1c)) {
			_0x9f6cx22[_0x9f6cx1c] = {
				task: _0x9f6cx1b
				, color: 'red'
			};
			_0x9f6cx15['push'](_0x9f6cx1b)
		};
		if (_0x9f6cx1b) {
			_0x9f6cx21 = ['red'];
			_0x9f6cx20 = ['red'];
			!_0x9f6cx1e[_0x9f6cx1c] && (_0x9f6cx1e[_0x9f6cx1c] = {});
			!_0x9f6cx1e[_0x9f6cx1c][_0x9f6cx1f] && (_0x9f6cx1e[_0x9f6cx1c][_0x9f6cx1f] = _0x9f6cx21);
			!_0x9f6cx1a[_0x9f6cx1f] && (_0x9f6cx1a[_0x9f6cx1f] = _0x9f6cx21);
			!_0x9f6cx19[_0x9f6cx1c] && (_0x9f6cx19[_0x9f6cx1c] = {});
			!_0x9f6cx19[_0x9f6cx1c][_0x9f6cx1f] && (_0x9f6cx19[_0x9f6cx1c][_0x9f6cx1f] = _0x9f6cx20);
			!_0x9f6cx1d[_0x9f6cx1f] && (_0x9f6cx1d[_0x9f6cx1f] = _0x9f6cx20)
		};
		return _0x9f6cx15
	}

	function _0x9f6cx14(_0x9f6cx1b, _0x9f6cx21, _0x9f6cx1f) {
		var _0x9f6cx15 = []
			, _0x9f6cx1e = _0x9f6cx1f['downFromById']
			, _0x9f6cx19 = _0x9f6cx1f['downToById']
			, _0x9f6cx1c = _0x9f6cx1f['upFromById']
			, _0x9f6cx1d = _0x9f6cx1f['upToById']
			, _0x9f6cx18 = !_0x9f6cx1b['isRoot']() && _0x9f6cx1b['childNodes']
			, _0x9f6cx1a = _0x9f6cx1b['internalId'];
		_0x9f6cx18 && Ext['Array']['each'](_0x9f6cx18, function (_0x9f6cx20) {
			var _0x9f6cx24 = _0x9f6cx20['internalId']
				, _0x9f6cx23, _0x9f6cx22;
			if (!_0x9f6cx21['hasOwnProperty'](_0x9f6cx24)) {
				_0x9f6cx21[_0x9f6cx24] = {
					task: _0x9f6cx20
					, color: 'red'
				};
				_0x9f6cx15['push'](_0x9f6cx20)
			};
			_0x9f6cx23 = ['red'];
			_0x9f6cx22 = ['red'];
			!_0x9f6cx1e[_0x9f6cx1a] && (_0x9f6cx1e[_0x9f6cx1a] = {});
			!_0x9f6cx1e[_0x9f6cx1a][_0x9f6cx24] && (_0x9f6cx1e[_0x9f6cx1a][_0x9f6cx24] = _0x9f6cx23);
			!_0x9f6cx19[_0x9f6cx24] && (_0x9f6cx19[_0x9f6cx24] = _0x9f6cx23);
			!_0x9f6cx1d[_0x9f6cx1a] && (_0x9f6cx1d[_0x9f6cx1a] = {});
			!_0x9f6cx1d[_0x9f6cx1a][_0x9f6cx24] && (_0x9f6cx1d[_0x9f6cx1a][_0x9f6cx24] = _0x9f6cx22);
			!_0x9f6cx1c[_0x9f6cx24] && (_0x9f6cx1c[_0x9f6cx24] = _0x9f6cx22)
		});
		return _0x9f6cx15
	}

	function _0x9f6cxf(_0x9f6cx1b, _0x9f6cx18, _0x9f6cx1e) {
		var _0x9f6cx19 = []
			, _0x9f6cx1a = _0x9f6cx1e['fromById']
			, _0x9f6cx15 = _0x9f6cx1e['toById']
			, _0x9f6cx1d = _0x9f6cx1b['getSuccessors']()
			, _0x9f6cx1c = _0x9f6cx1b['internalId'];
		Ext['Array']['each'](_0x9f6cx1d, function (_0x9f6cx20) {
			var _0x9f6cx21 = _0x9f6cx20['internalId']
				, _0x9f6cx1f;
			if (!_0x9f6cx18['hasOwnProperty'](_0x9f6cx21)) {
				_0x9f6cx18[_0x9f6cx21] = {
					task: _0x9f6cx20
					, color: 'red'
				};
				_0x9f6cx19['push'](_0x9f6cx20)
			};
			_0x9f6cx1f = ['red'];
			!_0x9f6cx1a[_0x9f6cx1c] && (_0x9f6cx1a[_0x9f6cx1c] = {});
			!_0x9f6cx1a[_0x9f6cx1c][_0x9f6cx21] && (_0x9f6cx1a[_0x9f6cx1c][_0x9f6cx21] = _0x9f6cx1f);
			!_0x9f6cx15[_0x9f6cx21] && (_0x9f6cx15[_0x9f6cx21] = {});
			!_0x9f6cx15[_0x9f6cx21][_0x9f6cx1c] && (_0x9f6cx15[_0x9f6cx21][_0x9f6cx1c] = _0x9f6cx1f)
		});
		return _0x9f6cx19
	}

	function _0x9f6cxa() {
		return {}
	}

	function _0x9f6cx8() {
		return {
			fromById: {}
			, toById: {}
			, downFromById: {}
			, downToById: {}
			, upFromById: {}
			, upToById: {}
		}
	}

	function _0x9f6cxc(_0x9f6cx1b, _0x9f6cx1c) {
		var _0x9f6cx18 = _0x9f6cx1c['toById'][_0x9f6cx1b['internalId']]
			, _0x9f6cx15 = false
			, _0x9f6cx1e;
		for (_0x9f6cx1e in _0x9f6cx18) {
			if (_0x9f6cx18['hasOwnProperty'](_0x9f6cx1e) && _0x9f6cx18[_0x9f6cx1e] && _0x9f6cx18[_0x9f6cx1e][0] == 'red') {
				_0x9f6cx15 = true;
				break
			}
		};
		return _0x9f6cx15
	}

	function _0x9f6cx2(_0x9f6cx18, _0x9f6cx1e) {
		var _0x9f6cx1c = _0x9f6cx1e['fromById'][_0x9f6cx18['internalId']]
			, _0x9f6cx15 = false
			, _0x9f6cx1b;
		for (_0x9f6cx1b in _0x9f6cx1c) {
			if (_0x9f6cx1c['hasOwnProperty'](_0x9f6cx1b) && _0x9f6cx1c[_0x9f6cx1b] && _0x9f6cx1c[_0x9f6cx1b][0] == 'red') {
				_0x9f6cx15 = true;
				break
			}
		};
		return _0x9f6cx15
	}

	function _0x9f6cxd(_0x9f6cx18, _0x9f6cx1b) {
		var _0x9f6cx1e = _0x9f6cx1b['downToById']
			, _0x9f6cx15 = _0x9f6cx18['internalId'];
		return _0x9f6cx1e[_0x9f6cx15] && _0x9f6cx1e[_0x9f6cx15][0] == 'red'
	}

	function _0x9f6cx10(_0x9f6cx18, _0x9f6cx1c) {
		var _0x9f6cx1e = _0x9f6cx1c['downFromById'][_0x9f6cx18['internalId']]
			, _0x9f6cx15 = false
			, _0x9f6cx1b;
		for (_0x9f6cx1b in _0x9f6cx1e) {
			if (_0x9f6cx1e['hasOwnProperty'](_0x9f6cx1b) && _0x9f6cx1e[_0x9f6cx1b] && _0x9f6cx1e[_0x9f6cx1b][0] == 'red') {
				_0x9f6cx15 = true;
				break
			}
		};
		return _0x9f6cx15
	}

	function _0x9f6cx1(_0x9f6cx18, _0x9f6cx1e) {
		var _0x9f6cx1c = _0x9f6cx1e['upToById'][_0x9f6cx18['internalId']]
			, _0x9f6cx15 = false
			, _0x9f6cx1b;
		for (_0x9f6cx1b in _0x9f6cx1c) {
			if (_0x9f6cx1c['hasOwnProperty'](_0x9f6cx1b) && _0x9f6cx1c[_0x9f6cx1b] && _0x9f6cx1c[_0x9f6cx1b][0] == 'red') {
				_0x9f6cx15 = true;
				break
			}
		};
		return _0x9f6cx15
	}

	function _0x9f6cxb(_0x9f6cx18, _0x9f6cx1b) {
		var _0x9f6cx15 = _0x9f6cx18['internalId']
			, _0x9f6cx1e = _0x9f6cx1b['upToById'];
		return _0x9f6cx1e[_0x9f6cx15] && _0x9f6cx1e[_0x9f6cx15][0] == 'red'
	}

	function _0x9f6cx7(_0x9f6cx18, _0x9f6cx1b) {
		var _0x9f6cx15 = 'red';
		if (!_0x9f6cxc(_0x9f6cx18, _0x9f6cx1b) && !_0x9f6cxd(_0x9f6cx18, _0x9f6cx1b) && !_0x9f6cx1(_0x9f6cx18, _0x9f6cx1b)) {
			_0x9f6cx15 = 'green'
		}
		else {
			if (!_0x9f6cxc(_0x9f6cx18, _0x9f6cx1b) && !_0x9f6cxd(_0x9f6cx18, _0x9f6cx1b) && _0x9f6cx10(_0x9f6cx18, _0x9f6cx1b)) {
				_0x9f6cx15 = 'yellow'
			}
			else {
				_0x9f6cx15 = 'red'
			}
		};
		return _0x9f6cx15
	}

	function _0x9f6cx16(_0x9f6cx1b, _0x9f6cx15, _0x9f6cx1f, _0x9f6cx1a) {
		var _0x9f6cx19 = _0x9f6cx15['internalId']
			, _0x9f6cx18 = _0x9f6cx1a['fromById'][_0x9f6cx19]
			, _0x9f6cx1c = _0x9f6cx1a['downFromById'][_0x9f6cx19]
			, _0x9f6cx1d = _0x9f6cx1a['upFromById'][_0x9f6cx19]
			, _0x9f6cx1e;
		_0x9f6cx1f[_0x9f6cx19]['color'] = _0x9f6cx1b;
		if (_0x9f6cx1b == 'green') {
			if (_0x9f6cx18) {
				for (_0x9f6cx1e in _0x9f6cx18) {
					if (_0x9f6cx18['hasOwnProperty'](_0x9f6cx1e)) {
						_0x9f6cx18[_0x9f6cx1e][0] = _0x9f6cx1b
					}
				}
			};
			if (_0x9f6cx1c) {
				for (_0x9f6cx1e in _0x9f6cx1c) {
					if (_0x9f6cx1c['hasOwnProperty'](_0x9f6cx1e)) {
						_0x9f6cx1c[_0x9f6cx1e][0] = _0x9f6cx1b
					}
				}
			};
			if (_0x9f6cx1d) {
				_0x9f6cx1d[0] = _0x9f6cx1b
			}
		}
		else {
			if (_0x9f6cx1b == 'yellow') {
				if (_0x9f6cx1c) {
					for (_0x9f6cx1e in _0x9f6cx1c) {
						if (_0x9f6cx1c['hasOwnProperty'](_0x9f6cx1e)) {
							_0x9f6cx1c[_0x9f6cx1e][0] = _0x9f6cx1b
						}
					}
				}
			}
		}
	}
	return {
		singleton: true
		, requires: ['Ext.ux.Gantt.data.linearizator.CycleResolvers']
		, linearWalkBySpecification: _0x9f6cx5
	}
});
Ext.define('Ext.ux.Gantt.model.mixin.ProjectableModel', function () {
	function _0x9f6cx2() {}

	function _0x9f6cx1(_0x9f6cx6) {
		return this['data'][_0x9f6cx6]
	}

	function _0x9f6cx4() {
		var _0x9f6cx9 = this
			, _0x9f6cx8 = _0x9f6cx9['getTreeStore'] && _0x9f6cx9['getTreeStore']() || _0x9f6cx9['store']
			, _0x9f6cx6 = _0x9f6cx8 && _0x9f6cx8['getProjection'] && _0x9f6cx8['getProjection']();
		return _0x9f6cx6 && _0x9f6cx6['hasOwnProperty'](_0x9f6cx9['internalId']) ? true : false
	}
	var _0x9f6cx3 = {
		record: null
		, projection: null
		, result: null
	};
	var _0x9f6cx7 = Ext['Function']['flexSetter'](function (_0x9f6cx12, _0x9f6cxd) {
		var _0x9f6cxe = this
			, _0x9f6cx9 = _0x9f6cx3['record']
			, _0x9f6cxa = _0x9f6cx3['projection']
			, _0x9f6cx11 = _0x9f6cx3['result']
			, _0x9f6cx13 = _0x9f6cx9['internalId']
			, _0x9f6cxf = _0x9f6cx9['get'](_0x9f6cx12)
			, _0x9f6cxc = _0x9f6cx9['previousValues']
			, _0x9f6cxb, _0x9f6cx6, _0x9f6cx8;
		_0x9f6cxb = (_0x9f6cxd !== undefined && _0x9f6cxd !== null) ? (_0x9f6cxd).valueOf() : _0x9f6cxd;
		_0x9f6cx6 = (_0x9f6cxf !== undefined && _0x9f6cxf !== null) ? (_0x9f6cxf).valueOf() : _0x9f6cxf;
		if (((_0x9f6cxb === undefined || _0x9f6cxb === null) && _0x9f6cxb !== _0x9f6cx6) || _0x9f6cxb != _0x9f6cx6) {
			_0x9f6cx8 = _0x9f6cxa[_0x9f6cx13] = _0x9f6cxa['hasOwnProperty'](_0x9f6cx13) && _0x9f6cxa[_0x9f6cx13] || {};
			_0x9f6cx8[_0x9f6cx12] = _0x9f6cxd;
			(_0x9f6cxc || (_0x9f6cx9['previousValues'] = _0x9f6cxc = {}))[_0x9f6cx12] = _0x9f6cxf;
			_0x9f6cx11['push'](_0x9f6cx12)
		}
	});

	function _0x9f6cx5() {
		var _0x9f6cx8 = {};
		_0x9f6cx8['get'] = function _0x9f6cx6(_0x9f6cxf) {
			var _0x9f6cxb = this
				, _0x9f6cx13 = _0x9f6cxb['getTreeStore'] && _0x9f6cxb['getTreeStore']() || _0x9f6cxb['store']
				, _0x9f6cxc = _0x9f6cx13 && _0x9f6cx13['getProjection'] && _0x9f6cx13['getProjection']()
				, _0x9f6cxa = _0x9f6cxb['internalId']
				, _0x9f6cxd, _0x9f6cxe;
			if (_0x9f6cxc && _0x9f6cxc['hasOwnProperty'](_0x9f6cxa)) {
				_0x9f6cxd = _0x9f6cxc[_0x9f6cxa];
				if (_0x9f6cxf in _0x9f6cxd) {
					_0x9f6cxe = _0x9f6cxd[_0x9f6cxf]
				}
				else {
					_0x9f6cxe = _0x9f6cxb['callParent']([_0x9f6cxf])
				}
			}
			else {
				_0x9f6cxe = _0x9f6cxb['callParent']([_0x9f6cxf])
			};
			return _0x9f6cxe
		};
		_0x9f6cx8['set'] = function _0x9f6cx9(_0x9f6cx12, _0x9f6cxf, _0x9f6cxe) {
			var _0x9f6cxd = this
				, _0x9f6cxb = _0x9f6cxd['getTreeStore'] && _0x9f6cxd['getTreeStore']() || _0x9f6cxd['store']
				, _0x9f6cxa = _0x9f6cxb && _0x9f6cxb['getProjection'] && _0x9f6cxb['getProjection']()
				, _0x9f6cx13 = _0x9f6cxd['internalId']
				, _0x9f6cxc;
			if (_0x9f6cxa) {
				_0x9f6cx3['record'] = _0x9f6cxd;
				_0x9f6cx3['projection'] = _0x9f6cxa;
				_0x9f6cx3['result'] = [];
				_0x9f6cx7(_0x9f6cx12, _0x9f6cxf);
				_0x9f6cxc = _0x9f6cx3['result'];
				_0x9f6cx3['record'] = null;
				_0x9f6cx3['result'] = null;
				_0x9f6cx3['projection'] = null
			}
			else {
				_0x9f6cxc = _0x9f6cxd['callParent'](arguments)
			};
			return _0x9f6cxc
		};
		return _0x9f6cx8
	}
	return {
		initProjectable: _0x9f6cx2
		, getUnprojected: _0x9f6cx1
		, isProjected: _0x9f6cx4
		, onClassMixedIn: function (_0x9f6cx6) {
			Ext['override'](_0x9f6cx6, _0x9f6cx5())
		}
	}
});
Ext.define('Ext.ux.Gantt.model.task.More', {
	propagating: false
	, indent: function (_0x9f6cx4) {
		var _0x9f6cx3 = this
			, _0x9f6cx5 = _0x9f6cx3['previousSibling']
			, _0x9f6cx2;
		if (_0x9f6cx5) {
			var _0x9f6cx1 = _0x9f6cx3['getTaskStore']();
			_0x9f6cx1['beginIndent']();
			_0x9f6cx3['propagateChanges'](function () {
				return _0x9f6cx3['indentWithoutPropagation'](function (_0x9f6cx7) {
					_0x9f6cx2 = _0x9f6cx7
				})
			}, function (_0x9f6cx6, _0x9f6cx7) {
				if (_0x9f6cx6) {
					_0x9f6cx2 && _0x9f6cx2()
				}
				else {
					_0x9f6cx5['expand']()
				};
				_0x9f6cx1['endIndent']();
				_0x9f6cx4 && _0x9f6cx4(_0x9f6cx6, _0x9f6cx7)
			})
		}
		else {
			_0x9f6cx4 && _0x9f6cx4(false, {})
		}
	}
	, indentWithoutPropagation: function (_0x9f6cx7) {
		var _0x9f6cx4 = this
			, _0x9f6cx3 = _0x9f6cx4['previousSibling']
			, _0x9f6cx2;
		if (_0x9f6cx3) {
			var _0x9f6cx1 = {
				parentNode: _0x9f6cx4['parentNode']
				, previousSibling: _0x9f6cx4['previousSibling']
				, nextSibling: _0x9f6cx4['nextSibling']
			};
			var _0x9f6cx5 = _0x9f6cx3['childNodes'] ? _0x9f6cx3['childNodes']['length'] : 0;
			_0x9f6cx2 = _0x9f6cx3['insertSubtaskWithoutPropagation'](_0x9f6cx5, _0x9f6cx4, _0x9f6cx7);
			_0x9f6cx4['removeContext'] = _0x9f6cx1
		};
		return _0x9f6cx2
	}
	, outdent: function (_0x9f6cx4) {
		var _0x9f6cx3 = this
			, _0x9f6cx1 = _0x9f6cx3['parentNode']
			, _0x9f6cx5;
		if (_0x9f6cx1 && !_0x9f6cx1['isRoot']()) {
			var _0x9f6cx2 = _0x9f6cx3['getTaskStore']();
			_0x9f6cx2['beginIndent']();
			_0x9f6cx3['propagateChanges'](function () {
				return _0x9f6cx3['outdentWithoutPropagation'](function (_0x9f6cx7) {
					_0x9f6cx5 = _0x9f6cx7
				})
			}, function (_0x9f6cx6, _0x9f6cx7) {
				_0x9f6cx6 && _0x9f6cx5 && _0x9f6cx5();
				_0x9f6cx2['endIndent']();
				_0x9f6cx4 && _0x9f6cx4(_0x9f6cx6, _0x9f6cx7)
			})
		}
		else {
			_0x9f6cx4 && _0x9f6cx4(false, {})
		}
	}
	, outdentWithoutPropagation: function (_0x9f6cx8) {
		var _0x9f6cx6 = this
			, _0x9f6cx5 = _0x9f6cx6['parentNode']
			, _0x9f6cx2, _0x9f6cx1;
		if (_0x9f6cx5 && !_0x9f6cx5['isRoot']()) {
			var _0x9f6cx7 = _0x9f6cx5['parentNode']
				, _0x9f6cx4 = _0x9f6cx5['nextSibling'];
			_0x9f6cx2 = {
				parentNode: _0x9f6cx5
				, previousSibling: _0x9f6cx6['previousSibling']
				, nextSibling: _0x9f6cx6['nextSibling']
			};
			var _0x9f6cx3 = _0x9f6cx4 ? _0x9f6cx7['indexOf'](_0x9f6cx4) : _0x9f6cx7['childNodes']['length'];
			_0x9f6cx1 = _0x9f6cx7['insertSubtaskWithoutPropagation'](_0x9f6cx3, _0x9f6cx6, _0x9f6cx8);
			_0x9f6cx6['removeContext'] = _0x9f6cx2
		};
		return _0x9f6cx1
	}
	, removeInvalidDependencies: function () {
		var _0x9f6cx1 = this['getDependencyStore']()
			, _0x9f6cx5 = this['getAllDependencies']();
		for (var _0x9f6cx2 = 0; _0x9f6cx2 < _0x9f6cx5['length']; _0x9f6cx2++) {
			if (!_0x9f6cx5[_0x9f6cx2]['isValid']()) {
				_0x9f6cx1['remove'](_0x9f6cx5[_0x9f6cx2])
			}
		}
	}
	, removeDependenciesToParents: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getSuccessors']()['concat'](_0x9f6cx2['getPredecessors']());
		_0x9f6cx5['bubble'](function (_0x9f6cx3) {
			if (Ext['Array']['indexOf'](_0x9f6cx1, _0x9f6cx3) >= 0) {
				_0x9f6cx2['removeLinkToTask'](_0x9f6cx3)
			}
		})
	}
	, hasDependencies: function () {
		return this['hasIncomingDependencies']() || this['hasOutgoingDependencies']()
	}
	, getAllDependencies: function () {
		return this['predecessors']['concat'](this['successors'])
	}
	, hasIncomingDependencies: function () {
		return this['predecessors']['length'] > 0
	}
	, hasOutgoingDependencies: function () {
		return this['successors']['length'] > 0
	}
	, getIncomingDependencies: function (_0x9f6cx1) {
		return _0x9f6cx1 ? this['predecessors'] : this['predecessors']['slice']()
	}
	, getParentsOutgoingDependencies: function (_0x9f6cx2) {
		var _0x9f6cx3 = this['parentNode']
			, _0x9f6cx1 = []
			, _0x9f6cx5;
		while (_0x9f6cx3) {
			if (_0x9f6cx2) {
				_0x9f6cx5 = Ext['Array']['filter'](_0x9f6cx3['getOutgoingDependencies'](true), function (_0x9f6cx7) {
					var _0x9f6cx4 = _0x9f6cx7['getTargetTask']();
					return _0x9f6cx4 && _0x9f6cx4['isAncestor'](_0x9f6cx2)
				})
			}
			else {
				_0x9f6cx5 = _0x9f6cx3['getOutgoingDependencies'](true)
			};
			_0x9f6cx1 = _0x9f6cx1['concat'](_0x9f6cx5);
			_0x9f6cx3 = _0x9f6cx3['parentNode']
		};
		return _0x9f6cx1
	}
	, getParentsIncomingDependencies: function (_0x9f6cx2) {
		var _0x9f6cx3 = this['parentNode']
			, _0x9f6cx1 = []
			, _0x9f6cx5;
		while (_0x9f6cx3) {
			if (_0x9f6cx2) {
				_0x9f6cx5 = Ext['Array']['filter'](_0x9f6cx3['getIncomingDependencies'](true), function (_0x9f6cx7) {
					var _0x9f6cx4 = _0x9f6cx7['getSourceTask']();
					return _0x9f6cx4 && _0x9f6cx4['isAncestor'](_0x9f6cx2)
				})
			}
			else {
				_0x9f6cx5 = _0x9f6cx3['getIncomingDependencies'](true)
			};
			_0x9f6cx1 = _0x9f6cx1['concat'](_0x9f6cx5);
			_0x9f6cx3 = _0x9f6cx3['parentNode']
		};
		return _0x9f6cx1
	}
	, getOutgoingDependencies: function (_0x9f6cx1) {
		return _0x9f6cx1 ? this['successors'] : this['successors']['slice']()
	}
	, alignByIncomingDependencies: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx1 = this['alignByIncomingDependenciesWithoutPropagation'](_0x9f6cx5, _0x9f6cx2);
		this['propagateChanges'](null, _0x9f6cx3, true);
		return _0x9f6cx1
	}
	, alignByIncomingDependenciesWithoutPropagation: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		return this['scheduleWithoutPropagation']({
			taskStore: _0x9f6cx5
			, currentCascadeBatch: _0x9f6cx2
			, parentNode: _0x9f6cx1
		})
	}
	, scheduleWithoutPropagation: function (_0x9f6cx3) {
		_0x9f6cx3 = _0x9f6cx3 || {};
		var _0x9f6cx1 = false;
		this['get']('needsReScheduling') && this['set']('needsReScheduling', false);
		var _0x9f6cx5 = _0x9f6cx3['taskStore'] = _0x9f6cx3['taskStore'] || this['getTaskStore'](true);
		if (_0x9f6cx5 && !this['isProject'] && !this['isManuallyScheduled']() && !this['isReadOnly']()) {
			if (typeof _0x9f6cx3['shallow'] !== 'boolean') {
				_0x9f6cx3['shallow'] = !_0x9f6cx5['scheduleByConstraints']
			};
			var _0x9f6cx4 = this['getEarlyStartDate'](_0x9f6cx3)
				, _0x9f6cx2 = _0x9f6cx3['currentCascadeBatch'];
			if (_0x9f6cx4 && _0x9f6cx4 - this['getStartDate']() !== 0) {
				_0x9f6cx2 && _0x9f6cx2['addAffected'](this);
				if (this['isUnscheduled']()) {
					this['setStartEndDateWithoutPropagation'](_0x9f6cx4, this['calculateEndDate'](_0x9f6cx4, 1), false)
				}
				else {
					this['setStartDateWithoutPropagation'](_0x9f6cx4, true, false)
				};
				_0x9f6cx1 = true
			}
		};
		return _0x9f6cx1
	}
	, schedule: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['propagateChanges'](function () {
			return _0x9f6cx2['scheduleWithoutPropagation'](_0x9f6cx1)
		}, _0x9f6cx5, true)
	}
	, getDependencyCalendar: function (_0x9f6cx5, _0x9f6cx6, _0x9f6cx2) {
		if (!_0x9f6cx6) {
			_0x9f6cx6 = (_0x9f6cx2 || this['getTaskStore']())['dependenciesCalendar']
		};
		var _0x9f6cx4 = this['getProjectCalendar']()
			, _0x9f6cx1 = _0x9f6cx5['getSourceTask'](_0x9f6cx2)
			, _0x9f6cx3 = _0x9f6cx5['getTargetTask'](_0x9f6cx2)
			, _0x9f6cx7;
		switch (_0x9f6cx6) {
		case 'project':
			_0x9f6cx7 = _0x9f6cx4;
			break;
		case 'source':
			_0x9f6cx7 = _0x9f6cx1['getCalendar']();
			break;
		case 'target':
			_0x9f6cx7 = _0x9f6cx3['getCalendar']();
			break;
		default:
			throw 'Unsupported value for `dependenciesCalendar` config option'
		};
		return _0x9f6cx7
	}
	, getCriticalPaths: function () {
		var _0x9f6cx4 = [this]
			, _0x9f6cx3 = [[this]]
			, _0x9f6cx1;
		while (_0x9f6cx1 = _0x9f6cx4['shift']()) {
			var _0x9f6cx6 = _0x9f6cx1['getPredecessors']()
				, _0x9f6cx7 = [];
			for (var _0x9f6cx2 = 0; _0x9f6cx2 < _0x9f6cx6['length']; _0x9f6cx2++) {
				var _0x9f6cx5 = _0x9f6cx6[_0x9f6cx2];
				if (_0x9f6cx5['isCritical']()) {
					_0x9f6cx7['push'](_0x9f6cx5)
				}
			};
			if (_0x9f6cx7['length']) {
				_0x9f6cx4 = _0x9f6cx4['concat'](_0x9f6cx7);
				_0x9f6cx3['push'](_0x9f6cx7)
			}
		};
		return _0x9f6cx3
	}
	, addSubtask: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['insertSubtask'](_0x9f6cx1['childNodes'] ? _0x9f6cx1['childNodes']['length'] : 0, _0x9f6cx2, _0x9f6cx5)
	}
	, insertSubtask: function (_0x9f6cx2, _0x9f6cx4, _0x9f6cx6) {
		var _0x9f6cx3 = this
			, _0x9f6cx1, _0x9f6cx5;
		_0x9f6cx3['propagateChanges'](function () {
			return _0x9f6cx3['insertSubtaskWithoutPropagation'](_0x9f6cx2, _0x9f6cx4, function _0x9f6cx8(_0x9f6cxc, _0x9f6cx9) {
				_0x9f6cx5 = _0x9f6cxc;
				_0x9f6cx1 = _0x9f6cx9
			})
		}, function _0x9f6cx7(_0x9f6cx9, _0x9f6cx8) {
			_0x9f6cx9 && _0x9f6cx5 && _0x9f6cx5();
			_0x9f6cx6 && _0x9f6cx6(_0x9f6cx9, _0x9f6cx8)
		});
		return _0x9f6cx1
	}
	, insertSubtaskWithoutPropagation: function (_0x9f6cx6, _0x9f6cx1, _0x9f6cx8) {
		var _0x9f6cx9 = this
			, _0x9f6cx3, _0x9f6cx7, _0x9f6cx5, _0x9f6cx2, _0x9f6cx4;
		_0x9f6cx3 = _0x9f6cx1['parentNode'];
		_0x9f6cx7 = _0x9f6cx3 && _0x9f6cx3['indexOf'](_0x9f6cx9);
		_0x9f6cx2 = _0x9f6cx9['get']('leaf');
		if (_0x9f6cx2) {
			_0x9f6cx4 = _0x9f6cx9['getSegments']();
			_0x9f6cx9['markAsParent']()
		};
		_0x9f6cx1 = _0x9f6cx9['insertChild'](_0x9f6cx6, _0x9f6cx1);
		_0x9f6cx9['expand']();
		_0x9f6cx1['scheduleWithoutPropagation']();
		_0x9f6cx8 && _0x9f6cx8(function () {
			if (_0x9f6cx3) {
				_0x9f6cx3['insertChild'](_0x9f6cx7, _0x9f6cx1)
			}
			else {
				_0x9f6cx9['removeChild'](_0x9f6cx1)
			};
			_0x9f6cx2 && _0x9f6cx9['set']('leaf', true);
			_0x9f6cx2 && _0x9f6cx4 && _0x9f6cx9['setSegmentsWithoutPropagation'](_0x9f6cx4)
		}, _0x9f6cx1);
		if (!_0x9f6cx3) {
			_0x9f6cx5 = _0x9f6cx1
		}
		else {
			if (_0x9f6cx9 !== _0x9f6cx3 && _0x9f6cx9['getTaskStore'](true) === _0x9f6cx3['getTaskStore'](true)) {
				_0x9f6cx5 = [_0x9f6cx1, _0x9f6cx3]
			}
		};
		return _0x9f6cx5
	}
	, removeSubtask: function (_0x9f6cx5, _0x9f6cx4) {
		var _0x9f6cx2 = this
			, _0x9f6cx1;
		if (_0x9f6cx2['indexOf'](_0x9f6cx5) !== -1) {
			_0x9f6cx2['propagateChanges'](function () {
				return _0x9f6cx2['removeSubtaskWithoutPropagation'](_0x9f6cx5, function _0x9f6cx7(_0x9f6cx6) {
					_0x9f6cx1 = _0x9f6cx6
				})
			}, function _0x9f6cx3(_0x9f6cx6, _0x9f6cx7) {
				_0x9f6cx6 && _0x9f6cx1 && _0x9f6cx1();
				_0x9f6cx4 && _0x9f6cx4(_0x9f6cx6, _0x9f6cx7)
			})
		}
		else {
			_0x9f6cx4 && _0x9f6cx4(false, {})
		}
	}
	, removeSubtaskWithoutPropagation: function (_0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cxe = this
			, _0x9f6cx4 = _0x9f6cxe['indexOf'](_0x9f6cx5)
			, _0x9f6cxd, _0x9f6cx7, _0x9f6cxc, _0x9f6cxb, _0x9f6cx2, _0x9f6cx13, _0x9f6cx6, _0x9f6cx8, _0x9f6cxa, _0x9f6cx1;
		_0x9f6cx4 != -1 || Ext['Error']['raise']('can\'t remove subtask `' + _0x9f6cx5['getId']() + '` from task `' + _0x9f6cxe['getId']() + '` subtask is not a child of the task!');
		_0x9f6cx7 = _0x9f6cxe['getDependencyStore']();
		_0x9f6cxc = _0x9f6cxe['getAssignmentStore']();
		_0x9f6cxb = _0x9f6cx5['getAllDependencies']();
		_0x9f6cx2 = _0x9f6cxc && _0x9f6cx5['getAssignments']();
		_0x9f6cxd = [];
		_0x9f6cx13 = [];
		_0x9f6cx6 = [];
		_0x9f6cx5['cascadeBy'](function (_0x9f6cx9) {
			_0x9f6cxd['push'](_0x9f6cx9)
		});
		for (_0x9f6cx8 = 0, _0x9f6cxa = _0x9f6cxd['length'];
			(_0x9f6cx7 || _0x9f6cxc) && _0x9f6cx8 < _0x9f6cxa; _0x9f6cx8++) {
			_0x9f6cx1 = _0x9f6cxd[_0x9f6cx8];
			_0x9f6cx7 && (_0x9f6cxb = _0x9f6cxb['concat'](_0x9f6cx1['getAllDependencies']()));
			_0x9f6cxc && (_0x9f6cx2 = _0x9f6cx2['concat'](_0x9f6cx1['getAssignments']()))
		};
		_0x9f6cxb = _0x9f6cx7 && Ext['Array']['unique'](_0x9f6cxb);
		_0x9f6cxb = _0x9f6cx7 && Ext['Array']['sort'](_0x9f6cxb, function (_0x9f6cxf, _0x9f6cx9) {
			return _0x9f6cx7['indexOf'](_0x9f6cxf) < _0x9f6cx7['indexOf'](_0x9f6cx9) ? -1 : 1
		});
		for (_0x9f6cx8 = 0, _0x9f6cxa = _0x9f6cxb && _0x9f6cxb['length']; _0x9f6cx7 && _0x9f6cx8 < _0x9f6cxa; _0x9f6cx8++) {
			_0x9f6cx13['push'](_0x9f6cx7['indexOf'](_0x9f6cxb[_0x9f6cx8]))
		};
		_0x9f6cx2 = _0x9f6cxc && Ext['Array']['sort'](_0x9f6cx2, function (_0x9f6cxf, _0x9f6cx9) {
			return _0x9f6cxc['indexOf'](_0x9f6cxf) < _0x9f6cxc['indexOf'](_0x9f6cx9) ? -1 : 1
		});
		for (_0x9f6cx8 = 0, _0x9f6cxa = _0x9f6cx2 && _0x9f6cx2['length']; _0x9f6cxc && _0x9f6cx8 < _0x9f6cxa; _0x9f6cx8++) {
			_0x9f6cx6['push'](_0x9f6cxc['indexOf'](_0x9f6cx2[_0x9f6cx8]))
		};
		_0x9f6cx5 = _0x9f6cxe['removeChild'](_0x9f6cx5);
		_0x9f6cxc && _0x9f6cxc['remove'](_0x9f6cx2);
		_0x9f6cx7 && _0x9f6cx7['remove'](_0x9f6cxb);
		if (_0x9f6cxe['childNodes']['length'] === 0 && _0x9f6cxe['convertEmptyParentToLeaf']) {
			_0x9f6cxe['set']('leaf', true)
		};
		_0x9f6cx3 && _0x9f6cx3(function () {
			_0x9f6cxe['insertChild'](_0x9f6cx4, _0x9f6cx5);
			for (_0x9f6cx8 = 0, _0x9f6cxa = _0x9f6cx2 && _0x9f6cx2['length']; _0x9f6cxc && _0x9f6cx8 < _0x9f6cxa; _0x9f6cx8++) {
				_0x9f6cxc['insert'](_0x9f6cx6[_0x9f6cx8], _0x9f6cx2[_0x9f6cx8])
			};
			for (_0x9f6cx8 = 0, _0x9f6cxa = _0x9f6cxb && _0x9f6cxb['length']; _0x9f6cx7 && _0x9f6cx8 < _0x9f6cxa; _0x9f6cx8++) {
				_0x9f6cx7['insert'](_0x9f6cx13[_0x9f6cx8], _0x9f6cxb[_0x9f6cx8])
			}
		});
		return _0x9f6cxe
	}
	, addSuccessor: function (_0x9f6cx2, _0x9f6cx7) {
		var _0x9f6cx3 = this
			, _0x9f6cx1, _0x9f6cx5;
		_0x9f6cx3['propagateChanges'](function () {
			return _0x9f6cx3['addSuccessorWithoutPropagation'](_0x9f6cx2, function _0x9f6cx6(_0x9f6cx9, _0x9f6cx8) {
				_0x9f6cx5 = _0x9f6cx9;
				_0x9f6cx1 = _0x9f6cx8
			})
		}, function _0x9f6cx4(_0x9f6cx8, _0x9f6cx6) {
			_0x9f6cx8 && _0x9f6cx5 && _0x9f6cx5();
			_0x9f6cx7 && _0x9f6cx7(_0x9f6cx8, _0x9f6cx6)
		});
		return _0x9f6cx1
	}
	, addSuccessorWithoutPropagation: function (_0x9f6cx2, _0x9f6cx6) {
		var _0x9f6cx7 = this
			, _0x9f6cx1 = _0x9f6cx7['parentNode']
			, _0x9f6cx3 = _0x9f6cx1['indexOf'](_0x9f6cx7)
			, _0x9f6cx5, _0x9f6cx4;
		_0x9f6cx2 = _0x9f6cx2 || new _0x9f6cx7['self']();
		if (_0x9f6cx7['getEndDate']() && _0x9f6cx2['isUnscheduled']()) {
			_0x9f6cx2['beginEdit']();
			_0x9f6cx2['set'](_0x9f6cx7['startDateField'], _0x9f6cx7['getEndDate']());
			if (!Ext['isNumber'](_0x9f6cx2['getDuration']())) {
				_0x9f6cx2['set'](_0x9f6cx7['durationField'], 1)
			};
			if (!_0x9f6cx2['getEndDate']()) {
				_0x9f6cx2['set'](_0x9f6cx7['endDateField'], _0x9f6cx7['getCalendar']()['calculateEndDate'](_0x9f6cx7['getEndDate'](), _0x9f6cx2['getDuration'](), _0x9f6cx2['getDurationUnit']()))
			};
			_0x9f6cx2['endEdit']()
		};
		_0x9f6cx1['insertSubtaskWithoutPropagation'](_0x9f6cx3 + 1, _0x9f6cx2, function (_0x9f6cx9, _0x9f6cx8) {
			_0x9f6cx5 = _0x9f6cx9;
			_0x9f6cx2 = _0x9f6cx8
		});
		_0x9f6cx7['linkToWithoutPropagation'](_0x9f6cx2, Ext.ux.Gantt['model']['Dependency']['Type'].EndToStart, function (_0x9f6cx8) {
			_0x9f6cx4 = _0x9f6cx8
		});
		_0x9f6cx6 && _0x9f6cx6(function () {
			_0x9f6cx4();
			_0x9f6cx5()
		}, _0x9f6cx2);
		return _0x9f6cx7
	}
	, addMilestone: function (_0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getEndDate']();
		if (!_0x9f6cx5) {
			_0x9f6cx5 = new _0x9f6cx2['self']()
		}
		else {
			if (Ext['isObject'](_0x9f6cx5) && !(_0x9f6cx5 instanceof Ext.ux.Gantt['model']['Task'])) {
				_0x9f6cx5 = new _0x9f6cx2['self'](_0x9f6cx5)
			}
		};
		if (_0x9f6cx1 && !_0x9f6cx5['isMilestone']()) {
			_0x9f6cx5['calendar'] = _0x9f6cx5['calendar'] || _0x9f6cx2['getCalendar']();
			_0x9f6cx5['setStartEndDate'](_0x9f6cx1, _0x9f6cx1)
		};
		return _0x9f6cx2['addTaskBelow'](_0x9f6cx5, _0x9f6cx3)
	}
	, addPredecessor: function (_0x9f6cx5, _0x9f6cx7) {
		var _0x9f6cx3 = this
			, _0x9f6cx1, _0x9f6cx2;
		_0x9f6cx3['propagateChanges'](function () {
			return _0x9f6cx3['addPredecessorWithoutPropagation'](_0x9f6cx5, function _0x9f6cx6(_0x9f6cx9, _0x9f6cx8) {
				_0x9f6cx2 = _0x9f6cx9;
				_0x9f6cx1 = _0x9f6cx8
			})
		}, function _0x9f6cx4(_0x9f6cx8, _0x9f6cx6) {
			_0x9f6cx8 && _0x9f6cx2();
			_0x9f6cx7 && _0x9f6cx7(_0x9f6cx8, _0x9f6cx6)
		});
		return _0x9f6cx1
	}
	, addPredecessorWithoutPropagation: function (_0x9f6cx4, _0x9f6cx6) {
		var _0x9f6cx7 = this
			, _0x9f6cx1 = _0x9f6cx7['parentNode']
			, _0x9f6cx5 = _0x9f6cx1['indexOf'](_0x9f6cx7)
			, _0x9f6cx2, _0x9f6cx3;
		_0x9f6cx4 = _0x9f6cx4 || new _0x9f6cx7['self']();
		if (_0x9f6cx7['getStartDate']()) {
			_0x9f6cx4['beginEdit']();
			if (!Ext['isNumber'](_0x9f6cx4['getDuration']())) {
				_0x9f6cx4['set'](_0x9f6cx7['durationField'], 1)
			};
			if (!_0x9f6cx4['getStartDate']()) {
				_0x9f6cx4['set'](_0x9f6cx7['startDateField'], _0x9f6cx7['getCalendar']()['calculateStartDate'](_0x9f6cx7['getStartDate'](), _0x9f6cx4['getDuration'](), _0x9f6cx4['getDurationUnit']()));
				_0x9f6cx4['set'](_0x9f6cx7['endDateField'], _0x9f6cx7['getCalendar']()['skipNonWorkingTime'](_0x9f6cx7['getStartDate']()))
			};
			_0x9f6cx4['endEdit']()
		};
		_0x9f6cx1['insertSubtaskWithoutPropagation'](_0x9f6cx5, _0x9f6cx4, function (_0x9f6cx9, _0x9f6cx8) {
			_0x9f6cx2 = _0x9f6cx9;
			_0x9f6cx4 = _0x9f6cx8
		});
		_0x9f6cx4['linkToWithoutPropagation'](_0x9f6cx7, Ext.ux.Gantt['model']['Dependency']['Type'].EndToStart, function (_0x9f6cx8) {
			_0x9f6cx3 = _0x9f6cx8
		});
		_0x9f6cx6 && _0x9f6cx6(function () {
			_0x9f6cx3();
			_0x9f6cx2()
		}, _0x9f6cx4);
		return _0x9f6cx4
	}
	, getSuccessors: function () {
		var _0x9f6cx4 = this['successors']
			, _0x9f6cx3 = [];
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx4['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			var _0x9f6cx2 = _0x9f6cx4[_0x9f6cx5]['getTargetTask']();
			if (_0x9f6cx2) {
				_0x9f6cx3['push'](_0x9f6cx2)
			}
		};
		return _0x9f6cx3
	}
	, getPredecessors: function () {
		var _0x9f6cx4 = this['predecessors']
			, _0x9f6cx3 = [];
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx4['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			var _0x9f6cx2 = _0x9f6cx4[_0x9f6cx5]['getSourceTask']();
			if (_0x9f6cx2) {
				_0x9f6cx3['push'](_0x9f6cx2)
			}
		};
		return _0x9f6cx3
	}
	, addTaskAbove: function (_0x9f6cx5, _0x9f6cx8) {
		var _0x9f6cx7 = this
			, _0x9f6cx1 = _0x9f6cx7['parentNode']
			, _0x9f6cx3 = _0x9f6cx1['indexOf'](_0x9f6cx7)
			, _0x9f6cx2, _0x9f6cx4;
		_0x9f6cx5 = _0x9f6cx5 || new _0x9f6cx7['self']();
		_0x9f6cx7['propagateChanges'](function () {
			return _0x9f6cx1['insertSubtaskWithoutPropagation'](_0x9f6cx3, _0x9f6cx5, function _0x9f6cx9(_0x9f6cxa, _0x9f6cxc) {
				_0x9f6cx4 = _0x9f6cxa;
				_0x9f6cx2 = _0x9f6cxc
			})
		}, function _0x9f6cx6(_0x9f6cxc, _0x9f6cx9) {
			_0x9f6cxc && _0x9f6cx4();
			_0x9f6cx8 && _0x9f6cx8(_0x9f6cxc, _0x9f6cx9)
		});
		return _0x9f6cx2
	}
	, addTaskBelow: function (_0x9f6cx5, _0x9f6cx8) {
		var _0x9f6cx7 = this
			, _0x9f6cx1 = _0x9f6cx7['parentNode']
			, _0x9f6cx3 = _0x9f6cx1['indexOf'](_0x9f6cx7) + 1
			, _0x9f6cx2, _0x9f6cx4;
		_0x9f6cx5 = _0x9f6cx5 || new _0x9f6cx7['self']();
		_0x9f6cx7['propagateChanges'](function () {
			return _0x9f6cx1['insertSubtaskWithoutPropagation'](_0x9f6cx3, _0x9f6cx5, function _0x9f6cx9(_0x9f6cxa, _0x9f6cxc) {
				_0x9f6cx4 = _0x9f6cxa;
				_0x9f6cx2 = _0x9f6cxc
			})
		}, function _0x9f6cx6(_0x9f6cxc, _0x9f6cx9) {
			_0x9f6cxc && _0x9f6cx4();
			_0x9f6cx8 && _0x9f6cx8(_0x9f6cxc, _0x9f6cx9)
		});
		return _0x9f6cx2
	}
	, isAbove: function (_0x9f6cx1) {
		var _0x9f6cx2 = this
			, _0x9f6cx3 = Math['min'](_0x9f6cx2['data']['depth'], _0x9f6cx1['data']['depth']);
		var _0x9f6cx5 = this;
		while (_0x9f6cx5['data']['depth'] > _0x9f6cx3) {
			_0x9f6cx5 = _0x9f6cx5['parentNode'];
			if (_0x9f6cx5 == _0x9f6cx1) {
				return false
			}
		};
		while (_0x9f6cx1['data']['depth'] > _0x9f6cx3) {
			_0x9f6cx1 = _0x9f6cx1['parentNode'];
			if (_0x9f6cx1 == _0x9f6cx2) {
				return true
			}
		};
		while (_0x9f6cx1['parentNode'] !== _0x9f6cx5['parentNode']) {
			_0x9f6cx1 = _0x9f6cx1['parentNode'];
			_0x9f6cx5 = _0x9f6cx5['parentNode']
		};
		return _0x9f6cx1['data']['index'] > _0x9f6cx5['data']['index']
	}
	, cascadeChildren: function (_0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx4 = this;
		if (_0x9f6cx4['isLeaf']()) {
			return
		};
		var _0x9f6cx7 = this['childNodes'];
		for (var _0x9f6cx2 = 0, _0x9f6cx1 = _0x9f6cx7['length']; _0x9f6cx2 < _0x9f6cx1; _0x9f6cx2++) {
			_0x9f6cx7[_0x9f6cx2]['cascadeBy'](_0x9f6cx3, _0x9f6cx5)
		}
	}
	, isCritical: function () {
		return this['getTotalSlack']() <= 0
	}
	, getStartSlack: function (_0x9f6cx1) {
		return this['calculateStartSlack']({
			unit: _0x9f6cx1
		})
	}
	, calculateSlackByDates: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cx6) {
		var _0x9f6cx4 = this['getTaskStore'](true)
			, _0x9f6cx1;
		if (_0x9f6cx4 && _0x9f6cx3 && _0x9f6cx2) {
			var _0x9f6cx5 = 1;
			if (_0x9f6cx3 > _0x9f6cx2) {
				var _0x9f6cx7 = _0x9f6cx3;
				_0x9f6cx3 = _0x9f6cx2;
				_0x9f6cx2 = _0x9f6cx7;
				_0x9f6cx5 = -1
			};
			_0x9f6cx1 = this['getCalendar']()['calculateDuration'](_0x9f6cx3, _0x9f6cx2, _0x9f6cx6 || Ext.ux.Scheduler['util']['Date']['DAY']);
			if (_0x9f6cx1) {
				_0x9f6cx1 *= _0x9f6cx5
			}
		};
		return _0x9f6cx1
	}
	, calculateStartSlack: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		_0x9f6cx1['limitByConstraints'] = _0x9f6cx1['limitByConstraints'] === true;
		return this['calculateSlackByDates'](this['getEarlyStartDate'](_0x9f6cx1), this['getLateStartDate'](_0x9f6cx1), _0x9f6cx1['unit'])
	}
	, getEndSlack: function (_0x9f6cx1) {
		return this['calculateEndSlack']({
			unit: _0x9f6cx1
		})
	}
	, calculateEndSlack: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		_0x9f6cx1['limitByConstraints'] = _0x9f6cx1['limitByConstraints'] === true;
		return this['calculateSlackByDates'](this['getEarlyEndDate'](_0x9f6cx1), this['getLateEndDate'](_0x9f6cx1), _0x9f6cx1['unit'])
	}
	, calculateSlack: function (_0x9f6cx5) {
		_0x9f6cx5 = _0x9f6cx5 || {};
		var _0x9f6cx2 = this['getTaskStore'](true)
			, _0x9f6cx1;
		if (_0x9f6cx2) {
			var _0x9f6cx4 = this['calculateStartSlack'](_0x9f6cx5)
				, _0x9f6cx3 = this['isLeaf']() ? _0x9f6cx4 : this['calculateEndSlack'](_0x9f6cx5);
			_0x9f6cx1 = Math['min'](_0x9f6cx4, _0x9f6cx3)
		};
		return _0x9f6cx1
	}
	, getTotalSlack: function (_0x9f6cx1) {
		return this['calculateSlack']({
			unit: _0x9f6cx1 || Ext.ux.Scheduler['util']['Date']['DAY']
		})
	}
	, getFreeSlack: function (_0x9f6cx7) {
		_0x9f6cx7 = _0x9f6cx7 || Ext.ux.Scheduler['util']['Date']['DAY'];
		var _0x9f6cx4 = this
			, _0x9f6cx3 = _0x9f6cx4['getTaskStore'](true)
			, _0x9f6cx1;
		if (_0x9f6cx3) {
			if (!_0x9f6cx4['hasOutgoingDependencies']()) {
				_0x9f6cx1 = this['getTotalSlack'](_0x9f6cx7)
			}
			else {
				var _0x9f6cx5 = {
						skipNonWorkingTime: false
						, limitByConstraints: false
					}
					, _0x9f6cx2 = this['getEarlyEndDate'](_0x9f6cx5);
				var _0x9f6cx6 = _0x9f6cx4['getOutgoingDependenciesConstraintContext'](Ext['apply'](_0x9f6cx5, {
					getLateStartDateFn: 'getEarlyStartDate'
					, getLateEndDateFn: 'getEarlyEndDate'
				}));
				if (_0x9f6cx6) {
					_0x9f6cx1 = this['calculateSlackByDates'](_0x9f6cx2, _0x9f6cx6['endDate'], _0x9f6cx7)
				}
			}
		};
		return _0x9f6cx1
	}
	, getSlack: function (_0x9f6cx1) {
		return this['getFreeSlack'](_0x9f6cx1)
	}
	, endDateToStartDate: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['getDuration']();
		if (this['isSegmented']()) {
			_0x9f6cx1 = this['calculateDuration'](this['getStartDate'](), this['getEndDate'](), null, {
				segments: false
			})
		};
		return this['calculateStartDate'](_0x9f6cx2, _0x9f6cx1, null, {
			segments: false
		})
	}
	, startDateToEndDate: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getDuration']();
		if (this['isSegmented']()) {
			_0x9f6cx2 = this['calculateDuration'](this['getStartDate'](), this['getEndDate'](), null, {
				segments: false
			})
		};
		return this['calculateEndDate'](_0x9f6cx1, _0x9f6cx2, null, {
			segments: false
		})
	}
	, getInheritedConstraintRestrictions: function (_0x9f6cx9) {
		_0x9f6cx9 = _0x9f6cx9 || {};
		var _0x9f6cx4 = this
			, _0x9f6cx2 = _0x9f6cx9['preferredSide'] || 'startDate'
			, _0x9f6cx6 = _0x9f6cx2 == 'startDate' ? 'endDate' : 'startDate'
			, _0x9f6cx3 = _0x9f6cx2 == 'startDate' ? _0x9f6cx4['endDateToStartDate'] : _0x9f6cx4['startDateToEndDate']
			, _0x9f6cx5, _0x9f6cx7, _0x9f6cxc;
		var _0x9f6cx8 = _0x9f6cx4['getConstraintClass']()
			, _0x9f6cx1 = _0x9f6cx8 && _0x9f6cx8['getRestrictions'](_0x9f6cx4);
		if (_0x9f6cx1 && (_0x9f6cx1['startDate'] || _0x9f6cx1['endDate'])) {
			_0x9f6cxc = _0x9f6cx1
		}
		else {
			_0x9f6cx4['bubble'](function (_0x9f6cxa) {
				var _0x9f6cx13 = _0x9f6cxa['getConstraintClass']()
					, _0x9f6cxe, _0x9f6cxb;
				if (_0x9f6cxe = _0x9f6cx13 && _0x9f6cx13['getRestrictions'](_0x9f6cxa)) {
					if (_0x9f6cxe['min']) {
						_0x9f6cxb = _0x9f6cxe['min'][_0x9f6cx2] || _0x9f6cxe['min'][_0x9f6cx6] && _0x9f6cx3['call'](_0x9f6cx4, _0x9f6cxe['min'][_0x9f6cx6]);
						if (_0x9f6cxb && (_0x9f6cxb > _0x9f6cx5 || !_0x9f6cx5)) {
							_0x9f6cx5 = _0x9f6cxb
						}
					}
					else {
						if (_0x9f6cxe['max']) {
							_0x9f6cxb = _0x9f6cxe['max'][_0x9f6cx2] || _0x9f6cxe['max'][_0x9f6cx6] && _0x9f6cx3['call'](_0x9f6cx4, _0x9f6cxe['max'][_0x9f6cx6]);
							if (_0x9f6cxb && (_0x9f6cxb < _0x9f6cx7 || !_0x9f6cx7)) {
								_0x9f6cx7 = _0x9f6cxb
							}
						}
					}
				}
			})
		};
		if (!_0x9f6cxc) {
			if (_0x9f6cx5) {
				_0x9f6cxc = {};
				_0x9f6cxc['min'] = {};
				_0x9f6cxc['min'][_0x9f6cx2] = _0x9f6cx5
			};
			if (_0x9f6cx7) {
				_0x9f6cxc = _0x9f6cxc || {};
				_0x9f6cxc['max'] = {};
				_0x9f6cxc['max'][_0x9f6cx2] = _0x9f6cx7
			}
		};
		return _0x9f6cxc
	}
	, getMaximalDateComparisonFn: function (_0x9f6cx2, _0x9f6cx1) {
		return (_0x9f6cx1 > _0x9f6cx2) || !_0x9f6cx2
	}
	, getIncomingDependenciesConstraintContext: function (_0x9f6cx5) {
		_0x9f6cx5 = _0x9f6cx5 || {};
		var _0x9f6cx1b = this
			, _0x9f6cx14 = !_0x9f6cx5['shallow']
			, _0x9f6cx7 = _0x9f6cx1b['getIncomingDependencies'](true)
			, _0x9f6cx18 = Ext.ux.Gantt['model']['Dependency']['Type']
			, _0x9f6cxf = _0x9f6cx5['getEarlyStartDateFn'] || (_0x9f6cx14 ? _0x9f6cx1b['getEarlyStartDate'] : _0x9f6cx1b['getStartDate'])
			, _0x9f6cx12 = _0x9f6cx5['getEarlyEndDateFn'] || (_0x9f6cx14 ? _0x9f6cx1b['getEarlyEndDate'] : _0x9f6cx1b['getEndDate'])
			, _0x9f6cxb = _0x9f6cx5['comparisonFn'] || _0x9f6cx1b['getMaximalDateComparisonFn']
			, _0x9f6cx3 = _0x9f6cx5['parentNode']
			, _0x9f6cx6 = _0x9f6cx5['taskStore'] || _0x9f6cx1b['getTaskStore'](true)
			, _0x9f6cx2 = _0x9f6cx5['fetchAll']
			, _0x9f6cx8, _0x9f6cxc, _0x9f6cxd;
		if (typeof _0x9f6cxf == 'string') {
			_0x9f6cxf = _0x9f6cx1b[_0x9f6cxf]
		};
		if (typeof _0x9f6cx12 == 'string') {
			_0x9f6cx12 = _0x9f6cx1b[_0x9f6cx12]
		};
		if (typeof _0x9f6cxb == 'string') {
			_0x9f6cxb = _0x9f6cx1b[_0x9f6cxb]
		};
		_0x9f6cx5['fetchAll'] = false;
		if (!_0x9f6cx5['ignoreParents']) {
			_0x9f6cx7 = _0x9f6cx7['concat'](_0x9f6cx1b['getParentsIncomingDependencies'](_0x9f6cx3))
		};
		for (var _0x9f6cx17 = 0, _0x9f6cx10 = _0x9f6cx7['length']; _0x9f6cx17 < _0x9f6cx10; _0x9f6cx17++) {
			var _0x9f6cx11 = _0x9f6cx7[_0x9f6cx17]
				, _0x9f6cxa = _0x9f6cx11['getSourceTask']()
				, _0x9f6cx16 = _0x9f6cx11['getTargetTask']()
				, _0x9f6cx15 = _0x9f6cx1b['getDependencyCalendar'](_0x9f6cx11, null, _0x9f6cx6);
			if (_0x9f6cxa && (!_0x9f6cx3 || _0x9f6cxa['isAncestor'](_0x9f6cx3))) {
				switch (_0x9f6cx11['getType']()) {
				case _0x9f6cx18['StartToStart']:
					_0x9f6cxd = _0x9f6cxf['call'](_0x9f6cxa, _0x9f6cx5);
					break;
				case _0x9f6cx18['StartToEnd']:
					_0x9f6cxd = _0x9f6cxf['call'](_0x9f6cxa, _0x9f6cx5);
					_0x9f6cxd = _0x9f6cxd && _0x9f6cx1b['endDateToStartDate'](_0x9f6cxd);
					break;
				case _0x9f6cx18['EndToStart']:
					_0x9f6cxd = _0x9f6cx12['call'](_0x9f6cxa, _0x9f6cx5);
					break;
				case _0x9f6cx18['EndToEnd']:
					_0x9f6cxd = _0x9f6cx12['call'](_0x9f6cxa, _0x9f6cx5);
					_0x9f6cxd = _0x9f6cxd && _0x9f6cx1b['endDateToStartDate'](_0x9f6cxd);
					break
				};
				if (_0x9f6cxd) {
					var _0x9f6cxe = _0x9f6cx11['getLag']();
					if (_0x9f6cxe) {
						_0x9f6cxd = _0x9f6cx15['skipWorkingTime'](_0x9f6cxd, _0x9f6cxe, _0x9f6cx11['getLagUnit']())
					};
					var _0x9f6cx4 = false;
					if (_0x9f6cx16 !== _0x9f6cx1b) {
						_0x9f6cxd = _0x9f6cx1b['skipNonWorkingTime'](_0x9f6cxd, true);
						_0x9f6cx4 = true
					};
					if (_0x9f6cx2) {
						_0x9f6cx8 = _0x9f6cx8 || {
							all: []
						};
						var _0x9f6cx1 = _0x9f6cxd;
						if (_0x9f6cx5['skipNonWorkingTime'] && !_0x9f6cx4) {
							_0x9f6cx1 = _0x9f6cx1b['skipNonWorkingTime'](_0x9f6cx1, !_0x9f6cx1b['isMilestone']())
						};
						_0x9f6cx8['all']['push']({
							startDate: _0x9f6cx1
							, constrainingTask: _0x9f6cxa
							, constrainingDependency: _0x9f6cx11
						})
					};
					if (_0x9f6cxb(_0x9f6cxc, _0x9f6cxd)) {
						_0x9f6cxc = _0x9f6cxd;
						_0x9f6cx8 = _0x9f6cx8 || {};
						_0x9f6cx8['startDate'] = _0x9f6cxd;
						_0x9f6cx8['constrainingTask'] = _0x9f6cxa;
						_0x9f6cx8['constrainingDependency'] = _0x9f6cx11
					}
				}
			}
		};
		_0x9f6cx5['fetchAll'] = _0x9f6cx2;
		if (_0x9f6cx5['skipNonWorkingTime'] && _0x9f6cx8 && !_0x9f6cx1b['isMilestone']()) {
			_0x9f6cx8['startDate'] = _0x9f6cx1b['skipNonWorkingTime'](_0x9f6cx8['startDate'], true)
		};
		return _0x9f6cx8
	}
	, getMinimalDateComparisonFn: function (_0x9f6cx2, _0x9f6cx1) {
		return !_0x9f6cx2 || (_0x9f6cx1 < _0x9f6cx2)
	}
	, getOutgoingDependenciesConstraintContext: function (_0x9f6cx2) {
		_0x9f6cx2 = _0x9f6cx2 || {};
		var _0x9f6cx17 = this
			, _0x9f6cxf = !_0x9f6cx2['shallow']
			, _0x9f6cx3 = _0x9f6cx17['getOutgoingDependencies'](true)
			, _0x9f6cx14 = Ext.ux.Gantt['model']['Dependency']['Type']
			, _0x9f6cxe = _0x9f6cx2['getLateStartDateFn'] || (_0x9f6cxf ? _0x9f6cx17['getLateStartDate'] : _0x9f6cx17['getStartDate'])
			, _0x9f6cxa = _0x9f6cx2['getLateEndDateFn'] || (_0x9f6cxf ? _0x9f6cx17['getLateEndDate'] : _0x9f6cx17['getEndDate'])
			, _0x9f6cx6 = _0x9f6cx2['comparisonFn'] || _0x9f6cx17['getMinimalDateComparisonFn']
			, _0x9f6cx5 = _0x9f6cx2['parentNode']
			, _0x9f6cx4 = _0x9f6cx2['taskStore'] || _0x9f6cx17['getTaskStore'](true)
			, _0x9f6cx7, _0x9f6cx1, _0x9f6cxc;
		if (typeof _0x9f6cxe == 'string') {
			_0x9f6cxe = _0x9f6cx17[_0x9f6cxe]
		};
		if (typeof _0x9f6cxa == 'string') {
			_0x9f6cxa = _0x9f6cx17[_0x9f6cxa]
		};
		if (typeof _0x9f6cx6 == 'string') {
			_0x9f6cx6 = _0x9f6cx17[_0x9f6cx6]
		};
		if (!_0x9f6cx2['ignoreParents']) {
			_0x9f6cx3 = _0x9f6cx3['concat'](_0x9f6cx17['getParentsOutgoingDependencies'](_0x9f6cx5))
		};
		for (var _0x9f6cx12 = 0, _0x9f6cxd = _0x9f6cx3['length']; _0x9f6cx12 < _0x9f6cxd; _0x9f6cx12++) {
			var _0x9f6cxb = _0x9f6cx3[_0x9f6cx12]
				, _0x9f6cx11 = _0x9f6cxb['getTargetTask']()
				, _0x9f6cx10 = this['getDependencyCalendar'](_0x9f6cxb, null, _0x9f6cx4);
			if (_0x9f6cx11) {
				switch (_0x9f6cxb['getType']()) {
				case _0x9f6cx14['StartToStart']:
					_0x9f6cxc = _0x9f6cxe['call'](_0x9f6cx11, _0x9f6cx2);
					_0x9f6cxc = _0x9f6cxc && _0x9f6cx17['startDateToEndDate'](_0x9f6cxc, this['getDuration'](), this['getDurationUnit']());
					break;
				case _0x9f6cx14['StartToEnd']:
					_0x9f6cxc = _0x9f6cxa['call'](_0x9f6cx11, _0x9f6cx2);
					_0x9f6cxc = _0x9f6cxc && _0x9f6cx17['startDateToEndDate'](_0x9f6cxc, this['getDuration'](), this['getDurationUnit']());
					break;
				case _0x9f6cx14['EndToStart']:
					_0x9f6cxc = _0x9f6cxe['call'](_0x9f6cx11, _0x9f6cx2);
					break;
				case _0x9f6cx14['EndToEnd']:
					_0x9f6cxc = _0x9f6cxa['call'](_0x9f6cx11, _0x9f6cx2);
					break
				};
				var _0x9f6cx8 = _0x9f6cxb['getLag']();
				if (_0x9f6cx8) {
					_0x9f6cxc = _0x9f6cx10['skipWorkingTime'](_0x9f6cxc, -_0x9f6cx8, _0x9f6cxb['getLagUnit']())
				};
				if (_0x9f6cx6(_0x9f6cx1, _0x9f6cxc)) {
					_0x9f6cx1 = _0x9f6cxc;
					_0x9f6cx7 = _0x9f6cx7 || {};
					_0x9f6cx7['startDate'] = null;
					_0x9f6cx7['endDate'] = _0x9f6cxc;
					_0x9f6cx7['constrainingTask'] = _0x9f6cx11;
					_0x9f6cx7['constrainingDependency'] = _0x9f6cxb
				}
			}
		};
		if (_0x9f6cx2['skipNonWorkingTime'] && _0x9f6cx7) {
			_0x9f6cx7['endDate'] = _0x9f6cx17['skipNonWorkingTime'](_0x9f6cx7['endDate'], false)
		};
		return _0x9f6cx7
	}
	, getEarlyLateDateCacheKey: function (_0x9f6cx2, _0x9f6cx1) {
		if (typeof _0x9f6cx1 == 'string') {
			return _0x9f6cx1
		};
		return '' + _0x9f6cx2 + '-' + this['internalId'] + '-' + (_0x9f6cx1['skipNonWorkingTime'] !== false) + '-' + Boolean(_0x9f6cx1['ignoreCache']) + '-' + Boolean(_0x9f6cx1['shallow']) + '-' + (_0x9f6cx1['limitByConstraints'] !== false) + '-' + Boolean(_0x9f6cx1['ignoreConstraint']) + '-' + Boolean(_0x9f6cx1['ignoreParents']) + '-' + (_0x9f6cx1['parentNode'] && _0x9f6cx1['parentNode']['getId']())
	}
	, getEarlyDateCachedValue: function (_0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx2['taskStore'] || _0x9f6cx5['getTaskStore'](true);
		return _0x9f6cx1['getEarlyDateCachedValue'](_0x9f6cx5['getEarlyLateDateCacheKey'](_0x9f6cx3, _0x9f6cx2))
	}
	, getLateDateCachedValue: function (_0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx2['taskStore'] || _0x9f6cx5['getTaskStore'](true);
		return _0x9f6cx1['getLateDateCachedValue'](_0x9f6cx5['getEarlyLateDateCacheKey'](_0x9f6cx3, _0x9f6cx2))
	}
	, getEarlyStartDate: function (_0x9f6cx3) {
		_0x9f6cx3 = _0x9f6cx3 || {};
		var _0x9f6cx11 = this
			, _0x9f6cx13 = _0x9f6cx3['skipNonWorkingTime'] !== false
			, _0x9f6cx10 = _0x9f6cx3['ignoreCache']
			, _0x9f6cx6 = _0x9f6cx3['taskStore'] || _0x9f6cx11['getTaskStore'](true)
			, _0x9f6cx8 = _0x9f6cx11['getEarlyLateDateCacheKey']('es', _0x9f6cx3)
			, _0x9f6cxe = _0x9f6cx6['getEarlyDateCachedValue'](_0x9f6cx8);
		if (!_0x9f6cx10 && _0x9f6cxe) {
			return _0x9f6cxe
		};
		_0x9f6cx3['skipNonWorkingTime'] = false;
		var _0x9f6cx4 = _0x9f6cx11['getEarlyDateCachedValue']('es', _0x9f6cx3);
		var _0x9f6cxd = _0x9f6cx3['limitByConstraints'] !== false
			, _0x9f6cx1 = _0x9f6cx11['internalId']
			, _0x9f6cx9 = false
			, _0x9f6cx2, _0x9f6cxf, _0x9f6cxa;
		if (!_0x9f6cx3['shallow']) {
			_0x9f6cx2 = _0x9f6cx3['context'] || {
				calls: {}
			};
			_0x9f6cx2['calls']['getEarlyStartDate'] = _0x9f6cx2['calls']['getEarlyStartDate'] || {};
			if (_0x9f6cx2['calls']['getEarlyStartDate'][_0x9f6cx1]) {
				Ext['log']('can\'t calculate Early Start Date for the ' + (_0x9f6cx11['getId']() || _0x9f6cx11['getName']()) + ' task, tasks build a cycle');
				return
			};
			_0x9f6cx2['calls']['getEarlyStartDate'][_0x9f6cx1] = true;
			_0x9f6cx3['context'] = _0x9f6cx2
		};
		if (!_0x9f6cx6) {
			_0x9f6cxa = _0x9f6cx11['getStartDate']();
			_0x9f6cx9 = true
		}
		else {
			if (!_0x9f6cx10 && _0x9f6cx4) {
				_0x9f6cxa = _0x9f6cx4
			}
			else {
				if (_0x9f6cx11['isProject'] || _0x9f6cx11['isManuallyScheduled']()) {
					_0x9f6cxa = _0x9f6cx11['getStartDate']();
					_0x9f6cx9 = true
				}
				else {
					if (_0x9f6cx11['childNodes']['length']) {
						_0x9f6cx11['cascadeBy'](function (_0x9f6cx16) {
							if (_0x9f6cx16 !== _0x9f6cx11) {
								var _0x9f6cx17 = _0x9f6cx16['getEarlyStartDate'](_0x9f6cx3);
								if (_0x9f6cx16['isLeaf']() && _0x9f6cx17 && !_0x9f6cxa || _0x9f6cx17 < _0x9f6cxa) {
									_0x9f6cxa = _0x9f6cx17
								}
							}
						})
					}
					else {
						var _0x9f6cx7 = false
							, _0x9f6cx12 = _0x9f6cx3['ignoreConstraint'] === true || !_0x9f6cx6['scheduleByConstraints'];
						var _0x9f6cx5 = _0x9f6cx11['getProject']()
							, _0x9f6cxb = _0x9f6cx5 ? _0x9f6cx5['getStartDate']() : _0x9f6cx6['getProjectStartDate']();
						if (!_0x9f6cx12) {
							_0x9f6cxa = _0x9f6cxb;
							var _0x9f6cx14;
							if (_0x9f6cx14 = _0x9f6cx11['getInheritedConstraintRestrictions']()) {
								if (_0x9f6cx14['startDate']) {
									_0x9f6cxa = _0x9f6cx14['startDate'];
									_0x9f6cx7 = true
								}
								else {
									if (_0x9f6cx14['endDate']) {
										_0x9f6cxa = _0x9f6cx11['endDateToStartDate'](_0x9f6cx14['endDate']);
										_0x9f6cx7 = true
									}
									else {
										if (_0x9f6cx14['min']) {
											_0x9f6cxa = _0x9f6cx14['min']['endDate'] ? _0x9f6cx11['endDateToStartDate'](_0x9f6cx14['min']['endDate']) : _0x9f6cx14['min']['startDate']
										};
										if (_0x9f6cxd && _0x9f6cx14['max']) {
											_0x9f6cxf = _0x9f6cx14['max']['endDate'] ? _0x9f6cx11['endDateToStartDate'](_0x9f6cx14['max']['endDate']) : _0x9f6cx14['max']['startDate']
										}
									}
								}
							}
						};
						if (!_0x9f6cx7) {
							var _0x9f6cxc = _0x9f6cx11['getIncomingDependenciesConstraintContext'](_0x9f6cx3);
							if (_0x9f6cx12 && !_0x9f6cxc && !_0x9f6cxa) {
								_0x9f6cxa = _0x9f6cx11['getStartDate']() || _0x9f6cxb
							}
							else {
								if (_0x9f6cxc && (!_0x9f6cxa || _0x9f6cxc['startDate'] > _0x9f6cxa)) {
									_0x9f6cxa = _0x9f6cxc['startDate']
								}
							}
						}
					}
				}
			}
		};
		_0x9f6cx3['skipNonWorkingTime'] = _0x9f6cx13;
		if (_0x9f6cxa && _0x9f6cx13 && !_0x9f6cx9 && !_0x9f6cx11['isMilestone']()) {
			_0x9f6cxa = _0x9f6cx11['skipNonWorkingTime'](_0x9f6cxa, true)
		};
		if (_0x9f6cxa && _0x9f6cxf && _0x9f6cxa >= _0x9f6cxf) {
			_0x9f6cxa = _0x9f6cxf
		};
		!_0x9f6cx10 && _0x9f6cx6['setEarlyDateCachedValue'](_0x9f6cx8, _0x9f6cxa);
		if (_0x9f6cx2) {
			delete _0x9f6cx2['calls']['getEarlyStartDate'][_0x9f6cx1]
		};
		return _0x9f6cxa
	}
	, getEarlyEndDate: function (_0x9f6cxa) {
		_0x9f6cxa = _0x9f6cxa || {};
		var _0x9f6cx7 = this
			, _0x9f6cx5 = _0x9f6cxa['skipNonWorkingTime'] !== false
			, _0x9f6cx1 = _0x9f6cxa['ignoreCache']
			, _0x9f6cx8 = _0x9f6cxa['taskStore'] || _0x9f6cx7['getTaskStore'](true)
			, _0x9f6cx4 = _0x9f6cx7['getEarlyLateDateCacheKey']('ee', _0x9f6cxa)
			, _0x9f6cx2 = _0x9f6cx8['getEarlyDateCachedValue'](_0x9f6cx4);
		if (!_0x9f6cx1 && _0x9f6cx2) {
			return _0x9f6cx2
		};
		_0x9f6cxa['skipNonWorkingTime'] = false;
		var _0x9f6cx9 = _0x9f6cx7['getEarlyDateCachedValue']('ee', _0x9f6cxa);
		var _0x9f6cx3 = false
			, _0x9f6cxc;
		if (!_0x9f6cx8) {
			_0x9f6cxc = _0x9f6cx7['getEndDate']();
			_0x9f6cx3 = true
		}
		else {
			if (!_0x9f6cx1 && _0x9f6cx9) {
				_0x9f6cxc = _0x9f6cx9
			}
			else {
				if (this['isProject'] || this['isManuallyScheduled']()) {
					_0x9f6cxc = this['getEndDate']()
				}
				else {
					if (_0x9f6cx7['childNodes']['length']) {
						_0x9f6cx7['cascadeBy'](function (_0x9f6cxb) {
							if (_0x9f6cxb !== _0x9f6cx7) {
								var _0x9f6cx13 = _0x9f6cxb['getEarlyEndDate'](_0x9f6cxa);
								if (_0x9f6cxb['isLeaf']() && _0x9f6cx13 && !_0x9f6cxc || _0x9f6cx13 > _0x9f6cxc) {
									_0x9f6cxc = _0x9f6cx13
								}
							}
						})
					}
					else {
						var _0x9f6cx6 = this['getEarlyStartDate'](_0x9f6cxa);
						if (_0x9f6cx6) {
							_0x9f6cxc = this['startDateToEndDate'](_0x9f6cx6)
						}
					}
				}
			}
		};
		_0x9f6cxa['skipNonWorkingTime'] = _0x9f6cx5;
		if (_0x9f6cxc && _0x9f6cx5 && !_0x9f6cx3 && !_0x9f6cx7['isMilestone']()) {
			_0x9f6cxc = _0x9f6cx7['skipNonWorkingTime'](_0x9f6cxc, false)
		};
		!_0x9f6cx1 && _0x9f6cx8['setEarlyDateCachedValue'](_0x9f6cx4, _0x9f6cxc);
		return _0x9f6cxc
	}
	, getLateEndDate: function (_0x9f6cx3) {
		_0x9f6cx3 = _0x9f6cx3 || {};
		var _0x9f6cxb = _0x9f6cx3['skipNonWorkingTime'] !== false
			, _0x9f6cx11 = this
			, _0x9f6cx6 = _0x9f6cx3['taskStore'] || _0x9f6cx11['getTaskStore'](true)
			, _0x9f6cx10 = _0x9f6cx3['ignoreCache']
			, _0x9f6cxd = _0x9f6cx3['limitByConstraints'] !== false
			, _0x9f6cx8 = _0x9f6cx11['getEarlyLateDateCacheKey']('le', _0x9f6cx3)
			, _0x9f6cxe = _0x9f6cx6['getLateDateCachedValue'](_0x9f6cx8);
		if (!_0x9f6cx10 && _0x9f6cxe) {
			return _0x9f6cxe
		};
		_0x9f6cx3['skipNonWorkingTime'] = false;
		var _0x9f6cx4 = _0x9f6cx11['getLateDateCachedValue']('le', _0x9f6cx3);
		var _0x9f6cx1 = _0x9f6cx11['internalId']
			, _0x9f6cx9 = false
			, _0x9f6cxa, _0x9f6cx2, _0x9f6cxf;
		if (!_0x9f6cx3['shallow']) {
			_0x9f6cx2 = _0x9f6cx3['context'] || {
				calls: {}
			};
			_0x9f6cx2['calls']['getLateEndDate'] = _0x9f6cx2['calls']['getLateEndDate'] || {};
			if (_0x9f6cx2['calls']['getLateEndDate'][_0x9f6cx1]) {
				Ext['log']('can\'t calculate Late End Date for the \'' + (_0x9f6cx11['getId']() || _0x9f6cx11['getName']()) + '\' task, tasks build a cycle');
				return
			};
			_0x9f6cx2['calls']['getLateEndDate'][_0x9f6cx1] = true;
			_0x9f6cx3['context'] = _0x9f6cx2
		};
		if (!_0x9f6cx6) {
			_0x9f6cxa = _0x9f6cx11['getEndDate']()
		}
		else {
			if (!_0x9f6cx10 && _0x9f6cx4) {
				_0x9f6cxa = _0x9f6cx4
			}
			else {
				if (this['isProject'] || this['isManuallyScheduled']()) {
					_0x9f6cxa = this['getEndDate']();
					_0x9f6cx9 = true
				}
				else {
					if (_0x9f6cx11['childNodes']['length']) {
						_0x9f6cx11['cascadeBy'](function (_0x9f6cx16) {
							if (_0x9f6cx16 !== _0x9f6cx11) {
								var _0x9f6cx17 = _0x9f6cx16['getLateEndDate'](_0x9f6cx3);
								if (_0x9f6cx16['isLeaf']() && _0x9f6cx17 && !_0x9f6cxa || _0x9f6cx17 > _0x9f6cxa) {
									_0x9f6cxa = _0x9f6cx17
								}
							}
						})
					}
					else {
						var _0x9f6cx12 = _0x9f6cx3['ignoreConstraint'] === true || !_0x9f6cx6['scheduleByConstraints']
							, _0x9f6cx7 = false;
						var _0x9f6cx5 = _0x9f6cx11['getProject']()
							, _0x9f6cx13 = _0x9f6cx5 ? _0x9f6cx5['getEndDate']() : _0x9f6cx6['getProjectEndDate']();
						_0x9f6cxa = _0x9f6cx13;
						if (!_0x9f6cx12) {
							var _0x9f6cx14;
							if (_0x9f6cx14 = _0x9f6cx11['getInheritedConstraintRestrictions']({
									preferredSide: 'endDate'
								})) {
								if (_0x9f6cx14['startDate']) {
									_0x9f6cxa = _0x9f6cx11['startDateToEndDate'](_0x9f6cx14['startDate']);
									_0x9f6cx7 = true
								}
								else {
									if (_0x9f6cx14['endDate']) {
										_0x9f6cxa = _0x9f6cx14['endDate'];
										_0x9f6cx7 = true
									}
									else {
										if (_0x9f6cx14['max']) {
											_0x9f6cxa = _0x9f6cx14['max']['endDate'] ? _0x9f6cx14['max']['endDate'] : _0x9f6cx11['startDateToEndDate'](_0x9f6cx14['max']['startDate'])
										};
										if (_0x9f6cxd && _0x9f6cx14['min']) {
											_0x9f6cxf = _0x9f6cx14['min']['endDate'] ? _0x9f6cx14['min']['endDate'] : _0x9f6cx11['startDateToEndDate'](_0x9f6cx14['min']['startDate'])
										}
									}
								}
							}
						};
						if (!_0x9f6cx7) {
							var _0x9f6cxc = this['getOutgoingDependenciesConstraintContext'](_0x9f6cx3);
							if (_0x9f6cxc && (!_0x9f6cxa || _0x9f6cxc['endDate'] < _0x9f6cxa)) {
								_0x9f6cxa = _0x9f6cxc['endDate']
							}
						}
					}
				}
			}
		};
		if (_0x9f6cxa && _0x9f6cxb && !_0x9f6cx9) {
			_0x9f6cxa = _0x9f6cx11['skipNonWorkingTime'](_0x9f6cxa, false)
		};
		if (_0x9f6cxa && _0x9f6cxf && _0x9f6cxa <= _0x9f6cxf) {
			_0x9f6cxa = _0x9f6cxf
		};
		_0x9f6cx3['skipNonWorkingTime'] = _0x9f6cxb;
		!_0x9f6cx10 && _0x9f6cx6['setLateDateCachedValue'](_0x9f6cx8, _0x9f6cxa);
		if (_0x9f6cx2) {
			delete _0x9f6cx2['calls']['getLateEndDate'][_0x9f6cx1]
		};
		return _0x9f6cxa
	}
	, getLateStartDate: function (_0x9f6cx13) {
		_0x9f6cx13 = _0x9f6cx13 || {};
		var _0x9f6cx6 = this
			, _0x9f6cx9 = _0x9f6cx13['taskStore'] || _0x9f6cx6['getTaskStore'](true)
			, _0x9f6cx3 = _0x9f6cx13['skipNonWorkingTime'] !== false
			, _0x9f6cx1 = _0x9f6cx13['ignoreCache']
			, _0x9f6cx7 = _0x9f6cx6['getEarlyLateDateCacheKey']('ls', _0x9f6cx13)
			, _0x9f6cx5 = _0x9f6cx9['getLateDateCachedValue'](_0x9f6cx7);
		if (!_0x9f6cx1 && _0x9f6cx5) {
			return _0x9f6cx5
		};
		_0x9f6cx13['skipNonWorkingTime'] = false;
		var _0x9f6cxc = _0x9f6cx6['getLateDateCachedValue']('ls', _0x9f6cx13);
		var _0x9f6cx4 = false
			, _0x9f6cxa;
		if (!_0x9f6cx9) {
			_0x9f6cxa = _0x9f6cx6['getStartDate']();
			_0x9f6cx4 = true
		}
		else {
			if (!_0x9f6cx1 && _0x9f6cxc) {
				_0x9f6cxa = _0x9f6cxc
			}
			else {
				if (this['isProject'] || this['isManuallyScheduled']()) {
					_0x9f6cxa = this['getStartDate']();
					_0x9f6cx4 = true
				}
				else {
					if (_0x9f6cx6['childNodes']['length']) {
						_0x9f6cx6['cascadeBy'](function (_0x9f6cxe) {
							if (_0x9f6cxe !== _0x9f6cx6) {
								var _0x9f6cxb = _0x9f6cxe['getLateStartDate'](_0x9f6cx13);
								if (_0x9f6cxe['isLeaf']() && _0x9f6cxb && !_0x9f6cxa || _0x9f6cxb < _0x9f6cxa) {
									_0x9f6cxa = _0x9f6cxb
								}
							}
						})
					}
					else {
						var _0x9f6cx8 = this['getLateEndDate'](_0x9f6cx13);
						if (_0x9f6cx8) {
							_0x9f6cxa = this['endDateToStartDate'](_0x9f6cx8)
						}
					}
				}
			}
		};
		_0x9f6cx13['skipNonWorkingTime'] = _0x9f6cx3;
		if (_0x9f6cxa && _0x9f6cx3 && !_0x9f6cx4) {
			var _0x9f6cx2 = _0x9f6cx6['skipNonWorkingTime'](_0x9f6cx6['skipNonWorkingTime'](_0x9f6cxa, false), true);
			if (_0x9f6cx2 < _0x9f6cxa) {
				_0x9f6cxa = _0x9f6cx2
			}
		};
		!_0x9f6cx1 && _0x9f6cx9['setLateDateCachedValue'](_0x9f6cx7, _0x9f6cxa);
		return _0x9f6cxa
	}
	, getTopParent: function (_0x9f6cx5) {
		var _0x9f6cx2 = this['getTaskStore']()['getRoot']()
			, _0x9f6cx4 = this
			, _0x9f6cx3 = [this]
			, _0x9f6cx1;
		while (_0x9f6cx4) {
			if (_0x9f6cx4 === _0x9f6cx2) {
				return _0x9f6cx5 ? _0x9f6cx3 : _0x9f6cx1
			};
			_0x9f6cx3['push'](_0x9f6cx4);
			_0x9f6cx1 = _0x9f6cx4;
			_0x9f6cx4 = _0x9f6cx4['parentNode']
		}
	}
	, getInDepthWalker: function (_0x9f6cx1) {
		var _0x9f6cx3 = _0x9f6cx1 ? this : this['childNodes'] && this['childNodes'][0];
		var _0x9f6cx2 = this;
		var _0x9f6cx4 = {};
		var _0x9f6cx5 = function (_0x9f6cx8) {
			var _0x9f6cx6 = _0x9f6cx8;
			var _0x9f6cx7 = _0x9f6cx6['internalId'];
			if (_0x9f6cx6['isLeaf']() || !_0x9f6cx6['childNodes']['length']) {
				_0x9f6cx6 = _0x9f6cx6['nextSibling']
			}
			else {
				if (_0x9f6cx4[_0x9f6cx7] === true) {
					_0x9f6cx4[_0x9f6cx7] = false;
					_0x9f6cx6 = _0x9f6cx6['nextSibling']
				}
				else {
					_0x9f6cx4[_0x9f6cx7] = true;
					_0x9f6cx6 = _0x9f6cx6['childNodes'][0]
				}
			};
			if (!_0x9f6cx6) {
				_0x9f6cx6 = _0x9f6cx8;
				do {
					if (_0x9f6cx6 === _0x9f6cx2) {
						return null
					};
					_0x9f6cx6 = _0x9f6cx6['parentNode'];
					if (_0x9f6cx6 === _0x9f6cx2) {
						return null
					}
				} while (_0x9f6cx4[_0x9f6cx6['internalId']] === false);;
				return _0x9f6cx5(_0x9f6cx6)
			};
			return _0x9f6cx6
		};
		return function () {
			var _0x9f6cx7 = _0x9f6cx3;
			if (_0x9f6cx3) {
				_0x9f6cx3 = _0x9f6cx5(_0x9f6cx3)
			};
			return _0x9f6cx7
		}
	}
	, propagateChanges: function (_0x9f6cxc, _0x9f6cxb, _0x9f6cx8) {
		var _0x9f6cx7 = this
			, _0x9f6cx1, _0x9f6cx9, _0x9f6cx6, _0x9f6cx2;
		!_0x9f6cxc || Ext['isFunction'](_0x9f6cxc) || Ext['Error']['raise']('can\'t propagate changes to a task, invalid changer function given');
		!_0x9f6cxb || Ext['isFunction'](_0x9f6cxb) || Ext['Error']['raise']('can\'t propagate changes to a task, invalid callback function given');
		_0x9f6cx6 = _0x9f6cx7['getTaskStore'](true);
		_0x9f6cx8 = arguments['length'] == 3 ? _0x9f6cx8 : _0x9f6cx6 && _0x9f6cx6['cascadeChanges'];
		if (!_0x9f6cx7['propagating'] && _0x9f6cx6) {
			_0x9f6cx7['propagating'] = true;
			_0x9f6cx9 = {};
			_0x9f6cx6['suspendAutoSync']();
			_0x9f6cx6['suspendEarlyDatesResetNotification']();
			_0x9f6cx6['suspendLateDatesResetNotification']();
			_0x9f6cx2 = _0x9f6cx6['startBatchCascade']();
			_0x9f6cx6['startProjection']();
			try {
				_0x9f6cx1 = (_0x9f6cxc && _0x9f6cxc !== Ext['emptyFn']) ? _0x9f6cxc(_0x9f6cx7) : [_0x9f6cx7]
			}
			catch (d) {
				_0x9f6cx6['rejectProjection']();
				_0x9f6cx6['endBatchCascade']();
				_0x9f6cx6['resumeAutoSync'](_0x9f6cx6['autoSync']);
				_0x9f6cx6['resumeEarlyDatesResetNotification']();
				_0x9f6cx6['resumeLateDatesResetNotification']();
				_0x9f6cx7['propagating'] = false;
				throw d
			};
			if (_0x9f6cx1 === true) {
				_0x9f6cx1 = _0x9f6cx7['isProjected']() && [_0x9f6cx7] || false
			}
			else {
				if (_0x9f6cx1) {
					_0x9f6cx1 = []['concat'](_0x9f6cx1)
				}
			};
			if (_0x9f6cx1) {
				var _0x9f6cx13 = function (_0x9f6cxd, _0x9f6cx4) {
					if (_0x9f6cxd) {
						_0x9f6cx6['rejectProjection']();
						_0x9f6cx4 = {}
					}
					else {
						_0x9f6cx6['commitProjection']()
					};
					_0x9f6cx6['endBatchCascade']();
					_0x9f6cx7['propagating'] = false;
					_0x9f6cxb && _0x9f6cxb(_0x9f6cxd, _0x9f6cx4);
					_0x9f6cx6['resumeAutoSync'](_0x9f6cx6['autoSync'] && !_0x9f6cxd && !Ext['Object']['isEmpty'](_0x9f6cx4));
					_0x9f6cx6['resumeEarlyDatesResetNotification']();
					_0x9f6cx6['resumeLateDatesResetNotification']()
				};
				var _0x9f6cxa = function () {
					_0x9f6cx7['propagateChangesThroughDependentTasks'](_0x9f6cx6['getLinearWalkingSequenceForDependentTasks'](_0x9f6cx1, {
						self: true
						, ancestors: _0x9f6cx6['recalculateParents']
						, descendants: _0x9f6cx6['moveParentAsGroup']
						, successors: _0x9f6cx8
						, cycles: _0x9f6cx6['cycleResolutionStrategy']
					}), _0x9f6cx6, _0x9f6cx2, _0x9f6cx1, _0x9f6cx8, _0x9f6cx9, _0x9f6cx13)
				};
				var _0x9f6cx5 = _0x9f6cx6['getPrePropagationConstraints'](_0x9f6cx7);
				if (_0x9f6cx5['length']) {
					_0x9f6cx7['doVerifyConstraints'](_0x9f6cx5, function _0x9f6cxe(_0x9f6cx4, _0x9f6cxd) {
						if (!_0x9f6cxd) {
							_0x9f6cxa()
						}
						else {
							_0x9f6cx13(_0x9f6cxd, _0x9f6cx9)
						}
					})
				}
				else {
					_0x9f6cxa()
				}
			}
			else {
				_0x9f6cx6['rejectProjection']();
				_0x9f6cx6['endBatchCascade']();
				_0x9f6cx7['propagating'] = false;
				_0x9f6cxb && _0x9f6cxb(false, {});
				_0x9f6cx6['resumeAutoSync'](_0x9f6cx6['autoSync']);
				_0x9f6cx6['resumeEarlyDatesResetNotification']();
				_0x9f6cx6['resumeLateDatesResetNotification']()
			}
		}
		else {
			if (!_0x9f6cx7['propagating']) {
				_0x9f6cx7['propagating'] = true;
				try {
					_0x9f6cxc && _0x9f6cxc(_0x9f6cx7)
				}
				catch (d) {
					_0x9f6cx7['propagating'] = false;
					throw d
				};
				_0x9f6cx7['verifyConstraints'](function (_0x9f6cx4, _0x9f6cxd) {
					_0x9f6cx9 = {};
					_0x9f6cxd = !!_0x9f6cxd;
					if (!_0x9f6cxd) {
						_0x9f6cx9[_0x9f6cx7['getId']()] = _0x9f6cx7
					};
					_0x9f6cx7['propagating'] = false;
					_0x9f6cxb && _0x9f6cxb(_0x9f6cxd, _0x9f6cx9)
				})
			}
			else {
				_0x9f6cxb && _0x9f6cxb(true, {})
			}
		}
	}
	, propagateChangesThroughDependentTasks: function (_0x9f6cx6, _0x9f6cx8, _0x9f6cx2, _0x9f6cx1, _0x9f6cxc, _0x9f6cxa, _0x9f6cxb, _0x9f6cx3) {
		var _0x9f6cx7 = this
			, _0x9f6cx5, _0x9f6cx4, _0x9f6cx13;
		_0x9f6cx3 = _0x9f6cx3 || 0;
		_0x9f6cx13 = true;
		for (_0x9f6cx5 = _0x9f6cx3, _0x9f6cx4 = _0x9f6cx6['length']; _0x9f6cx13 && _0x9f6cx5 < _0x9f6cx4; ++_0x9f6cx5) {
			_0x9f6cx13 = _0x9f6cx7['processTaskConstraints'](_0x9f6cx6, _0x9f6cx5, _0x9f6cx8, _0x9f6cx2, _0x9f6cx1, _0x9f6cxc, _0x9f6cxa, function (_0x9f6cxe, _0x9f6cxd, _0x9f6cxf, _0x9f6cx9) {
				if (_0x9f6cxf || (_0x9f6cxe == _0x9f6cx4 - 1)) {
					_0x9f6cxb(_0x9f6cxf, _0x9f6cx9)
				}
				else {
					if (!_0x9f6cxd) {
						_0x9f6cx7['propagateChangesThroughDependentTasks'](_0x9f6cx6, _0x9f6cx8, _0x9f6cx2, _0x9f6cx1, _0x9f6cxc, _0x9f6cx9, _0x9f6cxb, _0x9f6cxe + 1)
					}
				}
			})
		}
	}
	, processTaskConstraints: function (_0x9f6cx17, _0x9f6cx10, _0x9f6cxe, _0x9f6cx2, _0x9f6cx18, _0x9f6cx8, _0x9f6cx13, _0x9f6cx6) {
		var _0x9f6cx1d = this
			, _0x9f6cx9 = _0x9f6cx17[_0x9f6cx10]
			, _0x9f6cx1b = _0x9f6cx9[0]
			, _0x9f6cx14 = _0x9f6cx9[1]
			, _0x9f6cx1c = _0x9f6cx1b['hasChildNodes']()
			, _0x9f6cx1e = !_0x9f6cx1c
			, _0x9f6cx4 = _0x9f6cx1b['get']('needsReScheduling')
			, _0x9f6cxf = !(_0x9f6cx1b['isManuallyScheduled']() || _0x9f6cx1b['isReadOnly']() || Ext['Array']['contains'](_0x9f6cx18, _0x9f6cx1b))
			, _0x9f6cx19 = _0x9f6cx8 || _0x9f6cxe['cascadeChanges']
			, _0x9f6cxa = _0x9f6cxe['scheduleByConstraints']
			, _0x9f6cx11 = _0x9f6cxe['recalculateParents']
			, _0x9f6cx7 = _0x9f6cxe['moveParentAsGroup']
			, _0x9f6cxb = _0x9f6cx1b['parentNode']
			, _0x9f6cx3 = _0x9f6cxb && (_0x9f6cxb['getStartDate']())
			, _0x9f6cx15 = _0x9f6cxb && (_0x9f6cxb['getUnprojected'](_0x9f6cxb['startDateField']))
			, _0x9f6cx12 = _0x9f6cxb && (_0x9f6cx3 - _0x9f6cx15)
			, _0x9f6cx1 = false
			, _0x9f6cxc;

		function _0x9f6cxd(_0x9f6cx1a, _0x9f6cx25, _0x9f6cx1f) {
			var _0x9f6cx21 = _0x9f6cx1a['getIncomingDependencies'](true)
				, _0x9f6cx26 = false
				, _0x9f6cx20, _0x9f6cx23, _0x9f6cx24, _0x9f6cx22;
			for (_0x9f6cx20 = 0, _0x9f6cx23 = _0x9f6cx21['length']; !_0x9f6cx26 && _0x9f6cx20 < _0x9f6cx23; ++_0x9f6cx20) {
				_0x9f6cx24 = _0x9f6cx21[_0x9f6cx20];
				_0x9f6cx22 = _0x9f6cx24['getSourceTask']();
				_0x9f6cx26 = _0x9f6cx22 && _0x9f6cx25['hasOwnProperty'](_0x9f6cx22['getId']()) || Ext['Array']['contains'](_0x9f6cx1f, _0x9f6cx22)
			};
			return _0x9f6cx26
		}
		switch (true) {
		case _0x9f6cxf && _0x9f6cx1e && _0x9f6cx14 == 'green' && _0x9f6cx12 && _0x9f6cx7:
			;
		case _0x9f6cxf && _0x9f6cx1c && _0x9f6cx14 == 'yellow' && _0x9f6cx12 && _0x9f6cx7:
			if (_0x9f6cx3) {
				if (_0x9f6cxa) {
					_0x9f6cx1b['scheduleWithoutPropagation']({
						taskStore: _0x9f6cxe
					})
				}
				else {
					var _0x9f6cx5 = _0x9f6cx1b['getStartDate']();
					if (_0x9f6cx5 >= _0x9f6cx15) {
						_0x9f6cxc = _0x9f6cx1b['calculateDuration'](_0x9f6cx15, _0x9f6cx5, null, {
							segments: false
						});
						_0x9f6cx1b['setStartDateWithoutPropagation'](_0x9f6cx1b['calculateEndDate'](_0x9f6cx3, _0x9f6cxc, null, {
							segments: false
						}), true, _0x9f6cxe['skipWeekendsDuringDragDrop'])
					}
					else {
						_0x9f6cxc = _0x9f6cx1b['calculateDuration'](_0x9f6cx5, _0x9f6cx15, null, {
							segments: false
						});
						_0x9f6cx1b['setStartDateWithoutPropagation'](_0x9f6cx1b['calculateStartDate'](_0x9f6cx3, _0x9f6cxc, null, {
							segments: false
						}), true, _0x9f6cxe['skipWeekendsDuringDragDrop'])
					};
					_0x9f6cxd(_0x9f6cx1b, _0x9f6cx13, _0x9f6cx18) && _0x9f6cx1b['scheduleWithoutPropagation']({
						taskStore: _0x9f6cxe
						, parentNode: _0x9f6cxb
					})
				}
			};
			break;
		case _0x9f6cx1e && _0x9f6cx14 == 'green' && _0x9f6cx4:
			;
		case _0x9f6cx1c && _0x9f6cx14 == 'yellow' && _0x9f6cx4:
			_0x9f6cx1b['scheduleWithoutPropagation']({
				taskStore: _0x9f6cxe
			});
			break;
		case _0x9f6cxf && _0x9f6cx1e && _0x9f6cx14 == 'green' && _0x9f6cx19:
			;
		case _0x9f6cxf && _0x9f6cx1c && _0x9f6cx14 == 'yellow' && _0x9f6cx19:
			if (_0x9f6cxd(_0x9f6cx1b, _0x9f6cx13, _0x9f6cx18)) {
				_0x9f6cx1b['scheduleWithoutPropagation']({
					taskStore: _0x9f6cxe
				})
			}
			else {
				if (_0x9f6cx1c && _0x9f6cx11) {
					_0x9f6cx1 = true
				}
			};
			break;
		case _0x9f6cx1c && _0x9f6cx14 == 'green' && _0x9f6cx11:
			_0x9f6cx1b['refreshCalculatedParentNodeData']();
			break
		};
		if (_0x9f6cx1b['isProjected']()) {
			_0x9f6cx2['addAffected'](_0x9f6cx1b);
			_0x9f6cx13[_0x9f6cx1b['getId']()] = _0x9f6cx1b
		};
		var _0x9f6cx16 = function (_0x9f6cx1f, _0x9f6cx20) {
			var _0x9f6cx1a, _0x9f6cx21;
			if (!_0x9f6cx1f && _0x9f6cx1c && _0x9f6cxf && _0x9f6cxe['recalculateParents'] && _0x9f6cx14 == 'green') {
				_0x9f6cx1a = Ext['Array']['findBy'](_0x9f6cx17, function (_0x9f6cx24, _0x9f6cx23) {
					var _0x9f6cx25 = _0x9f6cx24[0]
						, _0x9f6cx22 = _0x9f6cx24[1];
					_0x9f6cx21 = _0x9f6cx23;
					return _0x9f6cx1b === _0x9f6cx25 && _0x9f6cx22 == 'yellow'
				});
				_0x9f6cx6(_0x9f6cx21, _0x9f6cx1f, !!_0x9f6cx20, _0x9f6cx13)
			}
			else {
				_0x9f6cx6(_0x9f6cx10, _0x9f6cx1f, !!_0x9f6cx20, _0x9f6cx13)
			}
		};
		if (_0x9f6cx1) {
			_0x9f6cx16(true, false)
		};
		return _0x9f6cx1 || _0x9f6cx1b['verifyConstraints'](_0x9f6cx16)
	}
	, removeLinkToTask: function (_0x9f6cx2) {
		var _0x9f6cx5 = this['getDependencyStore']();
		var _0x9f6cx1 = this['getId']();
		var _0x9f6cx3 = _0x9f6cx2['getId']();
		Ext['Array']['each'](this['getAllDependencies'](), function (_0x9f6cx4) {
			if ((_0x9f6cx4['getSourceId']() === _0x9f6cx1 && _0x9f6cx4['getTargetId']() === _0x9f6cx3) || (_0x9f6cx4['getSourceId']() === _0x9f6cx3 && _0x9f6cx4['getTargetId']() === _0x9f6cx1)) {
				_0x9f6cx5['remove'](_0x9f6cx4);
				return false
			}
		})
	}
	, convertEmptyParentToLeafTask: function () {
		this['beginEdit']();
		this['set']('leaf', true);
		this['setDurationWithoutPropagation'](1, this['getDurationUnit']());
		this['endEdit']()
	}
	, hasEndPredecessorsButNoStartPredecessors: function () {
		var _0x9f6cx2 = this['getIncomingDependencies']();
		var _0x9f6cx1 = _0x9f6cx2['length'] > 0;
		var _0x9f6cx5 = Ext.ux.Gantt['model']['Dependency']['Type'];
		Ext['Array']['each'](_0x9f6cx2, function (_0x9f6cx3) {
			if (_0x9f6cx3['getType']() === _0x9f6cx5['StartToStart'] || _0x9f6cx3['getType']() === _0x9f6cx5['EndToStart']) {
				return _0x9f6cx1 = false
			}
		});
		return _0x9f6cx1
	}
	, isCompleted: function () {
		return this['getPercentDone']() >= 100
	}
	, isStarted: function () {
		return this['getPercentDone']() > 0
	}
	, isInProgress: function () {
		return this['isStarted']() && !this['isCompleted']()
	}
	, autoCalculateLag: function () {
		var _0x9f6cx1 = this['getDependencyStore']();
		if (!_0x9f6cx1 || !_0x9f6cx1['autoCalculateLag'] || !this['hasIncomingDependencies']()) {
			return
		};
		var _0x9f6cx5 = this['getIncomingDependencies']();
		for (var _0x9f6cx2 = 0; _0x9f6cx2 < _0x9f6cx5['length']; _0x9f6cx2++) {
			_0x9f6cx1['updateAutoCalculatedLag'](_0x9f6cx5[_0x9f6cx2])
		}
	}
});
Ext.define('Ext.ux.Gantt.model.task.Constraints', {
	requires: ['Ext.ux.Gantt.constraint.Base', 'Ext.ux.Gantt.constraint.StartNoEarlierThan', 'Ext.ux.Gantt.constraint.StartNoLaterThan', 'Ext.ux.Gantt.constraint.FinishNoEarlierThan', 'Ext.ux.Gantt.constraint.FinishNoLaterThan', 'Ext.ux.Gantt.constraint.MustStartOn', 'Ext.ux.Gantt.constraint.MustFinishOn', 'Ext.ux.Gantt.constraint.implicit.Dependency', 'Ext.ux.Gantt.constraint.implicit.PotentialConflict']
	, setConstraint: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cx6) {
		var _0x9f6cx7 = this
			, _0x9f6cx1 = _0x9f6cx7['getTaskStore'](true)
			, _0x9f6cx5 = _0x9f6cx1 && _0x9f6cx1['scheduleByConstraints'];

		function _0x9f6cx4() {
			var _0x9f6cx8 = _0x9f6cx7['setConstraintWithoutPropagation'](_0x9f6cx3, _0x9f6cx2);
			_0x9f6cx5 && _0x9f6cx7['scheduleWithoutPropagation']();
			return _0x9f6cx8
		}
		_0x9f6cx7['propagateChanges'](_0x9f6cx4, _0x9f6cx6)
	}
	, setConstraintWithoutPropagation: function (_0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx4 = this
			, _0x9f6cx1 = _0x9f6cx4['getTaskStore'](true)
			, _0x9f6cx5 = _0x9f6cx1 && _0x9f6cx1['scheduleByConstraints']
			, _0x9f6cx7;
		if (_0x9f6cx3) {
			_0x9f6cx7 = Ext.ux.Gantt['constraint']['Base']['getConstraintClass'](_0x9f6cx3)
		};
		if (!_0x9f6cx2 && _0x9f6cx7) {
			_0x9f6cx2 = _0x9f6cx7['getInitialConstraintDate'](_0x9f6cx4, _0x9f6cx2)
		};
		_0x9f6cx4['beginEdit']();
		_0x9f6cx4['set'](_0x9f6cx4['constraintTypeField'], _0x9f6cx3 || '');
		_0x9f6cx4['set'](_0x9f6cx4['constraintDateField'], _0x9f6cx2);
		if (_0x9f6cx5) {
			_0x9f6cx1['resetEarlyDates']();
			_0x9f6cx1['resetLateDates']()
		};
		_0x9f6cx4['endEdit']();
		return true
	}
	, setConstraintType: function (_0x9f6cx1, _0x9f6cx2) {
		this['setConstraint'](_0x9f6cx1, this['getConstraintDate'](), _0x9f6cx2)
	}
	, setConstraintTypeWithoutPropagation: function (_0x9f6cx1, _0x9f6cx2) {
		this['setConstraintWithoutPropagation'](_0x9f6cx1, this['getConstraintDate'](), _0x9f6cx2)
	}
	, setConstraintDate: function (_0x9f6cx1, _0x9f6cx2) {
		this['setConstraint'](this['getConstraintType'](), _0x9f6cx1, _0x9f6cx2)
	}
	, setConstraintDateWithoutPropagation: function (_0x9f6cx1) {
		this['setConstraintWithoutPropagation'](this['getConstraintType'](), _0x9f6cx1)
	}
	, hasConstraint: function () {
		return !!this['getConstraintType']()
	}
	, getConstraintClass: function () {
		return Ext.ux.Gantt['constraint']['Base']['getConstraintClass'](this['getConstraintType']())
	}
	, isConstraintSatisfied: function () {
		var _0x9f6cx1 = this;
		return !_0x9f6cx1['hasConstraint']() || _0x9f6cx1['getConstraintClass']()['isSatisfied'](_0x9f6cx1, _0x9f6cx1['getConstraintDate']())
	}
	, getDependencyConstraintClass: function () {
		return Ext.ux.Gantt['constraint']['implicit']['Dependency']
	}
	, getPotentialConflictConstraintClass: function () {
		return Ext.ux.Gantt['constraint']['implicit']['PotentialConflict']
	}
	, isDependencyConstraintSatisfied: function () {
		var _0x9f6cx2 = this['getTaskStore'](true)
			, _0x9f6cx1 = _0x9f6cx2 && _0x9f6cx2['checkDependencyConstraint'];
		return !_0x9f6cx1 || this['getDependencyConstraintClass']()['isSatisfied'](this)
	}
	, getConstraintClasses: function () {
		return [this['getConstraintClass']()]
	}
	, verifyConstraints: function (_0x9f6cx1) {
		return this['doVerifyConstraints'](this['getConstraintClasses'](), _0x9f6cx1)
	}
	, doVerifyConstraints: function (_0x9f6cx4, _0x9f6cx2) {
		var _0x9f6cx7 = this
			, _0x9f6cx6 = _0x9f6cx7['getTaskStore'](true)
			, _0x9f6cx1 = _0x9f6cx6 && _0x9f6cx6['hasListener']('constraintconflict')
			, _0x9f6cx3, _0x9f6cxa, _0x9f6cx8, _0x9f6cxc;
		!_0x9f6cx2 || Ext['isFunction'](_0x9f6cx2) || Ext['Error']['raise']('can\'t verify task\'s constraint, resultion callback is invalid!');
		for (var _0x9f6cx5 = 0; _0x9f6cx5 < _0x9f6cx4['length']; _0x9f6cx5++) {
			_0x9f6cx8 = _0x9f6cx4[_0x9f6cx5];
			if (_0x9f6cx8 && _0x9f6cx8['hasThisConstraintApplied'](_0x9f6cx7)) {
				_0x9f6cxa = _0x9f6cx8['isSatisfied'](_0x9f6cx7, _0x9f6cx7['getConstraintDate']());
				if (!_0x9f6cxa && _0x9f6cx8['canResolve'](_0x9f6cx7, _0x9f6cx7['getConstraintDate']())) {
					_0x9f6cx8['resolve'](_0x9f6cx7, _0x9f6cx7['getConstraintDate']());
					_0x9f6cxa = true
				}
			}
			else {
				_0x9f6cxa = true
			};
			_0x9f6cxc = _0x9f6cx2 && Ext['Function']['pass'](_0x9f6cx2, [_0x9f6cxa]);
			if (!_0x9f6cxa && _0x9f6cx8) {
				_0x9f6cx3 = _0x9f6cx8['getResolution'](_0x9f6cxc, _0x9f6cx7, null);
				if (_0x9f6cx1) {
					_0x9f6cx6['fireEvent']('constraintconflict', _0x9f6cx7, _0x9f6cx3)
				}
				else {
					_0x9f6cx3['defaultAction']()
				};
				break
			}
		};
		if (_0x9f6cxa && _0x9f6cxc) {
			_0x9f6cxc(false)
		};
		return _0x9f6cxa
	}
});
Ext.define('Ext.ux.Gantt.model.task.Splittable', {
	uses: ['Ext.ux.Gantt.model.TaskSegment']
	, segmentsTrackingSuspended: 0
	, changingTaskBySegments: false
	, segmentsSnapshot: null
	, segmentsProjection: null
	, getFirstSegment: function () {
		var _0x9f6cx1 = this['getSegments']();
		return _0x9f6cx1 && _0x9f6cx1[0]
	}
	, getLastSegment: function () {
		var _0x9f6cx1 = this['getSegments']();
		return _0x9f6cx1 && _0x9f6cx1[_0x9f6cx1['length'] - 1]
	}
	, normalizeSegments: function () {
		var _0x9f6cx1 = this['getSegments']();
		this['suspendSegmentsTracking']();
		_0x9f6cx1['sort'](function (_0x9f6cx3, _0x9f6cx5) {
			if (!_0x9f6cx3['normalized']) {
				_0x9f6cx3['normalize']()
			};
			if (!_0x9f6cx5['normalized']) {
				_0x9f6cx5['normalize']()
			};
			return _0x9f6cx3['getStartDate']() > _0x9f6cx5['getStartDate']() ? 1 : -1
		});
		this['mergeOverlappedSegments']();
		if (this['getSegments']()) {
			this['data'][this['durationField']] = this['getSegmentsDuration']()
		};
		this['resumeSegmentsTracking']()
	}
	, updateSegmentsDates: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		if (!this['isSegmented']()) {
			return
		};
		this['suspendSegmentsTracking']();
		_0x9f6cx1 = Ext['apply']({
			useAbsoluteOffset: false
		}, _0x9f6cx1);
		_0x9f6cx1['isForward'] = _0x9f6cx1['isForward'] !== false;
		var _0x9f6cx2 = false;
		this['forEachSegment'](function (_0x9f6cx5) {
			_0x9f6cx5['updateDatesByOffsets'](_0x9f6cx1);
			_0x9f6cx2 = _0x9f6cx2 || Boolean(_0x9f6cx5['modified'])
		}, _0x9f6cx1['isForward']);
		if (_0x9f6cx2) {
			this['set'](this['segmentsField'], this['getSegments']()['slice']())
		};
		this['resumeSegmentsTracking']()
	}
	, getSegmentIntervalsForRange: function (_0x9f6cx8, _0x9f6cx3, _0x9f6cx6) {
		_0x9f6cx6 = _0x9f6cx6 || this['getSegments']();
		if (!_0x9f6cx6) {
			return
		};
		var _0x9f6cx2 = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cxa = [];
		for (var _0x9f6cx7 = 0, _0x9f6cx4 = _0x9f6cx6['length']; _0x9f6cx7 < _0x9f6cx4; _0x9f6cx7++) {
			var _0x9f6cx5 = _0x9f6cx6[_0x9f6cx7]
				, _0x9f6cxc = _0x9f6cx5['getStartDate']()
				, _0x9f6cx1 = _0x9f6cx5['getEndDate']();
			if (_0x9f6cx2['intersectSpans'](_0x9f6cx8, _0x9f6cx3, _0x9f6cxc, _0x9f6cx1)) {
				_0x9f6cxa['push']([_0x9f6cx2['constrain'](_0x9f6cxc, _0x9f6cx8, _0x9f6cx3) - 0, _0x9f6cx2['constrain'](_0x9f6cx1, _0x9f6cx8, _0x9f6cx3) - 0])
			}
		};
		return _0x9f6cxa['length'] && _0x9f6cxa || null
	}
	, getSegmentByDate: function (_0x9f6cx3, _0x9f6cx5) {
		_0x9f6cx5 = _0x9f6cx5 || this['getSegments']();
		if (!_0x9f6cx5) {
			return
		};
		for (var _0x9f6cx4 = 0, _0x9f6cx1 = _0x9f6cx5['length']; _0x9f6cx4 < _0x9f6cx1; _0x9f6cx4++) {
			var _0x9f6cx2 = _0x9f6cx5[_0x9f6cx4];
			if (_0x9f6cx3 >= _0x9f6cx2['getStartDate']() && _0x9f6cx3 < _0x9f6cx2['getEndDate']()) {
				return _0x9f6cx2
			}
		}
	}
	, constrainSegments: function (_0x9f6cx3) {
		if (this['changingTaskBySegments']) {
			return
		};
		_0x9f6cx3 = _0x9f6cx3 || {};
		var _0x9f6cxd = this['getSegments']();
		if (!_0x9f6cxd) {
			return
		};
		var _0x9f6cx5 = this['getDuration']('MILLI')
			, _0x9f6cx11 = _0x9f6cx3['unit'] || this['getDurationUnit']()
			, _0x9f6cx8 = _0x9f6cx3['duration']
			, _0x9f6cx2 = this['getStartDate']()
			, _0x9f6cx10 = this['getEndDate']()
			, _0x9f6cx17 = this['getUnitConverter']();
		if (!_0x9f6cx2 || (!_0x9f6cx10 && !_0x9f6cx5 && !_0x9f6cx8)) {
			this['set'](this['segmentsField'], null);
			return
		};
		if (_0x9f6cx8) {
			_0x9f6cx8 = _0x9f6cx17['convertDurationToMs'](_0x9f6cx8, _0x9f6cx11)
		}
		else {
			if (!_0x9f6cx10) {
				_0x9f6cx8 = _0x9f6cx5
			}
		};
		this['suspendSegmentsTracking']();
		_0x9f6cxd[0]['setStartDateWithoutPropagation'](this['getStartDate'](), false);
		var _0x9f6cxe = []
			, _0x9f6cxc = _0x9f6cx8
			, _0x9f6cxb, _0x9f6cx1;
		var _0x9f6cxa;
		if (_0x9f6cx8) {
			_0x9f6cxa = function () {
				return _0x9f6cxc <= 0
			}
		}
		else {
			_0x9f6cxa = function (_0x9f6cx9) {
				return _0x9f6cx9['getStartDate']() >= _0x9f6cx10
			}
		};
		for (var _0x9f6cx12 = 0, _0x9f6cxf = _0x9f6cxd['length']; _0x9f6cx12 < _0x9f6cxf; _0x9f6cx12++) {
			_0x9f6cxb = _0x9f6cxd[_0x9f6cx12];
			if (_0x9f6cxa(_0x9f6cxb)) {
				_0x9f6cxe['push']['apply'](_0x9f6cxe, _0x9f6cxd['slice'](_0x9f6cx12));
				break
			};
			_0x9f6cxc -= _0x9f6cxb['getDuration']('MILLI');
			_0x9f6cx1 = _0x9f6cxb
		};
		this['removeSegments'](_0x9f6cxe);
		if (_0x9f6cxd['length'] < 2) {
			this['set'](this['segmentsField'], null)
		}
		else {
			var _0x9f6cx7 = this['getLastSegment']();
			var _0x9f6cx14 = false;
			if (_0x9f6cx8) {
				if (_0x9f6cxc) {
					_0x9f6cx7['setDurationWithoutPropagation'](_0x9f6cx17['convertMSDurationToUnit'](_0x9f6cx7['getEndOffset']() - _0x9f6cx7['getStartOffset']() + _0x9f6cxc, _0x9f6cx7['getDurationUnit']()));
					_0x9f6cx14 = true
				}
			}
			else {
				if (_0x9f6cx7['getEndDate']() - _0x9f6cx10) {
					_0x9f6cx7['setEndDateWithoutPropagation'](_0x9f6cx10, false);
					_0x9f6cx14 = true
				}
			};
			var _0x9f6cx6 = this['getTaskStore'](true)
				, _0x9f6cx4 = _0x9f6cx6 && _0x9f6cx6['isProjecting']();
			if ((_0x9f6cxe['length'] || _0x9f6cx14) && (_0x9f6cx4 || !this['modified'] || !this['modified'][this['segmentsField']])) {
				this['set'](this['segmentsField'], this['getSegments']()['slice']())
			}
		};
		this['resumeSegmentsTracking']()
	}
	, forEachSegment: function (_0x9f6cx2, _0x9f6cx4, _0x9f6cx3, _0x9f6cx1) {
		if (!_0x9f6cx2) {
			return
		};
		_0x9f6cx1 = _0x9f6cx1 || this;
		var _0x9f6cx7, _0x9f6cx5;
		if (_0x9f6cx4 !== false) {
			_0x9f6cx7 = 'getNextSegment';
			_0x9f6cx5 = _0x9f6cx3 || this['getFirstSegment']()
		}
		else {
			_0x9f6cx7 = 'getPrevSegment';
			_0x9f6cx5 = _0x9f6cx3 || this['getLastSegment']()
		};
		while (_0x9f6cx5) {
			if (_0x9f6cx2['call'](_0x9f6cx1, _0x9f6cx5) === false) {
				return
			};
			_0x9f6cx5 = _0x9f6cx5[_0x9f6cx7]['call'](_0x9f6cx5)
		}
	}
	, split: function (_0x9f6cx6, _0x9f6cx3, _0x9f6cx5, _0x9f6cx7, _0x9f6cx4) {
		var _0x9f6cx2 = this
			, _0x9f6cx1;
		_0x9f6cx2['propagateChanges'](function () {
			return _0x9f6cx2['splitWithoutPropagation'](_0x9f6cx6, _0x9f6cx3, _0x9f6cx5, _0x9f6cx7, function _0x9f6cx8(_0x9f6cx9) {
				_0x9f6cx1 = _0x9f6cx9
			})
		}, function (_0x9f6cx9, _0x9f6cx8) {
			_0x9f6cx9 && _0x9f6cx1 && _0x9f6cx1();
			_0x9f6cx4 && _0x9f6cx4(_0x9f6cx9, _0x9f6cx8)
		})
	}
	, splitWithoutPropagation: function (_0x9f6cx11, _0x9f6cx1, _0x9f6cx13, _0x9f6cxd, _0x9f6cx6) {
		var _0x9f6cx18 = this;
		if (_0x9f6cxd !== true && _0x9f6cxd !== false) {
			var _0x9f6cx9 = _0x9f6cx18['getTaskStore'](true);
			_0x9f6cxd = _0x9f6cx9 ? _0x9f6cx9['skipWeekendsDuringDragDrop'] : false
		};
		if (!_0x9f6cx11 || !_0x9f6cx18['isLeaf']() || _0x9f6cx18['isMilestone']()) {
			return
		};
		var _0x9f6cx3 = _0x9f6cx18['getStartDate']()
			, _0x9f6cx10 = _0x9f6cx18['getEndDate']();
		if (!_0x9f6cx3 || !_0x9f6cx10 || (_0x9f6cx3 >= _0x9f6cx11) || (_0x9f6cx11 >= _0x9f6cx10)) {
			return
		};
		var _0x9f6cxf = _0x9f6cx18['getSegments']()
			, _0x9f6cx2;
		var _0x9f6cx4 = _0x9f6cx18['buildSegmentsSnapshot'](_0x9f6cxf);
		if (_0x9f6cxf) {
			_0x9f6cx2 = _0x9f6cx18['getSegmentByDate'](_0x9f6cx11);
			if (!_0x9f6cx2) {
				return
			}
		}
		else {
			_0x9f6cxf = []
		};
		_0x9f6cx1 = _0x9f6cx1 || 1;
		_0x9f6cx13 = _0x9f6cx13 || this['getDurationUnit']();
		var _0x9f6cx16 = new Date(_0x9f6cx11)
			, _0x9f6cx14 = _0x9f6cx16
			, _0x9f6cxa = _0x9f6cx16
			, _0x9f6cx12 = _0x9f6cx18['getUnitConverter']()['convertDurationToMs'](_0x9f6cx1, _0x9f6cx13);
		if (_0x9f6cxd) {
			_0x9f6cxa = _0x9f6cx18['skipNonWorkingTime'](_0x9f6cxa, true, true);
			_0x9f6cx14 = _0x9f6cx18['skipNonWorkingTime'](_0x9f6cx14, false, true)
		};
		var _0x9f6cx17 = _0x9f6cx18['getDurationUnit']()
			, _0x9f6cx7 = Ext['ClassManager']['get'](_0x9f6cx18['segmentClassName'])['prototype']
			, _0x9f6cxc, _0x9f6cx15, _0x9f6cxb;
		_0x9f6cx18['suspendSegmentsTracking']();
		var _0x9f6cx8 = true;
		if (!_0x9f6cx2) {
			_0x9f6cxc = _0x9f6cx18['calculateDuration'](_0x9f6cx3, _0x9f6cx14);
			_0x9f6cx15 = _0x9f6cx18['getDuration']() - _0x9f6cxc;
			_0x9f6cxb = {
				task: _0x9f6cx18
			};
			_0x9f6cxb[_0x9f6cx7['startDateField']] = _0x9f6cx3;
			_0x9f6cxb[_0x9f6cx7['durationField']] = _0x9f6cxc;
			_0x9f6cxb[_0x9f6cx7['durationUnitField']] = _0x9f6cx17;
			_0x9f6cxf['push'](Ext['create'](_0x9f6cx18['segmentClassName'], _0x9f6cxb))
		}
		else {
			_0x9f6cxc = _0x9f6cx18['calculateDuration'](_0x9f6cx2['getStartDate'](), _0x9f6cx14, _0x9f6cx17);
			_0x9f6cx15 = _0x9f6cx2['getDuration'](_0x9f6cx17) - _0x9f6cxc;
			_0x9f6cx8 = !!_0x9f6cxc;
			var _0x9f6cx5;
			if (_0x9f6cx8) {
				_0x9f6cx2['setEndDateWithoutPropagation'](_0x9f6cx14, false, _0x9f6cxd);
				_0x9f6cx5 = _0x9f6cx2['getNextSegment']()
			}
			else {
				_0x9f6cx5 = _0x9f6cx2
			};
			if (_0x9f6cx5) {
				_0x9f6cx18['forEachSegment'](function (_0x9f6cx1b) {
					_0x9f6cx1b['setStartEndOffset'](_0x9f6cx1b['getStartOffset']() + _0x9f6cx12, _0x9f6cx1b['getEndOffset']() + _0x9f6cx12);
					_0x9f6cx1b['updateDatesByOffsets']()
				}, true, _0x9f6cx5)
			}
		};
		if (_0x9f6cx8) {
			_0x9f6cxa = _0x9f6cx18['skipWorkingTime'](_0x9f6cxa, _0x9f6cx12);
			if (_0x9f6cxd) {
				_0x9f6cxa = _0x9f6cx18['skipNonWorkingTime'](_0x9f6cxa)
			};
			_0x9f6cxb = {
				prevSegment: _0x9f6cx2 || _0x9f6cxf[0]
				, task: _0x9f6cx18
			};
			_0x9f6cxb[_0x9f6cx7['startDateField']] = _0x9f6cxa;
			_0x9f6cxb[_0x9f6cx7['durationField']] = _0x9f6cx15;
			_0x9f6cxb[_0x9f6cx7['durationUnitField']] = _0x9f6cx17;
			var _0x9f6cxe = Ext['create'](_0x9f6cx18['segmentClassName'], _0x9f6cxb);
			if (_0x9f6cx2) {
				Ext['Array']['insert'](_0x9f6cxf, Ext['Array']['indexOf'](_0x9f6cxf, _0x9f6cx2) + 1, [_0x9f6cxe])
			}
			else {
				_0x9f6cxf['push'](_0x9f6cxe)
			}
		};
		_0x9f6cx18['resumeSegmentsTracking']();
		_0x9f6cx6 && _0x9f6cx6(function () {
			_0x9f6cx18['rollbackSegmentsToSnapshot'](_0x9f6cx4);
			_0x9f6cx18['onSegmentsChanged'](null, null)
		});
		if (!_0x9f6cx2) {
			_0x9f6cx18['setSegmentsWithoutPropagation'](_0x9f6cxf)
		}
		else {
			_0x9f6cx18['onSegmentsChanged'](null, null)
		};
		return true
	}
	, merge: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx5 = this;
		_0x9f6cx5['propagateChanges'](function () {
			return _0x9f6cx5['mergeWithoutPropagation'](_0x9f6cx2, _0x9f6cx1)
		}, _0x9f6cx3)
	}
	, mergeWithoutPropagation: function (_0x9f6cx5, _0x9f6cx1) {
		if (!this['isSegmented']() || !_0x9f6cx5 || !_0x9f6cx1) {
			return
		};
		var _0x9f6cx3, _0x9f6cx2;
		if (_0x9f6cx5['getStartOffset']() > _0x9f6cx1['getStartOffset']()) {
			_0x9f6cx3 = _0x9f6cx1;
			_0x9f6cx2 = _0x9f6cx5
		}
		else {
			_0x9f6cx3 = _0x9f6cx5;
			_0x9f6cx2 = _0x9f6cx1
		};
		_0x9f6cx3['setEndDateWithoutPropagation'](_0x9f6cx2['getEndDate'](), false);
		return true
	}
	, suspendSegmentsTracking: function () {
		this['segmentsTrackingSuspended']++
	}
	, resumeSegmentsTracking: function () {
		this['segmentsTrackingSuspended']--
	}
	, getSegmentsDuration: function (_0x9f6cx4) {
		_0x9f6cx4 = _0x9f6cx4 || this['getDurationUnit']();
		var _0x9f6cx2 = this['getSegments']();
		var _0x9f6cx7 = 0;
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx2['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			var _0x9f6cx3 = _0x9f6cx2[_0x9f6cx5];
			_0x9f6cx7 += _0x9f6cx3['getEndOffset']() - _0x9f6cx3['getStartOffset']()
		};
		return this['getUnitConverter']()['convertMSDurationToUnit'](_0x9f6cx7, _0x9f6cx4)
	}
	, mergeOverlappedSegments: function (_0x9f6cx6) {
		var _0x9f6cx2 = this['getSegments']();
		if (_0x9f6cx2) {
			var _0x9f6cx3 = []
				, _0x9f6cx4 = _0x9f6cx2[0]
				, _0x9f6cx7;
			for (var _0x9f6cx5 = 1, _0x9f6cx1 = _0x9f6cx2['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
				_0x9f6cx7 = _0x9f6cx2[_0x9f6cx5];
				if (_0x9f6cx7['getStartOffset']() <= _0x9f6cx4['getEndOffset']()) {
					_0x9f6cx3['push'](_0x9f6cx7);
					if (_0x9f6cx7['getEndOffset']() > _0x9f6cx4['getEndOffset']()) {
						_0x9f6cx4['setEndDateWithoutPropagation'](_0x9f6cx7['getEndDate'](), false)
					}
				}
				else {
					_0x9f6cx4 = _0x9f6cx7
				}
			};
			this['removeSegments'](_0x9f6cx3);
			if (_0x9f6cx2['length'] < 2 && !_0x9f6cx6) {
				this['setSegmentsWithoutPropagation'](null)
			}
		}
	}
	, onSegmentEditBegin: function (_0x9f6cx1) {
		this['getTreeStore']()['onSegmentEditBegin'](this, _0x9f6cx1);
		this['snapshotSegments']()
	}
	, onSegmentEditEnd: function (_0x9f6cx1) {
		this['getTreeStore']()['onSegmentEditEnd'](this, _0x9f6cx1)
	}
	, onSegmentsChanged: function (_0x9f6cx5, _0x9f6cx2) {
		if (this['segmentsTrackingSuspended']) {
			return
		};
		this['changingTaskBySegments'] = true;
		this['suspendSegmentsTracking']();
		this['mergeOverlappedSegments'](true);
		if (_0x9f6cx5 && _0x9f6cx2 && _0x9f6cx5['durationField'] in _0x9f6cx2) {
			this['setDurationWithoutPropagation'](this['getSegmentsDuration']())
		}
		else {
			if (this['getSchedulingMode']() == 'EffortDriven') {
				this['setStartEndDateWithoutPropagation'](this['getStartDate'](), this['recalculateEndDate']())
			}
			else {
				this['setStartDateWithoutPropagation'](this['getStartDate']())
			}
		};
		var _0x9f6cx1 = this['getSegments']();
		this['set'](this['segmentsField'], _0x9f6cx1 && _0x9f6cx1['slice']() || null);
		this['resumeSegmentsTracking']();
		this['changingTaskBySegments'] = false
	}
	, removeSegments: function (_0x9f6cx3) {
		var _0x9f6cx2 = this['getSegments']();
		if (!_0x9f6cx2 || !_0x9f6cx3 || !_0x9f6cx3['length']) {
			return
		};
		if (!Ext['isArray'](_0x9f6cx3)) {
			_0x9f6cx3 = [_0x9f6cx3]
		};
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx3['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			Ext['Array']['remove'](_0x9f6cx2, _0x9f6cx3[_0x9f6cx5])
		};
		this['onSegmentsChanged']()
	}
	, setSegments: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['propagateChanges'](function () {
			return _0x9f6cx1['setSegmentsWithoutPropagation'](_0x9f6cx2)
		}, _0x9f6cx5)
	}
	, setSegmentsWithoutPropagation: function (_0x9f6cx1) {
		this['onSegmentEditBegin']();
		this['suspendSegmentsTracking']();
		this['set'](this['segmentsField'], this['processSegmentsValue'](_0x9f6cx1));
		this['resumeSegmentsTracking']();
		this['onSegmentsChanged']();
		this['onSegmentEditEnd']();
		return true
	}
	, processSegmentsValue: function (_0x9f6cx7) {
		var _0x9f6cx2, _0x9f6cx4, _0x9f6cx3;
		if (_0x9f6cx7) {
			_0x9f6cx7 = []['concat'](_0x9f6cx7);
			_0x9f6cx2 = [];
			for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx7['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
				_0x9f6cx4 = _0x9f6cx7[_0x9f6cx5];
				if (!(_0x9f6cx4 instanceof Ext.ux.Gantt['model']['TaskSegment'])) {
					_0x9f6cx4 = Ext['create'](this['segmentClassName'], Ext['apply'](_0x9f6cx4, {
						task: this
					}))
				};
				_0x9f6cx2['push'](_0x9f6cx4);
				_0x9f6cx3 = _0x9f6cx4
			};
			_0x9f6cx7 = _0x9f6cx2 && _0x9f6cx2['length'] > 1 && _0x9f6cx2 || null
		};
		return _0x9f6cx7
	}
	, isSegmented: function () {
		return Boolean(this['getSegments']())
	}
	, getSegment: function (_0x9f6cx1) {
		return this['getSegments']()[_0x9f6cx1]
	}
	, rejectSegmentsProjection: function () {
		var _0x9f6cx3 = this['getTaskStore'](true)['getProjectionLevel']();
		var _0x9f6cx2, _0x9f6cx5;
		if (this['segmentsProjection']) {
			var _0x9f6cx1;
			for (_0x9f6cx5 = _0x9f6cx3; _0x9f6cx5 >= 0; _0x9f6cx5--) {
				if (_0x9f6cx2 = this['segmentsProjection'][_0x9f6cx5]) {
					_0x9f6cx1 = _0x9f6cx5;
					break
				}
			};
			if (_0x9f6cx1 === _0x9f6cx3) {
				delete this['segmentsProjection'][_0x9f6cx1]
			}
		};
		if (_0x9f6cx2) {
			this['rollbackSegmentsToSnapshot'](_0x9f6cx2)
		}
	}
	, commitSegmentsProjection: function () {
		var _0x9f6cx1 = this['getTaskStore'](true)
			, _0x9f6cx2 = _0x9f6cx1 && _0x9f6cx1['getProjectionLevel']();
		if (this['segmentsProjection']) {
			delete this['segmentsProjection'][_0x9f6cx2]
		}
	}
	, rollbackSegmentsToSnapshot: function (_0x9f6cx1) {
		this['data'][this['segmentsField']] = _0x9f6cx1 && Ext['Array']['map'](_0x9f6cx1, function (_0x9f6cx2) {
			return _0x9f6cx2 && _0x9f6cx2[0]['readSnapshot'](_0x9f6cx2)
		})
	}
	, buildSegmentsSnapshot: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['getSegments']();
		return _0x9f6cx1 && Ext['Array']['map'](_0x9f6cx1, function (_0x9f6cx2) {
			return _0x9f6cx2 && _0x9f6cx2['buildSnapshot']()
		})
	}
	, getSegmentsSnapshot: function () {
		return this['segmentsSnapshot']
	}
	, setSegmentsSnapshot: function (_0x9f6cx1) {
		this['segmentsSnapshot'] = _0x9f6cx1;
		this['hasSegmentsSnapshot'] = true
	}
	, resetSegmentsSnapshot: function () {
		this['segmentsSnapshot'] = null;
		this['hasSegmentsSnapshot'] = false
	}
	, snapshotSegments: function () {
		var _0x9f6cx5 = this['getTaskStore'](true)
			, _0x9f6cx2 = this['getSegments']()
			, _0x9f6cx3 = _0x9f6cx5 && _0x9f6cx5['getProjectionLevel']()
			, _0x9f6cx1;
		if (_0x9f6cx3) {
			this['segmentsProjection'] = this['segmentsProjection'] || {};
			_0x9f6cx1 = this['segmentsProjection'][_0x9f6cx3 - 1];
			if (!_0x9f6cx1) {
				_0x9f6cx1 = this['buildSegmentsSnapshot'](_0x9f6cx2);
				this['segmentsProjection'][_0x9f6cx3 - 1] = _0x9f6cx1
			}
		};
		if (!this['hasSegmentsSnapshot']) {
			this['setSegmentsSnapshot'](_0x9f6cx1 || this['buildSegmentsSnapshot'](_0x9f6cx2))
		}
	}
	, commitSegments: function () {
		if (this['rejecting']) {
			return
		};
		this['resetSegmentsSnapshot']();
		var _0x9f6cx2 = this['getSegments']();
		if (_0x9f6cx2) {
			for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx2['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
				_0x9f6cx2[_0x9f6cx5]['commit']()
			}
		}
	}
	, rejectSegments: function () {
		this['hasSegmentsSnapshot'] && this['rollbackSegmentsToSnapshot'](this['getSegmentsSnapshot']());
		this['resetSegmentsSnapshot']();
		var _0x9f6cx2 = this['getSegments']();
		if (_0x9f6cx2) {
			for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx2['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
				_0x9f6cx2[_0x9f6cx5]['reject']()
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.model.task.Effort', {
	calculateActualEffort: function () {
		var _0x9f6cx1 = this['get'](this['effortField']);
		return _0x9f6cx1 != null ? _0x9f6cx1 * this['getPercentDone']() / 100 : null
	}
	, calculateEffortVariance: function () {
		var _0x9f6cx1 = this['get'](this['effortField']);
		return _0x9f6cx1 != null ? _0x9f6cx1 - this['getBaselineEffort']() : null
	}
	, setBaselineEffort: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this
			, _0x9f6cx3 = _0x9f6cx1['getEffortUnit']();
		_0x9f6cx1['beginEdit']();
		_0x9f6cx1['set'](_0x9f6cx1['baselineEffortField'], _0x9f6cx1['getUnitConverter']()['convertDuration'](_0x9f6cx5, _0x9f6cx2 || _0x9f6cx3, _0x9f6cx3));
		_0x9f6cx1['setEffortVariance'](_0x9f6cx1['calculateEffortVariance']());
		_0x9f6cx1['endEdit']();
		return true
	}
	, setActualEffort: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['propagateChanges'](function () {
			return _0x9f6cx1['setActualEffortWithoutPropagation'](_0x9f6cx5, _0x9f6cx2)
		}, _0x9f6cx3)
	}
	, processActualEffortValue: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getEffort']();
		if (_0x9f6cx1 > _0x9f6cx2) {
			if (!_0x9f6cx2 && _0x9f6cx5['getPercentDone']()) {
				_0x9f6cx5['set'](_0x9f6cx5['effortField'], _0x9f6cx1 * 100 / _0x9f6cx5['getPercentDone']())
			}
			else {
				_0x9f6cx5['set'](_0x9f6cx5['effortField'], _0x9f6cx1)
			};
			_0x9f6cx5['setEffortVariance'](_0x9f6cx5['calculateEffortVariance']())
		};
		return _0x9f6cx1
	}
	, setActualEffortWithoutPropagation: function (_0x9f6cx5, _0x9f6cx7) {
		var _0x9f6cx4 = this
			, _0x9f6cx6 = _0x9f6cx4['getEffortUnit']()
			, _0x9f6cx2 = _0x9f6cx4['getUnitConverter']();
		_0x9f6cx5 = _0x9f6cx2['convertDuration'](_0x9f6cx5, _0x9f6cx7 || _0x9f6cx6, _0x9f6cx6);
		_0x9f6cx4['beginEdit']();
		_0x9f6cx5 = _0x9f6cx4['processActualEffortValue'](_0x9f6cx5);
		_0x9f6cx4['set'](_0x9f6cx4['actualEffortField'], _0x9f6cx5);
		var _0x9f6cx3 = _0x9f6cx4['getEffort']()
			, _0x9f6cx1 = _0x9f6cx3 ? Math['min'](100, 100 * _0x9f6cx5 / _0x9f6cx3) : 0;
		_0x9f6cx4['set'](_0x9f6cx4['percentDoneField'], _0x9f6cx1);
		_0x9f6cx4['recalculateCost']();
		_0x9f6cx4['endEdit']();
		return true
	}
});
Ext.define('Ext.ux.Gantt.model.task.Cost', {
	recalculateCost: function () {
		var _0x9f6cx1 = this;
		if (!_0x9f6cx1['autoCalculateCost']) {
			return false
		};
		_0x9f6cx1['beginEdit']();
		_0x9f6cx1['setActualCost'](_0x9f6cx1['calculateActualCost']());
		_0x9f6cx1['setCost'](_0x9f6cx1['calculateCost']());
		_0x9f6cx1['endEdit']();
		return true
	}
	, calculateActualCost: function () {
		var _0x9f6cx5 = this['getEffort']()
			, _0x9f6cx2 = this['getActualEffort']()
			, _0x9f6cx1 = 0;
		if (_0x9f6cx5) {
			_0x9f6cx1 = this['calculateResourcesCost'](true) * _0x9f6cx2 / _0x9f6cx5 + this['calculateResourcesPerUseCost']()
		};
		return _0x9f6cx1
	}
	, calculateCostVariance: function () {
		return this['getCost']() - this['getBaselineCost']()
	}
	, calculateCost: function () {
		var _0x9f6cx7 = this
			, _0x9f6cx4 = _0x9f6cx7['getEffort']()
			, _0x9f6cx2 = 0;
		if (_0x9f6cx4) {
			var _0x9f6cx3 = this['getActualEffort']()
				, _0x9f6cx1 = this['getActualCost']();
			var _0x9f6cx6 = _0x9f6cx4 - _0x9f6cx3
				, _0x9f6cx5 = _0x9f6cx7['calculateResourcesCost'](!!_0x9f6cx1) * _0x9f6cx6 / _0x9f6cx4;
			_0x9f6cx2 = _0x9f6cx1 + _0x9f6cx5
		};
		return _0x9f6cx2
	}
	, setBaselineCost: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['beginEdit']();
		_0x9f6cx1['set'](_0x9f6cx1['baselineCostField'], _0x9f6cx2);
		_0x9f6cx1['setCostVariance'](_0x9f6cx1['calculateCostVariance']());
		_0x9f6cx1['endEdit']();
		return true
	}
	, setCost: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['beginEdit']();
		_0x9f6cx1['set'](_0x9f6cx1['costField'], _0x9f6cx2);
		_0x9f6cx1['setCostVariance'](_0x9f6cx1['calculateCostVariance']());
		_0x9f6cx1['endEdit']();
		return true
	}
	, calculateResourcesCost: function (_0x9f6cx6) {
		var _0x9f6cxc = 0
			, _0x9f6cx8 = this['getEffort']();
		if (_0x9f6cx8) {
			var _0x9f6cx1 = this['getAssignments']()
				, _0x9f6cx5 = 0
				, _0x9f6cx4 = 0;
			for (var _0x9f6cx7 = 0; _0x9f6cx7 < _0x9f6cx1['length']; _0x9f6cx7++) {
				var _0x9f6cx2 = _0x9f6cx1[_0x9f6cx7]
					, _0x9f6cx3 = _0x9f6cx2['getResource']();
				if (_0x9f6cx3 && _0x9f6cx2['getTask']()) {
					_0x9f6cx5 += _0x9f6cx2['getCost']();
					_0x9f6cx4 += _0x9f6cx3['getPerUseCost']()
				}
			};
			_0x9f6cxc = _0x9f6cx5;
			if (!_0x9f6cx6) {
				_0x9f6cxc += _0x9f6cx4
			}
		};
		return _0x9f6cxc
	}
	, calculateResourcesPerUseCost: function () {
		var _0x9f6cx2 = this['getAssignments']()
			, _0x9f6cx1 = 0;
		for (var _0x9f6cx5 = 0; _0x9f6cx5 < _0x9f6cx2['length']; _0x9f6cx5++) {
			var _0x9f6cx3 = _0x9f6cx2[_0x9f6cx5]['getResource']();
			if (_0x9f6cx3) {
				_0x9f6cx1 += _0x9f6cx3['getPerUseCost']()
			}
		};
		return _0x9f6cx1
	}
});
Ext.define('Ext.ux.Gantt.model.Task', {
	extend: 'Ext.ux.Scheduler.model.Range'
	, alias: 'gntmodel.event'
	, requires: ['Ext.ux.Scheduler.util.Date', 'Ext.data.NodeInterface']
	, uses: ['Ext.ux.Gantt.model.TaskSegment']
	, mixins: ['Ext.ux.Gantt.model.mixin.ProjectableModel', 'Ext.ux.Gantt.model.task.More', 'Ext.ux.Gantt.model.task.Constraints', 'Ext.ux.Gantt.model.task.Splittable', 'Ext.ux.Gantt.model.task.Effort', 'Ext.ux.Gantt.model.task.Cost']
	, segmentClassName: 'Ext.ux.Gantt.model.TaskSegment'
	, idProperty: 'Id'
	, customizableFields: [{
		name: 'Duration'
		, type: 'number'
		, allowNull: true
	}, {
		name: 'Effort'
		, type: 'number'
		, allowNull: true
	}, {
		name: 'EffortUnit'
		, type: 'string'
		, defaultValue: 'h'
	}, {
		name: 'ActualEffort'
		, type: 'number'
		, allowNull: true
	}, {
		name: 'EffortVariance'
		, type: 'number'
		, allowNull: true
	}, {
		name: 'CalendarId'
		, type: 'string'
	}, {
		name: 'Note'
		, type: 'string'
	}, {
		name: 'DurationUnit'
		, type: 'string'
		, defaultValue: 'd'
		, convert: function (_0x9f6cx1) {
			return _0x9f6cx1 || Ext.ux.Scheduler['util']['Date']['DAY']
		}
	}, {
		name: 'PercentDone'
		, type: 'number'
		, defaultValue: 0
	}, {
		name: 'Cost'
		, type: 'number'
		, allowNull: true
	}, {
		name: 'ActualCost'
		, type: 'number'
		, allowNull: true
	}, {
		name: 'CostVariance'
		, type: 'number'
		, allowNull: true
	}, {
		name: 'ConstraintType'
		, type: 'string'
		, defaultValue: ''
	}, {
		name: 'ConstraintDate'
		, type: 'date'
		, dateFormat: 'c'
	}, {
		name: 'ManuallyScheduled'
		, type: 'boolean'
		, defaultValue: false
	}, {
		name: 'SchedulingMode'
		, type: 'string'
		, defaultValue: 'Normal'
	}, {
		name: 'BaselineStartDate'
		, type: 'date'
		, dateFormat: 'c'
	}, {
		name: 'BaselineEndDate'
		, type: 'date'
		, dateFormat: 'c'
	}, {
		name: 'BaselinePercentDone'
		, type: 'int'
		, defaultValue: 0
	}, {
		name: 'BaselineEffort'
		, type: 'number'
		, allowNull: true
	}, {
		name: 'BaselineCost'
		, type: 'number'
		, allowNull: true
	}, {
		name: 'Draggable'
		, type: 'boolean'
		, persist: false
		, defaultValue: true
	}, {
		name: 'Resizable'
		, persist: false
		, defaultValue: ''
	}, {
		name: 'ReadOnly'
		, persist: false
		, type: 'bool'
		, defaultValue: false
	}, {
		name: 'Rollup'
		, type: 'boolean'
		, defaultValue: false
	}, {
		name: 'Segments'
		, persist: true
		, convert: function (_0x9f6cx2, _0x9f6cx1) {
			return _0x9f6cx1['processSegmentsValue'](_0x9f6cx2, _0x9f6cx1)
		}
		, serialize: function (_0x9f6cx1) {
			if (!_0x9f6cx1) {
				return null
			};
			return Ext['Array']['map']([]['concat'](_0x9f6cx1), function (_0x9f6cx2) {
				return _0x9f6cx2['serialize']()
			})
		}
	}, {
		name: 'PhantomId'
		, type: 'string'
	}, {
		name: 'PhantomParentId'
		, type: 'string'
	}, {
		name: 'ShowInTimeline'
		, type: 'bool'
	}, {
		name: 'DeadlineDate'
		, type: 'date'
		, dateFormat: 'c'
	}, {
		name: 'index'
		, type: 'int'
		, persist: true
	}]
	, fields: [{
		name: 'needsReScheduling'
		, type: 'bool'
		, persist: false
	}]
	, constraintTypeField: 'ConstraintType'
	, constraintDateField: 'ConstraintDate'
	, draggableField: 'Draggable'
	, resizableField: 'Resizable'
	, nameField: 'Name'
	, durationField: 'Duration'
	, durationUnitField: 'DurationUnit'
	, effortField: 'Effort'
	, effortUnitField: 'EffortUnit'
	, actualEffortField: 'ActualEffort'
	, effortVarianceField: 'EffortVariance'
	, costField: 'Cost'
	, actualCostField: 'ActualCost'
	, costVarianceField: 'CostVariance'
	, percentDoneField: 'PercentDone'
	, manuallyScheduledField: 'ManuallyScheduled'
	, schedulingModeField: 'SchedulingMode'
	, rollupField: 'Rollup'
	, calendarIdField: 'CalendarId'
	, baselineStartDateField: 'BaselineStartDate'
	, baselineEndDateField: 'BaselineEndDate'
	, baselinePercentDoneField: 'BaselinePercentDone'
	, baselineEffortField: 'BaselineEffort'
	, baselineCostField: 'BaselineCost'
	, noteField: 'Note'
	, segmentsField: 'Segments'
	, readOnlyField: 'ReadOnly'
	, calendar: null
	, dependencyStore: null
	, taskStore: null
	, phantomIdField: 'PhantomId'
	, phantomParentIdField: 'PhantomParentId'
	, showInTimelineField: 'ShowInTimeline'
	, deadlineDateField: 'DeadlineDate'
	, normalized: false
	, recognizedSchedulingModes: ['Normal', 'FixedDuration', 'EffortDriven', 'DynamicAssignment']
	, convertEmptyParentToLeaf: true
	, autoCalculateEffortForParentTask: true
	, autoCalculatePercentDoneForParentTask: true
	, autoCalculateCostForParentTask: true
	, autoCalculateCost: true
	, isHighlighted: false
	, calendarWaitingListener: null
	, childTasksDuration: null
	, completedChildTasksDuration: null
	, totalCount: null
	, predecessors: null
	, successors: null
	, removeChildIsCalledFromReplaceChild: false
	, savedDirty: null
	, useOwnCalendarAsConverter: false
	, constructor: function () {
		this['_singleProp'] = {};
		this['initProjectable']();
		this['callParent'](arguments);
		if (this['phantom']) {
			this['data'][this['phantomIdField']] = this['getId']()
		};
		if (this['id'] === 'root') {
			this['convertEmptyParentToLeaf'] = false
		};
		this['predecessors'] = [];
		this['successors'] = []
	}
	, normalize: function () {
		var _0x9f6cx8 = this['getDurationUnit']()
			, _0x9f6cx5 = this['getStartDate']()
			, _0x9f6cx6 = this['getEndDate']()
			, _0x9f6cx4 = this['data']
			, _0x9f6cxc = this['getTaskStore'](true)
			, _0x9f6cx7 = this['getSchedulingMode']();
		if (_0x9f6cx7 == 'Manual') {
			_0x9f6cx7 = _0x9f6cx4[this['schedulingModeField']] = 'Normal';
			_0x9f6cx4[this['manuallyScheduledField']] = true
		};
		var _0x9f6cx2 = this['endDateField'];
		if (_0x9f6cxc && this['isSegmented']()) {
			this['normalizeSegments']();
			var _0x9f6cxb;
			if (_0x9f6cxb = this['getLastSegment']()) {
				_0x9f6cx6 = _0x9f6cx4[_0x9f6cx2] = _0x9f6cxb['getEndDate']()
			}
		};
		var _0x9f6cx3 = this['getDuration']();
		var _0x9f6cxa = this['effortField'];
		if (_0x9f6cx6 && this['inclusiveEndDate']) {
			var _0x9f6cx13 = this['getField'](_0x9f6cx2)['dateFormat'];
			var _0x9f6cx1 = (_0x9f6cx13 && !Ext['Date']['formatContainsHourInfo'](_0x9f6cx13)) || (_0x9f6cx6['getHours']() === 0 && _0x9f6cx6['getMinutes']() === 0 && _0x9f6cx6['getSeconds']() === 0 && _0x9f6cx6['getMilliseconds']() === 0);
			if (_0x9f6cx1) {
				if (Ext['isNumber'](_0x9f6cx3)) {
					_0x9f6cx6 = _0x9f6cx4[_0x9f6cx2] = this['calculateEndDate'](_0x9f6cx5, _0x9f6cx3, _0x9f6cx8)
				}
				else {
					_0x9f6cx6 = _0x9f6cx4[_0x9f6cx2] = Ext['Date']['add'](_0x9f6cx6, Ext['Date'].DAY, 1)
				}
			}
		};
		if (_0x9f6cx3 == null && _0x9f6cx5 && _0x9f6cx6) {
			_0x9f6cx3 = _0x9f6cx4[this['durationField']] = this['calculateDuration'](_0x9f6cx5, _0x9f6cx6, _0x9f6cx8)
		};
		if ((_0x9f6cx7 == 'Normal' || this['isManuallyScheduled']()) && _0x9f6cx6 == null && _0x9f6cx5 && Ext['isNumber'](_0x9f6cx3)) {
			_0x9f6cx6 = _0x9f6cx4[_0x9f6cx2] = this['calculateEndDate'](_0x9f6cx5, _0x9f6cx3, _0x9f6cx8)
		};
		var _0x9f6cxd = this['get'](_0x9f6cxa)
			, _0x9f6cx9 = this['getEffortUnit']();
		switch (_0x9f6cx7) {
		case 'FixedDuration':
			if (_0x9f6cx6 == null && _0x9f6cx5 && Ext['isNumber'](_0x9f6cx3)) {
				_0x9f6cx6 = _0x9f6cx4[_0x9f6cx2] = this['calculateEndDate'](_0x9f6cx5, _0x9f6cx3, _0x9f6cx8)
			};
			if (_0x9f6cxd == null && _0x9f6cx5 && _0x9f6cx6) {
				_0x9f6cx4[_0x9f6cxa] = this['calculateEffort'](_0x9f6cx5, _0x9f6cx6, _0x9f6cx9)
			};
			break;
		case 'EffortDriven':
			if (_0x9f6cxd == null && _0x9f6cx5 && _0x9f6cx6) {
				_0x9f6cx4[_0x9f6cxa] = this['calculateEffort'](_0x9f6cx5, _0x9f6cx6, _0x9f6cx9)
			};
			if (_0x9f6cx6 == null && _0x9f6cx5 && _0x9f6cxd) {
				_0x9f6cx4[_0x9f6cx2] = this['calculateEffortDrivenEndDate'](_0x9f6cx5, _0x9f6cxd, _0x9f6cx9);
				if (_0x9f6cx3 == null) {
					_0x9f6cx4[this['durationField']] = this['calculateDuration'](_0x9f6cx5, _0x9f6cx4[_0x9f6cx2], _0x9f6cx8)
				}
			};
			break;
		default:
			if (_0x9f6cx6 == null && _0x9f6cx5 && Ext['isNumber'](_0x9f6cx3)) {
				_0x9f6cx6 = _0x9f6cx4[_0x9f6cx2] = this['calculateEndDate'](_0x9f6cx5, _0x9f6cx3, _0x9f6cx8)
			};
			break
		};
		if (this['getActualEffort']() == null) {
			_0x9f6cx4[this['actualEffortField']] = this['calculateActualEffort']()
		};
		if (this['autoCalculateCost']) {
			if (this['getActualCost']() == null) {
				_0x9f6cx4[this['actualCostField']] = this['calculateActualCost']()
			};
			if (this['getCost']() == null) {
				_0x9f6cx4[this['costField']] = this['calculateCost']()
			}
		};
		if (this['getCostVariance']() == null) {
			this['data'][this['costVarianceField']] = this['calculateCostVariance']()
		};
		if (this['getEffortVariance']() == null) {
			this['data'][this['effortVarianceField']] = this['calculateEffortVariance']()
		};
		var _0x9f6cxe = this['getCalendarId']();
		if (_0x9f6cxe) {
			this['setCalendarId'](_0x9f6cxe, true)
		};
		this['normalized'] = true
	}
	, getUnitConverter: function () {
		return this['useOwnCalendarAsConverter'] && this['getCalendar']() || this['getProjectCalendar']()
	}
	, normalizeParent: function () {
		var _0x9f6cxd = this['childNodes'];
		var _0x9f6cx1 = 0;
		var _0x9f6cx3 = 0;
		var _0x9f6cx13 = 0;
		var _0x9f6cx7 = 0;
		var _0x9f6cx6 = 0;
		var _0x9f6cxb = this['autoCalculatePercentDoneForParentTask'];
		var _0x9f6cxc = this['autoCalculateEffortForParentTask'];
		var _0x9f6cx4 = this['autoCalculateCostForParentTask'];
		for (var _0x9f6cx8 = 0; _0x9f6cx8 < _0x9f6cxd['length']; _0x9f6cx8++) {
			var _0x9f6cx5 = _0x9f6cxd[_0x9f6cx8];
			var _0x9f6cx2 = _0x9f6cx5['isLeaf']();
			if (!_0x9f6cx2) {
				_0x9f6cx5['normalizeParent']()
			};
			if (_0x9f6cxc) {
				_0x9f6cx1 += _0x9f6cx5['getEffort']('MILLI')
			};
			if (_0x9f6cx4) {
				_0x9f6cx7 += _0x9f6cx5['getCost']();
				_0x9f6cx6 += _0x9f6cx5['getActualCost']()
			};
			if (_0x9f6cxb) {
				var _0x9f6cxe = _0x9f6cx2 ? _0x9f6cx5['getDuration']('MILLI') || 0 : _0x9f6cx5['childTasksDuration'];
				_0x9f6cx3 += _0x9f6cxe;
				_0x9f6cx13 += _0x9f6cx2 ? _0x9f6cxe * (_0x9f6cx5['getPercentDone']() || 0) : _0x9f6cx5['completedChildTasksDuration']
			}
		};
		if (_0x9f6cxb) {
			this['childTasksDuration'] = _0x9f6cx3;
			this['completedChildTasksDuration'] = _0x9f6cx13;
			var _0x9f6cxa = _0x9f6cx3 ? _0x9f6cx13 / _0x9f6cx3 : 0;
			if (this['getPercentDone']() != _0x9f6cxa) {
				this['data'][this['percentDoneField']] = _0x9f6cxa
			}
		};
		if (_0x9f6cxc) {
			if (this['getEffort']('MILLI') != _0x9f6cx1) {
				this['data'][this['effortField']] = this['getUnitConverter']()['convertMSDurationToUnit'](_0x9f6cx1, this['getEffortUnit']())
			}
		};
		if (_0x9f6cxb && _0x9f6cxc) {
			this['data'][this['actualEffortField']] = this['calculateActualEffort']()
		};
		if (_0x9f6cx4) {
			this['data'][this['actualCostField']] = _0x9f6cx6;
			this['data'][this['costField']] = _0x9f6cx7
		};
		this['data'][this['costVarianceField']] = this['calculateCostVariance']();
		this['data'][this['effortVarianceField']] = this['calculateEffortVariance']()
	}
	, getCalendar: function (_0x9f6cx1) {
		return _0x9f6cx1 ? this['getOwnCalendar']() : this['getOwnCalendar']() || this['parentNode'] && this['parentNode']['getCalendar']() || this['getProjectCalendar']()
	}
	, getOwnCalendar: function () {
		var _0x9f6cx1 = this['get'](this['calendarIdField']);
		return _0x9f6cx1 ? Ext.ux.Gantt['data']['Calendar']['getCalendar'](_0x9f6cx1) : this['calendar']
	}
	, getProject: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = null;
		if (this['isProject']) {
			return this
		};
		this['bubble'](function (_0x9f6cx5) {
			if (_0x9f6cx1 !== _0x9f6cx5 && _0x9f6cx5['isProject']) {
				_0x9f6cx2 = _0x9f6cx5;
				return false
			}
		}, this);
		return _0x9f6cx2
	}
	, getProjectCalendar: function () {
		var _0x9f6cx1 = this['getTaskStore'](true);
		var _0x9f6cx2 = _0x9f6cx1 && _0x9f6cx1['getCalendar']() || this['parentNode'] && this['parentNode']['getProjectCalendar']() || this['isRoot']() && this['calendar'];
		if (!_0x9f6cx2) {
			Ext['Error']['raise']('can\'t find a project calendar in `getProjectCalendar`')
		};
		return _0x9f6cx2
	}
	, setCalendar: function (_0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx5 instanceof Ext.ux.Gantt['data']['Calendar'];
		if (_0x9f6cx1 && !_0x9f6cx5['calendarId']) {
			throw new Error('can\'t set calendar w/o `calendarId` property')
		};
		return _0x9f6cx2['setCalendarId'](_0x9f6cx1 ? _0x9f6cx5['calendarId'] : _0x9f6cx5, false, _0x9f6cx3)
	}
	, setCalendarId: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx1 = this;
		if (!_0x9f6cx5) {
			_0x9f6cx1['propagateChanges'](function () {
				return _0x9f6cx1['setCalendarIdWithoutPropagation'](_0x9f6cx2, _0x9f6cx5)
			}, _0x9f6cx3)
		}
		else {
			_0x9f6cx1['setCalendarIdWithoutPropagation'](_0x9f6cx2, _0x9f6cx5)
		}
	}
	, onCalendarChange: function (_0x9f6cx1) {
		if (!this['isReadOnly']() && this['isTaskStored']()) {
			this['adjustToCalendarWithoutPropagation']()
		}
	}
	, setCalendarIdWithoutPropagation: function (_0x9f6cx3, _0x9f6cx4) {
		var _0x9f6cx1 = false;
		if (_0x9f6cx3 instanceof Ext.ux.Gantt['data']['Calendar']) {
			_0x9f6cx3 = _0x9f6cx3['calendarId']
		};
		var _0x9f6cx5 = this['getCalendarId']();
		if (_0x9f6cx5 != _0x9f6cx3 || _0x9f6cx4) {
			_0x9f6cx1 = true;
			if (this['calendarWaitingListener']) {
				this['calendarWaitingListener']['destroy']();
				this['calendarWaitingListener'] = null
			};
			var _0x9f6cx2 = {
				calendarchange: this['onCalendarChange']
				, scope: this
			};
			var _0x9f6cx6 = this['calendar'] || Ext.ux.Gantt['data']['Calendar']['getCalendar'](_0x9f6cx5);
			this['calendar'] = null;
			_0x9f6cx6 && _0x9f6cx6['un'](_0x9f6cx2);
			this['set'](this['calendarIdField'], _0x9f6cx3);
			var _0x9f6cx7 = Ext.ux.Gantt['data']['Calendar']['getCalendar'](_0x9f6cx3);
			if (_0x9f6cx7) {
				_0x9f6cx7['on'](_0x9f6cx2);
				if (!_0x9f6cx4) {
					this['onCalendarChange']()
				}
			}
			else {
				this['calendarWaitingListener'] = Ext['data']['StoreManager']['on']('add', function _0x9f6cx8() {
					_0x9f6cx7 = Ext.ux.Gantt['data']['Calendar']['getCalendar'](_0x9f6cx3);
					if (this['isTaskStored']()) {
						if (_0x9f6cx7) {
							this['calendarWaitingListener']['destroy']();
							this['calendarWaitingListener'] = null;
							_0x9f6cx7['on'](_0x9f6cx2);
							this['onCalendarChange']()
						}
						else {
							this['calendarWaitingListener'] = Ext['data']['StoreManager']['on']('add', _0x9f6cx8, this, {
								destroyable: true
								, single: true
							})
						}
					}
				}, this, {
					destroyable: true
					, single: true
				})
			}
		};
		return _0x9f6cx1
	}
	, getDependencyStore: function () {
		var _0x9f6cx2 = this['getTaskStore'](true)
			, _0x9f6cx1 = _0x9f6cx2 && _0x9f6cx2['getDependencyStore']();
		return _0x9f6cx1
	}
	, getResourceStore: function () {
		var _0x9f6cx1 = this['getTaskStore'](true);
		return _0x9f6cx1 && _0x9f6cx1['getResourceStore']()
	}
	, getAssignmentStore: function () {
		var _0x9f6cx1 = this['getTaskStore'](true);
		return _0x9f6cx1 && _0x9f6cx1['getAssignmentStore']()
	}
	, getTaskStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (!_0x9f6cx2['taskStore']) {
			_0x9f6cx2['taskStore'] = _0x9f6cx2['getTreeStore']() || _0x9f6cx2['parentNode'] && _0x9f6cx2['parentNode']['getTaskStore'](_0x9f6cx1)
		};
		if (!_0x9f6cx2['taskStore'] && !_0x9f6cx1) {
			Ext['Error']['raise']('can\'t find a taskStore in `getTaskStore`')
		};
		return _0x9f6cx2['taskStore']
	}
	, getEventStore: function () {
		return this['getTaskStore']()
	}
	, setTaskStore: function (_0x9f6cx1) {
		this['taskStore'] = _0x9f6cx1
	}
	, isManuallyScheduled: function () {
		return this['get'](this['manuallyScheduledField']) || this['isCompleted']()
	}
	, isShowInTimeline: function () {
		return Boolean(this['getShowInTimeline']())
	}
	, setManuallyScheduled: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['propagateChanges'](function () {
			return _0x9f6cx1['setManuallyScheduledWithoutPropagation'](_0x9f6cx2)
		}, _0x9f6cx5)
	}
	, setManuallyScheduledWithoutPropagation: function (_0x9f6cx5) {
		var _0x9f6cx1 = this;
		var _0x9f6cx2 = _0x9f6cx1['isManuallyScheduled']();
		if (_0x9f6cx1['getManuallyScheduled']() != _0x9f6cx5) {
			this['set'](_0x9f6cx1['manuallyScheduledField'], _0x9f6cx5)
		};
		if (_0x9f6cx2 && !_0x9f6cx1['isManuallyScheduled']()) {
			_0x9f6cx1['set']('needsReScheduling', true)
		};
		return true
	}
	, setSchedulingMode: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['propagateChanges'](function () {
			return _0x9f6cx1['setSchedulingModeWithoutPropagation'](_0x9f6cx2)
		}, _0x9f6cx5)
	}
	, setSchedulingModeWithoutPropagation: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx1;
		Ext['Array']['contains'](_0x9f6cx2['recognizedSchedulingModes'], _0x9f6cx5) || Ext['Error']['raise']('Unrecognized scheduling mode: ' + _0x9f6cx5);
		if (_0x9f6cx2['getSchedulingMode']() != _0x9f6cx5) {
			_0x9f6cx2['set'](this['schedulingModeField'], _0x9f6cx5);
			switch (_0x9f6cx5) {
			case 'FixedDuration':
				_0x9f6cx2['updateEffortBasedOnDuration']();
				break;
			case 'EffortDriven':
				_0x9f6cx2['updateSpanBasedOnEffort']();
				break
			};
			var _0x9f6cx3 = _0x9f6cx2['getPredecessors']();
			if (_0x9f6cx3['length']) {
				_0x9f6cx1 = _0x9f6cx3[0]
			}
			else {
				_0x9f6cx1 = _0x9f6cx2
			}
		};
		return _0x9f6cx1
	}
	, skipWorkingTime: function (_0x9f6cx3, _0x9f6cx7, _0x9f6cx4, _0x9f6cx5) {
		if (!_0x9f6cx3) {
			return _0x9f6cx3
		};
		var _0x9f6cx1;
		var _0x9f6cx6;
		_0x9f6cx4 = _0x9f6cx4 !== false;
		var _0x9f6cx2 = {
			isForward: _0x9f6cx4
			, segments: _0x9f6cx5 || false
			, resources: this['hasResources']()
			, fn: function (_0x9f6cxa, _0x9f6cxc) {
				var _0x9f6cx9 = _0x9f6cxc - _0x9f6cxa
					, _0x9f6cx8 = new Date(_0x9f6cxa)['getTimezoneOffset']() - new Date(_0x9f6cxc)['getTimezoneOffset']();
				if (_0x9f6cx9 >= _0x9f6cx6) {
					_0x9f6cx1 = new Date((_0x9f6cx4 ? _0x9f6cxa : _0x9f6cxc) - 0 + (_0x9f6cx4 ? 1 : -1) * _0x9f6cx6);
					return false
				}
				else {
					_0x9f6cx6 -= _0x9f6cx9 + _0x9f6cx8 * 60 * 1000
				}
			}
		};
		if (Ext['isObject'](_0x9f6cx3)) {
			Ext['apply'](_0x9f6cx2, _0x9f6cx3)
		}
		else {
			if (_0x9f6cx4) {
				_0x9f6cx2['startDate'] = _0x9f6cx3
			}
			else {
				_0x9f6cx2['endDate'] = _0x9f6cx3
			}
		};
		_0x9f6cx6 = _0x9f6cx7 || _0x9f6cx2['duration'];
		if (!_0x9f6cx6) {
			return _0x9f6cx3
		};
		this['forEachAvailabilityInterval'](_0x9f6cx2);
		return _0x9f6cx1
	}
	, skipNonWorkingTime: function (_0x9f6cx3, _0x9f6cx4, _0x9f6cx5) {
		if (!_0x9f6cx3) {
			return _0x9f6cx3
		};
		var _0x9f6cx2 = false;
		_0x9f6cx4 = _0x9f6cx4 !== false;
		var _0x9f6cx1 = {
			isForward: _0x9f6cx4
			, segments: _0x9f6cx5 || false
			, resources: this['hasResources']()
			, fn: function (_0x9f6cx6, _0x9f6cx7) {
				if (_0x9f6cx6 !== _0x9f6cx7) {
					_0x9f6cx3 = _0x9f6cx4 ? _0x9f6cx6 : _0x9f6cx7;
					_0x9f6cx2 = true;
					return false
				}
			}
		};
		if (Ext['isObject'](_0x9f6cx3)) {
			Ext['apply'](_0x9f6cx1, _0x9f6cx3)
		}
		else {
			if (_0x9f6cx4) {
				_0x9f6cx1['startDate'] = _0x9f6cx3
			}
			else {
				_0x9f6cx1['endDate'] = _0x9f6cx3
			}
		};
		this['forEachAvailabilityInterval'](_0x9f6cx1);
		return _0x9f6cx2 ? new Date(_0x9f6cx3) : this['getCalendar']()['skipNonWorkingTime'](_0x9f6cx3, _0x9f6cx4)
	}
	, setStartDate: function (_0x9f6cx1, _0x9f6cx4, _0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['propagateChanges'](function () {
			var _0x9f6cx7 = _0x9f6cx2['setStartDateWithoutPropagation'](_0x9f6cx1, _0x9f6cx4, _0x9f6cx3);
			_0x9f6cx2['maybePinWithoutPropagation']();
			return _0x9f6cx7
		}, _0x9f6cx5)
	}
	, setStartDateWithoutPropagation: function (_0x9f6cx2, _0x9f6cx6, _0x9f6cx7) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['getTaskStore'](true)
			, _0x9f6cx4, _0x9f6cx3;
		_0x9f6cx6 = _0x9f6cx6 !== false;
		if (_0x9f6cx1 && _0x9f6cx7 !== true && _0x9f6cx7 !== false) {
			_0x9f6cx7 = _0x9f6cx1['skipWeekendsDuringDragDrop']
		}
		else {
			if (_0x9f6cx7 !== true && _0x9f6cx7 !== false) {
				_0x9f6cx7 = false
			}
		};
		_0x9f6cx5['autoCalculateLag']();
		_0x9f6cx5['beginEdit']();
		if (!_0x9f6cx2) {
			_0x9f6cx5['set'](_0x9f6cx5['durationField'], null);
			_0x9f6cx5['set'](_0x9f6cx5['startDateField'], null);
			_0x9f6cx5['setSegmentsWithoutPropagation'](null)
		}
		else {
			if (_0x9f6cx7) {
				_0x9f6cx2 = _0x9f6cx5['skipNonWorkingTime'](_0x9f6cx2, !_0x9f6cx5['isMilestone']())
			};
			_0x9f6cx5['set'](_0x9f6cx5['startDateField'], _0x9f6cx2);
			if (_0x9f6cx1 && _0x9f6cx5['isSegmented']()) {
				_0x9f6cx5['updateSegmentsDates']()
			};
			if (_0x9f6cx6 !== false) {
				_0x9f6cx5['set'](_0x9f6cx5['endDateField'], _0x9f6cx5['recalculateEndDate'](_0x9f6cx2))
			}
			else {
				_0x9f6cx3 = this['getEndDate']();
				if (_0x9f6cx3) {
					this['constrainSegments']();
					_0x9f6cx5['set'](_0x9f6cx5['durationField'], _0x9f6cx5['calculateDuration'](_0x9f6cx2, _0x9f6cx3, _0x9f6cx5['getDurationUnit']()))
				}
			}
		};
		_0x9f6cx4 = _0x9f6cx5['getDuration']();
		_0x9f6cx3 = _0x9f6cx5['getEndDate']();
		if (_0x9f6cx2 && _0x9f6cx3 && (_0x9f6cx4 === undefined || _0x9f6cx4 === null)) {
			_0x9f6cx5['set'](_0x9f6cx5['durationField'], _0x9f6cx5['calculateDuration'](_0x9f6cx2, _0x9f6cx3, _0x9f6cx5['getDurationUnit']()))
		};
		_0x9f6cx5['onPotentialEffortChange']();
		_0x9f6cx5['endEdit']();
		return true
	}
	, getPinConstraintType: function (_0x9f6cx2) {
		_0x9f6cx2 = _0x9f6cx2 || this['getTaskStore'](true);
		var _0x9f6cx1 = _0x9f6cx2 && _0x9f6cx2['isBackwardScheduled']();
		return _0x9f6cx1 ? 'finishnolaterthan' : 'startnoearlierthan'
	}
	, pinWithoutPropagation: function (_0x9f6cx5) {
		var _0x9f6cx3 = this
			, _0x9f6cx2 = _0x9f6cx3['getTaskStore'](true)
			, _0x9f6cx1 = _0x9f6cx3['getPinConstraintType'](_0x9f6cx2);
		_0x9f6cx3['setConstraintWithoutPropagation'](_0x9f6cx1, _0x9f6cx5)
	}
	, maybePinWithoutPropagation: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getTaskStore'](true);
		if (_0x9f6cx1 && _0x9f6cx1['scheduleByConstraints'] && !_0x9f6cx1['isBackwardScheduled']() && _0x9f6cx2['getStartDate']()) {
			if ((_0x9f6cx2['isPinned']() || !_0x9f6cx2['getConstraintType']()) && (_0x9f6cx2['isDependencyConstraintSatisfied']() || !_0x9f6cx1['hasListener']('constraintconflict'))) {
				_0x9f6cx2['pinWithoutPropagation']()
			}
		}
	}
	, isPinned: function () {
		return this['getConstraintType']() == this['getPinConstraintType']()
	}
	, setEndDate: function (_0x9f6cx1, _0x9f6cx4, _0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['propagateChanges'](function () {
			return _0x9f6cx2['setEndDateWithoutPropagation'](_0x9f6cx1, _0x9f6cx4, _0x9f6cx3)
		}, _0x9f6cx5)
	}
	, setEndDateWithoutPropagation: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx9 = this
			, _0x9f6cxc = _0x9f6cx9['getTaskStore'](true)
			, _0x9f6cx6, _0x9f6cx2;
		_0x9f6cx5 = _0x9f6cx5 !== false;
		if (_0x9f6cx3 !== true && _0x9f6cx3 !== false && _0x9f6cxc) {
			_0x9f6cx3 = _0x9f6cxc['skipWeekendsDuringDragDrop']
		}
		else {
			if (_0x9f6cx3 !== true && _0x9f6cx3 !== false) {
				_0x9f6cx3 = false
			}
		};
		_0x9f6cx9['autoCalculateLag']();
		_0x9f6cx9['beginEdit']();
		var _0x9f6cx8 = _0x9f6cx9['getEndDate']();
		if (!_0x9f6cx4) {
			_0x9f6cx9['set'](_0x9f6cx9['durationField'], null);
			_0x9f6cx9['set'](_0x9f6cx9['endDateField'], null);
			_0x9f6cx9['setSegments'](null)
		}
		else {
			_0x9f6cx2 = _0x9f6cx9['getStartDate']();
			if (_0x9f6cx4 < _0x9f6cx2 && _0x9f6cx5 === false) {
				_0x9f6cx4 = _0x9f6cx2
			};
			if (_0x9f6cx3) {
				_0x9f6cx4 = _0x9f6cx9['skipNonWorkingTime'](_0x9f6cx4, false)
			};
			if (_0x9f6cx5 !== false) {
				_0x9f6cx6 = _0x9f6cx9['getDuration']();
				if (Ext['isNumber'](_0x9f6cx6)) {
					if (_0x9f6cxc && _0x9f6cx9['isSegmented']() && (_0x9f6cx4 - _0x9f6cx8)) {
						_0x9f6cx9['updateSegmentsDates']({
							isForward: false
							, endDate: _0x9f6cx4
						})
					};
					_0x9f6cx9['set'](_0x9f6cx9['startDateField'], _0x9f6cx9['calculateStartDate'](_0x9f6cx4, _0x9f6cx6, _0x9f6cx9['getDurationUnit']()));
					_0x9f6cx9['set'](_0x9f6cx9['endDateField'], _0x9f6cx4)
				}
				else {
					_0x9f6cx9['set'](_0x9f6cx9['endDateField'], _0x9f6cx4)
				}
			}
			else {
				var _0x9f6cx7 = _0x9f6cx9['isMilestone']();
				if (_0x9f6cx4 < _0x9f6cx2) {
					_0x9f6cx9['set'](_0x9f6cx9['startDateField'], _0x9f6cx4)
				};
				_0x9f6cx9['set'](_0x9f6cx9['endDateField'], _0x9f6cx4);
				_0x9f6cx9['constrainSegments']();
				if (_0x9f6cx2) {
					_0x9f6cx9['set'](_0x9f6cx9['durationField'], _0x9f6cx9['calculateDuration'](_0x9f6cx2, _0x9f6cx4, _0x9f6cx9['getDurationUnit']()));
					if (_0x9f6cx7 && !_0x9f6cx9['isMilestone']()) {
						var _0x9f6cx1 = _0x9f6cx9['skipNonWorkingTime'](_0x9f6cx2, true);
						if (_0x9f6cx1 - _0x9f6cx2 !== 0) {
							_0x9f6cx9['set'](_0x9f6cx9['startDateField'], _0x9f6cx1)
						}
					}
				}
			}
		};
		_0x9f6cx6 = _0x9f6cx9['getDuration']();
		_0x9f6cx2 = _0x9f6cx9['getStartDate']();
		if (_0x9f6cx4 && _0x9f6cx2 && (_0x9f6cx6 === undefined || _0x9f6cx6 === null)) {
			_0x9f6cx9['set'](_0x9f6cx9['durationField'], _0x9f6cx9['calculateDuration'](_0x9f6cx2, _0x9f6cx4, _0x9f6cx9['getDurationUnit']()))
		};
		_0x9f6cx9['onPotentialEffortChange']();
		_0x9f6cx9['endEdit']();
		return true
	}
	, setStartEndDate: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx4, _0x9f6cx3) {
		var _0x9f6cx2 = this;
		_0x9f6cx4 = _0x9f6cx4 || false;
		_0x9f6cx2['propagateChanges'](function () {
			var _0x9f6cx7 = _0x9f6cx2['setStartEndDateWithoutPropagation'](_0x9f6cx1, _0x9f6cx5, _0x9f6cx4);
			_0x9f6cx2['maybePinWithoutPropagation']();
			return _0x9f6cx7
		}, _0x9f6cx3)
	}
	, setStartEndDateWithoutPropagation: function (_0x9f6cx1, _0x9f6cx4, _0x9f6cx6) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getTaskStore'](true);
		if (_0x9f6cx6 !== true && _0x9f6cx6 !== false && _0x9f6cx2) {
			_0x9f6cx6 = _0x9f6cx2['skipWeekendsDuringDragDrop']
		}
		else {
			if (_0x9f6cx6 !== true && _0x9f6cx6 !== false) {
				_0x9f6cx6 = false
			}
		};
		if (_0x9f6cx6) {
			_0x9f6cx1 = _0x9f6cx1 && _0x9f6cx5['skipNonWorkingTime'](_0x9f6cx1, true);
			_0x9f6cx4 = _0x9f6cx4 && _0x9f6cx5['skipNonWorkingTime'](_0x9f6cx4, false);
			if (_0x9f6cx4 < _0x9f6cx1) {
				_0x9f6cx1 = _0x9f6cx4
			}
		};
		var _0x9f6cx7 = _0x9f6cx5['getStartDate']()
			, _0x9f6cx3 = _0x9f6cx5['getEndDate']();
		_0x9f6cx5['beginEdit']();
		_0x9f6cx5['set'](_0x9f6cx5['startDateField'], _0x9f6cx1);
		_0x9f6cx5['set'](_0x9f6cx5['endDateField'], _0x9f6cx4);
		if (_0x9f6cx5['getTaskStore'](true) && _0x9f6cx5['isSegmented']() && ((_0x9f6cx1 - _0x9f6cx7) || (_0x9f6cx4 - _0x9f6cx3))) {
			_0x9f6cx5['updateSegmentsDates']()
		};
		if (_0x9f6cx4 - _0x9f6cx3) {
			_0x9f6cx5['constrainSegments']()
		};
		_0x9f6cx5['set'](_0x9f6cx5['durationField'], _0x9f6cx5['calculateDuration'](_0x9f6cx1, _0x9f6cx4, _0x9f6cx5['getDurationUnit']()));
		_0x9f6cx5['onPotentialEffortChange']();
		_0x9f6cx5['endEdit']();
		return true
	}
	, shift: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cx7) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['getStartDate']()
			, _0x9f6cx4 = _0x9f6cx5['getEndDate']();
		_0x9f6cx5['setStartEndDate'](_0x9f6cx1 && Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx1, _0x9f6cx3, _0x9f6cx2), _0x9f6cx4 && Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx4, _0x9f6cx3, _0x9f6cx2), undefined, _0x9f6cx7)
	}
	, getDuration: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['get'](this['durationField']);
		if (_0x9f6cx1 && _0x9f6cx2) {
			_0x9f6cx1 = this['getUnitConverter']()['convertDuration'](_0x9f6cx1, this['getDurationUnit'](), _0x9f6cx2)
		};
		return _0x9f6cx1
	}
	, getEffort: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['get'](this['effortField']) || 0;
		if (_0x9f6cx1 && _0x9f6cx2) {
			_0x9f6cx1 = this['getUnitConverter']()['convertDuration'](_0x9f6cx1, this['getEffortUnit'](), _0x9f6cx2)
		};
		return _0x9f6cx1
	}
	, setEffort: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['propagateChanges'](function () {
			return _0x9f6cx1['setEffortWithoutPropagation'](_0x9f6cx5, _0x9f6cx2)
		}, _0x9f6cx3)
	}
	, setEffortWithoutPropagation: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx2 = _0x9f6cx2 || _0x9f6cx1['getEffortUnit']();
		_0x9f6cx1['beginEdit']();
		_0x9f6cx1['set'](_0x9f6cx1['effortField'], _0x9f6cx5);
		_0x9f6cx1['set'](_0x9f6cx1['effortUnitField'], _0x9f6cx2);
		switch (_0x9f6cx1['getSchedulingMode']()) {
		case 'EffortDriven':
			_0x9f6cx1['updateSpanBasedOnEffort']();
			break;
		case 'DynamicAssignment':
			_0x9f6cx1['updateAssignments']();
			break
		};
		_0x9f6cx1['set'](_0x9f6cx1['actualEffortField'], _0x9f6cx1['calculateActualEffort']());
		_0x9f6cx1['setEffortVariance'](_0x9f6cx1['calculateEffortVariance']());
		_0x9f6cx1['recalculateCost']();
		_0x9f6cx1['endEdit']();
		return true
	}
	, getCalendarDuration: function (_0x9f6cx1) {
		return this['getUnitConverter']()['convertMSDurationToUnit'](this['getEndDate']() - this['getStartDate'](), _0x9f6cx1 || this['get'](this['durationUnitField']))
	}
	, setDuration: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['propagateChanges'](function () {
			return _0x9f6cx1['setDurationWithoutPropagation'](_0x9f6cx5, _0x9f6cx2)
		}, _0x9f6cx3)
	}
	, setDurationWithoutPropagation: function (_0x9f6cx3, _0x9f6cxa) {
		var _0x9f6cxc = this;
		var _0x9f6cx13 = !_0x9f6cxc['isManuallyScheduled']() && _0x9f6cxc['hasEndPredecessorsButNoStartPredecessors']();
		var _0x9f6cx6 = null;
		var _0x9f6cx2 = null;
		var _0x9f6cx7 = _0x9f6cxc['getEndDate']();
		_0x9f6cxa = _0x9f6cxa || _0x9f6cxc['getDurationUnit']();
		var _0x9f6cx4 = _0x9f6cxc['isMilestone']();
		_0x9f6cxc['beginEdit']();
		var _0x9f6cx9 = _0x9f6cxc['getTaskStore'](true);
		if (Ext['isNumber'](_0x9f6cx3) && !_0x9f6cxc['getStartDate']()) {
			if (_0x9f6cx7) {
				_0x9f6cx13 = true
			}
			else {
				if (_0x9f6cx9 && _0x9f6cx9['scheduleByConstraints']) {
					_0x9f6cxc['scheduleWithoutPropagation']({
						taskStore: _0x9f6cx9
					})
				}
				else {
					_0x9f6cx2 = (_0x9f6cx9 && _0x9f6cx9['getProjectStartDate']()) || Ext['Date']['clearTime'](new Date());
					_0x9f6cxc['setStartDateWithoutPropagation'](_0x9f6cx2)
				}
			}
		};
		this['constrainSegments']({
			duration: _0x9f6cx3
			, unit: _0x9f6cxa
		});
		if (Ext['isNumber'](_0x9f6cx3)) {
			if (_0x9f6cx13 && _0x9f6cxc['getEndDate']()) {
				_0x9f6cx2 = _0x9f6cxc['calculateStartDate'](_0x9f6cxc['getEndDate'](), _0x9f6cx3, _0x9f6cxa)
			}
			else {
				if (_0x9f6cxc['getStartDate']()) {
					_0x9f6cx6 = _0x9f6cxc['calculateEndDate'](_0x9f6cxc['getStartDate'](), _0x9f6cx3, _0x9f6cxa)
				}
			}
		};
		if (!_0x9f6cx13 && (_0x9f6cx6 || this['getStartDate']())) {
			_0x9f6cxc['set'](_0x9f6cxc['endDateField'], _0x9f6cx6)
		};
		if (_0x9f6cx13 && (_0x9f6cx2 || this['getEndDate']())) {
			_0x9f6cxc['set'](_0x9f6cxc['startDateField'], _0x9f6cx2)
		};
		_0x9f6cxc['set'](_0x9f6cxc['durationField'], _0x9f6cx3);
		_0x9f6cxc['set'](_0x9f6cxc['durationUnitField'], _0x9f6cxa);
		if (_0x9f6cxc['isMilestone']() != _0x9f6cx4) {
			if (_0x9f6cx4) {
				var _0x9f6cx5 = _0x9f6cxc['getStartDate']();
				if (_0x9f6cx5) {
					var _0x9f6cx1 = _0x9f6cxc['skipNonWorkingTime'](_0x9f6cx5, true);
					if (_0x9f6cx1 - _0x9f6cx5 !== 0) {
						_0x9f6cxc['set'](_0x9f6cxc['startDateField'], _0x9f6cx1)
					}
				}
			}
			else {
				if (_0x9f6cx6) {
					var _0x9f6cx8 = _0x9f6cxc['skipNonWorkingTime'](_0x9f6cx6, false);
					if (_0x9f6cx8 - _0x9f6cx6 !== 0) {
						_0x9f6cxc['set'](_0x9f6cxc['startDateField'], _0x9f6cx8);
						_0x9f6cxc['set'](_0x9f6cxc['endDateField'], _0x9f6cx8)
					}
				}
			}
		};
		_0x9f6cxc['onPotentialEffortChange']();
		if (_0x9f6cx9 && _0x9f6cx9['scheduleByConstraints']) {
			_0x9f6cx9['resetEarlyDates']();
			_0x9f6cx9['resetLateDates']()
		};
		_0x9f6cxc['endEdit']();
		return true
	}
	, calculateStartDate: function (_0x9f6cx8, _0x9f6cx6, _0x9f6cx7, _0x9f6cx3) {
		if (!_0x9f6cx6) {
			return _0x9f6cx8
		};
		_0x9f6cx7 = _0x9f6cx7 || this['getDurationUnit']();
		var _0x9f6cx4 = this['getSchedulingMode']()
			, _0x9f6cx5 = _0x9f6cx4 != 'FixedDuration' && _0x9f6cx4 != 'DynamicAssignment' && _0x9f6cx4 != 'EffortDriven';
		_0x9f6cx3 = Ext['apply']({
			endDate: _0x9f6cx8
			, isForward: false
			, offsetSegments: true
			, resources: _0x9f6cx5 && this['hasResources']()
		}, _0x9f6cx3);
		if (this['getTaskStore'](true) && (this['isSegmented']() || _0x9f6cx5)) {
			var _0x9f6cx2 = this['getUnitConverter']()['convertDurationToMs'](_0x9f6cx6, _0x9f6cx7);
			var _0x9f6cx1;
			this['forEachAvailabilityInterval'](_0x9f6cx3, function (_0x9f6cx13, _0x9f6cxc) {
				var _0x9f6cxa = _0x9f6cxc - _0x9f6cx13;
				if (_0x9f6cxa >= _0x9f6cx2) {
					_0x9f6cx1 = new Date(_0x9f6cxc - _0x9f6cx2);
					return false
				}
				else {
					var _0x9f6cx9 = new Date(_0x9f6cxc)['getTimezoneOffset']() - new Date(_0x9f6cx13)['getTimezoneOffset']();
					_0x9f6cx2 -= _0x9f6cxa + _0x9f6cx9 * 60 * 1000
				}
			});
			return _0x9f6cx1
		}
		else {
			return this['getCalendar']()['calculateStartDate'](_0x9f6cx8, _0x9f6cx6, _0x9f6cx7)
		}
	}
	, recalculateEndDate: function (_0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1, _0x9f6cx3;
		_0x9f6cx2 = _0x9f6cx2 || _0x9f6cx5['getStartDate']();
		if (_0x9f6cx2 && _0x9f6cx5['getSchedulingMode']() == 'EffortDriven') {
			_0x9f6cx1 = _0x9f6cx5['calculateEffortDrivenEndDate'](_0x9f6cx2, _0x9f6cx5['getEffort']())
		}
		else {
			_0x9f6cx3 = _0x9f6cx5['getDuration']();
			if (_0x9f6cx2 && Ext['isNumber'](_0x9f6cx3)) {
				_0x9f6cx1 = _0x9f6cx5['calculateEndDate'](_0x9f6cx2, _0x9f6cx3, _0x9f6cx5['getDurationUnit']())
			}
			else {
				_0x9f6cx1 = _0x9f6cx5['getEndDate']()
			}
		};
		return _0x9f6cx1
	}
	, calculateEndDate: function (_0x9f6cx1, _0x9f6cx8, _0x9f6cx7, _0x9f6cx3) {
		_0x9f6cx7 = _0x9f6cx7 || this['getDurationUnit']();
		if (!_0x9f6cx8) {
			return _0x9f6cx1
		};
		var _0x9f6cx4 = this['getSchedulingMode']()
			, _0x9f6cx6;
		var _0x9f6cx5 = _0x9f6cx4 != 'FixedDuration' && _0x9f6cx4 != 'DynamicAssignment' && _0x9f6cx4 != 'EffortDriven';
		if (this['getTaskStore'](true) && (this['isSegmented']() || _0x9f6cx5)) {
			var _0x9f6cx2 = this['getUnitConverter']()['convertDurationToMs'](_0x9f6cx8, _0x9f6cx7);
			_0x9f6cx3 = Ext['apply']({
				startDate: _0x9f6cx1
				, offsetSegments: true
				, resources: _0x9f6cx5 && this['hasResources']()
			}, _0x9f6cx3);
			this['forEachAvailabilityInterval'](_0x9f6cx3, function (_0x9f6cx13, _0x9f6cxa) {
				var _0x9f6cxc = _0x9f6cxa - _0x9f6cx13;
				if (_0x9f6cxc >= _0x9f6cx2) {
					_0x9f6cx6 = new Date(_0x9f6cx13 + _0x9f6cx2);
					return false
				}
				else {
					var _0x9f6cx9 = new Date(_0x9f6cx13)['getTimezoneOffset']() - new Date(_0x9f6cxa)['getTimezoneOffset']();
					_0x9f6cx2 -= _0x9f6cxc + _0x9f6cx9 * 60 * 1000
				}
			})
		}
		else {
			return this['getCalendar']()['calculateEndDate'](_0x9f6cx1, _0x9f6cx8, _0x9f6cx7)
		};
		return _0x9f6cx6
	}
	, calculateDuration: function (_0x9f6cx1, _0x9f6cx3, _0x9f6cx5, _0x9f6cx2) {
		_0x9f6cx5 = _0x9f6cx5 || this['getDurationUnit']();
		if (!_0x9f6cx1 || !_0x9f6cx3) {
			return 0
		};
		if (this['getTaskStore'](true)) {
			var _0x9f6cx4 = 0;
			this['forEachAvailabilityInterval'](Ext['apply']({
				startDate: _0x9f6cx1
				, endDate: _0x9f6cx3
				, resources: this['hasResources']()
			}, _0x9f6cx2), function (_0x9f6cx8, _0x9f6cx6) {
				var _0x9f6cx7 = new Date(_0x9f6cx8)['getTimezoneOffset']() - new Date(_0x9f6cx6)['getTimezoneOffset']();
				_0x9f6cx4 += _0x9f6cx6 - _0x9f6cx8 + _0x9f6cx7 * 60 * 1000
			});
			return this['getUnitConverter']()['convertMSDurationToUnit'](_0x9f6cx4, _0x9f6cx5)
		}
		else {
			return this['getCalendar']()['calculateDuration'](_0x9f6cx1, _0x9f6cx3, _0x9f6cx5)
		}
	}
	, isCalendarApplicable: function (_0x9f6cxc) {
		var _0x9f6cx2 = this['getStartDate']();
		if (!_0x9f6cx2) {
			return true
		};
		var _0x9f6cx8 = this['getTaskStore'](true);
		if (!_0x9f6cx8) {
			return true
		};
		var _0x9f6cx6 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].DAY, (_0x9f6cx8 && _0x9f6cx8['availabilitySearchLimit']) || 5 * 365);
		var _0x9f6cx1 = this['getAssignments']();
		var _0x9f6cx5 = [];
		Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cxa) {
			var _0x9f6cx9 = _0x9f6cxa['getResource']();
			if (_0x9f6cx9) {
				_0x9f6cx5['push'](_0x9f6cx9['getCalendar']())
			}
		});
		if (!_0x9f6cx5['length']) {
			return true
		};
		var _0x9f6cx4 = Ext.ux.Gantt['data']['Calendar']['getCalendar'](_0x9f6cxc);
		for (var _0x9f6cx7 = 0, _0x9f6cx3 = _0x9f6cx5['length']; _0x9f6cx7 < _0x9f6cx3; _0x9f6cx7++) {
			if (_0x9f6cx4['isAvailabilityIntersected'](_0x9f6cx5[_0x9f6cx7], _0x9f6cx2, _0x9f6cx6)) {
				return true
			}
		};
		return false
	}
	, forEachAvailabilityInterval: function (_0x9f6cx22, _0x9f6cx1c, _0x9f6cx27) {
		_0x9f6cx1c = _0x9f6cx1c || _0x9f6cx22['fn'];
		_0x9f6cx27 = _0x9f6cx27 || _0x9f6cx22['scope'] || this;
		var _0x9f6cx1b = this
			, _0x9f6cxf = _0x9f6cx22['startDate']
			, _0x9f6cx1f = _0x9f6cx22['endDate']
			, _0x9f6cx28 = _0x9f6cx22['includeEmptyIntervals']
			, _0x9f6cx29 = _0x9f6cx22['resources']
			, _0x9f6cx2a = (_0x9f6cx22['segments'] !== false) && this['isSegmented']()
			, _0x9f6cx2b = _0x9f6cx22['offsetSegments']
			, _0x9f6cx1e = _0x9f6cx22['isForward'] !== false
			, _0x9f6cx14 = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cx23, _0x9f6cx2c, _0x9f6cx2d, _0x9f6cx2e;
		var _0x9f6cx2 = this['getTaskStore'](true);
		var _0x9f6cx2f, _0x9f6cx30, _0x9f6cx31, _0x9f6cx7, _0x9f6cx25, _0x9f6cx4;
		if (_0x9f6cx1e) {
			if (!_0x9f6cxf) {
				throw new Error('forEachAvailabilityInterval: `startDate` is required when `isForward` is true')
			};
			if (!_0x9f6cx1f) {
				_0x9f6cx1f = _0x9f6cx14['add'](_0x9f6cxf, Ext.ux.Scheduler['util']['Date'].DAY, _0x9f6cx22['availabilitySearchLimit'] || (_0x9f6cx2 && _0x9f6cx2['availabilitySearchLimit']) || 5 * 365)
			};
			_0x9f6cx23 = new Date(_0x9f6cxf);
			_0x9f6cx2c = function (_0x9f6cxa, _0x9f6cx9) {
				return _0x9f6cxa - _0x9f6cx9
			};
			_0x9f6cx2d = function (_0x9f6cxa, _0x9f6cx9) {
				return _0x9f6cxa['type'] < _0x9f6cx9['type'] ? 1 : -1
			};
			_0x9f6cx2e = Array['prototype']['shift']
		}
		else {
			if (!_0x9f6cx1f) {
				throw new Error('forEachAvailabilityInterval: `endDate` is required when `isForward` is false')
			};
			if (!_0x9f6cxf) {
				_0x9f6cxf = _0x9f6cx14['add'](_0x9f6cx1f, Ext.ux.Scheduler['util']['Date'].DAY, -(_0x9f6cx22['availabilitySearchLimit'] || (_0x9f6cx2 && _0x9f6cx2['availabilitySearchLimit']) || 5 * 365))
			};
			_0x9f6cx23 = new Date(_0x9f6cx1f);
			_0x9f6cx2c = function (_0x9f6cxa, _0x9f6cx9) {
				return _0x9f6cx9 - _0x9f6cxa
			};
			_0x9f6cx2d = function (_0x9f6cxa, _0x9f6cx9) {
				return _0x9f6cxa['type'] > _0x9f6cx9['type'] ? 1 : -1
			};
			_0x9f6cx2e = Array['prototype']['pop']
		};
		var _0x9f6cx32 = this['getOwnCalendar']()
			, _0x9f6cx33 = this['getProjectCalendar']()
			, _0x9f6cx12 = {}
			, _0x9f6cx20 = [];
		if (_0x9f6cx29) {
			var _0x9f6cx34 = false;
			var _0x9f6cx17 = _0x9f6cx22['assignments'];
			var _0x9f6cx15 = function (_0x9f6cx9) {
				var _0x9f6cxe = _0x9f6cx9['getId']()
					, _0x9f6cx13 = _0x9f6cx17 && Ext['Array']['findBy'](_0x9f6cx17, function (_0x9f6cx35) {
						return _0x9f6cx35['getResourceId']() == _0x9f6cxe
					}) || _0x9f6cx1b['getAssignmentFor'](_0x9f6cx9)
					, _0x9f6cxa = _0x9f6cx9['getCalendar']()
					, _0x9f6cxb = _0x9f6cxa['getCalendarId']();
				if (!_0x9f6cx12[_0x9f6cxb]) {
					_0x9f6cx12[_0x9f6cxb] = [];
					_0x9f6cx20['push'](_0x9f6cxa)
				};
				_0x9f6cx12[_0x9f6cxb]['push']({
					assignment: _0x9f6cx13
					, resourceId: _0x9f6cxe
					, units: _0x9f6cx13 && _0x9f6cx13['getUnits']()
				});
				_0x9f6cx34 = true
			};
			if (_0x9f6cx29 !== true) {
				Ext['each'](_0x9f6cx29, _0x9f6cx15)
			}
			else {
				Ext['Array']['each'](this['getAssignments'](), function (_0x9f6cxa) {
					var _0x9f6cx9 = _0x9f6cxa['getResource']();
					if (_0x9f6cx9) {
						_0x9f6cx15(_0x9f6cx9)
					}
				})
			};
			if (!_0x9f6cx34) {
				return
			}
		}
		else {
			_0x9f6cx32 = _0x9f6cx32 || _0x9f6cx33
		};
		var _0x9f6cx1d = 0
			, _0x9f6cx1a = true
			, _0x9f6cx36, _0x9f6cx10, _0x9f6cx37, _0x9f6cx18, _0x9f6cx38, _0x9f6cx1, _0x9f6cx39, _0x9f6cx5, _0x9f6cx21, _0x9f6cx19, _0x9f6cx3a;
		if (_0x9f6cx2a) {
			if (_0x9f6cx2b) {
				_0x9f6cx37 = [];
				_0x9f6cx18 = [];
				_0x9f6cx1b['forEachSegment'](function _0x9f6cxd(_0x9f6cx9) {
					var _0x9f6cxa = _0x9f6cx9['getNextSegment']();
					if (_0x9f6cxa) {
						_0x9f6cx37['push'](_0x9f6cx9['getEndOffset']());
						_0x9f6cx18['push'](_0x9f6cxa['getStartOffset']())
					}
				});
				_0x9f6cx38 = _0x9f6cx2e['call'](_0x9f6cx37);
				_0x9f6cx1 = _0x9f6cx2e['call'](_0x9f6cx18);
				_0x9f6cx39 = this['getLastSegment']()['getEndOffset']()
			}
			else {
				_0x9f6cx36 = [];
				_0x9f6cx10 = [];
				_0x9f6cx1b['forEachSegment'](function _0x9f6cxc(_0x9f6cx9) {
					var _0x9f6cx13 = _0x9f6cx9['getNextSegment']();
					if (_0x9f6cx13) {
						var _0x9f6cxb = _0x9f6cx9['getEndDate']() - 0
							, _0x9f6cxa = _0x9f6cx13['getStartDate']() - 0;
						if (_0x9f6cxb < _0x9f6cxf) {
							_0x9f6cx1a = !_0x9f6cx1e
						}
						else {
							if (_0x9f6cxb <= _0x9f6cx1f) {
								_0x9f6cx36['push'](_0x9f6cxb)
							}
						};
						if (_0x9f6cxa < _0x9f6cxf) {
							_0x9f6cx1a = _0x9f6cx1e
						}
						else {
							if (_0x9f6cxa <= _0x9f6cx1f) {
								_0x9f6cx10['push'](_0x9f6cxa)
							}
						}
					}
				});
				_0x9f6cx5 = _0x9f6cx2e['call'](_0x9f6cx36);
				_0x9f6cx21 = _0x9f6cx2e['call'](_0x9f6cx10)
			}
		};
		while (_0x9f6cx1e ? _0x9f6cx23 < _0x9f6cx1f : _0x9f6cx23 > _0x9f6cxf) {
			var _0x9f6cx24 = {};
			var _0x9f6cx11 = [];
			var _0x9f6cx3b = _0x9f6cx23 - (_0x9f6cx1e ? 0 : 1);
			if (_0x9f6cx32) {
				var _0x9f6cx3c = _0x9f6cx32['getAvailabilityIntervalsFor'](_0x9f6cx3b);
				for (_0x9f6cx30 = 0, _0x9f6cx31 = _0x9f6cx3c['length']; _0x9f6cx30 < _0x9f6cx31; _0x9f6cx30++) {
					_0x9f6cx7 = _0x9f6cx3c[_0x9f6cx30];
					_0x9f6cx25 = _0x9f6cx7['startDate'] - 0;
					_0x9f6cx4 = _0x9f6cx7['endDate'] - 0;
					if (!_0x9f6cx24[_0x9f6cx25]) {
						_0x9f6cx24[_0x9f6cx25] = [];
						_0x9f6cx11['push'](_0x9f6cx25)
					};
					_0x9f6cx24[_0x9f6cx25]['push']({
						type: '00-taskAvailailabilityStart'
					});
					_0x9f6cx11['push'](_0x9f6cx4);
					_0x9f6cx24[_0x9f6cx4] = _0x9f6cx24[_0x9f6cx4] || [];
					_0x9f6cx24[_0x9f6cx4]['push']({
						type: '01-taskAvailailabilityEnd'
					})
				}
			};
			if (_0x9f6cx2a && (_0x9f6cx5 || _0x9f6cx21)) {
				var _0x9f6cx3d = _0x9f6cx1e ? _0x9f6cx14['getStartOfNextDay'](_0x9f6cx23) - 0 : _0x9f6cx14['getEndOfPreviousDay'](_0x9f6cx23) - 1;
				while (_0x9f6cx5 && (_0x9f6cx1e ? _0x9f6cx5 < _0x9f6cx3d : _0x9f6cx5 > _0x9f6cx3d)) {
					if (!_0x9f6cx24[_0x9f6cx5]) {
						_0x9f6cx24[_0x9f6cx5] = [];
						_0x9f6cx11['push'](_0x9f6cx5)
					};
					_0x9f6cx24[_0x9f6cx5]['push']({
						type: '05-taskSegmentEnd'
					});
					_0x9f6cx5 = _0x9f6cx2e['call'](_0x9f6cx36)
				};
				while (_0x9f6cx21 && (_0x9f6cx1e ? _0x9f6cx21 < _0x9f6cx3d : _0x9f6cx21 > _0x9f6cx3d)) {
					if (!_0x9f6cx24[_0x9f6cx21]) {
						_0x9f6cx24[_0x9f6cx21] = [];
						_0x9f6cx11['push'](_0x9f6cx21)
					};
					_0x9f6cx24[_0x9f6cx21]['push']({
						type: '04-taskSegmentStart'
					});
					_0x9f6cx21 = _0x9f6cx2e['call'](_0x9f6cx10)
				}
			};
			var _0x9f6cx3e;
			for (_0x9f6cx2f = 0, _0x9f6cx31 = _0x9f6cx20['length']; _0x9f6cx2f < _0x9f6cx31; _0x9f6cx2f++) {
				var _0x9f6cx3f = _0x9f6cx20[_0x9f6cx2f]
					, _0x9f6cx26 = _0x9f6cx3f['getAvailabilityIntervalsFor'](_0x9f6cx3b);
				_0x9f6cx3e = _0x9f6cx12[_0x9f6cx3f['getCalendarId']()];
				for (_0x9f6cx30 = 0; _0x9f6cx30 < _0x9f6cx26['length']; _0x9f6cx30++) {
					_0x9f6cx7 = _0x9f6cx26[_0x9f6cx30];
					_0x9f6cx25 = _0x9f6cx7['startDate'] - 0;
					_0x9f6cx4 = _0x9f6cx7['endDate'] - 0;
					if (!_0x9f6cx24[_0x9f6cx25]) {
						_0x9f6cx24[_0x9f6cx25] = [];
						_0x9f6cx11['push'](_0x9f6cx25)
					};
					_0x9f6cx24[_0x9f6cx25]['push']({
						type: '02-resourceAvailailabilityStart'
						, resources: _0x9f6cx3e
					});
					if (!_0x9f6cx24[_0x9f6cx4]) {
						_0x9f6cx24[_0x9f6cx4] = [];
						_0x9f6cx11['push'](_0x9f6cx4)
					};
					_0x9f6cx24[_0x9f6cx4]['push']({
						type: '03-resourceAvailailabilityEnd'
						, resources: _0x9f6cx3e
					})
				}
			};
			_0x9f6cx11['sort'](_0x9f6cx2c);
			var _0x9f6cx8 = false
				, _0x9f6cx40 = {}
				, _0x9f6cx41 = 0
				, _0x9f6cx6 = false
				, _0x9f6cx3 = null
				, _0x9f6cx42, _0x9f6cx43, _0x9f6cx44, _0x9f6cx45;
			if (_0x9f6cx1e) {
				for (_0x9f6cx2f = 0; _0x9f6cx2f < _0x9f6cx11['length']; _0x9f6cx2f++) {
					_0x9f6cx25 = _0x9f6cx11[_0x9f6cx2f];
					_0x9f6cx4 = _0x9f6cx11[_0x9f6cx2f + 1];
					_0x9f6cx42 = _0x9f6cx24[_0x9f6cx25];
					_0x9f6cx42['sort'](_0x9f6cx2d);
					for (_0x9f6cx30 = 0; _0x9f6cx30 < _0x9f6cx42['length']; _0x9f6cx30++) {
						_0x9f6cx43 = _0x9f6cx42[_0x9f6cx30];
						switch (_0x9f6cx43['type']) {
						case '00-taskAvailailabilityStart':
							_0x9f6cx8 = true;
							break;
						case '01-taskAvailailabilityEnd':
							_0x9f6cx8 = false;
							break;
						case '02-resourceAvailailabilityStart':
							_0x9f6cx3e = _0x9f6cx43['resources'];
							for (_0x9f6cx44 = 0, _0x9f6cx45 = _0x9f6cx3e['length']; _0x9f6cx44 < _0x9f6cx45; _0x9f6cx44++) {
								_0x9f6cx40[_0x9f6cx3e[_0x9f6cx44]['resourceId']] = _0x9f6cx3e[_0x9f6cx44];
								_0x9f6cx41++
							};
							break;
						case '03-resourceAvailailabilityEnd':
							_0x9f6cx3e = _0x9f6cx43['resources'];
							for (_0x9f6cx44 = 0, _0x9f6cx45 = _0x9f6cx3e['length']; _0x9f6cx44 < _0x9f6cx45; _0x9f6cx44++) {
								delete _0x9f6cx40[_0x9f6cx3e[_0x9f6cx44]['resourceId']];
								_0x9f6cx41--
							};
							break;
						case '04-taskSegmentStart':
							_0x9f6cx1a = true;
							break;
						case '05-taskSegmentEnd':
							_0x9f6cx1a = false;
							break
						}
					};
					if (_0x9f6cx25 >= _0x9f6cx1f || _0x9f6cx4 <= _0x9f6cxf) {
						continue
					};
					_0x9f6cx6 = (_0x9f6cx8 || !_0x9f6cx32) && (!_0x9f6cx29 || _0x9f6cx41);
					if ((_0x9f6cx38 || _0x9f6cx1) && _0x9f6cx6) {
						var _0x9f6cx46 = _0x9f6cx1d + _0x9f6cx4 - _0x9f6cx25;
						_0x9f6cx3 = [];
						while (_0x9f6cx38 && _0x9f6cx38 < _0x9f6cx46) {
							_0x9f6cx19 = _0x9f6cx25 + _0x9f6cx38 - _0x9f6cx1d;
							if (!_0x9f6cx24[_0x9f6cx19]) {
								_0x9f6cx24[_0x9f6cx19] = [];
								_0x9f6cx3['push'](_0x9f6cx19)
							};
							_0x9f6cx24[_0x9f6cx19]['push']({
								type: '05-taskSegmentEnd'
							});
							if (_0x9f6cx19 == _0x9f6cx25) {
								_0x9f6cx1a = false
							};
							_0x9f6cx38 = _0x9f6cx2e['call'](_0x9f6cx37)
						};
						while (_0x9f6cx1 && _0x9f6cx1 < _0x9f6cx46) {
							_0x9f6cx3a = _0x9f6cx25 + _0x9f6cx1 - _0x9f6cx1d;
							if (!_0x9f6cx24[_0x9f6cx3a]) {
								_0x9f6cx24[_0x9f6cx3a] = [];
								_0x9f6cx3['push'](_0x9f6cx3a)
							};
							_0x9f6cx24[_0x9f6cx3a]['push']({
								type: '04-taskSegmentStart'
							});
							if (_0x9f6cx3a == _0x9f6cx25) {
								_0x9f6cx1a = true
							};
							_0x9f6cx1 = _0x9f6cx2e['call'](_0x9f6cx18)
						};
						if (_0x9f6cx3['length']) {
							_0x9f6cx3['sort'](_0x9f6cx2c);
							_0x9f6cx11['splice']['apply'](_0x9f6cx11, [_0x9f6cx2f + 1, 0]['concat'](_0x9f6cx3))
						};
						_0x9f6cx1d += _0x9f6cx4 - _0x9f6cx25
					};
					if ((_0x9f6cx6 && _0x9f6cx1a) || _0x9f6cx28) {
						if (_0x9f6cx25 < _0x9f6cxf) {
							_0x9f6cx25 = _0x9f6cxf - 0
						};
						if (_0x9f6cx4 > _0x9f6cx1f) {
							_0x9f6cx4 = _0x9f6cx1f - 0
						};
						if (_0x9f6cx1c['call'](_0x9f6cx27, _0x9f6cx25, _0x9f6cx4, _0x9f6cx40) === false) {
							return false
						}
					}
				}
			}
			else {
				for (_0x9f6cx2f = 0; _0x9f6cx2f < _0x9f6cx11['length']; _0x9f6cx2f++) {
					_0x9f6cx25 = _0x9f6cx11[_0x9f6cx2f + 1];
					_0x9f6cx4 = _0x9f6cx11[_0x9f6cx2f];
					_0x9f6cx42 = _0x9f6cx24[_0x9f6cx4];
					_0x9f6cx42['sort'](_0x9f6cx2d);
					for (_0x9f6cx30 = 0; _0x9f6cx30 < _0x9f6cx42['length']; _0x9f6cx30++) {
						_0x9f6cx43 = _0x9f6cx42[_0x9f6cx30];
						switch (_0x9f6cx43['type']) {
						case '01-taskAvailailabilityEnd':
							_0x9f6cx8 = true;
							break;
						case '00-taskAvailailabilityStart':
							_0x9f6cx8 = false;
							break;
						case '03-resourceAvailailabilityEnd':
							_0x9f6cx3e = _0x9f6cx43['resources'];
							for (_0x9f6cx44 = 0, _0x9f6cx45 = _0x9f6cx3e['length']; _0x9f6cx44 < _0x9f6cx45; _0x9f6cx44++) {
								_0x9f6cx40[_0x9f6cx3e[_0x9f6cx44]['resourceId']] = _0x9f6cx3e[_0x9f6cx44];
								_0x9f6cx41++
							};
							break;
						case '02-resourceAvailailabilityStart':
							_0x9f6cx3e = _0x9f6cx43['resources'];
							for (_0x9f6cx44 = 0, _0x9f6cx45 = _0x9f6cx3e['length']; _0x9f6cx44 < _0x9f6cx45; _0x9f6cx44++) {
								delete _0x9f6cx40[_0x9f6cx3e[_0x9f6cx44]['resourceId']];
								_0x9f6cx41--
							};
							break;
						case '05-taskSegmentEnd':
							_0x9f6cx1a = true;
							break;
						case '04-taskSegmentStart':
							_0x9f6cx1a = false;
							break
						}
					};
					if (_0x9f6cx25 > _0x9f6cx1f || _0x9f6cx4 <= _0x9f6cxf) {
						continue
					};
					_0x9f6cx6 = (_0x9f6cx8 || !_0x9f6cx32) && (!_0x9f6cx29 || _0x9f6cx41);
					if ((_0x9f6cx38 || _0x9f6cx1) && _0x9f6cx6) {
						var _0x9f6cx16 = _0x9f6cx39 - (_0x9f6cx1d + _0x9f6cx4 - _0x9f6cx25);
						_0x9f6cx3 = [];
						while (_0x9f6cx38 && _0x9f6cx38 >= _0x9f6cx16) {
							_0x9f6cx19 = _0x9f6cx4 - (_0x9f6cx39 - _0x9f6cx1d - _0x9f6cx38);
							if (!_0x9f6cx24[_0x9f6cx19]) {
								_0x9f6cx24[_0x9f6cx19] = [];
								_0x9f6cx3['push'](_0x9f6cx19)
							};
							_0x9f6cx24[_0x9f6cx19]['push']({
								type: '05-taskSegmentEnd'
							});
							if (_0x9f6cx19 == _0x9f6cx4) {
								_0x9f6cx1a = false
							};
							_0x9f6cx38 = _0x9f6cx2e['call'](_0x9f6cx37)
						};
						while (_0x9f6cx1 && _0x9f6cx1 >= _0x9f6cx16) {
							_0x9f6cx3a = _0x9f6cx4 - (_0x9f6cx39 - _0x9f6cx1d - _0x9f6cx1);
							if (!_0x9f6cx24[_0x9f6cx3a]) {
								_0x9f6cx24[_0x9f6cx3a] = [];
								_0x9f6cx3['push'](_0x9f6cx3a)
							};
							_0x9f6cx24[_0x9f6cx3a]['push']({
								type: '04-taskSegmentStart'
							});
							if (_0x9f6cx3a == _0x9f6cx4) {
								_0x9f6cx1a = true
							};
							_0x9f6cx1 = _0x9f6cx2e['call'](_0x9f6cx18)
						};
						if (_0x9f6cx3['length']) {
							_0x9f6cx3['sort'](_0x9f6cx2c);
							_0x9f6cx11['splice']['apply'](_0x9f6cx11, [_0x9f6cx2f + 1, 0]['concat'](_0x9f6cx3))
						};
						_0x9f6cx1d += _0x9f6cx4 - _0x9f6cx25
					};
					if ((_0x9f6cx6 && _0x9f6cx1a) || _0x9f6cx28) {
						if (_0x9f6cx25 < _0x9f6cxf) {
							_0x9f6cx25 = _0x9f6cxf - 0
						};
						if (_0x9f6cx4 > _0x9f6cx1f) {
							_0x9f6cx4 = _0x9f6cx1f - 0
						};
						if (_0x9f6cx1c['call'](_0x9f6cx27, _0x9f6cx25, _0x9f6cx4, _0x9f6cx40) === false) {
							return false
						}
					}
				}
			};
			_0x9f6cx23 = _0x9f6cx1e ? _0x9f6cx14['getStartOfNextDay'](_0x9f6cx23) : _0x9f6cx14['getEndOfPreviousDay'](_0x9f6cx23)
		}
	}
	, forEachAvailabilityIntervalWithResources: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx2) {
		if (!_0x9f6cx1['resources']) {
			_0x9f6cx1['resources'] = true
		};
		this['forEachAvailabilityInterval']['apply'](this, arguments)
	}
	, calculateEffortDrivenEndDate: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx2) {
		if (!_0x9f6cx5) {
			return _0x9f6cx1
		};
		var _0x9f6cx4 = this['getUnitConverter']()['convertDurationToMs'](_0x9f6cx5, _0x9f6cx2 || this['getEffortUnit']());
		var _0x9f6cx3 = new Date(_0x9f6cx1);
		this['forEachAvailabilityIntervalWithResources']({
			startDate: _0x9f6cx1
		}, function (_0x9f6cx13, _0x9f6cxa, _0x9f6cxc) {
			var _0x9f6cxb = 0;
			for (var _0x9f6cx8 in _0x9f6cxc) {
				_0x9f6cxb += _0x9f6cxc[_0x9f6cx8]['units']
			};
			var _0x9f6cx6 = _0x9f6cxa - _0x9f6cx13;
			var _0x9f6cx7 = _0x9f6cxb * _0x9f6cx6 / 100;
			if (_0x9f6cx7 >= _0x9f6cx4) {
				_0x9f6cx3 = new Date(_0x9f6cx13 + _0x9f6cx4 / _0x9f6cx7 * _0x9f6cx6);
				return false
			}
			else {
				_0x9f6cx4 -= _0x9f6cx7
			}
		});
		return _0x9f6cx3
	}
	, refreshCalculatedParentNodeData: function () {
		this['beginEdit']();
		var _0x9f6cx18 = this['autoCalculatePercentDoneForParentTask'];
		var _0x9f6cxc = this['autoCalculateEffortForParentTask'];
		var _0x9f6cx17 = this['autoCalculateCostForParentTask'];
		var _0x9f6cx1 = this['childNodes'];
		var _0x9f6cx3 = _0x9f6cx1['length'];
		var _0x9f6cx7 = {};
		if (_0x9f6cx3 > 0 && (_0x9f6cxc || _0x9f6cx18 || _0x9f6cx17)) {
			var _0x9f6cx8 = 0;
			var _0x9f6cxf = 0;
			var _0x9f6cx10 = 0;
			var _0x9f6cx1b = 0;
			var _0x9f6cx16 = 0;
			for (var _0x9f6cx14 = 0; _0x9f6cx14 < _0x9f6cx3; _0x9f6cx14++) {
				var _0x9f6cx2 = _0x9f6cx1[_0x9f6cx14];
				if (_0x9f6cx2['parentNode']) {
					var _0x9f6cx1e = _0x9f6cx2['isLeaf']();
					if (_0x9f6cxc) {
						_0x9f6cx8 += _0x9f6cx2['getEffort']('MILLI')
					};
					if (_0x9f6cx17) {
						_0x9f6cx1b += _0x9f6cx2['getCost']();
						_0x9f6cx16 += _0x9f6cx2['getActualCost']()
					};
					if (_0x9f6cx18) {
						var _0x9f6cx5 = _0x9f6cx1e ? _0x9f6cx2['getDuration']('MILLI') || 0 : _0x9f6cx2['childTasksDuration'];
						_0x9f6cxf += _0x9f6cx5;
						_0x9f6cx10 += _0x9f6cx1e ? _0x9f6cx5 * (_0x9f6cx2['getPercentDone']() || 0) : _0x9f6cx2['completedChildTasksDuration']
					}
				}
			};
			if (_0x9f6cxc && this['getEffort']('MILLI') != _0x9f6cx8) {
				_0x9f6cx7['Effort'] = true;
				this['setEffortWithoutPropagation'](this['getUnitConverter']()['convertMSDurationToUnit'](_0x9f6cx8, this['getEffortUnit']()))
			};
			if (_0x9f6cx18) {
				this['childTasksDuration'] = _0x9f6cxf;
				this['completedChildTasksDuration'] = _0x9f6cx10;
				var _0x9f6cx12 = _0x9f6cxf ? _0x9f6cx10 / _0x9f6cxf : 0;
				if (this['getPercentDone']() != _0x9f6cx12) {
					_0x9f6cx7['PercentDone'] = true;
					this['setPercentDoneWithoutPropagation'](_0x9f6cx12)
				}
			};
			if (_0x9f6cx17) {
				this['setActualCost'](_0x9f6cx16);
				this['setCost'](_0x9f6cx1b)
			}
		};
		var _0x9f6cx4, _0x9f6cxe;
		if (!this['isRoot']() && _0x9f6cx3 > 0 && !this['isManuallyScheduled']() && !this['isReadOnly']()) {
			var _0x9f6cx6 = new Date(-8640000000000000)
				, _0x9f6cx13 = new Date(+8640000000000000)
				, _0x9f6cxb = new Date(+8640000000000000)
				, _0x9f6cx1d = new Date(-8640000000000000);
			for (var _0x9f6cx15 = 0; _0x9f6cx15 < _0x9f6cx3; _0x9f6cx15++) {
				var _0x9f6cxd = _0x9f6cx1[_0x9f6cx15];
				_0x9f6cxb = Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cxb, _0x9f6cxd['getStartDate']() || _0x9f6cxb);
				_0x9f6cx1d = Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cx1d, _0x9f6cxd['getEndDate']() || _0x9f6cx1d)
			};
			if (_0x9f6cx1d < _0x9f6cxb && _0x9f6cxb < _0x9f6cx13 && _0x9f6cx1d > _0x9f6cx6) {
				var _0x9f6cx1c;
				_0x9f6cx1c = _0x9f6cx1d;
				_0x9f6cx1d = _0x9f6cxb;
				_0x9f6cxb = _0x9f6cx1c
			};
			_0x9f6cx4 = _0x9f6cx7['StartDate'] = _0x9f6cxb - _0x9f6cx13 !== 0 && this['getStartDate']() - _0x9f6cxb !== 0;
			_0x9f6cxe = _0x9f6cx7['EndDate'] = _0x9f6cx1d - _0x9f6cx6 !== 0 && this['getEndDate']() - _0x9f6cx1d !== 0;
			if (_0x9f6cx4 && _0x9f6cxe) {
				this['setStartEndDateWithoutPropagation'](_0x9f6cxb, _0x9f6cx1d, false)
			}
			else {
				if (_0x9f6cx4) {
					this['setStartDateWithoutPropagation'](_0x9f6cxb, false, false)
				}
				else {
					if (_0x9f6cxe) {
						this['setEndDateWithoutPropagation'](_0x9f6cx1d, false, false)
					}
				}
			}
		};
		this['endEdit']();
		return _0x9f6cx7
	}
	, recalculateParents: function () {
		var _0x9f6cx1 = this['parentNode'];
		_0x9f6cx1 && (_0x9f6cx1['refreshCalculatedParentNodeData'](), !this['getTaskStore']()['cascading'] && _0x9f6cx1['recalculateParents']())
	}
	, isMilestone: function (_0x9f6cx2) {
		if (_0x9f6cx2) {
			return this['isBaselineMilestone']()
		};
		if (!this['get']('leaf')) {
			var _0x9f6cx1 = this['getStartDate']()
				, _0x9f6cx5 = this['getEndDate']();
			if (_0x9f6cx1 && _0x9f6cx5) {
				return _0x9f6cx5 - _0x9f6cx1 === 0
			}
		};
		return this['getDuration']() === 0
	}
	, convertToMilestone: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['propagateChanges'](function () {
			return _0x9f6cx1['convertToMilestoneWithoutPropagation']()
		}, _0x9f6cx2)
	}
	, convertToMilestoneWithoutPropagation: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = false;
		if (!_0x9f6cx2['isMilestone']()) {
			_0x9f6cx1 = _0x9f6cx2['setStartDateWithoutPropagation'](_0x9f6cx2['getEndDate'](), false);
			_0x9f6cx1 = _0x9f6cx1 && _0x9f6cx2['setDurationWithoutPropagation'](0)
		};
		return _0x9f6cx1
	}
	, convertToRegular: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['propagateChanges'](function () {
			return _0x9f6cx1['convertToRegularWithoutPropagation']()
		}, _0x9f6cx2)
	}
	, convertToRegularWithoutPropagation: function () {
		var _0x9f6cx3 = this
			, _0x9f6cx2 = false
			, _0x9f6cx5, _0x9f6cx1;
		if (_0x9f6cx3['isMilestone']()) {
			_0x9f6cx5 = _0x9f6cx3['get'](_0x9f6cx3['durationUnitField']);
			_0x9f6cx1 = _0x9f6cx3['calculateStartDate'](_0x9f6cx3['getStartDate'](), 1, _0x9f6cx5);
			_0x9f6cx2 = _0x9f6cx3['setDurationWithoutPropagation'](1, _0x9f6cx5);
			_0x9f6cx2 = _0x9f6cx2 && _0x9f6cx3['setStartDateWithoutPropagation'](_0x9f6cx1, true, false, false)
		};
		return _0x9f6cx2
	}
	, isBaselineMilestone: function () {
		var _0x9f6cx2 = this['getBaselineStartDate']()
			, _0x9f6cx1 = this['getBaselineEndDate']();
		if (_0x9f6cx2 && _0x9f6cx1) {
			return _0x9f6cx1 - _0x9f6cx2 === 0
		};
		return false
	}
	, markAsParent: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['isSegmented']() && _0x9f6cx1['setSegmentsWithoutPropagation'](null);
		_0x9f6cx1['set']('leaf', false)
	}
	, getDurationUnit: function () {
		return this['get'](this['durationUnitField']) || Ext.ux.Scheduler['util']['Date']['DAY']
	}
	, getEffortUnit: function () {
		return this['get'](this['effortUnitField']) || Ext.ux.Scheduler['util']['Date']['HOUR']
	}
	, setPercentDone: function (_0x9f6cx2, _0x9f6cx4) {
		var _0x9f6cx3 = this;
		var _0x9f6cx1 = !_0x9f6cx3['getManuallyScheduled']() && _0x9f6cx3['isCompleted']() && _0x9f6cx2 < 100;
		if (_0x9f6cx1) {
			_0x9f6cx3['propagateChanges'](function () {
				return _0x9f6cx3['setPercentDoneWithoutPropagation'](_0x9f6cx2)
			}, _0x9f6cx4)
		}
		else {
			_0x9f6cx3['setPercentDoneWithoutPropagation'](_0x9f6cx2);
			var _0x9f6cx5 = {};
			_0x9f6cx5[_0x9f6cx3['getId']()] = _0x9f6cx3;
			_0x9f6cx4 && _0x9f6cx4(true, _0x9f6cx5)
		}
	}
	, setPercentDoneWithoutPropagation: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx1 != _0x9f6cx2['getPercentDone']()) {
			_0x9f6cx2['beginEdit']();
			if (!_0x9f6cx2['getManuallyScheduled']() && _0x9f6cx2['isCompleted']() && _0x9f6cx1 < 100) {
				_0x9f6cx2['set']('needsReScheduling', true)
			};
			_0x9f6cx2['set'](_0x9f6cx2['percentDoneField'], _0x9f6cx1);
			_0x9f6cx2['set'](_0x9f6cx2['actualEffortField'], _0x9f6cx2['calculateActualEffort']());
			_0x9f6cx2['recalculateCost']();
			_0x9f6cx2['endEdit']()
		};
		return true
	}
	, getBaselinePercentDone: function () {
		return this['get'](this['baselinePercentDoneField']) || 0
	}
	, isPersistable: function () {
		var _0x9f6cx1 = this['parentNode'];
		return !_0x9f6cx1 || !_0x9f6cx1['phantom'] || _0x9f6cx1['isRoot']()
	}
	, getResources: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['getAssignmentStore']();
		return _0x9f6cx2 && _0x9f6cx2['getResourcesForEvent'](_0x9f6cx1) || []
	}
	, getAssignments: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['getAssignmentStore']();
		return _0x9f6cx2 && _0x9f6cx2['getAssignmentsForTask'](_0x9f6cx1) || []
	}
	, hasAssignments: function () {
		return this['getAssignments']()['length'] > 0
	}
	, hasResources: function () {
		var _0x9f6cx5 = this['getAssignments']()
			, _0x9f6cx2 = false
			, _0x9f6cx3, _0x9f6cx1;
		for (_0x9f6cx3 = 0, _0x9f6cx1 = _0x9f6cx5['length']; !_0x9f6cx2 && _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
			_0x9f6cx2 = !!_0x9f6cx5[_0x9f6cx3]['getResource']()
		};
		return _0x9f6cx2
	}
	, getAssignmentFor: function (_0x9f6cx2) {
		var _0x9f6cx1 = this
			, _0x9f6cx5 = _0x9f6cx1['getAssignmentStore']();
		return _0x9f6cx5 && _0x9f6cx5['getAssignmentForEventAndResource'](_0x9f6cx1, _0x9f6cx2) || null
	}
	, isAssignedTo: function (_0x9f6cx2) {
		var _0x9f6cx1 = this
			, _0x9f6cx5 = _0x9f6cx1['getAssignmentStore']();
		return _0x9f6cx5 && _0x9f6cx5['isTaskAssignedToResource'](_0x9f6cx1, _0x9f6cx2) || false
	}
	, assign: function (_0x9f6cx4, _0x9f6cx2, _0x9f6cx6) {
		var _0x9f6cx3 = this
			, _0x9f6cx1, _0x9f6cx5;
		_0x9f6cx3['propagateChanges'](function () {
			return _0x9f6cx3['assignWithoutPropagation'](_0x9f6cx4, _0x9f6cx2, function _0x9f6cx8(_0x9f6cxc, _0x9f6cx9) {
				_0x9f6cx5 = _0x9f6cxc;
				_0x9f6cx1 = _0x9f6cx9
			})
		}, function _0x9f6cx7(_0x9f6cx9, _0x9f6cx8) {
			_0x9f6cx9 && _0x9f6cx5 && _0x9f6cx5();
			_0x9f6cx6 && _0x9f6cx6(_0x9f6cx9, _0x9f6cx8)
		});
		return _0x9f6cx1
	}
	, assignWithoutPropagation: function (_0x9f6cx2, _0x9f6cx7, _0x9f6cx4) {
		var _0x9f6cx6 = this
			, _0x9f6cxa = []
			, _0x9f6cx8 = _0x9f6cx6['getTaskStore']()
			, _0x9f6cx3 = _0x9f6cx8['getAssignmentStore']()
			, _0x9f6cxc = _0x9f6cx8['getResourceStore']()
			, _0x9f6cx1, _0x9f6cx5;
		_0x9f6cx7 = _0x9f6cx7 || 100;
		!_0x9f6cx6['getAssignmentFor'](_0x9f6cx2) || Ext['Error']['raise']('Resource can\'t be assigned twice to the same task');
		if (_0x9f6cx2 instanceof Ext.ux.Gantt['model']['Resource'] && _0x9f6cxc['indexOf'](_0x9f6cx2) == -1) {
			_0x9f6cx5 = _0x9f6cx2['getId']();
			_0x9f6cxc['add'](_0x9f6cx2);
			_0x9f6cxa['push'](function () {
				_0x9f6cxc['remove'](_0x9f6cx2)
			})
		}
		else {
			if (_0x9f6cx2 instanceof Ext.ux.Gantt['model']['Resource']) {
				_0x9f6cx5 = _0x9f6cx2['getId']()
			}
			else {
				if (_0x9f6cxc['indexOfId'](_0x9f6cx2) >= 0) {
					_0x9f6cx5 = _0x9f6cx2
				}
				else {
					Ext['Error']['raise']('can\'t assign resource to a task, task\'s resource store doesn\'t contain resource id given');
					var _0x9f6cx9 = false
				}
			}
		};
		_0x9f6cx1 = _0x9f6cx3['assignTaskToResource'](_0x9f6cx6, _0x9f6cx5, _0x9f6cx7);
		_0x9f6cxa['push'](function () {
			_0x9f6cx3['unassignTaskFromResource'](_0x9f6cx6, _0x9f6cx5)
		});
		_0x9f6cx4 && _0x9f6cx4(function () {
			Ext['Array']['each'](_0x9f6cxa, function (_0x9f6cx13) {
				_0x9f6cx13()
			})
		}, _0x9f6cx1[0]);
		return true
	}
	, unassign: function () {
		return this['unAssign']['apply'](this, arguments)
	}
	, unAssign: function (_0x9f6cx5, _0x9f6cx4) {
		var _0x9f6cx2 = this
			, _0x9f6cx1;
		_0x9f6cx2['propagateChanges'](function () {
			return _0x9f6cx2['unassignWithoutPropagation'](_0x9f6cx5, function _0x9f6cx7(_0x9f6cx6) {
				_0x9f6cx1 = _0x9f6cx6
			})
		}, function _0x9f6cx3(_0x9f6cx6, _0x9f6cx7) {
			_0x9f6cx6 && _0x9f6cx1 && _0x9f6cx1();
			_0x9f6cx4 && _0x9f6cx4(_0x9f6cx6, _0x9f6cx7)
		})
	}
	, unassignWithoutPropagation: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = this
			, _0x9f6cx6 = _0x9f6cx5 instanceof Ext.ux.Gantt['model']['Resource'] ? _0x9f6cx5['getId']() : _0x9f6cx5
			, _0x9f6cx3 = _0x9f6cx2['getAssignmentStore']()
			, _0x9f6cx7 = _0x9f6cx2['getAssignmentFor'](_0x9f6cx6)
			, _0x9f6cx4;
		_0x9f6cx7 || Ext['Error']['raise']('can\'t unassign resource `' + _0x9f6cx6 + '` from task `' + _0x9f6cx2['getId']() + '` resource is not assigned to the task!');
		_0x9f6cx4 = _0x9f6cx3['indexOf'](_0x9f6cx7);
		_0x9f6cx3['unassignTaskFromResource'](_0x9f6cx2, _0x9f6cx5);
		_0x9f6cx1 && _0x9f6cx1(function () {
			_0x9f6cx3['insert'](_0x9f6cx4, _0x9f6cx7)
		});
		return true
	}
	, reassign: function (_0x9f6cx1, _0x9f6cx2, _0x9f6cx6) {
		var _0x9f6cx3 = this
			, _0x9f6cx4, _0x9f6cx5;
		_0x9f6cx3['propagateChanges'](function () {
			var _0x9f6cxa = _0x9f6cx3['getAssignmentFor'](_0x9f6cx1)['getUnits']();
			var _0x9f6cx8 = false;
			_0x9f6cx8 = _0x9f6cx3['unassignWithoutPropagation'](_0x9f6cx1, function _0x9f6cxc(_0x9f6cx13) {
				_0x9f6cx4 = _0x9f6cx13
			});
			_0x9f6cx8 = _0x9f6cx8 && _0x9f6cx3['assignWithoutPropagation'](_0x9f6cx2, _0x9f6cxa, function _0x9f6cx9(_0x9f6cx13) {
				_0x9f6cx5 = _0x9f6cx13
			});
			return _0x9f6cx8
		}, function _0x9f6cx7(_0x9f6cx9, _0x9f6cx8) {
			if (_0x9f6cx9) {
				_0x9f6cx5 && _0x9f6cx5();
				_0x9f6cx4 && _0x9f6cx4()
			};
			_0x9f6cx6 && _0x9f6cx6(_0x9f6cx9, _0x9f6cx8)
		})
	}
	, linkTo: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx6, _0x9f6cx4) {
		var _0x9f6cx3 = this
			, _0x9f6cx2;
		_0x9f6cx3['propagateChanges'](function () {
			return _0x9f6cx3['linkToWithoutPropagation'](_0x9f6cx1, _0x9f6cx5, function _0x9f6cx8(_0x9f6cx9) {
				_0x9f6cx2 = _0x9f6cx9
			}, _0x9f6cx4)
		}, function _0x9f6cx7(_0x9f6cx9, _0x9f6cx8) {
			_0x9f6cx9 && _0x9f6cx2 && _0x9f6cx2();
			_0x9f6cx6 && _0x9f6cx6(_0x9f6cx9, _0x9f6cx8)
		})
	}
	, linkToWithoutPropagation: function (_0x9f6cx3, _0x9f6cx9, _0x9f6cx2) {
		var _0x9f6cx8 = this
			, _0x9f6cx7 = _0x9f6cx8['getId']()
			, _0x9f6cxc = _0x9f6cx8['getTaskStore']()
			, _0x9f6cx5 = _0x9f6cx8['getDependencyStore']()
			, _0x9f6cxa = _0x9f6cx8
			, _0x9f6cx4;
		_0x9f6cx3 = _0x9f6cx3 instanceof Ext.ux.Gantt['model']['Task'] ? _0x9f6cx3['getId']() : _0x9f6cx3;
		_0x9f6cx9 = ((_0x9f6cx9 === null || _0x9f6cx9 === undefined) && Ext.ux.Gantt['model']['Dependency']['Type']['EndToStart']) || _0x9f6cx9;
		_0x9f6cxc['getModelById'](_0x9f6cx3 instanceof Ext.ux.Gantt['model']['Task'] ? _0x9f6cx3['getId']() : _0x9f6cx3) != -1 || Ext['Error']['raise']('can\'t link task `' + _0x9f6cx7 + '` to task with id `' + _0x9f6cx3 + '` the task is not present in the task store!');
		_0x9f6cx4 = new _0x9f6cx5['model']();
		_0x9f6cx4['setSourceId'](_0x9f6cx7);
		_0x9f6cx4['setTargetId'](_0x9f6cx3);
		_0x9f6cx4['setType'](_0x9f6cx9);
		if (_0x9f6cx5['isValidDependency'](_0x9f6cx4)) {
			_0x9f6cx5['add'](_0x9f6cx4);
			var _0x9f6cx1 = _0x9f6cx4['getSourceTask']()
				, _0x9f6cx6 = _0x9f6cx4['getTargetTask']();
			_0x9f6cx1['isUnscheduled']() && _0x9f6cx1['set']('needsReScheduling', true);
			_0x9f6cx6['set']('needsReScheduling', true);
			_0x9f6cxa = _0x9f6cx8
		};
		_0x9f6cx2 && _0x9f6cx2(function () {
			_0x9f6cx5['remove'](_0x9f6cx4)
		});
		return _0x9f6cxa
	}
	, unlinkFrom: function (_0x9f6cx1, _0x9f6cx4) {
		var _0x9f6cx5 = this
			, _0x9f6cx2;
		_0x9f6cx5['propagateChanges'](function () {
			return _0x9f6cx5['unlinkFromWithoutPropagation'](_0x9f6cx1, function _0x9f6cx7(_0x9f6cx6) {
				_0x9f6cx2 = _0x9f6cx6
			})
		}, function _0x9f6cx3(_0x9f6cx6, _0x9f6cx7) {
			_0x9f6cx6 && _0x9f6cx2 && _0x9f6cx2();
			_0x9f6cx4 && _0x9f6cx4(_0x9f6cx6, _0x9f6cx7)
		})
	}
	, unlinkFromWithoutPropagation: function (_0x9f6cx3, _0x9f6cx4) {
		var _0x9f6cx6 = this
			, _0x9f6cx1 = _0x9f6cx6['getId']()
			, _0x9f6cx5 = _0x9f6cx6['getDependencyStore']()
			, _0x9f6cx2, _0x9f6cx7;
		_0x9f6cx3 = _0x9f6cx3 instanceof Ext.ux.Gantt['model']['Task'] ? _0x9f6cx3['getId']() : _0x9f6cx3;
		_0x9f6cx2 = _0x9f6cx5['getTasksLinkingDependency'](_0x9f6cx3, _0x9f6cx1);
		_0x9f6cx2 || Ext['Error']['raise']('can\'t unlink task \'' + _0x9f6cx1 + '\' from task \'' + _0x9f6cx3 + ', tasks are not linked!');
		_0x9f6cx7 = _0x9f6cx5['indexOf'](_0x9f6cx2);
		_0x9f6cx5['remove'](_0x9f6cx2);
		_0x9f6cx4 && _0x9f6cx4(function () {
			_0x9f6cx5['insert'](_0x9f6cx7, _0x9f6cx2)
		});
		return _0x9f6cx6
	}
	, calculateEffort: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx2) {
		if (!_0x9f6cx1 || !_0x9f6cx5) {
			return 0
		};
		var _0x9f6cx3 = 0;
		this['forEachAvailabilityIntervalWithResources']({
			startDate: _0x9f6cx1
			, endDate: _0x9f6cx5
		}, function (_0x9f6cx8, _0x9f6cx6, _0x9f6cx7) {
			var _0x9f6cxc = 0;
			for (var _0x9f6cx4 in _0x9f6cx7) {
				_0x9f6cxc += _0x9f6cx7[_0x9f6cx4]['units']
			};
			_0x9f6cx3 += (_0x9f6cx6 - _0x9f6cx8) * _0x9f6cxc / 100
		});
		return this['getUnitConverter']()['convertMSDurationToUnit'](_0x9f6cx3, _0x9f6cx2 || this['getEffortUnit']())
	}
	, updateAssignments: function () {
		var _0x9f6cx1 = this['getStartDate']();
		var _0x9f6cx5 = this['getEndDate']();
		if (!_0x9f6cx1 || !_0x9f6cx5) {
			return
		};
		var _0x9f6cx2 = 0;
		this['forEachAvailabilityIntervalWithResources']({
			startDate: _0x9f6cx1
			, endDate: _0x9f6cx5
		}, function (_0x9f6cx6, _0x9f6cx7, _0x9f6cx4) {
			for (var _0x9f6cx8 in _0x9f6cx4) {
				_0x9f6cx2 += _0x9f6cx7 - _0x9f6cx6
			}
		});
		if (!_0x9f6cx2) {
			return
		};
		var _0x9f6cx3 = this['getEffort'](Ext.ux.Scheduler['util']['Date'].MILLI);
		Ext['Array']['each'](this['getAssignments'](), function (_0x9f6cx4) {
			_0x9f6cx4['setUnits'](_0x9f6cx3 / _0x9f6cx2 * 100)
		})
	}
	, updateEffortBasedOnDuration: function () {
		this['setEffortWithoutPropagation'](this['calculateEffort'](this['getStartDate'](), this['getEndDate']()))
	}
	, updateEffortBasedOnSpan: function () {
		this['updateEffortBasedOnDuration']()
	}
	, updateSpanBasedOnEffort: function () {
		this['setStartEndDateWithoutPropagation'](this['getStartDate'](), this['recalculateEndDate']())
	}
	, onPotentialEffortChange: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getTaskStore'](true);
		if (_0x9f6cx2['isTaskStored']() && (!_0x9f6cx1 || !_0x9f6cx1['isUndoingOrRedoing']())) {
			switch (_0x9f6cx2['getSchedulingMode']()) {
			case 'FixedDuration':
				_0x9f6cx2['updateEffortBasedOnDuration']();
				break;
			case 'DynamicAssignment':
				_0x9f6cx2['updateAssignments']();
				break
			}
		}
	}
	, onAssignmentMutation: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getTaskStore'](true)
			, _0x9f6cx1 = _0x9f6cx5['autoCalculateCost'];
		if (_0x9f6cx5['isTaskStored']() && (!_0x9f6cx2 || !_0x9f6cx2['isUndoingOrRedoing']())) {
			switch (_0x9f6cx5['getSchedulingMode']()) {
			case 'FixedDuration':
				_0x9f6cx5['updateEffortBasedOnDuration']();
				_0x9f6cx1 = false;
				break;
			case 'EffortDriven':
				_0x9f6cx5['updateSpanBasedOnEffort']();
				break;
			case 'DynamicAssignment':
				_0x9f6cx5['updateAssignments']();
				break
			};
			if (_0x9f6cx1) {
				_0x9f6cx5['recalculateCost']()
			}
		}
	}
	, onAssignmentStructureMutation: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getTaskStore'](true)
			, _0x9f6cx1 = _0x9f6cx5['autoCalculateCost'];
		if (_0x9f6cx5['isTaskStored']() && (!_0x9f6cx2 || !_0x9f6cx2['isUndoingOrRedoing']())) {
			switch (_0x9f6cx5['getSchedulingMode']()) {
			case 'FixedDuration':
				_0x9f6cx5['updateEffortBasedOnDuration']();
				_0x9f6cx1 = false;
				break;
			case 'EffortDriven':
				_0x9f6cx5['updateSpanBasedOnEffort']();
				break;
			case 'DynamicAssignment':
				_0x9f6cx5['updateAssignments']();
				break
			};
			if (_0x9f6cx1) {
				_0x9f6cx5['recalculateCost']()
			}
		}
	}
	, adjustToCalendar: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['propagateChanges'](function () {
			return _0x9f6cx1['adjustToCalendarWithoutPropagation']()
		}, _0x9f6cx2)
	}
	, adjustToCalendarWithoutPropagation: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getTaskStore'](true)
			, _0x9f6cx1 = false;
		if (_0x9f6cx2) {
			if (_0x9f6cx5['get']('leaf')) {
				_0x9f6cx5['setStartDateWithoutPropagation'](_0x9f6cx5['getStartDate'](), true, _0x9f6cx2['skipWeekendsDuringDragDrop']);
				_0x9f6cx5['scheduleWithoutPropagation']({
					taskStore: _0x9f6cx2
				});
				_0x9f6cx1 = _0x9f6cx5
			}
			else {
				if (_0x9f6cx5['getStartDate']() && _0x9f6cx5['getEndDate']()) {
					_0x9f6cx5['set'](_0x9f6cx5['durationField'], _0x9f6cx5['calculateDuration'](_0x9f6cx5['getStartDate'](), _0x9f6cx5['getEndDate'](), _0x9f6cx5['getDurationUnit']()));
					_0x9f6cx1 = _0x9f6cx5
				}
			}
		};
		return _0x9f6cx1
	}
	, isReadOnly: function () {
		var _0x9f6cx1 = false;
		this['bubble'](function (_0x9f6cx2) {
			if (_0x9f6cx2['getReadOnly']()) {
				_0x9f6cx1 = true;
				return false
			}
		}, this);
		return _0x9f6cx1
	}
	, isEditable: function (_0x9f6cx1) {
		if (!this['getReadOnly']() && this['isReadOnly']()) {
			return false
		};
		if (_0x9f6cx1 === this['readOnlyField']) {
			return true
		};
		if (this['getReadOnly']()) {
			return false
		};
		if (!this['isLeaf']()) {
			if (this['autoCalculateEffortForParentTask']) {
				if (_0x9f6cx1 === this['effortField']) {
					return false
				};
				if (_0x9f6cx1 === this['actualEffortField']) {
					return false
				}
			};
			if (this['autoCalculateCostForParentTask']) {
				if (_0x9f6cx1 === this['costField']) {
					return false
				};
				if (_0x9f6cx1 === this['actualCostField']) {
					return false
				}
			};
			if (_0x9f6cx1 === this['percentDoneField'] && this['autoCalculatePercentDoneForParentTask']) {
				return false
			}
		};
		if (this['autoCalculateCost']) {
			if (_0x9f6cx1 === this['costField']) {
				return false
			};
			if (_0x9f6cx1 === this['actualCostField']) {
				return false
			}
		};
		if ((_0x9f6cx1 === this['durationField'] || _0x9f6cx1 === this['endDateField']) && this['getSchedulingMode']() === 'EffortDriven') {
			return false
		};
		if (_0x9f6cx1 === this['effortField'] && this['getSchedulingMode']() === 'FixedDuration') {
			return false
		};
		return true
	}
	, isDraggable: function () {
		return this['getDraggable']()
	}
	, isResizable: function () {
		return this['getResizable']()
	}
	, getWBSCode: function () {
		var _0x9f6cx5 = []
			, _0x9f6cx2, _0x9f6cx1 = this;
		while (_0x9f6cx1['parentNode']) {
			_0x9f6cx2 = _0x9f6cx1['parentNode']['childNodes']['indexOf'](_0x9f6cx1);
			_0x9f6cx5['push'](_0x9f6cx2 + 1);
			_0x9f6cx1 = _0x9f6cx1['parentNode']
		};
		return _0x9f6cx5['reverse']().join('.')
	}
	, resetTotalCount: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		while (_0x9f6cx1) {
			_0x9f6cx1['totalCount'] = _0x9f6cx2 ? -1 : null;
			_0x9f6cx1 = _0x9f6cx1['parentNode']
		}
	}
	, getTotalCount: function () {
		var _0x9f6cx2 = this['totalCount'];
		var _0x9f6cx5 = _0x9f6cx2 == -1;
		if (_0x9f6cx2 == null || _0x9f6cx5) {
			var _0x9f6cx4 = this['childNodes'];
			_0x9f6cx2 = _0x9f6cx4['length'];
			for (var _0x9f6cx3 = 0, _0x9f6cx1 = _0x9f6cx4['length']; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
				_0x9f6cx2 += _0x9f6cx4[_0x9f6cx3]['getTotalCount']()
			};
			if (_0x9f6cx5) {
				return _0x9f6cx2
			}
			else {
				this['totalCount'] = _0x9f6cx2
			}
		};
		return _0x9f6cx2
	}
	, getPreviousSiblingsTotalCount: function () {
		var _0x9f6cx1 = this['previousSibling']
			, _0x9f6cx2 = this['data']['index'];
		while (_0x9f6cx1) {
			_0x9f6cx2 += _0x9f6cx1['getTotalCount']();
			_0x9f6cx1 = _0x9f6cx1['previousSibling']
		};
		return _0x9f6cx2
	}
	, getSequenceNumber: function () {
		var _0x9f6cx2 = 0
			, _0x9f6cx1 = this;
		while (_0x9f6cx1['parentNode']) {
			_0x9f6cx2 += _0x9f6cx1['getPreviousSiblingsTotalCount']() + 1;
			_0x9f6cx1 = _0x9f6cx1['parentNode']
		};
		return _0x9f6cx2
	}
	, getBySequenceNumber: function (_0x9f6cx7) {
		var _0x9f6cx5 = null
			, _0x9f6cx4, _0x9f6cx2;
		if (_0x9f6cx7 === 0) {
			_0x9f6cx5 = this
		}
		else {
			if (_0x9f6cx7 > 0 && _0x9f6cx7 <= this['getTotalCount']()) {
				_0x9f6cx7--;
				for (var _0x9f6cx3 = 0, _0x9f6cx1 = this['childNodes']['length']; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
					_0x9f6cx4 = this['childNodes'][_0x9f6cx3];
					_0x9f6cx2 = _0x9f6cx4['getTotalCount']();
					if (_0x9f6cx7 > _0x9f6cx2) {
						_0x9f6cx7 -= _0x9f6cx2 + 1
					}
					else {
						_0x9f6cx4 = this['childNodes'][_0x9f6cx3];
						_0x9f6cx5 = _0x9f6cx4['getBySequenceNumber'](_0x9f6cx7);
						break
					}
				}
			}
		};
		return _0x9f6cx5
	}
	, getDisplayStartDate: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx3, _0x9f6cx1, _0x9f6cx2) {
		_0x9f6cx4 = _0x9f6cx4 || Ext['Date']['defaultFormat'];
		if (arguments['length'] < 3) {
			_0x9f6cx3 = this['getStartDate']();
			if (arguments['length'] < 2) {
				_0x9f6cx5 = true
			}
		};
		if (_0x9f6cx3 && _0x9f6cx5 && this['isMilestone'](_0x9f6cx2) && _0x9f6cx3 - Ext['Date']['clearTime'](_0x9f6cx3, true) === 0 && !Ext['Date']['formatContainsHourInfo'](_0x9f6cx4)) {
			_0x9f6cx3 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx3, Ext.ux.Scheduler['util']['Date'].MILLI, -1)
		};
		return _0x9f6cx1 ? _0x9f6cx3 : (_0x9f6cx3 ? Ext['util']['Format']['date'](_0x9f6cx3, _0x9f6cx4) : '')
	}
	, getDisplayEndDate: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx3, _0x9f6cx1, _0x9f6cx2) {
		_0x9f6cx4 = _0x9f6cx4 || Ext['Date']['defaultFormat'];
		if (arguments['length'] < 3) {
			_0x9f6cx3 = this['getEndDate']();
			if (arguments['length'] < 2) {
				_0x9f6cx5 = true
			}
		};
		if (_0x9f6cx3 && (!this['isMilestone'](_0x9f6cx2) || _0x9f6cx5) && _0x9f6cx3 - Ext['Date']['clearTime'](_0x9f6cx3, true) === 0 && !Ext['Date']['formatContainsHourInfo'](_0x9f6cx4)) {
			_0x9f6cx3 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx3, Ext.ux.Scheduler['util']['Date'].MILLI, -1)
		};
		return _0x9f6cx1 ? _0x9f6cx3 : (_0x9f6cx3 ? Ext['util']['Format']['date'](_0x9f6cx3, _0x9f6cx4) : '')
	}
	, copy: function () {
		var _0x9f6cx1 = this['callParent'](arguments)
			, _0x9f6cx2 = _0x9f6cx1['getSegments']();
		if (_0x9f6cx2) {
			for (var _0x9f6cx5 = 0; _0x9f6cx5 < _0x9f6cx2['length']; _0x9f6cx5++) {
				var _0x9f6cx3 = _0x9f6cx2[_0x9f6cx5];
				_0x9f6cx2[_0x9f6cx5] = _0x9f6cx3['copy'](_0x9f6cx3['getId'](), false)
			}
		};
		return _0x9f6cx1
	}
	, fullCopy: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['callParent'](arguments);
		_0x9f6cx2['taskStore'] = this['getTaskStore']();
		return _0x9f6cx2
	}
	, commit: function () {
		this['callParent'](arguments);
		this['commitSegments']()
	}
	, reject: function () {
		this['callParent'](arguments);
		this['rejectSegments']()
	}
	, isUnscheduled: function () {
		return !this['getStartDate']() || !this['getEndDate']()
	}
	, isTaskStored: function () {
		return !!(this['getTreeStore']() && this['getTreeStore']()['getRoot']() && !this['getTreeStore']()['destroyed'])
	}
	, onRegisterTreeNode: function (_0x9f6cx1) {
		if (_0x9f6cx1 && _0x9f6cx1['autoNormalizeNodes'] && !this['normalized']) {
			this['normalize']()
		}
	}
}, function () {
	Ext['data']['NodeInterface']['decorate'](this);
	this['override']({
		insertBefore: function (_0x9f6cx5, _0x9f6cx4) {
			_0x9f6cx5 = this['createNode'](_0x9f6cx5);
			if (!_0x9f6cx5) {
				return
			};
			var _0x9f6cx9 = this['getTaskStore'](true)
				, _0x9f6cx8 = _0x9f6cx9 && _0x9f6cx9['getRoot']()
				, _0x9f6cx2 = this['phantomParentIdField']
				, _0x9f6cx3 = this !== _0x9f6cx8 && this['phantom']
				, _0x9f6cxc = !!_0x9f6cx5['parentNode']
				, _0x9f6cx7 = this['getId']();
			if (_0x9f6cx3) {
				this['data'][this['phantomIdField']] = _0x9f6cx7
			};
			if (_0x9f6cx7 !== _0x9f6cx5['data'][_0x9f6cx2]) {
				var _0x9f6cx1 = _0x9f6cx3 ? _0x9f6cx7 : null;
				if (!_0x9f6cx5['phantom'] && _0x9f6cx5['data'][_0x9f6cx2] !== _0x9f6cx1) {
					_0x9f6cx5['modified'] = _0x9f6cx5['modified'] || {};
					_0x9f6cx5['modified'][_0x9f6cx2] = _0x9f6cx5['data'][_0x9f6cx2]
				};
				_0x9f6cx5['data'][_0x9f6cx2] = _0x9f6cx1
			};
			var _0x9f6cxa = _0x9f6cx4 && _0x9f6cx4['get']('index');
			this['resetTotalCount'](_0x9f6cxc);
			if (_0x9f6cxc && _0x9f6cx5['hasDependencies']() && !_0x9f6cx9['isUndoingOrRedoing']()) {
				_0x9f6cx5['removeDependenciesToParents'](this)
			};
			var _0x9f6cx6 = this['callParent'](arguments);
			if (_0x9f6cxc) {
				if (this['hasDependencies']()) {
					_0x9f6cx9['getDependencyStore']()['resetMethodsCache']();
					if (!_0x9f6cx9['isUndoingOrRedoing']()) {
						this['removeInvalidDependencies']()
					}
				};
				this['resetTotalCount']()
			};
			if (_0x9f6cx4 && _0x9f6cx4['get']('index') != _0x9f6cxa) {
				_0x9f6cx4['modified'] = _0x9f6cx4['modified'] || {};
				_0x9f6cx4['modified']['index'] = _0x9f6cxa
			};
			return _0x9f6cx6
		}
		, appendChild: function (_0x9f6cx1, _0x9f6cxd, _0x9f6cx6) {
			_0x9f6cx1 = _0x9f6cx1 instanceof Array ? _0x9f6cx1 : [_0x9f6cx1];
			var _0x9f6cxb = this['getTaskStore'](true)
				, _0x9f6cx13 = _0x9f6cxb && _0x9f6cxb['getRoot']()
				, _0x9f6cxe = false
				, _0x9f6cx5 = this['phantomParentIdField']
				, _0x9f6cx4 = this !== _0x9f6cx13 && this['phantom']
				, _0x9f6cxc = this['getId']()
				, _0x9f6cx8 = 0;
			if (_0x9f6cxb && _0x9f6cx1['length'] > 1) {
				_0x9f6cxb['suspendAutoRecalculateParents']++
			};
			for (var _0x9f6cx7 = 0; _0x9f6cx7 < _0x9f6cx1['length']; _0x9f6cx7++) {
				var _0x9f6cx3 = this['createNode'](_0x9f6cx1[_0x9f6cx7]);
				if (!_0x9f6cx3) {
					continue
				};
				_0x9f6cx8++;
				_0x9f6cx1[_0x9f6cx7] = _0x9f6cx3;
				if (_0x9f6cx3['parentNode']) {
					_0x9f6cxe = true;
					if (_0x9f6cx3['hasDependencies']() && _0x9f6cxb && !_0x9f6cxb['isUndoingOrRedoing']()) {
						_0x9f6cx3['removeDependenciesToParents'](this)
					}
				};
				if (_0x9f6cxc !== _0x9f6cx3['data'][_0x9f6cx5]) {
					var _0x9f6cx2 = _0x9f6cx4 ? _0x9f6cxc : null;
					if (!_0x9f6cx3['phantom'] && _0x9f6cx3['data'][_0x9f6cx5] !== _0x9f6cx2) {
						_0x9f6cx3['modified'] = _0x9f6cx3['modified'] || {};
						_0x9f6cx3['modified'][_0x9f6cx5] = _0x9f6cx3['data'][_0x9f6cx5]
					};
					_0x9f6cx3['data'][_0x9f6cx5] = _0x9f6cx2
				}
			};
			if (!_0x9f6cx8) {
				return
			};
			if (_0x9f6cx4) {
				this['data'][this['phantomIdField']] = _0x9f6cxc
			};
			this['resetTotalCount'](_0x9f6cxe);
			var _0x9f6cxa = this['callParent']([_0x9f6cx1['length'] > 1 ? _0x9f6cx1 : _0x9f6cx1[0], _0x9f6cxd, _0x9f6cx6]);
			if (_0x9f6cxe) {
				if (this['hasDependencies']()) {
					_0x9f6cxb['getDependencyStore']()['resetMethodsCache']();
					if (_0x9f6cxb && !_0x9f6cxb['isUndoingOrRedoing']()) {
						this['removeInvalidDependencies']()
					}
				};
				this['resetTotalCount']()
			};
			if (_0x9f6cxb && !_0x9f6cxb['isUndoingOrRedoing']()) {
				this['beginEdit']();
				this['markAsParent']();
				this['set'](this['schedulingModeField'], 'Normal');
				if (_0x9f6cxb && _0x9f6cx1['length'] > 1) {
					_0x9f6cxb['suspendAutoRecalculateParents']--
				};
				this['endEdit']()
			};
			if (_0x9f6cxb && _0x9f6cxb['recalculateParents'] && !_0x9f6cxb['suspendAutoRecalculateParents'] && !this['isRoot']() && !_0x9f6cxb['cascading'] && !_0x9f6cxb['isUndoingOrRedoing']()) {
				_0x9f6cx1[0]['recalculateParents']()
			};
			return _0x9f6cxa
		}
		, removeChild: function (_0x9f6cx8, _0x9f6cx4, _0x9f6cx7, _0x9f6cx2) {
			var _0x9f6cx6 = this
				, _0x9f6cx3 = !_0x9f6cx6['removeChildIsCalledFromReplaceChild'] && _0x9f6cx6['convertEmptyParentToLeaf'] && _0x9f6cx6['childNodes']['length'] == 1
				, _0x9f6cx5 = _0x9f6cx6['getTaskStore'](true)
				, _0x9f6cx1;
			_0x9f6cx6['resetTotalCount']();
			_0x9f6cx6['removeChildIsCalledFromReplaceChild'] = false;
			_0x9f6cx1 = _0x9f6cx6['callParent'](arguments);
			if (_0x9f6cx2) {
				_0x9f6cx6['resetTotalCount']()
			};
			if (_0x9f6cx6['childNodes']['length'] > 0 && _0x9f6cx5 && _0x9f6cx5['recalculateParents'] && !_0x9f6cx5['suspendAutoRecalculateParents'] && !_0x9f6cx5['isUndoingOrRedoing']()) {
				_0x9f6cx6['childNodes'][0]['recalculateParents']()
			};
			if (_0x9f6cx3 && !_0x9f6cx6['isRoot']() && _0x9f6cx5 && !_0x9f6cx5['isUndoingOrRedoing']()) {
				_0x9f6cx6['convertEmptyParentToLeafTask']()
			};
			return _0x9f6cx1
		}
		, replaceChild: function () {
			this['removeChildIsCalledFromReplaceChild'] = true;
			this['callParent'](arguments)
		}
		, removeAll: function () {
			var _0x9f6cx1 = this['isLeaf']()
				, _0x9f6cx2 = this['getTaskStore'](true);
			this['resetTotalCount']();
			this['callParent'](arguments);
			if (!_0x9f6cx1 && this['convertEmptyParentToLeaf'] && _0x9f6cx2) {
				this['convertEmptyParentToLeafTask']()
			}
		}
		, createNode: function (_0x9f6cx4) {
			var _0x9f6cx3 = this
				, _0x9f6cx5 = _0x9f6cx3['getTaskStore'](true)
				, _0x9f6cx2 = _0x9f6cx5 && _0x9f6cx5['getRoot']()
				, _0x9f6cx1;
			if (_0x9f6cx5) {
				_0x9f6cx1 = _0x9f6cx5['getProxy']()['getReader']();
				var _0x9f6cx7 = _0x9f6cx1['getChildType'];
				_0x9f6cx1['getChildType'] = function () {
					return _0x9f6cx7['apply'](this, arguments) || this['getModel']()
				}
			};
			_0x9f6cx4 = this['callParent'](arguments);
			if (_0x9f6cx5 && _0x9f6cx1) {
				delete _0x9f6cx1['getChildType']
			};
			if (_0x9f6cx5 && _0x9f6cx2 !== this && _0x9f6cx4['isProject']) {
				return
			};
			return _0x9f6cx4
		}
	})
});
Ext.define('Ext.ux.Gantt.model.Project', {
	extend: 'Ext.ux.Gantt.model.Task'
	, alias: 'gntmodel.project'
	, isProject: true
	, descriptionField: 'Note'
	, allowDependenciesField: 'AllowDependencies'
	, customizableFields: [{
		name: 'Description'
		, type: 'string'
	}, {
		name: 'AllowDependencies'
		, persist: false
		, type: 'bool'
		, defaultValue: false
	}]
	, recognizedSchedulingModes: ['Normal']
	, convertEmptyParentToLeaf: false
	, isEditable: function (_0x9f6cx1) {
		switch (_0x9f6cx1) {
		case this['nameField']:
			;
		case this['startDateField']:
			;
		case this['readOnlyField']:
			;
		case this['durationField']:
			;
		case this['durationUnitField']:
			;
		case this['descriptionField']:
			;
		case this['allowDependenciesField']:
			return this['callParent'](arguments);
		case this['endDateField']:
			return this['isManuallyScheduled']() && this['callParent'](arguments);
		default:
			return false
		}
	}
});
Ext.define('Ext.ux.Scheduler.data.util.EventDependencyCache', function () {
	var _0x9f6cxc = {
		allowNull: false
		, filtered: false
		, collapsed: true
	};
	var _0x9f6cx6 = [null];

	function _0x9f6cx9(_0x9f6cxa, _0x9f6cx13) {
		Ext['Array']['each'](_0x9f6cx13, function (_0x9f6cxe) {
			var _0x9f6cxd = _0x9f6cxe['getSourceId']()
				, _0x9f6cxb = _0x9f6cxe['getTargetId']();
			if (_0x9f6cxd) {
				_0x9f6cxa['add'](_0x9f6cxd, _0x9f6cxe)
			};
			if (_0x9f6cxb) {
				_0x9f6cxa['add'](_0x9f6cxb, _0x9f6cxe)
			};
			if (_0x9f6cxd && _0x9f6cxb) {
				_0x9f6cxa['addSuccessor'](_0x9f6cxd, _0x9f6cxe);
				_0x9f6cxa['addPredecessor'](_0x9f6cxb, _0x9f6cxe)
			}
		})
	}

	function _0x9f6cx8(_0x9f6cxa, _0x9f6cx13) {
		Ext['Array']['each'](_0x9f6cx13, function (_0x9f6cxe) {
			var _0x9f6cxd = _0x9f6cxe['getSourceId']()
				, _0x9f6cxb = _0x9f6cxe['getTargetId']();
			if (_0x9f6cxd) {
				_0x9f6cxa['remove'](_0x9f6cxd, _0x9f6cxe);
				_0x9f6cxa['removeSuccessor'](_0x9f6cxd, _0x9f6cxe)
			};
			if (_0x9f6cxb) {
				_0x9f6cxa['remove'](_0x9f6cxb, _0x9f6cxe);
				_0x9f6cxa['removePredecessor'](_0x9f6cxb, _0x9f6cxe)
			}
		})
	}

	function _0x9f6cx4(_0x9f6cx13, _0x9f6cxa) {
		Ext['Array']['each'](_0x9f6cxa, function (_0x9f6cxb) {
			_0x9f6cx13['clear'](_0x9f6cxb);
			_0x9f6cx13['clearSuccessors'](_0x9f6cxb);
			_0x9f6cx13['clearPredecessors'](_0x9f6cxb)
		})
	}

	function _0x9f6cx7(_0x9f6cxe, _0x9f6cx13, _0x9f6cxa, _0x9f6cxf, _0x9f6cxd, _0x9f6cxb) {
		if (_0x9f6cx13 !== _0x9f6cxa) {
			_0x9f6cxe['move'](_0x9f6cxa, _0x9f6cx13, _0x9f6cxb);
			_0x9f6cxe['moveSuccessors'](_0x9f6cxa, _0x9f6cx13, _0x9f6cxb)
		};
		if (_0x9f6cxf !== _0x9f6cxd) {
			_0x9f6cxe['move'](_0x9f6cxd, _0x9f6cxf, _0x9f6cxb);
			_0x9f6cxe['movePredecessors'](_0x9f6cxd, _0x9f6cxf, _0x9f6cxb)
		}
	}

	function _0x9f6cx2(_0x9f6cxb, _0x9f6cx13, _0x9f6cxa) {
		_0x9f6cxb['move'](_0x9f6cx13, _0x9f6cxa);
		_0x9f6cxb['moveSuccessors'](_0x9f6cx13, _0x9f6cxa);
		_0x9f6cxb['movePredecessors'](_0x9f6cx13, _0x9f6cxa)
	}

	function _0x9f6cx1(_0x9f6cx13, _0x9f6cxa) {
		Ext['Array']['each'](_0x9f6cxa, function (_0x9f6cxb) {
			if (!_0x9f6cx13['has'](_0x9f6cxb)) {
				_0x9f6cx13['set'](_0x9f6cxb, []);
				_0x9f6cx13['setSuccessors'](_0x9f6cxb, []);
				_0x9f6cx13['setPredecessors'](_0x9f6cxb, [])
			}
		})
	}

	function _0x9f6cx5(_0x9f6cxb, _0x9f6cxa, _0x9f6cx13) {
		_0x9f6cxb['clear']();
		_0x9f6cx9(_0x9f6cxb, _0x9f6cxa['getRange']());
		_0x9f6cx13 && (!_0x9f6cx13['getRoot'] || _0x9f6cx13['getRoot']()) && _0x9f6cx1(_0x9f6cxb, _0x9f6cx13['collect'](_0x9f6cx13['getModel']()['idProperty'], _0x9f6cxc))
	}

	function _0x9f6cx3(_0x9f6cxe, _0x9f6cxb, _0x9f6cxa, _0x9f6cx13) {
		_0x9f6cxb = Ext['Array']['reduce'](_0x9f6cxb, function (_0x9f6cxd, _0x9f6cxf) {
			_0x9f6cxe['set'](_0x9f6cxf, []);
			_0x9f6cxd[_0x9f6cxe['key'](_0x9f6cxf)] = true
		}, {});
		_0x9f6cxa['each'](function (_0x9f6cx11) {
			var _0x9f6cx10 = _0x9f6cx11['getSourceId']()
				, _0x9f6cx12 = _0x9f6cx11['getTargetId']()
				, _0x9f6cxf = _0x9f6cxb['hasOwnProperty'](_0x9f6cx10)
				, _0x9f6cxd = _0x9f6cxb['hasOwnProperty'](_0x9f6cx12);
			_0x9f6cxf && _0x9f6cxe['add'](_0x9f6cx10, _0x9f6cx11);
			_0x9f6cxf && _0x9f6cxe['addSuccessor'](_0x9f6cx10, _0x9f6cx11);
			_0x9f6cxd && _0x9f6cxe['add'](_0x9f6cx12, _0x9f6cx11);
			_0x9f6cxd && _0x9f6cxe['addPredecessor'](_0x9f6cx12, _0x9f6cx11)
		});
		Ext['Object']['each'](_0x9f6cxb, function (_0x9f6cxd) {
			if (!_0x9f6cxe['has'](_0x9f6cxd) && (_0x9f6cx13['getNodeById'] ? _0x9f6cx13['getNodeById'](_0x9f6cxd) : _0x9f6cx13['getById'](_0x9f6cxd))) {
				_0x9f6cxe['set'](_0x9f6cxd, [])
			}
		})
	}
	return {
		extend: 'Ext.ux.Scheduler.util.Cache'
		, dependencyStore: null
		, dependencyStoreDetacher: null
		, eventStoreDetacher: null
		, constructor: function (_0x9f6cxb) {
			var _0x9f6cx18 = this
				, _0x9f6cx12;
			_0x9f6cx18['callParent']();
			_0x9f6cx18['dependencyStore'] = _0x9f6cxb;

			function _0x9f6cx15(_0x9f6cx1d, _0x9f6cx19) {
				_0x9f6cx9(_0x9f6cx18, _0x9f6cx19)
			}

			function _0x9f6cxd(_0x9f6cx19, _0x9f6cx1f, _0x9f6cx1a, _0x9f6cx1d) {
				!_0x9f6cx1d && _0x9f6cx8(_0x9f6cx18, _0x9f6cx1f)
			}

			function _0x9f6cxe(_0x9f6cx20, _0x9f6cx19, _0x9f6cx1f) {
				var _0x9f6cx23 = _0x9f6cx19['fromField']
					, _0x9f6cx1a = _0x9f6cx19['toField']
					, _0x9f6cx1d = _0x9f6cx19['previous'] && _0x9f6cx23 in _0x9f6cx19['previous']
					, _0x9f6cx21 = _0x9f6cx19['previous'] && _0x9f6cx1a in _0x9f6cx19['previous']
					, _0x9f6cx24 = _0x9f6cx1d && _0x9f6cx19['previous'][_0x9f6cx23]
					, _0x9f6cx22 = _0x9f6cx21 && _0x9f6cx19['previous'][_0x9f6cx1a];
				if (_0x9f6cx1d || _0x9f6cx21) {
					_0x9f6cx7(_0x9f6cx18, _0x9f6cx1d ? _0x9f6cx19['getSourceId']() : false, _0x9f6cx1d ? _0x9f6cx24 : false, _0x9f6cx21 ? _0x9f6cx19['getTargetId']() : false, _0x9f6cx21 ? _0x9f6cx22 : false, _0x9f6cx19)
				}
			}

			function _0x9f6cx13(_0x9f6cx1d) {
				_0x9f6cx5(_0x9f6cx18, _0x9f6cx1d, _0x9f6cx1d['getEventStore']())
			}

			function _0x9f6cxf(_0x9f6cx1d, _0x9f6cx19) {
				_0x9f6cx5(_0x9f6cx18, _0x9f6cx1d, _0x9f6cx19);
				_0x9f6cxa(_0x9f6cx19)
			}

			function _0x9f6cx1b(_0x9f6cx19, _0x9f6cx1a, _0x9f6cx1f, _0x9f6cx1d) {
				_0x9f6cx2(_0x9f6cx18, _0x9f6cx1f, _0x9f6cx1d)
			}

			function _0x9f6cx1c(_0x9f6cx19, _0x9f6cx1d) {
				_0x9f6cx1(_0x9f6cx18, _0x9f6cx1d)
			}

			function _0x9f6cx16(_0x9f6cx1d, _0x9f6cx19) {
				_0x9f6cx1(_0x9f6cx18, _0x9f6cx6[0] = _0x9f6cx19, _0x9f6cx6)
			}

			function _0x9f6cx11(_0x9f6cx1d, _0x9f6cx19) {
				_0x9f6cx1(_0x9f6cx18, _0x9f6cx6[0] = _0x9f6cx19, _0x9f6cx6)
			}

			function _0x9f6cx10(_0x9f6cx19, _0x9f6cx1f, _0x9f6cx1a, _0x9f6cx1d) {
				!_0x9f6cx1d && _0x9f6cx4(_0x9f6cx18, _0x9f6cx1f)
			}

			function _0x9f6cx1e(_0x9f6cx19, _0x9f6cx1a, _0x9f6cx1d) {
				!_0x9f6cx1d && _0x9f6cx4(_0x9f6cx18, _0x9f6cx6[0] = _0x9f6cx1a, _0x9f6cx6)
			}

			function _0x9f6cx17() {
				_0x9f6cx5(_0x9f6cx18, _0x9f6cx18['dependencyStore'], _0x9f6cx18['dependencyStore']['getEventStore']())
			}

			function _0x9f6cx14(_0x9f6cx1d, _0x9f6cx19) {
				if (!_0x9f6cx19) {
					_0x9f6cx5(_0x9f6cx18, _0x9f6cx18['dependencyStore'], _0x9f6cx18['eventStore'])
				}
				else {
					if (!Ext['isArray'](_0x9f6cx19)) {
						_0x9f6cx19 = [_0x9f6cx19]
					};
					_0x9f6cx3(_0x9f6cx18, _0x9f6cx19, _0x9f6cx18['dependencyStore'], _0x9f6cx18['eventStore'])
				}
			}

			function _0x9f6cxa(_0x9f6cx1d) {
				var _0x9f6cx19;
				Ext['destroy'](_0x9f6cx18['eventStoreDetacher']);
				if (_0x9f6cx1d) {
					_0x9f6cx19 = {
						idchanged: _0x9f6cx1b
						, cacheresethint: _0x9f6cx17
						, clear: _0x9f6cx17
						, refresh: _0x9f6cx17
						, "event-dependency-cache-invalidate": _0x9f6cx14
						, priority: 100
						, destroyable: true
					};
					if (_0x9f6cx1d['isTreeStore']) {
						_0x9f6cx19 = Ext['apply'](_0x9f6cx19, {
							nodeappend: _0x9f6cx16
							, nodeinsert: _0x9f6cx11
							, noderemove: _0x9f6cx1e
							, rootchange: _0x9f6cx17
						})
					}
					else {
						_0x9f6cx19 = Ext['apply'](_0x9f6cx19, {
							add: _0x9f6cx1c
							, remove: _0x9f6cx10
						})
					};
					_0x9f6cx18['eventStoreDetacher'] = _0x9f6cx1d['on'](_0x9f6cx19)
				}
			}
			_0x9f6cx18['dependencyStoreDetacher'] = _0x9f6cxb['on']({
				add: _0x9f6cx15
				, remove: _0x9f6cxd
				, update: _0x9f6cxe
				, refresh: _0x9f6cx13
				, cacheresethint: _0x9f6cx13
				, clear: _0x9f6cx13
				, eventstorechange: _0x9f6cxf
				, "event-dependency-cache-invalidate": _0x9f6cx14
				, priority: 100
				, destroyable: true
			});
			_0x9f6cx5(_0x9f6cx18, _0x9f6cxb, _0x9f6cxb['getEventStore']())
		}
		, destroy: function () {
			var _0x9f6cxa = this;
			Ext['destroyMembers'](_0x9f6cxa, 'dependencyStoreDetacher', 'eventStoreDetacher');
			_0x9f6cxa['dependencyStore'] = null
		}
		, get: function (_0x9f6cx13, _0x9f6cxb) {
			var _0x9f6cxe = this;
			return _0x9f6cxe['callParent']([_0x9f6cx13])
		}
		, getSuccessors: function (_0x9f6cx13, _0x9f6cxb) {
			var _0x9f6cxe = this;
			return _0x9f6cxe['get'](_0x9f6cxe['self']['makeSuccessorsKey'](_0x9f6cxe['key'](_0x9f6cx13)), _0x9f6cxb)
		}
		, getPredecessors: function (_0x9f6cx13, _0x9f6cxb) {
			var _0x9f6cxe = this;
			return _0x9f6cxe['get'](_0x9f6cxe['self']['makePredecessorsKey'](_0x9f6cxe['key'](_0x9f6cx13)), _0x9f6cxb)
		}
		, addSuccessor: function (_0x9f6cxb, _0x9f6cx13) {
			var _0x9f6cxe = this;
			return arguments['length'] > 1 ? _0x9f6cxe['add'](_0x9f6cxe['self']['makeSuccessorsKey'](_0x9f6cxe['key'](_0x9f6cxb)), _0x9f6cx13) : _0x9f6cxe['add'](_0x9f6cxe['self']['makeSuccessorsKey'](_0x9f6cxe['key'](_0x9f6cxb)))
		}
		, addPredecessor: function (_0x9f6cxb, _0x9f6cx13) {
			var _0x9f6cxe = this;
			return arguments['length'] > 1 ? _0x9f6cxe['add'](_0x9f6cxe['self']['makePredecessorsKey'](_0x9f6cxe['key'](_0x9f6cxb)), _0x9f6cx13) : _0x9f6cxe['add'](_0x9f6cxe['self']['makePredecessorsKey'](_0x9f6cxe['key'](_0x9f6cxb)))
		}
		, setSuccessors: function (_0x9f6cx13, _0x9f6cxe) {
			var _0x9f6cxb = this;
			_0x9f6cxb['set'](_0x9f6cxb['self']['makeSuccessorsKey'](_0x9f6cxb['key'](_0x9f6cx13)), _0x9f6cxe)
		}
		, setPredecessors: function (_0x9f6cx13, _0x9f6cxe) {
			var _0x9f6cxb = this;
			_0x9f6cxb['set'](_0x9f6cxb['self']['makePredecessorsKey'](_0x9f6cxb['key'](_0x9f6cx13)), _0x9f6cxe)
		}
		, removeSuccessor: function (_0x9f6cxb, _0x9f6cx13) {
			var _0x9f6cxe = this;
			return _0x9f6cxe['remove'](_0x9f6cxe['self']['makeSuccessorsKey'](_0x9f6cxe['key'](_0x9f6cxb)), _0x9f6cx13)
		}
		, removePredecessor: function (_0x9f6cxb, _0x9f6cx13) {
			var _0x9f6cxe = this;
			return _0x9f6cxe['remove'](_0x9f6cxe['self']['makePredecessorsKey'](_0x9f6cxe['key'](_0x9f6cxb)), _0x9f6cx13)
		}
		, moveSuccessors: function (_0x9f6cxb, _0x9f6cxe, _0x9f6cxa) {
			var _0x9f6cx13 = this;
			return arguments['length'] >= 3 ? _0x9f6cx13['move'](_0x9f6cx13['self']['makeSuccessorsKey'](_0x9f6cx13['key'](_0x9f6cxb)), _0x9f6cx13['self']['makeSuccessorsKey'](_0x9f6cx13['key'](_0x9f6cxe)), _0x9f6cxa) : _0x9f6cx13['move'](_0x9f6cx13['self']['makeSuccessorsKey'](_0x9f6cx13['key'](_0x9f6cxb)), _0x9f6cx13['self']['makeSuccessorsKey'](_0x9f6cx13['key'](_0x9f6cxe)))
		}
		, movePredecessors: function (_0x9f6cxb, _0x9f6cxe, _0x9f6cxa) {
			var _0x9f6cx13 = this;
			return arguments['length'] >= 3 ? _0x9f6cx13['move'](_0x9f6cx13['self']['makePredecessorsKey'](_0x9f6cx13['key'](_0x9f6cxb)), _0x9f6cx13['self']['makePredecessorsKey'](_0x9f6cx13['key'](_0x9f6cxe)), _0x9f6cxa) : _0x9f6cx13['move'](_0x9f6cx13['self']['makePredecessorsKey'](_0x9f6cx13['key'](_0x9f6cxb)), _0x9f6cx13['self']['makePredecessorsKey'](_0x9f6cx13['key'](_0x9f6cxe)))
		}
		, clearSuccessors: function (_0x9f6cx13) {
			var _0x9f6cxb = this;
			return _0x9f6cxb['clear'](_0x9f6cxb['self']['makeSuccessorsKey'](_0x9f6cxb['key'](_0x9f6cx13)))
		}
		, clearPredecessors: function (_0x9f6cx13) {
			var _0x9f6cxb = this;
			return _0x9f6cxb['clear'](_0x9f6cxb['self']['makePredecessorsKey'](_0x9f6cxb['key'](_0x9f6cx13)))
		}
		, inheritableStatics: {
			splitKey: function (_0x9f6cx13) {
				_0x9f6cx13 = _0x9f6cx13['split']('@#!#@');
				return {
					id: _0x9f6cx13[0]
					, type: _0x9f6cx13['length'] && _0x9f6cx13[1] || false
				}
			}
			, makeSuccessorsKey: function (_0x9f6cx13) {
				return _0x9f6cx13 + '@#!#@succ'
			}
			, makePredecessorsKey: function (_0x9f6cx13) {
				return _0x9f6cx13 + '@#!#@pred'
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.model.DependencyBase', {
	extend: 'Ext.ux.Scheduler.model.Customizable'
	, requires: ['Ext.ux.Scheduler.model.Range']
	, inheritableStatics: {
		Type: {
			StartToStart: 0
			, StartToEnd: 1
			, EndToStart: 2
			, EndToEnd: 3
		}
	}
	, idProperty: 'Id'
	, customizableFields: [{
		name: 'From'
	}, {
		name: 'To'
	}, {
		name: 'Type'
		, type: 'int'
		, defaultValue: 2
	}, {
		name: 'Cls'
		, defaultValue: ''
	}, {
		name: 'Bidirectional'
		, type: 'boolean'
	}, {
		name: 'FromSide'
		, type: 'string'
	}, {
		name: 'ToSide'
		, type: 'string'
	}, {
		name: 'Highlighted'
		, type: 'string'
		, persist: false
		, defaultValue: ''
	}]
	, fromField: 'From'
	, toField: 'To'
	, typeField: 'Type'
	, clsField: 'Cls'
	, bidirectionalField: 'Bidirectional'
	, highlightedField: 'Highlighted'
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['callParent'](arguments);
		if (_0x9f6cx1) {
			if (_0x9f6cx1[_0x9f6cx2['fromField']] && _0x9f6cx1[_0x9f6cx2['fromField']] instanceof Ext.ux.Scheduler['model']['Range']) {
				_0x9f6cx2['setSourceEvent'](_0x9f6cx1[_0x9f6cx2['fromField']]);
				delete _0x9f6cx1['fromField']
			};
			if (_0x9f6cx1[_0x9f6cx2['toField']] && _0x9f6cx1[_0x9f6cx2['toField']] instanceof Ext.ux.Scheduler['model']['Range']) {
				_0x9f6cx2['setTargetEvent'](_0x9f6cx1[_0x9f6cx2['toField']]);
				delete _0x9f6cx1['toField']
			}
		}
	}
	, getEventStore: function () {
		return this['store']['getEventStore']()
	}
	, getSourceEvent: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return (_0x9f6cx1 || _0x9f6cx2['getEventStore']())['getModelById'](_0x9f6cx2['getSourceId']())
	}
	, setSourceEvent: function (_0x9f6cx1) {
		this['setSourceId'](_0x9f6cx1['getId']())
	}
	, getTargetEvent: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return (_0x9f6cx1 || _0x9f6cx2['getEventStore']())['getModelById'](_0x9f6cx2['getTargetId']())
	}
	, setTargetEvent: function (_0x9f6cx1) {
		this['setTargetId'](_0x9f6cx1['getId']())
	}
	, getSourceId: function () {
		return this['getFrom']()
	}
	, setSourceId: function (_0x9f6cx1) {
		return this['setFrom'](_0x9f6cx1)
	}
	, getTargetId: function () {
		return this['getTo']()
	}
	, setTargetId: function (_0x9f6cx1) {
		return this['setTo'](_0x9f6cx1)
	}
	, isPersistable: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['getSourceEvent']()
			, _0x9f6cx5 = _0x9f6cx1['getTargetEvent']();
		return _0x9f6cx2 && !_0x9f6cx2['phantom'] && _0x9f6cx5 && !_0x9f6cx5['phantom']
	}
	, getDateRange: function () {
		var _0x9f6cx1 = this['getSourceEvent']();
		var _0x9f6cx3 = this['getTargetEvent']();
		if (_0x9f6cx1 && _0x9f6cx3 && _0x9f6cx1['isScheduled']() && _0x9f6cx3['isScheduled']()) {
			var _0x9f6cx5 = this['self']['Type'];
			var _0x9f6cx2, _0x9f6cx4;
			switch (this['getType']()) {
			case _0x9f6cx5['StartToStart']:
				_0x9f6cx2 = _0x9f6cx1['getStartDate']();
				_0x9f6cx4 = _0x9f6cx3['getStartDate']();
				break;
			case _0x9f6cx5['StartToEnd']:
				_0x9f6cx2 = _0x9f6cx1['getStartDate']();
				_0x9f6cx4 = _0x9f6cx3['getEndDate']();
				break;
			case _0x9f6cx5['EndToEnd']:
				_0x9f6cx2 = _0x9f6cx1['getEndDate']();
				_0x9f6cx4 = _0x9f6cx3['getEndDate']();
				break;
			case _0x9f6cx5['EndToStart']:
				_0x9f6cx2 = _0x9f6cx1['getEndDate']();
				_0x9f6cx4 = _0x9f6cx3['getStartDate']();
				break
			};
			return {
				start: Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cx2, _0x9f6cx4)
				, end: Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cx2, _0x9f6cx4)
			}
		};
		return null
	}
	, highlight: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getHighlighted']()['split'](' ');
		!Ext['Array']['contains'](_0x9f6cx2, _0x9f6cx1) && _0x9f6cx5['setHighlighted'](_0x9f6cx2['concat'](_0x9f6cx1).join(' '))
	}
	, unhighlight: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getHighlighted']()['split'](' ');
		Ext['Array']['contains'](_0x9f6cx2, _0x9f6cx1) && _0x9f6cx5['setHighlighted'](Ext['Array']['remove'](_0x9f6cx2, _0x9f6cx1).join(' '))
	}
	, isHighlightedWith: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getHighlighted']()['split'](' ');
		return Ext['Array']['contains'](_0x9f6cx2, _0x9f6cx1)
	}
});
Ext.define('Ext.ux.Scheduler.model.Dependency', {
	extend: 'Ext.ux.Scheduler.model.DependencyBase'
	, isValid: function (_0x9f6cx2) {
		var _0x9f6cx4 = this
			, _0x9f6cx3 = _0x9f6cx4['callParent'](arguments)
			, _0x9f6cx7 = _0x9f6cx4['getSourceId']()
			, _0x9f6cx1 = _0x9f6cx4['getTargetId']()
			, _0x9f6cx5 = _0x9f6cx4['getType']();
		return Ext['isNumber'](_0x9f6cx5) && !Ext['isEmpty'](_0x9f6cx7) && !Ext['isEmpty'](_0x9f6cx1) && _0x9f6cx7 != _0x9f6cx1
	}
	, getTypeFromSides: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cx4) {
		var _0x9f6cx5 = this['self']['Type']
			, _0x9f6cx1 = _0x9f6cx4 ? 'right' : 'left'
			, _0x9f6cx7 = _0x9f6cx4 ? 'left' : 'right';
		if (_0x9f6cx3 === _0x9f6cx1) {
			return (_0x9f6cx2 === _0x9f6cx1) ? _0x9f6cx5['StartToStart'] : _0x9f6cx5['StartToEnd']
		};
		return (_0x9f6cx2 === _0x9f6cx7) ? _0x9f6cx5['EndToEnd'] : _0x9f6cx5['EndToStart']
	}
});
Ext.define('Ext.ux.Scheduler.data.DependencyStore', {
	extend: 'Ext.data.Store'
	, requires: ['Ext.ux.Scheduler.patches.CollectionKey', 'Ext.ux.Scheduler.data.util.EventDependencyCache']
	, mixins: ['Ext.ux.Scheduler.data.mixin.UniversalModelGetter', 'Ext.ux.Scheduler.data.mixin.CacheHintHelper', 'Robo.data.Store']
	, config: {
		extraKeys: {
			bySourceTargetId: {
				keyFn: function (_0x9f6cx1) {
					return Ext.ux.Scheduler['data']['DependencyStore']['makeDependencySourceTargetCompositeKey'](_0x9f6cx1['getSourceId'](), _0x9f6cx1['getTargetId']())
				}
			}
		}
	}
	, model: 'Ext.ux.Scheduler.model.Dependency'
	, alias: 'store.sch_dependencystore'
	, storeId: 'dependencies'
	, eventStoreDetacher: null
	, eventStore: null
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['callParent']([_0x9f6cx1]);
		_0x9f6cx2['eventDependencyCache'] = _0x9f6cx2['eventDependencyCache'] || _0x9f6cx2['createEventDependencyCache']()
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		Ext['destroyMembers'](_0x9f6cx1, 'eventDependencyCache', 'eventStoreDetacher');
		_0x9f6cx1['callParent']()
	}
	, createEventDependencyCache: function () {
		return new Ext.ux.Scheduler['data']['util'].EventDependencyCache(this)
	}
	, getEventStore: function () {
		return this['eventStore']
	}
	, setEventStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = this
			, _0x9f6cx5 = _0x9f6cx2['eventStore'];
		_0x9f6cx2['eventStore'] = _0x9f6cx1 && Ext['StoreMgr']['lookup'](_0x9f6cx1) || null;
		_0x9f6cx2['attachToEventStore'](_0x9f6cx2['eventStore']);
		if ((_0x9f6cx5 || _0x9f6cx1) && _0x9f6cx5 !== _0x9f6cx1) {
			_0x9f6cx2['fireEvent']('eventstorechange', _0x9f6cx2, _0x9f6cx1, _0x9f6cx5)
		}
	}
	, attachToEventStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		Ext['destroy'](_0x9f6cx2['eventStoreDetacher']);
		if (_0x9f6cx1 && _0x9f6cx1['isTreeStore']) {
			_0x9f6cx2['eventStoreDetacher'] = _0x9f6cx1['on']({
				noderemove: _0x9f6cx2['onEventNodeRemove']
				, scope: _0x9f6cx2
				, destroyable: true
				, priority: 200
			})
		}
		else {
			if (_0x9f6cx1) {
				_0x9f6cx2['eventStoreDetacher'] = _0x9f6cx1['on']({
					remove: _0x9f6cx2['onEventRemove']
					, scope: _0x9f6cx2
					, destroyable: true
					, priority: 200
				})
			}
		}
	}
	, onEventRemove: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		!_0x9f6cx1 && this['removeEventDependencies'](_0x9f6cx5, false)
	}
	, onEventNodeRemove: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		!_0x9f6cx1 && this['removeEventDependencies'](_0x9f6cx5, false)
	}
	, reduceEventDependencies: function (_0x9f6cx3, _0x9f6cx4, _0x9f6cx1, _0x9f6cx7, _0x9f6cx2) {
		var _0x9f6cx5 = this;
		_0x9f6cx2 = _0x9f6cx2 || function (_0x9f6cx8) {
			var _0x9f6cx6 = (_0x9f6cx8 instanceof Ext['data']['Model']) && _0x9f6cx8['getId']() || _0x9f6cx8;
			return _0x9f6cx5['eventDependencyCache']['get'](_0x9f6cx8, function () {
				return Ext['Array']['filter'](_0x9f6cx5['getRange'](), function (_0x9f6cx9) {
					return _0x9f6cx9['getTargetId']() == _0x9f6cx6 || _0x9f6cx9['getSourceId']() == _0x9f6cx6
				})
			})
		};
		_0x9f6cx3 = Ext['isArray'](_0x9f6cx3) ? _0x9f6cx3 : [_0x9f6cx3];
		_0x9f6cx7 = _0x9f6cx7 === undefined ? true : false;
		Ext['Array']['reduce'](_0x9f6cx3, function (_0x9f6cx6, _0x9f6cx8) {
			if (_0x9f6cx8['isNode'] && !_0x9f6cx7) {
				_0x9f6cx8['cascadeBy'](function (_0x9f6cx9) {
					_0x9f6cx6 = Ext['Array']['reduce'](_0x9f6cx2(_0x9f6cx9), _0x9f6cx4, _0x9f6cx6)
				})
			}
			else {
				_0x9f6cx6 = Ext['Array']['reduce'](_0x9f6cx2(_0x9f6cx8), _0x9f6cx4, _0x9f6cx6)
			}
		}, _0x9f6cx1);
		return _0x9f6cx1
	}
	, reduceEventIncomingDependencies: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1, _0x9f6cx4) {
		var _0x9f6cx2 = this;
		return _0x9f6cx2['reduceEventDependencies'](_0x9f6cx5, _0x9f6cx3, _0x9f6cx1, _0x9f6cx4, function (_0x9f6cx6) {
			var _0x9f6cx7 = (_0x9f6cx6 instanceof Ext['data']['Model']) && _0x9f6cx6['getId']() || _0x9f6cx6;
			return _0x9f6cx2['eventDependencyCache']['getPredecessors'](_0x9f6cx6, function () {
				return Ext['Array']['filter'](_0x9f6cx2['getRange'](), function (_0x9f6cx8) {
					return _0x9f6cx8['getTargetId']() == _0x9f6cx7
				})
			})
		})
	}
	, reduceEventOutgoingDependencies: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1, _0x9f6cx4) {
		var _0x9f6cx2 = this;
		return _0x9f6cx2['reduceEventDependencies'](_0x9f6cx5, _0x9f6cx3, _0x9f6cx1, _0x9f6cx4, function (_0x9f6cx6) {
			var _0x9f6cx7 = (_0x9f6cx6 instanceof Ext['data']['Model']) && _0x9f6cx6['getId']() || _0x9f6cx6;
			return _0x9f6cx2['eventDependencyCache']['getSuccessors'](_0x9f6cx6, function () {
				return Ext['Array']['filter'](_0x9f6cx2['getRange'](), function (_0x9f6cx8) {
					return _0x9f6cx8['getSourceId']() == _0x9f6cx7
				})
			})
		})
	}
	, mapEventDependencies: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx3, _0x9f6cx4, _0x9f6cx1) {
		return this['reduceEventDependencies'](_0x9f6cx5, function (_0x9f6cx7, _0x9f6cx6) {
			_0x9f6cx3(_0x9f6cx6) && _0x9f6cx7['push'](_0x9f6cx6);
			return _0x9f6cx7
		}, [], _0x9f6cx4, _0x9f6cx1)
	}
	, mapEventIncomingDependencies: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5, _0x9f6cx3) {
		return this['reduceEventIncomingDependencies'](_0x9f6cx2, function (_0x9f6cx4, _0x9f6cx7) {
			_0x9f6cx5(_0x9f6cx7) && _0x9f6cx4['push'](_0x9f6cx7);
			return _0x9f6cx4
		}, [], _0x9f6cx3)
	}
	, mapEventOutgoingDependencies: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5, _0x9f6cx3) {
		return this['reduceEventOutgoingDependencies'](_0x9f6cx2, function (_0x9f6cx4, _0x9f6cx7) {
			_0x9f6cx5(_0x9f6cx7) && _0x9f6cx4['push'](_0x9f6cx7);
			return _0x9f6cx4
		}, [], _0x9f6cx3)
	}
	, getEventDependencies: function (_0x9f6cx1, _0x9f6cx2) {
		return this['mapEventDependencies'](_0x9f6cx1, Ext['identityFn'], Ext['returnTrue'], _0x9f6cx2)
	}
	, getEventIncomingDependencies: function (_0x9f6cx1, _0x9f6cx2) {
		return this['mapEventIncomingDependencies'](_0x9f6cx1, Ext['identityFn'], Ext['returnTrue'], _0x9f6cx2)
	}
	, getEventOutgoingDependencies: function (_0x9f6cx1, _0x9f6cx2) {
		return this['mapEventOutgoingDependencies'](_0x9f6cx1, Ext['identityFn'], Ext['returnTrue'], _0x9f6cx2)
	}
	, getEventPredecessors: function (_0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getEventStore']();
		Ext['Assert'] && Ext['Assert']['truthy'](_0x9f6cx1, 'can\'t get event predecessors, no event store configured');
		return _0x9f6cx2['reduceEventDependencies'](_0x9f6cx5, function (_0x9f6cx4, _0x9f6cx6) {
			var _0x9f6cx7 = _0x9f6cx6['getFrom']()
				, _0x9f6cx8 = _0x9f6cx7 && _0x9f6cx1['getModelById'](_0x9f6cx7);
			if (_0x9f6cx8) {
				_0x9f6cx4['push'](_0x9f6cx8)
			};
			return _0x9f6cx4
		}, [], _0x9f6cx3, function (_0x9f6cx4) {
			return _0x9f6cx2['eventDependencyCache']['getPredecessors'](_0x9f6cx4)
		})
	}
	, getEventSuccessors: function (_0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getEventStore']();
		Ext['Assert'] && Ext['Assert']['truthy'](_0x9f6cx1, 'can\'t get event successors, no event store configured');
		return _0x9f6cx2['reduceEventDependencies'](_0x9f6cx5, function (_0x9f6cx4, _0x9f6cx6) {
			var _0x9f6cx8 = _0x9f6cx6['getTo']()
				, _0x9f6cx7 = _0x9f6cx8 && _0x9f6cx1['getModelById'](_0x9f6cx8);
			if (_0x9f6cx7) {
				_0x9f6cx4['push'](_0x9f6cx7)
			};
			return _0x9f6cx4
		}, [], _0x9f6cx3, function (_0x9f6cx4) {
			return _0x9f6cx2['eventDependencyCache']['getSuccessors'](_0x9f6cx4)
		})
	}
	, removeEventDependencies: function (_0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx1 = this
			, _0x9f6cx5;
		_0x9f6cx5 = _0x9f6cx1['getEventDependencies'](_0x9f6cx2, _0x9f6cx3);
		_0x9f6cx5['length'] && _0x9f6cx1['remove'](Ext['Array']['unique'](_0x9f6cx5))
	}
	, removeEventIncomingDependencies: function (_0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx1 = this
			, _0x9f6cx5;
		_0x9f6cx5 = _0x9f6cx1['getEventIncomingDependencies'](_0x9f6cx2, _0x9f6cx3);
		_0x9f6cx5['length'] && _0x9f6cx1['remove'](Ext['Array']['unique'](_0x9f6cx5))
	}
	, removeEventOutgoingDependencies: function (_0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx1 = this
			, _0x9f6cx5;
		_0x9f6cx5 = _0x9f6cx1['getEventOutgoingDependencies'](_0x9f6cx2, _0x9f6cx3);
		_0x9f6cx5['length'] && _0x9f6cx1['remove'](Ext['Array']['unique'](_0x9f6cx5))
	}
	, getDependencyForSourceAndTargetEvents: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = this;
		_0x9f6cx1 = _0x9f6cx1 instanceof Ext['data']['Model'] && _0x9f6cx1['getId']() || _0x9f6cx1;
		_0x9f6cx2 = _0x9f6cx2 instanceof Ext['data']['Model'] && _0x9f6cx2['getId']() || _0x9f6cx2;
		return _0x9f6cx5['bySourceTargetId']['get'](_0x9f6cx5['self']['makeDependencySourceTargetCompositeKey'](_0x9f6cx1, _0x9f6cx2))
	}
	, getEventsLinkingDependency: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		return _0x9f6cx5['getDependencyForSourceAndTargetEvents'](_0x9f6cx2, _0x9f6cx1) || _0x9f6cx5['getDependencyForSourceAndTargetEvents'](_0x9f6cx1, _0x9f6cx2)
	}
	, isValidDependency: function (_0x9f6cx5) {
		var _0x9f6cx2 = _0x9f6cx5['getSourceId']();
		var _0x9f6cx1 = _0x9f6cx5['getTargetId']();
		return _0x9f6cx2 != null && _0x9f6cx1 != null && _0x9f6cx2 !== _0x9f6cx1
	}
	, getHighlightedDependencies: function (_0x9f6cx1) {
		return Ext['Array']['reduce'](this['getRange'](), function (_0x9f6cx2, _0x9f6cx5) {
			if (_0x9f6cx5['isHighlightedWith'](_0x9f6cx1)) {
				_0x9f6cx2['push'](_0x9f6cx5)
			};
			return _0x9f6cx2
		}, [])
	}
	, inheritableStatics: {
		makeDependencySourceTargetCompositeKey: function () {
			var _0x9f6cx1 = [];
			return function (_0x9f6cx5, _0x9f6cx2) {
				_0x9f6cx1['length'] = 0;
				_0x9f6cx1['push']('source(', _0x9f6cx5, ')-target(', _0x9f6cx2, ')');
				return _0x9f6cx1.join('')
			}
		}()
	}
});
Ext.define('Ext.ux.Gantt.data.util.TaskDependencyCache', function (_0x9f6cx5) {
	function _0x9f6cx1(_0x9f6cx9, _0x9f6cx6) {
		var _0x9f6cx8;
		if (!(_0x9f6cx6 instanceof Ext['data']['Model'])) {
			_0x9f6cx8 = _0x9f6cx9['dependencyStore']['getTaskStore']();
			_0x9f6cx6 = _0x9f6cx8 && _0x9f6cx8['getModelById'](_0x9f6cx6)
		};
		return _0x9f6cx6
	}

	function _0x9f6cx2(_0x9f6cx9, _0x9f6cx6) {
		var _0x9f6cx8 = _0x9f6cx1(_0x9f6cx9, _0x9f6cx6);
		_0x9f6cx8 && (_0x9f6cx8['successors'] = _0x9f6cx9['getSuccessors'](_0x9f6cx6))
	}

	function _0x9f6cx4(_0x9f6cx9, _0x9f6cx6) {
		var _0x9f6cx8 = _0x9f6cx1(_0x9f6cx9, _0x9f6cx6);
		_0x9f6cx8 && (_0x9f6cx8['predecessors'] = _0x9f6cx9['getPredecessors'](_0x9f6cx6))
	}

	function _0x9f6cx3(_0x9f6cx9) {
		var _0x9f6cx8 = _0x9f6cx9['dependencyStore']['getTaskStore']()
			, _0x9f6cx6 = _0x9f6cx8 && _0x9f6cx8['getRoot']();
		_0x9f6cx6 && _0x9f6cx6['cascadeBy'](function (_0x9f6cxc) {
			_0x9f6cxc['successors'] = [];
			_0x9f6cxc['predecessors'] = []
		})
	}

	function _0x9f6cx7(_0x9f6cx9) {
		var _0x9f6cx8 = _0x9f6cx9['dependencyStore']['getTaskStore']()
			, _0x9f6cx6 = _0x9f6cx8 && _0x9f6cx8['getRoot']();
		_0x9f6cx6 && _0x9f6cx6['cascadeBy'](function (_0x9f6cxc) {
			_0x9f6cxc['successors'] = _0x9f6cx9['getSuccessors'](_0x9f6cxc);
			_0x9f6cxc['predecessors'] = _0x9f6cx9['getPredecessors'](_0x9f6cxc)
		})
	}
	return {
		extend: 'Ext.ux.Scheduler.data.util.EventDependencyCache'
		, taskStoreDetacher: null
		, taskStoreDependencyStoreDetacher: null
		, constructor: function (_0x9f6cx8) {
			var _0x9f6cxb = this
				, _0x9f6cxe;
			_0x9f6cxb['callParent']([_0x9f6cx8]);

			function _0x9f6cxd(_0x9f6cx12) {
				_0x9f6cx7(_0x9f6cxb)
			}

			function _0x9f6cxc(_0x9f6cx12, _0x9f6cx11) {
				_0x9f6cx2(_0x9f6cxb, _0x9f6cx11);
				_0x9f6cx4(_0x9f6cxb, _0x9f6cx11)
			}

			function _0x9f6cx6(_0x9f6cx12, _0x9f6cx11) {
				_0x9f6cx2(_0x9f6cxb, _0x9f6cx11);
				_0x9f6cx4(_0x9f6cxb, _0x9f6cx11)
			}

			function _0x9f6cxa(_0x9f6cx12) {
				_0x9f6cx7(_0x9f6cxb)
			}

			function _0x9f6cx13(_0x9f6cx12, _0x9f6cx11) {
				_0x9f6cx9(_0x9f6cx11)
			}

			function _0x9f6cxf(_0x9f6cx12) {
				_0x9f6cx7(_0x9f6cxb)
			}

			function _0x9f6cx9(_0x9f6cx12) {
				Ext['destroy'](_0x9f6cxb['taskStoreDetacher']);
				_0x9f6cxb['taskStoreDetacher'] = _0x9f6cx12 && _0x9f6cx12['on']({
					rootchange: _0x9f6cxd
					, nodeappend: _0x9f6cxc
					, nodeinsert: _0x9f6cx6
					, refresh: _0x9f6cxa
					, priority: 99
					, destroyable: true
				});
				_0x9f6cx7(_0x9f6cxb)
			}
			_0x9f6cxb['taskStoreDependencyStoreDetacher'] = _0x9f6cx8['on']({
				eventstorechange: _0x9f6cx13
				, refresh: _0x9f6cxf
				, priority: 100
				, destroyable: true
			});
			_0x9f6cx9(_0x9f6cx8['getTaskStore']())
		}
		, destroy: function () {
			var _0x9f6cx6 = this;
			_0x9f6cx6['callParent']();
			Ext['destroyMembers'](_0x9f6cx6, 'taskStoreDetacher', 'taskStoreDependencyStoreDetacher')
		}
		, addSuccessor: function (_0x9f6cx8, _0x9f6cx6) {
			var _0x9f6cx9 = this;
			_0x9f6cx9['callParent']([_0x9f6cx8, _0x9f6cx6]);
			_0x9f6cx2(_0x9f6cx9, _0x9f6cx8)
		}
		, addPredecessor: function (_0x9f6cx8, _0x9f6cx6) {
			var _0x9f6cx9 = this;
			_0x9f6cx9['callParent']([_0x9f6cx8, _0x9f6cx6]);
			_0x9f6cx4(_0x9f6cx9, _0x9f6cx8)
		}
		, setSuccessors: function (_0x9f6cx6, _0x9f6cx9) {
			var _0x9f6cx8 = this;
			_0x9f6cx8['callParent']([_0x9f6cx6, _0x9f6cx9]);
			_0x9f6cx2(_0x9f6cx8, _0x9f6cx6)
		}
		, setPredecessors: function (_0x9f6cx6, _0x9f6cx9) {
			var _0x9f6cx8 = this;
			_0x9f6cx8['callParent']([_0x9f6cx6, _0x9f6cx9]);
			_0x9f6cx4(_0x9f6cx8, _0x9f6cx6)
		}
		, removeSuccessor: function (_0x9f6cx8, _0x9f6cx6) {
			var _0x9f6cx9 = this;
			_0x9f6cx9['callParent']([_0x9f6cx8, _0x9f6cx6]);
			_0x9f6cx2(_0x9f6cx9, _0x9f6cx8)
		}
		, removePredecessor: function (_0x9f6cx8, _0x9f6cx6) {
			var _0x9f6cx9 = this;
			_0x9f6cx9['callParent']([_0x9f6cx8, _0x9f6cx6]);
			_0x9f6cx4(_0x9f6cx9, _0x9f6cx8)
		}
		, moveSuccessors: function (_0x9f6cx9, _0x9f6cxc, _0x9f6cx6) {
			var _0x9f6cx8 = this;
			_0x9f6cx8['callParent'](arguments);
			_0x9f6cx2(_0x9f6cx8, _0x9f6cx9);
			_0x9f6cx2(_0x9f6cx8, _0x9f6cxc)
		}
		, movePredecessors: function (_0x9f6cx9, _0x9f6cxc, _0x9f6cx6) {
			var _0x9f6cx8 = this;
			_0x9f6cx8['callParent'](arguments);
			_0x9f6cx4(_0x9f6cx8, _0x9f6cx9);
			_0x9f6cx4(_0x9f6cx8, _0x9f6cxc)
		}
		, clearSuccessors: function (_0x9f6cx6) {
			var _0x9f6cx8 = this;
			_0x9f6cx8['callParent']([_0x9f6cx6]);
			_0x9f6cx2(_0x9f6cx8, _0x9f6cx6)
		}
		, clearPredecessors: function (_0x9f6cx6) {
			var _0x9f6cx8 = this;
			_0x9f6cx8['callParent']([_0x9f6cx6]);
			_0x9f6cx4(_0x9f6cx8, _0x9f6cx6)
		}
		, clear: function (_0x9f6cx6) {
			var _0x9f6cx8 = this;
			_0x9f6cx8['callParent'](arguments);
			if (_0x9f6cx6) {
				_0x9f6cx2(_0x9f6cx8, _0x9f6cx6);
				_0x9f6cx4(_0x9f6cx8, _0x9f6cx6)
			}
			else {
				_0x9f6cx3(_0x9f6cx8)
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.model.Dependency', {
	extend: 'Ext.ux.Scheduler.model.DependencyBase'
	, requires: ['Ext.ux.Scheduler.util.Date']
	, customizableFields: [{
		name: 'Lag'
		, type: 'number'
		, defaultValue: 0
	}, {
		name: 'LagUnit'
		, type: 'string'
		, defaultValue: 'd'
		, convert: function (_0x9f6cx1) {
			return _0x9f6cx1 || Ext.ux.Scheduler['util']['Date']['DAY']
		}
	}]
	, lagField: 'Lag'
	, lagUnitField: 'LagUnit'
	, isHighlighted: false
	, getTaskStore: function () {
		return Ext['isFunction'](this['store']['getTaskStore']) ? this['store']['getTaskStore']() : this['store']['taskStore']
	}
	, getEventStore: function () {
		return this['getTaskStore']()
	}
	, getSourceTask: function (_0x9f6cx1) {
		return this['getSourceEvent'](_0x9f6cx1)
	}
	, setSourceTask: function (_0x9f6cx1) {
		return this['setSourceEvent'](_0x9f6cx1)
	}
	, getTargetTask: function (_0x9f6cx1) {
		return this['getTargetEvent'](_0x9f6cx1)
	}
	, setTargetTask: function (_0x9f6cx1) {
		return this['setTargetEvent'](_0x9f6cx1)
	}
	, setLag: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['beginEdit']();
		_0x9f6cx2['set'](_0x9f6cx2['lagField'], _0x9f6cx1);
		if (arguments['length'] > 1) {
			_0x9f6cx2['setLagUnit'](_0x9f6cx5)
		};
		_0x9f6cx2['endEdit']()
	}
	, getLagUnit: function () {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['get'](_0x9f6cx1['lagUnitField']) || Ext.ux.Scheduler['util']['Date']['DAY']
	}
	, isValid: function (_0x9f6cx2) {
		var _0x9f6cx4 = this
			, _0x9f6cx3 = _0x9f6cx4['callParent'](arguments)
			, _0x9f6cx7 = _0x9f6cx4['getSourceId']()
			, _0x9f6cx1 = _0x9f6cx4['getTargetId']()
			, _0x9f6cx5 = _0x9f6cx4['getType']();
		if (_0x9f6cx3 && _0x9f6cx2 !== false && _0x9f6cx4['store']) {
			_0x9f6cx3 = _0x9f6cx4['store']['isValidDependency'](_0x9f6cx7, _0x9f6cx1, _0x9f6cx5, null, null, _0x9f6cx4)
		};
		return _0x9f6cx3
	}
	, getTypeFromSides: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cx4) {
		var _0x9f6cx5 = this['self']['Type']
			, _0x9f6cx1 = _0x9f6cx4 ? 'end' : 'start'
			, _0x9f6cx7 = _0x9f6cx4 ? 'start' : 'end';
		if (_0x9f6cx3 === _0x9f6cx1) {
			return (_0x9f6cx2 === _0x9f6cx1) ? _0x9f6cx5['StartToStart'] : _0x9f6cx5['StartToEnd']
		};
		return (_0x9f6cx2 === _0x9f6cx7) ? _0x9f6cx5['EndToEnd'] : _0x9f6cx5['EndToStart']
	}
});
Ext.define('Ext.ux.Gantt.data.DependencyStore', {
	extend: 'Ext.ux.Scheduler.data.DependencyStore'
	, requires: ['Ext.ux.Scheduler.util.Date', 'Ext.ux.Gantt.data.util.TaskDependencyCache']
	, model: 'Ext.ux.Gantt.model.Dependency'
	, alias: 'store.gantt_dependencystore'
	, taskStore: null
	, methodsCache: null
	, strictDependencyValidation: false
	, transitiveDependencyValidation: false
	, allowedDependencyTypes: null
	, allowParentTaskDependencies: true
	, autoCalculateLag: false
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['callParent']([_0x9f6cx1]);
		_0x9f6cx2['init']()
	}
	, createEventDependencyCache: function () {
		return new Ext.ux.Gantt['data']['util'].TaskDependencyCache(this)
	}
	, init: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['methodsCache'] = {};
		_0x9f6cx1['on']({
			add: _0x9f6cx1['onDependencyAdd']
			, update: _0x9f6cx1['onDependencyUpdate']
			, remove: _0x9f6cx1['onDependencyRemove']
			, priority: 100
			, scope: _0x9f6cx1
		})
	}
	, updateAutoCalculatedLag: function (_0x9f6cx7) {
		if (_0x9f6cx7['getLag']() === 0) {
			var _0x9f6cx5 = this['model']['Type']
				, _0x9f6cx8 = _0x9f6cx7['getLagUnit']()
				, _0x9f6cx9 = _0x9f6cx7['getSourceTask']()
				, _0x9f6cxc = _0x9f6cx7['getTargetTask']()
				, _0x9f6cx2 = Ext.ux.Scheduler['util']['Date']
				, _0x9f6cx3 = 1
				, _0x9f6cx1, _0x9f6cx6;
			switch (_0x9f6cx7['getType']()) {
			case _0x9f6cx5['StartToStart']:
				if (_0x9f6cxc['getStartDate']() < _0x9f6cx9['getStartDate']()) {
					_0x9f6cx3 = -1
				};
				_0x9f6cx1 = _0x9f6cx2['min'](_0x9f6cx9['getStartDate'](), _0x9f6cxc['getStartDate']());
				_0x9f6cx6 = _0x9f6cx2['max'](_0x9f6cx9['getStartDate'](), _0x9f6cxc['getStartDate']());
				break;
			case _0x9f6cx5['StartToEnd']:
				if (_0x9f6cxc['getEndDate']() < _0x9f6cx9['getStartDate']()) {
					_0x9f6cx3 = -1
				};
				_0x9f6cx1 = _0x9f6cx2['min'](_0x9f6cx9['getStartDate'](), _0x9f6cxc['getEndDate']());
				_0x9f6cx6 = _0x9f6cx2['max'](_0x9f6cx9['getStartDate'](), _0x9f6cxc['getEndDate']());
				break;
			case _0x9f6cx5['EndToStart']:
				if (_0x9f6cxc['getStartDate']() < _0x9f6cx9['getEndDate']()) {
					_0x9f6cx3 = -1
				};
				_0x9f6cx1 = _0x9f6cx2['min'](_0x9f6cxc['getStartDate'](), _0x9f6cx9['getEndDate']());
				_0x9f6cx6 = _0x9f6cx2['max'](_0x9f6cxc['getStartDate'](), _0x9f6cx9['getEndDate']());
				break;
			case _0x9f6cx5['EndToEnd']:
				if (_0x9f6cxc['getEndDate']() < _0x9f6cx9['getEndDate']()) {
					_0x9f6cx3 = -1
				};
				_0x9f6cx1 = _0x9f6cx2['min'](_0x9f6cxc['getEndDate'](), _0x9f6cx9['getEndDate']());
				_0x9f6cx6 = _0x9f6cx2['max'](_0x9f6cxc['getEndDate'](), _0x9f6cx9['getEndDate']());
				break
			};
			var _0x9f6cx4 = _0x9f6cxc['calculateDuration'](_0x9f6cx1, _0x9f6cx6, _0x9f6cx8);
			_0x9f6cx7['setLag'](_0x9f6cx3 * _0x9f6cx4)
		}
	}
	, onDependencyAdd: function (_0x9f6cx1, _0x9f6cx2) {
		Ext['Array']['each'](_0x9f6cx2, function (_0x9f6cx5) {
			if (!_0x9f6cx1['isValidDependencyType'](_0x9f6cx5['getType']())) {
				throw 'This dependency type is invalid. Check Ext.ux.Gantt.data.DependencyStore#allowedDependencyTypes value'
			};
			var _0x9f6cx4 = _0x9f6cx5['getSourceTask']()
				, _0x9f6cx3 = _0x9f6cx5['getTargetTask']();
			if (_0x9f6cx4 && _0x9f6cx3 && !_0x9f6cx1['isUndoingOrRedoing']()) {
				_0x9f6cx1['autoCalculateLag'] && _0x9f6cx1['updateAutoCalculatedLag'](_0x9f6cx5)
			}
		});
		_0x9f6cx1['resetMethodsCache']()
	}
	, onDependencyRemove: function (_0x9f6cx1, _0x9f6cx2) {
		_0x9f6cx1['resetMethodsCache']()
	}
	, onDependencyUpdate: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx1 != Ext['data']['Model']['COMMIT']) {
			_0x9f6cx5['resetMethodsCache']()
		}
	}
	, reduceTaskDependencies: function (_0x9f6cx2, _0x9f6cx3, _0x9f6cx1, _0x9f6cx4, _0x9f6cx5) {
		return this['reduceEventDependencies'](_0x9f6cx2, _0x9f6cx3, _0x9f6cx1, _0x9f6cx4, _0x9f6cx5)
	}
	, reduceTaskIncomingDependencies: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1, _0x9f6cx3) {
		return this['reduceEventIncomingDependencies'](_0x9f6cx2, _0x9f6cx5, _0x9f6cx1, _0x9f6cx3)
	}
	, reduceTaskOutgoingDependencies: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1, _0x9f6cx3) {
		return this['reduceEventOutgoingDependencies'](_0x9f6cx2, _0x9f6cx5, _0x9f6cx1, _0x9f6cx3)
	}
	, mapTaskDependencies: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx3, _0x9f6cx4, _0x9f6cx2) {
		return this['mapEventDependencies'](_0x9f6cx1, _0x9f6cx5, _0x9f6cx3, _0x9f6cx4, _0x9f6cx2)
	}
	, mapTaskIncomingDependencies: function (_0x9f6cx1, _0x9f6cx2, _0x9f6cx5, _0x9f6cx3) {
		return this['mapEventIncomingDependencies'](_0x9f6cx1, _0x9f6cx2, _0x9f6cx5, _0x9f6cx3)
	}
	, mapTaskOutgoingDependencies: function (_0x9f6cx1, _0x9f6cx2, _0x9f6cx5, _0x9f6cx3) {
		return this['mapEventOutgoingDependencies'](_0x9f6cx1, _0x9f6cx2, _0x9f6cx5, _0x9f6cx3)
	}
	, getTaskDependencies: function (_0x9f6cx1, _0x9f6cx2) {
		return this['getEventDependencies'](_0x9f6cx1, _0x9f6cx2)
	}
	, getTaskIncomingDependencies: function (_0x9f6cx1, _0x9f6cx2) {
		return this['getEventIncomingDependencies'](_0x9f6cx1, _0x9f6cx2)
	}
	, getTaskOutgoingDependencies: function (_0x9f6cx1, _0x9f6cx2) {
		return this['getEventOutgoingDependencies'](_0x9f6cx1, _0x9f6cx2)
	}
	, getTaskPredecessors: function (_0x9f6cx1, _0x9f6cx2) {
		return this['getEventPredecessors'](_0x9f6cx1, _0x9f6cx2)
	}
	, getTaskSuccessors: function (_0x9f6cx1, _0x9f6cx2) {
		return this['getEventSuccessors'](_0x9f6cx1, _0x9f6cx2)
	}
	, removeTaskDependencies: function (_0x9f6cx1, _0x9f6cx2) {
		this['removeEventDependencies'](_0x9f6cx1, _0x9f6cx2)
	}
	, removeTaskIncomingDependencies: function (_0x9f6cx1, _0x9f6cx2) {
		this['removeEventIncomingDependencies'](_0x9f6cx1, _0x9f6cx2)
	}
	, removeTaskOutgoingDependencies: function (_0x9f6cx1, _0x9f6cx2) {
		this['removeEventOutgoingDependencies'](_0x9f6cx1, _0x9f6cx2)
	}
	, getKeyByDeps: function (_0x9f6cx4, _0x9f6cx6, _0x9f6cx2) {
		if (!_0x9f6cx4 || !_0x9f6cx4['length']) {
			return ''
		};
		var _0x9f6cx3 = '';
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx4['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			var _0x9f6cx7 = _0x9f6cx4[_0x9f6cx5];
			_0x9f6cx3 += (_0x9f6cx7['getSourceId'] && _0x9f6cx7['getSourceId']() || _0x9f6cx7[_0x9f6cx6]) + ':' + (_0x9f6cx7['getTargetId'] && _0x9f6cx7['getTargetId']() || _0x9f6cx7[_0x9f6cx2]) + ','
		};
		return _0x9f6cx3
	}
	, buildCacheKey: function (_0x9f6cx7, _0x9f6cx6, _0x9f6cx5, _0x9f6cx4, _0x9f6cx1) {
		var _0x9f6cx9 = _0x9f6cx1['fromField'] || (_0x9f6cx1['fromField'] = this['model']['prototype']['fromField'])
			, _0x9f6cx3 = _0x9f6cx1['toField'] || (_0x9f6cx1['toField'] = this['model']['prototype']['toField'])
			, _0x9f6cx2 = _0x9f6cx1['ignoreDepKey']
			, _0x9f6cx8 = _0x9f6cx1['addDepKey'];
		if (!_0x9f6cx1['hasOwnProperty']('ignoreDepKey')) {
			_0x9f6cx1['ignoreDepKey'] = _0x9f6cx2 = _0x9f6cx5 && this['getKeyByDeps'](_0x9f6cx5, _0x9f6cx9, _0x9f6cx3) || '';
			_0x9f6cx1['addDepKey'] = _0x9f6cx8 = _0x9f6cx4 && this['getKeyByDeps'](_0x9f6cx4, _0x9f6cx9, _0x9f6cx3) || ''
		};
		return _0x9f6cx7 + '-' + _0x9f6cx6 + '-' + _0x9f6cx2 + '-' + _0x9f6cx8
	}
	, hasTransitiveDependency: function (_0x9f6cx7, _0x9f6cx2, _0x9f6cx5, _0x9f6cxd, _0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {
			visitedTasks: {}
		};
		var _0x9f6cx3 = this['buildCacheKey'](_0x9f6cx7, _0x9f6cx2, _0x9f6cx5, _0x9f6cxd, _0x9f6cx1);
		var _0x9f6cx11 = _0x9f6cx1['visitedTasks']
			, _0x9f6cxf = _0x9f6cx1['extraSuccessors'];
		if (this['isCachedResultAvailable']('hasTransitiveDependency', _0x9f6cx3)) {
			return this['methodsCache']['hasTransitiveDependency'][_0x9f6cx3]
		};
		var _0x9f6cx12 = this
			, _0x9f6cx17 = _0x9f6cx1['fromField']
			, _0x9f6cx6 = _0x9f6cx1['toField']
			, _0x9f6cx10 = this['getTaskById'](_0x9f6cx7)
			, _0x9f6cxe, _0x9f6cxa;
		if (_0x9f6cx11[_0x9f6cx7]) {
			return false
		};
		_0x9f6cx11[_0x9f6cx7] = true;
		if (_0x9f6cx10) {
			if (_0x9f6cxd && !_0x9f6cxf) {
				_0x9f6cxf = _0x9f6cx1['extraSuccessors'] = {};
				for (_0x9f6cxe = 0, _0x9f6cxa = _0x9f6cxd['length']; _0x9f6cxe < _0x9f6cxa; _0x9f6cxe++) {
					var _0x9f6cx4 = _0x9f6cxd[_0x9f6cxe];
					var _0x9f6cxb = _0x9f6cx4['getSourceId'] && _0x9f6cx4['getSourceId']() || _0x9f6cx4[_0x9f6cx17];
					_0x9f6cxf[_0x9f6cxb] = _0x9f6cxf[_0x9f6cxb] || [];
					_0x9f6cxf[_0x9f6cxb]['push'](_0x9f6cx4)
				}
			};
			var _0x9f6cxc, _0x9f6cx8 = _0x9f6cx10['successors'];
			if (_0x9f6cxf && _0x9f6cxf[_0x9f6cx7]) {
				_0x9f6cx8 = _0x9f6cx8['concat'](_0x9f6cxf[_0x9f6cx7])
			};
			for (_0x9f6cxe = 0, _0x9f6cxa = _0x9f6cx8['length']; _0x9f6cxe < _0x9f6cxa; _0x9f6cxe++) {
				_0x9f6cxc = _0x9f6cx8[_0x9f6cxe];
				var _0x9f6cx14 = _0x9f6cxc['getTargetId'] && _0x9f6cxc['getTargetId']() || _0x9f6cxc[_0x9f6cx6];
				if ((!_0x9f6cx5 || Ext['Array']['indexOf'](_0x9f6cx5, _0x9f6cxc) == -1) && (_0x9f6cx14 === _0x9f6cx2 || _0x9f6cx12['hasTransitiveDependency'](_0x9f6cx14, _0x9f6cx2, _0x9f6cx5, _0x9f6cxd, _0x9f6cx1))) {
					return this['setCachedResult']('hasTransitiveDependency', _0x9f6cx3, true)
				}
			}
		};
		return this['setCachedResult']('hasTransitiveDependency', _0x9f6cx3, false)
	}
	, successorsHaveTransitiveDependency: function (_0x9f6cxc, _0x9f6cxa, _0x9f6cx4, _0x9f6cx8, _0x9f6cx2) {
		_0x9f6cx2 = _0x9f6cx2 || {};
		var _0x9f6cx6 = this['buildCacheKey'](_0x9f6cxc, _0x9f6cxa, _0x9f6cx4, _0x9f6cx8, _0x9f6cx2);
		var _0x9f6cx5 = _0x9f6cxa instanceof Ext.ux.Gantt['model']['Task'] ? _0x9f6cxa : this['getTaskById'](_0x9f6cxa);
		if (this['isCachedResultAvailable']('successorsHaveTransitiveDependency', _0x9f6cx6)) {
			return this['methodsCache']['successorsHaveTransitiveDependency'][_0x9f6cx6]
		};
		for (var _0x9f6cx7 = 0, _0x9f6cx3 = _0x9f6cx5['successors']['length']; _0x9f6cx7 < _0x9f6cx3; _0x9f6cx7++) {
			var _0x9f6cx1 = _0x9f6cx5['successors'][_0x9f6cx7]['getTargetId']();
			if (this['hasTransitiveDependency'](_0x9f6cxc, _0x9f6cx1, _0x9f6cx4, _0x9f6cx8) || this['predecessorsHaveTransitiveDependency'](_0x9f6cxc, _0x9f6cx1, _0x9f6cx4, _0x9f6cx8) || this['successorsHaveTransitiveDependency'](_0x9f6cxc, _0x9f6cx1, _0x9f6cx4, _0x9f6cx8, _0x9f6cx2)) {
				return this['setCachedResult']('successorsHaveTransitiveDependency', _0x9f6cx6, true)
			}
		};
		return this['setCachedResult']('successorsHaveTransitiveDependency', _0x9f6cx6, false)
	}
	, predecessorsHaveTransitiveDependency: function (_0x9f6cxc, _0x9f6cxa, _0x9f6cx3, _0x9f6cx8, _0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		var _0x9f6cx6 = this['buildCacheKey'](_0x9f6cxc, _0x9f6cxa, _0x9f6cx3, _0x9f6cx8, _0x9f6cx1);
		var _0x9f6cx2 = _0x9f6cxc instanceof Ext.ux.Gantt['model']['Task'] ? _0x9f6cxc : this['getTaskById'](_0x9f6cxc);
		if (this['isCachedResultAvailable']('predecessorsHaveTransitiveDependency', _0x9f6cx6)) {
			return this['methodsCache']['predecessorsHaveTransitiveDependency'][_0x9f6cx6]
		};
		for (var _0x9f6cx7 = 0, _0x9f6cx5 = _0x9f6cx2['predecessors']['length']; _0x9f6cx7 < _0x9f6cx5; _0x9f6cx7++) {
			var _0x9f6cx4 = _0x9f6cx2['predecessors'][_0x9f6cx7]['getSourceId']();
			if (this['hasTransitiveDependency'](_0x9f6cx4, _0x9f6cxa, _0x9f6cx3, _0x9f6cx8) || this['successorsHaveTransitiveDependency'](_0x9f6cx4, _0x9f6cxa, _0x9f6cx3, _0x9f6cx8) || this['predecessorsHaveTransitiveDependency'](_0x9f6cx4, _0x9f6cxa, _0x9f6cx3, _0x9f6cx8, _0x9f6cx1)) {
				return this['setCachedResult']('predecessorsHaveTransitiveDependency', _0x9f6cx6, true)
			}
		};
		return this['setCachedResult']('predecessorsHaveTransitiveDependency', _0x9f6cx6, false)
	}
	, isPartOfTransitiveDependency: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx4 instanceof Ext.ux.Gantt['model']['Task'] ? _0x9f6cx4 : this['getTaskById'](_0x9f6cx4);
		if (!_0x9f6cx2['predecessors']['length'] && !_0x9f6cx2['successors']['length']) {
			return false
		};
		if (_0x9f6cx2['predecessors']['length']) {
			return this['predecessorsHaveTransitiveDependency']['apply'](this, arguments)
		}
		else {
			return this['successorsHaveTransitiveDependency']['apply'](this, arguments)
		}
	}
	, getCycle: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		Ext['applyIf'](_0x9f6cx1, {
			ignoreTasks: {}
			, visitedTasks: {}
			, path: []
			, task: this['getAt'](0)['getSourceTask']()
		});
		var _0x9f6cx7 = _0x9f6cx1['visitedTasks']
			, _0x9f6cx6 = _0x9f6cx1['ignoreTasks']
			, _0x9f6cxa = _0x9f6cx1['path']
			, _0x9f6cx2 = _0x9f6cx1['task']
			, _0x9f6cxc = _0x9f6cx2['getId']();
		if (_0x9f6cx6[_0x9f6cxc]) {
			return
		};
		_0x9f6cxa['push'](_0x9f6cx2);
		if (_0x9f6cx7[_0x9f6cxc]) {
			return _0x9f6cxa
		};
		_0x9f6cx7[_0x9f6cxc] = true;
		var _0x9f6cx5 = _0x9f6cx2['successors'];
		for (var _0x9f6cx8 = 0, _0x9f6cx3 = _0x9f6cx5['length']; _0x9f6cx8 < _0x9f6cx3; _0x9f6cx8++) {
			_0x9f6cx1['task'] = _0x9f6cx5[_0x9f6cx8]['getTargetTask']();
			var _0x9f6cx4 = this['getCycle'](_0x9f6cx1);
			if (_0x9f6cx4) {
				return _0x9f6cx4
			}
		};
		_0x9f6cxa['pop']();
		delete _0x9f6cx7[_0x9f6cxc]
	}
	, getCycles: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = []
			, _0x9f6cx2 = {};
		this['each'](function (_0x9f6cx6) {
			var _0x9f6cx7 = _0x9f6cx5['getCycle']({
				task: _0x9f6cx6['getSourceTask']()
				, ignoreTasks: _0x9f6cx2
			});
			if (_0x9f6cx7) {
				for (var _0x9f6cx4 = 0, _0x9f6cx3 = _0x9f6cx7['length']; _0x9f6cx4 < _0x9f6cx3; _0x9f6cx4++) {
					_0x9f6cx2[_0x9f6cx7[_0x9f6cx4]] = true
				};
				_0x9f6cx1['push'](_0x9f6cx7)
			}
		});
		return _0x9f6cx1
	}
	, resetMethodsCache: function () {
		this['methodsCache'] = {}
	}
	, isCachedResultAvailable: function (_0x9f6cx2, _0x9f6cx1) {
		return this['methodsCache'][_0x9f6cx2] && this['methodsCache'][_0x9f6cx2]['hasOwnProperty'](_0x9f6cx1)
	}
	, getCachedResult: function (_0x9f6cx2, _0x9f6cx1) {
		return this['methodsCache'][_0x9f6cx2][_0x9f6cx1]
	}
	, setCachedResult: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx2) {
		this['methodsCache'][_0x9f6cx5] = this['methodsCache'][_0x9f6cx5] || {};
		this['methodsCache'][_0x9f6cx5][_0x9f6cx1] = _0x9f6cx2;
		return _0x9f6cx2
	}
	, getGroupTopTasks: function (_0x9f6cx6, _0x9f6cx8) {
		var _0x9f6cx2 = _0x9f6cx6['length']
			, _0x9f6cx7 = _0x9f6cx8['length']
			, _0x9f6cx3 = _0x9f6cx2
			, _0x9f6cx1 = _0x9f6cx7
			, _0x9f6cx4, _0x9f6cx5;
		do {
			_0x9f6cx4 = _0x9f6cx6[_0x9f6cx3];
			_0x9f6cx5 = _0x9f6cx8[_0x9f6cx1];
			_0x9f6cx3--;
			_0x9f6cx1--
		} while (_0x9f6cx4 == _0x9f6cx5 && _0x9f6cx3 >= 0 && _0x9f6cx1 >= 0);;
		return [_0x9f6cx4, _0x9f6cx5]
	}
	, groupsHasTransitiveDependency: function (_0x9f6cx8, _0x9f6cx5, _0x9f6cx3, _0x9f6cx17, _0x9f6cx2) {
		var _0x9f6cx12 = _0x9f6cx2 || {
			targets: null
			, visitedTasks: {}
		};
		var _0x9f6cx11 = this['getTaskStore']()['getRootNode']()
			, _0x9f6cxc = false
			, _0x9f6cx1b = this
			, _0x9f6cxd = this['getTaskById'](_0x9f6cx8)
			, _0x9f6cx1c = this['getTaskById'](_0x9f6cx5)
			, _0x9f6cx1e = _0x9f6cx12['visitedTasks']
			, _0x9f6cx18 = _0x9f6cx12['targets'];
		if (!_0x9f6cx12['targetGroup']) {
			_0x9f6cx12['targetGroup'] = _0x9f6cx1c['getTopParent'](true)
		};
		var _0x9f6cx1d = _0x9f6cx12['fromField'] || (_0x9f6cx12['fromField'] = this['model']['prototype']['fromField'])
			, _0x9f6cxa = _0x9f6cx12['toField'] || (_0x9f6cx12['toField'] = this['model']['prototype']['toField'])
			, _0x9f6cxe = _0x9f6cx12['ignoreDepKey']
			, _0x9f6cx1 = _0x9f6cx12['addDepKey'];
		var _0x9f6cx16 = this['getGroupTopTasks'](_0x9f6cxd['getTopParent'](true), _0x9f6cx12['targetGroup'])
			, _0x9f6cxb = _0x9f6cx16[0]
			, _0x9f6cx7 = _0x9f6cx16[1];
		if (_0x9f6cxb === _0x9f6cxd && _0x9f6cx7 === _0x9f6cx1c && _0x9f6cxd['isLeaf']() && _0x9f6cx1c['isLeaf']()) {
			return this['hasTransitiveDependency'](_0x9f6cx8, _0x9f6cx5, _0x9f6cx3)
		};
		if (!_0x9f6cx12['hasOwnProperty']('ignoreDepKey')) {
			_0x9f6cx12['ignoreDepKey'] = _0x9f6cxe = _0x9f6cx3 && this['getKeyByDeps'](_0x9f6cx3, _0x9f6cx1d, _0x9f6cxa) || '';
			_0x9f6cx12['addDepKey'] = _0x9f6cx1 = _0x9f6cx17 && this['getKeyByDeps'](_0x9f6cx17, _0x9f6cx1d, _0x9f6cxa) || ''
		};
		var _0x9f6cx4 = _0x9f6cxb['getId']() + '-' + _0x9f6cx7['getId']() + '-' + _0x9f6cxe + '-' + _0x9f6cx1;
		if (this['isCachedResultAvailable']('groupsHasTransitiveDependency', _0x9f6cx4)) {
			return this['methodsCache']['groupsHasTransitiveDependency'][_0x9f6cx4]
		};
		if (_0x9f6cx7 !== _0x9f6cx12['targetTopParent']) {
			_0x9f6cx12['targetTopParent'] = _0x9f6cx7;
			_0x9f6cx18 = _0x9f6cx12['targets'] = {};
			_0x9f6cx7['cascadeBy'](function (_0x9f6cx9) {
				_0x9f6cx18[_0x9f6cx9['getId']()] = true
			})
		};
		var _0x9f6cx15 = _0x9f6cx12['extraSuccessors'];
		if (_0x9f6cx17 && !_0x9f6cx15) {
			_0x9f6cx15 = _0x9f6cx12['extraSuccessors'] = {};
			for (var _0x9f6cx14 = 0, _0x9f6cxf = _0x9f6cx17['length']; _0x9f6cx14 < _0x9f6cxf; _0x9f6cx14++) {
				var _0x9f6cx6 = _0x9f6cx17[_0x9f6cx14];
				var _0x9f6cx10 = _0x9f6cx6['getSourceId'] && _0x9f6cx6['getSourceId']() || _0x9f6cx6[_0x9f6cx1d];
				_0x9f6cx15[_0x9f6cx10] = _0x9f6cx15[_0x9f6cx10] || [];
				_0x9f6cx15[_0x9f6cx10]['push'](_0x9f6cx6)
			}
		};
		_0x9f6cxb['cascadeBy'](function (_0x9f6cx1f) {
			if (_0x9f6cx1f !== _0x9f6cx11) {
				var _0x9f6cx23 = _0x9f6cx1f['getId']();
				if (_0x9f6cx1e[_0x9f6cx23]) {
					return false
				};
				_0x9f6cx1e[_0x9f6cx23] = true;
				var _0x9f6cx22 = _0x9f6cx1f['successors'];
				if (_0x9f6cx15 && _0x9f6cx15[_0x9f6cx23]) {
					_0x9f6cx22 = _0x9f6cx22['concat'](_0x9f6cx15[_0x9f6cx23])
				};
				for (var _0x9f6cx20 = 0, _0x9f6cx1a = _0x9f6cx22['length']; _0x9f6cx20 < _0x9f6cx1a; _0x9f6cx20++) {
					var _0x9f6cx21 = _0x9f6cx22[_0x9f6cx20]
						, _0x9f6cx19 = _0x9f6cx21['getTargetId'] && _0x9f6cx21['getTargetId']() || _0x9f6cx21[_0x9f6cxa];
					if ((!_0x9f6cx3 || Ext['Array']['indexOf'](_0x9f6cx3, _0x9f6cx21) == -1) && (_0x9f6cx18[_0x9f6cx19] || _0x9f6cx1b['groupsHasTransitiveDependency'](_0x9f6cx19, _0x9f6cx5, _0x9f6cx3, _0x9f6cx17, _0x9f6cx12))) {
						_0x9f6cxc = true;
						return false
					}
				}
			}
		});
		return this['setCachedResult']('groupsHasTransitiveDependency', _0x9f6cx4, _0x9f6cxc)
	}
	, getDependencyError: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cxa, _0x9f6cx9, _0x9f6cxb, _0x9f6cx6) {
		var _0x9f6cx4, _0x9f6cxc, _0x9f6cx7;
		var _0x9f6cx5 = _0x9f6cx3 instanceof Ext.ux.Gantt['model']['Dependency'];
		if (_0x9f6cx5) {
			_0x9f6cx4 = _0x9f6cx3['getSourceId']();
			_0x9f6cxc = this['getTaskById'](_0x9f6cx4);
			_0x9f6cx9 = _0x9f6cx2;
			_0x9f6cxb = _0x9f6cxa;
			if (_0x9f6cx9 && Ext['Array']['contains'](_0x9f6cx9, _0x9f6cx3)) {
				_0x9f6cx9 = _0x9f6cx9['slice']();
				Ext['Array']['remove'](_0x9f6cx9, _0x9f6cx3)
			};
			_0x9f6cxa = _0x9f6cx3['getType']();
			_0x9f6cx2 = _0x9f6cx3['getTargetId']();
			_0x9f6cx7 = this['getTaskById'](_0x9f6cx2);
			if (_0x9f6cx3['store']) {
				_0x9f6cx6 = _0x9f6cx3
			}
		}
		else {
			_0x9f6cx4 = _0x9f6cx3;
			_0x9f6cxc = this['getTaskById'](_0x9f6cx4);
			_0x9f6cx7 = this['getTaskById'](_0x9f6cx2);
			if (_0x9f6cxa === undefined) {
				var _0x9f6cx8 = this['model']['getField'](this['model']['prototype']['typeField'])['defaultValue'];
				_0x9f6cxa = _0x9f6cx8 !== undefined ? _0x9f6cx8 : this['model']['Type']['EndToStart']
			}
		};
		if (!_0x9f6cx6 && _0x9f6cx5 && !_0x9f6cx3['isValid']()) {
			return -1
		}
		else {
			if (!_0x9f6cx4 || !_0x9f6cx2 || _0x9f6cx4 == _0x9f6cx2) {
				return -1
			}
		};
		if (!_0x9f6cxc || !_0x9f6cx7) {
			return -2
		};
		if (!this['isValidDependencyType'](_0x9f6cxa)) {
			return -10
		};
		if (_0x9f6cxc['contains'](_0x9f6cx7) || _0x9f6cx7['contains'](_0x9f6cxc)) {
			return -9
		};
		var _0x9f6cx13;
		if (_0x9f6cxb || _0x9f6cx6) {
			_0x9f6cx13 = [];
			if (_0x9f6cx6) {
				_0x9f6cx13['push'](_0x9f6cx6)
			};
			if (_0x9f6cxb) {
				_0x9f6cx13 = _0x9f6cx13['concat'](_0x9f6cxb)
			}
		};
		if (this['transitiveDependencyValidation']) {
			if (this['hasTransitiveDependency'](_0x9f6cx4, _0x9f6cx2, _0x9f6cx13, _0x9f6cx9)) {
				return -3
			}
		}
		else {
			if (this['areTasksLinkedForward'](_0x9f6cx4, _0x9f6cx2, _0x9f6cx13, _0x9f6cx9)) {
				return -3
			}
		};
		if (this['hasTransitiveDependency'](_0x9f6cx2, _0x9f6cx4, _0x9f6cx13, _0x9f6cx9)) {
			return -4
		};
		if (this['transitiveDependencyValidation'] && this['isPartOfTransitiveDependency'](_0x9f6cx4, _0x9f6cx2, _0x9f6cx13, _0x9f6cx9)) {
			return -5
		};
		if (this['strictDependencyValidation']) {
			if (this['groupsHasTransitiveDependency'](_0x9f6cx2, _0x9f6cx4, _0x9f6cx13, _0x9f6cx9)) {
				return -7
			};
			if (this['transitiveDependencyValidation'] && this['groupsHasTransitiveDependency'](_0x9f6cx4, _0x9f6cx2, _0x9f6cx13, _0x9f6cx9)) {
				return -8
			}
		};
		if (!this['allowParentTaskDependencies'] && (!_0x9f6cxc['isLeaf']() || !_0x9f6cx7['isLeaf']())) {
			return -11
		};
		if (_0x9f6cx7['isProject'] || _0x9f6cxc['isProject']) {
			return -12
		};
		var _0x9f6cxe = _0x9f6cx7['getProject']()
			, _0x9f6cx1 = _0x9f6cxc['getProject']();
		if (_0x9f6cxe != _0x9f6cx1) {
			if (_0x9f6cxe && !_0x9f6cxe['getAllowDependencies']() || _0x9f6cx1 && !_0x9f6cx1['getAllowDependencies']()) {
				return -13
			}
		};
		return 0
	}
	, isValidDependencyType: function (_0x9f6cx5) {
		if (this['allowedDependencyTypes']) {
			var _0x9f6cx1 = false
				, _0x9f6cx2 = this['model'];
			Ext['each'](this['allowedDependencyTypes'], function (_0x9f6cx3) {
				if (_0x9f6cx2['Type'][_0x9f6cx3] == _0x9f6cx5) {
					_0x9f6cx1 = true;
					return false
				}
			});
			return _0x9f6cx1
		};
		return true
	}
	, isValidDependency: function (_0x9f6cx7, _0x9f6cx2, _0x9f6cx3, _0x9f6cx1, _0x9f6cx5, _0x9f6cx4) {
		return !this['getDependencyError'](_0x9f6cx7, _0x9f6cx2, _0x9f6cx3, _0x9f6cx1, _0x9f6cx5, _0x9f6cx4)
	}
	, areTasksLinkedForward: function (_0x9f6cxa, _0x9f6cx4, _0x9f6cxf, _0x9f6cx8) {
		var _0x9f6cxe = _0x9f6cxa instanceof Ext.ux.Gantt['model']['Task'] ? _0x9f6cxa : this['getTaskById'](_0x9f6cxa);
		var _0x9f6cxd = _0x9f6cx4 instanceof Ext.ux.Gantt['model']['Task'] ? _0x9f6cx4 : this['getTaskById'](_0x9f6cx4);
		if (!_0x9f6cxe || !_0x9f6cxd) {
			return false
		};
		var _0x9f6cx7 = this['model']['prototype']
			, _0x9f6cx10 = _0x9f6cx7['fromField']
			, _0x9f6cx6 = _0x9f6cx7['toField'];
		var _0x9f6cxc = _0x9f6cxe['getId']() + '-' + _0x9f6cxd['getId']() + '-' + (this['getKeyByDeps'](_0x9f6cxf, _0x9f6cx10, _0x9f6cx6) || '') + '-' + (this['getKeyByDeps'](_0x9f6cx8, _0x9f6cx10, _0x9f6cx6) || '');
		if (this['isCachedResultAvailable']('areTasksLinkedForward', _0x9f6cxc)) {
			return this['methodsCache']['areTasksLinkedForward'][_0x9f6cxc]
		};
		var _0x9f6cx2 = _0x9f6cxe['successors']
			, _0x9f6cx1 = _0x9f6cxd['predecessors']
			, _0x9f6cxb, _0x9f6cx3, _0x9f6cx5;
		for (_0x9f6cx3 = 0, _0x9f6cx5 = _0x9f6cx2['length']; _0x9f6cx3 < _0x9f6cx5; _0x9f6cx3++) {
			_0x9f6cxb = _0x9f6cx2[_0x9f6cx3];
			if ((!_0x9f6cxf || !Ext['Array']['contains'](_0x9f6cxf, _0x9f6cxb)) && Ext['Array']['contains'](_0x9f6cx1, _0x9f6cxb)) {
				return this['setCachedResult']('areTasksLinkedForward', _0x9f6cxc, true)
			}
		};
		if (_0x9f6cx8) {
			var _0x9f6cx11, _0x9f6cx12;
			for (_0x9f6cx3 = 0, _0x9f6cx5 = _0x9f6cx8['length']; _0x9f6cx3 < _0x9f6cx5; _0x9f6cx3++) {
				_0x9f6cxb = _0x9f6cx8[_0x9f6cx3];
				_0x9f6cx11 = _0x9f6cxb['getSourceId'] && _0x9f6cxb['getSourceId']() || _0x9f6cxb[_0x9f6cx10];
				_0x9f6cx12 = _0x9f6cxb['getTargetId'] && _0x9f6cxb['getTargetId']() || _0x9f6cxb[_0x9f6cx6];
				if (_0x9f6cx11 == _0x9f6cxe['getId']() && _0x9f6cx12 == _0x9f6cxd['getId']()) {
					return this['setCachedResult']('areTasksLinkedForward', _0x9f6cxc, true)
				}
			}
		};
		return this['setCachedResult']('areTasksLinkedForward', _0x9f6cxc, false)
	}
	, areTasksLinked: function (_0x9f6cx4, _0x9f6cx2) {
		var _0x9f6cx3 = _0x9f6cx4 instanceof Ext.ux.Gantt['model']['Task'] ? _0x9f6cx4 : this['getTaskById'](_0x9f6cx4);
		var _0x9f6cx5 = _0x9f6cx2 instanceof Ext.ux.Gantt['model']['Task'] ? _0x9f6cx2 : this['getTaskById'](_0x9f6cx2);
		if (!_0x9f6cx3 || !_0x9f6cx5) {
			return false
		};
		var _0x9f6cx1 = _0x9f6cx3['getId']() + '-' + _0x9f6cx5['getId']();
		if (this['isCachedResultAvailable']('areTasksLinked', _0x9f6cx1)) {
			return this['methodsCache']['areTasksLinked'][_0x9f6cx1]
		};
		return this['setCachedResult']('areTasksLinked', _0x9f6cx1, this['areTasksLinkedForward'](_0x9f6cx3, _0x9f6cx5) || this['areTasksLinkedForward'](_0x9f6cx5, _0x9f6cx3))
	}
	, getDependencyForSourceAndTargetTasks: function (_0x9f6cx1, _0x9f6cx2) {
		return this['getDependencyForSourceAndTargetEvents'](_0x9f6cx1, _0x9f6cx2)
	}
	, getTasksLinkingDependency: function (_0x9f6cx1, _0x9f6cx2) {
		return this['getEventsLinkingDependency'](_0x9f6cx1, _0x9f6cx2)
	}
	, getTaskById: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['getTaskStore']();
		return _0x9f6cx1 && _0x9f6cx1['getModelById'](_0x9f6cx2) || null
	}
	, getSourceTask: function (_0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx1 instanceof Ext.ux.Gantt['model']['Dependency'] ? _0x9f6cx1['getSourceId']() : _0x9f6cx1;
		return this['getTaskById'](_0x9f6cx2)
	}
	, getTargetTask: function (_0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx1 instanceof Ext.ux.Gantt['model']['Dependency'] ? _0x9f6cx1['getTargetId']() : _0x9f6cx1;
		return this['getTaskById'](_0x9f6cx2)
	}
	, getTaskStore: function () {
		return this['getEventStore']()
	}
	, setTaskStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['taskStore'] = _0x9f6cx1;
		_0x9f6cx2['setEventStore'](_0x9f6cx1)
	}
});
Ext.define('Ext.ux.Scheduler.model.Resource', {
	extend: 'Ext.ux.Scheduler.model.Customizable'
	, idProperty: 'Id'
	, config: Ext['versions']['touch'] ? {
		idProperty: 'Id'
	} : null
	, nameField: 'Name'
	, customizableFields: [{
		name: 'Name'
		, type: 'string'
	}]
	, getInternalId: function () {
		return this['internalId']
	}
	, getResourceStore: function () {
		return this['joined'] && this['joined'][0]
	}
	, getEventStore: function () {
		var _0x9f6cx1 = this['getResourceStore']();
		return _0x9f6cx1 && _0x9f6cx1['getEventStore']() || this['parentNode'] && this['parentNode']['getEventStore']()
	}
	, getAssignmentStore: function () {
		var _0x9f6cx1 = this['getEventStore']();
		return _0x9f6cx1 && _0x9f6cx1['getAssignmentStore']()
	}
	, getEvents: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx1 = _0x9f6cx1 || _0x9f6cx2['getEventStore']();
		return _0x9f6cx1 && _0x9f6cx1['getEventsForResource'](_0x9f6cx2) || []
	}
	, getAssignments: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getEventStore']();
		return _0x9f6cx1 && _0x9f6cx1['getAssignmentsForResource'](_0x9f6cx2)
	}
	, isPersistable: function () {
		var _0x9f6cx1 = this['parentNode'];
		return !_0x9f6cx1 || !_0x9f6cx1['phantom'] || (_0x9f6cx1['isRoot'] && _0x9f6cx1['isRoot']())
	}
	, isAbove: function (_0x9f6cx3) {
		var _0x9f6cx7 = this
			, _0x9f6cx8 = _0x9f6cx7['getResourceStore']()
			, _0x9f6cx9 = false
			, _0x9f6cx4, _0x9f6cx5, _0x9f6cx2, _0x9f6cx1, _0x9f6cx6;
		Ext['Assert'] && Ext['Assert']['truthy'](_0x9f6cx8, 'Resource must be added to a store to be able to check if it above of an other resource');
		if (_0x9f6cx7 == _0x9f6cx3) {
			_0x9f6cx9 = false
		}
		else {
			if (_0x9f6cx8 instanceof Ext['data']['TreeStore']) {
				_0x9f6cx4 = _0x9f6cx7;
				_0x9f6cx5 = [];
				while (_0x9f6cx4) {
					_0x9f6cx5['push'](_0x9f6cx4);
					_0x9f6cx4 = _0x9f6cx4['parentNode']
				};
				_0x9f6cx4 = _0x9f6cx3;
				_0x9f6cx2 = [];
				while (_0x9f6cx4) {
					_0x9f6cx2['push'](_0x9f6cx4);
					_0x9f6cx4 = _0x9f6cx4['parentNode']
				};
				_0x9f6cx1 = 0;
				while (_0x9f6cx1 < _0x9f6cx5['length'] - 1 && _0x9f6cx1 < _0x9f6cx2['length'] - 1 && _0x9f6cx5[_0x9f6cx1] == _0x9f6cx2[_0x9f6cx1]) {
					++_0x9f6cx1
				};
				_0x9f6cx6 = _0x9f6cx5[_0x9f6cx1];
				_0x9f6cx7 = _0x9f6cx5[_0x9f6cx1 + 1];
				_0x9f6cx3 = _0x9f6cx2[_0x9f6cx1 + 1];
				_0x9f6cx9 = _0x9f6cx6['indexOf'](_0x9f6cx7) < _0x9f6cx6['indexOf'](_0x9f6cx3)
			}
			else {
				_0x9f6cx9 = _0x9f6cx8['indexOf'](_0x9f6cx7) < _0x9f6cx8['indexOf'](_0x9f6cx3)
			}
		};
		return _0x9f6cx9
	}
});
Ext.define('Ext.ux.Gantt.model.Resource', {
	extend: 'Ext.ux.Scheduler.model.Resource'
	, customizableFields: ['CalendarId', {
		name: 'Rate'
		, type: 'number'
		, defaultValue: 0
	}, {
		name: 'RateUnit'
		, type: 'string'
		, defaultValue: 'h'
	}, {
		name: 'PerUseCost'
		, type: 'number'
		, defaultValue: 0
	}]
	, calendarIdField: 'CalendarId'
	, rateField: 'Rate'
	, rateUnitField: 'RateUnit'
	, perUseCostField: 'PerUseCost'
	, normalized: false
	, calendarWaitingListener: null
	, isResource: true
	, getTaskStore: function () {
		var _0x9f6cx1 = this['store'] || (this['getTreeStore'] && this['getTreeStore']());
		return _0x9f6cx1 ? _0x9f6cx1['getTaskStore']() : null
	}
	, getEventStore: function () {
		return this['getTaskStore']()
	}
	, setRate: function (_0x9f6cx1, _0x9f6cx2) {
		if (_0x9f6cx2) {
			this['set'](this['rateUnitField'], _0x9f6cx2)
		};
		this['set'](this['rateField'], _0x9f6cx1);
		this['recalculateCost']()
	}
	, setRateUnit: function (_0x9f6cx1) {
		this['set'](this['rateUnitField'], _0x9f6cx1);
		this['recalculateCost']()
	}
	, setPerUseCost: function (_0x9f6cx1) {
		this['set'](this['perUseCostField'], _0x9f6cx1);
		this['recalculateCost']()
	}
	, recalculateCost: function () {
		this['forEachTask'](function (_0x9f6cx1) {
			_0x9f6cx1['recalculateCost']()
		}, this)
	}
	, getTasks: function () {
		return this['getEvents']()
	}
	, getCalendar: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return _0x9f6cx1 ? _0x9f6cx2['getOwnCalendar']() : _0x9f6cx2['getOwnCalendar']() || _0x9f6cx2['getProjectCalendar']()
	}
	, getOwnCalendar: function () {
		var _0x9f6cx1 = this['getCalendarId']();
		return _0x9f6cx1 ? Ext.ux.Gantt['data']['Calendar']['getCalendar'](_0x9f6cx1) : null
	}
	, getProjectCalendar: function () {
		return this['getTaskStore']()['getCalendar']()
	}
	, setCalendar: function (_0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx2 instanceof Ext.ux.Gantt['data']['Calendar'];
		if (_0x9f6cx1 && !_0x9f6cx2['calendarId']) {
			throw new Error('can\'t set calendar w/o `calendarId` property')
		};
		this['setCalendarId'](_0x9f6cx1 ? _0x9f6cx2['calendarId'] : _0x9f6cx2)
	}
	, setCalendarId: function (_0x9f6cx5, _0x9f6cx3) {
		if (_0x9f6cx5 instanceof Ext.ux.Gantt['data']['Calendar']) {
			_0x9f6cx5 = _0x9f6cx5['calendarId']
		};
		var _0x9f6cx2 = this['getCalendarId']();
		if (_0x9f6cx2 != _0x9f6cx5 || _0x9f6cx3) {
			if (this['calendarWaitingListener']) {
				this['calendarWaitingListener']['destroy']();
				this['calendarWaitingListener'] = null
			};
			var _0x9f6cx1 = {
				calendarchange: this['onCalendarChange']
				, scope: this
			};
			var _0x9f6cx7 = this['calendar'] || Ext.ux.Gantt['data']['Calendar']['getCalendar'](_0x9f6cx2);
			this['calendar'] = null;
			_0x9f6cx7 && _0x9f6cx7['un'](_0x9f6cx1);
			this['set'](this['calendarIdField'], _0x9f6cx5);
			var _0x9f6cx4 = Ext.ux.Gantt['data']['Calendar']['getCalendar'](_0x9f6cx5);
			if (_0x9f6cx4) {
				_0x9f6cx4['on'](_0x9f6cx1);
				if (!_0x9f6cx3) {
					this['onCalendarChange']()
				}
			}
			else {
				this['calendarWaitingListener'] = Ext['data']['StoreManager']['on']('add', function (_0x9f6cx6, _0x9f6cx9, _0x9f6cx8) {
					_0x9f6cx4 = Ext.ux.Gantt['data']['Calendar']['getCalendar'](_0x9f6cx5);
					if (_0x9f6cx4) {
						this['calendarWaitingListener']['destroy']();
						this['calendarWaitingListener'] = null;
						_0x9f6cx4['on'](_0x9f6cx1);
						this['onCalendarChange']()
					}
				}, this, {
					destroyable: true
				})
			}
		}
	}
	, onCalendarChange: function () {
		this['inOnCalendarChange'] = true;
		this['adjustToCalendar']();
		this['inOnCalendarChange'] = false
	}
	, adjustToCalendar: function () {
		this['getTaskStore']() && this['forEachTask'](function (_0x9f6cx1) {
			_0x9f6cx1['adjustToCalendar']()
		})
	}
	, assignTo: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx2 = _0x9f6cx1 instanceof Ext.ux.Gantt['model']['Task'] ? _0x9f6cx1 : this['getTaskStore']()['getModelById'](_0x9f6cx1);
		return _0x9f6cx2['assign'](this, _0x9f6cx5, _0x9f6cx3)
	}
	, unAssignFrom: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = _0x9f6cx1 instanceof Ext.ux.Gantt['model']['Task'] ? _0x9f6cx1 : this['getTaskStore']()['getModelById'](_0x9f6cx1);
		return _0x9f6cx2['unAssign'](this, _0x9f6cx5)
	}
	, unassignFrom: function () {
		return this['unAssignFrom']['apply'](this, arguments)
	}
	, forEachAssignment: function (_0x9f6cx2, _0x9f6cxc) {
		var _0x9f6cx6 = this
			, _0x9f6cx8 = _0x9f6cx6['getTaskStore']()
			, _0x9f6cx4 = _0x9f6cx8 && _0x9f6cx8['getAssignmentStore']()
			, _0x9f6cx1 = _0x9f6cx4 && _0x9f6cx4['getAssignmentsForResource'](_0x9f6cx6) || []
			, _0x9f6cx3, _0x9f6cx7, _0x9f6cx5;
		_0x9f6cxc = _0x9f6cxc || this;
		for (_0x9f6cx5 = false, _0x9f6cx3 = 0, _0x9f6cx7 = _0x9f6cx1['length']; !_0x9f6cx5 && _0x9f6cx3 < _0x9f6cx7; ++_0x9f6cx3) {
			_0x9f6cx5 = (false === _0x9f6cx2['call'](_0x9f6cxc, _0x9f6cx1[_0x9f6cx3]))
		}
	}
	, forEachTask: function (_0x9f6cx5, _0x9f6cxa) {
		var _0x9f6cx8 = this
			, _0x9f6cxc = _0x9f6cx8['getTaskStore']()
			, _0x9f6cx7 = _0x9f6cxc && _0x9f6cxc['getAssignmentStore']()
			, _0x9f6cx1 = _0x9f6cx7 && _0x9f6cx7['getAssignmentsForResource'](_0x9f6cx8) || []
			, _0x9f6cx4, _0x9f6cx6, _0x9f6cx3, _0x9f6cx2;
		_0x9f6cxa = _0x9f6cxa || this;
		for (_0x9f6cx3 = false, _0x9f6cx4 = 0, _0x9f6cx6 = _0x9f6cx1['length']; !_0x9f6cx3 && _0x9f6cx4 < _0x9f6cx6; ++_0x9f6cx4) {
			_0x9f6cx2 = _0x9f6cx1[_0x9f6cx4]['getTask']();
			_0x9f6cx2 && (_0x9f6cx3 = (false === _0x9f6cx5['call'](_0x9f6cxa, _0x9f6cx2)))
		}
	}
	, collectAvailabilityIntervalPoints: function (_0x9f6cx7, _0x9f6cx1, _0x9f6cx9, _0x9f6cx8, _0x9f6cx5) {
		for (var _0x9f6cx4 = 0, _0x9f6cx3 = _0x9f6cx7['length']; _0x9f6cx4 < _0x9f6cx3; _0x9f6cx4++) {
			var _0x9f6cx2 = _0x9f6cx7[_0x9f6cx4];
			var _0x9f6cx6 = _0x9f6cx2['startDate'] - 0;
			var _0x9f6cxc = _0x9f6cx2['endDate'] - 0;
			if (!_0x9f6cx8[_0x9f6cx6]) {
				_0x9f6cx8[_0x9f6cx6] = [];
				_0x9f6cx5['push'](_0x9f6cx6)
			};
			_0x9f6cx8[_0x9f6cx6]['push'](_0x9f6cx1);
			if (!_0x9f6cx8[_0x9f6cxc]) {
				_0x9f6cx8[_0x9f6cxc] = [];
				_0x9f6cx5['push'](_0x9f6cxc)
			};
			_0x9f6cx8[_0x9f6cxc]['push'](_0x9f6cx9)
		}
	}
	, forEachAvailabilityIntervalWithTasks: function (_0x9f6cx6, _0x9f6cxb, _0x9f6cx5) {
		_0x9f6cx5 = _0x9f6cx5 || this;
		var _0x9f6cx7 = _0x9f6cx6['startDate'];
		var _0x9f6cx1a = _0x9f6cx6['endDate'];
		var _0x9f6cxe = _0x9f6cx6['task'];
		if (!_0x9f6cx7 || !_0x9f6cx1a) {
			throw 'Both `startDate` and `endDate` are required for `forEachAvailabilityIntervalWithTasks`'
		};
		var _0x9f6cxd = new Date(_0x9f6cx7);
		var _0x9f6cx20 = _0x9f6cx6['includeAllIntervals'];
		var _0x9f6cx21 = _0x9f6cx6['includeResCalIntervals'];
		var _0x9f6cx15 = this['getCalendar']();
		var _0x9f6cx10 = [];
		var _0x9f6cx14 = [];
		var _0x9f6cx3 = [];
		var _0x9f6cx25 = [_0x9f6cx7 - 0, _0x9f6cx1a - 0];
		var _0x9f6cx12 = {};
		_0x9f6cx12[_0x9f6cx7 - 0] = [{
			type: '00-intervalStart'
		}];
		_0x9f6cx12[_0x9f6cx1a - 0] = [{
			type: '00-intervalEnd'
		}];
		this['forEachAssignment'](function (_0x9f6cxc) {
			var _0x9f6cxa = _0x9f6cxc['getTask']();
			if (!_0x9f6cxa || (_0x9f6cxe && _0x9f6cxa !== _0x9f6cxe)) {
				return
			};
			var _0x9f6cx41 = _0x9f6cxa['getStartDate']();
			var _0x9f6cx26 = _0x9f6cxa['getEndDate']();
			var _0x9f6cx32 = _0x9f6cxa['getId']();
			if (_0x9f6cx41 > _0x9f6cx1a || _0x9f6cx26 < _0x9f6cx7) {
				return
			};
			_0x9f6cx14['push'](_0x9f6cxa);
			_0x9f6cx3['push'](_0x9f6cxa['getOwnCalendar']() || this['getCalendar']());
			if (_0x9f6cxa['isSegmented']()) {
				for (var _0x9f6cx34 = _0x9f6cxa['getSegments'](), _0x9f6cx43 = 0, _0x9f6cx28 = _0x9f6cx34['length']; _0x9f6cx43 < _0x9f6cx28; _0x9f6cx43++) {
					var _0x9f6cx2c = _0x9f6cx34[_0x9f6cx43];
					this['collectAvailabilityIntervalPoints']([{
						startDate: _0x9f6cx2c['getStartDate']()
						, endDate: _0x9f6cx2c['getEndDate']()
					}], {
						type: '05-taskStart'
						, assignment: _0x9f6cxc
						, taskId: _0x9f6cx32
						, units: _0x9f6cxc['getUnits']()
					}, {
						type: '04-taskEnd'
						, taskId: _0x9f6cx32
					}, _0x9f6cx12, _0x9f6cx25)
				}
			}
			else {
				this['collectAvailabilityIntervalPoints']([{
					startDate: _0x9f6cx41
					, endDate: _0x9f6cx26
				}], {
					type: '05-taskStart'
					, assignment: _0x9f6cxc
					, taskId: _0x9f6cx32
					, units: _0x9f6cxc['getUnits']()
				}, {
					type: '04-taskEnd'
					, taskId: _0x9f6cx32
				}, _0x9f6cx12, _0x9f6cx25)
			};
			_0x9f6cx10['push'](_0x9f6cxc)
		});
		if (!_0x9f6cx14['length'] && !_0x9f6cx20 && !_0x9f6cx21) {
			return
		};
		var _0x9f6cx8 = Ext.ux.Scheduler['util']['Date'];
		var _0x9f6cx19, _0x9f6cx16, _0x9f6cx4, _0x9f6cx2 = {};
		while (_0x9f6cxd < _0x9f6cx1a) {
			this['collectAvailabilityIntervalPoints'](_0x9f6cx15['getAvailabilityIntervalsFor'](_0x9f6cxd), {
				type: '00-resourceAvailabilityStart'
			}, {
				type: '01-resourceAvailabilityEnd'
			}, _0x9f6cx12, _0x9f6cx25);
			for (_0x9f6cx19 = 0, _0x9f6cx16 = _0x9f6cx3['length']; _0x9f6cx19 < _0x9f6cx16; _0x9f6cx19++) {
				_0x9f6cx4 = _0x9f6cx14[_0x9f6cx19]['getId']();
				this['collectAvailabilityIntervalPoints'](_0x9f6cx3[_0x9f6cx19]['getAvailabilityIntervalsFor'](_0x9f6cxd), {
					type: '02-taskAvailabilityStart'
					, taskId: _0x9f6cx4
				}, {
					type: '03-taskAvailabilityEnd'
					, taskId: _0x9f6cx4
				}, _0x9f6cx12, _0x9f6cx25)
			};
			_0x9f6cxd = _0x9f6cx8['getStartOfNextDay'](_0x9f6cxd)
		};
		_0x9f6cx25['sort'](function (_0x9f6cxc, _0x9f6cx9) {
			return _0x9f6cxc - _0x9f6cx9
		});
		var _0x9f6cx1e = false
			, _0x9f6cx22 = false
			, _0x9f6cx23 = {}
			, _0x9f6cx1 = 0
			, _0x9f6cx1d = 0;
		var _0x9f6cx1f = {};
		for (_0x9f6cx19 = 0, _0x9f6cx16 = _0x9f6cx25['length'] - 1; _0x9f6cx19 < _0x9f6cx16; _0x9f6cx19++) {
			var _0x9f6cx1c = _0x9f6cx12[_0x9f6cx25[_0x9f6cx19]];
			_0x9f6cx1c['sort'](function (_0x9f6cxc, _0x9f6cx9) {
				return _0x9f6cxc['type'] < _0x9f6cx9['type'] ? 1 : -1
			});
			for (var _0x9f6cx18 = 0, _0x9f6cx1b = _0x9f6cx1c['length']; _0x9f6cx18 < _0x9f6cx1b; _0x9f6cx18++) {
				var _0x9f6cx17 = _0x9f6cx1c[_0x9f6cx18];
				switch (_0x9f6cx17['type']) {
				case '00-resourceAvailabilityStart':
					_0x9f6cx22 = true;
					break;
				case '01-resourceAvailabilityEnd':
					_0x9f6cx22 = false;
					break;
				case '02-taskAvailabilityStart':
					_0x9f6cx1++;
					_0x9f6cx1f[_0x9f6cx17['taskId']] = true;
					break;
				case '03-taskAvailabilityEnd':
					_0x9f6cx1--;
					delete _0x9f6cx1f[_0x9f6cx17['taskId']];
					break;
				case '05-taskStart':
					_0x9f6cx23[_0x9f6cx17['taskId']] = _0x9f6cx17;
					_0x9f6cx1d++;
					break;
				case '04-taskEnd':
					delete _0x9f6cx23[_0x9f6cx17['taskId']];
					_0x9f6cx1d--;
					break;
				case '00-intervalStart':
					_0x9f6cx1e = true;
					break;
				case '00-intervalEnd':
					return
				}
			};
			if (_0x9f6cx1e && (_0x9f6cx20 || _0x9f6cx21 && _0x9f6cx22 || _0x9f6cx22 && _0x9f6cx1 && _0x9f6cx1d)) {
				var _0x9f6cx11 = {
					inResourceCalendar: !!_0x9f6cx22
					, inTasksCalendar: !!_0x9f6cx1
					, inTask: _0x9f6cx1d
					, inTaskCalendarHash: Ext['apply']({}, _0x9f6cx1f)
				};
				var _0x9f6cx24 = _0x9f6cx25[_0x9f6cx19];
				var _0x9f6cxf = _0x9f6cx25[_0x9f6cx19 + 1];
				if (_0x9f6cx24 > _0x9f6cx1a || _0x9f6cxf < _0x9f6cx7) {
					continue
				};
				if (_0x9f6cx24 < _0x9f6cx7) {
					_0x9f6cx24 = _0x9f6cx7 - 0
				};
				if (_0x9f6cxf > _0x9f6cx1a) {
					_0x9f6cxf = _0x9f6cx1a - 0
				};
				if (_0x9f6cxb['call'](_0x9f6cx5, _0x9f6cx24, _0x9f6cxf, _0x9f6cx23, _0x9f6cx11) === false) {
					return false
				}
			}
		}
	}
	, getAllocationInfo: function (_0x9f6cx1) {
		var _0x9f6cx2 = [];
		this['forEachAvailabilityIntervalWithTasks'](_0x9f6cx1, function (_0x9f6cx8, _0x9f6cxc, _0x9f6cx3, _0x9f6cxe) {
			var _0x9f6cxd = 0
				, _0x9f6cx13 = []
				, _0x9f6cxf = {}
				, _0x9f6cx7 = 0
				, _0x9f6cx5 = []
				, _0x9f6cx6 = {}
				, _0x9f6cxa = _0x9f6cxc - _0x9f6cx8
				, _0x9f6cxb = 0;
			if (_0x9f6cxe['inResourceCalendar'] && _0x9f6cxe['inTasksCalendar'] && _0x9f6cxe['inTask']) {
				for (var _0x9f6cx4 in _0x9f6cx3) {
					if (_0x9f6cxe['inTaskCalendarHash'][_0x9f6cx4]) {
						_0x9f6cxb += _0x9f6cxa * _0x9f6cx3[_0x9f6cx4]['units'] * 0.01;
						_0x9f6cxd += _0x9f6cx3[_0x9f6cx4]['units'];
						_0x9f6cxf[_0x9f6cx4] = _0x9f6cx3[_0x9f6cx4]['assignment'];
						_0x9f6cx13['push'](_0x9f6cx3[_0x9f6cx4]['assignment'])
					};
					_0x9f6cx7 += _0x9f6cx3[_0x9f6cx4]['units'];
					_0x9f6cx6[_0x9f6cx4] = _0x9f6cx3[_0x9f6cx4]['assignment'];
					_0x9f6cx5['push'](_0x9f6cx3[_0x9f6cx4]['assignment'])
				}
			};
			_0x9f6cx2['push'](Ext['apply']({
				startDate: new Date(_0x9f6cx8)
				, endDate: new Date(_0x9f6cxc)
				, effectiveTotalAllocation: _0x9f6cxd
				, effectiveAssignmentsHash: _0x9f6cxf
				, effectiveAssignments: _0x9f6cx13
				, totalAllocationMS: _0x9f6cxb
				, totalAllocation: _0x9f6cx7
				, assignments: _0x9f6cx5
				, assignmentsHash: _0x9f6cx6
			}, _0x9f6cxe))
		});
		return _0x9f6cx2
	}
	, getUtilizationInfo: function (_0x9f6cx2, _0x9f6cx8, _0x9f6cx6, _0x9f6cxc) {
		var _0x9f6cxa = this
			, _0x9f6cx4 = 0
			, _0x9f6cx7 = false
			, _0x9f6cx1 = false
			, _0x9f6cx9 = {}
			, _0x9f6cx5 = {};
		if (arguments['length'] < 3) {
			_0x9f6cx6 = _0x9f6cxc = 100
		};
		var _0x9f6cx3 = _0x9f6cxa['getAllocationInfo']({
			includeResCalIntervals: true
			, startDate: _0x9f6cx2
			, endDate: _0x9f6cx8
		});
		Ext['Array']['each'](_0x9f6cx3, function (_0x9f6cx13) {
			_0x9f6cx4 += _0x9f6cx13['totalAllocationMS'];
			if (_0x9f6cx13['effectiveTotalAllocation'] > _0x9f6cxc) {
				_0x9f6cx7 = true;
				_0x9f6cx1 = false
			}
			else {
				if (!_0x9f6cx7 && _0x9f6cx13['effectiveTotalAllocation'] < _0x9f6cx6) {
					_0x9f6cx1 = true
				}
			};
			Ext['Array']['each'](_0x9f6cx13['effectiveAssignments'], function (_0x9f6cxf) {
				var _0x9f6cxd = _0x9f6cxf['getId']()
					, _0x9f6cx17 = _0x9f6cxf['getTaskId']()
					, _0x9f6cx12 = _0x9f6cxf['getUnits']()
					, _0x9f6cx14 = Math['floor']((_0x9f6cx13['endDate'] - _0x9f6cx13['startDate']) * _0x9f6cx12 / 100)
					, _0x9f6cxb = 0
					, _0x9f6cx11 = _0x9f6cx12 > _0x9f6cxc
					, _0x9f6cxe = _0x9f6cx12 < _0x9f6cx6
					, _0x9f6cx10;
				if (_0x9f6cx9[_0x9f6cxd]) {
					_0x9f6cx10 = _0x9f6cx9[_0x9f6cxd];
					_0x9f6cx10['allocationMs'] += _0x9f6cx14;
					_0x9f6cx10['allocationDeltaMs'] += _0x9f6cxb;
					_0x9f6cx10['isOverallocated'] = _0x9f6cx10['isOverallocated'] || _0x9f6cx11;
					_0x9f6cx10['isUnderallocated'] = _0x9f6cx10['isUnderallocated'] || _0x9f6cxe
				}
				else {
					_0x9f6cx10 = {
						isUtilized: true
						, allocationMs: _0x9f6cx14
						, allocationDeltaMs: _0x9f6cxb
						, isOverallocated: _0x9f6cx11
						, isUnderallocated: _0x9f6cxe
					};
					_0x9f6cx9[_0x9f6cxd] = _0x9f6cx10;
					_0x9f6cx5[_0x9f6cx17] = _0x9f6cx10
				}
			})
		});
		return {
			isUtilized: _0x9f6cx4 > 0
			, allocationMs: _0x9f6cx4
			, allocationDeltaMs: 0
			, isOverallocated: _0x9f6cx7
			, isUnderallocated: _0x9f6cx1
			, assignmentInfo: _0x9f6cx9
			, taskInfo: _0x9f6cx5
		}
	}
});
Ext.define('Ext.ux.Gantt.data.mixin.ResourceStore', {
	extend: 'Ext.Mixin'
	, taskStore: null
	, mixinConfig: {
		after: {
			constructor: 'constructor'
		}
	}
	, constructor: function () {
		this['on'](this['getStoreListeners']())
	}
	, getStoreListeners: function () {
		return {
			load: this['normalizeResources']
			, remove: this['onResourceRemoved']
			, priority: 100
		}
	}
	, normalizeResources: function () {
		this['each'](function (_0x9f6cx2) {
			if (!_0x9f6cx2['normalized']) {
				var _0x9f6cx1 = _0x9f6cx2['getCalendarId']();
				if (_0x9f6cx1) {
					_0x9f6cx2['setCalendarId'](_0x9f6cx1, true)
				};
				_0x9f6cx2['normalized'] = true
			}
		})
	}
	, onResourceRemoved: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this['getAssignmentStore']();
		Ext['Array']['each'](_0x9f6cx5, function (_0x9f6cx3) {
			_0x9f6cx2['removeAssignmentsForResource'](_0x9f6cx3)
		})
	}
	, getTaskStore: function () {
		return this['taskStore']
	}
	, setTaskStore: function (_0x9f6cx1) {
		this['taskStore'] = _0x9f6cx1
	}
	, getAssignmentStore: function () {
		var _0x9f6cx1 = this['getTaskStore']();
		return _0x9f6cx1 && _0x9f6cx1['getAssignmentStore']() || null
	}
	, getDependencyStore: function () {
		var _0x9f6cx1 = this['getTaskStore']();
		return _0x9f6cx1 && _0x9f6cx1['getDependencyStore']() || null
	}
});
Ext.define('Ext.ux.Scheduler.data.mixin.ResourceStore', {
	eventStore: null
	, getEventStore: function () {
		return this['eventStore']
	}
	, setEventStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = this
			, _0x9f6cx5;
		if (_0x9f6cx2['eventStore'] !== _0x9f6cx1) {
			_0x9f6cx5 = _0x9f6cx2['eventStore'];
			_0x9f6cx2['eventStore'] = _0x9f6cx1 && Ext['StoreMgr']['lookup'](_0x9f6cx1) || null;
			_0x9f6cx2['fireEvent']('eventstorechange', _0x9f6cx2, _0x9f6cx1, _0x9f6cx5)
		}
	}
	, getScheduledEventsInTimeSpan: function (_0x9f6cx4, _0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = [];
		var _0x9f6cx3 = Ext.ux.Scheduler['util']['Date'];
		_0x9f6cx5 = _0x9f6cx5 || this['getEventStore']();
		Ext['Array']['each'](this['getRange'](), function (_0x9f6cx7) {
			Ext['Array']['each'](_0x9f6cx5['getEventsForResource'](_0x9f6cx7), function (_0x9f6cx6) {
				if (_0x9f6cx6['intersectsRange'](_0x9f6cx4, _0x9f6cx1)) {
					_0x9f6cx2['push'](_0x9f6cx6)
				}
			})
		});
		return _0x9f6cx2
	}
});
Ext.define('Ext.ux.Scheduler.data.ResourceStore', {
	extend: 'Ext.data.Store'
	, model: 'Ext.ux.Scheduler.model.Resource'
	, config: {
		model: 'Ext.ux.Scheduler.model.Resource'
	}
	, alias: 'store.resourcestore'
	, mixins: ['Ext.ux.Scheduler.data.mixin.UniversalModelGetter', 'Ext.ux.Scheduler.data.mixin.CacheHintHelper', 'Ext.ux.Scheduler.data.mixin.ResourceStore', 'Robo.data.Store']
	, storeId: 'resources'
	, constructor: function () {
		this['callParent'](arguments);
		if (this['getModel']() !== Ext.ux.Scheduler['model']['Resource'] && !(this['getModel']()['prototype'] instanceof Ext.ux.Scheduler['model']['Resource'])) {
			throw 'The model for the ResourceStore must subclass Ext.ux.Scheduler.model.Resource'
		}
	}
});
Ext.define('Ext.ux.Gantt.data.ResourceStore', {
	requires: ['Ext.ux.Gantt.model.Resource']
	, mixins: ['Ext.ux.Gantt.data.mixin.ResourceStore']
	, extend: 'Ext.ux.Scheduler.data.ResourceStore'
	, storeId: 'resources'
	, model: 'Ext.ux.Gantt.model.Resource'
	, alias: 'store.gantt_resourcestore'
});
Ext.define('Ext.ux.Gantt.patches.TaskStore', {
	extend: 'Ext.Mixin'
	, onClassMixedIn: function (_0x9f6cx1) {
		Ext['override'](_0x9f6cx1, {
			onTasksLoad: function () {
				if (!this['_refreshCalled']) {
					this['onTasksLoaded']()
				};
				this['un']('refresh', this['onTaskStoreRefresh'], this)
			}
			, onTasksBeforeLoad: function () {
				this['_refreshCalled'] = false;
				this['on']('refresh', this['onTaskStoreRefresh'], this, {
					priority: 1001
				})
			}
			, onTaskStoreRefresh: function () {
				if (!this['_refreshCalled']) {
					this['_refreshCalled'] = true;
					this['onTasksLoaded']()
				}
			}
			, setupListeners: function () {
				this['callParent'](arguments);
				this['on']('beforeload', this['onTasksBeforeLoad'], this, {
					priority: 100
				});
				this['un']({
					load: this['onTasksLoaded']
					, rootchanged: this['onTasksLoaded']
					, scope: this
				});
				this['on']({
					load: this['onTasksLoad']
					, rootchanged: this['onTasksLoad']
					, scope: this
				})
			}
		})
	}
});
Ext.define('Ext.ux.Scheduler.data.mixin.FilterableTreeStore', {
	isFilteredFlag: false
	, isHiddenFlag: false
	, treeFilter: null
	, lastTreeFilter: null
	, lastTreeHiding: null
	, allowExpandCollapseWhileFiltered: true
	, keepExpandStateWhileFiltered: false
	, reApplyFilterOnDataChange: true
	, suspendIncrementalFilterRefresh: 0
	, filterGeneration: 0
	, currentFilterGeneration: null
	, dataChangeListeners: null
	, monitoringDataChange: false
	, filterUpdateSuspended: false
	, onClassMixedIn: function (_0x9f6cx1) {
		_0x9f6cx1['override'](Ext.ux.Scheduler['data']['mixin']['FilterableTreeStore']['prototype']['inheritables']() || {})
	}
	, initTreeFiltering: function () {
		this['treeFilter'] = new Ext['util'].Filter({
			filterFn: this['isNodeFilteredIn']
			, scope: this
		});
		this['dataChangeListeners'] = {
			nodeappend: this['onNeedToUpdateFilter']
			, nodeinsert: this['onNeedToUpdateFilter']
			, scope: this
		};
		Ext['apply'](this['dataChangeListeners'], {
			beforeload: this['onStoreBeforeLoad']
			, load: this['onStoreLoad']
		})
	}
	, onStoreBeforeLoad: function () {
		this['filterUpdateSuspended'] = true
	}
	, onStoreLoad: function () {
		this['filterUpdateSuspended'] = false;
		this['onNeedToUpdateFilter']()
	}
	, startDataChangeMonitoring: function () {
		if (this['monitoringDataChange']) {
			return
		};
		this['monitoringDataChange'] = true;
		this['on'](this['dataChangeListeners'])
	}
	, stopDataChangeMonitoring: function () {
		if (!this['monitoringDataChange']) {
			return
		};
		this['monitoringDataChange'] = false;
		this['un'](this['dataChangeListeners'])
	}
	, onNeedToUpdateFilter: function () {
		if (this['reApplyFilterOnDataChange'] && !this['filterUpdateSuspended'] && !this['suspendIncrementalFilterRefresh']) {
			this['reApplyFilter']()
		}
	}
	, clearTreeFilter: function () {
		if (!this['isTreeFiltered']()) {
			return
		};
		this['currentFilterGeneration'] = null;
		this['isFilteredFlag'] = false;
		this['lastTreeFilter'] = null;
		if (!this['isTreeFiltered'](true)) {
			this['stopDataChangeMonitoring']()
		};
		this['refreshNodeStoreContent']();
		this['fireEvent']('filter-clear', this)
	}
	, reApplyFilter: function () {
		if (this['isHiddenFlag']) {
			this['hideNodesBy']['apply'](this, this['lastTreeHiding']['concat'](this['isFilteredFlag']))
		};
		if (this['isFilteredFlag']) {
			this['filterTreeBy'](this['lastTreeFilter'])
		}
	}
	, refreshNodeStoreContent: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getFilters']();
		if (_0x9f6cx1['indexOf'](_0x9f6cx2['treeFilter']) < 0) {
			_0x9f6cx2['addFilter'](_0x9f6cx2['treeFilter'])
		}
		else {
			this['getFilters']()['fireEvent']('endupdate', this['getFilters']())
		}
	}
	, getIndexInTotalDataset: function (_0x9f6cx3) {
		var _0x9f6cx5 = this['getRootNode']()
			, _0x9f6cx7 = -1;
		var _0x9f6cx6 = this['rootVisible'];
		if (!_0x9f6cx6 && _0x9f6cx3 == _0x9f6cx5) {
			return -1
		};
		var _0x9f6cx2 = this['isTreeFiltered']();
		var _0x9f6cx1 = this['currentFilterGeneration'];
		var _0x9f6cx4 = function (_0x9f6cxc) {
			if (_0x9f6cx2 && _0x9f6cxc['__filterGen'] != _0x9f6cx1 || _0x9f6cxc['hidden']) {
				if (_0x9f6cxc == _0x9f6cx3) {
					return false
				}
			};
			if (_0x9f6cx6 || _0x9f6cxc != _0x9f6cx5) {
				_0x9f6cx7++
			};
			if (_0x9f6cxc == _0x9f6cx3) {
				return false
			};
			if (!_0x9f6cxc['isLeaf']() && _0x9f6cxc['isExpanded']()) {
				var _0x9f6cx13 = _0x9f6cxc['childNodes']
					, _0x9f6cx9 = _0x9f6cx13['length'];
				for (var _0x9f6cx8 = 0; _0x9f6cx8 < _0x9f6cx9; _0x9f6cx8++) {
					if (_0x9f6cx4(_0x9f6cx13[_0x9f6cx8]) === false) {
						return false
					}
				}
			}
		};
		_0x9f6cx4(_0x9f6cx5);
		return _0x9f6cx7
	}
	, isTreeFiltered: function (_0x9f6cx1) {
		return this['isFilteredFlag'] || _0x9f6cx1 && this['isHiddenFlag']
	}
	, markFilteredNodes: function (_0x9f6cxc, _0x9f6cx5) {
		var _0x9f6cx9 = this;
		var _0x9f6cx4 = this['currentFilterGeneration'];
		var _0x9f6cx3 = {};
		var _0x9f6cxa = this['getRootNode']()
			, _0x9f6cxb = this['rootVisible'];
		var _0x9f6cxf = function (_0x9f6cx11) {
			var _0x9f6cx12 = _0x9f6cx11['parentNode'];
			while (_0x9f6cx12 && !_0x9f6cx3[_0x9f6cx12['internalId']]) {
				_0x9f6cx3[_0x9f6cx12['internalId']] = true;
				_0x9f6cx12 = _0x9f6cx12['parentNode']
			}
		};
		var _0x9f6cx1 = _0x9f6cx5['filter'];
		var _0x9f6cxd = _0x9f6cx5['scope'] || this;
		var _0x9f6cx13 = _0x9f6cx5['shallow'];
		var _0x9f6cxe = _0x9f6cx5['checkParents'] || _0x9f6cx13;
		var _0x9f6cx6 = _0x9f6cx5['fullMatchingParents'];
		var _0x9f6cx7 = _0x9f6cx5['onlyParents'] || _0x9f6cx6;
		var _0x9f6cx2 = !_0x9f6cx5['isOldFilter'];
		if (_0x9f6cx7 && _0x9f6cxe) {
			throw new Error('can\'t combine `onlyParents` and `checkParents` options')
		};
		if (_0x9f6cxb) {
			_0x9f6cx3[_0x9f6cxa['internalId']] = true
		};
		var _0x9f6cx8 = function (_0x9f6cx14) {
			if (_0x9f6cx14['hidden']) {
				return
			};
			var _0x9f6cx11, _0x9f6cx17, _0x9f6cx10, _0x9f6cx12;
			if (_0x9f6cx14['isLeaf']()) {
				if (_0x9f6cx1['call'](_0x9f6cxd, _0x9f6cx14, _0x9f6cx3)) {
					_0x9f6cx3[_0x9f6cx14['internalId']] = true;
					_0x9f6cxf(_0x9f6cx14)
				}
			}
			else {
				if (_0x9f6cx7) {
					_0x9f6cx11 = _0x9f6cx1['call'](_0x9f6cxd, _0x9f6cx14);
					_0x9f6cx17 = _0x9f6cx14['childNodes'];
					_0x9f6cx10 = _0x9f6cx17['length'];
					if (_0x9f6cx11) {
						_0x9f6cx3[_0x9f6cx14['internalId']] = true;
						_0x9f6cxf(_0x9f6cx14);
						if (_0x9f6cx6) {
							_0x9f6cx14['cascadeBy'](function (_0x9f6cx16) {
								_0x9f6cx3[_0x9f6cx16['internalId']] = true
							});
							return
						}
					};
					for (_0x9f6cx12 = 0; _0x9f6cx12 < _0x9f6cx10; _0x9f6cx12++) {
						if (_0x9f6cx11 && _0x9f6cx17[_0x9f6cx12]['isLeaf']()) {
							_0x9f6cx3[_0x9f6cx17[_0x9f6cx12]['internalId']] = true
						}
						else {
							if (!_0x9f6cx17[_0x9f6cx12]['isLeaf']()) {
								_0x9f6cx8(_0x9f6cx17[_0x9f6cx12])
							}
						}
					}
				}
				else {
					if (_0x9f6cxe) {
						_0x9f6cx11 = _0x9f6cx1['call'](_0x9f6cxd, _0x9f6cx14, _0x9f6cx3);
						if (_0x9f6cx11) {
							_0x9f6cx3[_0x9f6cx14['internalId']] = true;
							_0x9f6cxf(_0x9f6cx14)
						}
					};
					if (!_0x9f6cxe || !_0x9f6cx13 || _0x9f6cx13 && (_0x9f6cx11 || _0x9f6cx14 == _0x9f6cxa && !_0x9f6cxb)) {
						_0x9f6cx17 = _0x9f6cx14['childNodes'];
						_0x9f6cx10 = _0x9f6cx17['length'];
						for (_0x9f6cx12 = 0; _0x9f6cx12 < _0x9f6cx10; _0x9f6cx12++) {
							_0x9f6cx8(_0x9f6cx17[_0x9f6cx12])
						}
					}
				}
			}
		};
		_0x9f6cx8(_0x9f6cxc);
		_0x9f6cxa['cascadeBy'](function (_0x9f6cx12) {
			if (_0x9f6cx2) {
				_0x9f6cx12['addedWhileFiltered'] = false
			};
			if (_0x9f6cx3[_0x9f6cx12['internalId']]) {
				_0x9f6cx12['__filterGen'] = _0x9f6cx4;
				if (!_0x9f6cx9['keepExpandStateWhileFiltered'] && !_0x9f6cx12['isLeaf']()) {
					_0x9f6cx12['expand']()
				}
			}
		})
	}
	, filterTreeBy: function (_0x9f6cx5, _0x9f6cx2) {
		this['currentFilterGeneration'] = this['filterGeneration']++;
		var _0x9f6cx1;
		if (arguments['length'] == 1 && Ext['isObject'](arguments[0])) {
			_0x9f6cx2 = _0x9f6cx5['scope'];
			_0x9f6cx1 = _0x9f6cx5['filter']
		}
		else {
			_0x9f6cx1 = _0x9f6cx5;
			_0x9f6cx5 = {
				filter: _0x9f6cx1
				, scope: _0x9f6cx2
			}
		};
		this['fireEvent']('nodestore-datachange-start', this);
		_0x9f6cx5 = _0x9f6cx5 || {};
		this['markFilteredNodes'](this['getRootNode'](), _0x9f6cx5);
		_0x9f6cx5['isOldFilter'] = true;
		this['startDataChangeMonitoring']();
		this['isFilteredFlag'] = true;
		this['lastTreeFilter'] = _0x9f6cx5;
		this['fireEvent']('nodestore-datachange-end', this);
		this['fireEvent']('filter-set', this);
		this['refreshNodeStoreContent']()
	}
	, isNodeFilteredIn: function (_0x9f6cx5) {
		var _0x9f6cx2 = this['isTreeFiltered']();
		var _0x9f6cx1 = this['currentFilterGeneration'];
		return this['loading'] || (_0x9f6cx5['addedWhileFiltered'] && _0x9f6cx5['isVisible']()) || !Boolean(_0x9f6cx2 && _0x9f6cx5['__filterGen'] != _0x9f6cx1 || _0x9f6cx5['hidden'])
	}
	, hasNativeFilters: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getFilters']()
			, _0x9f6cx1 = _0x9f6cx2['getCount']();
		return (_0x9f6cx1 && _0x9f6cx1 > 1) || _0x9f6cx2['indexOf'](_0x9f6cx5['treeFilter']) < 0
	}
	, hideNodesBy: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx5 = this;
		if (_0x9f6cx5['isFiltered']() && _0x9f6cx5['hasNativeFilters']()) {
			throw new Error('can\'t hide nodes of a filtered tree store')
		};
		_0x9f6cx1 = _0x9f6cx1 || _0x9f6cx5;
		_0x9f6cx5['getRootNode']()['cascadeBy'](function (_0x9f6cx4) {
			_0x9f6cx4['hidden'] = Boolean(_0x9f6cx2['call'](_0x9f6cx1, _0x9f6cx4, _0x9f6cx5))
		});
		_0x9f6cx5['startDataChangeMonitoring']();
		_0x9f6cx5['isHiddenFlag'] = true;
		_0x9f6cx5['lastTreeHiding'] = [_0x9f6cx2, _0x9f6cx1];
		if (!_0x9f6cx3) {
			_0x9f6cx5['refreshNodeStoreContent']()
		}
	}
	, showAllNodes: function (_0x9f6cx1) {
		this['getRootNode']()['cascadeBy'](function (_0x9f6cx2) {
			_0x9f6cx2['hidden'] = false
		});
		this['isHiddenFlag'] = false;
		this['lastTreeHiding'] = null;
		if (!this['isTreeFiltered'](true)) {
			this['stopDataChangeMonitoring']()
		};
		if (!_0x9f6cx1) {
			this['refreshNodeStoreContent']()
		}
	}
	, inheritables: function () {
		return {
			onNodeExpand: function (_0x9f6cx1) {
				if (this['isTreeFiltered'](true) && _0x9f6cx1 == this['getRoot']()) {
					this['callParent'](arguments);
					this['reApplyFilter']()
				}
				else {
					return this['callParent'](arguments)
				}
			}
			, onNodeCollapse: function (_0x9f6cx6, _0x9f6cx2) {
				var _0x9f6cx4 = this;
				var _0x9f6cx3 = _0x9f6cx4['data'];
				var _0x9f6cx9 = _0x9f6cx3['contains'];
				var _0x9f6cx5 = _0x9f6cx4['isTreeFiltered']();
				var _0x9f6cx7 = _0x9f6cx4['currentFilterGeneration'];
				_0x9f6cx3['contains'] = function () {
					var _0x9f6cxb, _0x9f6cx13, _0x9f6cxd;
					var _0x9f6cxa = _0x9f6cx4['indexOf'](_0x9f6cx6) + 1;
					var _0x9f6cxe = false;
					for (var _0x9f6cxc = 0; _0x9f6cxc < _0x9f6cx2['length']; _0x9f6cxc++) {
						if (!(_0x9f6cx2[_0x9f6cxc]['hidden'] || _0x9f6cx5 && _0x9f6cx2[_0x9f6cxc]['__filterGen'] != _0x9f6cx7) && _0x9f6cx9['call'](this, _0x9f6cx2[_0x9f6cxc])) {
							_0x9f6cxb = _0x9f6cx6;
							while (_0x9f6cxb['parentNode']) {
								_0x9f6cx13 = _0x9f6cxb;
								do {
									_0x9f6cx13 = _0x9f6cx13['nextSibling']
								} while (_0x9f6cx13 && (_0x9f6cx13['hidden'] || _0x9f6cx5 && _0x9f6cx13['__filterGen'] != _0x9f6cx7));;
								if (_0x9f6cx13) {
									_0x9f6cxe = true;
									_0x9f6cxd = _0x9f6cx4['indexOf'](_0x9f6cx13);
									break
								}
								else {
									_0x9f6cxb = _0x9f6cxb['parentNode']
								}
							};
							if (!_0x9f6cxe) {
								_0x9f6cxd = _0x9f6cx4['getCount']()
							};
							_0x9f6cx4['removeAt'](_0x9f6cxa, _0x9f6cxd - _0x9f6cxa);
							break
						}
					};
					return false
				};
				this['callParent'](arguments);
				if (this['isTreeFiltered']()) {
					if (_0x9f6cx4['needsLocalFilter']()) {
						_0x9f6cx2 = Ext['Array']['filter'](_0x9f6cx2, _0x9f6cx4['filterVisible'])
					};
					if (!_0x9f6cx2['length'] && _0x9f6cx4['indexOf'](_0x9f6cx6) !== -1) {
						var _0x9f6cx8 = _0x9f6cx4['indexOf'](_0x9f6cx6) + 1;
						var _0x9f6cx1 = _0x9f6cx4['indexOfNextVisibleNode'](_0x9f6cx6);
						_0x9f6cx4['removeAt'](_0x9f6cx8, _0x9f6cx1 - _0x9f6cx8)
					}
				};
				_0x9f6cx3['contains'] = _0x9f6cx9
			}
			, handleNodeExpand: function (_0x9f6cx8, _0x9f6cx1, _0x9f6cxc) {
				var _0x9f6cx4 = this;
				var _0x9f6cx7 = [];
				var _0x9f6cx2 = _0x9f6cx4['isTreeFiltered']();
				var _0x9f6cx6 = _0x9f6cx4['currentFilterGeneration'];
				for (var _0x9f6cx5 = 0; _0x9f6cx5 < _0x9f6cx1['length']; _0x9f6cx5++) {
					var _0x9f6cx3 = _0x9f6cx1[_0x9f6cx5];
					if (!(_0x9f6cx2 && _0x9f6cx3['__filterGen'] != _0x9f6cx6 || _0x9f6cx3['hidden'])) {
						_0x9f6cx7[_0x9f6cx7['length']] = _0x9f6cx3
					}
				};
				return this['callParent']([_0x9f6cx8, _0x9f6cx7, _0x9f6cxc])
			}
			, onNodeInsert: function (_0x9f6cxd, _0x9f6cx1, _0x9f6cx8) {
				var _0x9f6cxa = this
					, _0x9f6cx9, _0x9f6cxf, _0x9f6cx13, _0x9f6cx2, _0x9f6cxb, _0x9f6cx7, _0x9f6cx5 = _0x9f6cx1['raw'] || _0x9f6cx1['data']
					, _0x9f6cx6 = _0x9f6cxa['removedNodes']
					, _0x9f6cxe, _0x9f6cx4, _0x9f6cx3, _0x9f6cxc = this['isTreeFiltered']();
				if (_0x9f6cxa['filterFn']) {
					_0x9f6cx4 = _0x9f6cxa['filterFn'](_0x9f6cx1);
					_0x9f6cx1['set']('visible', _0x9f6cx4);
					if (_0x9f6cx4) {
						_0x9f6cxd['set']('visible', _0x9f6cxa['filterFn'](_0x9f6cxd))
					}
				};
				if (!this['reApplyFilterOnDataChange'] && _0x9f6cxc) {
					_0x9f6cx1['addedWhileFiltered'] = true
				};
				_0x9f6cxa['registerNode'](_0x9f6cx1, true);
				_0x9f6cxa['beginUpdate']();
				if (_0x9f6cxa['isVisible'](_0x9f6cx1) || (_0x9f6cxc && _0x9f6cx1['addedWhileFiltered'])) {
					if (_0x9f6cx8 === 0 || !_0x9f6cx1['previousSibling']) {
						_0x9f6cx9 = _0x9f6cxd
					}
					else {
						for (_0x9f6cxf = _0x9f6cx1['previousSibling']; _0x9f6cxf && !_0x9f6cxf['addedWhileFiltered'] && !_0x9f6cxf['get']('visible'); _0x9f6cxf = _0x9f6cxf['previousSibling']) {};
						if (!_0x9f6cxf) {
							_0x9f6cx9 = _0x9f6cxd
						}
						else {
							while (_0x9f6cxf['isExpanded']() && _0x9f6cxf['lastChild']) {
								_0x9f6cxf = _0x9f6cxf['lastChild']
							};
							for (; _0x9f6cxf && !_0x9f6cxf['addedWhileFiltered'] && !_0x9f6cxf['get']('visible'); _0x9f6cxf = _0x9f6cxf['previousSibling']) {};
							_0x9f6cx9 = _0x9f6cxf
						}
					};
					_0x9f6cxa['insert'](_0x9f6cxa['indexOf'](_0x9f6cx9) + 1, _0x9f6cx1);
					if (!_0x9f6cx1['isLeaf']() && _0x9f6cx1['isExpanded']()) {
						if (_0x9f6cx1['isLoaded']()) {
							_0x9f6cxa['onNodeExpand'](_0x9f6cx1, _0x9f6cx1['childNodes'])
						}
						else {
							if (!_0x9f6cxa['fillCount']) {
								_0x9f6cx1['set']('expanded', false);
								_0x9f6cx1['expand']()
							}
						}
					}
				};
				Ext['Array']['remove'](_0x9f6cx6, _0x9f6cx1);
				_0x9f6cxa['needsSync'] = _0x9f6cxa['needsSync'] || _0x9f6cx1['phantom'] || _0x9f6cx1['dirty'];
				if (!_0x9f6cx1['isLeaf']() && !_0x9f6cx1['isLoaded']() && !_0x9f6cxa['lazyFill']) {
					_0x9f6cx13 = _0x9f6cxa['getProxy']()['getReader']();
					_0x9f6cx2 = _0x9f6cx1['getProxy']();
					_0x9f6cxb = _0x9f6cx2 ? _0x9f6cx2['getReader']() : null;
					_0x9f6cx7 = _0x9f6cxb && _0x9f6cxb['initialConfig']['rootProperty'] ? _0x9f6cxb : _0x9f6cx13;
					_0x9f6cxe = _0x9f6cx7['getRoot'](_0x9f6cx5);
					if (_0x9f6cxe) {
						_0x9f6cx3 = _0x9f6cx1['childType'];
						_0x9f6cxa['fillNode'](_0x9f6cx1, _0x9f6cx7['extractData'](_0x9f6cxe, _0x9f6cx3 ? {
							model: _0x9f6cx3
						} : undefined))
					}
				};
				_0x9f6cxa['endUpdate']()
			}
			, isFiltered: function () {
				return this['callParent'](arguments) || this['isTreeFiltered']()
			}
			, afterEdit: function (_0x9f6cx5, _0x9f6cx2) {
				var _0x9f6cx1 = this;
				if (Ext['getVersion']()['isGreaterThan']('6.0.2')) {
					if (_0x9f6cx1['needsLocalFilter']()) {
						_0x9f6cx1['doFilter'](_0x9f6cx5)
					};
					Ext['data']['Store']['prototype']['afterEdit']['apply'](_0x9f6cx1, [_0x9f6cx5, _0x9f6cx2])
				}
				else {
					return _0x9f6cx1['callParent']([_0x9f6cx5, _0x9f6cx2])
				}
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.data.util.IdConsistencyManager', {
	config: {
		eventStore: null
		, resourceStore: null
		, assignmentStore: null
		, dependencyStore: null
	}
	, eventStoreDetacher: null
	, resourceStoreDetacher: null
	, constructor: function (_0x9f6cx1) {
		this['initConfig'](_0x9f6cx1)
	}
	, updateEventStore: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		Ext['destroyMembers'](_0x9f6cx2, 'eventStoreDetacher');
		if (_0x9f6cx1) {
			_0x9f6cx2['eventStoreDetacher'] = _0x9f6cx1['on']({
				idchanged: _0x9f6cx2['onEventIdChanged']
				, scope: _0x9f6cx2
				, destroyable: true
				, priority: 200
			})
		}
	}
	, updateResourceStore: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = this;
		Ext['destroyMembers'](_0x9f6cx5, 'resourceStoreDetacher');
		if (_0x9f6cx1) {
			_0x9f6cx5['resourceStoreDetacher'] = _0x9f6cx1['on']({
				idchanged: _0x9f6cx5['onResourceIdChanged']
				, scope: _0x9f6cx5
				, destroyable: true
				, priority: 200
			})
		}
	}
	, onEventIdChanged: function (_0x9f6cx7, _0x9f6cx1, _0x9f6cx3, _0x9f6cx4) {
		var _0x9f6cx9 = this
			, _0x9f6cx6 = _0x9f6cx9['getAssignmentStore']()
			, _0x9f6cx5 = _0x9f6cx9['getDependencyStore']()
			, _0x9f6cx2, _0x9f6cx8;
		if (_0x9f6cx6) {
			_0x9f6cx2 = _0x9f6cx9['getUpdateAssignmentEventIdFieldFn'](_0x9f6cx6, _0x9f6cx3, _0x9f6cx4)
		};
		if (_0x9f6cx5) {
			_0x9f6cx8 = _0x9f6cx9['getUpdateDependencySourceTargedIdFieldFn'](_0x9f6cx5, _0x9f6cx3, _0x9f6cx4)
		};
		if (_0x9f6cx2 || _0x9f6cx8) {
			_0x9f6cx7['on']('update', function () {
				_0x9f6cx2 && _0x9f6cx2();
				_0x9f6cx8 && _0x9f6cx8()
			}, null, {
				single: true
				, priority: 200
			})
		}
	}
	, onResourceIdChanged: function (_0x9f6cx9, _0x9f6cx4, _0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx8 = this
			, _0x9f6cx7 = _0x9f6cx8['getEventStore']()
			, _0x9f6cx6 = _0x9f6cx8['getAssignmentStore']()
			, _0x9f6cx5, _0x9f6cx1;
		if (_0x9f6cx7 && !_0x9f6cx6) {
			_0x9f6cx5 = _0x9f6cx8['getUpdateEventResourceIdFieldFn'](_0x9f6cx7, _0x9f6cx2, _0x9f6cx3)
		};
		if (_0x9f6cx6) {
			_0x9f6cx1 = _0x9f6cx8['getUpdateAssignmentResourceIdFieldFn'](_0x9f6cx6, _0x9f6cx2, _0x9f6cx3)
		};
		if (_0x9f6cx5 || _0x9f6cx6) {
			_0x9f6cx9['on']('update', function () {
				_0x9f6cx5 && _0x9f6cx5();
				_0x9f6cx1 && _0x9f6cx1()
			}, null, {
				single: true
				, priority: 200
			})
		}
	}
	, getUpdateEventResourceIdFieldFn: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx5['getRange']();
		return function () {
			Ext['Array']['each'](_0x9f6cx2, function (_0x9f6cx4) {
				_0x9f6cx4['getResourceId']() == _0x9f6cx3 && _0x9f6cx4['setResourceId'](_0x9f6cx1)
			})
		}
	}
	, getUpdateAssignmentEventIdFieldFn: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx5['getAssignmentsForEvent'](_0x9f6cx3);
		return function () {
			Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cx4) {
				_0x9f6cx4['getEventId']() == _0x9f6cx3 && _0x9f6cx4['setEventId'](_0x9f6cx2)
			})
		}
	}
	, getUpdateAssignmentResourceIdFieldFn: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx5['getAssignmentsForResource'](_0x9f6cx3);
		return function () {
			Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cx4) {
				_0x9f6cx4['getResourceId']() == _0x9f6cx3 && _0x9f6cx4['setResourceId'](_0x9f6cx2)
			})
		}
	}
	, getUpdateDependencySourceTargedIdFieldFn: function (_0x9f6cx2, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx5 = _0x9f6cx2['getEventDependencies'](_0x9f6cx3);
		return function () {
			Ext['Array']['each'](_0x9f6cx5, function (_0x9f6cx4) {
				_0x9f6cx4['getSourceId']() == _0x9f6cx3 && _0x9f6cx4['setSourceId'](_0x9f6cx1);
				_0x9f6cx4['getTargetId']() == _0x9f6cx3 && _0x9f6cx4['setTargetId'](_0x9f6cx1)
			})
		}
	}
});
Ext.define('Ext.ux.Scheduler.data.util.ModelPersistencyManager', {
	config: {
		eventStore: null
		, resourceStore: null
		, assignmentStore: null
		, dependencyStore: null
	}
	, eventStoreDetacher: null
	, resourceStoreDetacher: null
	, assignmentStoreDetacher: null
	, dependencyStoreDetacher: null
	, constructor: function (_0x9f6cx1) {
		this['initConfig'](_0x9f6cx1)
	}
	, updateEventStore: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		Ext['destroyMembers'](_0x9f6cx2, 'eventStoreDetacher');
		if (_0x9f6cx1 && _0x9f6cx1['autoSync']) {
			_0x9f6cx2['eventStoreDetacher'] = _0x9f6cx1['on']({
				beforesync: _0x9f6cx2['onEventStoreBeforeSync']
				, scope: _0x9f6cx2
				, destroyable: true
				, priority: 100
			})
		}
	}
	, updateResourceStore: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = this;
		Ext['destroyMembers'](_0x9f6cx5, 'resourceStoreDetacher');
		if (_0x9f6cx1 && _0x9f6cx1['autoSync']) {
			_0x9f6cx5['resourceStoreDetacher'] = _0x9f6cx1['on']({
				beforesync: _0x9f6cx5['onResourceStoreBeforeSync']
				, scope: _0x9f6cx5
				, destroyable: true
				, priority: 100
			})
		}
	}
	, updateAssignmentStore: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = this;
		Ext['destroyMembers'](_0x9f6cx5, 'assignmentStoreDetacher');
		if (_0x9f6cx1 && _0x9f6cx1['autoSync']) {
			_0x9f6cx5['assignmentStoreDetacher'] = _0x9f6cx1['on']({
				beforesync: _0x9f6cx5['onAssignmentStoreBeforeSync']
				, scope: _0x9f6cx5
				, destroyable: true
				, priority: 100
			})
		}
	}
	, updateDependencyStore: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = this;
		Ext['destroyMembers'](_0x9f6cx2, 'dependencyStoreDetacher');
		if (_0x9f6cx5 && _0x9f6cx5['autoSync']) {
			_0x9f6cx2['dependencyStoreDetacher'] = _0x9f6cx5['on']({
				beforesync: _0x9f6cx2['onDependencyStoreBeforeSync']
				, scope: _0x9f6cx2
				, destroyable: true
				, priority: 100
			})
		}
	}
	, onEventStoreBeforeSync: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['removeNonPersistableRecordsToCreate'](_0x9f6cx1);
		return _0x9f6cx2['shallContinueSync'](_0x9f6cx1)
	}
	, onResourceStoreBeforeSync: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['removeNonPersistableRecordsToCreate'](_0x9f6cx1);
		return _0x9f6cx2['shallContinueSync'](_0x9f6cx1)
	}
	, onAssignmentStoreBeforeSync: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['removeNonPersistableRecordsToCreate'](_0x9f6cx1);
		return _0x9f6cx2['shallContinueSync'](_0x9f6cx1)
	}
	, onDependencyStoreBeforeSync: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['removeNonPersistableRecordsToCreate'](_0x9f6cx1);
		return _0x9f6cx2['shallContinueSync'](_0x9f6cx1)
	}
	, removeNonPersistableRecordsToCreate: function (_0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx2['create'] || []
			, _0x9f6cx3, _0x9f6cx5;
		for (_0x9f6cx5 = _0x9f6cx1['length'] - 1; _0x9f6cx5 >= 0; --_0x9f6cx5) {
			_0x9f6cx3 = _0x9f6cx1[_0x9f6cx5];
			if (!_0x9f6cx3['isPersistable']()) {
				Ext['Array']['remove'](_0x9f6cx1, _0x9f6cx3)
			}
		};
		if (_0x9f6cx1['length'] === 0) {
			delete _0x9f6cx2['create']
		}
	}
	, shallContinueSync: function (_0x9f6cx1) {
		return Boolean((_0x9f6cx1['create'] && _0x9f6cx1['create']['length'] > 0) || (_0x9f6cx1['update'] && _0x9f6cx1['update']['length'] > 0) || (_0x9f6cx1['destroy'] && _0x9f6cx1['destroy']['length'] > 0))
	}
});
Ext.define('Ext.ux.Scheduler.data.util.ResourceEventsCache', {
	extend: 'Ext.ux.Scheduler.util.Cache'
	, requires: ['Ext.data.Model']
	, eventStore: null
	, eventStoreDetacher: null
	, resourceStoreDetacher: null
	, constructor: function (_0x9f6cx5) {
		var _0x9f6cx9 = this
			, _0x9f6cxc = _0x9f6cx5['getResourceStore']();
		_0x9f6cx9['callParent']();

		function _0x9f6cx13(_0x9f6cxe, _0x9f6cxb) {
			Ext['Array']['each'](_0x9f6cxb, function (_0x9f6cxd) {
				_0x9f6cx9['add'](_0x9f6cxd['getResourceId'](), _0x9f6cxd)
			})
		}

		function _0x9f6cx4(_0x9f6cxe, _0x9f6cxb) {
			Ext['Array']['each'](_0x9f6cxb, function (_0x9f6cxd) {
				_0x9f6cx9['remove'](_0x9f6cxd['getResourceId'](), _0x9f6cxd)
			})
		}

		function _0x9f6cx3(_0x9f6cxd, _0x9f6cx11, _0x9f6cxe, _0x9f6cx12) {
			var _0x9f6cx10 = _0x9f6cx11['resourceIdField']
				, _0x9f6cxf = _0x9f6cx11['previous'] && _0x9f6cx10 in _0x9f6cx11['previous']
				, _0x9f6cxb = _0x9f6cxf && _0x9f6cx11['previous'][_0x9f6cx10];
			if (_0x9f6cxf) {
				_0x9f6cx9['move'](_0x9f6cxb, _0x9f6cx11['getResourceId'](), _0x9f6cx11)
			}
		}

		function _0x9f6cx6() {
			_0x9f6cx9['clear']()
		}

		function _0x9f6cxa(_0x9f6cxe, _0x9f6cxb, _0x9f6cxd) {
			_0x9f6cx9['clear']();
			_0x9f6cx1(_0x9f6cxb)
		}

		function _0x9f6cx8(_0x9f6cxe, _0x9f6cxd, _0x9f6cxf, _0x9f6cxb) {
			_0x9f6cx9['move'](_0x9f6cxf, _0x9f6cxb)
		}

		function _0x9f6cx7(_0x9f6cxb, _0x9f6cxe) {
			Ext['Array']['each'](_0x9f6cxe, function (_0x9f6cxd) {
				_0x9f6cx9['clear'](_0x9f6cxd)
			})
		}

		function _0x9f6cx2() {
			_0x9f6cx9['clear']()
		}

		function _0x9f6cx1(_0x9f6cxb) {
			Ext['destroy'](_0x9f6cx9['resourceStoreDetacher']);
			_0x9f6cx9['resourceStoreDetacher'] = _0x9f6cxb && _0x9f6cxb['on']({
				idchanged: _0x9f6cx8
				, remove: _0x9f6cx7
				, clear: _0x9f6cx2
				, cacheresethint: _0x9f6cx2
				, rootchange: _0x9f6cx2
				, priority: 100
				, destroyable: true
			})
		}
		_0x9f6cx9['eventStoreDetacher'] = _0x9f6cx5['on']({
			add: _0x9f6cx13
			, remove: _0x9f6cx4
			, update: _0x9f6cx3
			, clear: _0x9f6cx6
			, cacheresethint: _0x9f6cx6
			, rootchange: _0x9f6cx6
			, resourcestorechange: _0x9f6cxa
			, priority: 100
			, destroyable: true
		});
		_0x9f6cx9['eventStoreFiltersDetacher'] = _0x9f6cx5['getFilters']()['on']('endupdate', _0x9f6cx6, this, {
			priority: 1002
			, destroyable: true
		});
		_0x9f6cx1(_0x9f6cxc);
		_0x9f6cx9['eventStore'] = _0x9f6cx5
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		Ext['destroyMembers'](_0x9f6cx1, 'eventStoreDetacher', 'eventStoreFiltersDetacher', 'resourceStoreDetacher');
		_0x9f6cx1['eventStore'] = null
	}
	, get: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = this;
		_0x9f6cx1 = _0x9f6cx5['key'](_0x9f6cx1);
		_0x9f6cx2 = _0x9f6cx2 || function () {
			return Ext['Array']['filter'](_0x9f6cx5['eventStore']['getRange'](), function (_0x9f6cx3) {
				return _0x9f6cx3['getResourceId']() == _0x9f6cx1
			})
		};
		return _0x9f6cx5['callParent']([_0x9f6cx1, _0x9f6cx2])
	}
});
Ext.define('Ext.ux.Scheduler.data.mixin.EventStore', {
	extend: 'Ext.Mixin'
	, requires: ['Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.data.util.IdConsistencyManager', 'Ext.ux.Scheduler.data.util.ModelPersistencyManager', 'Ext.ux.Scheduler.data.util.ResourceEventsCache']
	, isEventStore: true
	, resourceStore: null
	, resourceStoreDetacher: null
	, assignmentStore: null
	, resourceEventsCache: null
	, idConsistencyManager: null
	, modelPersistencyManager: null
	, mixinConfig: {
		after: {
			constructor: 'constructor'
			, destroy: 'destroy'
		}
	}
	, constructor: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['resourceEventsCache'] = _0x9f6cx1['createResourceEventsCache']();
		_0x9f6cx1['idConsistencyManager'] = _0x9f6cx1['createIdConsistencyManager']();
		_0x9f6cx1['modelPersistencyManager'] = _0x9f6cx1['createModelPersistencyManager']()
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		Ext['destroyMembers'](_0x9f6cx1, 'resourceEventsCache', 'idConsistencyManager', 'modelPersistencyManager')
	}
	, createResourceEventsCache: function () {
		return new Ext.ux.Scheduler['data']['util'].ResourceEventsCache(this)
	}
	, createIdConsistencyManager: function () {
		var _0x9f6cx1 = this;
		return new Ext.ux.Scheduler['data']['util'].IdConsistencyManager({
			eventStore: _0x9f6cx1
			, resourceStore: _0x9f6cx1['getResourceStore']()
			, assignmentStore: _0x9f6cx1['getAssignmentStore']()
			, dependencyStore: _0x9f6cx1['getDependencyStore']()
		})
	}
	, createModelPersistencyManager: function () {
		var _0x9f6cx1 = this;
		return new Ext.ux.Scheduler['data']['util'].ModelPersistencyManager({
			eventStore: _0x9f6cx1
			, resourceStore: _0x9f6cx1['getResourceStore']()
			, assignmentStore: _0x9f6cx1['getAssignmentStore']()
			, dependencyStore: _0x9f6cx1['getDependencyStore']()
		})
	}
	, getResourceStore: function () {
		return this['resourceStore']
	}
	, setResourceStore: function (_0x9f6cx2) {
		var _0x9f6cx1 = this
			, _0x9f6cx5 = _0x9f6cx1['resourceStore'];
		if (_0x9f6cx1['resourceStore']) {
			_0x9f6cx1['resourceStore']['setEventStore'](null);
			_0x9f6cx1['idConsistencyManager'] && _0x9f6cx1['idConsistencyManager']['setResourceStore'](null);
			_0x9f6cx1['modelPersistencyManager'] && _0x9f6cx1['modelPersistencyManager']['setResourceStore'](null)
		};
		_0x9f6cx1['resourceStore'] = _0x9f6cx2 && Ext['StoreMgr']['lookup'](_0x9f6cx2) || null;
		if (_0x9f6cx1['resourceStore']) {
			_0x9f6cx1['modelPersistencyManager'] && _0x9f6cx1['modelPersistencyManager']['setResourceStore'](_0x9f6cx1['resourceStore']);
			_0x9f6cx1['idConsistencyManager'] && _0x9f6cx1['idConsistencyManager']['setResourceStore'](_0x9f6cx1['resourceStore']);
			_0x9f6cx2['setEventStore'](_0x9f6cx1)
		};
		if ((_0x9f6cx5 || _0x9f6cx2) && _0x9f6cx5 !== _0x9f6cx2) {
			_0x9f6cx1['fireEvent']('resourcestorechange', _0x9f6cx1, _0x9f6cx2, _0x9f6cx5)
		}
	}
	, getAssignmentStore: function () {
		return this['assignmentStore']
	}
	, setAssignmentStore: function (_0x9f6cx2) {
		var _0x9f6cx1 = this
			, _0x9f6cx5 = _0x9f6cx1['assignmentStore'];
		if (_0x9f6cx1['assignmentStore']) {
			_0x9f6cx1['assignmentStore']['setEventStore'](null);
			_0x9f6cx1['idConsistencyManager'] && _0x9f6cx1['idConsistencyManager']['setAssignmentStore'](null);
			_0x9f6cx1['modelPersistencyManager'] && _0x9f6cx1['modelPersistencyManager']['setAssignmentStore'](null)
		};
		_0x9f6cx1['assignmentStore'] = _0x9f6cx2 && Ext['StoreMgr']['lookup'](_0x9f6cx2) || null;
		if (_0x9f6cx1['assignmentStore']) {
			_0x9f6cx1['modelPersistencyManager'] && _0x9f6cx1['modelPersistencyManager']['setAssignmentStore'](_0x9f6cx1['assignmentStore']);
			_0x9f6cx1['idConsistencyManager'] && _0x9f6cx1['idConsistencyManager']['setAssignmentStore'](_0x9f6cx1['assignmentStore']);
			_0x9f6cx1['assignmentStore']['setEventStore'](_0x9f6cx1);
			Ext['destroy'](_0x9f6cx1['resourceEventsCache'])
		}
		else {
			_0x9f6cx1['resourceEventsCache'] = _0x9f6cx1['createResourceEventsCache']()
		};
		if ((_0x9f6cx5 || _0x9f6cx2) && _0x9f6cx5 !== _0x9f6cx2) {
			_0x9f6cx1['fireEvent']('assignmentstorechange', _0x9f6cx1, _0x9f6cx2, _0x9f6cx5)
		}
	}
	, getDependencyStore: function () {
		return this['dependencyStore']
	}
	, setDependencyStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = this
			, _0x9f6cx5 = _0x9f6cx2['DependencyStore'];
		if (_0x9f6cx2['dependencyStore']) {
			_0x9f6cx2['dependencyStore']['setEventStore'](null);
			_0x9f6cx2['idConsistencyManager'] && _0x9f6cx2['idConsistencyManager']['setDependencyStore'](null);
			_0x9f6cx2['modelPersistencyManager'] && _0x9f6cx2['modelPersistencyManager']['setDependencyStore'](null)
		};
		_0x9f6cx2['dependencyStore'] = _0x9f6cx1 && Ext['StoreMgr']['lookup'](_0x9f6cx1) || null;
		if (_0x9f6cx2['dependencyStore']) {
			_0x9f6cx2['modelPersistencyManager'] && _0x9f6cx2['modelPersistencyManager']['setDependencyStore'](_0x9f6cx2['dependencyStore']);
			_0x9f6cx2['idConsistencyManager'] && _0x9f6cx2['idConsistencyManager']['setDependencyStore'](_0x9f6cx2['dependencyStore']);
			_0x9f6cx2['dependencyStore']['setEventStore'](_0x9f6cx2)
		};
		if ((_0x9f6cx5 || _0x9f6cx1) && _0x9f6cx5 !== _0x9f6cx1) {
			_0x9f6cx2['fireEvent']('dependencystorechange', _0x9f6cx2, _0x9f6cx1, _0x9f6cx5)
		}
	}
	, isDateRangeAvailable: function (_0x9f6cx6, _0x9f6cx1, _0x9f6cx5, _0x9f6cx4) {
		var _0x9f6cx7 = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cx2 = this['getEventsForResource'](_0x9f6cx4)
			, _0x9f6cx3 = true;
		Ext['each'](_0x9f6cx2, function (_0x9f6cx8) {
			_0x9f6cx3 = _0x9f6cx5 === _0x9f6cx8 || !_0x9f6cx7['intersectSpans'](_0x9f6cx6, _0x9f6cx1, _0x9f6cx8['getStartDate'](), _0x9f6cx8['getEndDate']());
			return _0x9f6cx3
		});
		return _0x9f6cx3
	}
	, getEventsInTimeSpan: function (_0x9f6cx7, _0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx3 = new Ext['util'].MixedCollection();
		var _0x9f6cx5 = [];
		if (_0x9f6cx1 !== false) {
			var _0x9f6cx4 = Ext.ux.Scheduler['util']['Date'];
			this['forEachScheduledEvent'](function (_0x9f6cx9, _0x9f6cx8, _0x9f6cx6) {
				if (_0x9f6cx4['intersectSpans'](_0x9f6cx8, _0x9f6cx6, _0x9f6cx7, _0x9f6cx2)) {
					_0x9f6cx5['push'](_0x9f6cx9)
				}
			})
		}
		else {
			this['forEachScheduledEvent'](function (_0x9f6cx9, _0x9f6cx8, _0x9f6cx6) {
				if (_0x9f6cx8 - _0x9f6cx7 >= 0 && _0x9f6cx2 - _0x9f6cx6 >= 0) {
					_0x9f6cx5['push'](_0x9f6cx9)
				}
			})
		};
		_0x9f6cx3['addAll'](_0x9f6cx5);
		return _0x9f6cx3
	}
	, getEventsByStartDate: function (_0x9f6cx5) {
		var _0x9f6cx2 = Ext.ux.Scheduler['util']['Date'];
		var _0x9f6cx1 = [];
		this['forEachScheduledEvent'](function (_0x9f6cx7, _0x9f6cx4, _0x9f6cx3) {
			if (_0x9f6cx2['compareWithPrecision'](_0x9f6cx4, _0x9f6cx5, _0x9f6cx2.DAY) === 0) {
				_0x9f6cx1['push'](_0x9f6cx7)
			}
		});
		return _0x9f6cx1
	}
	, forEachScheduledEvent: function (_0x9f6cx2, _0x9f6cx1) {
		this['each'](function (_0x9f6cx4) {
			var _0x9f6cx3 = _0x9f6cx4['getStartDate']()
				, _0x9f6cx5 = _0x9f6cx4['getEndDate']();
			if (_0x9f6cx3 && _0x9f6cx5) {
				return _0x9f6cx2['call'](_0x9f6cx1 || this, _0x9f6cx4, _0x9f6cx3, _0x9f6cx5)
			}
		}, this)
	}
	, getTotalTimeSpan: function () {
		var _0x9f6cx1 = Ext.ux.Scheduler['util']['Date']['MAX_VALUE']
			, _0x9f6cx2 = Ext.ux.Scheduler['util']['Date']['MIN_VALUE']
			, _0x9f6cx5 = Ext.ux.Scheduler['util']['Date'];
		this['each'](function (_0x9f6cx3) {
			if (_0x9f6cx3['getStartDate']()) {
				_0x9f6cx1 = _0x9f6cx5['min'](_0x9f6cx3['getStartDate'](), _0x9f6cx1)
			};
			if (_0x9f6cx3['getEndDate']()) {
				_0x9f6cx2 = _0x9f6cx5['max'](_0x9f6cx3['getEndDate'](), _0x9f6cx2)
			}
		});
		_0x9f6cx1 = _0x9f6cx1 < Ext.ux.Scheduler['util']['Date']['MAX_VALUE'] ? _0x9f6cx1 : null;
		_0x9f6cx2 = _0x9f6cx2 > Ext.ux.Scheduler['util']['Date']['MIN_VALUE'] ? _0x9f6cx2 : null;
		this['lastTotalTimeSpan'] = {
			start: _0x9f6cx1 || null
			, end: _0x9f6cx2 || _0x9f6cx1 || null
		};
		return this['lastTotalTimeSpan']
	}
	, filterEventsForResource: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx3['getEvents'](this);
		return Ext['Array']['filter'](_0x9f6cx1, _0x9f6cx5, _0x9f6cx2 || this)
	}
	, append: function (_0x9f6cx1) {
		throw 'Must be implemented by consuming class'
	}
	, getResourcesForEvent: function (_0x9f6cx3) {
		var _0x9f6cx5 = this
			, _0x9f6cx4 = _0x9f6cx5['getAssignmentStore']()
			, _0x9f6cx2 = _0x9f6cx5['getResourceStore']()
			, _0x9f6cx1;
		if (_0x9f6cx4) {
			_0x9f6cx1 = _0x9f6cx4['getResourcesForEvent'](_0x9f6cx3)
		}
		else {
			if (_0x9f6cx2) {
				_0x9f6cx3 = _0x9f6cx3 instanceof Ext.ux.Scheduler['model']['Event'] && _0x9f6cx3 || _0x9f6cx5['getModelById'](_0x9f6cx3);
				_0x9f6cx1 = _0x9f6cx3 && _0x9f6cx2['getModelById'](_0x9f6cx3['getResourceId']());
				_0x9f6cx1 = _0x9f6cx1 && [_0x9f6cx1] || []
			}
			else {
				_0x9f6cx1 = []
			}
		};
		return _0x9f6cx1
	}
	, getEventsForResource: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx3 = _0x9f6cx2['getAssignmentStore']()
			, _0x9f6cx1;
		if (_0x9f6cx3) {
			_0x9f6cx1 = _0x9f6cx3['getEventsForResource'](_0x9f6cx5)
		}
		else {
			if (_0x9f6cx2['resourceEventsCache']) {
				_0x9f6cx1 = _0x9f6cx2['resourceEventsCache']['get'](_0x9f6cx5)
			}
			else {
				_0x9f6cx1 = []
			}
		};
		return _0x9f6cx1
	}
	, getAssignmentsForEvent: function (_0x9f6cx2) {
		var _0x9f6cx1 = this
			, _0x9f6cx5 = _0x9f6cx1['getAssignmentStore']();
		return _0x9f6cx5 && _0x9f6cx5['getAssignmentsForEvent'](_0x9f6cx2) || []
	}
	, getAssignmentsForResource: function (_0x9f6cx2) {
		var _0x9f6cx1 = this
			, _0x9f6cx5 = _0x9f6cx1['getAssignmentStore']();
		return _0x9f6cx5 && _0x9f6cx5['getAssignmentsForResource'](_0x9f6cx2) || []
	}
	, assignEventToResource: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = this
			, _0x9f6cx3 = _0x9f6cx1['getAssignmentStore']();
		if (_0x9f6cx3) {
			_0x9f6cx3['assignEventToResource'](_0x9f6cx2, _0x9f6cx5)
		}
		else {
			_0x9f6cx2 = _0x9f6cx2 instanceof Ext.ux.Scheduler['model']['Event'] && _0x9f6cx2 || _0x9f6cx1['getModelById'](_0x9f6cx2);
			_0x9f6cx5 = _0x9f6cx5 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0x9f6cx5['getId']() : _0x9f6cx5;
			_0x9f6cx2 && _0x9f6cx2['setResourceId'](_0x9f6cx5)
		}
	}
	, unassignEventFromResource: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = this
			, _0x9f6cx3 = _0x9f6cx1['getAssignmentStore']();
		if (_0x9f6cx3) {
			_0x9f6cx3['unassignEventFromResource'](_0x9f6cx2, _0x9f6cx5)
		}
		else {
			_0x9f6cx2 = _0x9f6cx2 instanceof Ext.ux.Scheduler['model']['Event'] && _0x9f6cx2 || _0x9f6cx1['getModelById'](_0x9f6cx2);
			_0x9f6cx5 = _0x9f6cx5 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0x9f6cx5['getId']() : _0x9f6cx5;
			if (_0x9f6cx2 && _0x9f6cx2['getResourceId']() == _0x9f6cx5) {
				_0x9f6cx2['setResourceId'](null)
			}
		}
	}
	, reassignEventFromResourceToResource: function (_0x9f6cx7, _0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx4 = this
			, _0x9f6cx6 = _0x9f6cx4['getAssignmentStore']();
		var _0x9f6cx3 = _0x9f6cx5 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0x9f6cx5['getId']() : _0x9f6cx5;
		var _0x9f6cx1 = _0x9f6cx2 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0x9f6cx2['getId']() : _0x9f6cx2;
		if (_0x9f6cx6) {
			var _0x9f6cx8 = _0x9f6cx6['getAssignmentForEventAndResource'](_0x9f6cx7, _0x9f6cx2);
			if (_0x9f6cx8) {
				_0x9f6cx8['setResourceId'](_0x9f6cx3)
			}
			else {
				_0x9f6cx6['assignEventToResource'](_0x9f6cx7, _0x9f6cx5)
			}
		}
		else {
			_0x9f6cx7 = _0x9f6cx7 instanceof Ext.ux.Scheduler['model']['Event'] && _0x9f6cx7 || _0x9f6cx4['getModelById'](_0x9f6cx7);
			if (_0x9f6cx7['getResourceId']() == _0x9f6cx1) {
				_0x9f6cx7['setResourceId'](_0x9f6cx3)
			}
		}
	}
	, isEventAssignedToResource: function (_0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx2 = this
			, _0x9f6cx4 = _0x9f6cx2['getAssignmentStore']()
			, _0x9f6cx1;
		if (_0x9f6cx4) {
			_0x9f6cx1 = _0x9f6cx4['isEventAssignedToResource'](_0x9f6cx5, _0x9f6cx3)
		}
		else {
			_0x9f6cx5 = _0x9f6cx5 instanceof Ext.ux.Scheduler['model']['Event'] && _0x9f6cx5 || _0x9f6cx2['getModelById'](_0x9f6cx5);
			_0x9f6cx3 = _0x9f6cx3 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0x9f6cx3['getId']() : _0x9f6cx3;
			_0x9f6cx1 = _0x9f6cx5 && (_0x9f6cx5['getResourceId']() == _0x9f6cx3) || false
		};
		return _0x9f6cx1
	}
	, removeAssignmentsForEvent: function (_0x9f6cx2) {
		var _0x9f6cx1 = this
			, _0x9f6cx5 = _0x9f6cx1['getAssignmentStore']();
		if (_0x9f6cx5) {
			_0x9f6cx5['removeAssignmentsForEvent'](_0x9f6cx2)
		}
		else {
			_0x9f6cx2 = _0x9f6cx2 instanceof Ext.ux.Scheduler['model']['Event'] && _0x9f6cx2 || _0x9f6cx1['getModelById'](_0x9f6cx2);
			_0x9f6cx2 && _0x9f6cx2['setResourceId'](null)
		}
	}
	, removeAssignmentsForResource: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx3 = _0x9f6cx2['getAssignmentStore']()
			, _0x9f6cx1 = _0x9f6cx2['getResourceStore']();
		if (_0x9f6cx3) {
			_0x9f6cx3['removeAssignmentsForResource'](_0x9f6cx5)
		}
		else {
			if (_0x9f6cx1) {
				_0x9f6cx5 = _0x9f6cx5 instanceof Ext.ux.Scheduler['model']['Resource'] && _0x9f6cx5 || _0x9f6cx1['getModelById'](_0x9f6cx5);
				_0x9f6cx5 && Ext['Array']['each'](_0x9f6cx2['resourceEventsCache']['get'](_0x9f6cx5), function (_0x9f6cx4) {
					_0x9f6cx4['setResourceId'](null)
				})
			}
			else {
				_0x9f6cx5 = _0x9f6cx5 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0x9f6cx5['getId']() : _0x9f6cx5;
				Ext['Array']['each'](_0x9f6cx2['getRange'](), function (_0x9f6cx4) {
					_0x9f6cx4['getResourceId']() == _0x9f6cx5 && _0x9f6cx4['setResourceId'](null)
				})
			}
		}
	}
	, isEventPersistable: function (_0x9f6cx4) {
		var _0x9f6cx3 = this
			, _0x9f6cx6 = _0x9f6cx3['getAssignmentStore']()
			, _0x9f6cx7, _0x9f6cx5, _0x9f6cx2, _0x9f6cx1 = true;
		if (!_0x9f6cx6) {
			_0x9f6cx7 = _0x9f6cx4['getResources']();
			for (_0x9f6cx5 = 0, _0x9f6cx2 = _0x9f6cx7['length']; _0x9f6cx1 && _0x9f6cx5 < _0x9f6cx2; ++_0x9f6cx5) {
				_0x9f6cx1 = _0x9f6cx7[_0x9f6cx5]['phantom'] !== true
			}
		};
		return _0x9f6cx1
	}
});
Ext.define('Ext.ux.Gantt.data.undoredo.mixin.TaskStoreHint', {
	extend: 'Robo.data.Store'
	, segmentsStateByTaskId: null
	, onSegmentEditBegin: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		this['segmentsStateByTaskId'] = this['segmentsStateByTaskId'] || {};
		if (!this['segmentsStateByTaskId']['hasOwnProperty'](_0x9f6cx1['internalId'])) {
			this['segmentsStateByTaskId'][_0x9f6cx1['internalId']] = _0x9f6cx1['buildSegmentsSnapshot']()
		}
	}
	, onSegmentEditEnd: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		if (!_0x9f6cx2['isInUndoRedoTransaction']()) {
			delete this['segmentsStateByTaskId'][_0x9f6cx1['internalId']]
		}
	}
	, onUndoRedoTransactionEnd: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		this['segmentsStateByTaskId'] = null;
		_0x9f6cx2['callParent']([_0x9f6cx1, _0x9f6cx5])
	}
	, getOriginalSegmentsState: function (_0x9f6cx1) {
		var _0x9f6cx5 = this['segmentsStateByTaskId'] && this['segmentsStateByTaskId'][_0x9f6cx1['internalId']];
		if (!_0x9f6cx5) {
			var _0x9f6cx2 = (_0x9f6cx1['previous'] || _0x9f6cx1['previousValues'])[_0x9f6cx1['segmentsField']];
			if (_0x9f6cx2) {
				_0x9f6cx5 = _0x9f6cx1['buildSegmentsSnapshot'](_0x9f6cx2)
			}
		};
		return _0x9f6cx5
	}
});
Ext.define('Ext.ux.Gantt.data.mixin.ProjectableStore', function () {
	function _0x9f6cx2(_0x9f6cx9, _0x9f6cxc) {
		return _0x9f6cx9['byInternalIdMap'] && _0x9f6cx9['byInternalIdMap'][_0x9f6cxc] || _0x9f6cx9['getByInternalId'](_0x9f6cxc)
	}

	function _0x9f6cx4() {
		var _0x9f6cxc = this
			, _0x9f6cx9 = _0x9f6cxc['projectionStack'];
		return _0x9f6cx9 && _0x9f6cx9[_0x9f6cx9['length'] - 1]
	}

	function _0x9f6cx3() {
		var _0x9f6cxc = this
			, _0x9f6cx9 = _0x9f6cxc['projectionStack'];
		return _0x9f6cx9 && _0x9f6cx9['length'] || 0
	}

	function _0x9f6cx5() {
		return this['getProjectionLevel']() > 0
	}

	function _0x9f6cx8(_0x9f6cx13) {
		var _0x9f6cxb, _0x9f6cxc, _0x9f6cxa;
		_0x9f6cx13 = []['concat'](_0x9f6cx13);
		for (_0x9f6cxa = false, _0x9f6cxb = 0, _0x9f6cxc = _0x9f6cx13['length']; !_0x9f6cxa && _0x9f6cxb < _0x9f6cxc; _0x9f6cxb++) {
			_0x9f6cxa = _0x9f6cx13[_0x9f6cxb]['isProjected']()
		};
		return _0x9f6cxa
	}

	function _0x9f6cx1() {
		var _0x9f6cxa = this
			, _0x9f6cxc = _0x9f6cxa['projectionStack']
			, _0x9f6cx13, _0x9f6cx9;
		if (!_0x9f6cxc) {
			_0x9f6cxa['projectionStack'] = [{}]
		}
		else {
			_0x9f6cx9 = _0x9f6cxc[_0x9f6cxc['length'] - 1];
			_0x9f6cx13 = {};
			Ext['Object']['each'](_0x9f6cx9, function (_0x9f6cxd, _0x9f6cxe) {
				var _0x9f6cxb = function () {};
				_0x9f6cxb['prototype'] = _0x9f6cxe;
				_0x9f6cx13[_0x9f6cxd] = new _0x9f6cxb()
			});
			_0x9f6cxc['push'](_0x9f6cx13)
		};
		_0x9f6cxa['fireEvent']('projectionstart', _0x9f6cxa, _0x9f6cxa['getProjectionLevel']())
	}

	function _0x9f6cx7() {
		var _0x9f6cx12 = this
			, _0x9f6cxc = _0x9f6cx12['projectionStack']
			, _0x9f6cxe, _0x9f6cxb, _0x9f6cx9, _0x9f6cxa, _0x9f6cxd, _0x9f6cxf, _0x9f6cx13;
		if (_0x9f6cxc['length'] === 1) {
			_0x9f6cxb = _0x9f6cxc[0];
			_0x9f6cx12['projectionStack'] = null;
			for (_0x9f6cxf in _0x9f6cxb) {
				if (_0x9f6cxb['hasOwnProperty'](_0x9f6cxf)) {
					_0x9f6cx13 = _0x9f6cx2(_0x9f6cx12, _0x9f6cxf);
					if (_0x9f6cx13) {
						_0x9f6cxa = _0x9f6cxb[_0x9f6cxf];
						_0x9f6cxd = false;
						for (_0x9f6cx9 in _0x9f6cxa) {
							if (_0x9f6cxa['hasOwnProperty'](_0x9f6cx9)) {
								_0x9f6cxd = true;
								break
							}
						};
						_0x9f6cxd && _0x9f6cx13['set'](_0x9f6cxa)
					}
				}
			}
		}
		else {
			_0x9f6cxb = _0x9f6cxc['pop']();
			_0x9f6cxe = _0x9f6cxc[_0x9f6cxc['length'] - 1];
			for (_0x9f6cxf in _0x9f6cxb) {
				if (_0x9f6cxb['hasOwnProperty'](_0x9f6cxf)) {
					if (!_0x9f6cxe['hasOwnProperty'](_0x9f6cxf)) {
						_0x9f6cxe[_0x9f6cxf] = _0x9f6cxb[_0x9f6cxf]
					}
					else {
						_0x9f6cxe[_0x9f6cxf] = Ext['apply'](_0x9f6cxe[_0x9f6cxf], _0x9f6cxb[_0x9f6cxf])
					}
				}
			}
		};
		_0x9f6cx12['fireEvent']('projectioncommit', _0x9f6cx12, _0x9f6cxc && _0x9f6cxc[_0x9f6cxc['length'] - 1], _0x9f6cxb, _0x9f6cx12['getProjectionLevel']())
	}

	function _0x9f6cx6() {
		var _0x9f6cxa = this
			, _0x9f6cxc = _0x9f6cxa['projectionStack']
			, _0x9f6cx9 = _0x9f6cxc['pop']();
		if (_0x9f6cxc['length'] === 0) {
			_0x9f6cxa['projectionStack'] = null
		};
		_0x9f6cxa['fireEvent']('projectionreject', _0x9f6cxa, _0x9f6cxc && _0x9f6cxc[_0x9f6cxc['length'] - 1], _0x9f6cx9, _0x9f6cxa['getProjectionLevel']())
	}
	return {
		projectionStack: null
		, getProjection: _0x9f6cx4
		, isProjecting: _0x9f6cx5
		, areProjected: _0x9f6cx8
		, getProjectionLevel: _0x9f6cx3
		, startProjection: _0x9f6cx1
		, commitProjection: _0x9f6cx7
		, rejectProjection: _0x9f6cx6
	}
});
Ext.define('Ext.ux.Gantt.data.TaskStore', {
	extend: 'Ext.data.TreeStore'
	, requires: ['Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.patches.TreeStore', 'Ext.ux.Scheduler.patches.TreeStoreInternalIdMap', 'Ext.ux.Gantt.data.Linearizator', 'Ext.ux.Gantt.model.Task', 'Ext.ux.Gantt.model.Project', 'Ext.ux.Gantt.data.Calendar', 'Ext.ux.Gantt.data.DependencyStore', 'Ext.ux.Gantt.data.ResourceStore', 'Ext.ux.Gantt.data.AssignmentStore']
	, mixins: ['Ext.ux.Gantt.patches.TaskStore', 'Ext.ux.Scheduler.data.mixin.FilterableTreeStore', 'Ext.ux.Scheduler.data.mixin.UniversalModelGetter', 'Ext.ux.Scheduler.data.mixin.CacheHintHelper', 'Ext.ux.Scheduler.data.mixin.EventStore', 'Ext.ux.Gantt.data.undoredo.mixin.TaskStoreHint', 'Ext.ux.Gantt.data.mixin.ProjectableStore']
	, model: 'Ext.ux.Gantt.model.Task'
	, alias: 'store.gantt_taskstore'
	, storeId: 'tasks'
	, typeProperty: 'TaskType'
	, calendarManager: null
	, calendar: null
	, calendarListeners: null
	, dependencyStore: null
	, resourceStore: null
	, assignmentStore: null
	, weekendsAreWorkdays: false
	, cascadeChanges: true
	, batchSync: true
	, recalculateParents: true
	, skipWeekendsDuringDragDrop: true
	, cascadeDelay: 0
	, moveParentAsGroup: true
	, enableDependenciesForParentTasks: true
	, availabilitySearchLimit: 1825
	, cycleResolutionStrategy: 'cut'
	, autoNormalizeNodes: true
	, projectStartDate: null
	, projectEndDate: null
	, cascading: false
	, isFillingRoot: false
	, isSettingRoot: false
	, earlyDatesCache: null
	, lateDatesCache: null
	, earlyDatesResetNotificationSuspended: 0
	, earlyDatesResetNotificationRequested: 0
	, lateDatesResetNotificationSuspended: 0
	, lateDatesResetNotificationRequested: 0
	, lastTotalTimeSpan: null
	, suspendAutoRecalculateParents: 0
	, suspendAutoCascade: 0
	, currentCascadeBatch: null
	, batchCascadeLevel: 0
	, dependenciesCalendar: 'project'
	, pendingDataUpdates: null
	, tasksLoadStarted: 0
	, checkDependencyConstraint: false
	, checkPotentialConflictConstraint: false
	, scheduleByConstraints: false
	, projectDateFormat: 'c'
	, constructor: function (_0x9f6cx5) {
		_0x9f6cx5 = _0x9f6cx5 || {};
		var _0x9f6cx2 = 'calendarManager' in _0x9f6cx5 ? _0x9f6cx5['calendarManager'] : this['calendarManager'];
		delete _0x9f6cx5['calendarManager'];
		this['setCalendarManager'](_0x9f6cx2);
		var _0x9f6cx3 = _0x9f6cx5['calendar'] || this['calendar'];
		if (!_0x9f6cx3) {
			var _0x9f6cx7 = {};
			if (_0x9f6cx5['hasOwnProperty']('weekendsAreWorkdays')) {
				_0x9f6cx7['weekendsAreWorkdays'] = _0x9f6cx5['weekendsAreWorkdays']
			}
			else {
				if (this['self']['prototype']['hasOwnProperty']('weekendsAreWorkdays') && this['self'] != Ext.ux.Gantt['data']['TaskStore']) {
					_0x9f6cx7['weekendsAreWorkdays'] = this['weekendsAreWorkdays']
				}
			};
			if (this['calendarManager']) {
				_0x9f6cx3 = this['calendarManager']['getProjectCalendar']()
			};
			_0x9f6cx3 = _0x9f6cx3 && Ext['data']['StoreManager']['lookup'](_0x9f6cx3) || new Ext.ux.Gantt['data'].Calendar(_0x9f6cx7)
		};
		var _0x9f6cx1 = _0x9f6cx5['dependencyStore'] || this['dependencyStore'];
		_0x9f6cx1 = _0x9f6cx1 && Ext['data']['StoreManager']['lookup'](_0x9f6cx1) || Ext['create']('Ext.ux.Gantt.data.DependencyStore');
		delete _0x9f6cx5['dependencyStore'];
		var _0x9f6cx8 = _0x9f6cx5['resourceStore'] || this['resourceStore'];
		_0x9f6cx8 = _0x9f6cx8 && Ext['data']['StoreManager']['lookup'](_0x9f6cx8) || Ext['create']('Ext.ux.Gantt.data.ResourceStore');
		delete _0x9f6cx5['resourceStore'];
		var _0x9f6cx4 = _0x9f6cx5['assignmentStore'] || this['assignmentStore'];
		_0x9f6cx4 = _0x9f6cx4 && Ext['data']['StoreManager']['lookup'](_0x9f6cx4) || Ext['create']('Ext.ux.Gantt.data.AssignmentStore', {
			resourceStore: _0x9f6cx8
		});
		delete _0x9f6cx5['assignmentStore'];
		if (_0x9f6cx3) {
			delete _0x9f6cx5['calendar'];
			this['setCalendar'](_0x9f6cx3, true, true)
		};
		this['resetEarlyDates'](true);
		this['resetLateDates'](true);
		this['pendingDataUpdates'] = {
			recalculateParents: {}
		};
		var _0x9f6cx9 = _0x9f6cx5['root'] || this['root'];
		this['root'] = null;
		delete _0x9f6cx5['root'];
		this['callParent']([_0x9f6cx5]);
		this['setResourceStore'](_0x9f6cx8);
		this['setAssignmentStore'](_0x9f6cx4);
		this['setDependencyStore'](_0x9f6cx1);
		_0x9f6cx9 && this['setRoot'](_0x9f6cx9);
		this['setupListeners']();
		var _0x9f6cx6 = this['getRoot']();
		if (_0x9f6cx6 && this['autoNormalizeNodes']) {
			_0x9f6cx6['normalizeParent']()
		};
		if (this['autoSync'] && this['batchSync']) {
			this['sync'] = Ext['Function']['createBuffered'](this['sync'], 500)
		};
		this['initTreeFiltering']()
	}
	, getCrudManager: function () {
		return this['crudManager']
	}
	, setCrudManager: function (_0x9f6cx1) {
		this['crudManager'] = _0x9f6cx1
	}
	, setCalendarManager: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 && Ext['data']['StoreManager']['lookup'](_0x9f6cx1);
		if (_0x9f6cx1 === this['calendarManager']) {
			return
		};
		if (this['calendarManagerListeners']) {
			this['calendarManagerListeners']['destroy']()
		};
		this['calendarManager'] = _0x9f6cx1;
		if (_0x9f6cx1) {
			this['projectCalendarSet'] = Boolean(_0x9f6cx1['getProjectCalendar']());
			this['calendarManagerListeners'] = _0x9f6cx1['on']({
				projectcalendarset: function (_0x9f6cx2, _0x9f6cx5) {
					if (!this['settingCalendar']) {
						this['setCalendar'](_0x9f6cx5, !this['projectCalendarSet']);
						this['projectCalendarSet'] = true
					}
				}
				, scope: this
				, destroyable: true
			})
		};
		return _0x9f6cx1
	}
	, onProjectionCommit: function (_0x9f6cx3, _0x9f6cx1, _0x9f6cx4) {
		for (var _0x9f6cx5 in _0x9f6cx4) {
			if (_0x9f6cx4['hasOwnProperty'](_0x9f6cx5)) {
				var _0x9f6cx2 = this['getModelByInternalId'](_0x9f6cx5);
				_0x9f6cx2 && _0x9f6cx2['commitSegmentsProjection']()
			}
		}
	}
	, onProjectionReject: function (_0x9f6cx4, _0x9f6cx1, _0x9f6cx2) {
		for (var _0x9f6cx3 in _0x9f6cx2) {
			if (_0x9f6cx2['hasOwnProperty'](_0x9f6cx3)) {
				var _0x9f6cx5 = this['getModelByInternalId'](_0x9f6cx3);
				_0x9f6cx5 && _0x9f6cx5['rejectSegmentsProjection']()
			}
		}
	}
	, setupListeners: function () {
		this['listenersAreInitialized'] = true;
		this['on']({
			nodeappend: this['onMyNodeAdded']
			, nodeinsert: this['onMyNodeAdded']
			, update: this['onTaskUpdated']
			, projectioncommit: this['onProjectionCommit']
			, projectionreject: this['onProjectionReject']
			, scope: this
		});
		this['on']({
			noderemove: this['onTaskRemoved']
			, nodemove: this['onTaskMoved']
			, write: this['onTaskStoreWrite']
			, sort: this['onTasksSorted']
			, load: this['onTasksLoaded']
			, scope: this
			, priority: 100
		})
	}
	, createResourceEventsCache: Ext['emptyFn']
	, createIdConsistencyManager: function () {
		var _0x9f6cx1 = this;
		return new Ext.ux.Scheduler['data']['util'].IdConsistencyManager({
			eventStore: _0x9f6cx1
			, resourceStore: _0x9f6cx1['getResourceStore']()
			, assignmentStore: _0x9f6cx1['getAssignmentStore']()
			, dependencyStore: _0x9f6cx1['getDependencyStore']()
		})
	}
	, createModelPersistencyManager: function () {
		var _0x9f6cx1 = this;
		return new Ext.ux.Scheduler['data']['util'].ModelPersistencyManager({
			eventStore: _0x9f6cx1
			, resourceStore: _0x9f6cx1['getResourceStore']()
			, assignmentStore: _0x9f6cx1['getAssignmentStore']()
			, dependencyStore: _0x9f6cx1['getDependencyStore']()
		})
	}
	, fillNode: function (_0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx2['isRoot']()) {
			this['isSettingRoot'] = true
		};
		this['callParent'](arguments);
		if (_0x9f6cx2['isRoot']()) {
			this['isSettingRoot'] = false
		}
	}
	, onTasksLoaded: function () {
		var _0x9f6cx1 = this['getRoot']();
		if (_0x9f6cx1 && this['autoNormalizeNodes']) {
			_0x9f6cx1['normalizeParent']()
		};
		this['onTasksLoadEnd']()
	}
	, onTasksLoadStart: function () {
		this['tasksLoadStarted']++;
		this['suspendAutoRecalculateParents']++;
		this['un']('noderemove', this['onTaskRemoved'], this);
		this['un']('nodeappend', this['onMyNodeAdded'], this);
		this['un']('update', this['onTaskUpdated'], this)
	}
	, onTasksLoadEnd: function () {
		this['resetTotalTimeSpanCache']();
		(this['tasksLoadStarted'] > 0) || Ext['Error']['raise']('Invalid tasksLoadStarted flag state, should be greater than zero at this point');
		this['tasksLoadStarted']--;
		if (!this['tasksLoadStarted']) {
			this['on']('noderemove', this['onTaskRemoved'], this);
			this['on']('nodeappend', this['onMyNodeAdded'], this);
			this['on']('update', this['onTaskUpdated'], this)
		};
		this['suspendAutoRecalculateParents']--
	}
	, load: function (_0x9f6cx1) {
		this['on']('beforeload', this['onTasksLoadStart'], this, {
			priority: -999
			, single: true
		});
		this['callParent'](arguments)
	}
	, setProxy: function () {
		this['callParent'](arguments);
		if (this['typeProperty']) {
			var _0x9f6cx2 = this
				, _0x9f6cx1 = _0x9f6cx2['getProxy']() && _0x9f6cx2['getProxy']()['getReader']();
			if (_0x9f6cx1 && !_0x9f6cx1['getTypeProperty']()) {
				_0x9f6cx1['setTypeProperty'](_0x9f6cx2['typeProperty'])
			}
		}
	}
	, setRoot: function (_0x9f6cx1) {
		var _0x9f6cx3 = this;
		var _0x9f6cx2 = this['count']() && this['getRoot']();
		this['isSettingRoot'] = true;
		Ext['apply'](_0x9f6cx1, {
			calendar: _0x9f6cx3['calendar']
			, taskStore: _0x9f6cx3
			, dependencyStore: _0x9f6cx3['dependencyStore']
			, phantom: false
			, dirty: false
		});
		if (_0x9f6cx3['listenersAreInitialized']) {
			_0x9f6cx3['onTasksLoadStart']()
		};
		var _0x9f6cx5 = this['callParent'](arguments);
		this['isSettingRoot'] = false;
		if (_0x9f6cx3['listenersAreInitialized']) {
			_0x9f6cx3['onTasksLoaded']()
		};
		_0x9f6cx2 && _0x9f6cx2['cascadeBy'](function (_0x9f6cx4) {
			_0x9f6cx4['setTaskStore'](null)
		});
		return _0x9f6cx5
	}
	, setDependencyStore: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx3 = _0x9f6cx5['dependencyStore']
			, _0x9f6cx2 = {
				add: _0x9f6cx5['onDependencyAdd']
				, update: _0x9f6cx5['onDependencyUpdate']
				, remove: _0x9f6cx5['onDependencyDelete']
				, scope: _0x9f6cx5
			};
		if (_0x9f6cx3 && _0x9f6cx3['isStore']) {
			_0x9f6cx3['un'](_0x9f6cx2);
			_0x9f6cx3['setTaskStore'](null);
			_0x9f6cx5['idConsistencyManager'] && _0x9f6cx5['idConsistencyManager']['setDependencyStore'](null);
			_0x9f6cx5['modelPersistencyManager'] && _0x9f6cx5['modelPersistencyManager']['setDependencyStore'](null)
		};
		_0x9f6cx5['dependencyStore'] = _0x9f6cx1 && Ext['StoreMgr']['lookup'](_0x9f6cx1) || null;
		if (_0x9f6cx5['dependencyStore']) {
			_0x9f6cx5['modelPersistencyManager'] && _0x9f6cx5['modelPersistencyManager']['setDependencyStore'](_0x9f6cx5['dependencyStore']);
			_0x9f6cx5['idConsistencyManager'] && _0x9f6cx5['idConsistencyManager']['setDependencyStore'](_0x9f6cx5['dependencyStore']);
			_0x9f6cx5['dependencyStore']['setTaskStore'](_0x9f6cx5);
			_0x9f6cx5['dependencyStore']['on'](_0x9f6cx2)
		};
		if ((_0x9f6cx3 || _0x9f6cx1) && _0x9f6cx3 !== _0x9f6cx1) {
			_0x9f6cx5['events'] && _0x9f6cx5['fireEvent']('dependencystorechange', _0x9f6cx5, _0x9f6cx1, _0x9f6cx3)
		}
	}
	, getResourceStore: function () {
		return this['resourceStore'] || null
	}
	, setResourceStore: function (_0x9f6cx2) {
		var _0x9f6cx1 = this
			, _0x9f6cx5 = _0x9f6cx1['resourceStore'];
		if (_0x9f6cx5 && _0x9f6cx5['isStore']) {
			_0x9f6cx1['idConsistencyManager'] && _0x9f6cx1['idConsistencyManager']['setResourceStore'](null);
			_0x9f6cx1['modelPersistencyManager'] && _0x9f6cx1['modelPersistencyManager']['setResourceStore'](null)
		};
		_0x9f6cx1['resourceStore'] = _0x9f6cx2 && Ext['StoreMgr']['lookup'](_0x9f6cx2) || null;
		if (_0x9f6cx1['resourceStore']) {
			_0x9f6cx1['modelPersistencyManager'] && _0x9f6cx1['modelPersistencyManager']['setResourceStore'](_0x9f6cx1['resourceStore']);
			_0x9f6cx1['idConsistencyManager'] && _0x9f6cx1['idConsistencyManager']['setResourceStore'](_0x9f6cx1['resourceStore']);
			_0x9f6cx1['resourceStore']['setTaskStore'](_0x9f6cx1);
			_0x9f6cx1['resourceStore']['normalizeResources']()
		};
		if ((_0x9f6cx5 || _0x9f6cx2) && (_0x9f6cx5 !== _0x9f6cx2)) {
			_0x9f6cx1['events'] && _0x9f6cx1['fireEvent']('resourcestorechange', _0x9f6cx1, _0x9f6cx2, _0x9f6cx5)
		}
	}
	, getAssignmentStore: function () {
		return this['assignmentStore'] || null
	}
	, setAssignmentStore: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx3 = _0x9f6cx2['assignmentStore']
			, _0x9f6cx1 = {
				add: _0x9f6cx2['onAssignmentStructureMutation']
				, update: _0x9f6cx2['onAssignmentMutation']
				, remove: _0x9f6cx2['onAssignmentStructureMutation']
				, scope: _0x9f6cx2
			};
		if (_0x9f6cx3 && _0x9f6cx3['isStore']) {
			_0x9f6cx3['un'](_0x9f6cx1);
			_0x9f6cx3['setTaskStore'](null);
			_0x9f6cx2['idConsistencyManager'] && _0x9f6cx2['idConsistencyManager']['setAssignmentStore'](null);
			_0x9f6cx2['modelPersistencyManager'] && _0x9f6cx2['modelPersistencyManager']['setAssignmentStore'](null)
		};
		_0x9f6cx2['assignmentStore'] = _0x9f6cx5 && Ext['StoreMgr']['lookup'](_0x9f6cx5) || null;
		if (_0x9f6cx2['assignmentStore']) {
			_0x9f6cx2['modelPersistencyManager'] && _0x9f6cx2['modelPersistencyManager']['setAssignmentStore'](_0x9f6cx2['assignmentStore']);
			_0x9f6cx2['idConsistencyManager'] && _0x9f6cx2['idConsistencyManager']['setAssignmentStore'](_0x9f6cx2['assignmentStore']);
			_0x9f6cx5['setTaskStore'](_0x9f6cx2);
			_0x9f6cx5['on'](_0x9f6cx1)
		};
		if ((_0x9f6cx3 || _0x9f6cx5) && _0x9f6cx3 !== _0x9f6cx5) {
			_0x9f6cx2['events'] && _0x9f6cx2['fireEvent']('assignmentstorechange', _0x9f6cx2, _0x9f6cx5, _0x9f6cx3)
		}
	}
	, adjustToCalendar: function (_0x9f6cx7, _0x9f6cx4) {
		var _0x9f6cx5 = this;
		_0x9f6cx5['resetEarlyDates']();
		_0x9f6cx5['resetLateDates']();
		if (_0x9f6cx7 instanceof Ext.ux.Gantt['model']['Task']) {
			_0x9f6cx7['adjustToCalendar'](_0x9f6cx4)
		}
		else {
			if (Ext['isFunction'](_0x9f6cx7)) {
				_0x9f6cx4 = _0x9f6cx7;
				_0x9f6cx7 = []
			};
			var _0x9f6cx1 = _0x9f6cx5['getRoot']()
				, _0x9f6cx3 = {}
				, _0x9f6cx2 = false;
			if (!Ext['isArray'](_0x9f6cx7) || !_0x9f6cx7['length']) {
				_0x9f6cx7 = _0x9f6cx1 && _0x9f6cx1['childNodes'] || [];
				_0x9f6cx2 = true
			};
			_0x9f6cx1 && _0x9f6cx1['propagateChanges'](function () {
				var _0x9f6cxa = [];
				for (var _0x9f6cx8 = 0, _0x9f6cx6 = _0x9f6cx7['length']; _0x9f6cx8 < _0x9f6cx6; _0x9f6cx8++) {
					var _0x9f6cxc = _0x9f6cx7[_0x9f6cx8];
					_0x9f6cxc['cascadeBy'](function (_0x9f6cx9) {
						if (_0x9f6cx9 !== _0x9f6cx1) {
							_0x9f6cx9['adjustToCalendarWithoutPropagation']()
						}
					});
					if (!_0x9f6cx2 || !_0x9f6cxc['hasIncomingDependencies']()) {
						_0x9f6cxa['push'](_0x9f6cxc)
					}
				};
				return _0x9f6cxa['length'] && _0x9f6cxa || false
			}, function (_0x9f6cx6, _0x9f6cx8) {
				if (!_0x9f6cx6) {
					Ext['apply'](_0x9f6cx3, _0x9f6cx8)
				};
				_0x9f6cx4 && _0x9f6cx4['apply'](this, arguments)
			})
		}
	}
	, getCalendar: function () {
		return this['calendar'] || null
	}
	, setCalendar: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx2) {
		if (this['settingCalendar']) {
			return
		};
		this['settingCalendar'] = true;
		var _0x9f6cx3 = {
			calendarchange: function () {
				this['adjustToCalendar']()
			}
			, destroyable: true
			, scope: this
		};
		if (this['calendarListeners']) {
			this['calendarListeners']['destroy']();
			this['calendarListeners'] = null
		};
		this['calendar'] = _0x9f6cx4;
		if (_0x9f6cx4) {
			this['calendarListeners'] = _0x9f6cx4['on'](_0x9f6cx3);
			var _0x9f6cx1 = this['getRoot']();
			if (_0x9f6cx1) {
				_0x9f6cx1['calendar'] = _0x9f6cx4
			};
			if (!_0x9f6cx5) {
				this['adjustToCalendar']()
			};
			if (!_0x9f6cx2) {
				this['fireEvent']('calendarset', this, _0x9f6cx4)
			};
			if (this['calendarManager']) {
				this['calendarManager']['setProjectCalendar'](_0x9f6cx4)
			}
		};
		this['settingCalendar'] = false
	}
	, getCriticalPaths: function () {
		var _0x9f6cx3 = this
			, _0x9f6cx2 = []
			, _0x9f6cx5 = _0x9f6cx3['getProjects']()
			, _0x9f6cx1 = _0x9f6cx5['length'] === 0 ? [_0x9f6cx3['getRoot']()] : _0x9f6cx5;
		Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cx4) {
			var _0x9f6cx7 = _0x9f6cx4['isProject'] && _0x9f6cx4['getEndDate']() || _0x9f6cx3['getProjectEndDate']();
			_0x9f6cx4['cascadeBy'](function (_0x9f6cx6) {
				if (!_0x9f6cx6['isRoot']() && _0x9f6cx6['getEndDate']() - _0x9f6cx7 === 0 && !(!_0x9f6cx6['isLeaf']() && _0x9f6cx6['childNodes']['length'])) {
					_0x9f6cx2['push'](_0x9f6cx6)
				}
			})
		});
		return Ext['Array']['map'](_0x9f6cx2, function (_0x9f6cx4) {
			return _0x9f6cx4['getCriticalPaths']()
		})
	}
	, onMyNodeAdded: function (_0x9f6cx3, _0x9f6cx7) {
		var _0x9f6cx4 = this;
		if (!_0x9f6cx7['isRoot']()) {
			if (_0x9f6cx4['lastTotalTimeSpan']) {
				var _0x9f6cx5 = _0x9f6cx4['getTotalTimeSpan']();
				if (_0x9f6cx7['getEndDate']() > _0x9f6cx5['end'] || _0x9f6cx7['getStartDate']() < _0x9f6cx5['start']) {
					_0x9f6cx4['resetTotalTimeSpanCache']()
				}
			};
			if (_0x9f6cx7['getEndDate']() - _0x9f6cx4['getProjectEndDate']() === 0) {
				_0x9f6cx4['resetLateDates']()
			};
			if (!_0x9f6cx4['isUndoingOrRedoing']()) {
				var _0x9f6cx2 = this['getDependencyStore']()
					, _0x9f6cx1 = true;
				if (_0x9f6cx4['cascadeChanges'] && !_0x9f6cx4['suspendAutoCascade'] && (_0x9f6cx4['scheduleByConstraints'] || _0x9f6cx7['getParentsIncomingDependencies']()['length'])) {
					_0x9f6cx2 && _0x9f6cx2['reduceTaskDependencies'](_0x9f6cx7, function (_0x9f6cx6, _0x9f6cx8) {
						var _0x9f6cxc = _0x9f6cx8['getSourceTask']()
							, _0x9f6cx9 = _0x9f6cx8['getTargetTask']();
						if (_0x9f6cxc && _0x9f6cx9) {
							_0x9f6cxc['scheduleWithoutPropagation']();
							_0x9f6cx9['scheduleWithoutPropagation']();
							_0x9f6cx1 = false
						}
					}, null, false);
					_0x9f6cx1 && _0x9f6cx7['scheduleWithoutPropagation']()
				};
				if (!_0x9f6cx4['cascading'] && _0x9f6cx4['recalculateParents'] && !_0x9f6cx4['suspendAutoRecalculateParents']) {
					if (_0x9f6cx4['updating']) {
						_0x9f6cx4['pendingDataUpdates']['recalculateParents'][_0x9f6cx7['getId']()] = _0x9f6cx7
					}
					else {
						_0x9f6cx7['recalculateParents']()
					}
				}
			}
		}
	}
	, onTaskUpdated: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx7 = _0x9f6cx2['previous'];
		if (this['lastTotalTimeSpan']) {
			var _0x9f6cx3 = this['getTotalTimeSpan']();
			if (_0x9f6cx7 && (_0x9f6cx7[_0x9f6cx2['endDateField']] - _0x9f6cx3['end'] === 0 || _0x9f6cx7[_0x9f6cx2['startDateField']] - _0x9f6cx3['start'] === 0) || (_0x9f6cx2['getEndDate']() > _0x9f6cx3['end'] || _0x9f6cx2['getStartDate']() < _0x9f6cx3['start'])) {
				this['resetTotalTimeSpanCache']()
			}
		};
		if (!this['cascading'] && _0x9f6cx1 !== Ext['data']['Model']['COMMIT'] && _0x9f6cx7 && !this['isUndoingOrRedoing']()) {
			var _0x9f6cx6 = _0x9f6cx2['percentDoneField'] in _0x9f6cx7;
			if (_0x9f6cx2['startDateField'] in _0x9f6cx7 || _0x9f6cx2['endDateField'] in _0x9f6cx7 || 'parentId' in _0x9f6cx7 || _0x9f6cx2['effortField'] in _0x9f6cx7 || _0x9f6cx7[_0x9f6cx2['schedulingModeField']] === 'Manual' || _0x9f6cx7[_0x9f6cx2['manuallyScheduledField']]) {
				var _0x9f6cx4 = _0x9f6cx2;
				if (this['cascadeChanges'] && !this['suspendAutoCascade']) {
					if (_0x9f6cx7[_0x9f6cx4['schedulingModeField']] == 'Manual') {
						var _0x9f6cx8 = _0x9f6cx4['getIncomingDependencies'](true);
						if (_0x9f6cx8['length']) {
							_0x9f6cx4 = _0x9f6cx8[0]['getSourceTask']()
						}
					};
					this['cascadeTimer'] = Ext['Function']['defer'](_0x9f6cx4['propagateChanges'], this['cascadeDelay'], _0x9f6cx4, [Ext['emptyFn'], null, true])
				}
				else {
					this['resetEarlyDates']();
					this['resetLateDates']()
				};
				_0x9f6cx6 = true
			}
			else {
				if ((_0x9f6cx7[_0x9f6cx2['schedulingModeField']] || _0x9f6cx2['manuallyScheduledField'] in _0x9f6cx7) && _0x9f6cx2['isManuallyScheduled']()) {
					this['resetEarlyDates']();
					this['resetLateDates']()
				}
			};
			if (_0x9f6cx6 && this['recalculateParents'] && !this['suspendAutoRecalculateParents']) {
				if (this['updating']) {
					this['pendingDataUpdates']['recalculateParents'][_0x9f6cx2['getId']()] = _0x9f6cx2
				}
				else {
					_0x9f6cx2['recalculateParents']()
				}
			}
		}
	}
	, onEndUpdate: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx5 = {}
			, _0x9f6cx1;
		if (!this['isUndoingOrRedoing']()) {
			Ext['Object']['each'](_0x9f6cx2['pendingDataUpdates']['recalculateParents'], function (_0x9f6cx4, _0x9f6cx3) {
				_0x9f6cx3['parentNode'] && (_0x9f6cx5[_0x9f6cx3['parentNode']['getId']()] = _0x9f6cx3['parentNode'])
			});
			_0x9f6cx5 = Ext['Array']['sort'](Ext['Object']['getValues'](_0x9f6cx5), function (_0x9f6cx4, _0x9f6cx3) {
				return (_0x9f6cx4['data']['depth'] > _0x9f6cx3['data']['depth']) ? 1 : ((_0x9f6cx4['data']['depth'] < _0x9f6cx3['data']['depth']) ? -1 : 0)
			});
			while (_0x9f6cx5['length'] > 0) {
				_0x9f6cx1 = _0x9f6cx5['pop']();
				_0x9f6cx1['refreshCalculatedParentNodeData']();
				_0x9f6cx1['recalculateParents']()
			}
		};
		_0x9f6cx2['pendingDataUpdates']['recalculateParents'] = {};
		return _0x9f6cx2['callParent'](arguments)
	}
	, getEmptyCascadeBatch: function () {
		var _0x9f6cx1 = this;
		return {
			nbrAffected: 0
			, affected: {}
			, visitedCounters: {}
			, addVisited: function (_0x9f6cx5) {
				var _0x9f6cx2 = _0x9f6cx5['internalId'];
				if (!this['visitedCounters'][_0x9f6cx2]) {
					this['visitedCounters'][_0x9f6cx2] = 1
				}
				else {
					this['visitedCounters'][_0x9f6cx2]++
				}
			}
			, addAffected: function (_0x9f6cx3, _0x9f6cx5) {
				var _0x9f6cx2 = _0x9f6cx3['internalId'];
				if (this['affected'][_0x9f6cx2]) {
					return
				}
				else {
					this['affected'][_0x9f6cx2] = _0x9f6cx3;
					this['nbrAffected']++
				};
				if (!_0x9f6cx1['cascading'] && this['nbrAffected'] > 1) {
					_0x9f6cx1['fireEvent']('beforecascade', _0x9f6cx1);
					_0x9f6cx1['cascading'] = true
				};
				if (!_0x9f6cx5) {
					var _0x9f6cx4 = this['affectedParentsbyInternalId'];
					var _0x9f6cx6 = this['affectedParentsArray'];
					var _0x9f6cx7 = _0x9f6cx3['isLeaf']() ? _0x9f6cx3['parentNode'] : _0x9f6cx3;
					while (_0x9f6cx7 && !_0x9f6cx7['data']['root']) {
						if (_0x9f6cx4[_0x9f6cx7['internalId']]) {
							break
						};
						_0x9f6cx4[_0x9f6cx7['internalId']] = _0x9f6cx7;
						_0x9f6cx6['push'](_0x9f6cx7);
						this['addAffected'](_0x9f6cx7, true);
						_0x9f6cx7 = _0x9f6cx7['parentNode']
					}
				}
			}
			, affectedParentsArray: []
			, affectedParentsbyInternalId: {}
			, parentsStartDates: {}
		}
	}
	, startBatchCascade: function () {
		if (!this['batchCascadeLevel']) {
			this['currentCascadeBatch'] = this['getEmptyCascadeBatch']();
			this['suspendAutoRecalculateParents']++;
			this['suspendAutoCascade']++
		};
		this['batchCascadeLevel']++;
		return this['currentCascadeBatch']
	}
	, endBatchCascade: function () {
		this['batchCascadeLevel']--;
		if (!this['batchCascadeLevel']) {
			this['suspendAutoRecalculateParents']--;
			this['suspendAutoCascade']--;
			var _0x9f6cx1 = this['currentCascadeBatch'];
			this['currentCascadeBatch'] = null;
			this['resetEarlyDates']();
			this['resetLateDates']();
			if (this['cascading']) {
				this['cascading'] = false;
				this['fireEvent']('cascade', this, _0x9f6cx1)
			}
		}
	}
	, removeTaskDependencies: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['dependencyStore']
			, _0x9f6cx5 = _0x9f6cx1['getAllDependencies'](_0x9f6cx2);
		if (_0x9f6cx5['length']) {
			_0x9f6cx2['remove'](_0x9f6cx5)
		}
	}
	, removeTaskAssignments: function (_0x9f6cx2) {
		var _0x9f6cx5 = this['getAssignmentStore']()
			, _0x9f6cx1 = _0x9f6cx2['getAssignments']();
		if (_0x9f6cx1['length']) {
			_0x9f6cx5['remove'](_0x9f6cx1)
		}
	}
	, onTaskRemoved: function (_0x9f6cx6, _0x9f6cx4, _0x9f6cx8) {
		var _0x9f6cx1 = this['getDependencyStore']();
		var _0x9f6cx3 = this['getAssignmentStore']();
		var _0x9f6cx9 = !_0x9f6cx4['isReplace'] && !_0x9f6cx8;
		if (_0x9f6cx1 && _0x9f6cx9) {
			_0x9f6cx4['cascadeBy'](this['removeTaskDependencies'], this)
		};
		if (_0x9f6cx3 && _0x9f6cx9) {
			_0x9f6cx3['fireEvent']('beforetaskassignmentschange', _0x9f6cx3, _0x9f6cx4['getId'](), []);
			_0x9f6cx4['cascadeBy'](this['removeTaskAssignments'], this);
			_0x9f6cx3['fireEvent']('taskassignmentschanged', _0x9f6cx3, _0x9f6cx4['getId'](), [])
		};
		var _0x9f6cx7 = this['getTotalTimeSpan']();
		var _0x9f6cx2 = _0x9f6cx4['getStartDate']();
		var _0x9f6cx5 = _0x9f6cx4['getEndDate']();
		if (_0x9f6cx5 - _0x9f6cx7['end'] === 0 || _0x9f6cx2 - _0x9f6cx7['start'] === 0) {
			this['resetTotalTimeSpanCache']()
		};
		if (_0x9f6cx9) {
			_0x9f6cx4['setTaskStore'](null)
		};
		this['resetEarlyDates']();
		this['resetLateDates']()
	}
	, onTaskMoved: function (_0x9f6cx2, _0x9f6cx3, _0x9f6cx7, _0x9f6cx5) {
		var _0x9f6cx4 = this['getTotalTimeSpan']();
		var _0x9f6cx1 = _0x9f6cx2['getStartDate']();
		var _0x9f6cx6 = _0x9f6cx2['getEndDate']();
		if (_0x9f6cx6 - _0x9f6cx4['end'] === 0 || _0x9f6cx1 - _0x9f6cx4['start'] === 0) {
			this['resetTotalTimeSpanCache']()
		};
		this['resetEarlyDates']();
		this['resetLateDates']()
	}
	, onAssignmentMutation: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (!this['isUndoingOrRedoing']()) {
			Ext['Array']['each']([]['concat'](_0x9f6cx1), function (_0x9f6cx4) {
				var _0x9f6cx3 = _0x9f6cx4['getTask'](_0x9f6cx2);
				if (_0x9f6cx3) {
					_0x9f6cx3['onAssignmentMutation'](_0x9f6cx4)
				}
			})
		}
	}
	, onAssignmentStructureMutation: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (!this['isUndoingOrRedoing']()) {
			Ext['Array']['each']([]['concat'](_0x9f6cx1), function (_0x9f6cx4) {
				var _0x9f6cx3 = _0x9f6cx4['getTask'](_0x9f6cx2);
				if (_0x9f6cx3) {
					_0x9f6cx3['onAssignmentStructureMutation'](_0x9f6cx4)
				}
			})
		}
	}
	, skipPropagationOnDependencyUpdate: function (_0x9f6cx1, _0x9f6cx2) {
		if (_0x9f6cx1 && _0x9f6cx2) {
			return _0x9f6cx2['length'] === 1 && _0x9f6cx2[0] == _0x9f6cx1['highlightedField']
		};
		return false
	}
	, onDependencyUpdate: function (_0x9f6cx7, _0x9f6cx1, _0x9f6cx2, _0x9f6cx4) {
		if (_0x9f6cx2 !== Ext['data']['Model']['COMMIT'] && !this['skipPropagationOnDependencyUpdate'](_0x9f6cx1, _0x9f6cx4)) {
			var _0x9f6cx3 = this;
			_0x9f6cx3['resetTotalTimeSpanCache']();
			_0x9f6cx3['resetEarlyDates']();
			_0x9f6cx3['resetLateDates']();
			var _0x9f6cx5, _0x9f6cx9 = [];
			if (_0x9f6cx4 && Ext['Array']['contains'](_0x9f6cx4, _0x9f6cx1['toField'])) {
				var _0x9f6cx8 = _0x9f6cx1['modified']
					, _0x9f6cx6 = _0x9f6cx8 && _0x9f6cx8[_0x9f6cx1['toField']];
				_0x9f6cx5 = _0x9f6cx6 && _0x9f6cx3['getNodeById'](_0x9f6cx6);
				_0x9f6cx5 && _0x9f6cx9['push'](_0x9f6cx5)
			};
			_0x9f6cx3['scheduleLinkedTasks']([_0x9f6cx1], {
				extraTasksToReschedule: _0x9f6cx9['length'] && _0x9f6cx9
			})
		}
	}
	, onDependencyAdd: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['resetTotalTimeSpanCache']();
		_0x9f6cx2['resetEarlyDates']();
		_0x9f6cx2['resetLateDates']();
		_0x9f6cx2['scheduleLinkedTasks'](_0x9f6cx5)
	}
	, onDependencyDelete: function (_0x9f6cx2, _0x9f6cx4) {
		var _0x9f6cx3 = this;
		_0x9f6cx3['resetTotalTimeSpanCache']();
		_0x9f6cx3['resetEarlyDates']();
		_0x9f6cx3['resetLateDates']();
		var _0x9f6cx7, _0x9f6cx1 = [];
		for (var _0x9f6cx5 = 0; _0x9f6cx5 < _0x9f6cx4['length']; _0x9f6cx5++) {
			_0x9f6cx7 = _0x9f6cx4[_0x9f6cx5]['getTargetTask'](_0x9f6cx3);
			_0x9f6cx7 && _0x9f6cx1['push'](_0x9f6cx7)
		};
		_0x9f6cx3['scheduleLinkedTasks'](_0x9f6cx4, {
			extraTasksToReschedule: _0x9f6cx1['length'] && _0x9f6cx1
		})
	}
	, scheduleLinkedTasks: function (_0x9f6cx4, _0x9f6cx5) {
		_0x9f6cx5 = _0x9f6cx5 || {};
		var _0x9f6cx3 = this
			, _0x9f6cx1 = _0x9f6cx5['extraTasksToReschedule'] || [];
		if (_0x9f6cx3['cascadeChanges'] && !_0x9f6cx3['suspendAutoCascade'] && !_0x9f6cx3['isUndoingOrRedoing']()) {
			var _0x9f6cx2 = []
				, _0x9f6cx7 = []['concat'](_0x9f6cx1);
			Ext['Array']['each'](_0x9f6cx4, function (_0x9f6cx6) {
				var _0x9f6cx8 = _0x9f6cx6['getSourceTask'](_0x9f6cx3)
					, _0x9f6cx9 = _0x9f6cx6['getTargetTask'](_0x9f6cx3);
				if (_0x9f6cx8 && _0x9f6cx9) {
					_0x9f6cx2['push'](_0x9f6cx8);
					_0x9f6cx8['isUnscheduled']() && _0x9f6cx7['push'](_0x9f6cx8);
					_0x9f6cx7['push'](_0x9f6cx9)
				}
			});
			_0x9f6cx2 = _0x9f6cx2['concat'](_0x9f6cx1);
			_0x9f6cx2['length'] && _0x9f6cx3['getRoot']()['propagateChanges'](function () {
				Ext['Array']['each'](_0x9f6cx7, function (_0x9f6cx6) {
					_0x9f6cx6['set']('needsReScheduling', true)
				});
				return _0x9f6cx2
			})
		}
	}
	, onTaskStoreWrite: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx3 = this
			, _0x9f6cx1 = _0x9f6cx2['getRecords']()
			, _0x9f6cx4;
		Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cx7) {
			Ext['each'](_0x9f6cx7['childNodes'], function (_0x9f6cx6) {
				if (_0x9f6cx6['phantom']) {
					_0x9f6cx4 = true;
					return false
				}
			})
		});
		if (_0x9f6cx4 && !this['autoSync']) {
			_0x9f6cx3['syncTimer'] = setTimeout(function () {
				_0x9f6cx3['sync']()
			}, 1)
		}
	}
	, forEachTaskUnordered: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this['getRoot']();
		if (_0x9f6cx1) {
			_0x9f6cx1['cascadeBy'](function (_0x9f6cx3) {
				if (_0x9f6cx3 !== _0x9f6cx1) {
					return _0x9f6cx5['call'](_0x9f6cx2 || this, _0x9f6cx3)
				}
			})
		}
	}
	, getTimeSpanForTasks: function (_0x9f6cx3) {
		var _0x9f6cx1 = Ext.ux.Scheduler['util']['Date']['MAX_VALUE']
			, _0x9f6cx2 = Ext.ux.Scheduler['util']['Date']['MIN_VALUE'];
		var _0x9f6cx5 = function (_0x9f6cx7) {
			var _0x9f6cx4 = _0x9f6cx7['getStartDate']();
			var _0x9f6cx6 = _0x9f6cx7['getEndDate']();
			if (_0x9f6cx4 && _0x9f6cx4 < _0x9f6cx1) {
				_0x9f6cx1 = _0x9f6cx4
			};
			if (_0x9f6cx4 && _0x9f6cx6 && _0x9f6cx6 > _0x9f6cx2) {
				_0x9f6cx2 = _0x9f6cx6
			}
		};
		if (_0x9f6cx3) {
			if (!Ext['isArray'](_0x9f6cx3)) {
				_0x9f6cx3 = [_0x9f6cx3]
			};
			Ext['Array']['each'](_0x9f6cx3, _0x9f6cx5)
		}
		else {
			this['forEachTaskUnordered'](_0x9f6cx5)
		};
		_0x9f6cx1 = _0x9f6cx1 < Ext.ux.Scheduler['util']['Date']['MAX_VALUE'] ? _0x9f6cx1 : null;
		_0x9f6cx2 = _0x9f6cx2 > Ext.ux.Scheduler['util']['Date']['MIN_VALUE'] ? _0x9f6cx2 : null;
		return {
			start: _0x9f6cx1
			, end: _0x9f6cx2 || (_0x9f6cx1 && Ext['Date']['add'](_0x9f6cx1, Ext['Date'].DAY, 1)) || null
		}
	}
	, resetTotalTimeSpanCache: function () {
		this['lastTotalTimeSpan'] = null
	}
	, getTotalTimeSpan: function () {
		if (this['lastTotalTimeSpan']) {
			return this['lastTotalTimeSpan']
		};
		this['lastTotalTimeSpan'] = this['getTimeSpanForTasks']();
		return this['lastTotalTimeSpan']
	}
	, applyMetaData: function (_0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx2['projectStartDate']
			, _0x9f6cx5 = _0x9f6cx2['projectEndDate'];
		if (_0x9f6cx1) {
			if ('string' == typeof _0x9f6cx1) {
				_0x9f6cx2['projectStartDate'] = this['parseProjectDate'](_0x9f6cx1)
			};
			this['setProjectStartDate'](_0x9f6cx2['projectStartDate'], true)
		};
		if (_0x9f6cx5) {
			if ('string' == typeof _0x9f6cx5) {
				_0x9f6cx2['projectEndDate'] = this['parseProjectDate'](_0x9f6cx5)
			};
			this['setProjectEndDate'](_0x9f6cx2['projectEndDate'])
		}
	}
	, parseProjectDate: function (_0x9f6cx1) {
		return Ext['Date']['parse'](_0x9f6cx1, this['projectDateFormat'])
	}
	, setProjectStartDate: function (_0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx2 = this
			, _0x9f6cx4 = _0x9f6cx2['crudManager']
			, _0x9f6cx5 = _0x9f6cx2['projectStartDate'];
		if (!_0x9f6cx5 || _0x9f6cx5 - _0x9f6cx1) {
			_0x9f6cx2['projectStartDate'] = _0x9f6cx1;
			_0x9f6cx2['fireEvent']('projectstartdateset', _0x9f6cx2, null, _0x9f6cx1, _0x9f6cx5);
			if (!_0x9f6cx3) {
				if (_0x9f6cx4 && _0x9f6cx4['isLoading']()) {
					_0x9f6cx4['on']({
						load: function () {
							_0x9f6cx2['schedule'](true)
						}
						, single: true
					})
				}
				else {
					if (_0x9f6cx2['isLoading']()) {
						_0x9f6cx2['on']({
							load: function () {
								_0x9f6cx2['schedule'](true)
							}
							, single: true
						})
					}
					else {
						_0x9f6cx2['schedule'](true)
					}
				}
			}
		}
	}
	, setProjectEndDate: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['projectEndDate'];
		if (!_0x9f6cx1 || _0x9f6cx1 - _0x9f6cx2) {
			this['projectEndDate'] = _0x9f6cx2;
			this['fireEvent']('projectenddateset', this, null, _0x9f6cx2, _0x9f6cx1)
		}
	}
	, getProjectStartDate: function () {
		return this['projectStartDate'] || this['getTotalTimeSpan']()['start']
	}
	, getProjectEndDate: function () {
		return this['projectEndDate'] || this['getTotalTimeSpan']()['end']
	}
	, schedule: function (_0x9f6cx2, _0x9f6cx4) {
		var _0x9f6cx3 = this
			, _0x9f6cx1 = _0x9f6cx3['getRoot']()
			, _0x9f6cx5 = []['concat'](_0x9f6cx1['childNodes']);
		if (_0x9f6cx5['length']) {
			if (_0x9f6cx2) {
				_0x9f6cx3['resetEarlyDates']();
				_0x9f6cx3['resetLateDates']()
			};
			_0x9f6cx3['forEachTaskUnordered'](function (_0x9f6cx7) {
				_0x9f6cx7['set']('needsReScheduling', true)
			});
			_0x9f6cx1 && _0x9f6cx1['propagateChanges'](function () {
				return _0x9f6cx5
			}, _0x9f6cx4)
		}
	}
	, getProjects: function () {
		var _0x9f6cx2 = this['getRoot']()
			, _0x9f6cx3 = []
			, _0x9f6cx4 = _0x9f6cx2['childNodes'];
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx4['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			if (_0x9f6cx4[_0x9f6cx5]['isProject']) {
				_0x9f6cx3['push'](_0x9f6cx4[_0x9f6cx5])
			}
		};
		return _0x9f6cx3
	}
	, getTotalTaskCount: function (_0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx2 === false ? 1 : 0;
		this['forEachTaskUnordered'](function () {
			_0x9f6cx1++
		});
		return _0x9f6cx1
	}
	, toArray: function () {
		var _0x9f6cx1 = [];
		this['getRoot']()['cascadeBy'](function (_0x9f6cx2) {
			_0x9f6cx1['push'](_0x9f6cx2)
		});
		return _0x9f6cx1
	}
	, beginIndent: function (_0x9f6cx1, _0x9f6cx2) {
		this['fireEvent']('beforeindentationchange', this, _0x9f6cx1, _0x9f6cx2)
	}
	, endIndent: function (_0x9f6cx1, _0x9f6cx2) {
		this['fireEvent']('indentationchange', this, _0x9f6cx1, _0x9f6cx2)
	}
	, indent: function (_0x9f6cx5, _0x9f6cx8) {
		var _0x9f6cx4 = this
			, _0x9f6cx1 = false
			, _0x9f6cx6 = {}
			, _0x9f6cx3, _0x9f6cx2;
		_0x9f6cx5 = Ext['isArray'](_0x9f6cx5) ? _0x9f6cx5['slice']() : [_0x9f6cx5];
		_0x9f6cx5 = Ext['Array']['filter'](_0x9f6cx5, function (_0x9f6cxc) {
			var _0x9f6cx9;
			_0x9f6cx9 = !!_0x9f6cxc['previousSibling'];
			while (_0x9f6cx9 && !_0x9f6cxc['isRoot']()) {
				_0x9f6cx9 = !Ext['Array']['contains'](_0x9f6cx5, _0x9f6cxc['parentNode']);
				_0x9f6cxc = _0x9f6cxc['parentNode']
			};
			return _0x9f6cx9
		});
		_0x9f6cx5 = Ext['Array']['sort'](_0x9f6cx5, function (_0x9f6cxc, _0x9f6cx9) {
			return _0x9f6cxc['get']('index') - _0x9f6cx9['get']('index')
		});
		_0x9f6cx3 = Ext['Array']['reduce'](_0x9f6cx5, function (_0x9f6cx9, _0x9f6cxc) {
			_0x9f6cx9[_0x9f6cxc['getId']()] = {
				parentNode: _0x9f6cxc['parentNode']
				, index: _0x9f6cxc['get']('index')
			};
			return _0x9f6cx9
		}, {});
		_0x9f6cx4['beginIndent'](_0x9f6cx5, _0x9f6cx3);
		_0x9f6cx4['suspendEvent']('beforeindentationchange', 'indentationchange');
		_0x9f6cx2 = _0x9f6cx5['slice']();
		(function _0x9f6cx7() {
			if (_0x9f6cx2['length']) {
				_0x9f6cx2['shift']()['indent'](function (_0x9f6cxc, _0x9f6cx9) {
					if (!_0x9f6cxc) {
						_0x9f6cx6 = Ext['apply'](_0x9f6cx6, _0x9f6cx9);
						_0x9f6cx7()
					}
					else {
						_0x9f6cx1 = true;
						_0x9f6cx6 = {}
					}
				})
			}
			else {
				_0x9f6cx4['resumeEvent']('beforeindentationchange', 'indentationchange');
				_0x9f6cx4['endIndent'](_0x9f6cx5, _0x9f6cx3);
				_0x9f6cx8 && _0x9f6cx8(_0x9f6cx1, _0x9f6cx6)
			}
		})()
	}
	, outdent: function (_0x9f6cx5, _0x9f6cx8) {
		var _0x9f6cx4 = this
			, _0x9f6cx1 = false
			, _0x9f6cx6 = {}
			, _0x9f6cx3, _0x9f6cx2;
		_0x9f6cx5 = Ext['isArray'](_0x9f6cx5) ? _0x9f6cx5['slice']() : [_0x9f6cx5];
		_0x9f6cx5 = Ext['Array']['filter'](_0x9f6cx5, function (_0x9f6cxc) {
			var _0x9f6cx9;
			_0x9f6cx9 = _0x9f6cxc['parentNode'] && !_0x9f6cxc['parentNode']['isRoot']();
			while (_0x9f6cx9 && !_0x9f6cxc['isRoot']()) {
				_0x9f6cx9 = !Ext['Array']['contains'](_0x9f6cx5, _0x9f6cxc['parentNode']);
				_0x9f6cxc = _0x9f6cxc['parentNode']
			};
			return _0x9f6cx9
		});
		_0x9f6cx5 = Ext['Array']['sort'](_0x9f6cx5, function (_0x9f6cxc, _0x9f6cx9) {
			return _0x9f6cx9['get']('index') - _0x9f6cxc['get']('index')
		});
		_0x9f6cx3 = Ext['Array']['reduce'](_0x9f6cx5, function (_0x9f6cx9, _0x9f6cxc) {
			_0x9f6cx9[_0x9f6cxc['getId']()] = {
				parentNode: _0x9f6cxc['parentNode']
				, index: _0x9f6cxc['get']('index')
			};
			return _0x9f6cx9
		}, {});
		_0x9f6cx4['beginIndent'](_0x9f6cx5, _0x9f6cx3);
		_0x9f6cx4['suspendEvent']('beforeindentationchange', 'indentationchange');
		_0x9f6cx2 = _0x9f6cx5['slice']();
		(function _0x9f6cx7() {
			if (_0x9f6cx2['length']) {
				_0x9f6cx2['shift']()['outdent'](function (_0x9f6cxc, _0x9f6cx9) {
					if (!_0x9f6cxc) {
						_0x9f6cx6 = Ext['apply'](_0x9f6cx6, _0x9f6cx9);
						_0x9f6cx7()
					}
					else {
						_0x9f6cx1 = true;
						_0x9f6cx6 = {}
					}
				})
			}
			else {
				_0x9f6cx4['resumeEvent']('beforeindentationchange', 'indentationchange');
				_0x9f6cx4['endIndent'](_0x9f6cx5, _0x9f6cx3);
				_0x9f6cx8 && _0x9f6cx8(_0x9f6cx1, _0x9f6cx6)
			}
		})()
	}
	, getTasksForResource: function (_0x9f6cx1) {
		return this['getEventsForResource'](_0x9f6cx1)
	}
	, getResourcesForTask: function (_0x9f6cx1) {
		return this['getResourcesForEvent'](_0x9f6cx1)
	}
	, forEachScheduledEvent: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this;
		this['forEachTaskUnordered'](function (_0x9f6cx4) {
			var _0x9f6cx3 = _0x9f6cx4['getStartDate']()
				, _0x9f6cx5 = _0x9f6cx4['getEndDate']();
			if (_0x9f6cx3 && _0x9f6cx5) {
				return _0x9f6cx2['call'](_0x9f6cx1, _0x9f6cx4, _0x9f6cx3, _0x9f6cx5)
			}
		})
	}
	, onTasksSorted: function () {
		if (this['lastTreeFilter']) {
			this['filterTreeBy'](this['lastTreeFilter'])
		}
	}
	, append: function (_0x9f6cx1) {
		return this['getRoot']()['appendChild'](_0x9f6cx1)
	}
	, notifyEarlyDatesReset: function () {
		this['fireEvent']('earlydatesreset')
	}
	, suspendEarlyDatesResetNotification: function () {
		this['earlyDatesResetNotificationSuspended']++
	}
	, resumeEarlyDatesResetNotification: function (_0x9f6cx1) {
		this['earlyDatesResetNotificationSuspended'] && this['earlyDatesResetNotificationSuspended']--;
		if (!this['earlyDatesResetNotificationSuspended'] && this['earlyDatesResetNotificationRequested']) {
			if (!_0x9f6cx1) {
				this['notifyLateDatesReset']()
			};
			this['earlyDatesResetNotificationRequested'] = 0
		}
	}
	, resetEarlyDates: function (_0x9f6cx1) {
		this['earlyDatesCache'] = {};
		if (!_0x9f6cx1) {
			if (!this['earlyDatesResetNotificationSuspended']) {
				this['notifyEarlyDatesReset']()
			}
			else {
				this['earlyDatesResetNotificationRequested']++
			}
		}
	}
	, notifyLateDatesReset: function () {
		this['fireEvent']('latedatesreset')
	}
	, suspendLateDatesResetNotification: function () {
		this['lateDatesResetNotificationSuspended']++
	}
	, resumeLateDatesResetNotification: function (_0x9f6cx1) {
		this['lateDatesResetNotificationSuspended'] && this['lateDatesResetNotificationSuspended']--;
		if (!this['lateDatesResetNotificationSuspended'] && this['lateDatesResetNotificationRequested']) {
			if (!_0x9f6cx1) {
				this['notifyLateDatesReset']()
			};
			this['lateDatesResetNotificationRequested'] = 0
		}
	}
	, resetLateDates: function (_0x9f6cx1) {
		this['lateDatesCache'] = {};
		if (!_0x9f6cx1) {
			if (!this['lateDatesResetNotificationSuspended']) {
				this['notifyLateDatesReset']()
			}
			else {
				this['lateDatesResetNotificationRequested']++
			}
		}
	}
	, setEarlyDateCachedValue: function (_0x9f6cx1, _0x9f6cx2) {
		this['earlyDatesCache'][_0x9f6cx1] = _0x9f6cx2
	}
	, getEarlyDateCachedValue: function (_0x9f6cx1) {
		return this['earlyDatesCache'][_0x9f6cx1]
	}
	, setLateDateCachedValue: function (_0x9f6cx1, _0x9f6cx2) {
		this['lateDatesCache'][_0x9f6cx1] = _0x9f6cx2
	}
	, getLateDateCachedValue: function (_0x9f6cx1) {
		return this['lateDatesCache'][_0x9f6cx1]
	}
	, afterUndoRedo: function () {
		this['resetEarlyDates']();
		this['resetLateDates']()
	}
	, getBySequenceNumber: function (_0x9f6cx1) {
		return this['getRoot']()['getBySequenceNumber'](_0x9f6cx1)
	}
	, destroy: function () {
		this['setCalendar'](null);
		this['setCalendarManager'](null);
		this['setAssignmentStore'](null);
		this['setDependencyStore'](null);
		this['setResourceStore'](null);
		if (this['calendarManagerListeners']) {
			this['calendarManagerListeners']['destroy']()
		};
		clearTimeout(this['cascadeTimer']);
		clearTimeout(this['syncTimer']);
		this['callParent'](arguments)
	}
	, moveSeveralTasks: function (_0x9f6cx2) {
		var _0x9f6cx3 = this['startBatchCascade']();
		var _0x9f6cx1;
		while (_0x9f6cx1 = _0x9f6cx2()) {
			var _0x9f6cx5 = _0x9f6cx1['task'];
			if (_0x9f6cx5['isLeaf']() || !_0x9f6cx5['childNodes']['length']) {
				if (!_0x9f6cx3['affected'][_0x9f6cx5['internalId']]) {
					_0x9f6cx3['addAffected'](_0x9f6cx5);
					_0x9f6cx1['method'] && _0x9f6cx5[_0x9f6cx1['method']]['apply'](_0x9f6cx5, _0x9f6cx1['args']);
					if (this['cascadeChanges']) {
						_0x9f6cx5['propagateChanges'](Ext['emptyFn'], null, true)
					}
				}
			}
			else {
				if (this['recalculateParents']) {
					_0x9f6cx3['addAffected'](_0x9f6cx5)
				}
			}
		};
		this['endBatchCascade']()
	}
	, linearWalkDependentTasks: function (_0x9f6cx3, _0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		!_0x9f6cx5 || Ext['isObject'](_0x9f6cx5) || Ext['Error']['raise']('Invalid arguments: walking specification must be an object');
		_0x9f6cx5 = _0x9f6cx5 || {
			self: true
			, ancestors: _0x9f6cx2['recalculateParents']
			, descendants: _0x9f6cx2['moveParentAsGroup']
			, successors: _0x9f6cx2['cascadeChanges']
			, cycles: _0x9f6cx2['cycleResolutionStrategy']
		};
		return Ext.ux.Gantt['data']['Linearizator']['linearWalkBySpecification'](_0x9f6cx3, _0x9f6cx1, _0x9f6cx5)
	}
	, getLinearWalkingSequenceForDependentTasks: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = [];
		this['linearWalkDependentTasks'](_0x9f6cx5, function (_0x9f6cx7, _0x9f6cx4, _0x9f6cx3, _0x9f6cx6) {
			_0x9f6cx1['push'](Array['prototype']['slice']['call'](arguments))
		}, _0x9f6cx2);
		return _0x9f6cx1
	}
	, isVisible: function (_0x9f6cx5) {
		var _0x9f6cx1 = _0x9f6cx5['parentNode']
			, _0x9f6cx3 = _0x9f6cx5['get']('visible')
			, _0x9f6cx2 = this['getRoot']();
		while (_0x9f6cx3 && _0x9f6cx1) {
			_0x9f6cx3 = _0x9f6cx1['get']('expanded') && _0x9f6cx1['get']('visible');
			_0x9f6cx1 = _0x9f6cx1['parentNode']
		};
		return _0x9f6cx3 && !(_0x9f6cx5 === _0x9f6cx2 && !this['getRootVisible']())
	}
	, removeTasks: function (_0x9f6cx1) {
		_0x9f6cx1 = []['concat'](_0x9f6cx1);
		_0x9f6cx1 = Ext['Array']['filter'](_0x9f6cx1, function (_0x9f6cx2) {
			return !_0x9f6cx2['parentNode'] || !_0x9f6cx2['parentNode']['isReadOnly']()
		});
		_0x9f6cx1 = Ext['Array']['sort'](_0x9f6cx1, function (_0x9f6cx3, _0x9f6cx5) {
			return _0x9f6cx5['getDepth']() - _0x9f6cx3['getDepth']()
		});
		this['fireEvent']('beforebatchremove', this, _0x9f6cx1);
		Ext['Array']['forEach'](_0x9f6cx1, function (_0x9f6cx2) {
			_0x9f6cx2['remove']()
		});
		this['fireEvent']('batchremove', this, _0x9f6cx1);
		return _0x9f6cx1
	}
	, isBackwardScheduled: function () {
		return this['backwardScheduling']
	}
	, getPrePropagationConstraints: function (_0x9f6cx2) {
		var _0x9f6cx1 = [];
		if (this['prePropagationConstraints']) {
			_0x9f6cx1 = this['prePropagationConstraints']
		}
		else {
			_0x9f6cx1 = [];
			this['checkDependencyConstraint'] && _0x9f6cx2['getDependencyConstraintClass']() && _0x9f6cx1['push'](_0x9f6cx2['getDependencyConstraintClass']());
			this['checkPotentialConflictConstraint'] && _0x9f6cx2['getPotentialConflictConstraintClass']() && _0x9f6cx1['push'](_0x9f6cx2['getPotentialConflictConstraintClass']());
			this['prePropagationConstraints'] = _0x9f6cx1
		};
		return _0x9f6cx1
	}
	, pinHangingTasks: function () {
		var _0x9f6cx1 = this['getRoot']();
		_0x9f6cx1 && _0x9f6cx1['cascadeBy'](function (_0x9f6cx2) {
			if (_0x9f6cx2 !== _0x9f6cx1) {
				if (_0x9f6cx2['getStartDate']() > _0x9f6cx2['getEarlyStartDate']()) {
					_0x9f6cx2['pinWithoutPropagation']()
				}
			}
		})
	}
});
Ext.define('Ext.ux.Gantt.data.CrudManager', {
	extend: 'Ext.ux.Scheduler.crud.AbstractManager'
	, mixins: ['Ext.ux.Scheduler.crud.encoder.Json', 'Ext.ux.Scheduler.crud.transport.Ajax']
	, requires: ['Ext.ux.Gantt.data.CalendarManager', 'Ext.ux.Gantt.data.TaskStore']
	, calendarManager: null
	, taskStore: null
	, dependencyStore: null
	, resourceStore: null
	, assignmentStore: null
	, addRelatedStores: true
	, constructor: function (_0x9f6cx3) {
		_0x9f6cx3 = _0x9f6cx3 || {};
		var _0x9f6cx5 = _0x9f6cx3['calendarManager'] || this['calendarManager']
			, _0x9f6cx8 = _0x9f6cx3['taskStore'] || this['taskStore'] || new Ext.ux.Gantt['data'].TaskStore({
				proxy: 'memory'
			})
			, _0x9f6cx6 = _0x9f6cx3['assignmentStore'] || this['assignmentStore']
			, _0x9f6cx9 = _0x9f6cx3['resourceStore'] || this['resourceStore']
			, _0x9f6cx1 = _0x9f6cx3['dependencyStore'] || this['dependencyStore']
			, _0x9f6cxc = [];
		if (_0x9f6cx3['addRelatedStores'] !== false) {
			var _0x9f6cx7 = this['getTaskStoreInfo'](_0x9f6cx8, _0x9f6cx3);
			_0x9f6cx5 = _0x9f6cx5 || _0x9f6cx7['calendarManager'];
			_0x9f6cx6 = _0x9f6cx6 || _0x9f6cx7['assignmentStore'];
			_0x9f6cx9 = _0x9f6cx9 || _0x9f6cx7['resourceStore'];
			_0x9f6cx1 = _0x9f6cx1 || _0x9f6cx7['dependencyStore']
		};
		if (!_0x9f6cx5) {
			_0x9f6cx5 = new Ext.ux.Gantt['data'].CalendarManager()
		};
		this['mixins']['observable']['constructor']['call'](this, _0x9f6cx3);
		this['addCalendarManager'](_0x9f6cx5, _0x9f6cxc);
		if (_0x9f6cx9) {
			_0x9f6cxc['push'](_0x9f6cx9)
		};
		if (_0x9f6cx6) {
			_0x9f6cxc['push'](_0x9f6cx6)
		};
		if (_0x9f6cx1) {
			_0x9f6cxc['push'](_0x9f6cx1)
		};
		if (_0x9f6cx8) {
			_0x9f6cxc['push'](_0x9f6cx8)
		};
		if (_0x9f6cxc['length']) {
			var _0x9f6cx2 = [];
			if (_0x9f6cx5) {
				_0x9f6cx2['push'](_0x9f6cx5)
			};
			if (_0x9f6cx9) {
				_0x9f6cx2['push'](_0x9f6cx9)
			};
			if (_0x9f6cx8) {
				_0x9f6cx2['push'](_0x9f6cx8)
			};
			if (_0x9f6cx6) {
				_0x9f6cx2['push'](_0x9f6cx6)
			};
			if (_0x9f6cx1) {
				_0x9f6cx2['push'](_0x9f6cx1)
			};
			if (_0x9f6cx2['length']) {
				_0x9f6cx3['syncApplySequence'] = (_0x9f6cx3['syncApplySequence'] || _0x9f6cx3['stores'] || [])['concat'](_0x9f6cx2)
			};
			var _0x9f6cx4 = _0x9f6cx3['stores'] || this['stores'];
			if (_0x9f6cx4 && !Ext['isArray'](_0x9f6cx4)) {
				_0x9f6cx4 = [_0x9f6cx4]
			};
			_0x9f6cx3['stores'] = (_0x9f6cx4 || [])['concat'](_0x9f6cxc)
		};
		this['callParent']([_0x9f6cx3]);
		this['calendarManager'] = this['getStoreDescriptor'](_0x9f6cx5);
		this['resourceStore'] = this['getStoreDescriptor'](_0x9f6cx9);
		this['assignmentStore'] = this['getStoreDescriptor'](_0x9f6cx6);
		this['dependencyStore'] = this['getStoreDescriptor'](_0x9f6cx1);
		this['taskStore'] = this['getStoreDescriptor'](_0x9f6cx8);
		this['taskStore']['store']['setCalendarManager'](_0x9f6cx5)
	}
	, onBeforeIndentationChange: function () {
		this['suspendChangesTracking']()
	}
	, onIndentationChange: function () {
		this['resumeChangesTracking'](true)
	}
	, onBeforeBatchRemove: function () {
		this['suspendChangesTracking']()
	}
	, onBatchRemove: function () {
		this['resumeChangesTracking'](true)
	}
	, bindStoreListeners: function (_0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx2 instanceof Ext.ux.Gantt['data']['TaskStore']) {
			var _0x9f6cx5 = {
				beforeindentationchange: this['onBeforeIndentationChange']
				, indentationchange: this['onIndentationChange']
				, beforebatchremove: this['onBeforeBatchRemove']
				, batchremove: this['onBatchRemove']
				, scope: this
			};
			if (_0x9f6cx1) {
				this['mun'](_0x9f6cx2, _0x9f6cx5)
			}
			else {
				this['mon'](_0x9f6cx2, _0x9f6cx5)
			}
		};
		return this['callParent'](arguments)
	}
	, getTaskStoreInfo: function (_0x9f6cx4, _0x9f6cx3) {
		if (!_0x9f6cx4['isStore']) {
			if (typeof _0x9f6cx4 == 'string') {
				_0x9f6cx4 = Ext['data']['StoreManager']['get'](_0x9f6cx4)
			}
			else {
				_0x9f6cx4 = _0x9f6cx4['store']
			}
		};
		var _0x9f6cx1 = {}
			, _0x9f6cx2 = _0x9f6cx3['calendarManager']
			, _0x9f6cx6 = _0x9f6cx3['assignmentStore']
			, _0x9f6cx7 = _0x9f6cx3['resourceStore']
			, _0x9f6cx5 = _0x9f6cx3['dependencyStore'];
		if (!_0x9f6cx2) {
			_0x9f6cx1['calendarManager'] = _0x9f6cx4['calendarManager']
		};
		if (!_0x9f6cx6) {
			_0x9f6cx1['assignmentStore'] = _0x9f6cx4['getAssignmentStore']()
		};
		if (!_0x9f6cx7) {
			_0x9f6cx1['resourceStore'] = _0x9f6cx4['getResourceStore']()
		};
		if (!_0x9f6cx5) {
			_0x9f6cx1['dependencyStore'] = _0x9f6cx4['getDependencyStore']()
		};
		return _0x9f6cx1
	}
	, addCalendarManager: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2, _0x9f6cx4;
		if (_0x9f6cx5['isStore']) {
			_0x9f6cx2 = _0x9f6cx5;
			_0x9f6cx4 = {
				store: _0x9f6cx5
			}
		}
		else {
			if (typeof _0x9f6cx5 == 'object') {
				_0x9f6cx2 = _0x9f6cx5['store'];
				_0x9f6cx4 = _0x9f6cx5
			}
			else {
				_0x9f6cx5 = Ext['data']['StoreManager']['get'](_0x9f6cx5);
				_0x9f6cx2 = _0x9f6cx5;
				_0x9f6cx4 = {
					store: _0x9f6cx5
				}
			}
		};
		var _0x9f6cx3 = (_0x9f6cx2['getModel'] && _0x9f6cx2['getModel']() || _0x9f6cx2['model'])['prototype'];
		if (!_0x9f6cx4['stores']) {
			_0x9f6cx4['stores'] = [{
				storeId: _0x9f6cx3['daysField']
				, idProperty: _0x9f6cx3['idProperty']
			}]
		};
		this['calendarManager'] = _0x9f6cx4;
		_0x9f6cx2['on']('load', this['onCalendarManagerLoad'], this);
		this['mon'](_0x9f6cx2, {
			dayadd: this['onStoreChange']
			, dayupdate: this['onStoreChange']
			, dayremove: this['onStoreChange']
			, daybulkremove: this['onStoreChange']
			, scope: this
		});
		_0x9f6cx1['push'](_0x9f6cx4)
	}
	, onCalendarManagerLoad: function (_0x9f6cx2) {
		var _0x9f6cx3 = _0x9f6cx2['getProjectCalendar']()
			, _0x9f6cx5 = _0x9f6cx3 && _0x9f6cx3['getCalendarId']()
			, _0x9f6cx1 = _0x9f6cx2['metaData'] && _0x9f6cx2['metaData']['projectCalendar'];
		if (_0x9f6cx5 != _0x9f6cx1) {
			_0x9f6cx2['setProjectCalendar'](_0x9f6cx1)
		}
	}
	, applyLoadResponse: function () {
		var _0x9f6cx1 = this['getCalendarManager']();
		_0x9f6cx1 && _0x9f6cx1['suspendCalendarsEvents']();
		this['callParent'](arguments);
		_0x9f6cx1 && _0x9f6cx1['resumeCalendarsEvents']()
	}
	, getCalendarManager: function () {
		return this['calendarManager'] && this['calendarManager']['store']
	}
	, getResourceStore: function () {
		return this['resourceStore'] && this['resourceStore']['store']
	}
	, getDependencyStore: function () {
		return this['dependencyStore'] && this['dependencyStore']['store']
	}
	, getAssignmentStore: function () {
		return this['assignmentStore'] && this['assignmentStore']['store']
	}
	, getTaskStore: function () {
		return this['taskStore'] && this['taskStore']['store']
	}
	, getEventStore: function () {
		return this['taskStore'] && this['taskStore']['store']
	}
	, prepareUpdated: function (_0x9f6cx4, _0x9f6cxa, _0x9f6cx8) {
		if (_0x9f6cx4[0] instanceof Ext.ux.Gantt['model']['Task']) {
			_0x9f6cx4 = Ext['Array']['filter'](_0x9f6cx4, function (_0x9f6cx9) {
				return !_0x9f6cx9['isRoot']()
			});
			var _0x9f6cxe = this['callParent']([_0x9f6cx4, _0x9f6cxa, _0x9f6cx8]);
			if (this['resetIdsBeforeSync']) {
				var _0x9f6cx7 = _0x9f6cx4[0]['segmentsField']
					, _0x9f6cx5 = Ext['ClassManager']['get'](_0x9f6cx4[0]['segmentClassName'])['prototype']
					, _0x9f6cxb = _0x9f6cx5['idProperty']
					, _0x9f6cx13 = _0x9f6cx5['phantomIdField'];
				for (var _0x9f6cx2 = 0; _0x9f6cx2 < _0x9f6cxe['length']; _0x9f6cx2++) {
					var _0x9f6cx6 = _0x9f6cxe[_0x9f6cx2][_0x9f6cx7];
					if (_0x9f6cx6) {
						for (var _0x9f6cx1 = 0; _0x9f6cx1 < _0x9f6cx6['length']; _0x9f6cx1++) {
							var _0x9f6cx3 = _0x9f6cx6[_0x9f6cx1];
							if (_0x9f6cx3[_0x9f6cx13]) {
								delete _0x9f6cx3[_0x9f6cxb]
							}
						}
					}
				}
			};
			return _0x9f6cxe
		};
		return this['callParent'](arguments)
	}
	, prepareAdded: function (_0x9f6cx6) {
		var _0x9f6cx1 = this['callParent'](arguments);
		if (this['resetIdsBeforeSync'] && _0x9f6cx6[0] instanceof Ext.ux.Gantt['model']['Task']) {
			var _0x9f6cx5 = _0x9f6cx6[0]['segmentsField']
				, _0x9f6cx4 = Ext['ClassManager']['get'](_0x9f6cx6[0]['segmentClassName'])['prototype']['idProperty'];
			for (var _0x9f6cx7 = 0; _0x9f6cx7 < _0x9f6cx1['length']; _0x9f6cx7++) {
				var _0x9f6cx2 = _0x9f6cx1[_0x9f6cx7][_0x9f6cx5];
				if (_0x9f6cx2) {
					for (var _0x9f6cx3 = 0; _0x9f6cx3 < _0x9f6cx2['length']; _0x9f6cx3++) {
						delete _0x9f6cx2[_0x9f6cx3][_0x9f6cx4]
					}
				}
			}
		};
		return _0x9f6cx1
	}
	, applyChangesToTask: function (_0x9f6cx4, _0x9f6cxa) {
		if (_0x9f6cxa['hasOwnProperty'](_0x9f6cx4['segmentsField'])) {
			var _0x9f6cx3 = _0x9f6cx4['getSegments']()
				, _0x9f6cx8 = _0x9f6cx4['segmentsField']
				, _0x9f6cxb = _0x9f6cx3 && _0x9f6cx3[0]['phantomIdField']
				, _0x9f6cxe = _0x9f6cx3 && _0x9f6cx3[0]['idProperty']
				, _0x9f6cx6 = _0x9f6cxa[_0x9f6cx8];
			if (_0x9f6cx3) {
				if (_0x9f6cx6) {
					for (var _0x9f6cx5 = _0x9f6cx6['length'] - 1; _0x9f6cx5 >= 0; _0x9f6cx5--) {
						var _0x9f6cx13 = _0x9f6cx6[_0x9f6cx5]
							, _0x9f6cxd = _0x9f6cx13[_0x9f6cxb]
							, _0x9f6cx1 = _0x9f6cx13[_0x9f6cxe]
							, _0x9f6cx7 = null;
						for (var _0x9f6cx2 = 0; _0x9f6cx2 < _0x9f6cx3['length']; _0x9f6cx2++) {
							_0x9f6cx7 = _0x9f6cx3[_0x9f6cx2];
							if ((_0x9f6cx7['get'](_0x9f6cxb) == _0x9f6cxd) || (_0x9f6cx7['getId']() == _0x9f6cx1)) {
								this['applyChangesToRecord'](_0x9f6cx7, _0x9f6cx13);
								break
							}
						}
					}
				};
				delete _0x9f6cxa[_0x9f6cx8]
			}
		}
	}
	, applyChangesToRecord: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (_0x9f6cx2 instanceof Ext.ux.Gantt['model']['Task']) {
			this['ignoreUpdates']++;
			this['applyChangesToTask']['apply'](this, arguments);
			this['ignoreUpdates']--
		};
		this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Scheduler.model.Event', {
	extend: 'Ext.ux.Scheduler.model.Range'
	, idProperty: 'Id'
	, customizableFields: [{
		name: 'IconCls'
	}, {
		name: 'ResourceId'
	}, {
		name: 'Draggable'
		, type: 'boolean'
		, persist: false
		, defaultValue: true
	}, {
		name: 'Resizable'
		, persist: false
		, defaultValue: true
	}]
	, resourceIdField: 'ResourceId'
	, draggableField: 'Draggable'
	, resizableField: 'Resizable'
	, iconClsField: 'IconCls'
	, getInternalId: function () {
		return this['internalId']
	}
	, isHighlighted: false
	, getEventStore: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['joined'] && _0x9f6cx2['joined'][0];
		if (_0x9f6cx1 && !_0x9f6cx1['isEventStore']) {
			Ext['Array']['sort'](_0x9f6cx2['joined'], function (_0x9f6cx3, _0x9f6cx5) {
				return (_0x9f6cx3['isEventStore'] || false) > (_0x9f6cx5['isEventStore'] || false) && -1 || 1
			});
			_0x9f6cx1 = _0x9f6cx2['joined'][0];
			_0x9f6cx1 = _0x9f6cx1['isEventStore'] ? _0x9f6cx1 : null
		};
		return _0x9f6cx1
	}
	, getResourceStore: function () {
		var _0x9f6cx1 = this['getEventStore']();
		return _0x9f6cx1 && _0x9f6cx1['getResourceStore']()
	}
	, getAssignmentStore: function () {
		var _0x9f6cx1 = this['getEventStore']();
		return _0x9f6cx1 && _0x9f6cx1['getAssignmentStore']()
	}
	, getResources: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getEventStore']();
		return _0x9f6cx1 && _0x9f6cx1['getResourcesForEvent'](_0x9f6cx2) || []
	}
	, forEachResource: function (_0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx1 = this['getResources']();
		for (var _0x9f6cx2 = 0; _0x9f6cx2 < _0x9f6cx1['length']; _0x9f6cx2++) {
			if (_0x9f6cx3['call'](_0x9f6cx5 || this, _0x9f6cx1[_0x9f6cx2]) === false) {
				return
			}
		}
	}
	, getResource: function (_0x9f6cx4) {
		var _0x9f6cx3 = this
			, _0x9f6cx1 = null
			, _0x9f6cx2 = _0x9f6cx3['getEventStore']()
			, _0x9f6cx5 = _0x9f6cx2 && _0x9f6cx2['getResourceStore']();
		_0x9f6cx4 = _0x9f6cx4 == null ? _0x9f6cx3['getResourceId']() : _0x9f6cx4;
		if (_0x9f6cx2 && (_0x9f6cx4 === null || _0x9f6cx4 === undefined)) {
			_0x9f6cx1 = _0x9f6cx2['getResourcesForEvent'](_0x9f6cx3);
			if (_0x9f6cx1['length'] == 1) {
				_0x9f6cx1 = _0x9f6cx1[0]
			}
			else {
				if (_0x9f6cx1['length'] > 1) {
					Ext['Error']['raise']('Event::getResource() is not applicable for events with multiple assignments, please use Event::getResources() instead.')
				}
				else {
					_0x9f6cx1 = null
				}
			}
		}
		else {
			if (_0x9f6cx5) {
				_0x9f6cx1 = _0x9f6cx5['getModelById'](_0x9f6cx4)
			}
		};
		return _0x9f6cx1
	}
	, setResource: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getEventStore']();
		_0x9f6cx1 && _0x9f6cx1['removeAssignmentsForEvent'](_0x9f6cx2);
		_0x9f6cx2['assign'](_0x9f6cx5)
	}
	, assign: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getEventStore']();
		_0x9f6cx5 = _0x9f6cx5 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0x9f6cx5['getId']() : _0x9f6cx5;
		if (_0x9f6cx1) {
			_0x9f6cx1['assignEventToResource'](_0x9f6cx2, _0x9f6cx5)
		}
		else {
			_0x9f6cx2['setResourceId'](_0x9f6cx5)
		}
	}
	, unassign: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getEventStore']();
		_0x9f6cx5 = _0x9f6cx5 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0x9f6cx5['getId']() : _0x9f6cx5;
		if (_0x9f6cx1) {
			_0x9f6cx1['unassignEventFromResource'](_0x9f6cx2, _0x9f6cx5)
		}
		else {
			if (_0x9f6cx2['getResourceId']() == _0x9f6cx5) {
				_0x9f6cx2['setResourceId'](null)
			}
		}
	}
	, reassign: function (_0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getEventStore']();
		_0x9f6cx1 = _0x9f6cx1 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0x9f6cx1['get'](_0x9f6cx1['idProperty']) : _0x9f6cx1;
		_0x9f6cx3 = _0x9f6cx3 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0x9f6cx3['get'](_0x9f6cx3['idProperty']) : _0x9f6cx3;
		if (_0x9f6cx2) {
			_0x9f6cx2['reassignEventFromResourceToResource'](_0x9f6cx5, _0x9f6cx1, _0x9f6cx3)
		}
		else {
			_0x9f6cx5['setResourceId'](_0x9f6cx3)
		}
	}
	, isAssignedTo: function (_0x9f6cx3) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getEventStore']()
			, _0x9f6cx1 = false;
		_0x9f6cx3 = _0x9f6cx3 instanceof Ext.ux.Scheduler['model']['Resource'] && _0x9f6cx3['getId']() || _0x9f6cx3;
		if (_0x9f6cx2) {
			_0x9f6cx1 = _0x9f6cx2['isEventAssignedToResource'](_0x9f6cx5, _0x9f6cx3)
		}
		else {
			_0x9f6cx1 = _0x9f6cx5['getResourceId']() == _0x9f6cx3
		};
		return _0x9f6cx1
	}
	, getAssignments: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getEventStore']();
		return _0x9f6cx1 && _0x9f6cx1['getAssignmentsForEvent'](_0x9f6cx2)
	}
	, isDraggable: function () {
		return this['getDraggable']()
	}
	, isResizable: function () {
		return this['getResizable']()
	}
	, isPersistable: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getEventStore']();
		return _0x9f6cx1 && _0x9f6cx1['isEventPersistable'](_0x9f6cx2)
	}
});
Ext.define('Ext.ux.Scheduler.data.EventStore', {
	extend: 'Ext.data.Store'
	, alias: 'store.eventstore'
	, mixins: ['Ext.ux.Scheduler.data.mixin.UniversalModelGetter', 'Ext.ux.Scheduler.data.mixin.CacheHintHelper', 'Ext.ux.Scheduler.data.mixin.EventStore', 'Robo.data.Store']
	, storeId: 'events'
	, model: 'Ext.ux.Scheduler.model.Event'
	, config: {
		model: 'Ext.ux.Scheduler.model.Event'
	}
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['callParent']([_0x9f6cx1]);
		_0x9f6cx2['resourceStore'] && _0x9f6cx2['setResourceStore'](_0x9f6cx2['resourceStore']);
		_0x9f6cx2['assignmentStore'] && _0x9f6cx2['setAssignmentStore'](_0x9f6cx2['assignmentStore']);
		if (_0x9f6cx2['getModel']() !== Ext.ux.Scheduler['model']['Event'] && !(_0x9f6cx2['getModel']()['prototype'] instanceof Ext.ux.Scheduler['model']['Event'])) {
			throw 'The model for the EventStore must subclass Ext.ux.Scheduler.model.Event'
		}
	}
	, append: function (_0x9f6cx1) {
		this['add'](_0x9f6cx1)
	}
});
Ext.define('Ext.ux.Gantt.model.utilization.UtilizationNegotiationStrategyMixin', {
	uses: ['Ext.ux.Gantt.model.utilization.DefaultUtilizationNegotiationStrategy']
	, utilizationNegotiationStrategyClass: 'Ext.ux.Gantt.model.utilization.DefaultUtilizationNegotiationStrategy'
	, utilizationNegotiationStrategy: null
	, initUtilizationNegotiationStrategyMixin: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx1 && _0x9f6cx1['hasOwnProperty']('utilizationNegotiationStrategy')) {
			_0x9f6cx2['utilizationNegotiationStrategy'] = _0x9f6cx1['utilizationNegotiationStrategy'];
			delete _0x9f6cx1['utilizationNegotiationStrategy']
		}
		else {
			_0x9f6cx2['utilizationNegotiationStrategy'] = Ext['create'](_0x9f6cx2['utilizationNegotiationStrategyClass'])
		};
		return _0x9f6cx1
	}
	, getUtilizationNegotiationStrategy: function () {
		return this['utilizationNegotiationStrategy']
	}
	, setUtilizationNegotiationStrategy: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['utilizationNegotiationStrategy'] !== _0x9f6cx2 && _0x9f6cx2) {
			_0x9f6cx1['utilizationNegotiationStrategy'] = _0x9f6cx2
		}
	}
});
Ext.define('Ext.ux.Gantt.model.UtilizationEvent', {
	extend: 'Ext.ux.Scheduler.model.Event'
	, uses: ['Ext.Date', 'Ext.Object', 'Ext.ux.Gantt.model.Resource', 'Ext.ux.Gantt.model.Assignment']
	, mixins: ['Ext.ux.Gantt.model.utilization.UtilizationNegotiationStrategyMixin']
	, originalResource: null
	, originalAssignment: null
	, customizableFields: [{
		name: 'utilizationInfo'
		, type: 'auto'
		, persist: false
		, defaultValue: null
	}]
	, utilizationInfoField: 'utilizationInfo'
	, constructor: function (_0x9f6cx5) {
		var _0x9f6cx3 = this
			, _0x9f6cx2, _0x9f6cx1;
		_0x9f6cx5 = _0x9f6cx3['initUtilizationNegotiationStrategyMixin'](_0x9f6cx5);
		if (_0x9f6cx5['originalResource']) {
			_0x9f6cx2 = _0x9f6cx5['originalResource'];
			delete _0x9f6cx5['originalResource']
		};
		if (_0x9f6cx5['originalAssignment']) {
			_0x9f6cx1 = _0x9f6cx5['originalAssignment'];
			delete _0x9f6cx5['originalAssignment']
		};
		_0x9f6cx3['callParent'](arguments);
		_0x9f6cx2 && _0x9f6cx3['setOriginalResource'](_0x9f6cx2);
		_0x9f6cx1 && _0x9f6cx3['setOriginalAssignment'](_0x9f6cx1)
	}
	, isSurrogateAssignment: function () {
		return !!this['originalAssignment']
	}
	, isSurrogateSummary: function () {
		return !!this['originalResource']
	}
	, getOriginalAssignment: function () {
		return this['originalAssignment']
	}
	, setOriginalAssignment: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['originalAssignment'] !== _0x9f6cx2) {
			_0x9f6cx1['originalAssignment'] = _0x9f6cx2;
			if (!_0x9f6cx1['isInSyncWithOriginal']()) {
				_0x9f6cx1['syncFromOriginal']()
			}
		}
	}
	, getOriginalResource: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['originalResource']
			, _0x9f6cx5 = _0x9f6cx1['originalAssignment'];
		return _0x9f6cx2 || _0x9f6cx5 && _0x9f6cx5['getResource']() || null
	}
	, setOriginalResource: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['originalResource'] !== _0x9f6cx2) {
			_0x9f6cx1['originalResource'] = _0x9f6cx2;
			if (!_0x9f6cx1['isInSyncWithOriginal']()) {
				_0x9f6cx1['syncFromOriginal']()
			}
		}
	}
	, getOriginalTask: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['originalAssignment'];
		return _0x9f6cx2 && _0x9f6cx2['getTask']() || null
	}
	, isInSyncWithOriginal: function () {
		var _0x9f6cx3 = this
			, _0x9f6cx1 = true
			, _0x9f6cx6, _0x9f6cx4, _0x9f6cx2, _0x9f6cx5, _0x9f6cx7;
		if (_0x9f6cx3['isSurrogateAssignment']()) {
			_0x9f6cx6 = _0x9f6cx3['getOriginalAssignment'](), _0x9f6cx2 = _0x9f6cx3['getOriginalTask']();
			if (_0x9f6cx6) {
				_0x9f6cx1 = _0x9f6cx1 && (_0x9f6cx3['getId']() == _0x9f6cx3['self']['getSurrogateIdFor'](_0x9f6cx6))
			};
			if (_0x9f6cx2 && !_0x9f6cx2['isUnscheduled']()) {
				_0x9f6cx1 = _0x9f6cx1 && (_0x9f6cx3['getStartDate']() - _0x9f6cx3['adjustStartDateToTick'](_0x9f6cx2['getStartDate']()) === 0);
				_0x9f6cx1 = _0x9f6cx1 && (_0x9f6cx3['getEndDate']() - _0x9f6cx3['adjustEndDateToTick'](_0x9f6cx2['getEndDate']()) === 0)
			}
		}
		else {
			if (_0x9f6cx3['isSurrogateSummary']()) {
				_0x9f6cx4 = _0x9f6cx3['getOriginalResource']();
				_0x9f6cx5 = _0x9f6cx3['calculateSurrogateSummaryTimeSpan']();
				_0x9f6cx1 = _0x9f6cx1 && (_0x9f6cx3['getId']() == _0x9f6cx3['self']['getSurrogateIdFor'](_0x9f6cx4));
				_0x9f6cx1 = _0x9f6cx1 && (_0x9f6cx3['getStartDate']() - _0x9f6cx5['startDate'] === 0);
				_0x9f6cx1 = _0x9f6cx1 && (_0x9f6cx3['getEndDate']() - _0x9f6cx5['endDate'] === 0)
			}
			else {
				Ext['Error']['raise']('Unknown surrogate type');
				var _0x9f6cx8 = false
			}
		};
		if (_0x9f6cx1) {
			_0x9f6cx7 = _0x9f6cx3['getUtilizationNegotiationStrategy']()['getUtilizationInfoForUtilizationEvent'](_0x9f6cx3);
			_0x9f6cx1 = Ext['Object']['equals'](_0x9f6cx3['getUtilizationInfo'](), _0x9f6cx7)
		};
		return _0x9f6cx1
	}
	, syncFromOriginal: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx7, _0x9f6cx3, _0x9f6cx1, _0x9f6cx2, _0x9f6cx4;
		_0x9f6cx5['beginEdit']();
		if (_0x9f6cx5['isSurrogateAssignment']()) {
			_0x9f6cx7 = _0x9f6cx5['getOriginalAssignment'](), _0x9f6cx1 = _0x9f6cx5['getOriginalTask']();
			if (_0x9f6cx7) {
				_0x9f6cx5['setId'](_0x9f6cx5['self']['getSurrogateIdFor'](_0x9f6cx7))
			};
			if (_0x9f6cx1 && !_0x9f6cx1['isUnscheduled']()) {
				_0x9f6cx5['setStartEndDate'](_0x9f6cx5['adjustStartDateToTick'](_0x9f6cx1['getStartDate']()), _0x9f6cx5['adjustEndDateToTick'](_0x9f6cx1['getEndDate']()))
			}
		}
		else {
			if (_0x9f6cx5['isSurrogateSummary']()) {
				_0x9f6cx3 = _0x9f6cx5['getOriginalResource']();
				if (_0x9f6cx3) {
					_0x9f6cx5['setId'](_0x9f6cx5['self']['getSurrogateIdFor'](_0x9f6cx3))
				};
				_0x9f6cx2 = _0x9f6cx5['calculateSurrogateSummaryTimeSpan']();
				_0x9f6cx5['setStartEndDate'](_0x9f6cx2['startDate'], _0x9f6cx2['endDate'])
			}
		};
		_0x9f6cx4 = _0x9f6cx5['getUtilizationNegotiationStrategy']()['getUtilizationInfoForUtilizationEvent'](_0x9f6cx5);
		if (!Ext['Object']['equals'](_0x9f6cx5['getUtilizationInfo'](), _0x9f6cx4)) {
			_0x9f6cx5['setUtilizationInfo'](_0x9f6cx4)
		};
		_0x9f6cx5['endEdit']()
	}
	, getUtilizationInfo: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['get'](_0x9f6cx1['utilizationInfoField']);
		if (!_0x9f6cx2) {
			_0x9f6cx2 = _0x9f6cx1['getUtilizationNegotiationStrategy']()['getUtilizationInfoForUtilizationEvent'](_0x9f6cx1);
			_0x9f6cx1['set'](_0x9f6cx1['utilizationInfoField'], _0x9f6cx2)
		};
		return _0x9f6cx2
	}
	, syncToOriginal: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1;
		if (_0x9f6cx2['isSurrogateAssignment']()) {
			_0x9f6cx1 = _0x9f6cx2['getOriginalTask']();
			if (_0x9f6cx1) {
				_0x9f6cx1['setStartEndDate'](_0x9f6cx2['getStartDate'](), _0x9f6cx2['getEndDate'](), true)
			}
		}
	}
	, isInSyncWithSurrogate: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return _0x9f6cx2['getOriginalResource']() === _0x9f6cx1['getOriginalResource']() && _0x9f6cx2['getOriginalAssignment']() === _0x9f6cx1['getOriginalAssignment']() && _0x9f6cx2['getId']() === _0x9f6cx1['getId']() && _0x9f6cx2['getStartDate']() - _0x9f6cx1['getStartDate']() === 0 && _0x9f6cx2['getEndDate']() - _0x9f6cx1['getEndDate']() === 0 && Ext['Object']['equals'](_0x9f6cx2['getUtilizationInfo'](), _0x9f6cx1['getUtilizationInfo']())
	}
	, syncFromSurrogate: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['originalResource'] = _0x9f6cx1['originalResource'];
		_0x9f6cx2['originalAssignment'] = _0x9f6cx1['originalAssignment'];
		_0x9f6cx2['beginEdit']();
		_0x9f6cx2['setId'](_0x9f6cx1['getId']());
		_0x9f6cx2['setStartEndDate'](_0x9f6cx1['getStartDate'](), _0x9f6cx1['getEndDate']());
		if (!Ext['Object']['equals'](_0x9f6cx2['getUtilizationInfo'](), _0x9f6cx1['getUtilizationInfo']())) {
			_0x9f6cx2['setUtilizationInfo'](_0x9f6cx1['getUtilizationInfo']())
		};
		_0x9f6cx2['endEdit']()
	}
	, getUtilizationInfoForInterval: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['getUtilizationNegotiationStrategy']()['getUtilizationInfoForAssignmentEventInterval'](_0x9f6cx1, _0x9f6cx2)
	}
	, forEachInterval: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['getUtilizationNegotiationStrategy']()['forEachTimeSpanInterval'](_0x9f6cx1, _0x9f6cx2)
	}
	, calculateSurrogateSummaryTimeSpan: function () {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['getUtilizationNegotiationStrategy']()['calculateResourceAssignmentsTimespan'](_0x9f6cx1['getOriginalResource']())
	}
	, adjustStartDateToTick: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return _0x9f6cx2['getUtilizationNegotiationStrategy']()['adjustStartDateToTick'](_0x9f6cx1)
	}
	, adjustEndDateToTick: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return _0x9f6cx2['getUtilizationNegotiationStrategy']()['adjustEndDateToTick'](_0x9f6cx1)
	}
	, clone: function (_0x9f6cx2) {
		var _0x9f6cx1 = this
			, _0x9f6cx5 = _0x9f6cx1['callParent']([_0x9f6cx2]);
		_0x9f6cx5['setUtilizationNegotiationStrategy'](_0x9f6cx1['getUtilizationNegotiationStrategy']());
		return _0x9f6cx5
	}
	, inheritableStatics: {
		getSurrogateIdFor: function (_0x9f6cx1) {
			var _0x9f6cx5 = _0x9f6cx1['getId']();
			if (_0x9f6cx1 instanceof Ext.ux.Gantt['model']['Resource']) {
				_0x9f6cx5 = 'resource-' + _0x9f6cx5
			}
			else {
				if (_0x9f6cx1 instanceof Ext.ux.Gantt['model']['Assignment']) {
					_0x9f6cx5 = 'assignment-' + _0x9f6cx5
				}
				else {
					Ext['Error']['raise']('Wrong original record type');
					var _0x9f6cx2 = false
				}
			};
			return _0x9f6cx5
		}
	}
});
Ext.define('Ext.ux.Gantt.data.ResourceUtilizationEventStore', {
	extend: 'Ext.ux.Scheduler.data.EventStore'
	, model: 'Ext.ux.Gantt.model.UtilizationEvent'
	, storeId: null
	, getModelByOriginal: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['getModelById'](_0x9f6cx1['model']['getSurrogateIdFor'](_0x9f6cx2))
	}
});
Ext.define('Ext.ux.Scheduler.data.ResourceTreeStore', {
	extend: 'Ext.data.TreeStore'
	, requires: ['Ext.ux.Scheduler.patches.TreeStore', 'Ext.ux.Scheduler.patches.TreeStoreInternalIdMap']
	, mixins: ['Ext.ux.Scheduler.data.mixin.UniversalModelGetter', 'Ext.ux.Scheduler.data.mixin.CacheHintHelper', 'Ext.ux.Scheduler.data.mixin.ResourceStore', 'Ext.ux.Scheduler.data.mixin.FilterableTreeStore', 'Robo.data.Store']
	, alias: 'store.resourcetreestore'
	, model: 'Ext.ux.Scheduler.model.Resource'
	, storeId: 'resources'
	, constructor: function () {
		this['callParent'](arguments);
		this['initTreeFiltering']();
		if (this['getModel']() !== Ext.ux.Scheduler['model']['Resource'] && !(this['getModel']()['prototype'] instanceof Ext.ux.Scheduler['model']['Resource'])) {
			throw 'The model for the ResourceTreeStore must subclass Ext.ux.Scheduler.model.Resource'
		}
	}
	, setRootNode: function () {
		this['isSettingRoot'] = true;
		var _0x9f6cx1 = this['callParent'](arguments);
		this['isSettingRoot'] = false;
		return _0x9f6cx1
	}
});
Ext.define('Ext.ux.Gantt.model.UtilizationResource', {
	extend: 'Ext.ux.Scheduler.model.Resource'
	, requires: ['Ext.data.NodeInterface']
	, uses: ['Ext.ux.Gantt.model.Resource', 'Ext.ux.Gantt.model.Assignment']
	, customizableFields: [{
		name: 'TaskName'
	}, {
		name: 'TaskSequenceNumber'
	}]
	, taskNameField: 'TaskName'
	, taskSequenceNumberField: 'TaskSequenceNumber'
	, isUtilizationResource: true
	, originalResource: null
	, originalAssignment: null
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx3 = this
			, _0x9f6cx5, _0x9f6cx2;
		if (_0x9f6cx1['originalResource']) {
			_0x9f6cx5 = _0x9f6cx1['originalResource'];
			delete _0x9f6cx1['originalResource']
		};
		if (_0x9f6cx1['originalAssignment']) {
			_0x9f6cx2 = _0x9f6cx1['originalAssignment'];
			delete _0x9f6cx1['originalAssignment']
		};
		_0x9f6cx3['callParent'](arguments);
		_0x9f6cx5 && _0x9f6cx3['setOriginalResource'](_0x9f6cx5);
		_0x9f6cx2 && _0x9f6cx3['setOriginalAssignment'](_0x9f6cx2)
	}
	, getOriginalResource: function () {
		return this['originalResource'] || this['originalAssignment'] && this['originalAssignment']['getResource']()
	}
	, setOriginalResource: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['originalResource'] !== _0x9f6cx2) {
			_0x9f6cx1['originalResource'] = _0x9f6cx2;
			if (!_0x9f6cx1['isInSyncWithOriginal']()) {
				_0x9f6cx1['syncFromOriginal']()
			}
		}
	}
	, getOriginalAssignment: function () {
		return this['originalAssignment']
	}
	, setOriginalAssignment: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['originalAssignment'] !== _0x9f6cx2) {
			_0x9f6cx1['originalAssignment'] = _0x9f6cx2;
			if (!_0x9f6cx1['isInSyncWithOriginal']()) {
				_0x9f6cx1['syncFromOriginal']()
			}
		}
	}
	, getOriginalTask: function () {
		var _0x9f6cx1 = this['getOriginalAssignment']();
		return _0x9f6cx1 && _0x9f6cx1['getTask']() || null
	}
	, isSurrogateResource: function () {
		return !this['getOriginalAssignment']()
	}
	, isSurrogateAssignment: function () {
		return !!this['getOriginalAssignment']()
	}
	, isInSyncWithOriginal: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx3 = _0x9f6cx5['getOriginalResource']()
			, _0x9f6cx4 = _0x9f6cx5['getOriginalAssignment']()
			, _0x9f6cx2 = _0x9f6cx5['getOriginalTask']()
			, _0x9f6cx1 = true;
		if (_0x9f6cx4) {
			_0x9f6cx1 = _0x9f6cx1 && (_0x9f6cx5['getId']() == _0x9f6cx5['self']['getSurrogateIdFor'](_0x9f6cx4));
			if (_0x9f6cx2) {
				_0x9f6cx1 = _0x9f6cx1 && (_0x9f6cx5['getTaskName']() == _0x9f6cx2['getName']());
				_0x9f6cx1 = _0x9f6cx1 && (_0x9f6cx5['getTaskSequenceNumber']() == _0x9f6cx2['getSequenceNumber']())
			}
		}
		else {
			if (_0x9f6cx3) {
				_0x9f6cx1 = _0x9f6cx1 && (_0x9f6cx5['getId']() == _0x9f6cx5['self']['getSurrogateIdFor'](_0x9f6cx3));
				_0x9f6cx1 = _0x9f6cx1 && (_0x9f6cx5['getName']() == _0x9f6cx3['getName']())
			}
		};
		return _0x9f6cx1
	}
	, syncFromOriginal: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx5 = _0x9f6cx2['getOriginalResource']()
			, _0x9f6cx3 = _0x9f6cx2['getOriginalAssignment']()
			, _0x9f6cx1 = _0x9f6cx2['getOriginalTask']();
		_0x9f6cx2['beginEdit']();
		if (_0x9f6cx5 && !_0x9f6cx3) {
			_0x9f6cx2['setId'](_0x9f6cx2['self']['getSurrogateIdFor'](_0x9f6cx5))
		};
		if (_0x9f6cx3 && !_0x9f6cx5) {
			_0x9f6cx2['setId'](_0x9f6cx2['self']['getSurrogateIdFor'](_0x9f6cx3))
		};
		if (_0x9f6cx5) {
			_0x9f6cx2['setName'](_0x9f6cx5['getName']())
		};
		if (_0x9f6cx1) {
			_0x9f6cx2['setTaskName'](_0x9f6cx1['getName']());
			_0x9f6cx2['setTaskSequenceNumber'](_0x9f6cx1['getSequenceNumber']())
		};
		_0x9f6cx2['endEdit']()
	}
	, syncToOriginal: function () {
		Ext['Error']['raise']('Not implemented');
		var _0x9f6cx1 = false
	}
	, isInSyncWithSurrogate: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['originalResource'] === _0x9f6cx2['originalResource'] && _0x9f6cx1['originalAssignment'] === _0x9f6cx2['originalAssignment'] && _0x9f6cx1['getName']() === _0x9f6cx2['getName']() && _0x9f6cx1['getTaskName']() === _0x9f6cx2['getTaskName']() && _0x9f6cx1['getTaskSequenceNumber']() === _0x9f6cx2['getTaskSequenceNumber']()
	}
	, syncFromSurrogate: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['originalResource'] = _0x9f6cx2['originalResource'];
		_0x9f6cx1['originalAssignment'] = _0x9f6cx2['originalAssignment'];
		_0x9f6cx1['beginEdit']();
		_0x9f6cx1['setId'](_0x9f6cx2['getId']());
		_0x9f6cx1['setName'](_0x9f6cx2['getName']());
		_0x9f6cx1['setTaskName'](_0x9f6cx2['getTaskName']());
		_0x9f6cx1['setTaskSequenceNumber'](_0x9f6cx2['getTaskSequenceNumber']());
		_0x9f6cx1['endEdit']()
	}
	, inheritableStatics: {
		getSurrogateIdFor: function (_0x9f6cx1) {
			var _0x9f6cx5 = _0x9f6cx1['getId']();
			if (_0x9f6cx1 instanceof Ext.ux.Gantt['model']['Resource']) {
				_0x9f6cx5 = 'resource-' + _0x9f6cx5
			}
			else {
				if (_0x9f6cx1 instanceof Ext.ux.Gantt['model']['Assignment']) {
					_0x9f6cx5 = 'assignment-' + _0x9f6cx5
				}
				else {
					Ext['Error']['raise']('Wrong original record type');
					var _0x9f6cx2 = false
				}
			};
			return _0x9f6cx5
		}
	}
	, getResourceStore: function () {
		return this['store']
	}
}, function () {
	Ext['data']['NodeInterface']['decorate'](this)
});
Ext.define('Ext.ux.Gantt.data.ResourceUtilizationStore', {
	extend: 'Ext.ux.Scheduler.data.ResourceTreeStore'
	, uses: ['Ext.ux.Gantt.data.ResourceUtilizationEventStore', 'Ext.ux.Gantt.model.Resource', 'Ext.ux.Gantt.model.Assignment', 'Ext.ux.Gantt.model.UtilizationEvent', 'Ext.ux.Gantt.model.utilization.ResourceStoreUtilizationNegotiationStrategy']
	, mixins: ['Ext.ux.Gantt.model.utilization.UtilizationNegotiationStrategyMixin']
	, model: 'Ext.ux.Gantt.model.UtilizationResource'
	, eventModel: 'Ext.ux.Gantt.model.UtilizationEvent'
	, autoDestroy: true
	, storeId: null
	, root: {
		expanded: true
	}
	, proxy: 'memory'
	, config: {
		defaultResourceExpandedState: false
		, taskStore: null
		, resourceStore: null
		, assignmentStore: null
		, timeAxis: null
		, underUtilizationThreshold: null
		, overUtilizationThreshold: null
	}
	, folderSort: false
	, taskStoreDetacher: null
	, resourceStoreDetacher: null
	, assignmentStoreDetacher: null
	, eventStoreDetacher: null
	, timeAxisDetacher: null
	, utilizationInfoCache: null
	, syncingWithOriginal: false
	, utilizationNegotiationStrategyClass: 'Ext.ux.Gantt.model.utilization.ResourceStoreUtilizationNegotiationStrategy'
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['eventModel'] = Ext['ClassManager']['get'](this['eventModel']);
		_0x9f6cx2['utilizationInfoCache'] = {};
		_0x9f6cx2['callParent']([_0x9f6cx1]);
		_0x9f6cx2['initUtilizationNegotiationStrategyMixin']({
			utilizationNegotiationStrategy: Ext['create'](_0x9f6cx2['utilizationNegotiationStrategyClass'], {
				underUtilizationThreshold: _0x9f6cx2['getUnderUtilizationThreshold']()
				, overUtilizationThreshold: _0x9f6cx2['getOverUtilizationThreshold']()
				, resourceUtilizationStore: _0x9f6cx2
			})
		});
		if (!_0x9f6cx2['getEventStore']()) {
			_0x9f6cx2['setEventStore'](new Ext.ux.Gantt['data'].ResourceUtilizationEventStore({
				model: _0x9f6cx2['eventModel']
				, resourceStore: _0x9f6cx2
			}))
		};
		_0x9f6cx2['setupSorters']()
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['callParent'](arguments);
		clearTimeout(_0x9f6cx1['fireReassignTimer']);
		Ext['destroy'](_0x9f6cx1['getEventStore']());
		_0x9f6cx1['setEventStore'](null)
	}
	, setupSorters: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['setSorters']([{
			sorterFn: function (_0x9f6cx4, _0x9f6cx3) {
				var _0x9f6cx5;
				if (_0x9f6cx4['isSurrogateResource']() && _0x9f6cx3['isSurrogateResource']() && _0x9f6cx4['getName']() > _0x9f6cx3['getName']()) {
					_0x9f6cx5 = 1
				}
				else {
					if (_0x9f6cx4['isSurrogateResource']() && _0x9f6cx3['isSurrogateResource']() && _0x9f6cx4['getName']() < _0x9f6cx3['getName']()) {
						_0x9f6cx5 = -1
					}
					else {
						if (_0x9f6cx4['isSurrogateResource']() && _0x9f6cx3['isSurrogateResource']()) {
							_0x9f6cx5 = 0
						}
						else {
							if (_0x9f6cx4['isSurrogateResource']() && _0x9f6cx3['isSurrogateAssignment']()) {
								_0x9f6cx5 = 1
							}
							else {
								if (_0x9f6cx4['isSurrogateAssignment']() && _0x9f6cx3['isSurrogateResource']()) {
									_0x9f6cx5 = -1
								}
								else {
									if (_0x9f6cx4['isSurrogateAssignment']() && _0x9f6cx3['isSurrogateAssignment']()) {
										_0x9f6cx5 = _0x9f6cx1['getUtilizationNegotiationStrategy']()['assignmentsComparator'](_0x9f6cx4['getOriginalAssignment'](), _0x9f6cx3['getOriginalAssignment']())
									}
									else {
										_0x9f6cx5 = 0
									}
								}
							}
						}
					}
				};
				return _0x9f6cx5
			}
		}])
	}
	, updateTaskStore: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		_0x9f6cx5 && Ext['destroy'](_0x9f6cx2['taskStoreDetacher']);
		if (_0x9f6cx1) {
			_0x9f6cx2['setResourceStore'](_0x9f6cx1['getResourceStore']() || _0x9f6cx2['setResourceStore']());
			_0x9f6cx2['setAssignmentStore'](_0x9f6cx1['getAssignmentStore']() || _0x9f6cx2['getAssignmentStore']());
			_0x9f6cx2['taskStoreDetacher'] = _0x9f6cx2['mon'](_0x9f6cx1, {
				load: _0x9f6cx2['onSourceDataTouch']
				, refresh: _0x9f6cx2['onSourceDataTouch']
				, clear: _0x9f6cx2['onSourceDataTouch']
				, add: _0x9f6cx2['onSourceDataTouch']
				, append: _0x9f6cx2['onSourceDataTouch']
				, update: _0x9f6cx2['onSourceDataTouch']
				, remove: _0x9f6cx2['onSourceDataTouch']
				, bulkremove: _0x9f6cx2['onSourceDataTouch']
				, move: _0x9f6cx2['onSourceDataTouch']
				, scope: _0x9f6cx2
				, destroyable: true
			})
		}
	}
	, updateResourceStore: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		_0x9f6cx5 && Ext['destroy'](_0x9f6cx2['resourceStoreDetacher']);
		if (_0x9f6cx1) {
			_0x9f6cx2['resourceStoreDetacher'] = _0x9f6cx2['mon'](_0x9f6cx1, {
				load: _0x9f6cx2['onSourceDataTouch']
				, refresh: _0x9f6cx2['onSourceDataTouch']
				, clear: _0x9f6cx2['onSourceDataTouch']
				, add: _0x9f6cx2['onSourceDataTouch']
				, update: _0x9f6cx2['onSourceDataTouch']
				, remove: _0x9f6cx2['onSourceDataTouch']
				, bulkremove: _0x9f6cx2['onSourceDataTouch']
				, scope: _0x9f6cx2
				, destroyable: true
			})
		}
	}
	, updateAssignmentStore: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		_0x9f6cx5 && Ext['destroy'](_0x9f6cx2['assignmentStoreDetacher']);
		if (_0x9f6cx1) {
			_0x9f6cx2['assignmentStoreDetacher'] = _0x9f6cx2['mon'](_0x9f6cx1, {
				load: _0x9f6cx2['onSourceDataTouch']
				, refresh: _0x9f6cx2['onSourceDataTouch']
				, clear: _0x9f6cx2['onSourceDataTouch']
				, add: _0x9f6cx2['onSourceDataTouch']
				, update: _0x9f6cx2['onSourceDataTouch']
				, remove: _0x9f6cx2['onSourceDataTouch']
				, bulkremove: _0x9f6cx2['onSourceDataTouch']
				, scope: _0x9f6cx2
				, destroyable: true
			})
		}
	}
	, setEventStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = this
			, _0x9f6cx5 = _0x9f6cx2['eventStore'];
		_0x9f6cx2['callParent']([_0x9f6cx1]);
		if (_0x9f6cx5 != _0x9f6cx1) {
			_0x9f6cx5 && Ext['destroy'](_0x9f6cx2['eventStoreDetacher']);
			if (_0x9f6cx1) {
				_0x9f6cx2['utilizationEventStoreDetacher'] = _0x9f6cx2['mon'](_0x9f6cx1, {
					update: _0x9f6cx2['onUtilizationEventStoreUpdate']
					, scope: _0x9f6cx2
				})
			}
		}
	}
	, updateTimeAxis: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = this;
		_0x9f6cx2 && Ext['destroy'](_0x9f6cx5['timeAxisDetacher']);
		if (_0x9f6cx1) {
			_0x9f6cx5['timeAxisDetacher'] = _0x9f6cx5['mon'](_0x9f6cx1, {
				reconfigure: _0x9f6cx5['onSourceDataTouch']
				, scope: _0x9f6cx5
				, destroyable: true
			})
		}
	}
	, makeSurrogateResource: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['model'];
		return new _0x9f6cx2['model']({
			Id: _0x9f6cx1['getSurrogateIdFor'](_0x9f6cx5)
			, originalResource: _0x9f6cx5
			, expanded: _0x9f6cx2['getDefaultResourceExpandedState']()
		})
	}
	, makeSurrogateAssignment: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['model'];
		return new _0x9f6cx1({
			Id: _0x9f6cx1['getSurrogateIdFor'](_0x9f6cx2)
			, originalAssignment: _0x9f6cx2
			, leaf: true
		})
	}
	, makeSurrogateAssignmentEvent: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['eventModel']
			, _0x9f6cx3 = _0x9f6cx2['getSurrogateIdFor'](_0x9f6cx1);
		return new _0x9f6cx2({
			Id: _0x9f6cx3
			, ResourceId: _0x9f6cx3
			, originalResource: _0x9f6cx1 instanceof Ext.ux.Gantt['model']['Resource'] && _0x9f6cx1 || null
			, originalAssignment: _0x9f6cx1 instanceof Ext.ux.Gantt['model']['Assignment'] && _0x9f6cx1 || null
			, utilizationNegotiationStrategy: _0x9f6cx5['getUtilizationNegotiationStrategy']()
		})
	}
	, cloneSurrogateAssignmentEvent: function (_0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx1['clone']();
		_0x9f6cx2['setUtilizationNegotiationStrategy'](this['getUtilizationNegotiationStrategy']());
		return _0x9f6cx2
	}
	, makeSurrogateResourceBranch: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx4 = _0x9f6cx2['makeSurrogateResource'](_0x9f6cx5)
			, _0x9f6cx1 = []
			, _0x9f6cx3;
		_0x9f6cx5['forEachAssignment'](function (_0x9f6cx6) {
			var _0x9f6cx7 = _0x9f6cx6['getTask']();
			if (_0x9f6cx7 && !_0x9f6cx7['isUnscheduled']()) {
				_0x9f6cx4['appendChild'](_0x9f6cx2['makeSurrogateAssignment'](_0x9f6cx6));
				_0x9f6cx1['push'](_0x9f6cx2['makeSurrogateAssignmentEvent'](_0x9f6cx6))
			}
		});
		if (_0x9f6cx1['length'] > 0) {
			_0x9f6cx3 = _0x9f6cx2['makeSurrogateAssignmentEvent'](_0x9f6cx5);
			_0x9f6cx1['push'](_0x9f6cx3)
		};
		return {
			resource: _0x9f6cx4
			, events: _0x9f6cx1
		}
	}
	, fillStore: function () {
		var _0x9f6cx4 = this
			, _0x9f6cx1 = _0x9f6cx4['getRoot']()
			, _0x9f6cx3 = _0x9f6cx4['getResourceStore']()
			, _0x9f6cx2 = _0x9f6cx4['getEventStore']()
			, _0x9f6cx6 = _0x9f6cx3 && _0x9f6cx3['getRange']()
			, _0x9f6cx5 = []
			, _0x9f6cx7 = [];
		_0x9f6cx4['syncingWithOriginal'] = true;
		_0x9f6cx1['removeAll']();
		_0x9f6cx2['removeAll']();
		_0x9f6cx6 && Ext['Array']['each'](_0x9f6cx6, function (_0x9f6cx9) {
			var _0x9f6cx8 = _0x9f6cx4['makeSurrogateResourceBranch'](_0x9f6cx9);
			_0x9f6cx5['push'](_0x9f6cx8['resource']);
			_0x9f6cx7 = _0x9f6cx7['concat'](_0x9f6cx8['events'])
		});
		_0x9f6cx2['add'](_0x9f6cx7);
		_0x9f6cx1['appendChild'](_0x9f6cx5);
		_0x9f6cx4['sorters'] && _0x9f6cx4['sorters']['getCount']() && _0x9f6cx1['sort']();
		_0x9f6cx4['syncingWithOriginal'] = false
	}
	, diffSyncStore: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1;
		_0x9f6cx2['syncingWithOriginal'] = true;
		_0x9f6cx2['fireEvent']('sync-start', _0x9f6cx2);
		_0x9f6cx2['suspendEvents']();
		_0x9f6cx1 = new _0x9f6cx2['self']({
			underUtilizationThreshold: _0x9f6cx2['getUnderUtilizationThreshold']()
			, overUtilizationThreshold: _0x9f6cx2['getOverUtilizationThreshold']()
			, timeAxis: _0x9f6cx2['getTimeAxis']()
			, taskStore: _0x9f6cx2['getTaskStore']()
		});
		_0x9f6cx1['suspendEvents']();
		_0x9f6cx1['fillStore']();
		_0x9f6cx2['removeOutdatedSurrogateAssignments'](_0x9f6cx2, _0x9f6cx1);
		_0x9f6cx2['removeOutdatedSurrogateResources'](_0x9f6cx2, _0x9f6cx1);
		_0x9f6cx2['addNewSurrogateResources'](_0x9f6cx2, _0x9f6cx1);
		_0x9f6cx2['addNewSurrogateAssignments'](_0x9f6cx2, _0x9f6cx1);
		_0x9f6cx2['updatePresentSurrogates'](_0x9f6cx2, _0x9f6cx1);
		_0x9f6cx2['rearrangePresentSurrogates'](_0x9f6cx2, _0x9f6cx1);
		_0x9f6cx2['utilizationInfoCache'] = _0x9f6cx1['utilizationInfoCache'];
		Ext['destroy'](_0x9f6cx1);
		_0x9f6cx2['resumeEvents']();
		_0x9f6cx2['fireEvent']('sync-complete', _0x9f6cx2);
		_0x9f6cx2['fireEvent']('refresh', _0x9f6cx2);
		_0x9f6cx2['syncingWithOriginal'] = false
	}
	, removeOutdatedSurrogateAssignments: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx4 = _0x9f6cx1['getRoot']()
			, _0x9f6cx3 = []
			, _0x9f6cx5 = [];
		_0x9f6cx4['cascadeBy'](function (_0x9f6cx7) {
			var _0x9f6cx6 = _0x9f6cx2['getModelById'](_0x9f6cx7['getId']());
			if (!_0x9f6cx7['isRoot']() && _0x9f6cx7['isSurrogateAssignment']()) {
				if (!_0x9f6cx6 || (_0x9f6cx6['parentNode']['getId']() != _0x9f6cx7['parentNode']['getId']())) {
					_0x9f6cx3['push'](_0x9f6cx7);
					_0x9f6cx5 = _0x9f6cx5['concat'](_0x9f6cx7['getEvents']())
				}
			}
			else {
				if (!_0x9f6cx7['isRoot']() && _0x9f6cx7['isSurrogateResource']()) {
					_0x9f6cx5 = _0x9f6cx5['concat'](Ext['Array']['filter'](_0x9f6cx7['getEvents'](), function (_0x9f6cx8) {
						return _0x9f6cx8['isSurrogateAssignment']() || (_0x9f6cx6 && _0x9f6cx6['childNodes']['length'] === 0)
					}))
				}
			}
		});
		_0x9f6cx1['getEventStore']()['remove'](_0x9f6cx5);
		Ext['Array']['each'](_0x9f6cx3, function (_0x9f6cx7) {
			_0x9f6cx7['remove']()
		})
	}
	, removeOutdatedSurrogateResources: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx4 = _0x9f6cx1['getRoot']()
			, _0x9f6cx3 = []
			, _0x9f6cx5 = [];
		_0x9f6cx4['cascadeBy'](function (_0x9f6cx7) {
			var _0x9f6cx6;
			if (!_0x9f6cx7['isRoot']() && _0x9f6cx7['isSurrogateResource']()) {
				_0x9f6cx6 = _0x9f6cx2['getModelById'](_0x9f6cx7['getId']());
				if (!_0x9f6cx6) {
					_0x9f6cx3['push'](_0x9f6cx7);
					_0x9f6cx5 = _0x9f6cx5['concat'](_0x9f6cx7['getEvents']())
				}
			}
		});
		_0x9f6cx1['getEventStore']()['remove'](_0x9f6cx5);
		Ext['Array']['each'](_0x9f6cx3, function (_0x9f6cx7) {
			_0x9f6cx7['remove']()
		})
	}
	, addNewSurrogateResources: function (_0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx5 = _0x9f6cx3['getRoot']()
			, _0x9f6cx7 = _0x9f6cx1['getRoot']()
			, _0x9f6cx2 = _0x9f6cx1['getEventStore']()
			, _0x9f6cx4 = [];
		_0x9f6cx5['cascadeBy'](function (_0x9f6cx8) {
			var _0x9f6cx6;
			if (!_0x9f6cx8['isRoot']() && _0x9f6cx8['isSurrogateResource']()) {
				_0x9f6cx6 = _0x9f6cx1['getModelById'](_0x9f6cx8['getId']());
				if (!_0x9f6cx6) {
					_0x9f6cx7['insertChild'](_0x9f6cx8['get']('index'), _0x9f6cx1['makeSurrogateResource'](_0x9f6cx8['getOriginalResource']()));
					_0x9f6cx4['push'](_0x9f6cx1['makeSurrogateAssignmentEvent'](_0x9f6cx8['getOriginalResource']()))
				}
				else {
					if (_0x9f6cx6['getEvents']()['length'] === 0) {
						_0x9f6cx4 = _0x9f6cx4['concat'](Ext['Array']['map'](_0x9f6cx8['getEvents'](), function (_0x9f6cx9) {
							return _0x9f6cx1['cloneSurrogateAssignmentEvent'](_0x9f6cx9)
						}))
					}
				}
			}
		});
		_0x9f6cx2['add'](_0x9f6cx4)
	}
	, addNewSurrogateAssignments: function (_0x9f6cx1, _0x9f6cx4) {
		var _0x9f6cx5 = _0x9f6cx4['getRoot']()
			, _0x9f6cx3 = _0x9f6cx1['getEventStore']()
			, _0x9f6cx2 = [];
		_0x9f6cx5['cascadeBy'](function (_0x9f6cx9) {
			var _0x9f6cx6, _0x9f6cx8, _0x9f6cx7;
			if (!_0x9f6cx9['isRoot']() && _0x9f6cx9['isSurrogateAssignment']()) {
				_0x9f6cx6 = _0x9f6cx1['getModelById'](_0x9f6cx9['getId']());
				if (!_0x9f6cx6) {
					_0x9f6cx8 = _0x9f6cx9['parentNode'];
					_0x9f6cx7 = _0x9f6cx1['getModelById'](_0x9f6cx8['getId']());
					if (_0x9f6cx7) {
						_0x9f6cx7['insertChild'](_0x9f6cx9['get']('index'), _0x9f6cx1['makeSurrogateAssignment'](_0x9f6cx9['getOriginalAssignment']()));
						_0x9f6cx2 = _0x9f6cx2['concat'](Ext['Array']['map'](_0x9f6cx9['getEvents'](), function (_0x9f6cxc) {
							return _0x9f6cx1['cloneSurrogateAssignmentEvent'](_0x9f6cxc)
						}))
					}
				}
			}
		});
		_0x9f6cx3['add'](_0x9f6cx2)
	}
	, updatePresentSurrogates: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = _0x9f6cx1['getRoot']();
		_0x9f6cx5['cascadeBy'](function (_0x9f6cx4) {
			var _0x9f6cx6, _0x9f6cx7, _0x9f6cx3;
			if (!_0x9f6cx4['isRoot']()) {
				_0x9f6cx6 = _0x9f6cx2['getModelById'](_0x9f6cx4['getId']());
				if (_0x9f6cx6) {
					if (!_0x9f6cx4['isInSyncWithSurrogate'](_0x9f6cx6)) {
						_0x9f6cx4['syncFromSurrogate'](_0x9f6cx6)
					};
					_0x9f6cx7 = _0x9f6cx6['getEvents']()[0];
					if (_0x9f6cx7) {
						_0x9f6cx3 = _0x9f6cx1['getEventStore']()['getModelById'](_0x9f6cx7['getId']());
						if (_0x9f6cx3 && !_0x9f6cx3['isInSyncWithSurrogate'](_0x9f6cx7)) {
							_0x9f6cx3['syncFromSurrogate'](_0x9f6cx7)
						}
					}
					else {
						_0x9f6cx4['syncFromOriginal'](_0x9f6cx6)
					}
				}
			}
		})
	}
	, rearrangePresentSurrogates: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = _0x9f6cx5['getRoot']();
		_0x9f6cx2['cascadeBy'](function (_0x9f6cx4) {
			var _0x9f6cx3;
			if (!_0x9f6cx4['isRoot']()) {
				_0x9f6cx3 = _0x9f6cx1['getModelById'](_0x9f6cx4['getId']());
				if (_0x9f6cx3 && _0x9f6cx3['get']('index') != _0x9f6cx4['get']('index')) {
					_0x9f6cx3['parentNode']['insertChild'](_0x9f6cx4['get']('index'), _0x9f6cx3)
				}
			}
		})
	}
	, clearUtilizationInfoCache: function () {
		this['utilizationInfoCache'] = {}
	}
	, getModelByOriginal: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['getModelById'](_0x9f6cx1['model']['getSurrogateIdFor'](_0x9f6cx2))
	}
	, onSourceDataTouch: Ext['Function']['createBuffered'](function () {
		var _0x9f6cx1 = this;
		if (!_0x9f6cx1['isDestroyed']) {
			_0x9f6cx1['clearUtilizationInfoCache']();
			_0x9f6cx1['diffSyncStore']()
		}
	}, 10)
	, onUtilizationEventStoreUpdate: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1, _0x9f6cx4) {
		var _0x9f6cx3 = this;
		if (!_0x9f6cx3['syncingWithOriginal']) {
			if (!_0x9f6cx2['isInSyncWithOriginal']()) {
				_0x9f6cx2['syncToOriginal']()
			};
			if (Ext['Array']['contains'](_0x9f6cx4, _0x9f6cx2['resourceIdField'])) {
				var _0x9f6cx7 = _0x9f6cx2['getResource']();
				_0x9f6cx3['fireReassignTimer'] = Ext['Function']['defer'](function () {
					_0x9f6cx3['fireEvent']('reassign', _0x9f6cx3, _0x9f6cx7['getOriginalResource'](), _0x9f6cx7['getOriginalTask'](), _0x9f6cx2['getOriginalResource'](), _0x9f6cx2['getOriginalTask'](), _0x9f6cx2['getOriginalAssignment']())
				}, 1)
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.data.calendar.BusinessTime', {
	extend: 'Ext.ux.Gantt.data.Calendar'
	, daysPerMonth: 20
	, daysPerWeek: 5
	, hoursPerDay: 8
	, defaultAvailability: ['08:00-12:00', '13:00-17:00']
});
Ext.define('Robo.util.Array', {
	singleton: true
	, reduce: function (_0x9f6cx7, _0x9f6cx4, _0x9f6cx1) {
		_0x9f6cx7 = Object(_0x9f6cx7);
		if (!Ext['isFunction'](_0x9f6cx4)) {
			Ext['raise']('Invalid parameter: expected a function.')
		};
		var _0x9f6cx5 = 0
			, _0x9f6cx3 = _0x9f6cx7['length'] >>> 0
			, _0x9f6cx2 = _0x9f6cx1;
		if (arguments['length'] < 3) {
			while (true) {
				if (_0x9f6cx5 in _0x9f6cx7) {
					_0x9f6cx2 = _0x9f6cx7[_0x9f6cx5++];
					break
				};
				if (++_0x9f6cx5 >= _0x9f6cx3) {
					throw new TypeError('Reduce of empty array with no initial value')
				}
			}
		};
		for (; _0x9f6cx5 < _0x9f6cx3; ++_0x9f6cx5) {
			if (_0x9f6cx5 in _0x9f6cx7) {
				_0x9f6cx2 = _0x9f6cx4(_0x9f6cx2, _0x9f6cx7[_0x9f6cx5], _0x9f6cx5, _0x9f6cx7)
			}
		};
		return _0x9f6cx2
	}
});
Ext.define('Robo.Transaction', {
	actions: null
	, title: null
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		Ext['apply'](this, _0x9f6cx1);
		this['callParent']([_0x9f6cx1]);
		this['actions'] = []
	}
	, hasActions: function () {
		return this['actions']['length'] > 0
	}
	, addAction: function (_0x9f6cx1) {
		this['actions']['push'](_0x9f6cx1)
	}
	, getActions: function () {
		return this['actions']
	}
	, undo: function () {
		for (var _0x9f6cx1 = this['actions']['length'] - 1; _0x9f6cx1 >= 0; _0x9f6cx1--) {
			this['actions'][_0x9f6cx1]['undo']()
		}
	}
	, redo: function () {
		for (var _0x9f6cx1 = 0; _0x9f6cx1 < this['actions']['length']; _0x9f6cx1++) {
			this['actions'][_0x9f6cx1]['redo']()
		}
	}
	, getTitle: function () {
		if (this['title']) {
			return this['title']
		};
		var _0x9f6cx1 = this['actions'][0];
		return _0x9f6cx1 ? _0x9f6cx1['getTitle']() : null
	}
});
Ext.define('Robo.action.Base', {
	constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1)
	}
	, undo: function () {
		throw new Error('Abstract method call')
	}
	, redo: function () {
		throw new Error('Abstract method call')
	}
	, getTitle: function () {
		return ''
	}
});
Ext.define('Robo.action.flat.Update', {
	extend: 'Robo.action.Base'
	, requires: ['Ext.Array']
	, inheritableStatics: {
		CUSTOMLY_PROCESSED: {}
	}
	, config: {
		record: null
		, fieldNames: null
	}
	, oldValues: null
	, newValues: null
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['callParent']([_0x9f6cx1]);
		_0x9f6cx2['initConfig'](_0x9f6cx1);
		_0x9f6cx2['saveValues']()
	}
	, saveValues: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getRecord']()
			, _0x9f6cx5 = _0x9f6cx2['getFieldNames']();
		if (_0x9f6cx5) {
			_0x9f6cx2['oldValues'] = Ext['Array']['map'](_0x9f6cx5, function (_0x9f6cx3) {
				return _0x9f6cx2['processSavingOldValue'](_0x9f6cx3, _0x9f6cx1)
			});
			_0x9f6cx2['newValues'] = Ext['Array']['map'](_0x9f6cx5, function (_0x9f6cx3) {
				return _0x9f6cx2['processSavingNewValue'](_0x9f6cx3, _0x9f6cx1)
			})
		}
	}
	, undo: function () {
		var _0x9f6cx2, _0x9f6cx3 = this
			, _0x9f6cx1 = _0x9f6cx3['getRecord']()
			, _0x9f6cx4 = _0x9f6cx3['getFieldNames']()
			, _0x9f6cx5;
		if (_0x9f6cx4) {
			_0x9f6cx2 = _0x9f6cx3['self']['CUSTOMLY_PROCESSED'];
			_0x9f6cx1['beginEdit']();
			_0x9f6cx5 = Robo['util']['Array']['reduce'](_0x9f6cx4, function (_0x9f6cx8, _0x9f6cxc, _0x9f6cx7) {
				var _0x9f6cx6;
				if (_0x9f6cxc) {
					_0x9f6cx6 = _0x9f6cx3['processRestoringValue'](_0x9f6cx3['oldValues'][_0x9f6cx7], _0x9f6cxc, _0x9f6cx1, 'undo');
					if (_0x9f6cx6 !== _0x9f6cx2) {
						_0x9f6cx8[_0x9f6cxc] = _0x9f6cx6
					}
				};
				return _0x9f6cx8
			}, {});
			_0x9f6cx1['set'](_0x9f6cx5);
			_0x9f6cx1['endEdit']()
		}
	}
	, redo: function () {
		var _0x9f6cx2, _0x9f6cx3 = this
			, _0x9f6cx1 = _0x9f6cx3['getRecord']()
			, _0x9f6cx4 = _0x9f6cx3['getFieldNames']()
			, _0x9f6cx5;
		if (_0x9f6cx4) {
			_0x9f6cx2 = _0x9f6cx3['self']['CUSTOMLY_PROCESSED'];
			_0x9f6cx1['beginEdit']();
			_0x9f6cx5 = Robo['util']['Array']['reduce'](_0x9f6cx4, function (_0x9f6cx8, _0x9f6cxc, _0x9f6cx7) {
				var _0x9f6cx6;
				if (_0x9f6cxc) {
					_0x9f6cx6 = _0x9f6cx3['processRestoringValue'](_0x9f6cx3['newValues'][_0x9f6cx7], _0x9f6cxc, _0x9f6cx1, 'redo');
					if (_0x9f6cx6 !== _0x9f6cx2) {
						_0x9f6cx8[_0x9f6cxc] = _0x9f6cx6
					}
				};
				return _0x9f6cx8
			}, {});
			_0x9f6cx1['set'](_0x9f6cx5);
			_0x9f6cx1['endEdit']()
		}
	}
	, processSavingOldValue: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = (_0x9f6cx2['previous'] && _0x9f6cx2['previous']['hasOwnProperty'](_0x9f6cx5) && _0x9f6cx2['previous'] || _0x9f6cx2['previousValues'] && _0x9f6cx2['previousValues']['hasOwnProperty'](_0x9f6cx5) && _0x9f6cx2['previousValues'] || _0x9f6cx2['editMementoFix'] && _0x9f6cx2['editMementoFix']['previousValues'] && _0x9f6cx2['editMementoFix']['previousValues']['hasOwnProperty'](_0x9f6cx5) && _0x9f6cx2['editMementoFix']['previousValues'] || _0x9f6cx2['editMementoFix'] && _0x9f6cx2['editMementoFix']['data'] && _0x9f6cx2['editMementoFix']['data']['hasOwnProperty'](_0x9f6cx5) && _0x9f6cx2['editMementoFix']['data']);
		if (!_0x9f6cx1) {
			throw 'Can not get previous value'
		};
		return _0x9f6cx1[_0x9f6cx5]
	}
	, processSavingNewValue: function (_0x9f6cx2, _0x9f6cx1) {
		return _0x9f6cx1['get'](_0x9f6cx2)
	}
	, processRestoringValue: Ext['identityFn']
	, getTitle: function () {
		var _0x9f6cx1 = this['getRecord']();
		var _0x9f6cx2 = this['getFieldNames']();
		if (_0x9f6cx1['getTitle']) {
			return 'Edit of ' + _0x9f6cx2[0] + ' for ' + _0x9f6cx1['getTitle'](this)
		};
		if (_0x9f6cx1['modelName']) {
			return 'Edit of ' + _0x9f6cx1['modelName'] + ' ' + _0x9f6cx1['getId']()
		};
		return ''
	}
});
Ext.define('Robo.action.flat.Add', {
	extend: 'Robo.action.Base'
	, store: null
	, records: null
	, index: null
	, undo: function () {
		var _0x9f6cx1 = this['records'];
		this['store']['remove'](_0x9f6cx1);
		for (var _0x9f6cx2 = 0; _0x9f6cx2 < _0x9f6cx1['length']; _0x9f6cx2++) {
			this['store']['removeFromRemoved'](_0x9f6cx1[_0x9f6cx2])
		}
	}
	, redo: function () {
		this['store']['insert'](this['index'], this['records'])
	}
	, getRecord: function () {
		return this['records'][0]
	}
	, getTitle: function () {
		var _0x9f6cx1 = this;
		var _0x9f6cx2 = Ext['Array']['map'](this['records'], function (_0x9f6cx5) {
			if (_0x9f6cx5['getTitle']) {
				return _0x9f6cx5['getTitle'](_0x9f6cx1)
			};
			if (_0x9f6cx5['modelName']) {
				return _0x9f6cx5['modelName'] + ' ' + _0x9f6cx5['getId']()
			};
			return 'unknown'
		});
		return 'Addition of ' + _0x9f6cx2.join(',')
	}
});
Ext.define('Robo.action.flat.Remove', {
	extend: 'Robo.action.Base'
	, store: null
	, records: null
	, index: null
	, undo: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['store']['insert'](_0x9f6cx1['index'], _0x9f6cx1['records'])
	}
	, redo: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['store']['remove'](_0x9f6cx1['records'])
	}
	, getRecord: function () {
		return this['records'][0]
	}
	, getTitle: function () {
		var _0x9f6cx1 = this;
		var _0x9f6cx2 = Ext['Array']['map'](this['records'], function (_0x9f6cx5) {
			if (_0x9f6cx5['getTitle']) {
				return _0x9f6cx5['getTitle'](_0x9f6cx1)
			};
			if (_0x9f6cx5['modelName']) {
				return _0x9f6cx5['modelName'] + ' ' + _0x9f6cx5['getId']()
			};
			return 'unknown'
		});
		return 'Removal of ' + _0x9f6cx2.join(',')
	}
});
Ext.define('Robo.action.tree.Append', {
	extend: 'Robo.action.Base'
	, parent: null
	, newChild: null
	, undo: function () {
		var _0x9f6cx1 = this['newChild'];
		this['parent']['removeChild'](_0x9f6cx1);
		delete _0x9f6cx1['data']['lastParentId'];
		var _0x9f6cx2 = this['parent']['getTreeStore']();
		Ext['Array']['remove'](_0x9f6cx2['removedNodes'], _0x9f6cx1)
	}
	, redo: function () {
		this['parent']['appendChild'](this['newChild'])
	}
	, getRecord: function () {
		return this['newChild']
	}
	, getTitle: function () {
		var _0x9f6cx1 = this['newChild'];
		var _0x9f6cx2;
		if (_0x9f6cx1['getTitle']) {
			_0x9f6cx2 = _0x9f6cx1['getTitle'](this)
		}
		else {
			if (_0x9f6cx1['modelName']) {
				return _0x9f6cx1['modelName'] + ' ' + _0x9f6cx1['getId']()
			}
		};
		return 'Append of ' + _0x9f6cx2
	}
});
Ext.define('Robo.action.tree.Insert', {
	extend: 'Robo.action.Base'
	, parent: null
	, newChild: null
	, insertedBefore: null
	, undo: function () {
		var _0x9f6cx1 = this['newChild'];
		this['parent']['removeChild'](_0x9f6cx1);
		delete _0x9f6cx1['data']['lastParentId'];
		var _0x9f6cx2 = this['parent']['getTreeStore']();
		Ext['Array']['remove'](_0x9f6cx2['removedNodes'], _0x9f6cx1)
	}
	, redo: function () {
		var _0x9f6cx2 = this['insertedBefore'];
		var _0x9f6cx1 = _0x9f6cx2 && _0x9f6cx2['isFirst']();
		this['parent']['insertBefore'](this['newChild'], _0x9f6cx2);
		if (_0x9f6cx1) {
			_0x9f6cx2['updateInfo'](false, {
				isFirst: false
			})
		}
	}
	, getRecord: function () {
		return this['newChild']
	}
	, getTitle: function () {
		var _0x9f6cx1 = this['newChild'];
		var _0x9f6cx2;
		if (_0x9f6cx1['getTitle']) {
			_0x9f6cx2 = _0x9f6cx1['getTitle'](this)
		}
		else {
			if (_0x9f6cx1['modelName']) {
				return _0x9f6cx1['modelName'] + ' ' + _0x9f6cx1['getId']()
			}
		};
		return 'Insertion of ' + _0x9f6cx2
	}
});
Ext.define('Robo.action.tree.Remove', {
	extend: 'Robo.action.Base'
	, parent: null
	, removedChild: null
	, nextSibling: null
	, newParent: null
	, newNextSibling: null
	, dirty: false
	, isMove: false
	, constructor: function (_0x9f6cx1) {
		this['callParent'](arguments);
		this['dirty'] = this['removedChild']['dirty']
	}
	, undo: function () {
		if (this['isMove']) {
			this['newParent'] = this['removedChild']['parentNode'];
			this['newNextSibling'] = this['removedChild']['nextSibling']
		};
		var _0x9f6cx5 = this['nextSibling'];
		var _0x9f6cx2 = _0x9f6cx5 && _0x9f6cx5['isFirst']();
		var _0x9f6cx3 = this['removedChild'];
		this['parent']['insertBefore'](_0x9f6cx3, _0x9f6cx5);
		_0x9f6cx3['dirty'] = this['dirty'];
		if (!this['isMove']) {
			var _0x9f6cx1 = _0x9f6cx3['getTreeStore']();
			_0x9f6cx3['cascadeBy'](function (_0x9f6cx4) {
				Ext['Array']['remove'](_0x9f6cx1['removedNodes'], _0x9f6cx4)
			})
		};
		if (_0x9f6cx2) {
			_0x9f6cx5['updateInfo'](false, {
				isFirst: false
			})
		}
	}
	, redo: function () {
		if (this['isMove']) {
			var _0x9f6cx2 = this['newNextSibling'];
			var _0x9f6cx1 = _0x9f6cx2 && _0x9f6cx2['isFirst']();
			this['newParent']['insertBefore'](this['removedChild'], _0x9f6cx2);
			if (_0x9f6cx1) {
				_0x9f6cx2['updateInfo'](false, {
					isFirst: false
				})
			}
		}
		else {
			this['parent']['removeChild'](this['removedChild']);
			delete this['removedChild']['data']['lastParentId']
		}
	}
	, getRecord: function () {
		return this['removedChild']
	}
	, getTitle: function () {
		var _0x9f6cx1 = this['removedChild'];
		var _0x9f6cx2;
		if (_0x9f6cx1['getTitle']) {
			_0x9f6cx2 = _0x9f6cx1['getTitle'](this)
		}
		else {
			if (_0x9f6cx1['modelName']) {
				return _0x9f6cx1['modelName'] + ' ' + _0x9f6cx1['getId']()
			}
		};
		return this['isMove'] ? 'Move of ' + _0x9f6cx2 : 'Removal of ' + _0x9f6cx2
	}
});
Ext.define('Robo.action.tree.Update', {
	extend: 'Robo.action.flat.Update'
	, processRestoringValue: function (_0x9f6cx5, _0x9f6cx4, _0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx4 === 'expanded') {
			if (_0x9f6cx5) {
				_0x9f6cx1['expand']()
			}
			else {
				_0x9f6cx1['collapse']()
			};
			_0x9f6cx5 = _0x9f6cx2['self']['CUSTOMLY_PROCESSED']
		}
		else {
			if (_0x9f6cx4 == 'leaf') {
				_0x9f6cx5 = _0x9f6cx2['callParent'](arguments);
				if (_0x9f6cx5 === true && _0x9f6cx3 == 'undo') {
					_0x9f6cx1['data']['loaded'] = false
				}
			}
			else {
				_0x9f6cx5 = _0x9f6cx2['callParent'](arguments)
			}
		};
		return _0x9f6cx5
	}
});
Ext.define('Robo.Manager', {
	extend: 'Ext.util.Observable'
	, requires: ['Robo.util.Array', 'Robo.Transaction', 'Robo.data.Model', 'Robo.action.flat.Update', 'Robo.action.flat.Add', 'Robo.action.flat.Remove', 'Robo.action.tree.Append', 'Robo.action.tree.Insert', 'Robo.action.tree.Remove', 'Robo.action.tree.Update', 'Ext.data.Store', 'Ext.data.StoreManager']
	, stores: null
	, storesById: null
	, treeStoreListeners: null
	, flatStoreListeners: null
	, stub: function () {}
	, undoQueue: null
	, redoQueue: null
	, ignoredFieldNames: {
		expanded: 1
	}
	, state: 'created'
	, transactionBoundary: 'timeout'
	, transactionMaxDuration: 100
	, clearQueuesOnLoad: false
	, transactionTimeout: null
	, currentTransaction: null
	, constructor: function (_0x9f6cx2) {
		var _0x9f6cx5 = this;
		_0x9f6cx2 = _0x9f6cx2 || {};
		Ext['apply'](_0x9f6cx5, _0x9f6cx2);
		_0x9f6cx5['treeStoreListeners'] = {
			nodeappend: _0x9f6cx5['onTreeStoreAppend']
			, nodeinsert: _0x9f6cx5['onTreeStoreInsert']
			, noderemove: _0x9f6cx5['onTreeStoreRemove']
			, update: _0x9f6cx5['onTreeStoreUpdate']
			, scope: _0x9f6cx5
		};
		_0x9f6cx5['flatStoreListeners'] = {
			add: _0x9f6cx5['onFlatStoreAdd']
			, remove: _0x9f6cx5['onFlatStoreRemove']
			, update: _0x9f6cx5['onFlatStoreUpdate']
			, scope: _0x9f6cx5
		};
		if (_0x9f6cx5['clearQueuesOnLoad']) {
			Ext['apply'](_0x9f6cx5['treeStoreListeners'], {
				load: _0x9f6cx5['clearQueues']
				, clear: _0x9f6cx5['clearQueues']
			});
			Ext['apply'](_0x9f6cx5['flatStoreListeners'], {
				load: _0x9f6cx5['clearQueues']
				, clear: _0x9f6cx5['clearQueues']
			})
		};
		_0x9f6cx5['callParent']([_0x9f6cx2]);
		var _0x9f6cx1 = _0x9f6cx5['stores'] || [];
		_0x9f6cx5['stores'] = [];
		_0x9f6cx5['storesById'] = {};
		_0x9f6cx5['undoQueue'] = [];
		_0x9f6cx5['redoQueue'] = [];
		Ext['Array']['forEach'](_0x9f6cx1, function (_0x9f6cx3) {
			_0x9f6cx5['addStore'](_0x9f6cx3)
		})
	}
	, addStore: function (_0x9f6cx5, _0x9f6cx8) {
		_0x9f6cx5 = Ext['data']['StoreManager']['lookup'](_0x9f6cx5);
		Ext['Assert'] && Ext['Assert']['isObject'](_0x9f6cx5, 'Must provide a store or a valid store id');
		this['stores']['push'](_0x9f6cx5);
		if (_0x9f6cx8) {
			_0x9f6cx5['setStoreId'](_0x9f6cx8)
		};
		var _0x9f6cx3 = _0x9f6cx5['getModel']();
		var _0x9f6cx4 = _0x9f6cx3['prototype']['associations'] || {};
		for (var _0x9f6cx1 in _0x9f6cx4) {
			var _0x9f6cx6 = _0x9f6cx4[_0x9f6cx1];
			var _0x9f6cx2 = _0x9f6cx6['getAssociatedStore'];
			if (_0x9f6cx2 && !_0x9f6cx2['ROBO_MANAGED']) {
				var _0x9f6cx7 = this;
				_0x9f6cx6['getAssociatedStore'] = function () {
					var _0x9f6cx9 = _0x9f6cx2['apply'](this, arguments);
					if (!_0x9f6cx7['hasStore'](_0x9f6cx9)) {
						_0x9f6cx7['addStore'](_0x9f6cx9);
						if (_0x9f6cx7['state'] !== 'disabled' && _0x9f6cx7['state'] !== 'created') {
							_0x9f6cx7['bindStore'](_0x9f6cx9)
						}
					};
					return _0x9f6cx9
				};
				_0x9f6cx6['getAssociatedStore']['ROBO_MANAGED'] = true
			}
		};
		if (_0x9f6cx5['storeId']) {
			this['storesById'][_0x9f6cx5['storeId']] = _0x9f6cx5
		}
	}
	, getStoreById: function (_0x9f6cx1) {
		return this['storesById'][_0x9f6cx1]
	}
	, hasStore: function (_0x9f6cx1) {
		return Ext['Array']['indexOf'](this['stores'], _0x9f6cx1) != -1
	}
	, bindStore: function (_0x9f6cx1) {
		(_0x9f6cx1['undoRedoEventBus'] || _0x9f6cx1)['on'](this['getStoreTypeListeners'](_0x9f6cx1));
		if (_0x9f6cx1['undoRedoEventBus']) {
			_0x9f6cx1['on'](this['getStoreTypeListenerStubs'](_0x9f6cx1))
		}
	}
	, unbindStore: function (_0x9f6cx1) {
		(_0x9f6cx1['undoRedoEventBus'] || _0x9f6cx1)['un'](this['getStoreTypeListeners'](_0x9f6cx1));
		if (_0x9f6cx1['undoRedoEventBus']) {
			_0x9f6cx1['un'](this['getStoreTypeListenerStubs'](_0x9f6cx1))
		}
	}
	, getStoreTypeListenerStubs: function (_0x9f6cx1) {
		var _0x9f6cx5 = this;
		var _0x9f6cx2 = this['getStoreTypeListeners'](_0x9f6cx1);
		_0x9f6cx2 = Ext['apply']({}, _0x9f6cx2);
		Ext['Object']['each'](_0x9f6cx2, function (_0x9f6cx3, _0x9f6cx4) {
			_0x9f6cx2[_0x9f6cx3] = _0x9f6cx5['stub']
		});
		return _0x9f6cx2
	}
	, getStoreTypeListeners: function (_0x9f6cx1) {
		var _0x9f6cx2;
		if (Ext['data']['TreeStore'] && _0x9f6cx1 instanceof Ext['data']['TreeStore']) {
			_0x9f6cx2 = this['treeStoreListeners']
		}
		else {
			_0x9f6cx2 = this['flatStoreListeners']
		};
		return _0x9f6cx2
	}
	, removeStore: function (_0x9f6cx1) {
		Ext['Array']['remove'](this['stores'], _0x9f6cx1);
		this['storesById'][_0x9f6cx1['storeId']] = null;
		this['unbindStore'](_0x9f6cx1)
	}
	, forEachStore: function (_0x9f6cx1) {
		Ext['Array']['forEach'](this['stores'], _0x9f6cx1, this)
	}
	, onAnyChangeInAnyStore: function (_0x9f6cx1) {
		if (this['state'] === 'paused' || (_0x9f6cx1['isRootSettingOrLoading'] && _0x9f6cx1['isRootSettingOrLoading']())) {
			return false
		};
		if (!this['currentTransaction']) {
			this['startTransaction']()
		};
		return true
	}
	, hasPersistableChanges: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this['ignoredFieldNames'];
		return Robo['util']['Array']['reduce'](_0x9f6cx5, function (_0x9f6cx3, _0x9f6cx7) {
			var _0x9f6cx4 = _0x9f6cx1['getField'](_0x9f6cx7);
			return _0x9f6cx3 || !_0x9f6cx4 || (_0x9f6cx4['persist'] && (!_0x9f6cx1['isNode'] || !_0x9f6cx2['hasOwnProperty'](_0x9f6cx7)))
		}, false)
	}
	, onFlatStoreUpdate: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx2, _0x9f6cx3) {
		if (!this['onAnyChangeInAnyStore'](_0x9f6cx5) || _0x9f6cx2 != 'edit' || !_0x9f6cx3 || !_0x9f6cx3['length'] || !this['hasPersistableChanges'](_0x9f6cx1, _0x9f6cx3)) {
			return
		};
		this['currentTransaction']['addAction'](new Robo['action']['flat'].Update({
			record: _0x9f6cx1
			, fieldNames: _0x9f6cx3
		}))
	}
	, onFlatStoreAdd: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5) {
		if (!this['onAnyChangeInAnyStore'](_0x9f6cx2)) {
			return
		};
		this['currentTransaction']['addAction'](new Robo['action']['flat'].Add({
			store: _0x9f6cx2
			, records: _0x9f6cx1
			, index: _0x9f6cx5
		}))
	}
	, onFlatStoreRemove: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx3, _0x9f6cx1) {
		if (!this['onAnyChangeInAnyStore'](_0x9f6cx5)) {
			return
		};
		this['currentTransaction']['addAction'](new Robo['action']['flat'].Remove({
			store: _0x9f6cx5
			, records: _0x9f6cx2
			, index: _0x9f6cx3
			, isMove: _0x9f6cx1
		}))
	}
	, onTreeStoreUpdate: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx2, _0x9f6cx3) {
		if (!this['onAnyChangeInAnyStore'](_0x9f6cx5) || _0x9f6cx2 != 'edit' || !_0x9f6cx3 || !_0x9f6cx3['length'] || !this['hasPersistableChanges'](_0x9f6cx1, _0x9f6cx3)) {
			return
		};
		this['currentTransaction']['addAction'](new Robo['action']['tree'].Update({
			record: _0x9f6cx1
			, fieldNames: _0x9f6cx3
		}))
	}
	, onTreeStoreAppend: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx2) {
		if (!_0x9f6cx5 || !this['onAnyChangeInAnyStore'](_0x9f6cx5['getTreeStore']())) {
			return
		};
		if (_0x9f6cx1['$undoRedoMoving']) {
			delete _0x9f6cx1['$undoRedoMoving']
		}
		else {
			this['currentTransaction']['addAction'](new Robo['action']['tree'].Append({
				parent: _0x9f6cx5
				, newChild: _0x9f6cx1
			}))
		}
	}
	, onTreeStoreInsert: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx2) {
		if (!_0x9f6cx5 || !this['onAnyChangeInAnyStore'](_0x9f6cx5['getTreeStore']())) {
			return
		};
		if (_0x9f6cx1['$undoRedoMoving']) {
			delete _0x9f6cx1['$undoRedoMoving']
		}
		else {
			this['currentTransaction']['addAction'](new Robo['action']['tree'].Insert({
				parent: _0x9f6cx5
				, newChild: _0x9f6cx1
				, insertedBefore: _0x9f6cx2
			}))
		}
	}
	, onTreeStoreRemove: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1, _0x9f6cx2) {
		if (!_0x9f6cx5 || !this['onAnyChangeInAnyStore'](_0x9f6cx5['getTreeStore']())) {
			return
		};
		if (_0x9f6cx1) {
			_0x9f6cx3['$undoRedoMoving'] = true
		};
		this['currentTransaction']['addAction'](new Robo['action']['tree'].Remove({
			parent: _0x9f6cx5
			, removedChild: _0x9f6cx3
			, nextSibling: _0x9f6cx2['nextSibling']
			, isMove: _0x9f6cx1
		}))
	}
	, start: function () {
		if (this['state'] == 'created' || this['state'] == 'disabled') {
			this['fireEvent']('start', this);
			this['fireEvent']('undoqueuechange', this, this['undoQueue']);
			this['fireEvent']('redoqueuechange', this, this['redoQueue'])
		};
		if (this['state'] !== 'hold') {
			this['forEachStore'](this['bindStore']);
			this['state'] = 'enabled'
		}
	}
	, stop: function () {
		this['endTransaction']();
		this['forEachStore'](this['unbindStore']);
		this['state'] = 'disabled';
		this['clearQueues']();
		this['fireEvent']('stop', this)
	}
	, clearQueues: function () {
		this['clearUndoQueue']();
		this['clearRedoQueue']()
	}
	, pause: function () {
		this['state'] = 'paused'
	}
	, resume: function () {
		this['state'] = 'enabled'
	}
	, hold: function () {
		Ext['Assert'] && Ext['Assert']['isObject'](this['currentTransaction'], 'can\'t hold, no transaction is currently in progress');
		this['state'] = 'hold'
	}
	, release: function () {
		Ext['Assert'] && Ext['Assert']['isObject'](this['currentTransaction'], 'can\'t release, no transaction is currently in progress');
		this['state'] = 'enabled'
	}
	, getUndoQueue: function () {
		return this['undoQueue']['slice']()
	}
	, getRedoQueue: function () {
		return this['redoQueue']['slice']()
	}
	, clearUndoQueue: function () {
		if (this['undoQueue']['length']) {
			this['undoQueue'] = [];
			this['fireEvent']('undoqueuechange', this, this['undoQueue']['slice']())
		}
	}
	, clearRedoQueue: function () {
		if (this['redoQueue']['length']) {
			this['redoQueue'] = [];
			this['fireEvent']('redoqueuechange', this, this['redoQueue']['slice']())
		}
	}
	, startTransaction: function (_0x9f6cx5) {
		var _0x9f6cx1 = this
			, _0x9f6cx2;
		if (_0x9f6cx1['state'] == 'disabled') {
			return
		};
		if (_0x9f6cx1['currentTransaction']) {
			_0x9f6cx1['endTransaction']()
		};
		_0x9f6cx2 = new Robo.Transaction({
			title: _0x9f6cx5
		});
		_0x9f6cx1['currentTransaction'] = _0x9f6cx2;
		_0x9f6cx1['notifyStoresAboutTransactionStart'](_0x9f6cx2);
		if (_0x9f6cx1['transactionBoundary'] == 'timeout') {
			_0x9f6cx1['scheduleEndTransaction']()
		}
	}
	, scheduleEndTransaction: function () {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['transactionTimeout']) {
			clearTimeout(_0x9f6cx1['transactionTimeout'])
		};
		_0x9f6cx1['transactionTimeout'] = setTimeout(function () {
			if (_0x9f6cx1['state'] !== 'hold') {
				_0x9f6cx1['endTransaction']();
				_0x9f6cx1['transactionTimeout'] = null
			}
			else {
				_0x9f6cx1['scheduleEndTransaction']()
			}
		}, _0x9f6cx1['transactionMaxDuration'])
	}
	, endTransaction: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['currentTransaction'];
		if (!_0x9f6cx1) {
			return false
		};
		_0x9f6cx2['currentTransaction'] = null;
		if (_0x9f6cx2['transactionBoundary'] == 'timeout') {
			clearTimeout(_0x9f6cx2['transactionTimeout']);
			_0x9f6cx2['transactionTimeout'] = null
		};
		if (_0x9f6cx1['hasActions']()) {
			_0x9f6cx2['addTransaction'](_0x9f6cx1)
		};
		_0x9f6cx2['notifyStoresAboutTransactionEnd'](_0x9f6cx1);
		return _0x9f6cx1['hasActions']()
	}
	, addTransaction: function (_0x9f6cx1) {
		this['undoQueue']['push'](_0x9f6cx1);
		this['fireEvent']('undoqueuechange', this, this['undoQueue']['slice']());
		if (this['redoQueue']['length']) {
			this['redoQueue']['length'] = 0;
			this['fireEvent']('redoqueuechange', this, this['redoQueue']['slice']())
		};
		this['fireEvent']('transactionadd', this, _0x9f6cx1)
	}
	, undo: function (_0x9f6cx4) {
		var _0x9f6cx5 = this['undoQueue']
			, _0x9f6cx2, _0x9f6cx7, _0x9f6cx3, _0x9f6cx1 = _0x9f6cx5['length'];
		if (this['state'] == 'disabled' || _0x9f6cx4 === 0 || !_0x9f6cx5['length']) {
			return
		};
		if (_0x9f6cx4 instanceof Robo['Transaction']) {
			_0x9f6cx2 = Ext['Array']['indexOf'](_0x9f6cx5, _0x9f6cx4);
			if (_0x9f6cx2 == -1) {
				return
			};
			_0x9f6cx4 = _0x9f6cx5['length'] - _0x9f6cx2
		};
		_0x9f6cx4 = _0x9f6cx4 || 1;
		this['fireEvent']('beforeundo', this);
		this['pause']();
		this['notifyStoresAboutUndoRedoStart']();
		for (_0x9f6cx3 = 0; _0x9f6cx3 < Math['min'](_0x9f6cx4, _0x9f6cx1); _0x9f6cx3++) {
			_0x9f6cx7 = _0x9f6cx5['pop']();
			_0x9f6cx7['undo']();
			this['redoQueue']['unshift'](_0x9f6cx7)
		};
		this['notifyStoresAboutUndoRedoComplete']();
		this['fireEvent']('undoqueuechange', this, _0x9f6cx5['slice']());
		this['fireEvent']('redoqueuechange', this, this['redoQueue']['slice']());
		this['resume']();
		this['fireEvent']('afterundo', this)
	}
	, redo: function (_0x9f6cx3) {
		var _0x9f6cx4 = this['redoQueue']
			, _0x9f6cx7, _0x9f6cx2, _0x9f6cx5, _0x9f6cx1 = _0x9f6cx4['length'];
		if (this['state'] == 'disabled' || _0x9f6cx3 === 0 || !_0x9f6cx4['length']) {
			return
		};
		if (_0x9f6cx3 instanceof Robo['Transaction']) {
			_0x9f6cx2 = Ext['Array']['indexOf'](_0x9f6cx4, _0x9f6cx3);
			if (_0x9f6cx2 == -1) {
				return
			};
			_0x9f6cx3 = _0x9f6cx2 + 1
		};
		_0x9f6cx3 = _0x9f6cx3 || 1;
		this['fireEvent']('beforeredo', this);
		this['pause']();
		this['notifyStoresAboutUndoRedoStart']();
		for (_0x9f6cx5 = 0; _0x9f6cx5 < Math['min'](_0x9f6cx3, _0x9f6cx1); _0x9f6cx5++) {
			_0x9f6cx7 = this['redoQueue']['shift']();
			_0x9f6cx7['redo']();
			this['undoQueue']['push'](_0x9f6cx7)
		};
		this['notifyStoresAboutUndoRedoComplete']();
		this['fireEvent']('redoqueuechange', this, this['redoQueue']['slice']());
		this['fireEvent']('undoqueuechange', this, this['undoQueue']['slice']());
		this['resume']();
		this['fireEvent']('afterredo', this)
	}
	, undoAll: function () {
		this['undo'](this['undoQueue']['length'])
	}
	, notifyStoresAboutTransactionStart: function (_0x9f6cx1) {
		this['forEachStore'](function (_0x9f6cx2) {
			_0x9f6cx2['onUndoRedoTransactionStart'] && _0x9f6cx2['onUndoRedoTransactionStart'](this, _0x9f6cx1)
		})
	}
	, notifyStoresAboutTransactionEnd: function (_0x9f6cx1) {
		this['forEachStore'](function (_0x9f6cx2) {
			_0x9f6cx2['onUndoRedoTransactionEnd'] && _0x9f6cx2['onUndoRedoTransactionEnd'](this, _0x9f6cx1)
		})
	}
	, notifyStoresAboutUndoRedoStart: function () {
		this['forEachStore'](function (_0x9f6cx1) {
			_0x9f6cx1['beforeUndoRedo'] && _0x9f6cx1['beforeUndoRedo'](this)
		})
	}
	, notifyStoresAboutUndoRedoComplete: function () {
		this['forEachStore'](function (_0x9f6cx1) {
			_0x9f6cx1['afterUndoRedo'] && _0x9f6cx1['afterUndoRedo'](this)
		})
	}
}, function () {
	Ext['apply'](Robo, {
		VERSION: '5.1.3'
	})
});
Ext.define('Ext.ux.Gantt.data.undoredo.Manager', {
	extend: 'Robo.Manager'
	, uses: ['Ext.ux.Gantt.data.TaskStore', 'Ext.ux.Gantt.data.undoredo.action.taskstore.Update']
	, getStoreTypeListeners: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['callParent']([_0x9f6cx1]);
		if (_0x9f6cx1 instanceof Ext.ux.Gantt['data']['TaskStore']) {
			_0x9f6cx2['update'] = _0x9f6cx5['onTaskStoreUpdate'];
			_0x9f6cx2['projectionstart'] = _0x9f6cx5['onTaskStoreProjectionStart'];
			_0x9f6cx2['projectioncommit'] = _0x9f6cx5['onTaskStoreProjectionEnd'];
			_0x9f6cx2['projectionreject'] = _0x9f6cx5['onTaskStoreProjectionEnd']
		};
		return _0x9f6cx2
	}
	, onTaskStoreUpdate: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx2, _0x9f6cx3) {
		if (!this['onAnyChangeInAnyStore'](_0x9f6cx5) || _0x9f6cx2 != 'edit' || !_0x9f6cx3 || !_0x9f6cx3['length'] || !this['hasPersistableChanges'](_0x9f6cx1, _0x9f6cx3)) {
			return
		};
		this['currentTransaction']['addAction'](new Ext.ux.Gantt['data']['undoredo']['action']['taskstore'].Update({
			record: _0x9f6cx1
			, fieldNames: _0x9f6cx3
		}))
	}
	, onTaskStoreProjectionStart: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = this;
		if (_0x9f6cx2 == 1 && _0x9f6cx5['transactionBoundary'] === 'timeout') {
			if (!_0x9f6cx5['currentTransaction']) {
				_0x9f6cx5['onAnyChangeInAnyStore'](_0x9f6cx1)
			};
			if (_0x9f6cx5['currentTransaction']) {
				_0x9f6cx5['hold']()
			}
		}
	}
	, onTaskStoreProjectionEnd: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx4, _0x9f6cx5) {
		var _0x9f6cx3 = this;
		if (_0x9f6cx5 === 0 && _0x9f6cx3['transactionBoundary'] === 'timeout' && _0x9f6cx3['currentTransaction']) {
			_0x9f6cx3['release']()
		}
	}
});
Ext.define('Ext.ux.Gantt.data.undoredo.action.taskstore.Update', {
	extend: 'Robo.action.tree.Update'
	, uses: ['Ext.Array']
	, processSavingOldValue: function (_0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = this
			, _0x9f6cx5;
		if (_0x9f6cx3 == _0x9f6cx1['segmentsField']) {
			_0x9f6cx5 = _0x9f6cx1['getTaskStore']()['getOriginalSegmentsState'](_0x9f6cx1)
		}
		else {
			_0x9f6cx5 = _0x9f6cx2['callParent']([_0x9f6cx3, _0x9f6cx1])
		};
		return _0x9f6cx5
	}
	, processSavingNewValue: function (_0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = this
			, _0x9f6cx5;
		if (_0x9f6cx3 === _0x9f6cx1['segmentsField']) {
			_0x9f6cx5 = _0x9f6cx1['buildSegmentsSnapshot']()
		}
		else {
			_0x9f6cx5 = _0x9f6cx2['callParent']([_0x9f6cx3, _0x9f6cx1])
		};
		return _0x9f6cx5
	}
	, processRestoringValue: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx3 == _0x9f6cx1['segmentsField']) {
			_0x9f6cx1['rollbackSegmentsToSnapshot'](_0x9f6cx5);
			_0x9f6cx5 = _0x9f6cx2['self']['CUSTOMLY_PROCESSED']
		}
		else {
			_0x9f6cx5 = _0x9f6cx2['callParent']([_0x9f6cx5, _0x9f6cx3, _0x9f6cx1])
		};
		return _0x9f6cx5
	}
});
Ext.define('Ext.ux.Scheduler.util.DragTracker', {
	extend: 'Ext.dd.DragTracker'
	, requires: ['Ext.util.Region']
	, xStep: 1
	, yStep: 1
	, deferredTouchActivation: 0
	, constructor: function () {
		this['callParent'](arguments);
		this['on']('dragstart', this['bindListenersOnDragStart']);
		this['moveListener'] = {
			pinchstart: this['abortWait']
			, touchend: this['abortWait']
			, mouseup: this['abortWait']
			, mousemove: this['onMoveWhileWaiting']
			, scope: this
			, capture: true
		}
	}
	, bindListenersOnDragStart: function () {
		var _0x9f6cx1 = this['el'];
		_0x9f6cx1['on'](this['getListeners']());
		this['on']('dragend', this['unbindListenersOnDragEnd'], this, {
			single: true
		})
	}
	, unbindListenersOnDragEnd: function () {
		this['el'] && this['el']['un'](this['getListeners']())
	}
	, getListeners: function () {
		return {
			scroll: this['onMouseMove']
			, pinchstart: this['onMouseUp']
			, scope: this
		}
	}
	, destroy: function () {
		clearTimeout(this['deferTimer']);
		this['callParent'](arguments)
	}
	, setXStep: function (_0x9f6cx1) {
		this['xStep'] = _0x9f6cx1
	}
	, startScroll: null
	, deferTimer: null
	, deferTolerance: 10
	, moveListener: null
	, setYStep: function (_0x9f6cx1) {
		this['yStep'] = _0x9f6cx1
	}
	, onMoveWhileWaiting: function (_0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx5 = _0x9f6cx3['getXY']();
		var _0x9f6cx2 = this['startXY'];
		if (Math['max'](Math['abs'](_0x9f6cx2[0] - _0x9f6cx5[0]), Math['abs'](_0x9f6cx2[1] - _0x9f6cx5[1])) > this['deferTolerance']) {
			this['abortWait']();
			this['onMouseUp'](_0x9f6cx3)
		}
	}
	, abortWait: function () {
		clearTimeout(this['deferTimer']);
		this['deferTimer'] = null;
		Ext['getDoc']()['un'](this['moveListener'])
	}
	, getCurrentScroll: function () {
		return this['el']['getScroll']()
	}
	, getRegion: function () {
		var _0x9f6cxc = this['startXY']
			, _0x9f6cx7 = this['getCurrentScroll']();
		if (Ext['isIE'] && this['rtl']) {
			_0x9f6cx7['left'] = this['el']['dom']['scrollWidth'] - this['el']['getWidth']() - _0x9f6cx7['left']
		};
		var _0x9f6cx13 = this['getXY']()
			, _0x9f6cx5 = _0x9f6cx13[0]
			, _0x9f6cx2 = _0x9f6cx13[1]
			, _0x9f6cx8 = _0x9f6cx7['left'] - this['startScroll']['left']
			, _0x9f6cxb = _0x9f6cx7['top'] - this['startScroll']['top']
			, _0x9f6cx9 = _0x9f6cxc[0] - _0x9f6cx8
			, _0x9f6cx6 = _0x9f6cxc[1] - _0x9f6cxb
			, _0x9f6cx4 = Math['min'](_0x9f6cx9, _0x9f6cx5)
			, _0x9f6cx3 = Math['min'](_0x9f6cx6, _0x9f6cx2)
			, _0x9f6cx1 = Math['abs'](_0x9f6cx9 - _0x9f6cx5)
			, _0x9f6cxa = Math['abs'](_0x9f6cx6 - _0x9f6cx2);
		return new Ext['util'].Region(_0x9f6cx3, _0x9f6cx4 + _0x9f6cx1, _0x9f6cx3 + _0x9f6cxa, _0x9f6cx4)
	}
	, onMouseDown: function (_0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx2 = _0x9f6cx3['event']['touches'] || [];
		if (_0x9f6cx2['length'] > 1) {
			return
		};
		_0x9f6cx3['stopPropagation'] = Ext['emptyFn'];
		this['startXY'] = _0x9f6cx3['getXY']();
		if (this['deferredTouchActivation'] && _0x9f6cx2['length'] === 1) {
			var _0x9f6cx1 = this;
			Ext['getDoc']()['on'](this['moveListener']);
			this['deferTimer'] = setTimeout(function () {
				var _0x9f6cx4 = _0x9f6cx1['deferredTouchActivation'];
				Ext['getDoc']()['un'](_0x9f6cx1['moveListener']);
				_0x9f6cx1['deferredTouchActivation'] = false;
				_0x9f6cx1['onMouseDown'](_0x9f6cx3, _0x9f6cx5);
				_0x9f6cx1['deferredTouchActivation'] = _0x9f6cx4
			}, this['deferredTouchActivation']);
			return
		};
		this['callParent']([_0x9f6cx3, _0x9f6cx5]);
		this['lastXY'] = this['startXY'];
		this['startScroll'] = this['getCurrentScroll']();
		if (Ext['isIE'] && this['rtl']) {
			this['startScroll']['left'] = this['el']['dom']['scrollWidth'] - this['el']['getWidth']() - this['startScroll']['left']
		}
	}
	, onMouseMove: function (_0x9f6cx6, _0x9f6cx7) {
		if (this['active'] && _0x9f6cx6['type'] === 'mousemove' && Ext['isIE9m'] && !_0x9f6cx6['browserEvent']['button']) {
			_0x9f6cx6['preventDefault']();
			this['onMouseUp'](_0x9f6cx6);
			return
		};
		_0x9f6cx6['preventDefault']();
		var _0x9f6cx3 = _0x9f6cx6['type'] === 'scroll' ? this['lastXY'] : _0x9f6cx6['getXY']()
			, _0x9f6cx2 = this['startXY'];
		if (!this['active']) {
			if (Math['max'](Math['abs'](_0x9f6cx2[0] - _0x9f6cx3[0]), Math['abs'](_0x9f6cx2[1] - _0x9f6cx3[1])) > this['tolerance']) {
				this['triggerStart'](_0x9f6cx6)
			}
			else {
				return
			}
		};
		var _0x9f6cx1 = _0x9f6cx3[0]
			, _0x9f6cx8 = _0x9f6cx3[1];
		if (this['xStep'] > 1) {
			_0x9f6cx1 -= this['startXY'][0];
			_0x9f6cx1 = Math['round'](_0x9f6cx1 / this['xStep']) * this['xStep'];
			_0x9f6cx1 += this['startXY'][0]
		};
		if (this['yStep'] > 1) {
			_0x9f6cx8 -= this['startXY'][1];
			_0x9f6cx8 = Math['round'](_0x9f6cx8 / this['yStep']) * this['yStep'];
			_0x9f6cx8 += this['startXY'][1]
		};
		var _0x9f6cx5 = this['xStep'] > 1 || this['yStep'] > 1;
		if (!_0x9f6cx5 || _0x9f6cx1 !== _0x9f6cx3[0] || _0x9f6cx8 !== _0x9f6cx3[1]) {
			this['lastXY'] = [_0x9f6cx1, _0x9f6cx8];
			if (this['fireEvent']('mousemove', this, _0x9f6cx6) === false) {
				this['onMouseUp'](_0x9f6cx6)
			}
			else {
				this['onDrag'](_0x9f6cx6);
				this['fireEvent']('drag', this, _0x9f6cx6)
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.feature.DragCreator', {
	requires: ['Ext.Template', 'Ext.ux.Scheduler.util.DragTracker', 'Ext.ux.Gantt.Tooltip']
	, disabled: false
	, showDragTip: true
	, tooltipConfig: null
	, dragTolerance: 2
	, template: '<div class="sch-gantt-dragcreator-proxy"></div>'
	, validatorFn: Ext['emptyFn']
	, validatorFnScope: null
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1 || {});
		this['init']()
	}
	, init: function () {
		var _0x9f6cx1 = this['ganttView']
			, _0x9f6cx2 = _0x9f6cx1['el']
			, _0x9f6cx5 = Ext['Function']['bind'];
		_0x9f6cx1['on']({
			destroy: this['onGanttDestroy']
			, scope: this
		});
		this['tracker'] = new Ext.ux.Scheduler['util'].DragTracker({
			el: _0x9f6cx2
			, tolerance: this['dragTolerance']
			, onBeforeStart: _0x9f6cx5(this['onBeforeDragStart'], this)
			, onStart: _0x9f6cx5(this['onDragStart'], this)
			, onDrag: _0x9f6cx5(this['onDrag'], this)
			, onEnd: _0x9f6cx5(this['onDragEnd'], this)
		});
		if (this['showDragTip']) {
			this['dragTip'] = new Ext.ux.Gantt.Tooltip(Ext['apply']({
				mode: 'duration'
				, cls: 'gnt-dragcreate-tip'
				, gantt: _0x9f6cx1
			}, this['tooltipConfig']))
		}
	}
	, setDisabled: function (_0x9f6cx1) {
		this['disabled'] = _0x9f6cx1;
		if (this['dragTip']) {
			this['dragTip']['setDisabled'](_0x9f6cx1)
		}
	}
	, getProxy: function () {
		if (!this['proxy']) {
			var _0x9f6cx1 = this['ganttView']['up']('tablepanel')['el'];
			if (!(this['template'] instanceof Ext['Template'])) {
				this['template'] = new Ext.Template(this['template'])
			};
			this['proxy'] = this['template']['append'](_0x9f6cx1, {}, true)
		};
		return this['proxy']
	}
	, onBeforeDragStart: function (_0x9f6cx7) {
		var _0x9f6cx5 = this['ganttView']
			, _0x9f6cx2 = _0x9f6cx7['getTarget']('.' + _0x9f6cx5['timeCellCls'], 2);
		if (_0x9f6cx2 && !this['disabled']) {
			var _0x9f6cx1 = _0x9f6cx5['resolveTaskRecord'](_0x9f6cx2);
			var _0x9f6cx3 = _0x9f6cx5['getDateFromDomEvent'](_0x9f6cx7);
			if (!_0x9f6cx1['isReadOnly']() && !_0x9f6cx1['getStartDate']() && !_0x9f6cx1['getEndDate']() && _0x9f6cx5['fireEvent']('beforedragcreate', _0x9f6cx5, _0x9f6cx1, _0x9f6cx3, _0x9f6cx7) !== false) {
				_0x9f6cx7['stopEvent']();
				this['record'] = _0x9f6cx1;
				this['originalStart'] = _0x9f6cx3;
				this['rowRegion'] = _0x9f6cx5['getScheduleRegion'](this['record'], this['originalStart']);
				this['dateConstraints'] = _0x9f6cx5['getDateConstraints'](this['resourceRecord'], this['originalStart']);
				return true
			}
		};
		return false
	}
	, onDragStart: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['ganttView']
			, _0x9f6cx2 = _0x9f6cx5['getProxy']();
		_0x9f6cx5['start'] = _0x9f6cx5['originalStart'];
		_0x9f6cx5['end'] = _0x9f6cx5['start'];
		_0x9f6cx5['rowBoundaries'] = {
			top: _0x9f6cx5['rowRegion']['top']
			, bottom: _0x9f6cx5['rowRegion']['bottom']
		};
		_0x9f6cx2['setBox']({
			x: _0x9f6cx5['tracker']['startXY'][0]
			, y: _0x9f6cx5['rowBoundaries']['top']
			, height: _0x9f6cx5['rowBoundaries']['bottom'] - _0x9f6cx5['rowBoundaries']['top']
		});
		_0x9f6cx2['show']();
		_0x9f6cx1['fireEvent']('dragcreatestart', _0x9f6cx1);
		if (_0x9f6cx5['showDragTip']) {
			_0x9f6cx5['dragTip']['enable']();
			_0x9f6cx5['dragTip']['updateContent'](_0x9f6cx5['start'], _0x9f6cx5['end'], true, _0x9f6cx5['record']);
			_0x9f6cx5['dragTip']['showBy'](_0x9f6cx2)
		}
	}
	, onDrag: function (_0x9f6cx6) {
		var _0x9f6cx3 = this
			, _0x9f6cx5 = _0x9f6cx3['ganttView']
			, _0x9f6cx2 = _0x9f6cx3['tracker']['getRegion']()['constrainTo'](_0x9f6cx3['rowRegion'])
			, _0x9f6cx7 = _0x9f6cx5['getStartEndDatesFromRegion'](_0x9f6cx2, 'round');
		if (!_0x9f6cx7) {
			return
		};
		_0x9f6cx3['start'] = _0x9f6cx7['start'] || _0x9f6cx3['start'];
		_0x9f6cx3['end'] = _0x9f6cx7['end'] || _0x9f6cx3['end'];
		var _0x9f6cx1 = _0x9f6cx3['dateConstraints'];
		if (_0x9f6cx1) {
			_0x9f6cx3['end'] = Ext.ux.Scheduler['util']['Date']['constrain'](_0x9f6cx3['end'], _0x9f6cx1['start'], _0x9f6cx1['end']);
			_0x9f6cx3['start'] = Ext.ux.Scheduler['util']['Date']['constrain'](_0x9f6cx3['start'], _0x9f6cx1['start'], _0x9f6cx1['end'])
		};
		_0x9f6cx3['valid'] = _0x9f6cx3['validatorFn']['call'](_0x9f6cx3['validatorFnScope'] || _0x9f6cx3, _0x9f6cx3['record'], _0x9f6cx3['start'], _0x9f6cx3['end'], _0x9f6cx6) !== false;
		if (_0x9f6cx3['showDragTip']) {
			_0x9f6cx3['dragTip']['updateContent'](_0x9f6cx3['start'], _0x9f6cx3['end'], _0x9f6cx3['valid'], _0x9f6cx3['record']);
			_0x9f6cx3['dragTip']['showBy'](_0x9f6cx3['getProxy']())
		};
		Ext['apply'](_0x9f6cx2, _0x9f6cx3['rowBoundaries']);
		_0x9f6cx3['getProxy']()['setBox'](_0x9f6cx2)
	}
	, onDragEnd: function (_0x9f6cx3) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['ganttView']
			, _0x9f6cx2 = true;
		_0x9f6cx5['createContext'] = {
			start: _0x9f6cx5['start']
			, end: _0x9f6cx5['end']
			, e: _0x9f6cx3
			, record: _0x9f6cx5['record']
			, finalize: function () {
				_0x9f6cx5['finalize']['apply'](_0x9f6cx5, arguments)
			}
		};
		if (_0x9f6cx5['showDragTip']) {
			_0x9f6cx5['dragTip']['disable']()
		};
		if (!_0x9f6cx5['start'] || !_0x9f6cx5['end'] || (_0x9f6cx5['end'] < _0x9f6cx5['start'])) {
			_0x9f6cx5['valid'] = false
		};
		if (_0x9f6cx5['valid']) {
			_0x9f6cx2 = _0x9f6cx1['fireEvent']('beforedragcreatefinalize', _0x9f6cx5, _0x9f6cx5['createContext'], _0x9f6cx3) !== false
		};
		if (_0x9f6cx2) {
			_0x9f6cx5['finalize'](_0x9f6cx5['valid'])
		}
	}
	, finalize: function (_0x9f6cx2) {
		var _0x9f6cx3 = this
			, _0x9f6cx5 = _0x9f6cx3['createContext']
			, _0x9f6cx1 = _0x9f6cx3['ganttView'];
		if (_0x9f6cx2) {
			_0x9f6cx5['record']['setStartEndDate'](_0x9f6cx5['start'], _0x9f6cx5['end'], _0x9f6cx5['record']['getTaskStore']()['skipWeekendsDuringDragDrop']);
			_0x9f6cx1['fireEvent']('dragcreateend', _0x9f6cx1, _0x9f6cx5['record'], _0x9f6cx5['e'])
		};
		_0x9f6cx3['proxy']['hide']();
		_0x9f6cx1['fireEvent']('afterdragcreate', _0x9f6cx1)
	}
	, onGanttDestroy: function () {
		if (this['dragTip']) {
			this['dragTip']['destroy']()
		};
		if (this['tracker']) {
			this['tracker']['destroy']()
		};
		if (this['proxy']) {
			Ext['destroy'](this['proxy']);
			this['proxy'] = null
		}
	}
});
Ext.define('Ext.ux.Gantt.feature.LabelEditor', {
	extend: 'Ext.Editor'
	, labelPosition: ''
	, triggerEvent: 'dblclick'
	, delegate: null
	, dataIndex: null
	, shadow: false
	, completeOnEnter: true
	, cancelOnEsc: true
	, ignoreNoChange: true
	, ganttView: null
	, constructor: function (_0x9f6cx2, _0x9f6cx1) {
		this['ganttView'] = _0x9f6cx2;
		this['ganttView']['on']({
			afterrender: this['onGanttRender']
			, destroy: this['onGanttDestroy']
			, scope: this
		});
		if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
			this['ganttView']['on']({
				itemclick: this['onGanttItemClick']
				, scope: this
			})
		};
		Ext['apply'](this, _0x9f6cx1);
		if (this['labelPosition'] === 'left') {
			this['alignment'] = 'r-r'
		}
		else {
			if (this['labelPosition'] === 'right') {
				this['alignment'] = 'l-l'
			}
			else {
				this['alignment'] = 'c-c'
			}
		};
		this['delegate'] = '.sch-gantt-label-' + this['labelPosition'];
		this['callParent']([_0x9f6cx1])
	}
	, onGanttItemClick: function () {
		this['cancelEdit']()
	}
	, edit: function (_0x9f6cx2) {
		if (!_0x9f6cx2['isEditable'](this['dataIndex'])) {
			return
		};
		var _0x9f6cx3 = this['ganttView']['getElementsFromEventRecord'](_0x9f6cx2)
			, _0x9f6cx1 = _0x9f6cx3 && _0x9f6cx3[0];
		if (_0x9f6cx1) {
			var _0x9f6cx5 = _0x9f6cx1['up'](this['ganttView']['eventWrapSelector']);
			this['record'] = _0x9f6cx2;
			if (!this['rendered']) {
				this['render'](this['ganttView']['getEl']())
			};
			this['startEdit'](_0x9f6cx5['down'](this['delegate']), this['dataIndex'] ? _0x9f6cx2['get'](this['dataIndex']) : '')
		}
	}
	, onGanttRender: function (_0x9f6cx1) {
		if (!this['field']['width']) {
			this['autoSize'] = 'width'
		};
		this['on']({
			beforestartedit: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx3) {
				return _0x9f6cx1['fireEvent']('labeledit_beforestartedit', _0x9f6cx1, this['record'], _0x9f6cx3, _0x9f6cx5)
			}
			, beforecomplete: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx2) {
				return _0x9f6cx1['fireEvent']('labeledit_beforecomplete', _0x9f6cx1, _0x9f6cx3, _0x9f6cx2, this['record'], _0x9f6cx5)
			}
			, complete: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx2) {
				this['record']['set'](this['dataIndex'], _0x9f6cx3);
				_0x9f6cx1['fireEvent']('labeledit_complete', _0x9f6cx1, _0x9f6cx3, _0x9f6cx2, this['record'], _0x9f6cx5)
			}
			, scope: this
		});
		_0x9f6cx1['el']['on'](this['triggerEvent'], function (_0x9f6cx5, _0x9f6cx2) {
			this['edit'](_0x9f6cx1['resolveTaskRecord'](_0x9f6cx2))
		}, this, {
			delegate: this['delegate']
		})
	}
	, onGanttDestroy: function () {
		this['destroy']()
	}
});
Ext.define('Ext.ux.Gantt.feature.ProgressBarResize', {
	requires: ['Ext.ToolTip', 'Ext.resizer.Resizer']
	, useTooltip: true
	, increment: 10
	, tip: null
	, resizable: null
	, ganttView: null
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1 || {});
		var _0x9f6cx2 = this['ganttView'];
		_0x9f6cx2['on']({
			destroy: this['cleanUp']
			, scope: this
		});
		_0x9f6cx2['el']['on']('mousedown', this['onMouseDown'], this, {
			delegate: '.sch-gantt-progressbar-handle'
		});
		this['callParent'](arguments)
	}
	, onMouseDown: function (_0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx5 = this['ganttView']
			, _0x9f6cx7 = _0x9f6cx5['resolveTaskRecord'](_0x9f6cx2);
		if (_0x9f6cx5['fireEvent']('beforeprogressbarresize', _0x9f6cx5, _0x9f6cx7) !== false) {
			var _0x9f6cx1 = Ext['fly'](_0x9f6cx2)['prev']('.sch-gantt-progress-bar');
			_0x9f6cx3['stopEvent']();
			_0x9f6cx1['addCls']('sch-progress-bar-resizing');
			this['resizable'] = this['createResizable'](_0x9f6cx1, _0x9f6cx7, _0x9f6cx3);
			_0x9f6cx5['fireEvent']('progressbarresizestart', _0x9f6cx5, _0x9f6cx7);
			Ext['getBody']()['on']('mouseup', this['onBodyMouseUp'], this, {
				single: true
				, delay: 1
			})
		}
	}
	, createResizable: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx8) {
		var _0x9f6cx6 = this['ganttView']['rtl']
			, _0x9f6cx9 = _0x9f6cx5['up'](this['ganttView']['eventSelector'])
			, _0x9f6cx7 = _0x9f6cx9['getWidth']() - 2 * this['ganttView']['eventBorderWidth']
			, _0x9f6cx2 = _0x9f6cx7 * this['increment'] / 100;
		var _0x9f6cx3 = Ext['create']('Ext.resizer.Resizer', {
			target: _0x9f6cx5
			, taskRecord: _0x9f6cx1
			, handles: _0x9f6cx6 ? 'w' : 'e'
			, minWidth: 0
			, maxWidth: _0x9f6cx7
			, minHeight: 1
			, widthIncrement: _0x9f6cx2
			, listeners: {
				resizedrag: this['partialResize']
				, resize: this['afterResize']
				, scope: this
			}
		});
		_0x9f6cx3['resizeTracker']['onMouseDown'](_0x9f6cx8, _0x9f6cx3[_0x9f6cx6 ? 'west' : 'east']['dom']);
		_0x9f6cx9['addCls']('sch-gantt-resizing');
		if (this['useTooltip']) {
			this['tip'] = Ext['create']('Ext.ToolTip', {
				autoHide: false
				, anchor: 'b'
				, html: '%'
			});
			this['tip']['setTarget'](_0x9f6cx5);
			this['tip']['update'](_0x9f6cx1['getPercentDone']() + '%');
			this['tip']['show']()
		};
		return _0x9f6cx3
	}
	, partialResize: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = Math['round'](_0x9f6cx2 * 100 / (_0x9f6cx5['maxWidth'] * this['increment'])) * this['increment'];
		if (this['tip']) {
			this['tip']['body']['update'](_0x9f6cx1 + '%')
		}
	}
	, afterResize: function (_0x9f6cx7, _0x9f6cx2, _0x9f6cx5, _0x9f6cx6) {
		var _0x9f6cx9 = _0x9f6cx7['taskRecord'];
		if (this['tip']) {
			this['tip']['destroy']();
			this['tip'] = null
		};
		var _0x9f6cx1 = _0x9f6cx7['taskRecord']['getPercentDone']();
		if (Ext['isNumber'](_0x9f6cx2)) {
			var _0x9f6cx3 = Math['round'](_0x9f6cx2 * 100 / (_0x9f6cx7['maxWidth'] * this['increment'])) * this['increment'];
			_0x9f6cx3 = Math['min'](100, Math['max'](0, _0x9f6cx3));
			_0x9f6cx7['taskRecord']['setPercentDone'](_0x9f6cx3)
		};
		if (_0x9f6cx1 === _0x9f6cx7['taskRecord']['getPercentDone']()) {
			this['ganttView']['refreshNode'](this['ganttView']['indexOf'](_0x9f6cx7['taskRecord']))
		};
		_0x9f6cx7['destroy']();
		this['resizable'] = null;
		this['ganttView']['fireEvent']('afterprogressbarresize', this['ganttView'], _0x9f6cx9)
	}
	, onBodyMouseUp: function () {
		if (this['resizable']) {
			this['afterResize'](this['resizable'])
		}
	}
	, cleanUp: function () {
		if (this['tip']) {
			this['tip']['destroy']()
		}
	}
});
Ext.define('Ext.ux.Gantt.feature.TaskDragDrop', {
	extend: 'Ext.dd.DragZone'
	, requires: ['Ext.ux.Gantt.Tooltip', 'Ext.dd.StatusProxy']
	, useTooltip: true
	, tooltipConfig: null
	, validatorFn: function (_0x9f6cx1, _0x9f6cx2, _0x9f6cx3, _0x9f6cx5) {
		return true
	}
	, validatorFnScope: null
	, showExactDropPosition: false
	, containerScroll: false
	, dropAllowed: 'sch-gantt-dragproxy'
	, dropNotAllowed: 'sch-gantt-dragproxy'
	, gantt: null
	, lastXY: null
	, onDragEnter: Ext['emptyFn']
	, onDragOut: Ext['emptyFn']
	, tip: null
	, skipWeekendsDuringDragDrop: false
	, taskSelector: null
	, deadlineSelector: null
	, invalidTargetSelector: ['.' + Ext['baseCSSPrefix'] + 'resizable-handle', '.sch-resizable-handle', '.sch-terminal', '.sch-gantt-progressbar-handle', '.sch-rollup-task', '.sch-gantt-baseline-item .sch-gantt-item', '.sch-gantt-baseline-item .sch-gantt-item img'].join(',')
	, constructor: function (_0x9f6cx5, _0x9f6cx1) {
		if (Ext['isIE'] && (Ext['isIE8'] || Ext['ieVersion'] < 9) && window['top'] !== window) {
			Ext['dd']['DragDropManager']['notifyOccluded'] = true
		};
		this['proxy'] = this['proxy'] || new Ext['dd'].StatusProxy({
			shadow: false
			, dropAllowed: 'sch-gantt-dragproxy'
			, dropNotAllowed: 'sch-gantt-dragproxy'
			, ensureAttachedToBody: Ext['emptyFn']
		});
		_0x9f6cx1['gantt']['rtl'] && this['proxy']['addCls']('sch-rtl');
		var _0x9f6cx3 = this
			, _0x9f6cx2 = _0x9f6cx1['gantt'];
		_0x9f6cx3['callParent']([_0x9f6cx5, Ext['apply'](_0x9f6cx1, {
			ddGroup: _0x9f6cx2['id'] + '-task-dd'
		})]);
		if (_0x9f6cx3['useTooltip']) {
			_0x9f6cx3['tip'] = new Ext.ux.Gantt.Tooltip(Ext['apply']({
				gantt: _0x9f6cx2
				, constrainTo: _0x9f6cx2['el']
				, cls: 'gnt-dragdrop-tip'
			}, _0x9f6cx3['tooltipConfig']))
		};
		_0x9f6cx3['scroll'] = false;
		_0x9f6cx3['isTarget'] = true;
		_0x9f6cx3['ignoreSelf'] = false;
		_0x9f6cx5['appendChild'](_0x9f6cx3['proxy']['el'])
	}
	, destroy: function () {
		if (this['tip']) {
			this['tip']['destroy']()
		};
		clearTimeout(this['validDropTimer']);
		this['callParent'](arguments)
	}
	, getDragData: function (_0x9f6cx11) {
		if (Ext['fly'](_0x9f6cx11['getTarget']())['is'](this['invalidTargetSelector'])) {
			return
		};
		var _0x9f6cxb = _0x9f6cx11['getTarget'](this['taskSelector']);
		var _0x9f6cx14 = !_0x9f6cxb && _0x9f6cx11['getTarget'](this['deadlineSelector']);
		var _0x9f6cx12 = _0x9f6cxb || _0x9f6cx14;
		this['lastXY'] = null;
		if (_0x9f6cx12) {
			var _0x9f6cx6 = this['gantt'];
			var _0x9f6cx2 = _0x9f6cxb && _0x9f6cx11['getTarget']('.sch-gantt-task-segment');
			var _0x9f6cx16 = _0x9f6cx6['resolveTaskRecord'](_0x9f6cx12);
			var _0x9f6cx7 = 0;
			var _0x9f6cx3, _0x9f6cxc, _0x9f6cx9;
			if (!_0x9f6cx16 || _0x9f6cx16['isReadOnly']()) {
				return
			};
			if (_0x9f6cx2) {
				_0x9f6cx7 = Number(_0x9f6cx2['getAttribute']('data-segmentIndex'));
				if (_0x9f6cx7 > 0) {
					_0x9f6cx12 = _0x9f6cx2;
					_0x9f6cx16 = _0x9f6cx16['getSegment'](_0x9f6cx7)
				}
			};
			if (_0x9f6cxb && _0x9f6cx6['fireEvent']('beforetaskdrag', _0x9f6cx6, _0x9f6cx16, _0x9f6cx11) === false) {
				return
			};
			var _0x9f6cx1 = _0x9f6cx11['getXY']();
			var _0x9f6cxf = _0x9f6cx12['cloneNode'](true)
				, _0x9f6cx10 = this['showExactDropPosition'] ? 0 : _0x9f6cx6['getSnapPixelAmount']()
				, _0x9f6cxe = Ext['fly'](_0x9f6cx12)['getXY']();
			var _0x9f6cx5 = [_0x9f6cx1[0] - _0x9f6cxe[0], _0x9f6cx1[1] - _0x9f6cxe[1]];
			_0x9f6cxf['id'] = Ext['id']();
			var _0x9f6cx13 = Ext['fly'](_0x9f6cx12)['getHeight']();
			var _0x9f6cxd = Ext['fly'](_0x9f6cx12)['getWidth']();
			Ext['fly'](_0x9f6cxf)['setHeight'](_0x9f6cx13);
			if (Ext['isIE8m'] && _0x9f6cxb && _0x9f6cx16['isMilestone']()) {
				Ext['fly'](_0x9f6cxf)['setSize'](_0x9f6cx13 + 5, _0x9f6cx13 + 5)
			};
			if (!_0x9f6cx6['rtl']) {
				_0x9f6cxf['style']['left'] = -_0x9f6cx5[0] + 'px'
			}
			else {
				_0x9f6cxf['style']['left'] = _0x9f6cxd - _0x9f6cx5[0] + 'px'
			};
			if (_0x9f6cx7 > 0) {
				var _0x9f6cxa = _0x9f6cx16['getPrevSegment']();
				var _0x9f6cx8 = _0x9f6cx16['getNextSegment']();
				_0x9f6cx3 = Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cxa['getEndDate'](), _0x9f6cx6['timeAxis']['getStart']());
				_0x9f6cxc = _0x9f6cx8 ? Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cx8['getStartDate'](), _0x9f6cx6['timeAxis']['getEnd']()) : _0x9f6cx6['timeAxis']['getEnd']();
				_0x9f6cx9 = {
					left: _0x9f6cx6['getCoordinateFromDate'](_0x9f6cx3, false) + _0x9f6cx5[0]
					, right: _0x9f6cx6['getCoordinateFromDate'](_0x9f6cxc, false) - _0x9f6cxd + _0x9f6cx5[0]
				}
			}
			else {
				var _0x9f6cx17 = Ext['fly'](_0x9f6cx6['findItemByChild'](_0x9f6cx12));
				if (Ext['isIE10'] && Ext['getVersion']()['isGreaterThan']('6.2.0')) {
					_0x9f6cx17 = _0x9f6cx17['down']('tbody')
				};
				_0x9f6cx9 = _0x9f6cx17['getRegion']()
			};
			this['constrainTo'](_0x9f6cx9, Ext['fly'](_0x9f6cx12)['getRegion'](), _0x9f6cx5[0], _0x9f6cx5[1]);
			if (_0x9f6cx10 >= 1) {
				this['setXConstraint'](this['leftConstraint'], this['rightConstraint'], _0x9f6cx10)
			};
			return {
				sourceNode: _0x9f6cx12
				, repairXY: _0x9f6cxe
				, offsetX: _0x9f6cx5[0]
				, ddel: _0x9f6cxf
				, record: _0x9f6cx16
				, prevScroll: _0x9f6cx6['getScroll']()
				, duration: Ext.ux.Scheduler['util']['Date']['getDurationInMinutes'](_0x9f6cx16['getStartDate'](), _0x9f6cx16['getEndDate']())
				, startPointDate: _0x9f6cx6['getDateFromCoordinate'](_0x9f6cx1[0])
				, minDate: _0x9f6cx3
				, maxDate: _0x9f6cxc
				, start: null
				, isTaskDrag: Boolean(_0x9f6cxb)
				, originalStart: _0x9f6cxb ? _0x9f6cx16['getStartDate']() : _0x9f6cx16['getDeadlineDate']()
				, valid: Boolean(_0x9f6cx14)
			}
		}
	}
	, onDragOver: function (_0x9f6cx6) {
		var _0x9f6cx13 = this['dragData']
			, _0x9f6cx2 = _0x9f6cx13['record']
			, _0x9f6cxc = _0x9f6cx13['originalStart']
			, _0x9f6cx5 = this['gantt']
			, _0x9f6cxa = _0x9f6cx6 ? _0x9f6cx6['getXY']() : this['lastXY'];
		if (!_0x9f6cxa) {
			return
		};
		var _0x9f6cx7 = _0x9f6cx5['getDateFromCoordinate'](_0x9f6cxa[0]);
		if (!_0x9f6cx13['hidden']) {
			Ext['fly'](_0x9f6cx13['sourceNode'])['hide']();
			_0x9f6cx13['hidden'] = true
		};
		if (!_0x9f6cx7) {
			return
		};
		var _0x9f6cx1 = _0x9f6cx7 - _0x9f6cx13['startPointDate'];
		var _0x9f6cx9 = new Date(_0x9f6cxc - 0 + _0x9f6cx1);
		var _0x9f6cx3 = this['proxy']['el'];
		if (_0x9f6cx13['minDate']) {
			_0x9f6cx9 = Ext.ux.Scheduler['util']['Date']['constrain'](new Date(_0x9f6cxc - 0 + _0x9f6cx1), _0x9f6cx13['minDate'], _0x9f6cx13['maxDate'])
		};
		if (_0x9f6cx5['timeAxis']['isContinuous']()) {
			_0x9f6cx7 = _0x9f6cx5['timeAxis']['roundDate'](_0x9f6cx9, _0x9f6cx5['snapRelativeToEventStartDate'] ? _0x9f6cxc : false)
		}
		else {
			var _0x9f6cx8 = _0x9f6cx3['getX']() + (_0x9f6cx5['rtl'] ? _0x9f6cx3['getWidth']() : 0) + _0x9f6cx5['getXOffset'](_0x9f6cx2) - _0x9f6cx13['offsetX'];
			_0x9f6cx7 = _0x9f6cx5['getDateFromXY']([_0x9f6cx8, 0], 'round')
		};
		if (_0x9f6cx13['isTaskDrag']) {
			this['onTaskDrag'](_0x9f6cx2, _0x9f6cx6, _0x9f6cx7, _0x9f6cx9)
		}
		else {
			if (_0x9f6cx7 && _0x9f6cx7 - _0x9f6cxc !== 0) {
				this['onCustomElementDrag'](_0x9f6cx2, _0x9f6cx6, _0x9f6cx7)
			}
		};
		if (_0x9f6cx6) {
			this['lastXY'] = [_0x9f6cx6['browserEvent']['clientX'] + document['body']['scrollLeft'], _0x9f6cx6['getY']()]
		};
		_0x9f6cx13['start'] = _0x9f6cx7
	}
	, onTaskDrag: function (_0x9f6cx1, _0x9f6cx9, _0x9f6cx7, _0x9f6cxc) {
		var _0x9f6cxa = this['dragData'];
		var _0x9f6cx2 = this['gantt'];
		if (this['showExactDropPosition'] && this['skipWeekendsDuringDragDrop']) {
			var _0x9f6cx6 = 0;
			var _0x9f6cx8 = _0x9f6cx1['skipNonWorkingTime'](_0x9f6cx7, !_0x9f6cx1['isMilestone']());
			var _0x9f6cx5 = _0x9f6cx1['recalculateEndDate'](_0x9f6cx8);
			if (_0x9f6cxc['getTime']() != _0x9f6cx8['getTime']()) {
				_0x9f6cx6 = _0x9f6cx2['timeAxisViewModel']['getDistanceBetweenDates'](_0x9f6cxc, _0x9f6cx8)
			};
			if (_0x9f6cxc > _0x9f6cx2['timeAxis']['getStart']()) {
				Ext['fly'](_0x9f6cxa['ddel']['id'])['setWidth'](_0x9f6cx2['timeAxisViewModel']['getDistanceBetweenDates'](_0x9f6cx8, Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cx5, _0x9f6cx2['timeAxis']['getEnd']())));
				if (_0x9f6cx6) {
					this['proxy']['setX'](this['proxy']['getX']() + _0x9f6cx6)
				}
			}
		};
		if (_0x9f6cx7 && _0x9f6cx7 - _0x9f6cxa['start'] !== 0) {
			_0x9f6cxa['valid'] = this['validatorFn']['call'](this['validatorFnScope'] || _0x9f6cx2, _0x9f6cx1, _0x9f6cx7, _0x9f6cxa['duration'], _0x9f6cx9) !== false;
			if (this['tip']) {
				var _0x9f6cx3 = _0x9f6cx1['calculateEndDate'](_0x9f6cx7, _0x9f6cx1['getDuration'](), _0x9f6cx1['getDurationUnit']());
				this['updateTip'](_0x9f6cx1, _0x9f6cx7, _0x9f6cx3, _0x9f6cxa['valid'])
			}
		}
	}
	, onCustomElementDrag: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx2) {
		if (this['tip']) {
			this['updateTip'](_0x9f6cx1, _0x9f6cx2, _0x9f6cx2, true)
		}
	}
	, alignElWithMouse: function (_0x9f6cx3, _0x9f6cx8, _0x9f6cx7) {
		this['callParent'](arguments);
		var _0x9f6cx4 = this['getTargetCoord'](_0x9f6cx8, _0x9f6cx7)
			, _0x9f6cx5 = _0x9f6cx3['dom'] ? _0x9f6cx3 : Ext['fly'](_0x9f6cx3, '_dd')
			, _0x9f6cx6 = this['tip'];
		this['setLocalXY'](_0x9f6cx5, _0x9f6cx4['x'] + this['deltaSetXY'][0], _0x9f6cx4['y'] + this['deltaSetXY'][1]);
		if (_0x9f6cx6) {
			var _0x9f6cx1 = this['dragData'];
			var _0x9f6cx2 = this['proxy']['el']['down']('#' + _0x9f6cx1['ddel']['id']);
			_0x9f6cx2 && _0x9f6cx6['showBy'](_0x9f6cx2, _0x9f6cx1['repairXY'][0] + _0x9f6cx1['offsetX'])
		}
	}
	, onStartDrag: function () {
		var _0x9f6cx1 = this['dragData'];
		var _0x9f6cx5 = _0x9f6cx1['record'];
		var _0x9f6cx2 = this['tip'];
		if (_0x9f6cx2) {
			_0x9f6cx2['enable']();
			this['updateTip'](_0x9f6cx5, this['dragData']['originalStart'], _0x9f6cx5['getEndDate']());
			_0x9f6cx2['showBy'](this['getProxy']()['getGhost'](), _0x9f6cx1['repairXY'][0] + _0x9f6cx1['offsetX'])
		};
		if (this['dragData']['isTaskDrag']) {
			this['gantt']['fireEvent']('taskdragstart', this['gantt'], _0x9f6cx5)
		};
		this['gantt']['getScrollable']()['on']('scroll', this['onViewScroll'], this);
		if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
			this['gantt']['up']('timelinetree,timelinegrid')['getScrollable']()['on']('scroll', this['onViewScroll'], this)
		}
	}
	, onViewScroll: function () {
		var _0x9f6cx4 = this['proxy']
			, _0x9f6cx6 = this['gantt']
			, _0x9f6cx9 = this['dragData']
			, _0x9f6cx8 = _0x9f6cx6['getScroll']()
			, _0x9f6cx2 = _0x9f6cx8['left']
			, _0x9f6cx7 = _0x9f6cx8['top']
			, _0x9f6cx3 = _0x9f6cx6['rtl'] && !_0x9f6cx6['up']('[isViewport]');
		var _0x9f6cxc = _0x9f6cx4['getXY']();
		var _0x9f6cx5;
		if (_0x9f6cx3) {
			_0x9f6cx5 = [_0x9f6cxc[0] - _0x9f6cx2 + _0x9f6cx9['prevScroll']['left'], _0x9f6cxc[1] + _0x9f6cx7 - _0x9f6cx9['prevScroll']['top']]
		}
		else {
			_0x9f6cx5 = [_0x9f6cxc[0] + _0x9f6cx2 - _0x9f6cx9['prevScroll']['left'], _0x9f6cxc[1] + _0x9f6cx7 - _0x9f6cx9['prevScroll']['top']]
		};
		var _0x9f6cx1 = this['deltaSetXY'];
		if (_0x9f6cx3) {
			this['deltaSetXY'] = [_0x9f6cx1[0] - _0x9f6cx2 + _0x9f6cx9['prevScroll']['left'], _0x9f6cx1[1] + _0x9f6cx7 - _0x9f6cx9['prevScroll']['top']]
		}
		else {
			this['deltaSetXY'] = [_0x9f6cx1[0] + _0x9f6cx2 - _0x9f6cx9['prevScroll']['left'], _0x9f6cx1[1] + _0x9f6cx7 - _0x9f6cx9['prevScroll']['top']]
		};
		_0x9f6cx9['prevScroll'] = {
			left: _0x9f6cx2
			, top: _0x9f6cx7
		};
		_0x9f6cx4['setXY'](_0x9f6cx5);
		this['onDragOver']()
	}
	, updateTip: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (this['dragData']['isTaskDrag']) {
			if (_0x9f6cx2['isMilestone']() && _0x9f6cx5 - Ext['Date']['clearTime'](_0x9f6cx5, true) === 0) {
				_0x9f6cx5 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx5, Ext.ux.Scheduler['util']['Date'].MILLI, -1);
				_0x9f6cx1 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx1, Ext.ux.Scheduler['util']['Date'].MILLI, -1)
			};
			this['tip']['updateContent'](_0x9f6cx5, _0x9f6cx1, true, _0x9f6cx2)
		}
		else {
			this['tip']['updateContent'](null, _0x9f6cx5, true, _0x9f6cx2)
		}
	}
	, afterRepair: function () {
		Ext['fly'](this['dragData']['sourceNode'])['show']();
		if (this['tip']) {
			this['tip']['hide']()
		};
		this['dragging'] = false
	}
	, getRepairXY: function () {
		this['dragData']['isTaskDrag'] && this['gantt']['fireEvent']('aftertaskdrop', this['gantt']);
		return this['dragData']['repairXY']
	}
	, onDragDrop: function (_0x9f6cx7, _0x9f6cx1) {
		var _0x9f6cx8 = this
			, _0x9f6cx6 = _0x9f6cx8['cachedTarget'] || Ext['dd']['DragDropMgr']['getDDById'](_0x9f6cx1)
			, _0x9f6cxc = _0x9f6cx8['dragData']
			, _0x9f6cx5 = _0x9f6cx8['gantt']
			, _0x9f6cx2 = _0x9f6cxc['start']
			, _0x9f6cx9 = true
			, _0x9f6cx3 = _0x9f6cxc['valid'] && _0x9f6cx2 && _0x9f6cxc['originalStart'] - _0x9f6cx2 !== 0;
		_0x9f6cxc['ddCallbackArgs'] = [_0x9f6cx6, _0x9f6cx7, _0x9f6cx1];
		if (this['tip']) {
			this['tip']['disable']()
		};
		if (_0x9f6cxc['isTaskDrag'] && _0x9f6cx3) {
			_0x9f6cxc['finalize'] = function () {
				_0x9f6cx8['finalize']['apply'](_0x9f6cx8, arguments)
			};
			_0x9f6cx9 = _0x9f6cx5['fireEvent']('beforetaskdropfinalize', _0x9f6cx5, _0x9f6cxc, _0x9f6cx7) !== false
		};
		if (_0x9f6cx9) {
			this['finalize'](_0x9f6cx3)
		}
	}
	, finalize: function (_0x9f6cx5) {
		var _0x9f6cx7 = this
			, _0x9f6cx3 = this['dragData']
			, _0x9f6cx2 = this['gantt']
			, _0x9f6cx1 = _0x9f6cx3['record']
			, _0x9f6cx8 = _0x9f6cx3['start']
			, _0x9f6cx4, _0x9f6cx6;
		if (_0x9f6cx5) {
			_0x9f6cx4 = _0x9f6cx3['originalStart'];
			if (_0x9f6cx3['isTaskDrag']) {
				_0x9f6cx1['setStartDate'](_0x9f6cx8, true, this['skipWeekendsDuringDragDrop'], function () {
					_0x9f6cx6 = _0x9f6cx1['getStartDate']();
					if (_0x9f6cx4 - _0x9f6cx6 !== 0) {
						_0x9f6cx2['fireEvent']('taskdrop', _0x9f6cx2, _0x9f6cx1);
						if (Ext['isIE9']) {
							_0x9f6cx7['proxy']['el']['setStyle']('visibility', 'hidden');
							_0x9f6cx7['validDropTimer'] = Ext['Function']['defer'](_0x9f6cx7['onValidDrop'], 10, _0x9f6cx7, _0x9f6cx3['ddCallbackArgs'])
						}
						else {
							_0x9f6cx7['onValidDrop']['apply'](_0x9f6cx7, _0x9f6cx3['ddCallbackArgs'])
						}
					}
					else {
						_0x9f6cx7['onInvalidDrop']['apply'](_0x9f6cx7, _0x9f6cx3['ddCallbackArgs'])
					};
					_0x9f6cx2['fireEvent']('aftertaskdrop', _0x9f6cx2, _0x9f6cx1)
				})
			}
			else {
				_0x9f6cx1['setDeadlineDate'](_0x9f6cx8);
				_0x9f6cx7['onValidDrop']['apply'](_0x9f6cx7, _0x9f6cx3['ddCallbackArgs'])
			}
		}
		else {
			_0x9f6cx7['onInvalidDrop']['apply'](_0x9f6cx7, _0x9f6cx3['ddCallbackArgs']);
			_0x9f6cx3['isTaskDrag'] && _0x9f6cx2['fireEvent']('aftertaskdrop', _0x9f6cx2, _0x9f6cx1)
		}
	}
	, onInvalidDrop: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5) {
		if (!_0x9f6cx1) {
			_0x9f6cx1 = _0x9f6cx2;
			_0x9f6cx2 = _0x9f6cx2['getTarget']() || document['body']
		};
		if (this['tip']) {
			this['tip']['disable']()
		};
		return this['callParent']([_0x9f6cx2, _0x9f6cx1, _0x9f6cx5])
	}
	, autoOffset: function () {
		this['setDelta'](0, 0)
	}
	, setXConstraint: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		this['leftConstraint'] = _0x9f6cx5;
		this['rightConstraint'] = _0x9f6cx2;
		this['minX'] = _0x9f6cx5;
		this['maxX'] = _0x9f6cx2;
		if (_0x9f6cx1) {
			this['setXTicks'](this['initPageX'], _0x9f6cx1)
		};
		this['constrainX'] = true
	}
	, setYConstraint: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx2) {
		this['topConstraint'] = _0x9f6cx1;
		this['bottomConstraint'] = _0x9f6cx5;
		this['minY'] = _0x9f6cx1;
		this['maxY'] = _0x9f6cx5;
		if (_0x9f6cx2) {
			this['setYTicks'](this['initPageY'], _0x9f6cx2)
		};
		this['constrainY'] = true
	}
	, constrainTo: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1, _0x9f6cx3) {
		this['resetConstraints']();
		this['initPageX'] = _0x9f6cx2['left'] + _0x9f6cx1;
		this['initPageY'] = _0x9f6cx5['top'] + _0x9f6cx3;
		this['setXConstraint'](_0x9f6cx2['left'], _0x9f6cx2['right'], this['xTickSize']);
		this['setYConstraint'](_0x9f6cx5['top'] - 1, _0x9f6cx5['top'] - 1, this['yTickSize'])
	}
	, startDrag: function () {
		this['gantt']['el']['ddScrollConfig'] = {
			increment: Ext['dd']['ScrollManager']['increment']
			, hthresh: Ext['dd']['ScrollManager']['hthresh']
			, vthresh: -1
		};
		return this['callParent'](arguments)
	}
	, endDrag: function () {
		this['gantt']['getScrollable']()['un']('scroll', this['onViewScroll'], this);
		if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
			this['gantt']['up']('timelinetree,timelinegrid')['getScrollable']()['un']('scroll', this['onViewScroll'], this)
		};
		delete this['gantt']['el']['ddScrollConfig'];
		return this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Gantt.feature.TaskResize', {
	requires: ['Ext.resizer.Resizer', 'Ext.ux.Gantt.Tooltip']
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1);
		var _0x9f6cx2 = this['ganttView'];
		_0x9f6cx2['on']({
			destroy: this['cleanUp']
			, scope: this
		});
		_0x9f6cx2['mon'](_0x9f6cx2['el'], 'mousedown', this['onMouseDown'], this, {
			delegate: '.sch-resizable-handle'
		});
		this['callParent'](arguments)
	}
	, showDuration: true
	, showExactResizePosition: false
	, useTooltip: true
	, tooltipConfig: null
	, validatorFn: Ext['emptyFn']
	, validatorFnScope: null
	, taskRec: null
	, taskEl: null
	, isStart: null
	, ganttView: null
	, resizable: null
	, onMouseDown: function (_0x9f6cx6, _0x9f6cx3) {
		var _0x9f6cx5 = this['ganttView'];
		var _0x9f6cx8 = _0x9f6cx6['getTarget']('.sch-gantt-task-segment');
		var _0x9f6cx2 = _0x9f6cx6['getTarget'](_0x9f6cx5['eventSelector']);
		var _0x9f6cx1 = _0x9f6cx5['resolveTaskRecord'](_0x9f6cx2);
		if (_0x9f6cx8) {
			_0x9f6cx2 = _0x9f6cx8;
			_0x9f6cx1 = _0x9f6cx1['getSegment'](parseInt(_0x9f6cx8['getAttribute']('data-segmentIndex'), 10))
		};
		var _0x9f6cx7 = _0x9f6cx1['isResizable']();
		if (_0x9f6cx6['button'] !== 0 || _0x9f6cx7 === false || typeof _0x9f6cx7 === 'string' && !_0x9f6cx2['className']['match'](_0x9f6cx7)) {
			return
		};
		if (_0x9f6cx5['fireEvent']('beforetaskresize', _0x9f6cx5, _0x9f6cx1, _0x9f6cx6) === false) {
			return
		};
		_0x9f6cx6['stopEvent']();
		this['taskEl'] = Ext['get'](_0x9f6cx2);
		this['taskRec'] = _0x9f6cx1;
		this['isStart'] = !!_0x9f6cx3['className']['match']('sch-resizable-handle-start');
		_0x9f6cx5['el']['on']({
			mousemove: this['onMouseMove']
			, mouseup: this['onMouseUp']
			, scope: this
			, single: true
		})
	}
	, onMouseMove: function (_0x9f6cxc, _0x9f6cxf) {
		var _0x9f6cx8 = this['ganttView']
			, _0x9f6cx7 = this['taskRec']
			, _0x9f6cx13 = this['taskEl']
			, _0x9f6cxb = _0x9f6cx8['rtl']
			, _0x9f6cx1 = this['isStart']
			, _0x9f6cx3 = (_0x9f6cxb && !_0x9f6cx1) || (!_0x9f6cxb && _0x9f6cx1)
			, _0x9f6cx5 = _0x9f6cx8['getSnapPixelAmount']()
			, _0x9f6cx2 = _0x9f6cx13['getWidth']()
			, _0x9f6cxd, _0x9f6cxe;
		_0x9f6cx5 = Math['max'](1, _0x9f6cx5);
		var _0x9f6cx9 = {
			otherEdgeX: _0x9f6cx3 ? _0x9f6cx13['getRight']() : _0x9f6cx13['getLeft']()
			, target: _0x9f6cx13
			, record: _0x9f6cx7
			, isStart: _0x9f6cx1
			, isWest: _0x9f6cx3
			, handles: _0x9f6cx3 ? 'w' : 'e'
			, minHeight: 1
			, minWidth: _0x9f6cx5
			, widthIncrement: _0x9f6cx5
			, listeners: {
				resizedrag: this['partialResize']
				, resize: this['afterResize']
				, scope: this
			}
		};
		if (_0x9f6cx7 instanceof Ext.ux.Gantt['model']['TaskSegment'] && (_0x9f6cxe = this['taskEl']['next']('.sch-gantt-task-segment'))) {
			_0x9f6cx9['maxWidth'] = _0x9f6cxb ? _0x9f6cxe['getRight']() - _0x9f6cx13['getRight']() : _0x9f6cxe['getLeft']() - _0x9f6cx13['getLeft']()
		};
		_0x9f6cx9['constrainRegion'] = _0x9f6cx13['up'](_0x9f6cx8['getItemSelector']())['getRegion']();
		_0x9f6cx13['addCls']('sch-gantt-resizing');
		this['ganttView']['fireEvent']('taskresizestart', this['ganttView'], this['taskRec']);
		var _0x9f6cxa = _0x9f6cx13['down']('.sch-gantt-progress-bar');
		if (_0x9f6cxa) {
			_0x9f6cxa['setWidth'](100 * _0x9f6cxa['getWidth']() / _0x9f6cx13['getWidth']() + '%')
		};
		this['resizable'] = Ext['create']('Ext.resizer.Resizer', _0x9f6cx9);
		this['resizable']['resizeTracker']['onMouseDown'](_0x9f6cxc, this['resizable'][_0x9f6cx3 ? 'west' : 'east']['dom']);
		if (this['useTooltip']) {
			if (!this['tip']) {
				this['tip'] = Ext['create']('Ext.ux.Gantt.Tooltip', Ext['apply']({
					mode: this['showDuration'] ? 'duration' : 'startend'
					, gantt: this['ganttView']
					, constrainTo: this['ganttView']['up']('grid')['el']
					, cls: 'gnt-resize-tip'
				}, this['tooltipConfig']))
			}
			else {
				this['tip']['enable']()
			};
			this['tip']['updateContent'](_0x9f6cx7['getStartDate'](), _0x9f6cx7['getEndDate'](), true, _0x9f6cx7);
			this['tip']['showBy'](_0x9f6cx13, _0x9f6cxc['getX']());
			Ext['getBody']()['on']('mouseup', function () {
				this['tip']['disable']()
			}, this, {
				single: true
			})
		}
	}
	, onMouseUp: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = this['ganttView'];
		_0x9f6cx2['el']['un']({
			mousemove: this['onMouseMove']
			, mouseup: this['onMouseUp']
			, scope: this
			, single: true
		})
	}
	, partialResize: function (_0x9f6cxa, _0x9f6cxc, _0x9f6cx13, _0x9f6cxf) {
		var _0x9f6cx8 = this['ganttView']
			, _0x9f6cx7 = _0x9f6cxa['isWest']
			, _0x9f6cxd = _0x9f6cxa['record']
			, _0x9f6cx6;
		if (_0x9f6cx7) {
			_0x9f6cx6 = _0x9f6cx8['getDateFromCoordinate'](_0x9f6cxa['otherEdgeX'] - Math['min'](_0x9f6cxc, this['resizable']['maxWidth']), !this['showExactResizePosition'] ? 'round' : null)
		}
		else {
			_0x9f6cx6 = _0x9f6cx8['getDateFromCoordinate'](_0x9f6cxa['otherEdgeX'] + Math['min'](_0x9f6cxc, this['resizable']['maxWidth']), !this['showExactResizePosition'] ? 'round' : null)
		};
		if (!_0x9f6cx6 || _0x9f6cxa['date'] - _0x9f6cx6 === 0) {
			return
		};
		var _0x9f6cx2, _0x9f6cx1, _0x9f6cx3;
		if (this['showExactResizePosition']) {
			var _0x9f6cxe = _0x9f6cx8['timeAxis']['roundDate'](_0x9f6cx6, _0x9f6cx8['snapRelativeToEventStartDate'] ? _0x9f6cxd['getStartDate']() : false);
			_0x9f6cxe = _0x9f6cxd['skipNonWorkingTime'](_0x9f6cxe, !_0x9f6cxd['isMilestone']());
			var _0x9f6cx10 = _0x9f6cxa['target']['el']
				, _0x9f6cx5;
			if (_0x9f6cx7) {
				_0x9f6cx2 = _0x9f6cxd['skipNonWorkingTime'](_0x9f6cxe, !_0x9f6cxd['isMilestone']());
				_0x9f6cx3 = _0x9f6cx2;
				_0x9f6cx5 = _0x9f6cx8['timeAxisViewModel']['getDistanceBetweenDates'](_0x9f6cx2, _0x9f6cxd['getEndDate']());
				_0x9f6cx10['setWidth'](_0x9f6cx5);
				var _0x9f6cx12 = _0x9f6cx8['timeAxisViewModel']['getDistanceBetweenDates'](_0x9f6cx6, _0x9f6cx2);
				_0x9f6cx10['setX'](_0x9f6cx10['getX']() + _0x9f6cx12)
			}
			else {
				var _0x9f6cx11 = Ext.ux.Gantt['util']['Data']['cloneModelSet']([_0x9f6cxd])[0];
				var _0x9f6cx9 = _0x9f6cxd['getTaskStore']();
				_0x9f6cx11['setTaskStore'](_0x9f6cx9);
				_0x9f6cx11['setCalendar'](_0x9f6cxd['getCalendar']());
				_0x9f6cx11['setEndDateWithoutPropagation'](_0x9f6cxe, false, _0x9f6cx9['skipWeekendsDuringDragDrop']);
				_0x9f6cx1 = _0x9f6cx11['getEndDate']();
				_0x9f6cx3 = _0x9f6cx1;
				_0x9f6cx5 = _0x9f6cx8['timeAxisViewModel']['getDistanceBetweenDates'](_0x9f6cxd['getStartDate'](), _0x9f6cx1);
				_0x9f6cx10['setWidth'](_0x9f6cx5)
			}
		}
		else {
			_0x9f6cx2 = _0x9f6cxa['isStart'] ? _0x9f6cx6 : _0x9f6cxa['record']['getStartDate']();
			_0x9f6cx1 = _0x9f6cxa['isStart'] ? _0x9f6cxa['record']['getEndDate']() : _0x9f6cx6;
			_0x9f6cx3 = _0x9f6cx6
		};
		_0x9f6cxa['date'] = _0x9f6cx3;
		_0x9f6cx8['fireEvent']('partialtaskresize', _0x9f6cx8, _0x9f6cxd, _0x9f6cx2, _0x9f6cx1, _0x9f6cxa['el'], _0x9f6cxf);
		if (this['useTooltip']) {
			var _0x9f6cxb = this['validatorFn']['call'](this['validatorFnScope'] || this, _0x9f6cxd, _0x9f6cx2, _0x9f6cx1) !== false;
			this['tip']['updateContent'](_0x9f6cx2, _0x9f6cx1, _0x9f6cxb, _0x9f6cxd)
		}
	}
	, afterResize: function (_0x9f6cxe, _0x9f6cx13, _0x9f6cx3, _0x9f6cx9) {
		if (this['useTooltip']) {
			this['tip']['disable']()
		};
		var _0x9f6cxc = this
			, _0x9f6cx7 = _0x9f6cxe['record']
			, _0x9f6cx5 = _0x9f6cx7['getStartDate']()
			, _0x9f6cxd = _0x9f6cx7['getEndDate']()
			, _0x9f6cx1 = _0x9f6cxe['isStart'] ? _0x9f6cxe['date'] : _0x9f6cx5
			, _0x9f6cx2 = _0x9f6cxe['isStart'] ? _0x9f6cxd : _0x9f6cxe['date']
			, _0x9f6cx6 = _0x9f6cxc['ganttView']
			, _0x9f6cxb = false
			, _0x9f6cxa = true;
		_0x9f6cxc['resizeContext'] = {
			record: _0x9f6cx7
			, start: _0x9f6cx1
			, end: _0x9f6cx2
			, oldStart: _0x9f6cx7['getStartDate']()
			, finalize: function () {
				_0x9f6cxc['finalize']['apply'](_0x9f6cxc, arguments)
			}
		};
		if (_0x9f6cx1 && _0x9f6cx2 && (_0x9f6cx1 - _0x9f6cx5 || _0x9f6cx2 - _0x9f6cxd) && _0x9f6cxc['validatorFn']['call'](_0x9f6cxc['validatorFnScope'] || _0x9f6cxc, _0x9f6cx7, _0x9f6cx1, _0x9f6cx2, _0x9f6cx9) !== false) {
			_0x9f6cxa = _0x9f6cx6['fireEvent']('beforetaskresizefinalize', _0x9f6cxc, _0x9f6cxc['resizeContext'], _0x9f6cx9) !== false;
			_0x9f6cxb = true
		}
		else {
			_0x9f6cx6['refreshKeepingScroll']()
		};
		if (_0x9f6cxa) {
			_0x9f6cxc['finalize'](_0x9f6cxb)
		}
	}
	, finalize: function (_0x9f6cx9) {
		var _0x9f6cx4 = this
			, _0x9f6cx6 = _0x9f6cx4['ganttView']
			, _0x9f6cx5 = _0x9f6cx4['resizeContext']
			, _0x9f6cx3 = _0x9f6cx5['record']
			, _0x9f6cx1 = _0x9f6cx3['task'] || _0x9f6cx3
			, _0x9f6cx2 = _0x9f6cx6['taskStore']['skipWeekendsDuringDragDrop']
			, _0x9f6cx7, _0x9f6cx8;
		if (_0x9f6cx9) {
			if (_0x9f6cx5['start'] - _0x9f6cx5['oldStart'] !== 0) {
				_0x9f6cx7 = _0x9f6cx3['getStartDate']();
				_0x9f6cx8 = _0x9f6cx5['start'] <= _0x9f6cx5['end'] ? _0x9f6cx5['start'] : _0x9f6cx5['end'];
				_0x9f6cx3['setStartDate'](_0x9f6cx8, false, _0x9f6cx2, function (_0x9f6cxa, _0x9f6cxc) {
					_0x9f6cx8 = _0x9f6cx3['getStartDate']();
					if (!(_0x9f6cx8 < _0x9f6cx7 || _0x9f6cx8 > _0x9f6cx7)) {
						_0x9f6cx6['refreshNode'](_0x9f6cx6['store']['indexOf'](_0x9f6cx1))
					};
					_0x9f6cx6['fireEvent']('aftertaskresize', _0x9f6cx6, _0x9f6cx1)
				})
			}
			else {
				_0x9f6cx7 = _0x9f6cx3['getEndDate']();
				_0x9f6cx8 = _0x9f6cx5['start'] <= _0x9f6cx5['end'] ? _0x9f6cx5['end'] : _0x9f6cx5['start'];
				_0x9f6cx3['setEndDate'](_0x9f6cx8, false, _0x9f6cx2, function (_0x9f6cxa, _0x9f6cxc) {
					_0x9f6cx8 = _0x9f6cx3['getEndDate']();
					if (!(_0x9f6cx8 < _0x9f6cx7 || _0x9f6cx8 > _0x9f6cx7)) {
						_0x9f6cx6['refreshNode'](_0x9f6cx6['store']['indexOf'](_0x9f6cx1))
					};
					_0x9f6cx6['fireEvent']('aftertaskresize', _0x9f6cx6, _0x9f6cx1)
				})
			}
		}
		else {
			_0x9f6cx6['refreshNode'](_0x9f6cx6['store']['indexOf'](_0x9f6cx1));
			_0x9f6cx6['fireEvent']('aftertaskresize', _0x9f6cx6, _0x9f6cx1)
		};
		_0x9f6cx4['resizable']['destroy']();
		_0x9f6cx4['resizeContext'] = null
	}
	, cleanUp: function () {
		if (this['tip']) {
			this['tip']['destroy']()
		}
	}
});
Ext.define('Ext.ux.Gantt.feature.taskdd.AsyncDropHandler', {
	$resolveFn: null
	, $rejectFn: null
	, $processFn: null
	, $canceled: false
	, $waiting: false
	, $done: false
	, constructor: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['$resolveFn'] = _0x9f6cx5;
		_0x9f6cx1['$rejectFn'] = _0x9f6cx2;
		_0x9f6cx1['$processFn'] = _0x9f6cx3
	}
	, isWaiting: function () {
		return this['$waiting']
	}
	, wait: function () {
		this['$waiting'] = true
	}
	, isDone: function () {
		return this['$done']
	}
	, done: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (!_0x9f6cx2['$done'] && !_0x9f6cx2['$canceled']) {
			_0x9f6cx2['$waiting'] = false;
			_0x9f6cx2['$done'] = true;
			_0x9f6cx2.$resolveFn(_0x9f6cx1)
		}
	}
	, isCanceled: function () {
		return this['$canceled']
	}
	, cancel: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (!_0x9f6cx2['$canceled'] && !_0x9f6cx2['$done']) {
			_0x9f6cx2['$waiting'] = false;
			_0x9f6cx2['$canceled'] = true;
			_0x9f6cx2.$rejectFn(_0x9f6cx1)
		}
	}
	, process: function () {
		return this.$processFn()
	}
});
Ext.define('Ext.ux.Scheduler.patches.Region', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.util.Region'
	, maxVersion: '6.2.0'
	, obsoleteTestName: 'patches/007_region.t.js'
	, overrides: {
		getOffsetsTo: function (_0x9f6cx1) {
			return {
				x: this['x'] - _0x9f6cx1['x']
				, y: this['y'] - _0x9f6cx1['y']
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.DragZoneDupIds', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.dd.DragZone'
	, minVersion: '6.0.2'
	, reportUrl: 'https://www.sencha.com/forum/showthread.php?338467-DragZone-duplicates-DOM-ids-which-leads-to-error-if-one-Ext-get()s-duplicated-element'
	, obsoleteTestName: 'patches/005_dragzone_dup_ids.t.js'
	, description: ['Drag zone clones dragged element into drag status proxy without substituting cloned element id, thus we might', 'hit the case when there are two or more elements with the same id in the DOM. If such original element has been', 'accessed before via Ext.get(), i.e. it is cached in Ext.dom.Element cache, then accessing the similar element', 'inside drag proxy with Ext.get() will lead to duplicate ids exception thrown from Ext.get()'].join(' ')
	, overrides: {
		onInitDrag: function (_0x9f6cx1, _0x9f6cx3) {
			var _0x9f6cx2 = this
				, _0x9f6cx5 = _0x9f6cx2['dragData']['ddel']['cloneNode'](true);
			_0x9f6cx5['id'] = Ext['id']();
			_0x9f6cx2['proxy']['update'](_0x9f6cx5);
			_0x9f6cx2['onStartDrag'](_0x9f6cx1, _0x9f6cx3);
			return true
		}
	}
});
Ext.define('Ext.ux.Gantt.feature.taskdd.Proxy', {
	extend: 'Ext.dd.StatusProxy'
	, alias: 'widget.gnt-task-ddproxy'
	, config: {
		forceAttachTo: null
	}
	, shadow: false
	, forceStatusProc: null
	, lastRecievedStatus: null
	, destroy: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['callParent']();
		if (_0x9f6cx1['forceStatusProc']) {
			clearTimeout(_0x9f6cx1['forceStatusProc']);
			_0x9f6cx1['forceStatusProc'] = null
		}
	}
	, applyForceAttachTo: function (_0x9f6cx1) {
		if (_0x9f6cx1) {
			_0x9f6cx1 = Ext['get'](_0x9f6cx1);
			if (_0x9f6cx1['dom'] == Ext['getBody']()['dom']) {
				_0x9f6cx1 = null
			}
		};
		return _0x9f6cx1
	}
	, updateForceAttachTo: function (_0x9f6cx2, _0x9f6cx1) {
		this['forceAttach'](_0x9f6cx2)
	}
	, forceAttach: function (_0x9f6cx3) {
		var _0x9f6cx5 = this
			, _0x9f6cx2, _0x9f6cx4, _0x9f6cx1;
		if (_0x9f6cx5['rendered']) {
			_0x9f6cx2 = _0x9f6cx5['getEl']();
			_0x9f6cx3 = _0x9f6cx3 || Ext['getBody']();
			_0x9f6cx4 = _0x9f6cx5['getXY']();
			_0x9f6cx1 = _0x9f6cx3['translatePoints'](_0x9f6cx4);
			_0x9f6cx2['hide']();
			_0x9f6cx3['appendChild'](_0x9f6cx2);
			_0x9f6cx2['setLocalXY'](_0x9f6cx1['left'], _0x9f6cx1['top']);
			!_0x9f6cx5['hidden'] && _0x9f6cx2['show']()
		}
	}
	, ensureAttachedToBody: function (_0x9f6cx1) {}
	, afterRender: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['callParent']();
		_0x9f6cx1['forceAttach'](_0x9f6cx1['getForceAttachTo']())
	}
	, getTaskGhostEl: function () {
		return Ext['fly'](this['getGhost']())['first'](null, true)
	}
	, setStatus: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx2['forceStatusProc']) {
			_0x9f6cx2['lastRecievedStatus'] = _0x9f6cx1
		}
		else {
			_0x9f6cx2['callParent']([_0x9f6cx1])
		}
	}
	, reset: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx2['forceStatusProc']) {
			clearTimeout(_0x9f6cx2['forceStatusProc']);
			_0x9f6cx2['lastRecievedStatus'] = null;
			_0x9f6cx2['forceStatusProc'] = null
		};
		_0x9f6cx2['callParent']([_0x9f6cx1])
	}
	, forceStatus: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		if (!_0x9f6cx5['forceStatusProc']) {
			_0x9f6cx5['lastRecievedStatus'] = _0x9f6cx5['dropStatus'];
			_0x9f6cx5['setStatus'](_0x9f6cx2);
			_0x9f6cx5['forceStatusProc'] = Ext['Function']['defer'](function () {
				_0x9f6cx5['forceStatusProc'] = null;
				_0x9f6cx5['setStatus'](_0x9f6cx5['lastRecievedStatus'])
			}, _0x9f6cx1 || 100)
		}
	}
});
Ext.define('Ext.ux.Gantt.feature.taskdd.DropZone', function (_0x9f6cx1) {
	function _0x9f6cx2(_0x9f6cx6, _0x9f6cx5, _0x9f6cx4, _0x9f6cx7, _0x9f6cxa, _0x9f6cxc) {
		var _0x9f6cx3 = 0
			, _0x9f6cx8 = []
			, _0x9f6cx9 = function (_0x9f6cx13) {
				++_0x9f6cx3;
				_0x9f6cx13 && _0x9f6cx8['push'](_0x9f6cx13)
			};
		_0x9f6cx5['hasListeners'][_0x9f6cx4] && _0x9f6cx5['fireEvent']['apply'](_0x9f6cx5, []['concat'](_0x9f6cx4, _0x9f6cx7, _0x9f6cx9));
		_0x9f6cx8 = _0x9f6cx8['length'] && _0x9f6cx8.join(' ') || _0x9f6cx6['dropAllowed'];
		return _0x9f6cx3 > 0 ? (_0x9f6cxa ? _0x9f6cxa(_0x9f6cx8) : _0x9f6cx8) : (_0x9f6cxc ? _0x9f6cxc() : _0x9f6cx6['dropNotAllowed'])
	}
	return {
		extend: 'Ext.dd.DropZone'
		, config: {
			gantt: null
			, ownerDragZone: null
		}
		, scrollDetacher: null
		, lastOverEvent: null
		, constructor: function (_0x9f6cx3, _0x9f6cx5) {
			var _0x9f6cx4 = this;
			_0x9f6cx4['callParent']([_0x9f6cx3, _0x9f6cx5]);
			_0x9f6cx4['initConfig'](_0x9f6cx5)
		}
		, destroy: function () {
			var _0x9f6cx5 = this;
			_0x9f6cx5['setOwnerDragZone'](null);
			_0x9f6cx5['callParent']()
		}
		, updateOwnerDragZone: function (_0x9f6cx4, _0x9f6cx3) {
			var _0x9f6cx5 = this;
			if (_0x9f6cx5['scrollDetacher']) {
				Ext['destroy'](_0x9f6cx5['scrollDetacher']);
				_0x9f6cx5['scrollDetacher'] = null
			};
			if (_0x9f6cx4) {
				_0x9f6cx5['scrollDetacher'] = Ext['fly'](_0x9f6cx5['getEl']())['on']('scroll', _0x9f6cx5['onDropZoneElementScroll'], _0x9f6cx5, {
					destroyable: true
				})
			}
		}
		, onDropZoneElementScroll: function (_0x9f6cx7) {
			var _0x9f6cx3 = this
				, _0x9f6cx5 = _0x9f6cx3['getOwnerDragZone']();
			if (_0x9f6cx5['dragging'] && _0x9f6cx3['lastOverNode']) {
				_0x9f6cx5['getProxy']()['setStatus'](_0x9f6cx3['notifyOver'](_0x9f6cx5, _0x9f6cx3['lastOverEvent'], _0x9f6cx5['dragData']))
			}
		}
		, getTargetFromEvent: function (_0x9f6cx5) {
			return _0x9f6cx5['getTarget'](this['getGantt']()['getItemSelector']())
		}
		, onNodeEnter: function (_0x9f6cx9, _0x9f6cx5, _0x9f6cx8, _0x9f6cx6) {
			var _0x9f6cx7 = this
				, _0x9f6cx3 = _0x9f6cx7['getGantt']();
			_0x9f6cx3['hasListeners']['task-row-drag-enter'] && _0x9f6cx3['fireEvent']('task-row-drag-enter', _0x9f6cx3, _0x9f6cx9, _0x9f6cx5, _0x9f6cx6, _0x9f6cx8)
		}
		, onNodeOut: function (_0x9f6cx9, _0x9f6cx5, _0x9f6cx8, _0x9f6cx6) {
			var _0x9f6cx7 = this
				, _0x9f6cx3 = _0x9f6cx7['getGantt']();
			_0x9f6cx3['hasListeners']['task-row-drag-out'] && _0x9f6cx3['fireEvent']('task-row-drag-out', _0x9f6cx3, _0x9f6cx9, _0x9f6cx5, _0x9f6cx6, _0x9f6cx8);
			if (!_0x9f6cx7['getEl']()['contains'](_0x9f6cx8['getTarget']())) {
				_0x9f6cx3['hasListeners']['schedule-drag-out'] && _0x9f6cx3['fireEvent']('schedule-drag-out', _0x9f6cx3, _0x9f6cx5, _0x9f6cx6, _0x9f6cx8)
			}
		}
		, onNodeOver: function (_0x9f6cx9, _0x9f6cx5, _0x9f6cx8, _0x9f6cx6) {
			var _0x9f6cx7 = this
				, _0x9f6cx3 = _0x9f6cx7['getGantt']();
			_0x9f6cx7['lastOverEvent'] = _0x9f6cx8;
			return _0x9f6cx2(_0x9f6cx7, _0x9f6cx3, 'task-row-drag-over', [_0x9f6cx3, _0x9f6cx9, _0x9f6cx5, _0x9f6cx6, _0x9f6cx8])
		}
		, onNodeDrop: function (_0x9f6cxa, _0x9f6cx3, _0x9f6cxc, _0x9f6cx9) {
			var _0x9f6cx8 = this
				, _0x9f6cx6 = _0x9f6cx8['getGantt']()
				, _0x9f6cx5 = false;
			_0x9f6cx2(_0x9f6cx8, _0x9f6cx6, 'task-row-drag-over', [_0x9f6cx6, _0x9f6cxa, _0x9f6cx3, _0x9f6cx9, _0x9f6cxc], function _0x9f6cx7() {
				_0x9f6cx6['hasListeners']['task-row-drag-drop'] && _0x9f6cx6['fireEvent']('task-row-drag-drop', _0x9f6cx6, _0x9f6cxa, _0x9f6cx3, _0x9f6cx9, _0x9f6cxc);
				_0x9f6cx5 = true
			});
			return _0x9f6cx5
		}
		, onContainerOver: function (_0x9f6cx5, _0x9f6cx8, _0x9f6cx6) {
			var _0x9f6cx7 = this
				, _0x9f6cx3 = _0x9f6cx7['getGantt']();
			return _0x9f6cx2(_0x9f6cx7, _0x9f6cx3, 'schedule-drag-over', [_0x9f6cx3, _0x9f6cx5, _0x9f6cx6, _0x9f6cx8])
		}
		, onContainerDrop: function (_0x9f6cx3, _0x9f6cxc, _0x9f6cx9) {
			var _0x9f6cx8 = this
				, _0x9f6cx6 = _0x9f6cx8['getGantt']()
				, _0x9f6cx5 = false;
			_0x9f6cx2(_0x9f6cx8, _0x9f6cx6, 'schedule-drag-over', [_0x9f6cx6, _0x9f6cx3, _0x9f6cx9, _0x9f6cxc], function _0x9f6cx7() {
				_0x9f6cx6['hasListeners']['schedule-drag-drop'] && _0x9f6cx6['fireEvent']('schedule-drag-drop', _0x9f6cx6, _0x9f6cx3, _0x9f6cx9, _0x9f6cxc);
				_0x9f6cx5 = true
			});
			return _0x9f6cx5
		}
	}
});
Ext.define('Ext.ux.Gantt.feature.taskdd.plugin.InRowTaskDragDrop', function (_0x9f6cx1) {
	function _0x9f6cx3(_0x9f6cxe, _0x9f6cx11, _0x9f6cx6, _0x9f6cxc, _0x9f6cx13, _0x9f6cx4, _0x9f6cxd, _0x9f6cx10) {
		var _0x9f6cx17 = false
			, _0x9f6cxa, _0x9f6cx12, _0x9f6cxf, _0x9f6cx14, _0x9f6cx7, _0x9f6cxb, _0x9f6cx9, _0x9f6cx8;
		_0x9f6cxa = _0x9f6cxc['getDateFromCoordinate'](_0x9f6cxe);
		_0x9f6cx12 = _0x9f6cxa - _0x9f6cx11;
		_0x9f6cx7 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx6['getStartDate'](), Ext.ux.Scheduler['util']['Date'].MILLI, _0x9f6cx12);
		if (_0x9f6cx13) {
			_0x9f6cx7 = _0x9f6cxc['timeAxis']['roundDate'](_0x9f6cx7, _0x9f6cx4 ? _0x9f6cx6['getStartDate']() : false);
			if (_0x9f6cxd) {
				_0x9f6cx7 = _0x9f6cx6['skipNonWorkingTime'](_0x9f6cx7, !_0x9f6cx6['isMilestone']())
			};
			_0x9f6cxb = _0x9f6cx6['recalculateEndDate'](_0x9f6cx7)
		}
		else {
			if (_0x9f6cx6['isSegmented']()) {
				_0x9f6cxb = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx7, Ext.ux.Scheduler['util']['Date'].MILLI, _0x9f6cx6['getLastSegment']()['getEndOffset']())
			}
			else {
				_0x9f6cxb = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx7, _0x9f6cx6['getDurationUnit'](), _0x9f6cx6['getDuration']())
			}
		};
		_0x9f6cxf = _0x9f6cxc['timeAxis']['getStart']();
		_0x9f6cx14 = _0x9f6cxc['timeAxis']['getEnd']();
		if (Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0x9f6cx7, _0x9f6cxf, _0x9f6cx14)) {
			_0x9f6cx9 = _0x9f6cxc['getCoordinateFromDate'](_0x9f6cx7, false) - _0x9f6cxc['getXOffset'](_0x9f6cx6)
		}
		else {
			_0x9f6cx9 = _0x9f6cxc['getCoordinateFromDate'](_0x9f6cxf, false)
		};
		if (Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0x9f6cxb, _0x9f6cxf, _0x9f6cx14)) {
			_0x9f6cx8 = _0x9f6cxc['getCoordinateFromDate'](_0x9f6cxb, false)
		}
		else {
			_0x9f6cx8 = _0x9f6cxc['getCoordinateFromDate'](_0x9f6cx14, false)
		};
		_0x9f6cx17 = (_0x9f6cx10 || Ext['returnTrue'])(_0x9f6cx7, _0x9f6cxb, _0x9f6cx9, _0x9f6cx8);
		return _0x9f6cx17
	}

	function _0x9f6cx2(_0x9f6cxd, _0x9f6cx9, _0x9f6cxe, _0x9f6cx6, _0x9f6cx8, _0x9f6cx13, _0x9f6cxa, _0x9f6cxc, _0x9f6cxb, _0x9f6cx7) {
		(new Ext.Promise(function (_0x9f6cx11, _0x9f6cx12) {
			var _0x9f6cx4 = new Ext.ux.Gantt['feature']['taskdd'].AsyncDropHandler(_0x9f6cx11, _0x9f6cx12, _0x9f6cx7)
				, _0x9f6cx10, _0x9f6cxf;
			if (_0x9f6cx9['hasListeners']['beforetaskdropfinalize']) {
				_0x9f6cxf = Ext['apply']({}, _0x9f6cxc, {
					start: _0x9f6cx8
					, end: _0x9f6cx13
					, finalize: function (_0x9f6cx14) {
						if (_0x9f6cx14) {
							_0x9f6cx4['process']();
							_0x9f6cx4['done']()
						}
						else {
							_0x9f6cx4['cancel']()
						}
					}
				});
				_0x9f6cx10 = (false === _0x9f6cx9['fireEvent']('beforetaskdropfinalize', _0x9f6cx9, _0x9f6cxf, _0x9f6cxb))
			};
			if (!_0x9f6cx10 && !_0x9f6cx4['isWaiting']() && !(_0x9f6cx4['isDone']() || _0x9f6cx4['isCanceled']())) {
				_0x9f6cx4['process']();
				_0x9f6cx4['done']()
			}
		})['then'](function (_0x9f6cx4) {
			_0x9f6cx9['hasListeners']['taskdrop'] && _0x9f6cx9['fireEvent']('taskdrop', _0x9f6cx9, _0x9f6cx6)
		})['then'](undefined, function (_0x9f6cx4) {
			_0x9f6cx9['hasListeners']['taskdropcancel'] && _0x9f6cx9['fireEvent']('taskdropcancel', _0x9f6cx9, _0x9f6cx6)
		}))
	}

	function _0x9f6cx5(_0x9f6cx8, _0x9f6cx4, _0x9f6cx6, _0x9f6cx7) {
		_0x9f6cx4['setStartEndDate'](_0x9f6cx6, _0x9f6cx7)
	}
	return {
		extend: 'Ext.plugin.Abstract'
		, alias: 'plugin.gantt_inrowtaskdragdrop'
		, id: 'inrowtaskdragdrop'
		, requires: ['Ext.Promise', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Gantt.Tooltip', 'Ext.ux.Gantt.feature.taskdd.AsyncDropHandler']
		, config: {
			gantt: null
			, tooltip: null
			, validatorFn: Ext['returnTrue']
			, showExactDropPosition: false
			, snapRelativeToEventStartDate: false
			, skipWeekendsDuringDragDrop: false
			, constrainDragToTaskRow: true
			, dropAllowedCls: 'sch-gantt-dragproxy'
		}
		, ganttDetacher: null
		, destroy: function () {
			var _0x9f6cx4 = this;
			_0x9f6cx4['setTooltip'](null);
			_0x9f6cx4['setGantt'](null);
			_0x9f6cx4['callParent']()
		}
		, enable: function () {
			var _0x9f6cx4 = this;
			if (_0x9f6cx4['disabled']) {
				_0x9f6cx4['callParent']();
				_0x9f6cx4['attachToGantt']()
			}
		}
		, disable: function () {
			var _0x9f6cx4 = this;
			if (!_0x9f6cx4['disabled']) {
				_0x9f6cx4['callParent']();
				_0x9f6cx4['detachFromGantt']()
			}
		}
		, updateGantt: function (_0x9f6cx4, _0x9f6cx6) {
			var _0x9f6cx7 = this;
			_0x9f6cx6 && _0x9f6cx7['detachFromGantt']();
			_0x9f6cx4 && !_0x9f6cx7['disabled'] && _0x9f6cx7['attachToGantt']()
		}
		, attachToGantt: function () {
			var _0x9f6cx4 = this;
			_0x9f6cx4['ganttDetacher'] = _0x9f6cx4['getGantt']()['on']({
				scope: _0x9f6cx4
				, destroyable: true
				, taskdragstart: _0x9f6cx4['onTaskDragStart']
				, "task-row-drag-enter": _0x9f6cx4['onTaskRowDragEnter']
				, "task-row-drag-out": _0x9f6cx4['onTaskRowDragOut']
				, "task-row-drag-over": _0x9f6cx4['onTaskRowDragOver']
				, "task-row-drag-drop": _0x9f6cx4['onTaskRowDragDrop']
				, "schedule-drag-over": _0x9f6cx4['onTaskContainerOver']
				, aftertaskdrop: _0x9f6cx4['onAfterTaskDrop']
			})
		}
		, detachFromGantt: function () {
			var _0x9f6cx4 = this;
			_0x9f6cx4['ganttDetacher'] && (Ext['destroy'](_0x9f6cx4['ganttDetacher']), _0x9f6cx4['ganttDetacher'] = null)
		}
		, applyTooltip: function (_0x9f6cx7) {
			var _0x9f6cx4 = this;
			if (_0x9f6cx7 && !(_0x9f6cx7 instanceof Ext.ux.Gantt['Tooltip'])) {
				_0x9f6cx7 = Ext['create'](Ext['apply']({}, _0x9f6cx7 === true ? {} : _0x9f6cx7, {
					xclass: 'Ext.ux.Gantt.Tooltip'
					, gantt: _0x9f6cx4['getGantt']()
					, constrainTo: _0x9f6cx4['getGantt']()['getEl']()
					, cls: 'gnt-dragdrop-tip'
					, hidden: true
					, avoidPointer: true
					, $ownedBy: _0x9f6cx4
				}))
			};
			return _0x9f6cx7
		}
		, updateTooltip: function (_0x9f6cx6, _0x9f6cx7) {
			var _0x9f6cx4 = this;
			if (_0x9f6cx7 && _0x9f6cx7['$ownedBy'] === _0x9f6cx4) {
				Ext['destroy'](_0x9f6cx7)
			}
		}
		, updateTipContent: function (_0x9f6cx8, _0x9f6cx7, _0x9f6cx9, _0x9f6cx4, _0x9f6cx6) {
			_0x9f6cx9 = _0x9f6cx9 || _0x9f6cx7['getStartDate']();
			_0x9f6cx4 = _0x9f6cx4 || _0x9f6cx7['getEndDate']();
			if (_0x9f6cx7['isMilestone']() && _0x9f6cx9 - Ext['Date']['clearTime'](_0x9f6cx9, true) === 0) {
				_0x9f6cx9 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx9, Ext.ux.Scheduler['util']['Date'].MILLI, -1);
				_0x9f6cx4 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx4, Ext.ux.Scheduler['util']['Date'].MILLI, -1)
			};
			_0x9f6cx8['updateContent'](_0x9f6cx9, _0x9f6cx4, _0x9f6cx6, _0x9f6cx7)
		}
		, constrainProxyToInitialTaskRow: function (_0x9f6cx7, _0x9f6cx13, _0x9f6cx6, _0x9f6cxa) {
			var _0x9f6cx8 = _0x9f6cxa['getProxy']()
				, _0x9f6cx4, _0x9f6cxc, _0x9f6cx9;
			_0x9f6cx8['setForceAttachTo'](_0x9f6cx7['getSecondaryCanvasEl']());
			Ext['fly'](_0x9f6cx13)['hide']();
			_0x9f6cx4 = Ext['fly'](_0x9f6cx13)['getXY']();
			_0x9f6cx4 = new Ext['util'].Point(_0x9f6cx4[0], _0x9f6cx4[1]);
			_0x9f6cxc = Ext['fly'](_0x9f6cxa['getEl']())['getXY']();
			_0x9f6cxc = new Ext['util'].Point(_0x9f6cxc[0], _0x9f6cxc[1]);
			_0x9f6cx9 = _0x9f6cx4['getOffsetsTo'](_0x9f6cxc);
			_0x9f6cxa['setInitPosition'](-_0x9f6cx9['x'], -_0x9f6cx9['y']);
			_0x9f6cxa['setDelta'](_0x9f6cx6['x'], _0x9f6cx6['y']);
			_0x9f6cxa['setYConstraint'](0, 0)
		}
		, onTaskDragStart: function (_0x9f6cx7, _0x9f6cx4, _0x9f6cx9, _0x9f6cx8, _0x9f6cxc) {
			var _0x9f6cx6 = this;
			if (_0x9f6cx8['isTaskDrag'] && _0x9f6cx6['getConstrainDragToTaskRow']()) {
				_0x9f6cx6['constrainProxyToInitialTaskRow'](_0x9f6cx7, _0x9f6cx8['ddel'], _0x9f6cx8['startOffsets'], _0x9f6cxc)
			}
		}
		, onTaskRowDragEnter: function (_0x9f6cx7, _0x9f6cxc, _0x9f6cx9, _0x9f6cx8, _0x9f6cxa) {
			var _0x9f6cxb = this
				, _0x9f6cxd, _0x9f6cx13, _0x9f6cx6, _0x9f6cxe;
			if (_0x9f6cx8['isTaskDrag'] && Ext['fly'](_0x9f6cx8['item'])['contains'](_0x9f6cxc)) {
				_0x9f6cxb['constrainProxyToInitialTaskRow'](_0x9f6cx7, _0x9f6cx8['ddel'], _0x9f6cx8['startOffsets'], _0x9f6cx9);
				_0x9f6cxe = _0x9f6cxb['getTooltip']();
				_0x9f6cxe && _0x9f6cxb['updateTipContent'](_0x9f6cxe, _0x9f6cx8['record']);
				_0x9f6cxe && _0x9f6cxe['showBy'](_0x9f6cx9['getProxy']()['getGhost']())
			}
		}
		, onTaskRowDragOut: function (_0x9f6cx7, _0x9f6cxa, _0x9f6cx13, _0x9f6cx9, _0x9f6cxc) {
			var _0x9f6cx6 = this
				, _0x9f6cx8;
			if (_0x9f6cx9['isTaskDrag'] && !_0x9f6cx6['getConstrainDragToTaskRow']() && Ext['fly'](_0x9f6cx9['item'])['contains'](_0x9f6cxa)) {
				_0x9f6cx13['getProxy']()['setForceAttachTo'](null);
				_0x9f6cx8 = _0x9f6cx6['getTooltip']();
				_0x9f6cx8 && _0x9f6cx8['hide']();
				_0x9f6cx13['setDelta'](0, 0);
				_0x9f6cx13['clearConstraints']();
				Ext['fly'](_0x9f6cx9['ddel'])['show']()
			}
		}
		, onTaskRowDragOver: function (_0x9f6cx6, _0x9f6cxa, _0x9f6cx9, _0x9f6cx8, _0x9f6cx13, _0x9f6cxd) {
			var _0x9f6cxb = this
				, _0x9f6cxc, _0x9f6cxe, _0x9f6cx7;
			if (_0x9f6cx8['isTaskDrag'] && (_0x9f6cxb['getConstrainDragToTaskRow']() || Ext['fly'](_0x9f6cx8['item'])['contains'](_0x9f6cxa))) {
				_0x9f6cxd(_0x9f6cxb['getDropAllowedCls']());
				_0x9f6cx7 = _0x9f6cx8['record'];
				_0x9f6cxc = _0x9f6cx13['getXY']();
				_0x9f6cx3(_0x9f6cxc[0], _0x9f6cx8['startPointDate'], _0x9f6cx7, _0x9f6cx6, _0x9f6cxb['getShowExactDropPosition'](), _0x9f6cxb['getSnapRelativeToEventStartDate'](), _0x9f6cxb['getSkipWeekendsDuringDragDrop'](), function (_0x9f6cx17, _0x9f6cx11, _0x9f6cx10, _0x9f6cxf) {
					var _0x9f6cx14 = true
						, _0x9f6cx12, _0x9f6cx4;
					_0x9f6cx12 = _0x9f6cx10 + _0x9f6cx8['startOffsets']['x'];
					_0x9f6cx4 = _0x9f6cxc[1] + _0x9f6cx8['startOffsets']['y'];
					_0x9f6cx9['setDragElPos'](_0x9f6cx12, _0x9f6cx4);
					if (_0x9f6cxb['getShowExactDropPosition']()) {
						Ext['fly'](_0x9f6cx9['getProxy']()['getTaskGhostEl']())['setWidth'](_0x9f6cxf - _0x9f6cx10)
					};
					if (_0x9f6cxb['getValidatorFn']()) {
						_0x9f6cx14 = (false !== (_0x9f6cxb['getValidatorFn']())(_0x9f6cx7, _0x9f6cx17, _0x9f6cx11 - _0x9f6cx17, _0x9f6cx13))
					};
					_0x9f6cxe = _0x9f6cxb['getTooltip']();
					_0x9f6cxe && _0x9f6cxb['updateTipContent'](_0x9f6cxe, _0x9f6cx7, _0x9f6cx17, _0x9f6cx11, _0x9f6cx14);
					_0x9f6cxe && _0x9f6cxe['showBy'](_0x9f6cx9['getProxy']()['getGhost']());
					return true
				})
			}
		}
		, onTaskRowDragDrop: function (_0x9f6cx8, _0x9f6cx13, _0x9f6cxb, _0x9f6cxc, _0x9f6cxa) {
			var _0x9f6cx9 = this
				, _0x9f6cx7, _0x9f6cx6;
			if (_0x9f6cxc['isTaskDrag'] && (_0x9f6cx9['getConstrainDragToTaskRow']() || Ext['fly'](_0x9f6cxc['item'])['contains'](_0x9f6cx13))) {
				_0x9f6cx6 = _0x9f6cxc['record'];
				_0x9f6cx7 = _0x9f6cxa['getXY']();
				_0x9f6cx3(_0x9f6cx7[0], _0x9f6cxc['startPointDate'], _0x9f6cx6, _0x9f6cx8, true, _0x9f6cx9['getSnapRelativeToEventStartDate'](), _0x9f6cx9['getSkipWeekendsDuringDragDrop'](), function (_0x9f6cx12, _0x9f6cxe, _0x9f6cxd, _0x9f6cx4) {
					var _0x9f6cxf = true;
					if (_0x9f6cx6['getStartDate']() - _0x9f6cx12) {
						if (_0x9f6cx9['getValidatorFn']()) {
							_0x9f6cxf = (false !== (_0x9f6cx9['getValidatorFn']())(_0x9f6cx6, _0x9f6cx12, _0x9f6cxe - _0x9f6cx12, _0x9f6cxa))
						};
						_0x9f6cxf && _0x9f6cx9['processDrop'](_0x9f6cx8, _0x9f6cx13, _0x9f6cx6, _0x9f6cx12, _0x9f6cxe, _0x9f6cxb, _0x9f6cxc, _0x9f6cxa, function () {
							_0x9f6cx5(_0x9f6cx9, _0x9f6cx6, _0x9f6cx12, _0x9f6cxe)
						})
					}
				})
			}
		}
		, onTaskContainerOver: function (_0x9f6cx7, _0x9f6cxa, _0x9f6cx8, _0x9f6cx9, _0x9f6cxc) {
			var _0x9f6cx6 = this;
			if (_0x9f6cx8['isTaskDrag'] && _0x9f6cx6['getConstrainDragToTaskRow']()) {
				_0x9f6cxc(_0x9f6cx6['getDropAllowedCls']())
			}
		}
		, onAfterTaskDrop: function (_0x9f6cx6, _0x9f6cx7, _0x9f6cxa, _0x9f6cxc, _0x9f6cx13) {
			var _0x9f6cx8 = this
				, _0x9f6cx9;
			if (_0x9f6cxc['isTaskDrag']) {
				_0x9f6cx13['getProxy']()['setForceAttachTo'](null);
				_0x9f6cx9 = _0x9f6cx8['getTooltip']();
				_0x9f6cx9 && _0x9f6cx9['hide']();
				_0x9f6cx13['clearConstraints']();
				Ext['fly'](_0x9f6cxc['ddel'])['show']()
			}
		}
		, processDrop: function (_0x9f6cx9, _0x9f6cx13, _0x9f6cx8, _0x9f6cx6, _0x9f6cxe, _0x9f6cxa, _0x9f6cxc, _0x9f6cxb, _0x9f6cx7) {
			return _0x9f6cx2(this, _0x9f6cx9, _0x9f6cx13, _0x9f6cx8, _0x9f6cx6, _0x9f6cxe, _0x9f6cxa, _0x9f6cxc, _0x9f6cxb, _0x9f6cx7)
		}
	}
});
Ext.define('Ext.ux.Gantt.feature.taskdd.plugin.SegmentDragDrop', function (_0x9f6cx1) {
	function _0x9f6cx5(_0x9f6cxc, _0x9f6cx9, _0x9f6cxe) {
		var _0x9f6cx8 = _0x9f6cx9['getTask']()
			, _0x9f6cx13 = _0x9f6cx8['getSegments']()
			, _0x9f6cxb, _0x9f6cxd, _0x9f6cxa, _0x9f6cx6;
		Ext['Assert'] && Ext['Assert']['truthy'](_0x9f6cxe >= 0 && _0x9f6cxe < _0x9f6cx13['length'], 'Task segment index is not present');
		_0x9f6cxa = (_0x9f6cxe > 0) && _0x9f6cx13[_0x9f6cxe - 1];
		_0x9f6cx6 = (_0x9f6cxe < _0x9f6cx13['length'] - 1) && _0x9f6cx13[_0x9f6cxe + 1];
		_0x9f6cxb = _0x9f6cxc['timeAxis']['getStart']();
		_0x9f6cxd = _0x9f6cxc['timeAxis']['getEnd']();
		return {
			prevSegment: _0x9f6cxa || null
			, nextSegment: _0x9f6cx6 || null
			, startDate: _0x9f6cxa ? _0x9f6cxa['getEndDate']() : null
			, endDate: _0x9f6cx6 ? _0x9f6cx6['getStartDate']() : null
			, timeAxisStartDate: _0x9f6cxb
			, timeAxisEndDate: _0x9f6cxd
			, startDateWithinAxis: _0x9f6cxa && Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0x9f6cxa['getEndDate'](), _0x9f6cxb, _0x9f6cxd) || false
			, endDateWithinAxis: _0x9f6cx6 && Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0x9f6cx6['getStartDate'](), _0x9f6cxb, _0x9f6cxd) || false
		}
	}

	function _0x9f6cx2(_0x9f6cxb, _0x9f6cx6, _0x9f6cx9, _0x9f6cxf, _0x9f6cx18, _0x9f6cx11, _0x9f6cxe, _0x9f6cx8, _0x9f6cx17) {
		var _0x9f6cxd = false
			, _0x9f6cx14, _0x9f6cx10, _0x9f6cx16, _0x9f6cx15, _0x9f6cxa, _0x9f6cx13, _0x9f6cx12, _0x9f6cxc = false
			, _0x9f6cx1b = false;
		_0x9f6cx14 = _0x9f6cx18['getDateFromCoordinate'](_0x9f6cxb);
		_0x9f6cx10 = _0x9f6cx14 - _0x9f6cx6;
		_0x9f6cx12 = _0x9f6cx5(_0x9f6cx18, _0x9f6cx9, _0x9f6cxf);
		_0x9f6cx16 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx9['getStartDate'](), Ext.ux.Scheduler['util']['Date'].MILLI, _0x9f6cx10);
		if (_0x9f6cx11) {
			_0x9f6cx16 = _0x9f6cx18['timeAxis']['roundDate'](_0x9f6cx16, _0x9f6cxe ? _0x9f6cx9['getStartDate']() : false);
			if (_0x9f6cx8) {
				_0x9f6cx16 = _0x9f6cx9['skipNonWorkingTime'](_0x9f6cx16, !_0x9f6cx9['isMilestone']())
			}
		};
		_0x9f6cxc = _0x9f6cx12['startDate'] && _0x9f6cx16 < _0x9f6cx12['startDate'] || false;
		_0x9f6cx16 = _0x9f6cxc ? _0x9f6cx12['startDate'] : _0x9f6cx16;
		if (_0x9f6cx11) {
			_0x9f6cx15 = _0x9f6cx9['recalculateEndDate'](_0x9f6cx16)
		}
		else {
			_0x9f6cx15 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx16, _0x9f6cx9['getDurationUnit'](), _0x9f6cx9['getDuration']())
		};
		_0x9f6cx1b = _0x9f6cx12['endDate'] && _0x9f6cx15 > _0x9f6cx12['endDate'] || false;
		_0x9f6cx15 = _0x9f6cx1b ? _0x9f6cx12['endDate'] : _0x9f6cx15;
		if (_0x9f6cx1b) {
			_0x9f6cx16 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx15, _0x9f6cx9['getDurationUnit'](), -_0x9f6cx9['getDuration']());
			_0x9f6cxc = _0x9f6cx12['startDate'] && _0x9f6cx16 < _0x9f6cx12['startDate'] || false;
			_0x9f6cx16 = _0x9f6cxc ? _0x9f6cx12['startDate'] : _0x9f6cx16
		};
		if (Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0x9f6cx16, _0x9f6cx12['timeAxisStartDate'], _0x9f6cx12['timeAxisEndDate'])) {
			_0x9f6cxa = _0x9f6cx18['getCoordinateFromDate'](_0x9f6cx16, false)
		}
		else {
			_0x9f6cxa = _0x9f6cx18['getCoordinateFromDate'](_0x9f6cx12['timeAxisStartDate'], false)
		};
		if (Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0x9f6cx15, _0x9f6cx12['timeAxisStartDate'], _0x9f6cx12['timeAxisEndDate'])) {
			_0x9f6cx13 = _0x9f6cx18['getCoordinateFromDate'](_0x9f6cx15, false)
		}
		else {
			_0x9f6cx13 = _0x9f6cx18['getCoordinateFromDate'](_0x9f6cx12['timeAxisEndDate'], false)
		};
		_0x9f6cxd = (_0x9f6cx17 || Ext['returnTrue'])(_0x9f6cx16, _0x9f6cx15, _0x9f6cxa, _0x9f6cx13);
		return _0x9f6cxd
	}

	function _0x9f6cx3(_0x9f6cxd, _0x9f6cx9, _0x9f6cxe, _0x9f6cx8, _0x9f6cx6, _0x9f6cx13, _0x9f6cxa, _0x9f6cxc, _0x9f6cxb) {
		(new Ext.Promise(function (_0x9f6cx10, _0x9f6cx11) {
			var _0x9f6cxf = new Ext.ux.Gantt['feature']['taskdd'].AsyncDropHandler(_0x9f6cx10, _0x9f6cx11, function () {
					_0x9f6cx4(_0x9f6cxd, _0x9f6cx8, _0x9f6cx6, _0x9f6cx13)
				})
				, _0x9f6cx14, _0x9f6cx12;
			if (_0x9f6cx9['hasListeners']['beforetaskdropfinalize']) {
				_0x9f6cx12 = Ext['apply']({}, _0x9f6cxc, {
					start: _0x9f6cx6
					, end: _0x9f6cx13
					, finalize: function (_0x9f6cx17) {
						if (_0x9f6cx17) {
							_0x9f6cxf['process']();
							_0x9f6cxf['done']()
						}
						else {
							_0x9f6cxf['cancel']()
						}
					}
				});
				_0x9f6cx14 = (false === _0x9f6cx9['fireEvent']('beforetaskdropfinalize', _0x9f6cx9, _0x9f6cx12, _0x9f6cxb))
			};
			if (!_0x9f6cx14 && !_0x9f6cxf['isWaiting']() && !(_0x9f6cxf['isDone']() || _0x9f6cxf['isCanceled']())) {
				_0x9f6cxf['process']();
				_0x9f6cxf['done']()
			}
		})['then'](function (_0x9f6cxf) {
			_0x9f6cx9['hasListeners']['taskdrop'] && _0x9f6cx9['fireEvent']('taskdrop', _0x9f6cx9, _0x9f6cx8)
		})['then'](undefined, function (_0x9f6cxf) {
			_0x9f6cx9['hasListeners']['taskdropcancel'] && _0x9f6cx9['fireEvent']('taskdropcancel', _0x9f6cx9, _0x9f6cx8)
		}))
	}

	function _0x9f6cx4(_0x9f6cx9, _0x9f6cxc, _0x9f6cx8, _0x9f6cx6) {
		_0x9f6cxc['setStartDate'](_0x9f6cx8, true, _0x9f6cx9['getSkipWeekendsDuringDragDrop']())
	}

	function _0x9f6cx7(_0x9f6cx9, _0x9f6cx8, _0x9f6cx6, _0x9f6cxd, _0x9f6cxc, _0x9f6cxa) {
		var _0x9f6cx13, _0x9f6cxe, _0x9f6cxb;
		_0x9f6cx13 = _0x9f6cx5(_0x9f6cx8, _0x9f6cx6, _0x9f6cxd);
		if (_0x9f6cx13['startDateWithinAxis'] && _0x9f6cx13['endDateWithinAxis']) {
			_0x9f6cxe = _0x9f6cx8['getCoordinateFromDate'](_0x9f6cx13['startDate'], false);
			_0x9f6cxb = _0x9f6cx8['getCoordinateFromDate'](_0x9f6cx13['endDate'], false);
			_0x9f6cx9['setXConstraint'](_0x9f6cxc['x'] - _0x9f6cxe, _0x9f6cxb - _0x9f6cxc['x'] - _0x9f6cxa)
		}
		else {
			if (_0x9f6cx13['startDateWithinAxis']) {
				_0x9f6cxe = _0x9f6cx8['getCoordinateFromDate'](_0x9f6cx13['startDate'], false);
				_0x9f6cx9['setXConstraint'](_0x9f6cxc['x'] - _0x9f6cxe, Ext['Number'].MAX_SAFE_INTEGER)
			}
			else {
				if (_0x9f6cx13['endDateWithinAxis']) {
					_0x9f6cxb = _0x9f6cx8['getCoordinateFromDate'](_0x9f6cx13['endDate'], false);
					_0x9f6cx9['setXConstraint'](Ext['Number'].MAX_SAFE_INTEGER, _0x9f6cxb - _0x9f6cxc['x'] - _0x9f6cxa)
				}
			}
		}
	}
	return {
		extend: 'Ext.plugin.Abstract'
		, alias: 'plugin.gantt_segmentdragdrop'
		, id: 'segmentdragdrop'
		, requires: ['Ext.Number', 'Ext.Promise', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Gantt.Tooltip', 'Ext.ux.Gantt.feature.taskdd.AsyncDropHandler']
		, config: {
			gantt: null
			, tooltip: null
			, validatorFn: Ext['returnTrue']
			, showExactDropPosition: false
			, snapRelativeToEventStartDate: false
			, skipWeekendsDuringDragDrop: false
			, dropAllowedCls: 'sch-gantt-dragproxy'
		}
		, ganttDetacher: null
		, lastValidDragElX: null
		, lastValidDragElY: null
		, destroy: function () {
			var _0x9f6cx6 = this;
			_0x9f6cx6['setTooltip'](null);
			_0x9f6cx6['setGantt'](null);
			_0x9f6cx6['callParent']()
		}
		, enable: function () {
			var _0x9f6cx6 = this;
			if (_0x9f6cx6['disabled']) {
				_0x9f6cx6['callParent']();
				_0x9f6cx6['attachToGantt']()
			}
		}
		, disable: function () {
			var _0x9f6cx6 = this;
			if (!_0x9f6cx6['disabled']) {
				_0x9f6cx6['callParent']();
				_0x9f6cx6['detachFromGantt']()
			}
		}
		, updateGantt: function (_0x9f6cx6, _0x9f6cx9) {
			var _0x9f6cx8 = this;
			_0x9f6cx9 && _0x9f6cx8['detachFromGantt']();
			_0x9f6cx6 && !_0x9f6cx8['disabled'] && _0x9f6cx8['attachToGantt']()
		}
		, attachToGantt: function () {
			var _0x9f6cx6 = this;
			_0x9f6cx6['ganttDetacher'] = _0x9f6cx6['getGantt']()['on']({
				scope: _0x9f6cx6
				, destroyable: true
				, "task-row-drag-enter": _0x9f6cx6['onTaskRowDragEnter']
				, "task-row-drag-over": _0x9f6cx6['onTaskRowDragOver']
				, "task-row-drag-drop": _0x9f6cx6['onTaskRowDragDrop']
				, "schedule-drag-over": _0x9f6cx6['onTaskContainerOver']
				, "schedule-drag-out": _0x9f6cx6['onTaskContainerOut']
				, aftertaskdrop: _0x9f6cx6['onAfterTaskDrop']
			})
		}
		, detachFromGantt: function () {
			var _0x9f6cx6 = this;
			_0x9f6cx6['ganttDetacher'] && (Ext['destroy'](_0x9f6cx6['ganttDetacher']), _0x9f6cx6['ganttDetacher'] = null)
		}
		, applyTooltip: function (_0x9f6cx8) {
			var _0x9f6cx6 = this;
			if (_0x9f6cx8 && !(_0x9f6cx8 instanceof Ext.ux.Gantt['Tooltip'])) {
				_0x9f6cx8 = Ext['create'](Ext['apply']({}, _0x9f6cx8 === true ? {} : _0x9f6cx8, {
					xclass: 'Ext.ux.Gantt.Tooltip'
					, gantt: _0x9f6cx6['getGantt']()
					, constrainTo: _0x9f6cx6['getGantt']()['ownerGrid']['getEl']()
					, cls: 'gnt-dragdrop-tip'
					, hidden: true
					, avoidPointer: true
					, $ownedBy: _0x9f6cx6
				}))
			};
			return _0x9f6cx8
		}
		, updateTooltip: function (_0x9f6cx9, _0x9f6cx8) {
			var _0x9f6cx6 = this;
			if (_0x9f6cx8 && _0x9f6cx8['$ownedBy'] === _0x9f6cx6) {
				Ext['destroy'](_0x9f6cx8)
			}
		}
		, updateTipContent: function (_0x9f6cx9, _0x9f6cx6, _0x9f6cxc, _0x9f6cx8) {
			_0x9f6cxc = _0x9f6cxc || _0x9f6cx6['getStartDate']();
			_0x9f6cx8 = _0x9f6cx8 || _0x9f6cx6['getEndDate']();
			_0x9f6cx9['updateContent'](_0x9f6cxc, _0x9f6cx8, true, _0x9f6cx6)
		}
		, onTaskRowDragEnter: function (_0x9f6cx9, _0x9f6cxd, _0x9f6cx13, _0x9f6cxa, _0x9f6cxf) {
			var _0x9f6cx11 = this
				, _0x9f6cxb, _0x9f6cx12, _0x9f6cxc, _0x9f6cx8, _0x9f6cx16, _0x9f6cxe, _0x9f6cx17, _0x9f6cx10, _0x9f6cx6, _0x9f6cx14;
			if (_0x9f6cxa['isTaskSegmentDrag']) {
				_0x9f6cx13['getProxy']()['setForceAttachTo'](_0x9f6cx9['getSecondaryCanvasEl']());
				Ext['fly'](_0x9f6cxa['ddel'])['hide']();
				_0x9f6cxb = Ext['fly'](_0x9f6cxa['ddel'])['getXY']();
				_0x9f6cxb = new Ext['util'].Point(_0x9f6cxb[0], _0x9f6cxb[1]);
				_0x9f6cx12 = Ext['fly'](_0x9f6cx13['getEl']())['getXY']();
				_0x9f6cx12 = new Ext['util'].Point(_0x9f6cx12[0], _0x9f6cx12[1]);
				_0x9f6cxc = _0x9f6cxb['getOffsetsTo'](_0x9f6cx12);
				_0x9f6cx13['setInitPosition'](-_0x9f6cxc['x'], -_0x9f6cxc['y']);
				_0x9f6cx13['setDelta'](_0x9f6cxa['startOffsets']['x'], _0x9f6cxa['startOffsets']['y']);
				_0x9f6cx13['setYConstraint'](0, 0);
				_0x9f6cx6 = Ext['fly'](_0x9f6cx13['getProxy']()['getTaskGhostEl']())['getWidth']();
				_0x9f6cx7(_0x9f6cx13, _0x9f6cx9, _0x9f6cxa['record'], _0x9f6cxa['segmentIndex'], _0x9f6cxb, _0x9f6cx6);
				_0x9f6cx11['lastValidDragElX'] = _0x9f6cx11['lastValidDragElX'] !== null ? _0x9f6cx11['lastValidDragElX'] : (_0x9f6cxb['x'] + _0x9f6cxa['startOffsets']['x']);
				_0x9f6cx11['lastValidDragElY'] = _0x9f6cx11['lastValidDragElY'] !== null ? _0x9f6cx11['lastValidDragElY'] : (_0x9f6cxb['y'] + _0x9f6cxa['startOffsets']['y']);
				_0x9f6cx13['unlockDragProxyPosition']();
				_0x9f6cx13['setDragElPos'](_0x9f6cx11['lastValidDragElX'], _0x9f6cx11['lastValidDrarElY']);
				_0x9f6cx14 = _0x9f6cx11['getTooltip']();
				_0x9f6cx14 && _0x9f6cx11['updateTipContent'](_0x9f6cx14, _0x9f6cxa['record']);
				_0x9f6cx14 && _0x9f6cx14['showBy'](_0x9f6cx13['getProxy']()['getGhost']())
			}
		}
		, onTaskRowDragOver: function (_0x9f6cx9, _0x9f6cxd, _0x9f6cxa, _0x9f6cxc, _0x9f6cxf, _0x9f6cx16) {
			var _0x9f6cx12 = this
				, _0x9f6cx13, _0x9f6cx10, _0x9f6cx8, _0x9f6cx17, _0x9f6cxb, _0x9f6cxe, _0x9f6cx14, _0x9f6cx11, _0x9f6cx6;
			if (_0x9f6cxc['isTaskSegmentDrag']) {
				_0x9f6cx16(_0x9f6cx12['getDropAllowedCls']());
				_0x9f6cx8 = _0x9f6cxc['record'];
				_0x9f6cx17 = _0x9f6cxc['segmentIndex'];
				_0x9f6cx13 = _0x9f6cxf['getXY']();
				_0x9f6cx2(_0x9f6cx13[0], _0x9f6cxc['startPointDate'], _0x9f6cx8, _0x9f6cx17, _0x9f6cx9, _0x9f6cx12['getShowExactDropPosition'](), _0x9f6cx12['getSnapRelativeToEventStartDate'](), _0x9f6cx12['getSkipWeekendsDuringDragDrop'](), function (_0x9f6cx19, _0x9f6cx1e, _0x9f6cx1c, _0x9f6cx18) {
					var _0x9f6cx1b, _0x9f6cx15, _0x9f6cx1d;
					_0x9f6cx12['lastValidDragElX'] = _0x9f6cx1b = _0x9f6cx1c + _0x9f6cxc['startOffsets']['x'];
					_0x9f6cx12['lastValidDragElY'] = _0x9f6cx15 = _0x9f6cx13[1] + _0x9f6cxc['startOffsets']['y'];
					_0x9f6cxa['setDragElPos'](_0x9f6cx1b, _0x9f6cx15);
					if (_0x9f6cx12['getShowExactDropPosition']()) {
						_0x9f6cx6 = _0x9f6cx18 - _0x9f6cx1c;
						Ext['fly'](_0x9f6cxa['getProxy']()['getTaskGhostEl']())['setWidth'](_0x9f6cx6);
						_0x9f6cxb = Ext['fly'](_0x9f6cxc['ddel'])['getXY']();
						_0x9f6cxb = new Ext['util'].Point(_0x9f6cxb[0], _0x9f6cxb[1]);
						_0x9f6cx7(_0x9f6cxa, _0x9f6cx9, _0x9f6cx8, _0x9f6cx17, _0x9f6cxb, _0x9f6cx6)
					};
					if (_0x9f6cx12['getValidatorFn']()) {
						_0x9f6cx1d = (false !== (_0x9f6cx12['getValidatorFn']())(_0x9f6cx8, _0x9f6cx19, _0x9f6cx1e - _0x9f6cx19, _0x9f6cxf))
					};
					_0x9f6cx10 = _0x9f6cx12['getTooltip']();
					_0x9f6cx10 && _0x9f6cx12['updateTipContent'](_0x9f6cx10, _0x9f6cx8, _0x9f6cx19, _0x9f6cx1e, _0x9f6cx1d);
					_0x9f6cx10 && _0x9f6cx10['showBy'](_0x9f6cxa['getProxy']()['getGhost']())
				})
			}
		}
		, onTaskRowDragDrop: function (_0x9f6cx8, _0x9f6cx13, _0x9f6cxa, _0x9f6cx9, _0x9f6cxb) {
			var _0x9f6cxe = this
				, _0x9f6cx6, _0x9f6cxd, _0x9f6cxc;
			if (_0x9f6cx9['isTaskSegmentDrag']) {
				_0x9f6cx6 = _0x9f6cx9['record'];
				_0x9f6cxd = _0x9f6cx9['segmentIndex'];
				_0x9f6cxc = _0x9f6cxb['getXY']();
				_0x9f6cx2(_0x9f6cxc[0], _0x9f6cx9['startPointDate'], _0x9f6cx6, _0x9f6cxd, _0x9f6cx8, true, _0x9f6cxe['getSnapRelativeToEventStartDate'](), _0x9f6cxe['getSkipWeekendsDuringDragDrop'](), function (_0x9f6cx14, _0x9f6cx12, _0x9f6cx11, _0x9f6cxf) {
					var _0x9f6cx10 = true;
					if (_0x9f6cx6['getStartDate']() - _0x9f6cx14) {
						if (_0x9f6cxe['getValidatorFn']()) {
							_0x9f6cx10 = (false !== (_0x9f6cxe['getValidatorFn']())(_0x9f6cx6, _0x9f6cx14, _0x9f6cx12 - _0x9f6cx14, _0x9f6cxb))
						};
						_0x9f6cx10 && _0x9f6cx3(_0x9f6cxe, _0x9f6cx8, _0x9f6cx13, _0x9f6cx6, _0x9f6cx14, _0x9f6cx12, _0x9f6cxa, _0x9f6cx9, _0x9f6cxb)
					}
				})
			}
		}
		, onTaskContainerOver: function (_0x9f6cx6, _0x9f6cx13, _0x9f6cx9, _0x9f6cxc, _0x9f6cxa) {
			var _0x9f6cx8 = this;
			if (_0x9f6cx9['isTaskSegmentDrag']) {
				_0x9f6cxa(_0x9f6cx8['getDropAllowedCls']());
				_0x9f6cx13['setDragElPos'](_0x9f6cx8['lastValidDragElX'], _0x9f6cx8['lastValidDragElY']);
				_0x9f6cx13['lockDragProxyPosition']()
			}
		}
		, onTaskContainerOut: function (_0x9f6cx6, _0x9f6cxa, _0x9f6cx9, _0x9f6cxc) {
			var _0x9f6cx8 = this;
			if (_0x9f6cx9['isTaskSegmentDrag']) {
				_0x9f6cxa['setDragElPos'](_0x9f6cx8['lastValidDragElX'], _0x9f6cx8['lastValidDragElY']);
				_0x9f6cxa['lockDragProxyPosition']()
			}
		}
		, onAfterTaskDrop: function (_0x9f6cx8, _0x9f6cx6, _0x9f6cx13, _0x9f6cxa, _0x9f6cxb) {
			var _0x9f6cx9 = this
				, _0x9f6cxc;
			if (_0x9f6cxa['isTaskSegmentDrag']) {
				_0x9f6cxb['getProxy']()['setForceAttachTo'](null);
				_0x9f6cxc = _0x9f6cx9['getTooltip']();
				_0x9f6cxc && _0x9f6cxc['hide']();
				_0x9f6cxb['clearConstraints']();
				Ext['fly'](_0x9f6cxa['ddel'])['show']();
				_0x9f6cx9['lastValidDragElX'] = _0x9f6cx9['lastValidDragElY'] = null;
				_0x9f6cxb['unlockDragProxyPosition']()
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.feature.taskdd.plugin.DeadlineDragDrop', function (_0x9f6cx1) {
	function _0x9f6cx2(_0x9f6cx6, _0x9f6cx7, _0x9f6cx8, _0x9f6cx9, _0x9f6cx4, _0x9f6cxa, _0x9f6cxb) {
		var _0x9f6cxe = false
			, _0x9f6cx13, _0x9f6cxc;
		_0x9f6cx13 = _0x9f6cx8['getDateFromCoordinate'](_0x9f6cx6);
		if (_0x9f6cx13) {
			if (_0x9f6cx9) {
				_0x9f6cx13 = _0x9f6cx8['timeAxis']['roundDate'](_0x9f6cx13, _0x9f6cx4 ? _0x9f6cx7['getDeadlineDate']() : false);
				if (_0x9f6cxa) {
					_0x9f6cx13 = _0x9f6cx7['skipNonWorkingTime'](_0x9f6cx13, false)
				};
				_0x9f6cx13 = Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cx13, _0x9f6cx8['timeAxis']['getStart']());
				_0x9f6cx13 = Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cx13, _0x9f6cx8['timeAxis']['getEnd']())
			};
			_0x9f6cxc = _0x9f6cx8['getCoordinateFromDate'](_0x9f6cx13, false);
			_0x9f6cxe = (_0x9f6cxb || Ext['returnTrue'])(_0x9f6cx13, _0x9f6cxc)
		};
		return _0x9f6cxe
	}

	function _0x9f6cx5(_0x9f6cx9, _0x9f6cx8, _0x9f6cx13, _0x9f6cx6, _0x9f6cx7, _0x9f6cxb, _0x9f6cxc, _0x9f6cxa) {
		(new Ext.Promise(function (_0x9f6cxd, _0x9f6cxe) {
			var _0x9f6cx4 = new Ext.ux.Gantt['feature']['taskdd'].AsyncDropHandler(_0x9f6cxd, _0x9f6cxe, function () {
					_0x9f6cx3(_0x9f6cx9, _0x9f6cx6, _0x9f6cx7)
				})
				, _0x9f6cxf;
			if (_0x9f6cx8['hasListeners']['before-deadline-drop-finalize']) {
				_0x9f6cxf = (false === _0x9f6cx8['fireEvent']('before-deadline-drop-finalize', _0x9f6cx8, _0x9f6cx13, _0x9f6cx7, _0x9f6cxb, _0x9f6cxc, _0x9f6cxa, _0x9f6cx4))
			};
			if (_0x9f6cxf && !_0x9f6cx4['isWaiting']() && (!_0x9f6cx4['isDone']() || !_0x9f6cx4['isCanceled']())) {
				_0x9f6cx4['cancel']()
			}
			else {
				if (!_0x9f6cx4['isWaiting']() && (!_0x9f6cx4['isDone']() || !_0x9f6cx4['isCanceled']())) {
					_0x9f6cx4['process']();
					_0x9f6cx4['done']()
				}
			}
		})['then'](function (_0x9f6cx4) {
			_0x9f6cx8['hasListeners']['deadline-drop-done'] && _0x9f6cx8['fireEvent']('deadline-drop-done', _0x9f6cx8, _0x9f6cx13, _0x9f6cx7, _0x9f6cxb, _0x9f6cxc, _0x9f6cxa, _0x9f6cx4)
		})['then'](undefined, function (_0x9f6cx4) {
			_0x9f6cx8['hasListeners']['deadline-drop-cancel'] && _0x9f6cx8['fireEvent']('deadline-drop-cancel', _0x9f6cx8, _0x9f6cx13, _0x9f6cx7, _0x9f6cxb, _0x9f6cxc, _0x9f6cxa, _0x9f6cx4)
		}))
	}

	function _0x9f6cx3(_0x9f6cx6, _0x9f6cx7, _0x9f6cx4) {
		_0x9f6cx7['setDeadlineDate'](_0x9f6cx4)
	}
	return {
		extend: 'Ext.plugin.Abstract'
		, alias: 'plugin.gantt_deadlinedragdrop'
		, id: 'deadlinedragdrop'
		, requires: ['Ext.Promise', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Gantt.Tooltip', 'Ext.ux.Gantt.feature.taskdd.AsyncDropHandler']
		, config: {
			gantt: null
			, tooltip: null
			, validatorFn: Ext['returnTrue']
			, showExactDropPosition: false
			, snapRelativeToEventStartDate: false
			, skipWeekendsDuringDragDrop: false
			, dropAllowedCls: 'sch-gantt-dragproxy'
		}
		, ganttDetacher: null
		, destroy: function () {
			var _0x9f6cx4 = this;
			_0x9f6cx4['setTooltip'](null);
			_0x9f6cx4['setGantt'](null);
			_0x9f6cx4['callParent']()
		}
		, enable: function () {
			var _0x9f6cx4 = this;
			if (_0x9f6cx4['disabled']) {
				_0x9f6cx4['callParent']();
				_0x9f6cx4['attachToGantt']()
			}
		}
		, disable: function () {
			var _0x9f6cx4 = this;
			if (!_0x9f6cx4['disabled']) {
				_0x9f6cx4['callParent']();
				_0x9f6cx4['detachFromGantt']()
			}
		}
		, updateGantt: function (_0x9f6cx4, _0x9f6cx6) {
			var _0x9f6cx7 = this;
			_0x9f6cx6 && _0x9f6cx7['detachFromGantt']();
			_0x9f6cx4 && !_0x9f6cx7['disabled'] && _0x9f6cx7['attachToGantt']()
		}
		, attachToGantt: function () {
			var _0x9f6cx4 = this;
			_0x9f6cx4['ganttDetacher'] = _0x9f6cx4['getGantt']()['on']({
				scope: _0x9f6cx4
				, destroyable: true
				, "task-row-drag-enter": _0x9f6cx4['onTaskRowDragEnter']
				, "task-row-drag-over": _0x9f6cx4['onTaskRowDragOver']
				, "task-row-drag-drop": _0x9f6cx4['onTaskRowDragDrop']
				, "schedule-drag-over": _0x9f6cx4['onTaskContainerOver']
				, aftertaskdrop: _0x9f6cx4['onAfterTaskDrop']
			})
		}
		, detachFromGantt: function () {
			var _0x9f6cx4 = this;
			_0x9f6cx4['ganttDetacher'] && (Ext['destroy'](_0x9f6cx4['ganttDetacher']), _0x9f6cx4['ganttDetacher'] = null)
		}
		, applyTooltip: function (_0x9f6cx7) {
			var _0x9f6cx4 = this;
			if (_0x9f6cx7 && !(_0x9f6cx7 instanceof Ext.ux.Gantt['Tooltip'])) {
				_0x9f6cx7 = Ext['create'](Ext['apply']({}, _0x9f6cx7 === true ? {} : _0x9f6cx7, {
					xclass: 'Ext.ux.Gantt.Tooltip'
					, gantt: _0x9f6cx4['getGantt']()
					, constrainTo: _0x9f6cx4['getGantt']()['getEl']()
					, cls: 'gnt-dragdrop-tip'
					, hidden: true
					, avoidPointer: true
					, $ownedBy: _0x9f6cx4
				}))
			};
			return _0x9f6cx7
		}
		, updateTooltip: function (_0x9f6cx6, _0x9f6cx7) {
			var _0x9f6cx4 = this;
			if (_0x9f6cx7 && _0x9f6cx7['$ownedBy'] === _0x9f6cx4) {
				Ext['destroy'](_0x9f6cx7)
			}
		}
		, updateTipContent: function (_0x9f6cx8, _0x9f6cx4, _0x9f6cx7, _0x9f6cx6) {
			_0x9f6cx8['updateContent'](null, _0x9f6cx7 || _0x9f6cx4['getDeadlineDate'](), _0x9f6cx6 === undefined ? true : _0x9f6cx6, _0x9f6cx4)
		}
		, onTaskRowDragEnter: function (_0x9f6cx7, _0x9f6cxc, _0x9f6cx9, _0x9f6cx8, _0x9f6cxa) {
			var _0x9f6cxb = this
				, _0x9f6cxd, _0x9f6cx13, _0x9f6cx6, _0x9f6cxe;
			if (_0x9f6cx8['isDeadlineDrag']) {
				_0x9f6cx9['getProxy']()['setForceAttachTo'](_0x9f6cx7['getSecondaryCanvasEl']());
				Ext['fly'](_0x9f6cx8['ddel'])['hide']();
				_0x9f6cxd = Ext['fly'](_0x9f6cx8['ddel'])['getXY']();
				_0x9f6cxd = new Ext['util'].Point(_0x9f6cxd[0], _0x9f6cxd[1]);
				_0x9f6cx13 = Ext['fly'](_0x9f6cx9['getEl']())['getXY']();
				_0x9f6cx13 = new Ext['util'].Point(_0x9f6cx13[0], _0x9f6cx13[1]);
				_0x9f6cx6 = _0x9f6cxd['getOffsetsTo'](_0x9f6cx13);
				_0x9f6cx9['setInitPosition'](-_0x9f6cx6['x'], -_0x9f6cx6['y']);
				_0x9f6cx9['setDelta'](_0x9f6cx8['startOffsets']['x'], _0x9f6cx8['startOffsets']['y']);
				_0x9f6cx9['setYConstraint'](0, 0);
				_0x9f6cxe = _0x9f6cxb['getTooltip']();
				_0x9f6cxe && _0x9f6cxb['updateTipContent'](_0x9f6cxe, _0x9f6cx8['record']);
				_0x9f6cxe && _0x9f6cxe['showBy'](_0x9f6cx9['getProxy']()['getGhost']())
			}
		}
		, onTaskRowDragOver: function (_0x9f6cx6, _0x9f6cxa, _0x9f6cx9, _0x9f6cx8, _0x9f6cx13, _0x9f6cxd) {
			var _0x9f6cxb = this
				, _0x9f6cxc, _0x9f6cxe, _0x9f6cx7;
			if (_0x9f6cx8['isDeadlineDrag']) {
				_0x9f6cxd(_0x9f6cxb['getDropAllowedCls']());
				_0x9f6cx7 = _0x9f6cx8['record'];
				_0x9f6cxc = _0x9f6cx13['getXY']();
				_0x9f6cx2(_0x9f6cxc[0] - _0x9f6cx8['startOffsets']['x'], _0x9f6cx7, _0x9f6cx6, _0x9f6cxb['getShowExactDropPosition'](), _0x9f6cxb['getSnapRelativeToEventStartDate'](), _0x9f6cxb['getSkipWeekendsDuringDragDrop'](), function (_0x9f6cxf, _0x9f6cx11) {
					var _0x9f6cx10 = true
						, _0x9f6cx12, _0x9f6cx4;
					_0x9f6cx12 = _0x9f6cx11 + _0x9f6cx8['startOffsets']['x'];
					_0x9f6cx4 = _0x9f6cxc[1] + _0x9f6cx8['startOffsets']['y'];
					_0x9f6cx9['setDragElPos'](_0x9f6cx12, _0x9f6cx4);
					if (_0x9f6cxb['getValidatorFn']()) {
						_0x9f6cx10 = (false !== (_0x9f6cxb['getValidatorFn']())(_0x9f6cx7, _0x9f6cxf, _0x9f6cx13))
					};
					_0x9f6cxe = _0x9f6cxb['getTooltip']();
					_0x9f6cxe && _0x9f6cxb['updateTipContent'](_0x9f6cxe, _0x9f6cx7, _0x9f6cxf, _0x9f6cx10);
					_0x9f6cxe && _0x9f6cxe['showBy'](_0x9f6cx9['getProxy']()['getGhost']());
					return true
				})
			}
		}
		, onTaskRowDragDrop: function (_0x9f6cx8, _0x9f6cx13, _0x9f6cxb, _0x9f6cxc, _0x9f6cxa) {
			var _0x9f6cx9 = this
				, _0x9f6cx7, _0x9f6cx6;
			if (_0x9f6cxc['isDeadlineDrag']) {
				_0x9f6cx6 = _0x9f6cxc['record'];
				_0x9f6cx7 = _0x9f6cxa['getXY']();
				_0x9f6cx2(_0x9f6cx7[0] - _0x9f6cxc['startOffsets']['x'], _0x9f6cx6, _0x9f6cx8, _0x9f6cx9['getShowExactDropPosition'](), _0x9f6cx9['getSnapRelativeToEventStartDate'](), _0x9f6cx9['getSkipWeekendsDuringDragDrop'](), function (_0x9f6cx4, _0x9f6cxe) {
					var _0x9f6cxd = true;
					if (_0x9f6cx6['getDeadlineDate']() - _0x9f6cx4) {
						if (_0x9f6cx9['getValidatorFn']()) {
							_0x9f6cxd = (false !== (_0x9f6cx9['getValidatorFn']())(_0x9f6cx6, _0x9f6cx4, _0x9f6cxa))
						};
						_0x9f6cxd && _0x9f6cx5(_0x9f6cx9, _0x9f6cx8, _0x9f6cx13, _0x9f6cx6, _0x9f6cx4, _0x9f6cxb, _0x9f6cxc, _0x9f6cxa)
					}
				})
			}
		}
		, onTaskContainerOver: function (_0x9f6cx7, _0x9f6cxa, _0x9f6cx8, _0x9f6cx9, _0x9f6cxc) {
			var _0x9f6cx6 = this;
			if (_0x9f6cx8['isDeadlineDrag']) {
				_0x9f6cxc(_0x9f6cx6['getDropAllowedCls']())
			}
		}
		, onAfterTaskDrop: function (_0x9f6cx6, _0x9f6cx7, _0x9f6cxa, _0x9f6cxc, _0x9f6cx13) {
			var _0x9f6cx8 = this
				, _0x9f6cx9;
			if (_0x9f6cxc['isDeadlineDrag']) {
				_0x9f6cx13['getProxy']()['setForceAttachTo'](null);
				_0x9f6cx9 = _0x9f6cx8['getTooltip']();
				_0x9f6cx9 && _0x9f6cx9['hide']();
				Ext['fly'](_0x9f6cxc['ddel'])['show']()
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.feature.taskdd.plugin.OutOfRowTaskDragDrop', function (_0x9f6cx8) {
	var _0x9f6cx7 = 'into'
		, _0x9f6cx1 = 'before'
		, _0x9f6cx5 = 'after';

	function _0x9f6cx6(_0x9f6cxd, _0x9f6cxa) {
		var _0x9f6cxc = false
			, _0x9f6cxb, _0x9f6cxe, _0x9f6cxf, _0x9f6cx13;
		_0x9f6cxd = Ext['fly'](_0x9f6cxd);
		_0x9f6cxb = _0x9f6cxd['getRegion']();
		_0x9f6cxf = _0x9f6cxb['getHeight']();
		_0x9f6cxe = Ext['util']['Region']['from'](_0x9f6cxb)['adjust'](_0x9f6cxf * 0.25, 0, -_0x9f6cxf * 0.25, 0)['round']();
		_0x9f6cx13 = new Ext['util'].Region(_0x9f6cxa, _0x9f6cxb['right'], _0x9f6cxa, _0x9f6cxb['left']);
		if (_0x9f6cx13['bottom'] < _0x9f6cxe['top']) {
			_0x9f6cxc = {
				coord: _0x9f6cxb['top']
				, pos: _0x9f6cx1
			}
		}
		else {
			if (_0x9f6cx13['top'] > _0x9f6cxe['bottom']) {
				_0x9f6cxc = {
					coord: _0x9f6cxb['bottom']
					, pos: _0x9f6cx5
				}
			}
			else {
				_0x9f6cxc = {
					coord: _0x9f6cxa
					, pos: _0x9f6cx7
				}
			}
		};
		return _0x9f6cxc
	}

	function _0x9f6cx9(_0x9f6cxb, _0x9f6cxa, _0x9f6cxc) {
		var _0x9f6cx13;
		_0x9f6cxc = _0x9f6cxc || Ext['returnTrue'];
		_0x9f6cx13 = _0x9f6cx6(_0x9f6cxb, _0x9f6cxa);
		return _0x9f6cxc(_0x9f6cx13['coord'], _0x9f6cx13['pos'])
	}

	function _0x9f6cx3(_0x9f6cxb, _0x9f6cxe, _0x9f6cx12, _0x9f6cxf, _0x9f6cx13) {
		var _0x9f6cxa = false
			, _0x9f6cxc, _0x9f6cxd;
		if (!Ext['fly'](_0x9f6cxf['item'])['contains'](_0x9f6cxe)) {
			_0x9f6cxc = _0x9f6cxf['record'];
			_0x9f6cxd = _0x9f6cxb['getRecord'](_0x9f6cxe);
			_0x9f6cxa = _0x9f6cxd ? !_0x9f6cxd['isAncestor'](_0x9f6cxc) : false
		};
		return _0x9f6cxa
	}

	function _0x9f6cx4(_0x9f6cxc, _0x9f6cxb, _0x9f6cxd, _0x9f6cxe, _0x9f6cxa, _0x9f6cx13) {
		(new Ext.Promise(function (_0x9f6cx11, _0x9f6cx12) {
			var _0x9f6cxf = new Ext.ux.Gantt['feature']['taskdd'].AsyncDropHandler(_0x9f6cx11, _0x9f6cx12, function () {
					_0x9f6cx2(_0x9f6cxc, _0x9f6cxb, _0x9f6cxd, _0x9f6cxa['record'])
				})
				, _0x9f6cx10;
			if (_0x9f6cxc['hasListeners']['before-task-outrow-drop-finalize']) {
				_0x9f6cx10 = (false === _0x9f6cxc['fireEvent']('before-task-outrow-drop-finalize', _0x9f6cxc, _0x9f6cxb, _0x9f6cxd, _0x9f6cxe, _0x9f6cxa, _0x9f6cx13, _0x9f6cxf))
			};
			if (_0x9f6cx10 && !_0x9f6cxf['isWaiting']() && (!_0x9f6cxf['isDone']() || !_0x9f6cxf['isCanceled']())) {
				_0x9f6cxf['cancel']()
			}
			else {
				if (!_0x9f6cxf['isWaiting']() && (!_0x9f6cxf['isDone']() || !_0x9f6cxf['isCanceled']())) {
					_0x9f6cxf['process']();
					_0x9f6cxf['done']()
				}
			}
		})['then'](function (_0x9f6cxf) {
			_0x9f6cxc['hasListeners']['task-outrow-drop-done'] && _0x9f6cxc['fireEvent']('task-outrow-drop-done', _0x9f6cxc, _0x9f6cxb, _0x9f6cxd, _0x9f6cxe, _0x9f6cxa, _0x9f6cx13, _0x9f6cxf)
		})['then'](undefined, function (_0x9f6cxf) {
			_0x9f6cxc['hasListeners']['task-outrow-drop-canceled'] && _0x9f6cxc['fireEvent']('task-outrow-drop-canceled', _0x9f6cxc, _0x9f6cxb, _0x9f6cxd, _0x9f6cxe, _0x9f6cxa, _0x9f6cx13, _0x9f6cxf)
		}))
	}

	function _0x9f6cx2(_0x9f6cxa, _0x9f6cxe, _0x9f6cxd, _0x9f6cxc) {
		var _0x9f6cxb, _0x9f6cx13;
		_0x9f6cxb = _0x9f6cxe && _0x9f6cxa['getRecord'](_0x9f6cxe) || _0x9f6cxa['getTaskStore']()['getRoot']();
		if (_0x9f6cxb) {
			_0x9f6cx13 = _0x9f6cxb['isLeaf']();
			if (_0x9f6cxb['getTaskStore']() !== _0x9f6cxc['getTaskStore']()) {
				_0x9f6cxc = _0x9f6cxc['copy'](null)
			};
			if (_0x9f6cxd == _0x9f6cx7) {
				_0x9f6cxb['appendChild'](_0x9f6cxc)
			}
			else {
				if (_0x9f6cxd == _0x9f6cx1) {
					_0x9f6cxb['parentNode']['insertBefore'](_0x9f6cxc, _0x9f6cxb)
				}
				else {
					if (_0x9f6cxd == _0x9f6cx5) {
						_0x9f6cxb['parentNode']['insertChild'](_0x9f6cxb['parentNode']['indexOf'](_0x9f6cxb) + 1, _0x9f6cxc)
					}
				}
			};
			if (_0x9f6cx13 && !_0x9f6cxb['isLeaf']()) {
				_0x9f6cxb['expand']()
			}
		}
	}
	return {
		extend: 'Ext.plugin.Abstract'
		, alias: 'plugin.gantt_outofrowtaskdragdrop'
		, id: 'outofrowtaskdragdrop'
		, requires: ['Ext.util.Region', 'Ext.util.Point', 'Ext.Promise', 'Ext.ux.Gantt.feature.taskdd.AsyncDropHandler']
		, config: {
			gantt: null
			, dropMarkerCls: 'gnt-taskdd-dropmarker'
			, expandTimeout: 2000
		}
		, ganttDetacher: null
		, dropMarkerEl: null
		, lastOverTarget: null
		, animating: false
		, expandProcId: null
		, destroy: function () {
			var _0x9f6cxc = this;
			_0x9f6cxc['destroyDropMarkerEl']();
			_0x9f6cxc['stopScheduledExpanding']();
			_0x9f6cxc['setGantt'](null);
			_0x9f6cxc['callParent']()
		}
		, enable: function () {
			var _0x9f6cxc = this;
			if (_0x9f6cxc['disabled']) {
				_0x9f6cxc['callParent']();
				_0x9f6cxc['attachToGantt']()
			}
		}
		, disable: function () {
			var _0x9f6cxc = this;
			if (!_0x9f6cxc['disabled']) {
				_0x9f6cxc['callParent']();
				_0x9f6cxc['detachFromGantt']()
			}
		}
		, updateGantt: function (_0x9f6cxc, _0x9f6cx13) {
			var _0x9f6cxa = this;
			_0x9f6cx13 && _0x9f6cxa['detachFromGantt']();
			_0x9f6cxc && !_0x9f6cxa['disabled'] && _0x9f6cxa['attachToGantt']()
		}
		, attachToGantt: function () {
			var _0x9f6cxc = this;
			_0x9f6cxc['ganttDetacher'] = _0x9f6cxc['getGantt']()['on']({
				scope: _0x9f6cxc
				, destroyable: true
				, "task-row-drag-enter": _0x9f6cxc['onTaskRowDragEnter']
				, "task-row-drag-out": _0x9f6cxc['onTaskRowDragOut']
				, "task-row-drag-over": _0x9f6cxc['onTaskRowDragOver']
				, "task-row-drag-drop": _0x9f6cxc['onTaskRowDragDrop']
				, "schedule-drag-over": _0x9f6cxc['onTaskContainerOver']
				, "schedule-drag-out": _0x9f6cxc['onTaskContainerOut']
				, "schedule-drag-drop": _0x9f6cxc['onTaskContainerDrop']
			})
		}
		, detachFromGantt: function () {
			var _0x9f6cxc = this;
			_0x9f6cxc['ganttDetacher'] && (Ext['destroy'](_0x9f6cxc['ganttDetacher']), _0x9f6cxc['ganttDetacher'] = null)
		}
		, hasDropMarkerEl: function () {
			return !!this['dropMarkerEl']
		}
		, getDropMarkerEl: function () {
			var _0x9f6cxa = this
				, _0x9f6cxc = _0x9f6cxa['dropMarkerEl'];
			if (!_0x9f6cxc) {
				_0x9f6cxc = _0x9f6cxa['dropMarkerEl'] = _0x9f6cxa['getGantt']()['getItemCanvasEl']()['createChild']({
					tag: 'div'
					, cls: _0x9f6cxa['getDropMarkerCls']()
					, style: {
						display: 'none'
						, width: _0x9f6cxa['getGantt']()['getEl']()['getWidth']() + 'px'
					}
				})
			};
			return _0x9f6cxc
		}
		, reAttachDropMarkerEl: function () {
			var _0x9f6cxa = this
				, _0x9f6cxc = _0x9f6cxa['dropMarkerEl'];
			if (_0x9f6cxc) {
				_0x9f6cxc = _0x9f6cxa['getGantt']()['getItemCanvasEl']()['appendChild'](_0x9f6cxc)
			}
		}
		, destroyDropMarkerEl: function () {
			var _0x9f6cxc = this;
			_0x9f6cxc['dropMarkerEl'] && (Ext['destroy'](_0x9f6cxc['dropMarkerEl']), _0x9f6cxc['dropMarkerEl'] = null)
		}
		, stopScheduledExpanding: function () {
			var _0x9f6cxc = this;
			if (_0x9f6cxc['expandProcId']) {
				clearTimeout(_0x9f6cxc['expandProcId']);
				_0x9f6cxc['expandProcId'] = null
			}
		}
		, onTaskRowDragEnter: function (_0x9f6cxc, _0x9f6cxd, _0x9f6cxf, _0x9f6cxb, _0x9f6cxe) {
			var _0x9f6cxa = this
				, _0x9f6cx13;
			_0x9f6cxa['lastOverTarget'] = _0x9f6cxd;
			_0x9f6cx13 = _0x9f6cxc['getRecord'](_0x9f6cxd);
			if (!_0x9f6cx13['isLeaf']() && !_0x9f6cx13['isExpanded']() && _0x9f6cxa['getExpandTimeout']()) {
				_0x9f6cxa['expandProcId'] = Ext['Function']['defer'](function () {
					_0x9f6cxa['stopScheduledExpanding']();
					_0x9f6cx13['expand'](false, function () {
						_0x9f6cxa['reAttachDropMarkerEl']()
					})
				}, _0x9f6cxa['getExpandTimeout']())
			}
		}
		, onTaskRowDragOut: function (_0x9f6cxc, _0x9f6cxe, _0x9f6cxd, _0x9f6cx13, _0x9f6cxb) {
			var _0x9f6cxa = this;
			_0x9f6cxa['lastOverTarget'] = null;
			_0x9f6cxa['stopScheduledExpanding']()
		}
		, onTaskRowDragOver: function (_0x9f6cxa, _0x9f6cxd, _0x9f6cxb, _0x9f6cx13, _0x9f6cxf, _0x9f6cx11) {
			var _0x9f6cx12 = this
				, _0x9f6cxe, _0x9f6cxc;
			if (_0x9f6cx13['isTaskDrag'] && !Ext['fly'](_0x9f6cx13['item'])['contains'](_0x9f6cxd)) {
				_0x9f6cxe = _0x9f6cxf['getXY']();
				_0x9f6cxc = _0x9f6cx12['getDropMarkerEl']();
				_0x9f6cx9(_0x9f6cxd, _0x9f6cxe[1], function (_0x9f6cx10, _0x9f6cx14) {
					if (!_0x9f6cx12['animating']) {
						_0x9f6cx12['animating'] = true;
						if (_0x9f6cx14 != _0x9f6cx7 && !_0x9f6cxc['isVisible'](true)) {
							_0x9f6cxc['show']()
						};
						_0x9f6cxc['animate']({
							to: {
								y: _0x9f6cx10
								, opacity: _0x9f6cx14 == _0x9f6cx7 ? 0 : 1
							}
							, listeners: {
								afteranimate: function () {
									_0x9f6cx14 == _0x9f6cx7 && _0x9f6cxc['hide']();
									_0x9f6cx12['animating'] = false
								}
							}
						})
					};
					if (_0x9f6cx3(_0x9f6cxa, _0x9f6cxd, _0x9f6cxb, _0x9f6cx13, _0x9f6cxe[1])) {
						_0x9f6cx11()
					}
				})
			}
			else {
				if (_0x9f6cx13['isTaskDrag'] && _0x9f6cx12['hasDropMarkerEl']()) {
					_0x9f6cx12['getDropMarkerEl']()['hide']()
				}
			}
		}
		, onTaskRowDragDrop: function (_0x9f6cxa, _0x9f6cxf, _0x9f6cx12, _0x9f6cxe, _0x9f6cxd) {
			var _0x9f6cxb = this
				, _0x9f6cxc, _0x9f6cx13;
			if (_0x9f6cxe['isTaskDrag'] && !Ext['fly'](_0x9f6cxe['item'])['contains'](_0x9f6cxf)) {
				_0x9f6cxc = _0x9f6cxd['getXY']();
				_0x9f6cx9(_0x9f6cxf, _0x9f6cxc[1], function (_0x9f6cx11, _0x9f6cx10) {
					_0x9f6cx4(_0x9f6cxa, _0x9f6cxf, _0x9f6cx10, _0x9f6cx12, _0x9f6cxe, _0x9f6cxd)
				})
			};
			_0x9f6cxb['destroyDropMarkerEl']()
		}
		, onTaskContainerOver: function (_0x9f6cxc, _0x9f6cxd, _0x9f6cx13, _0x9f6cxb, _0x9f6cxe) {
			var _0x9f6cxa = this;
			if (_0x9f6cx13['isTaskDrag']) {
				_0x9f6cxe()
			}
		}
		, onTaskContainerOut: function (_0x9f6cxc, _0x9f6cxe, _0x9f6cx13, _0x9f6cxb) {
			var _0x9f6cxa = this;
			_0x9f6cxa['destroyDropMarkerEl']()
		}
		, onTaskContainerDrop: function (_0x9f6cxc, _0x9f6cxe, _0x9f6cx13, _0x9f6cxb) {
			var _0x9f6cxa = this;
			if (_0x9f6cx13['isTaskDrag'] && _0x9f6cxa['lastOverTarget']) {
				_0x9f6cxa['onTaskRowDragDrop'](_0x9f6cxc, _0x9f6cxa['lastOverTarget'], _0x9f6cxe, _0x9f6cx13, _0x9f6cxb)
			}
			else {
				if (_0x9f6cx13['isTaskDrag']) {
					_0x9f6cx4(_0x9f6cxc, null, _0x9f6cx7, _0x9f6cxe, _0x9f6cx13, _0x9f6cxb);
					_0x9f6cxa['destroyDropMarkerEl']()
				}
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.feature.taskdd.plugin.ResourceDrop', function (_0x9f6cx6) {
	function _0x9f6cx5(_0x9f6cxa) {
		return _0x9f6cxa ? (!Ext['isArray'](_0x9f6cxa) ? [_0x9f6cxa] : _0x9f6cxa) : []
	}

	function _0x9f6cx9(_0x9f6cxa) {
		return _0x9f6cxa['isResource'] || (_0x9f6cxa['isUtilizationResource'] && _0x9f6cxa['isSurrogateResource']())
	}

	function _0x9f6cx3(_0x9f6cxa) {
		return _0x9f6cxa['isUtilizationResource'] ? _0x9f6cxa['getOriginalResource']() : _0x9f6cxa
	}

	function _0x9f6cx8(_0x9f6cxa) {
		return Ext['Array']['some'](_0x9f6cx5(_0x9f6cxa), function (_0x9f6cx13) {
			return _0x9f6cx9(_0x9f6cx13)
		})
	}

	function _0x9f6cx2(_0x9f6cxa) {
		return Ext['Array']['reduce'](_0x9f6cx5(_0x9f6cxa), function (_0x9f6cx13, _0x9f6cxb) {
			if (_0x9f6cx9(_0x9f6cxb)) {
				_0x9f6cx13['push'](_0x9f6cx3(_0x9f6cxb))
			};
			return _0x9f6cx13
		}, [])
	}

	function _0x9f6cx4(_0x9f6cxa, _0x9f6cx13) {
		return Ext['Array']['filter'](_0x9f6cx5(_0x9f6cx13), function (_0x9f6cxb) {
			return !_0x9f6cxa['getAssignmentFor'](_0x9f6cxb)
		})
	}

	function _0x9f6cxc(_0x9f6cxa, _0x9f6cx13) {
		return _0x9f6cx4(_0x9f6cxa, _0x9f6cx13)['length'] > 0
	}

	function _0x9f6cx7(_0x9f6cxa, _0x9f6cx13) {
		Ext['Array']['each'](_0x9f6cx5(_0x9f6cx13), function (_0x9f6cxb) {
			_0x9f6cxa['assign'](_0x9f6cxb)
		})
	}

	function _0x9f6cx1(_0x9f6cxa, _0x9f6cx13) {
		return _0x9f6cxa['ownerGrid']['resolveTaskRecord'](_0x9f6cx13)
	}
	return {
		extend: 'Ext.plugin.Abstract'
		, alias: 'plugin.gantt_resourcedrop'
		, id: 'resourcedrop'
		, config: {
			gantt: null
		}
		, ganttDetacher: null
		, destroy: function () {
			var _0x9f6cxa = this;
			_0x9f6cxa['setGantt'](null);
			_0x9f6cxa['callParent']()
		}
		, enable: function () {
			var _0x9f6cxa = this;
			if (_0x9f6cxa['disabled']) {
				_0x9f6cxa['callParent']();
				_0x9f6cxa['attachToGantt']()
			}
		}
		, disable: function () {
			var _0x9f6cxa = this;
			if (!_0x9f6cxa['disabled']) {
				_0x9f6cxa['callParent']();
				_0x9f6cxa['detachFromGantt']()
			}
		}
		, updateGantt: function (_0x9f6cxa, _0x9f6cxb) {
			var _0x9f6cx13 = this;
			_0x9f6cxb && _0x9f6cx13['detachFromGantt']();
			_0x9f6cxa && !_0x9f6cx13['disabled'] && _0x9f6cx13['attachToGantt']()
		}
		, attachToGantt: function () {
			var _0x9f6cxa = this;
			_0x9f6cxa['ganttDetacher'] = _0x9f6cxa['getGantt']()['on']({
				scope: _0x9f6cxa
				, destroyable: true
				, "task-row-drag-over": _0x9f6cxa['onTaskRowDragOver']
				, "task-row-drag-drop": _0x9f6cxa['onTaskRowDragDrop']
			})
		}
		, detachFromGantt: function () {
			var _0x9f6cxa = this;
			_0x9f6cxa['ganttDetacher'] && (Ext['destroy'](_0x9f6cxa['ganttDetacher']), _0x9f6cxa['ganttDetacher'] = null)
		}
		, onTaskRowDragOver: function (_0x9f6cx13, _0x9f6cxd, _0x9f6cx12, _0x9f6cxb, _0x9f6cxe, _0x9f6cxf) {
			var _0x9f6cxa;
			if (_0x9f6cxb['records'] && _0x9f6cx8(_0x9f6cxb['records'])) {
				_0x9f6cxa = _0x9f6cx1(_0x9f6cx13, _0x9f6cxd);
				if (_0x9f6cxa && _0x9f6cxc(_0x9f6cxa, _0x9f6cx2(_0x9f6cxb['records']))) {
					_0x9f6cxf()
				}
			}
		}
		, onTaskRowDragDrop: function (_0x9f6cx13, _0x9f6cxf, _0x9f6cx12, _0x9f6cxb, _0x9f6cxd) {
			var _0x9f6cxe, _0x9f6cxa;
			if (_0x9f6cxb['records'] && _0x9f6cx8(_0x9f6cxb['records'])) {
				_0x9f6cxa = _0x9f6cx1(_0x9f6cx13, _0x9f6cxf);
				if (_0x9f6cxa) {
					_0x9f6cxe = _0x9f6cx4(_0x9f6cxa, _0x9f6cx2(_0x9f6cxb['records']));
					_0x9f6cx7(_0x9f6cxa, _0x9f6cxe)
				}
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.feature.taskdd.DragZone', {
	extend: 'Ext.dd.DragZone'
	, requires: ['Ext.util.Point', 'Ext.dd.StatusProxy', 'Ext.dd.DropZone', 'Ext.ux.Scheduler.patches.Region', 'Ext.ux.Scheduler.patches.DragZoneDupIds', 'Ext.ux.Gantt.feature.taskdd.Proxy', 'Ext.ux.Gantt.feature.taskdd.DropZone', 'Ext.ux.Gantt.feature.taskdd.plugin.InRowTaskDragDrop', 'Ext.ux.Gantt.feature.taskdd.plugin.SegmentDragDrop', 'Ext.ux.Gantt.feature.taskdd.plugin.DeadlineDragDrop', 'Ext.ux.Gantt.feature.taskdd.plugin.OutOfRowTaskDragDrop', 'Ext.ux.Gantt.feature.taskdd.plugin.ResourceDrop']
	, config: {
		gantt: null
		, taskSelector: null
		, deadlineSelector: null
		, useTooltip: true
		, tooltipConfig: null
		, validatorFn: Ext['returnTrue']
		, validatorFnScope: null
		, showExactDropPosition: false
		, skipWeekendsDuringDragDrop: false
		, constrainDragToTaskRow: true
		, rtlProxyCls: 'scr-rtl'
		, invalidTargetSelector: ['.' + Ext['baseCSSPrefix'] + 'resizable-handle', '.sch-resizable-handle', '.sch-terminal', '.sch-gantt-progressbar-handle', '.sch-rollup-task', '.sch-gantt-baseline-item .sch-gantt-item'].join(',')
		, initialProxyCls: 'sch-gantt-dragproxy'
		, inRowTaskDragDrop: true
		, segmentDragDrop: true
		, deadlineDragDrop: true
		, outOfRowTaskDragDrop: false
		, resourceDrop: false
		, taskDropZone: null
	}
	, containerScroll: false
	, dragProxyPositionLocked: false
	, constructor: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx3 = this
			, _0x9f6cx2;
		_0x9f6cx1 = _0x9f6cx1 || {};
		if (Ext['isIE'] && (Ext['isIE8'] || Ext['ieVersion'] < 9) && window['top'] !== window) {
			Ext['dd']['DragDropManager']['notifyOccluded'] = true
		};
		_0x9f6cx2 = _0x9f6cx3['propxy'] || _0x9f6cx1['proxy'] || {};
		if (!(_0x9f6cx2 instanceof Ext['dd']['StatusProxy'])) {
			_0x9f6cx3['proxy'] = Ext['create'](Ext['apply']({}, _0x9f6cx2, {
				xclass: 'Ext.ux.Gantt.feature.taskdd.Proxy'
				, $ownedBy: _0x9f6cx3
			}));
			delete _0x9f6cx1['proxy']
		}
		else {
			_0x9f6cx3['proxy'] = _0x9f6cx2
		};
		_0x9f6cx1 = Ext['applyIf'](_0x9f6cx1, {
			ddGroup: _0x9f6cx1['gantt']['id'] + '-task-dd'
		});
		_0x9f6cx3['callParent']([_0x9f6cx5, _0x9f6cx1]);
		_0x9f6cx3['initConfig'](_0x9f6cx1);
		_0x9f6cx3['view'] = _0x9f6cx3['getGantt']();
		if (_0x9f6cx3['getGantt']()['rtl']) {
			_0x9f6cx3['proxy']['addCls'](_0x9f6cx3['getRtlProxyCls']())
		};
		if (!Ext['versions']['extjs']['isGreaterThanOrEqual']('6.2.0') && _0x9f6cx3['plugins']) {
			_0x9f6cx3['setPlugins'](_0x9f6cx3['plugins'])
		};
		if (!_0x9f6cx3['getTaskDropZone']()) {
			_0x9f6cx3['setTaskDropZone']({
				xclass: 'Ext.ux.Gantt.feature.taskdd.DropZone'
				, gantt: _0x9f6cx3['getGantt']()
				, ddGroup: _0x9f6cx3['ddGroup']
			})
		};
		if (_0x9f6cx3['getInRowTaskDragDrop']()) {
			_0x9f6cx3['addPlugin'](Ext['apply']({
				type: 'gantt_inrowtaskdragdrop'
				, gantt: _0x9f6cx3['getGantt']()
				, tooltip: _0x9f6cx3['getUseTooltip']() && (_0x9f6cx3['getTooltipConfig']() || true)
				, validatorFn: _0x9f6cx3['getValidatorFn']() && Ext['Function']['bind'](_0x9f6cx3['getValidatorFn'](), _0x9f6cx3['getValidatorFnScope']() || _0x9f6cx3['getGantt']())
				, showExactDropPosition: _0x9f6cx3['getShowExactDropPosition']()
				, skipWeekendsDuringDragDrop: _0x9f6cx3['getSkipWeekendsDuringDragDrop']()
				, snapRelativeToEventStartDate: _0x9f6cx3['getGantt']()['snapRelativeToEventStartDate']
				, constrainDragToTaskRow: _0x9f6cx3['getConstrainDragToTaskRow']()
				, dropAllowedCls: _0x9f6cx3['getInitialProxyCls']()
			}, _0x9f6cx3['getInRowTaskDragDrop']()))
		};
		if (_0x9f6cx3['getSegmentDragDrop']()) {
			_0x9f6cx3['addPlugin'](Ext['apply']({
				type: 'gantt_segmentdragdrop'
				, gantt: _0x9f6cx3['getGantt']()
				, tooltip: _0x9f6cx3['getUseTooltip']() && (_0x9f6cx3['getTooltipConfig']() || true)
				, validatorFn: _0x9f6cx3['getValidatorFn']() && Ext['Function']['bind'](_0x9f6cx3['getValidatorFn'](), _0x9f6cx3['getValidatorFnScope']() || _0x9f6cx3['getGantt']())
				, showExactDropPosition: _0x9f6cx3['getShowExactDropPosition']()
				, skipWeekendsDuringDragDrop: _0x9f6cx3['getSkipWeekendsDuringDragDrop']()
				, snapRelativeToEventStartDate: _0x9f6cx3['getGantt']()['snapRelativeToEventStartDate']
				, dropAllowedCls: _0x9f6cx3['getInitialProxyCls']()
			}, _0x9f6cx3['getSegmentDragDrop']()))
		};
		if (_0x9f6cx3['getDeadlineDragDrop']()) {
			_0x9f6cx3['addPlugin'](Ext['apply']({
				type: 'gantt_deadlinedragdrop'
				, gantt: _0x9f6cx3['getGantt']()
				, tooltip: _0x9f6cx3['getUseTooltip']() && (_0x9f6cx3['getTooltipConfig']() || true)
				, showExactDropPosition: _0x9f6cx3['getShowExactDropPosition']()
				, skipWeekendsDuringDragDrop: _0x9f6cx3['getSkipWeekendsDuringDragDrop']()
				, snapRelativeToEventStartDate: _0x9f6cx3['getGantt']()['snapRelativeToEventStartDate']
				, dropAllowedCls: _0x9f6cx3['getInitialProxyCls']()
			}, _0x9f6cx3['getDeadlineDragDrop']()))
		};
		if (_0x9f6cx3['getOutOfRowTaskDragDrop']()) {
			_0x9f6cx3['addPlugin'](Ext['apply']({
				type: 'gantt_outofrowtaskdragdrop'
				, gantt: _0x9f6cx3['getGantt']()
			}, _0x9f6cx3['getOutOfRowTaskDragDrop']()))
		};
		if (_0x9f6cx3['getResourceDrop']()) {
			_0x9f6cx3['addPlugin'](Ext['apply']({
				type: 'gantt_resourcedrop'
				, gantt: _0x9f6cx3['getGantt']()
			}, _0x9f6cx3['getResourceDrop']()))
		}
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['setPlugins'](null);
		_0x9f6cx1['proxy'] && _0x9f6cx1['proxy']['$ownedBy'] == _0x9f6cx1 && Ext['destroy'](_0x9f6cx1['proxy']);
		_0x9f6cx1['taskDropZone'] && _0x9f6cx1['taskDropZone']['getOwnerDragZone']() == _0x9f6cx1 && Ext['destroy'](_0x9f6cx1['taskDropZone']);
		_0x9f6cx1['callParent']()
	}
	, applyTaskDropZone: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		if (!(_0x9f6cx2 instanceof Ext['dd']['DropZone'])) {
			_0x9f6cx2 = Ext['apply']({}, _0x9f6cx2 || {}, {
				xclass: 'Ext.ux.Gantt.feature.taskdd.DropZone'
				, gantt: _0x9f6cx1['getGantt']()
				, ddGroup: _0x9f6cx1['ddGroup']
				, ownerDragZone: _0x9f6cx1
			});
			_0x9f6cx2 = Ext['create'](_0x9f6cx2['xclass'], _0x9f6cx1['getEl'](), _0x9f6cx2)
		};
		return _0x9f6cx2
	}
	, isValidHandleChild: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['callParent']([_0x9f6cx2]) && !Ext['fly'](_0x9f6cx2)['is'](_0x9f6cx1['getInvalidTargetSelector']())
	}
	, getPointFromEvent: function (_0x9f6cx1) {
		return Ext['util']['Point']['from'](Ext['isIE9m'] ? {
			x: _0x9f6cx1['browserEvent']['clientX']
			, y: _0x9f6cx1['browserEvent']['clientY']
		} : {
			x: _0x9f6cx1['pageX']
			, y: _0x9f6cx1['pageY']
		})
	}
	, getDragData: function (_0x9f6cx9) {
		var _0x9f6cx13 = this
			, _0x9f6cx3 = _0x9f6cx13['getGantt']()
			, _0x9f6cx11 = null
			, _0x9f6cxa, _0x9f6cx8, _0x9f6cx12, _0x9f6cx2, _0x9f6cxc, _0x9f6cx6, _0x9f6cxe, _0x9f6cx1, _0x9f6cxf, _0x9f6cxb, _0x9f6cx5, _0x9f6cx7, _0x9f6cxd;
		_0x9f6cxa = _0x9f6cx9['getTarget'](_0x9f6cx13['taskSelector']);
		_0x9f6cx8 = _0x9f6cxa && _0x9f6cx9['getTarget']('.sch-gantt-task-segment');
		_0x9f6cx12 = Number(_0x9f6cx8 && _0x9f6cx8['getAttribute']('data-segmentIndex'));
		_0x9f6cx2 = !_0x9f6cxa && _0x9f6cx9['getTarget'](_0x9f6cx13['deadlineSelector']);
		_0x9f6cx6 = _0x9f6cx9['getTarget'](_0x9f6cx3['getItemSelector']());
		_0x9f6cxc = _0x9f6cx8 && _0x9f6cx12 > 0 && _0x9f6cx8 || _0x9f6cxa || _0x9f6cx2;
		_0x9f6cxe = _0x9f6cxc && _0x9f6cx3['resolveTaskRecord'](_0x9f6cxc);
		if (_0x9f6cxe && _0x9f6cx8 && _0x9f6cx12 > 0) {
			_0x9f6cxe = _0x9f6cxe['getSegment'](_0x9f6cx12)
		};
		_0x9f6cx5 = !!_0x9f6cxa && (!_0x9f6cx8 || _0x9f6cx12 === 0);
		_0x9f6cx7 = !!_0x9f6cx8 && _0x9f6cx12 > 0;
		_0x9f6cxd = !!_0x9f6cx2;
		if (_0x9f6cxe && ((_0x9f6cx5 && (_0x9f6cx13['getInRowTaskDragDrop']() || _0x9f6cx13['outOfRowTaskDragDrop']())) || (_0x9f6cx7 && _0x9f6cx13['getSegmentDragDrop']()) || (_0x9f6cxd && _0x9f6cx13['getDeadlineDragDrop']()))) {
			_0x9f6cx1 = _0x9f6cx13['getPointFromEvent'](_0x9f6cx9);
			_0x9f6cxf = _0x9f6cx3['getDateFromDomEvent'](_0x9f6cx9);
			_0x9f6cxb = _0x9f6cx1['getOffsetsTo'](Ext['fly'](_0x9f6cxc)['getRegion']());
			_0x9f6cxb = new Ext['util'].Point(_0x9f6cxb['x'], _0x9f6cxb['y']);
			_0x9f6cx11 = {
				ddel: _0x9f6cxc
				, record: _0x9f6cxe
				, records: [_0x9f6cxe]
				, item: _0x9f6cx6
				, segmentIndex: _0x9f6cx12
				, startPoint: _0x9f6cx1
				, startPointDate: _0x9f6cxf
				, startOffsets: _0x9f6cxb
				, isTaskDrag: _0x9f6cx5
				, isTaskSegmentDrag: _0x9f6cx7
				, isDeadlineDrag: _0x9f6cxd
			}
		}
		else {
			_0x9f6cx11 = Ext['Array']['reduce'](_0x9f6cx13['getPlugins'](), function (_0x9f6cx4, _0x9f6cx10) {
				if (!_0x9f6cx4 && Ext['isFunction'](_0x9f6cx10['getDragData'])) {
					_0x9f6cx4 = _0x9f6cx10['getDragData'](_0x9f6cx9)
				};
				return _0x9f6cx4
			}, null)
		};
		if (_0x9f6cx11) {
			_0x9f6cx11 = Ext['Array']['reduce'](_0x9f6cx13['getPlugins'](), function (_0x9f6cx4, _0x9f6cx10) {
				if (Ext['isFunction'](_0x9f6cx10['extendDragData'])) {
					_0x9f6cx4 = _0x9f6cx10['extendDragData'](_0x9f6cx9, _0x9f6cx4)
				};
				return _0x9f6cx4
			}, _0x9f6cx11)
		};
		return _0x9f6cx11
	}
	, onBeforeDrag: function (_0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = true;
		if (_0x9f6cx2['gantt']['hasListeners']['beforetaskdrag']) {
			_0x9f6cx1 = (false !== _0x9f6cx2['gantt']['fireEvent']('beforetaskdrag', _0x9f6cx2['gantt'], _0x9f6cx5['record'], _0x9f6cx3, _0x9f6cx5, _0x9f6cx2))
		};
		if (_0x9f6cx1) {
			_0x9f6cx2['cachedViewportSize'] = {
				width: Ext['Element']['getViewportWidth']()
				, height: Ext['Element']['getViewportHeight']()
			}
		};
		return _0x9f6cx1
	}
	, onStartDrag: function (_0x9f6cx1, _0x9f6cx4) {
		var _0x9f6cx5 = this
			, _0x9f6cx3 = _0x9f6cx5['dragData']
			, _0x9f6cx2 = _0x9f6cx5['getProxy']();
		_0x9f6cx2['forceStatus'](_0x9f6cx5['getInitialProxyCls']());
		_0x9f6cx5['prepareProxyForDragging'](_0x9f6cx2, _0x9f6cx3, _0x9f6cx1, _0x9f6cx4);
		_0x9f6cx5['setDelta'](_0x9f6cx3['startOffsets']['x'], _0x9f6cx3['startOffsets']['y']);
		_0x9f6cx5['alignElWithMouse'](_0x9f6cx2['getEl'](), _0x9f6cx1, _0x9f6cx4);
		return _0x9f6cx5['gantt']['hasListeners']['taskdragstart'] && _0x9f6cx5['gantt']['fireEvent']('taskdragstart', _0x9f6cx5['gantt'], _0x9f6cx3['record'], {
			x: _0x9f6cx1
			, y: _0x9f6cx4
		}, _0x9f6cx5['dragData'], _0x9f6cx5)
	}
	, onEndDrag: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['gantt']['hasListeners']['aftertaskdrop'] && _0x9f6cx1['gantt']['fireEvent']('aftertaskdrop', _0x9f6cx1['gantt'], _0x9f6cx2['record'], _0x9f6cx5, _0x9f6cx2, _0x9f6cx1)
	}
	, afterRepair: function () {
		this['dragging'] = false
	}
	, prepareProxyForDragging: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx2, _0x9f6cx4) {
		var _0x9f6cx1 = Ext['fly'](_0x9f6cx3['ddel'])['getHeight']();
		if (_0x9f6cx3['isTaskDrag'] && _0x9f6cx3['record']['isMilestone']()) {
			Ext['fly'](_0x9f6cx5['getTaskGhostEl']())['setSize'](_0x9f6cx1 + 5, _0x9f6cx1 + 5)
		}
		else {
			Ext['fly'](_0x9f6cx5['getTaskGhostEl']())['setHeight'](_0x9f6cx1)
		}
	}
	, lockDragProxyPosition: function () {
		this['dragProxyPositionLocked'] = true
	}
	, unlockDragProxyPosition: function () {
		this['dragProxyPositionLocked'] = false
	}
	, alignElWithMouse: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx6 = this
			, _0x9f6cx3 = _0x9f6cx6['getTargetCoord'](_0x9f6cx5, _0x9f6cx2)
			, _0x9f6cx7 = _0x9f6cx6['getProxy']()
			, _0x9f6cx9 = _0x9f6cx7['getSize']()
			, _0x9f6cx4 = _0x9f6cx7['getForceAttachTo']()
			, _0x9f6cx8 = _0x9f6cx6['cachedViewportSize']
			, _0x9f6cxc;
		if (!_0x9f6cx6['dragProxyPositionLocked']) {
			_0x9f6cxc = _0x9f6cx7['translatePoints'](_0x9f6cx3['x'], _0x9f6cx3['y']);
			if (!_0x9f6cx4) {
				if (_0x9f6cxc['left'] < 0) {
					_0x9f6cx3['x'] = _0x9f6cxc['left'] = _0x9f6cx6['lastPageX'] || 0
				}
				else {
					if (_0x9f6cxc['left'] >= _0x9f6cx8['width'] - _0x9f6cx9['width']) {
						_0x9f6cx3['x'] = _0x9f6cxc['left'] = _0x9f6cx6['lastPageX'] || (_0x9f6cx8['width'] - _0x9f6cx9['width'])
					}
				};
				if (_0x9f6cxc['top'] < 0) {
					_0x9f6cx3['y'] = _0x9f6cxc['top'] = _0x9f6cx6['lastPageY'] || 0
				}
				else {
					if (_0x9f6cxc['top'] >= _0x9f6cx8['height'] - _0x9f6cx9['height']) {
						_0x9f6cx3['y'] = _0x9f6cxc['top'] = _0x9f6cx6['lastPageY'] || (_0x9f6cx8['height'] - _0x9f6cx9['height'])
					}
				}
			};
			_0x9f6cx7['setLocalXY'](_0x9f6cxc['left'], _0x9f6cxc['top']);
			_0x9f6cx6['cachePosition'](_0x9f6cx3['x'], _0x9f6cx3['y']);
			if (!_0x9f6cx7['getForceAttachTo']()) {
				_0x9f6cx6['autoScroll'](_0x9f6cx3['x'], _0x9f6cx3['y'], _0x9f6cx9['width'], _0x9f6cx9['height'])
			}
		};
		return _0x9f6cx3
	}
}, function (_0x9f6cx1) {
	var _0x9f6cx2 = new Ext.Factory('plugin');
	Ext['override'](_0x9f6cx1, {
		plugins: null
		, getPlugins: function () {
			var _0x9f6cx5 = this;
			if (!_0x9f6cx5['plugins']) {
				_0x9f6cx5['plugins'] = []
			};
			return _0x9f6cx5['plugins']
		}
		, setPlugins: function (_0x9f6cx3) {
			var _0x9f6cx4 = this
				, _0x9f6cx5;
			if (!_0x9f6cx3) {
				_0x9f6cx3 = []
			}
			else {
				if (!Ext['isArray'](_0x9f6cx3)) {
					_0x9f6cx3 = [_0x9f6cx3]
				}
			};
			_0x9f6cx3 = Ext['Array']['map'](_0x9f6cx3, function (_0x9f6cx7) {
				return _0x9f6cx4['createPlugin'](_0x9f6cx7)
			});
			_0x9f6cx5 = Ext['Array']['difference'](_0x9f6cx4['getPlugins'](), _0x9f6cx3);
			Ext['Array']['each'](_0x9f6cx5, function (_0x9f6cx7) {
				Ext['destroy'](_0x9f6cx7)
			})
		}
		, addPlugin: function (_0x9f6cx3) {
			var _0x9f6cx5 = this;
			_0x9f6cx5['getPlugins']()['push'](_0x9f6cx5['createPlugin'](_0x9f6cx3))
		}
		, createPlugin: function (_0x9f6cx3) {
			var _0x9f6cx5 = this
				, _0x9f6cx4;
			_0x9f6cx4 = _0x9f6cx2['create'](_0x9f6cx3);
			_0x9f6cx4['setCmp'] && _0x9f6cx4['setCmp'](_0x9f6cx5);
			_0x9f6cx4['init'] && _0x9f6cx4['init'](_0x9f6cx5);
			return _0x9f6cx4
		}
	})
});
Ext.define('Ext.ux.Gantt.field.ReadOnly', {
	extend: 'Ext.form.field.Checkbox'
	, mixins: ['Ext.ux.Gantt.field.mixin.TaskField', 'Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.readonlyfield'
	, alternateClassName: ['Ext.ux.Gantt.widget.ReadOnlyField']
	, fieldProperty: 'readOnlyField'
	, setTaskValueMethod: 'setReadOnly'
	, getTaskValueMethod: 'getReadOnly'
	, instantUpdate: true
	, initEvents: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['on']('change', _0x9f6cx1['onFieldValueChange'], _0x9f6cx1);
		return _0x9f6cx1['callParent']()
	}
	, valueToVisible: function (_0x9f6cx1) {
		return _0x9f6cx1 ? this.L('yes') : this.L('no')
	}
	, onFieldValueChange: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (_0x9f6cx2['instantUpdate'] && !_0x9f6cx2['getSuppressTaskUpdate']() && _0x9f6cx2['task']) {
			_0x9f6cx2['applyChanges']()
		}
	}
});
Ext.define('Ext.ux.Gantt.field.ShowInTimeline', {
	extend: 'Ext.form.field.Checkbox'
	, mixins: ['Ext.ux.Gantt.field.mixin.TaskField', 'Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.showintimelinefield'
	, alternateClassName: ['Ext.ux.Gantt.widget.ShowInTimelineField']
	, fieldProperty: 'showInTimelineField'
	, setTaskValueMethod: 'setShowInTimeline'
	, getTaskValueMethod: 'getShowInTimeline'
	, valueToVisible: function (_0x9f6cx1) {
		return _0x9f6cx1 ? this.L('yes') : this.L('no')
	}
	, setValue: function (_0x9f6cx1) {
		this['callParent'](arguments);
		if (this['instantUpdate'] && !this['getSuppressTaskUpdate']() && this['task']) {
			this['applyChanges']()
		}
	}
});
Ext.define('Ext.ux.Gantt.model.TaskSegment', {
	extend: 'Ext.ux.Gantt.model.Task'
	, task: null
	, customizableFields: [{
		name: 'StartOffset'
		, type: 'int'
		, defaultValue: null
	}, {
		name: 'EndOffset'
		, type: 'int'
		, defaultValue: null
	}]
	, startOffsetField: 'StartOffset'
	, endOffsetField: 'EndOffset'
	, taskNotifyingSuspended: 0
	, respectNeighbours: 0
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		_0x9f6cx1['leaf'] = true;
		if (!_0x9f6cx1['task']) {
			throw '\'task\' has to be specified'
		};
		this['task'] = _0x9f6cx1['task'];
		this['callParent'](arguments);
		Ext['override'](this, this['overridables']);
		if (this['getTask']()['normalized'] && this['getTaskStore'](true) && !this['normalized']) {
			this['normalize']()
		}
	}
	, overridables: {
		set: function () {
			var _0x9f6cx1 = this['getTask']();
			if (_0x9f6cx1 && !this['__editCounter'] && !this['taskNotifyingSuspended']) {
				_0x9f6cx1['onSegmentEditBegin'](this)
			};
			this['callParent'](arguments);
			if (_0x9f6cx1 && !this['__editCounter'] && !this['taskNotifyingSuspended']) {
				_0x9f6cx1['onSegmentEditEnd'](this)
			}
		}
	}
	, serialize: function () {
		var _0x9f6cx1 = {};
		if (this['getId']()) {
			_0x9f6cx1[this['idProperty']] = this['getId']()
		};
		_0x9f6cx1[this['phantomIdField']] = this['getPhantomId']();
		_0x9f6cx1[this['startDateField']] = this['getStartDate']();
		_0x9f6cx1[this['endDateField']] = this['getEndDate']();
		_0x9f6cx1[this['durationField']] = this['getDuration']();
		_0x9f6cx1[this['durationUnitField']] = this['getDurationUnit']();
		_0x9f6cx1[this['clsField']] = this['getCls']();
		return _0x9f6cx1
	}
	, setStartOffset: function (_0x9f6cx1) {
		var _0x9f6cx5 = this['getTask']()['getProjectCalendar']();
		var _0x9f6cx2 = _0x9f6cx5['convertMSDurationToUnit'](this['getEndOffset']() - _0x9f6cx1, this['getDurationUnit']());
		this['beginEdit']();
		this['set'](this['startOffsetField'], _0x9f6cx1);
		this['set'](this['durationField'], _0x9f6cx2);
		this['endEdit']()
	}
	, setEndOffset: function (_0x9f6cx2) {
		var _0x9f6cx5 = this['getTask']()['getProjectCalendar']();
		var _0x9f6cx1 = _0x9f6cx5['convertMSDurationToUnit'](_0x9f6cx2 - this['getStartOffset'](), this['getDurationUnit']());
		this['beginEdit']();
		this['set'](this['endOffsetField'], _0x9f6cx2);
		this['set'](this['durationField'], _0x9f6cx1);
		this['endEdit']()
	}
	, setStartEndOffset: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx3 = this['getTask']()['getProjectCalendar']();
		var _0x9f6cx2 = _0x9f6cx3['convertMSDurationToUnit'](_0x9f6cx5 - _0x9f6cx1, this['getDurationUnit']());
		this['beginEdit']();
		this['set'](this['startOffsetField'], _0x9f6cx1);
		this['set'](this['endOffsetField'], _0x9f6cx5);
		this['set'](this['durationField'], _0x9f6cx2);
		this['endEdit']()
	}
	, normalize: function () {
		this['callParent'](arguments);
		var _0x9f6cx2 = this['getStartDate']();
		if (!Ext['isNumber'](this['getStartOffset']()) && _0x9f6cx2) {
			var _0x9f6cx5 = this['getTask']();
			var _0x9f6cx1 = this['calculateDuration'](_0x9f6cx5['getStartDate'](), _0x9f6cx2, 'MILLI');
			var _0x9f6cx3 = _0x9f6cx1 + this['getDuration']('MILLI');
			var _0x9f6cx7 = _0x9f6cx5['getProjectCalendar']();
			var _0x9f6cx4 = _0x9f6cx7['convertMSDurationToUnit'](_0x9f6cx3 - _0x9f6cx1, this['getDurationUnit']());
			this['data'][this['startOffsetField']] = _0x9f6cx1;
			this['data'][this['endOffsetField']] = _0x9f6cx3;
			this['data'][this['durationField']] = _0x9f6cx4
		}
	}
	, updateOffsetsByDates: function () {
		if (!this['getTaskStore'](true)) {
			return
		};
		if (this['updatingOffsets'] || this['updatingDates']) {
			return
		};
		this['updatingOffsets'] = true;
		var _0x9f6cx1 = this['calculateDuration'](this['getTask']()['getStartDate'](), this['getStartDate'](), 'MILLI');
		this['setStartEndOffset'](_0x9f6cx1, _0x9f6cx1 + this['getDuration']('MILLI'));
		this['updatingOffsets'] = false
	}
	, updateDatesByOffsets: function (_0x9f6cx7) {
		_0x9f6cx7 = _0x9f6cx7 || {};
		if (this['updatingDates'] || this['updatingOffsets']) {
			return
		};
		var _0x9f6cx6 = _0x9f6cx7['isForward'] !== false
			, _0x9f6cx4 = _0x9f6cx7['useAbsoluteOffset'] !== false
			, _0x9f6cx2 = _0x9f6cx7['startDate']
			, _0x9f6cx8 = _0x9f6cx7['endDate']
			, _0x9f6cx3 = this['getTaskStore'](true);
		if (!_0x9f6cx3) {
			return
		};
		this['updatingDates'] = true;
		var _0x9f6cx5, _0x9f6cx1;
		if (_0x9f6cx6) {
			_0x9f6cx1 = this['getPrevSegment']();
			if (_0x9f6cx1 && !_0x9f6cx4) {
				_0x9f6cx5 = this['skipWorkingTime'](_0x9f6cx1['getEndDate'](), this['getStartOffset']() - _0x9f6cx1['getEndOffset']())
			}
			else {
				_0x9f6cx5 = this['skipWorkingTime'](_0x9f6cx2 || this['getTask']()['getStartDate'](), this['getStartOffset']())
			}
		}
		else {
			_0x9f6cx1 = this['getNextSegment']();
			if (_0x9f6cx1 && !_0x9f6cx4) {
				_0x9f6cx5 = this['skipWorkingTime'](_0x9f6cx1['getStartDate'](), _0x9f6cx1['getStartOffset']() - this['getEndOffset']() + this['getDuration']('MILLI'), false)
			}
			else {
				_0x9f6cx5 = this['skipWorkingTime'](_0x9f6cx8 || this['getTask']()['getEndDate'](), this['getDuration']('MILLI'), false)
			}
		};
		this['setStartDateWithoutPropagation'](_0x9f6cx5, true, _0x9f6cx3['skipWeekendsDuringDragDrop']);
		this['updatingDates'] = false
	}
	, getPrevSegment: function () {
		var _0x9f6cx1 = this['task']['getSegments']();
		return _0x9f6cx1[Ext['Array']['indexOf'](_0x9f6cx1, this) - 1]
	}
	, getNextSegment: function () {
		var _0x9f6cx1 = this['task']['getSegments']();
		return _0x9f6cx1[Ext['Array']['indexOf'](_0x9f6cx1, this) + 1]
	}
	, buildSnapshot: function () {
		return [this, Ext['apply']({}, this['data'])]
	}
	, readSnapshot: function (_0x9f6cx1) {
		if (_0x9f6cx1) {
			Ext['apply'](this['data'], _0x9f6cx1[1]);
			return this
		};
		return _0x9f6cx1
	}
	, enableRespectNeighbours: function () {
		this['respectNeighbours']++
	}
	, disableRespectNeighbours: function () {
		this['respectNeighbours']--
	}
	, suspendTaskNotifying: function () {
		this['taskNotifyingSuspended']++
	}
	, resumeTaskNotifying: function () {
		this['taskNotifyingSuspended']--
	}
	, setStartDate: function (_0x9f6cx1, _0x9f6cx2) {
		if (_0x9f6cx2) {
			this['enableRespectNeighbours']()
		};
		this['callParent'](arguments);
		if (_0x9f6cx2) {
			this['disableRespectNeighbours']()
		}
	}
	, setStartDateWithoutPropagation: function () {
		this['beginEdit']();
		this['callParent'](arguments);
		this['updateOffsetsByDates']();
		if (!this['inShifting'] && this['respectNeighbours'] && this['getNextSegment']()) {
			var _0x9f6cx1 = this['getNextSegment']();
			var _0x9f6cx2 = this['getEndOffset']() - _0x9f6cx1['getStartOffset']();
			if (_0x9f6cx1 && _0x9f6cx2 > 0) {
				_0x9f6cx1['suspendTaskNotifying']();
				_0x9f6cx1['enableRespectNeighbours']();
				_0x9f6cx1['shiftWithoutPropagation'](_0x9f6cx2);
				_0x9f6cx1['resumeTaskNotifying']();
				_0x9f6cx1['disableRespectNeighbours']()
			}
		};
		this['endEdit']();
		return true
	}
	, shiftWithoutPropagation: function (_0x9f6cx5) {
		var _0x9f6cx2 = this;
		if (!_0x9f6cx5) {
			return
		};
		_0x9f6cx2['beginEdit']();
		_0x9f6cx2['inShifting'] = true;
		_0x9f6cx2['setStartEndOffset'](_0x9f6cx2['getStartOffset']() + _0x9f6cx5, _0x9f6cx2['getEndOffset']() + _0x9f6cx5);
		_0x9f6cx2['updateDatesByOffsets']();
		var _0x9f6cx1;
		if (_0x9f6cx2['respectNeighbours'] && (_0x9f6cx1 = _0x9f6cx5 > 0 ? _0x9f6cx2['getNextSegment']() : _0x9f6cx2['getPrevSegment']())) {
			_0x9f6cx1['suspendTaskNotifying']();
			_0x9f6cx1['enableRespectNeighbours']();
			_0x9f6cx1['shiftWithoutPropagation'](_0x9f6cx5);
			_0x9f6cx1['resumeTaskNotifying']();
			_0x9f6cx1['disableRespectNeighbours']()
		};
		_0x9f6cx2['inShifting'] = false;
		_0x9f6cx2['endEdit']();
		return true
	}
	, setEndDateWithoutPropagation: function () {
		this['beginEdit']();
		this['callParent'](arguments);
		this['updateOffsetsByDates']();
		this['endEdit']();
		return true
	}
	, setStartEndDateWithoutPropagation: function () {
		this['beginEdit']();
		this['callParent'](arguments);
		this['updateOffsetsByDates']();
		this['endEdit']();
		return true
	}
	, setDurationWithoutPropagation: function () {
		this['beginEdit']();
		this['callParent'](arguments);
		this['updateOffsetsByDates']();
		this['endEdit']();
		return true
	}
	, getTask: function () {
		return this['task']
	}
	, beginEdit: function () {
		var _0x9f6cx1 = this['getTask']();
		if (_0x9f6cx1 && !this['__editCounter'] && !this['taskNotifyingSuspended']) {
			_0x9f6cx1['onSegmentEditBegin'](this)
		};
		this['callParent'](arguments)
	}
	, endEdit: function () {
		var _0x9f6cx2 = this['previous']
			, _0x9f6cx1 = this['getTask']();
		this['callParent'](arguments);
		if (_0x9f6cx1 && !this['__editCounter'] && !this['taskNotifyingSuspended']) {
			if (this['startDateField'] in _0x9f6cx2 || this['endDateField'] in _0x9f6cx2 || this['startOffsetField'] in _0x9f6cx2 || this['endOffsetField'] in _0x9f6cx2 || this['durationField'] in _0x9f6cx2) {
				_0x9f6cx1['onSegmentsChanged'](this, _0x9f6cx2)
			};
			_0x9f6cx1['onSegmentEditEnd'](this)
		}
	}
	, setSegments: Ext['emptyFn']
	, getSegments: Ext['emptyFn']
	, callTask: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['task'];
		var _0x9f6cx3 = this['callTask']['caller'];
		var _0x9f6cx5 = _0x9f6cx3 && _0x9f6cx1[_0x9f6cx3['$name']];
		if (_0x9f6cx5) {
			return _0x9f6cx5['apply'](_0x9f6cx1, _0x9f6cx2)
		}
	}
	, getSchedulingMode: function () {
		return 'Normal'
	}
	, getCalendar: function () {
		return this['callTask'](arguments)
	}
	, getOwnCalendar: function () {
		return this['callTask'](arguments)
	}
	, getProjectCalendar: function () {
		return this['callTask'](arguments)
	}
	, getDependencyStore: function () {
		return this['callTask'](arguments)
	}
	, getResourceStore: function () {
		return this['callTask'](arguments)
	}
	, getAssignmentStore: function () {
		return this['callTask'](arguments)
	}
	, getTaskStore: function () {
		return this['callTask'](arguments)
	}
	, forEachAvailabilityInterval: function (_0x9f6cx1) {
		_0x9f6cx1['segments'] = _0x9f6cx1['segments'] || false;
		return this['callTask'](arguments)
	}
	, propagateChanges: function () {
		return this['callTask'](arguments)
	}
	, rejectSegmentsProjection: function () {
		return this['callTask'](arguments)
	}
	, commitSegmentsProjection: function () {
		return this['callTask'](arguments)
	}
	, getAssignments: function () {
		return this['callTask'](arguments)
	}
	, getAssignmentFor: function () {
		return this['callTask'](arguments)
	}
	, isAssignedTo: function () {
		return this['callTask'](arguments)
	}
	, getResources: function () {
		return this['callTask'](arguments)
	}
	, autoCalculateCost: false
	, recalculateCost: Ext['emptyFn']
});
Ext.define('Ext.ux.Gantt.model.Week', {
	extend: 'Ext.data.Model'
	, idProperty: 'Id'
	, fields: [{
		name: 'Id'
	}, {
		name: 'name'
		, type: 'string'
	}, {
		name: 'startDate'
		, type: 'date'
	}, {
		name: 'endDate'
		, type: 'date'
	}, {
		name: 'mainDay'
	}, {
		name: 'weekAvailability'
	}]
	, set: function (_0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx2 === 'name') {
			Ext['Array']['each'](this['get']('weekAvailability')['concat'](this['get']('mainDay')), function (_0x9f6cx5) {
				if (_0x9f6cx5) {
					_0x9f6cx5['setName'](_0x9f6cx1)
				}
			})
		};
		this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Gantt.model.utilization.DefaultUtilizationNegotiationStrategy', {
	uses: ['Ext.Date', 'Ext.Object', 'Ext.ux.Scheduler.util.Date']
	, getUtilizationInfoForUtilizationEvent: function (_0x9f6cx5) {
		var _0x9f6cx3 = this
			, _0x9f6cx1 = {};
		_0x9f6cx3['forEachTimeSpanInterval'](_0x9f6cx5, function _0x9f6cx2(_0x9f6cx4, _0x9f6cx6) {
			var _0x9f6cx7;
			if (_0x9f6cx5['isSurrogateAssignment']()) {
				_0x9f6cx7 = _0x9f6cx5['getOriginalAssignment']()['getUtilizationInfo'](_0x9f6cx4, _0x9f6cx6)
			}
			else {
				if (_0x9f6cx5['isSurrogateSummary']()) {
					_0x9f6cx7 = _0x9f6cx5['getOriginalResource']()['getUtilizationInfo'](_0x9f6cx4, _0x9f6cx6)
				}
				else {
					Ext['Error']['raise']('Unknown utilization event type');
					var _0x9f6cx8 = false
				}
			};
			Ext['Object']['each'](_0x9f6cx7, function (_0x9f6cx9, _0x9f6cxc) {
				_0x9f6cx1[_0x9f6cx3['self']['makeUtilizationInfoKey'](_0x9f6cx4, _0x9f6cx6, _0x9f6cx9)] = _0x9f6cxc
			});
			return _0x9f6cx7
		});
		return _0x9f6cx1
	}
	, getUtilizationInfoForAssignmentEventInterval: function (_0x9f6cx5, _0x9f6cx7, _0x9f6cx4) {
		var _0x9f6cx2 = Ext['Date']
			, _0x9f6cx3 = this
			, _0x9f6cx1 = {
				isUtilized: false
				, allocationMs: 0
				, allocationDeltaMs: 0
				, isOverallocated: false
				, isUnderallocated: false
				, assignmentInfo: null
				, taskInfo: null
			}
			, _0x9f6cx6 = _0x9f6cx5['getUtilizationInfo']();
		_0x9f6cx4 = _0x9f6cx4 || _0x9f6cx2['add'](_0x9f6cx7, _0x9f6cx2.DAY, 1);
		Ext['Object']['each'](_0x9f6cx1, function (_0x9f6cx8, _0x9f6cxc) {
			var _0x9f6cx9 = _0x9f6cx3['self']['makeUtilizationInfoKey'](_0x9f6cx7, _0x9f6cx4, _0x9f6cx8);
			_0x9f6cx1[_0x9f6cx8] = _0x9f6cx6['hasOwnProperty'](_0x9f6cx9) ? _0x9f6cx6[_0x9f6cx9] : _0x9f6cxc
		});
		return _0x9f6cx1
	}
	, forEachTimeSpanInterval: function (_0x9f6cx7, _0x9f6cx4) {
		var _0x9f6cx5 = Ext['Date']
			, _0x9f6cx1 = _0x9f6cx7['getStartDate'] ? _0x9f6cx7['getStartDate']() : _0x9f6cx7['startDate']
			, _0x9f6cx3 = _0x9f6cx7['getEndDate'] ? _0x9f6cx7['getEndDate']() : _0x9f6cx7['endDate']
			, _0x9f6cx2;
		_0x9f6cx2 = _0x9f6cx5['clearTime'](_0x9f6cx1, true);
		while (_0x9f6cx2 < _0x9f6cx3) {
			_0x9f6cx1 = _0x9f6cx2;
			_0x9f6cx2 = _0x9f6cx5['add'](_0x9f6cx2, _0x9f6cx5.DAY, 1);
			_0x9f6cx4(_0x9f6cx1, _0x9f6cx2)
		}
	}
	, adjustStartDateToTick: function (_0x9f6cx1) {
		return _0x9f6cx1 && Ext['Date']['clearTime'](_0x9f6cx1, true) || _0x9f6cx1
	}
	, adjustEndDateToTick: function (_0x9f6cx3) {
		var _0x9f6cx5 = Ext['Date']
			, _0x9f6cx2 = _0x9f6cx3
			, _0x9f6cx1;
		if (_0x9f6cx3) {
			_0x9f6cx1 = new Date(_0x9f6cx3['getTime']() - 1);
			if (_0x9f6cx1['getDate']() != _0x9f6cx3['getDate']()) {
				_0x9f6cx2 = new Date(_0x9f6cx3)
			}
			else {
				_0x9f6cx2 = _0x9f6cx5['clearTime'](_0x9f6cx5['add'](_0x9f6cx3, _0x9f6cx5.DAY, 1))
			}
		};
		return _0x9f6cx2
	}
	, calculateResourceAssignmentsTimespan: function (_0x9f6cx7) {
		var _0x9f6cx3 = this
			, _0x9f6cx5 = false
			, _0x9f6cx4, _0x9f6cx2;
		_0x9f6cx4 = Ext.ux.Scheduler['util']['Date']['MAX_VALUE'];
		_0x9f6cx2 = Ext.ux.Scheduler['util']['Date']['MIN_VALUE'];
		_0x9f6cx7['forEachAssignment'](function _0x9f6cx1(_0x9f6cxc) {
			var _0x9f6cx8 = _0x9f6cxc['getTask']()
				, _0x9f6cx9 = _0x9f6cx8 && _0x9f6cx8['getStartDate']() || _0x9f6cx4
				, _0x9f6cx6 = _0x9f6cx8 && _0x9f6cx8['getEndDate']() || _0x9f6cx2;
			if (_0x9f6cx4 > _0x9f6cx9) {
				_0x9f6cx4 = _0x9f6cx9
			};
			if (_0x9f6cx2 < _0x9f6cx6) {
				_0x9f6cx2 = _0x9f6cx6
			};
			_0x9f6cx5 = true
		});
		return {
			startDate: _0x9f6cx5 && _0x9f6cx3['adjustStartDateToTick'](_0x9f6cx4) || null
			, endDate: _0x9f6cx5 && _0x9f6cx3['adjustEndDateToTick'](_0x9f6cx2) || null
		}
	}
	, assignmentsComparator: function (_0x9f6cx3, _0x9f6cx5) {
		if (_0x9f6cx3['getTask']() && _0x9f6cx5['getTask']() && _0x9f6cx3['getTask']()['getName']() > _0x9f6cx5['getTask']()['getName']()) {
			return 1
		};
		return -1
	}
	, inheritableStatics: {
		makeUtilizationInfoKey: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx2) {
			return [_0x9f6cx1['getTime'](), _0x9f6cx5['getTime'](), _0x9f6cx2].join('-')
		}
	}
});
Ext.define('Ext.ux.Gantt.model.utilization.ResourceStoreUtilizationNegotiationStrategy', {
	extend: 'Ext.ux.Gantt.model.utilization.DefaultUtilizationNegotiationStrategy'
	, uses: ['Ext.Date', 'Ext.ux.Gantt.model.UtilizationEvent']
	, config: {
		resourceUtilizationStore: null
		, underUtilizationThreshold: null
		, overUtilizationThreshold: null
	}
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['initConfig'](_0x9f6cx1)
	}
	, getUtilizationInfoForUtilizationEvent: function (_0x9f6cxa) {
		var _0x9f6cx4 = Ext.ux.Gantt['model']['UtilizationEvent']
			, _0x9f6cx8 = this
			, _0x9f6cxc = _0x9f6cx8['getResourceUtilizationStore']()
			, _0x9f6cx2 = _0x9f6cxa['getId']()
			, _0x9f6cx1 = _0x9f6cxc && _0x9f6cxc['utilizationInfoCache'] || {}
			, _0x9f6cx13 = _0x9f6cx1[_0x9f6cx2] || null
			, _0x9f6cx6, _0x9f6cx9, _0x9f6cx3, _0x9f6cx7;
		if (!_0x9f6cx13) {
			_0x9f6cx6 = _0x9f6cxa['getOriginalResource']();
			_0x9f6cx9 = _0x9f6cx8['calculateResourceAssignmentsTimespan'](_0x9f6cx6);
			_0x9f6cx3 = [];
			_0x9f6cx6['forEachAssignment'](function (_0x9f6cxb) {
				_0x9f6cx3['push'](_0x9f6cxb)
			});
			_0x9f6cx3['sort'](function (_0x9f6cxe, _0x9f6cxb) {
				return _0x9f6cx8['assignmentsComparator'](_0x9f6cxe, _0x9f6cxb)
			});
			_0x9f6cx8['forEachTimeSpanInterval'](_0x9f6cx9, function _0x9f6cx5(_0x9f6cxf, _0x9f6cxd) {
				var _0x9f6cx12 = _0x9f6cx6['getUtilizationInfo'](_0x9f6cxf, _0x9f6cxd, _0x9f6cx8['getUnderUtilizationThreshold'](), _0x9f6cx8['getOverUtilizationThreshold']())
					, _0x9f6cxb, _0x9f6cxe;
				_0x9f6cxb = _0x9f6cx4['getSurrogateIdFor'](_0x9f6cx6);
				_0x9f6cxe = _0x9f6cx1[_0x9f6cxb] = (_0x9f6cx1[_0x9f6cxb] || {});
				Ext['Object']['each'](_0x9f6cx12, function (_0x9f6cx11, _0x9f6cx10) {
					_0x9f6cxe[_0x9f6cx8['self']['makeUtilizationInfoKey'](_0x9f6cxf, _0x9f6cxd, _0x9f6cx11)] = _0x9f6cx10
				});
				_0x9f6cx7 = 0;
				Ext['Array']['each'](_0x9f6cx3, function (_0x9f6cx10) {
					var _0x9f6cx14, _0x9f6cx11 = _0x9f6cx10['getId']();
					if (_0x9f6cx12['assignmentInfo']['hasOwnProperty'](_0x9f6cx11)) {
						_0x9f6cxb = _0x9f6cx4['getSurrogateIdFor'](_0x9f6cx10);
						_0x9f6cxe = _0x9f6cx1[_0x9f6cxb] = (_0x9f6cx1[_0x9f6cxb] || {});
						_0x9f6cx14 = _0x9f6cx12['assignmentInfo'][_0x9f6cx11];
						Ext['Object']['each'](_0x9f6cx14, function (_0x9f6cx17, _0x9f6cx16) {
							_0x9f6cxe[_0x9f6cx8['self']['makeUtilizationInfoKey'](_0x9f6cxf, _0x9f6cxd, _0x9f6cx17)] = _0x9f6cx16
						})
					}
				})
			});
			_0x9f6cx13 = _0x9f6cx1[_0x9f6cx2] || {}
		};
		return _0x9f6cx13
	}
	, getUtilizationInfoForAssignmentEventInterval: function (_0x9f6cx2, _0x9f6cx6) {
		var _0x9f6cx1 = Ext['Date']
			, _0x9f6cx3 = this
			, _0x9f6cx5 = _0x9f6cx3['getResourceUtilizationStore']()
			, _0x9f6cx7 = _0x9f6cx5['getTimeAxis']()
			, _0x9f6cx8 = _0x9f6cx7['getTickFromDate'](_0x9f6cx6)
			, _0x9f6cx4;
		if (_0x9f6cx8 !== -1 && _0x9f6cx8 < _0x9f6cx7['count']()) {
			_0x9f6cx4 = _0x9f6cx7['getAt'](_0x9f6cx8)['getEndDate']()
		}
		else {
			_0x9f6cx4 = _0x9f6cx1['add'](_0x9f6cx6, 1, _0x9f6cx7['unit'])
		};
		return _0x9f6cx3['callParent']([_0x9f6cx2, _0x9f6cx6, _0x9f6cx4])
	}
	, forEachTimeSpanInterval: function (_0x9f6cx6, _0x9f6cx7) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getResourceUtilizationStore']()
			, _0x9f6cx3 = _0x9f6cx2['getTimeAxis']()
			, _0x9f6cx1, _0x9f6cx4;
		if (_0x9f6cx3) {
			_0x9f6cx1 = _0x9f6cx6['getStartDate'] ? _0x9f6cx6['getStartDate']() : _0x9f6cx6['startDate'];
			_0x9f6cx4 = _0x9f6cx6['getEndDate'] ? _0x9f6cx6['getEndDate']() : _0x9f6cx6['endDate'];
			_0x9f6cx1 = new Date(Math['max'](_0x9f6cx1, _0x9f6cx3['getStart']()));
			_0x9f6cx4 = new Date(Math['min'](_0x9f6cx4, _0x9f6cx3['getEnd']()));
			Ext['Array']['each'](_0x9f6cx3['generateTicks'](_0x9f6cx1, _0x9f6cx4, _0x9f6cx3['getUnit']()), function (_0x9f6cx8) {
				if (_0x9f6cx8['start'] - _0x9f6cx1 >= 0 && _0x9f6cx8['end'] - _0x9f6cx4 <= 0) {
					_0x9f6cx7(_0x9f6cx8['start'], _0x9f6cx8['end'])
				}
			})
		}
		else {
			_0x9f6cx5['callParent']([_0x9f6cx6, _0x9f6cx7])
		}
	}
	, adjustStartDateToTick: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getResourceUtilizationStore']()
			, _0x9f6cx3 = _0x9f6cx2['getTimeAxis']();
		return _0x9f6cx3['floorDate'](_0x9f6cx1, false, _0x9f6cx3['unit'], 1)
	}
	, adjustEndDateToTick: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getResourceUtilizationStore']()
			, _0x9f6cx3 = _0x9f6cx2['getTimeAxis']();
		return _0x9f6cx3['ceilDate'](_0x9f6cx1, false, _0x9f6cx3['unit'], 1)
	}
});
Ext.define('Ext.ux.Scheduler.mixin.FilterableTreeView', {
	prevBlockRefresh: null
	, initTreeFiltering: function () {
		var _0x9f6cx1 = function () {
			var _0x9f6cx2 = this['store'];
			this['mon'](_0x9f6cx2, 'nodestore-datachange-start', this['onFilterChangeStart'], this);
			this['mon'](_0x9f6cx2, 'nodestore-datachange-end', this['onFilterChangeEnd'], this);
			if (!_0x9f6cx2['allowExpandCollapseWhileFiltered']) {
				this['mon'](_0x9f6cx2, 'filter-clear', this['onFilterCleared'], this);
				this['mon'](_0x9f6cx2, 'filter-set', this['onFilterSet'], this)
			}
		};
		if (this['rendered']) {
			_0x9f6cx1['call'](this)
		}
		else {
			this['on']('beforerender', _0x9f6cx1, this, {
				single: true
			})
		}
	}
	, onFilterChangeStart: function () {
		this['prevBlockRefresh'] = this['blockRefresh'];
		this['blockRefresh'] = true;
		Ext['suspendLayouts']()
	}
	, onFilterChangeEnd: function () {
		Ext['resumeLayouts'](true);
		this['blockRefresh'] = this['prevBlockRefresh']
	}
	, onFilterCleared: function () {
		delete this['toggle'];
		var _0x9f6cx1 = this['getEl']();
		if (_0x9f6cx1) {
			_0x9f6cx1['removeCls']('sch-tree-filtered')
		}
	}
	, onFilterSet: function () {
		this['toggle'] = function () {};
		var _0x9f6cx1 = this['getEl']();
		if (_0x9f6cx1) {
			_0x9f6cx1['addCls']('sch-tree-filtered')
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.TreeNavigationModel', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.tree.NavigationModel'
	, minVersion: '6.0.0'
	, maxVersion: '6.0.2'
	, overrides: {
		onAsterisk: function () {
			if (!this['view']['ownerCt']['expandAll']) {
				this['view']['lockingPartner']['ownerCt']['expandAll']();
				return
			};
			this['callParent'](arguments)
		}
	}
});
Ext.define('Ext.ux.Scheduler.model.TimeAxisTick', {
	extend: 'Ext.ux.Scheduler.model.Range'
	, startDateField: 'start'
	, endDateField: 'end'
});
Ext.define('Ext.ux.Scheduler.data.TimeAxis', {
	extend: 'Ext.data.JsonStore'
	, requires: ['Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.model.TimeAxisTick']
	, model: 'Ext.ux.Scheduler.model.TimeAxisTick'
	, continuous: true
	, originalContinuous: null
	, autoAdjust: true
	, unit: null
	, increment: null
	, resolutionUnit: null
	, resolutionIncrement: null
	, weekStartDay: null
	, mainUnit: null
	, shiftUnit: null
	, shiftIncrement: 1
	, defaultSpan: 1
	, isConfigured: false
	, adjustedStart: null
	, adjustedEnd: null
	, visibleTickStart: null
	, visibleTickEnd: null
	, presetName: null
	, mode: 'plain'
	, startTime: 0
	, endTime: 24
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx5 = this;
		_0x9f6cx1 = _0x9f6cx1 || {};
		if (_0x9f6cx5['setModel']) {
			_0x9f6cx5['setModel'](_0x9f6cx5['model'])
		};
		_0x9f6cx5['setMode'](_0x9f6cx1['mode'] || _0x9f6cx5['mode']);
		_0x9f6cx5['originalContinuous'] = _0x9f6cx5['continuous'];
		_0x9f6cx5['callParent'](arguments);
		_0x9f6cx5['on'](Ext['versions']['touch'] ? 'refresh' : 'datachanged', function () {
			_0x9f6cx5['fireEvent']('reconfigure', _0x9f6cx5, false)
		});
		_0x9f6cx5['on']('endreconfigure', function (_0x9f6cx3, _0x9f6cx4) {
			_0x9f6cx3['fireEvent']('reconfigure', _0x9f6cx3, _0x9f6cx4)
		});
		if (_0x9f6cx1['viewPreset']) {
			var _0x9f6cx2 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0x9f6cx1['viewPreset']);
			_0x9f6cx2 && _0x9f6cx5['consumeViewPreset'](_0x9f6cx2)
		};
		if (_0x9f6cx1['start'] || _0x9f6cx5['start']) {
			_0x9f6cx5['reconfigure'](_0x9f6cx1)
		}
	}
	, reconfigure: function (_0x9f6cx3, _0x9f6cx1) {
		this['isConfigured'] = true;
		Ext['apply'](this, _0x9f6cx3);
		var _0x9f6cxa = this['getAdjustedDates'](_0x9f6cx3['start'], _0x9f6cx3['end'], true);
		var _0x9f6cxc = this['getAdjustedDates'](_0x9f6cx3['start'], _0x9f6cx3['end']);
		var _0x9f6cx2 = _0x9f6cxc['start'];
		var _0x9f6cx4 = _0x9f6cxc['end'];
		if (this['fireEvent']('beforereconfigure', this, _0x9f6cx2, _0x9f6cx4) !== false) {
			this['fireEvent']('beginreconfigure', this);
			var _0x9f6cx8 = this['unit'];
			var _0x9f6cx9 = this['increment'] || 1;
			var _0x9f6cx6 = this['generateTicks'](_0x9f6cx2, _0x9f6cx4, _0x9f6cx8, _0x9f6cx9);
			this['removeAll'](true);
			this['suspendEvents']();
			this['add'](_0x9f6cx6);
			if (this['getCount']() === 0) {
				Ext['Error']['raise']('Invalid time axis configuration or filter, please check your input data.')
			};
			this['resumeEvents']();
			var _0x9f6cx5 = Ext.ux.Scheduler['util']['Date'];
			var _0x9f6cx7 = _0x9f6cx6['length'];
			if (this['isContinuous']()) {
				this['adjustedStart'] = _0x9f6cxa['start'];
				this['adjustedEnd'] = this['getNext'](_0x9f6cx7 > 1 ? _0x9f6cx6[_0x9f6cx7 - 1]['start'] : _0x9f6cxa['start'], _0x9f6cx8, _0x9f6cx9)
			}
			else {
				this['adjustedStart'] = this['getStart']();
				this['adjustedEnd'] = this['getEnd']()
			};
			do {
				this['visibleTickStart'] = (this['getStart']() - this['adjustedStart']) / (_0x9f6cx5['getUnitDurationInMs'](_0x9f6cx8) * _0x9f6cx9);
				if (this['visibleTickStart'] >= 1) {
					this['adjustedStart'] = _0x9f6cx5['getNext'](this['adjustedStart'], _0x9f6cx8, _0x9f6cx9)
				}
			} while (this['visibleTickStart'] >= 1);;
			do {
				this['visibleTickEnd'] = _0x9f6cx7 - (this['adjustedEnd'] - this['getEnd']()) / (_0x9f6cx5['getUnitDurationInMs'](_0x9f6cx8) * _0x9f6cx9);
				if (_0x9f6cx7 - this['visibleTickEnd'] >= 1) {
					this['adjustedEnd'] = _0x9f6cx5['getNext'](this['adjustedEnd'], _0x9f6cx8, -1)
				}
			} while (_0x9f6cx7 - this['visibleTickEnd'] >= 1);;
			this['fireEvent']('endreconfigure', this, _0x9f6cx1)
		}
	}
	, isWeek: function () {
		return this['mode'] !== 'plain'
	}
	, setMode: function (_0x9f6cx1) {
		this['mode'] = _0x9f6cx1;
		if (this['isWeek']()) {
			this['generateTicksValidatorFn'] = function (_0x9f6cx2) {
				if (this['startTime'] > 0 || this['endTime'] < 24) {
					return (_0x9f6cx2['getHours']() >= this['startTime'] && _0x9f6cx2['getHours']() < this['endTime'])
				}
				else {
					return true
				}
			}
		}
		else {
			this['generateTicksValidatorFn'] = function () {
				return true
			}
		}
	}
	, setTimeSpan: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = this['getAdjustedDates'](_0x9f6cx5, _0x9f6cx1);
		_0x9f6cx5 = _0x9f6cx2['start'];
		_0x9f6cx1 = _0x9f6cx2['end'];
		if (this['getStart']() - _0x9f6cx5 !== 0 || this['getEnd']() - _0x9f6cx1 !== 0) {
			this['reconfigure']({
				start: _0x9f6cx5
				, end: _0x9f6cx1
			})
		}
	}
	, filterBy: function (_0x9f6cx2, _0x9f6cx1) {
		this['continuous'] = false;
		_0x9f6cx1 = _0x9f6cx1 || this;
		this['clearFilter'](true);
		this['suspendEvents'](true);
		this['filter']([{
			filterFn: function (_0x9f6cx3, _0x9f6cx5) {
				return _0x9f6cx2['call'](_0x9f6cx1, _0x9f6cx3['data'], _0x9f6cx5)
			}
		}]);
		if (this['getCount']() === 0) {
			this['clearFilter']();
			this['resumeEvents']();
			Ext['Error']['raise']('Invalid time axis filter - no ticks passed through the filter. Please check your filter method.')
		};
		this['resumeEvents']()
	}
	, isContinuous: function () {
		var _0x9f6cx1 = this['continuous'] && !this['isFiltered']();
		if (this['isWeek']()) {
			_0x9f6cx1 = _0x9f6cx1 && this['startTime'] === 0 && this['endTime'] === 24
		};
		return _0x9f6cx1
	}
	, clearFilter: function () {
		this['continuous'] = this['originalContinuous'];
		this['callParent'](arguments)
	}
	, generateTicks: function (_0x9f6cx1, _0x9f6cx3, _0x9f6cx6, _0x9f6cx9) {
		var _0x9f6cx8 = []
			, _0x9f6cx7, _0x9f6cx2 = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cx4 = 0;
		_0x9f6cx6 = _0x9f6cx6 || this['unit'];
		_0x9f6cx9 = _0x9f6cx9 || this['increment'];
		var _0x9f6cxc = this['getAdjustedDates'](_0x9f6cx1, _0x9f6cx3);
		_0x9f6cx1 = _0x9f6cxc['start'];
		_0x9f6cx3 = _0x9f6cxc['end'];
		while (_0x9f6cx1 < _0x9f6cx3) {
			_0x9f6cx7 = this['getNext'](_0x9f6cx1, _0x9f6cx6, _0x9f6cx9);
			if (!this['autoAdjust'] && _0x9f6cx7 > _0x9f6cx3) {
				_0x9f6cx7 = _0x9f6cx3
			};
			if (_0x9f6cx6 === _0x9f6cx2['HOUR'] && _0x9f6cx9 > 1 && _0x9f6cx8['length'] > 0 && _0x9f6cx4 === 0) {
				var _0x9f6cx5 = _0x9f6cx8[_0x9f6cx8['length'] - 1];
				_0x9f6cx4 = ((_0x9f6cx5['start']['getHours']() + _0x9f6cx9) % 24) - _0x9f6cx5['end']['getHours']();
				if (_0x9f6cx4 !== 0) {
					_0x9f6cx7 = _0x9f6cx2['add'](_0x9f6cx7, _0x9f6cx2.HOUR, _0x9f6cx4)
				}
			};
			this['generateTicksValidatorFn'](_0x9f6cx1) && _0x9f6cx8['push']({
				start: _0x9f6cx1
				, end: _0x9f6cx7
			});
			_0x9f6cx1 = _0x9f6cx7
		};
		return _0x9f6cx8
	}
	, getVisibleTickTimeSpan: function () {
		return this['isContinuous']() ? this['visibleTickEnd'] - this['visibleTickStart'] : this['getCount']()
	}
	, getAdjustedDates: function (_0x9f6cx2, _0x9f6cx4, _0x9f6cx3) {
		var _0x9f6cx5 = Ext.ux.Scheduler['util']['Date'];
		_0x9f6cx2 = _0x9f6cx2 || this['getStart']();
		_0x9f6cx4 = _0x9f6cx4 || _0x9f6cx5['add'](_0x9f6cx2, this['mainUnit'], this['defaultSpan']);
		if (this['isWeek']()) {
			if (this['shiftUnit'] === _0x9f6cx5['MONTH']) {
				var _0x9f6cx6 = _0x9f6cx5['add'](_0x9f6cx2, _0x9f6cx5.WEEK, 1);
				var _0x9f6cx7 = _0x9f6cx5['add'](_0x9f6cx4, _0x9f6cx5.WEEK, -1);
				if (!_0x9f6cx4) {
					_0x9f6cx4 = this['getNext'](_0x9f6cx2, this['shiftUnit'], 1);
					_0x9f6cx4 = this['ceilDate'](_0x9f6cx4, false, this['shiftUnit']);
					_0x9f6cx4 = this['ceilDate'](_0x9f6cx4, false, this['mainUnit'])
				};
				if (_0x9f6cx6['getMonth']() !== _0x9f6cx2['getMonth']() && _0x9f6cx7['getMonth']() !== _0x9f6cx4['getMonth']()) {
					return {
						start: _0x9f6cx2
						, end: _0x9f6cx4
					}
				}
			};
			var _0x9f6cx9, _0x9f6cx1, _0x9f6cx8;
			_0x9f6cx9 = this['floorDate'](_0x9f6cx2, false, this['shiftUnit'], 1);
			_0x9f6cx9 = this['floorDate'](_0x9f6cx9, false, this['mainUnit'], 1);
			if (this['autoAdjust']) {
				_0x9f6cx8 = this['getNext'](_0x9f6cx2, this['shiftUnit'], 1);
				_0x9f6cx1 = this['ceilDate'](_0x9f6cx8, false, this['shiftUnit']);
				_0x9f6cx1 = this['ceilDate'](_0x9f6cx1, false, this['mainUnit'])
			}
			else {
				_0x9f6cx1 = this['ceilDate'](_0x9f6cx4, false, this['shiftUnit']);
				_0x9f6cx1 = this['ceilDate'](_0x9f6cx1, false, this['mainUnit'])
			};
			return {
				start: _0x9f6cx9
				, end: _0x9f6cx1
			}
		}
		else {
			return this['autoAdjust'] || _0x9f6cx3 ? {
				start: this['floorDate'](_0x9f6cx2, false, this['autoAdjust'] ? this['mainUnit'] : this['unit'], 1)
				, end: this['ceilDate'](_0x9f6cx4, false, this['autoAdjust'] ? this['mainUnit'] : this['unit'], 1)
			} : {
				start: _0x9f6cx2
				, end: _0x9f6cx4
			}
		}
	}
	, getTickFromDate: function (_0x9f6cx3) {
		var _0x9f6cxc = this['data']['items'];
		var _0x9f6cx8 = _0x9f6cxc['length'] - 1;
		if (_0x9f6cx3.valueOf() < _0x9f6cxc[0]['data']['start'].valueOf() || _0x9f6cx3.valueOf() > _0x9f6cxc[_0x9f6cx8]['data']['end'].valueOf()) {
			return -1
		};
		var _0x9f6cx7, _0x9f6cx6, _0x9f6cx2;
		if (this['isContinuous']()) {
			if (_0x9f6cx3 - _0x9f6cxc[0]['data']['start'] === 0) {
				return this['visibleTickStart']
			};
			if (_0x9f6cx3 - _0x9f6cxc[_0x9f6cx8]['data']['end'] === 0) {
				return this['visibleTickEnd']
			};
			var _0x9f6cxa = this['adjustedStart'];
			var _0x9f6cx1 = this['adjustedEnd'];
			var _0x9f6cx5 = Math['floor'](_0x9f6cxc['length'] * (_0x9f6cx3 - _0x9f6cxa) / (_0x9f6cx1 - _0x9f6cxa));
			if (_0x9f6cx5 > _0x9f6cx8) {
				_0x9f6cx5 = _0x9f6cx8
			};
			_0x9f6cx6 = _0x9f6cx5 === 0 ? _0x9f6cxa : _0x9f6cxc[_0x9f6cx5]['data']['start'];
			_0x9f6cx2 = _0x9f6cx5 == _0x9f6cx8 ? _0x9f6cx1 : _0x9f6cxc[_0x9f6cx5]['data']['end'];
			_0x9f6cx7 = _0x9f6cx5 + (_0x9f6cx3 - _0x9f6cx6) / (_0x9f6cx2 - _0x9f6cx6);
			if (_0x9f6cx7 < this['visibleTickStart'] || _0x9f6cx7 > this['visibleTickEnd']) {
				return -1
			};
			return _0x9f6cx7
		}
		else {
			for (var _0x9f6cx4 = 0; _0x9f6cx4 <= _0x9f6cx8; _0x9f6cx4++) {
				_0x9f6cx2 = _0x9f6cxc[_0x9f6cx4]['data']['end'];
				if (_0x9f6cx3 <= _0x9f6cx2) {
					_0x9f6cx6 = _0x9f6cxc[_0x9f6cx4]['data']['start'];
					_0x9f6cx7 = _0x9f6cx4 + (_0x9f6cx3 > _0x9f6cx6 ? (_0x9f6cx3 - _0x9f6cx6) / (_0x9f6cx2 - _0x9f6cx6) : 0);
					return _0x9f6cx7
				}
			}
		};
		return -1
	}
	, getDateFromTick: function (_0x9f6cx4, _0x9f6cx9) {
		if (_0x9f6cx4 === this['visibleTickEnd']) {
			return this['getEnd']()
		};
		var _0x9f6cx2 = Math['floor'](_0x9f6cx4)
			, _0x9f6cx6 = _0x9f6cx4 - _0x9f6cx2
			, _0x9f6cx8 = this['getAt'](_0x9f6cx2);
		if (!_0x9f6cx8) {
			return null
		};
		var _0x9f6cx7 = _0x9f6cx8['data'];
		var _0x9f6cx1 = _0x9f6cx2 === 0 ? this['adjustedStart'] : _0x9f6cx7['start'];
		var _0x9f6cx3 = (_0x9f6cx2 == this['getCount']() - 1) && this['isContinuous']() ? this['adjustedEnd'] : _0x9f6cx7['end'];
		var _0x9f6cx5 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx1, Ext.ux.Scheduler['util']['Date'].MILLI, _0x9f6cx6 * (_0x9f6cx3 - _0x9f6cx1));
		if (_0x9f6cx9) {
			_0x9f6cx5 = this[_0x9f6cx9 + 'Date'](_0x9f6cx5)
		};
		return _0x9f6cx5
	}
	, getTicks: function () {
		var _0x9f6cx1 = [];
		this['each'](function (_0x9f6cx2) {
			_0x9f6cx1['push'](_0x9f6cx2['data'])
		});
		return _0x9f6cx1
	}
	, getStart: function () {
		var _0x9f6cx1 = this['first']();
		if (_0x9f6cx1) {
			return new Date(_0x9f6cx1['data']['start'])
		};
		return null
	}
	, getEnd: function () {
		var _0x9f6cx1 = this['last']();
		if (_0x9f6cx1) {
			return new Date(_0x9f6cx1['data']['end'])
		};
		return null
	}
	, floorDate: function (_0x9f6cx4, _0x9f6cx6, _0x9f6cx8, _0x9f6cx1) {
		_0x9f6cx6 = _0x9f6cx6 !== false;
		var _0x9f6cx5 = Ext['Date']['clone'](_0x9f6cx4)
			, _0x9f6cx3 = _0x9f6cx6 ? this['getStart']() : null
			, _0x9f6cx13 = _0x9f6cx1 || this['resolutionIncrement']
			, _0x9f6cxa;
		if (_0x9f6cx8) {
			_0x9f6cxa = _0x9f6cx8
		}
		else {
			_0x9f6cxa = _0x9f6cx6 ? this['resolutionUnit'] : this['mainUnit']
		};
		var _0x9f6cx2 = Ext.ux.Scheduler['util']['Date'];
		var _0x9f6cx7 = function (_0x9f6cxd, _0x9f6cxe) {
			return Math['floor'](_0x9f6cxd / _0x9f6cxe) * _0x9f6cxe
		};
		switch (_0x9f6cxa) {
		case _0x9f6cx2['MILLI']:
			if (_0x9f6cx6) {
				_0x9f6cx5 = _0x9f6cx2['add'](_0x9f6cx3, _0x9f6cx2.MILLI, _0x9f6cx7(_0x9f6cx2['getDurationInMilliseconds'](_0x9f6cx3, _0x9f6cx5), _0x9f6cx13))
			};
			break;
		case _0x9f6cx2['SECOND']:
			if (_0x9f6cx6) {
				_0x9f6cx5 = _0x9f6cx2['add'](_0x9f6cx3, _0x9f6cx2.MILLI, _0x9f6cx7(_0x9f6cx2['getDurationInSeconds'](_0x9f6cx3, _0x9f6cx5), _0x9f6cx13) * 1000)
			}
			else {
				_0x9f6cx5['setMilliseconds'](0);
				_0x9f6cx5['setSeconds'](_0x9f6cx7(_0x9f6cx5['getSeconds'](), _0x9f6cx13))
			};
			break;
		case _0x9f6cx2['MINUTE']:
			if (_0x9f6cx6) {
				_0x9f6cx5 = _0x9f6cx2['add'](_0x9f6cx3, _0x9f6cx2.SECOND, _0x9f6cx7(_0x9f6cx2['getDurationInMinutes'](_0x9f6cx3, _0x9f6cx5), _0x9f6cx13) * 60)
			}
			else {
				_0x9f6cx5['setMinutes'](_0x9f6cx7(_0x9f6cx5['getMinutes'](), _0x9f6cx13));
				_0x9f6cx5['setSeconds'](0);
				_0x9f6cx5['setMilliseconds'](0)
			};
			break;
		case _0x9f6cx2['HOUR']:
			if (_0x9f6cx6) {
				_0x9f6cx5 = _0x9f6cx2['add'](_0x9f6cx3, _0x9f6cx2.MINUTE, _0x9f6cx7(_0x9f6cx2['getDurationInHours'](this['getStart'](), _0x9f6cx5), _0x9f6cx13) * 60)
			}
			else {
				_0x9f6cx5['setMinutes'](0);
				_0x9f6cx5['setSeconds'](0);
				_0x9f6cx5['setMilliseconds'](0);
				_0x9f6cx5['setHours'](_0x9f6cx7(_0x9f6cx5['getHours'](), _0x9f6cx13))
			};
			break;
		case _0x9f6cx2['DAY']:
			if (_0x9f6cx6) {
				_0x9f6cx5 = _0x9f6cx2['add'](_0x9f6cx3, _0x9f6cx2.DAY, _0x9f6cx7(_0x9f6cx2['getDurationInDays'](_0x9f6cx3, _0x9f6cx5), _0x9f6cx13))
			}
			else {
				Ext.ux.Scheduler['util']['Date']['clearTime'](_0x9f6cx5);
				_0x9f6cx5['setDate'](_0x9f6cx7(_0x9f6cx5['getDate']() - 1, _0x9f6cx13) + 1)
			};
			break;
		case _0x9f6cx2['WEEK']:
			var _0x9f6cxc = _0x9f6cx5['getDay']() || 7;
			var _0x9f6cx9 = this['weekStartDay'] || 7;
			Ext.ux.Scheduler['util']['Date']['clearTime'](_0x9f6cx5);
			_0x9f6cx5 = _0x9f6cx2['add'](_0x9f6cx5, _0x9f6cx2.DAY, _0x9f6cxc >= _0x9f6cx9 ? _0x9f6cx9 - _0x9f6cxc : -(7 - _0x9f6cx9 + _0x9f6cxc));
			if (_0x9f6cx5['getDay']() !== _0x9f6cx9 && _0x9f6cx5['getHours']() === 23) {
				_0x9f6cx5 = _0x9f6cx2['add'](_0x9f6cx5, _0x9f6cx2.HOUR, 1)
			};
			break;
		case _0x9f6cx2['MONTH']:
			if (_0x9f6cx6) {
				_0x9f6cx5 = _0x9f6cx2['add'](_0x9f6cx3, _0x9f6cx2.MONTH, _0x9f6cx7(_0x9f6cx2['getDurationInMonths'](_0x9f6cx3, _0x9f6cx5), _0x9f6cx13))
			}
			else {
				Ext.ux.Scheduler['util']['Date']['clearTime'](_0x9f6cx5);
				_0x9f6cx5['setDate'](1);
				_0x9f6cx5['setMonth'](_0x9f6cx7(_0x9f6cx5['getMonth'](), _0x9f6cx13))
			};
			break;
		case _0x9f6cx2['QUARTER']:
			Ext.ux.Scheduler['util']['Date']['clearTime'](_0x9f6cx5);
			_0x9f6cx5['setDate'](1);
			_0x9f6cx5 = _0x9f6cx2['add'](_0x9f6cx5, _0x9f6cx2.MONTH, -(_0x9f6cx5['getMonth']() % 3));
			break;
		case _0x9f6cx2['YEAR']:
			if (_0x9f6cx6) {
				_0x9f6cx5 = _0x9f6cx2['add'](_0x9f6cx3, _0x9f6cx2.YEAR, _0x9f6cx7(_0x9f6cx2['getDurationInYears'](_0x9f6cx3, _0x9f6cx5), _0x9f6cx13))
			}
			else {
				var _0x9f6cxb = _0x9f6cx7(_0x9f6cx4['getFullYear']() - 1, _0x9f6cx13) + 1;
				_0x9f6cx5 = new Date(0, 0, 1);
				_0x9f6cx5['setFullYear'](_0x9f6cxb)
			};
			break
		};
		return _0x9f6cx5
	}
	, roundDate: function (_0x9f6cx11, _0x9f6cx2) {
		var _0x9f6cx13 = Ext['Date']['clone'](_0x9f6cx11)
			, _0x9f6cx10 = this['resolutionIncrement'];
		_0x9f6cx2 = _0x9f6cx2 || this['getStart']();
		switch (this['resolutionUnit']) {
		case Ext.ux.Scheduler['util']['Date']['MILLI']:
			var _0x9f6cx4 = Ext.ux.Scheduler['util']['Date']['getDurationInMilliseconds'](_0x9f6cx2, _0x9f6cx13)
				, _0x9f6cx3 = Math['round'](_0x9f6cx4 / _0x9f6cx10) * _0x9f6cx10;
			_0x9f6cx13 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].MILLI, _0x9f6cx3);
			break;
		case Ext.ux.Scheduler['util']['Date']['SECOND']:
			var _0x9f6cx9 = Ext.ux.Scheduler['util']['Date']['getDurationInSeconds'](_0x9f6cx2, _0x9f6cx13)
				, _0x9f6cx12 = Math['round'](_0x9f6cx9 / _0x9f6cx10) * _0x9f6cx10;
			_0x9f6cx13 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].MILLI, _0x9f6cx12 * 1000);
			break;
		case Ext.ux.Scheduler['util']['Date']['MINUTE']:
			var _0x9f6cxe = Ext.ux.Scheduler['util']['Date']['getDurationInMinutes'](_0x9f6cx2, _0x9f6cx13)
				, _0x9f6cx1 = Math['round'](_0x9f6cxe / _0x9f6cx10) * _0x9f6cx10;
			_0x9f6cx13 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].SECOND, _0x9f6cx1 * 60);
			break;
		case Ext.ux.Scheduler['util']['Date']['HOUR']:
			var _0x9f6cxb = Ext.ux.Scheduler['util']['Date']['getDurationInHours'](_0x9f6cx2, _0x9f6cx13)
				, _0x9f6cxc = Math['round'](_0x9f6cxb / _0x9f6cx10) * _0x9f6cx10;
			_0x9f6cx13 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].MINUTE, _0x9f6cxc * 60);
			break;
		case Ext.ux.Scheduler['util']['Date']['DAY']:
			var _0x9f6cx5 = Ext.ux.Scheduler['util']['Date']['getDurationInDays'](_0x9f6cx2, _0x9f6cx13)
				, _0x9f6cx7 = Math['round'](_0x9f6cx5 / _0x9f6cx10) * _0x9f6cx10;
			_0x9f6cx13 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].DAY, _0x9f6cx7);
			break;
		case Ext.ux.Scheduler['util']['Date']['WEEK']:
			Ext.ux.Scheduler['util']['Date']['clearTime'](_0x9f6cx13);
			var _0x9f6cxd = _0x9f6cx13['getDay']() - this['weekStartDay']
				, _0x9f6cx14;
			if (_0x9f6cxd < 0) {
				_0x9f6cxd = 7 + _0x9f6cxd
			};
			if (Math['round'](_0x9f6cxd / 7) === 1) {
				_0x9f6cx14 = 7 - _0x9f6cxd
			}
			else {
				_0x9f6cx14 = -_0x9f6cxd
			};
			_0x9f6cx13 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx13, Ext.ux.Scheduler['util']['Date'].DAY, _0x9f6cx14);
			break;
		case Ext.ux.Scheduler['util']['Date']['MONTH']:
			var _0x9f6cxf = Ext.ux.Scheduler['util']['Date']['getDurationInMonths'](_0x9f6cx2, _0x9f6cx13) + (_0x9f6cx13['getDate']() / Ext['Date']['getDaysInMonth'](_0x9f6cx13))
				, _0x9f6cx8 = Math['round'](_0x9f6cxf / _0x9f6cx10) * _0x9f6cx10;
			_0x9f6cx13 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].MONTH, _0x9f6cx8);
			break;
		case Ext.ux.Scheduler['util']['Date']['QUARTER']:
			Ext.ux.Scheduler['util']['Date']['clearTime'](_0x9f6cx13);
			_0x9f6cx13['setDate'](1);
			_0x9f6cx13 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx13, Ext.ux.Scheduler['util']['Date'].MONTH, 3 - (_0x9f6cx13['getMonth']() % 3));
			break;
		case Ext.ux.Scheduler['util']['Date']['YEAR']:
			var _0x9f6cxa = Ext.ux.Scheduler['util']['Date']['getDurationInYears'](_0x9f6cx2, _0x9f6cx13)
				, _0x9f6cx6 = Math['round'](_0x9f6cxa / _0x9f6cx10) * _0x9f6cx10;
			_0x9f6cx13 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2, Ext.ux.Scheduler['util']['Date'].YEAR, _0x9f6cx6);
			break
		};
		return _0x9f6cx13
	}
	, ceilDate: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx7, _0x9f6cx1) {
		var _0x9f6cx4 = Ext['Date']['clone'](_0x9f6cx5);
		_0x9f6cx2 = _0x9f6cx2 !== false;
		_0x9f6cx1 = _0x9f6cx1 || (_0x9f6cx2 ? this['resolutionIncrement'] : 1);
		var _0x9f6cx6 = false
			, _0x9f6cx3;
		if (_0x9f6cx7) {
			_0x9f6cx3 = _0x9f6cx7
		}
		else {
			_0x9f6cx3 = _0x9f6cx2 ? this['resolutionUnit'] : this['mainUnit']
		};
		switch (_0x9f6cx3) {
		case Ext.ux.Scheduler['util']['Date']['HOUR']:
			if (_0x9f6cx4['getMinutes']() > 0 || _0x9f6cx4['getSeconds']() > 0 || _0x9f6cx4['getMilliseconds']() > 0) {
				_0x9f6cx6 = true
			};
			break;
		case Ext.ux.Scheduler['util']['Date']['DAY']:
			if (_0x9f6cx4['getHours']() > 0 || _0x9f6cx4['getMinutes']() > 0 || _0x9f6cx4['getSeconds']() > 0 || _0x9f6cx4['getMilliseconds']() > 0) {
				_0x9f6cx6 = true
			};
			break;
		case Ext.ux.Scheduler['util']['Date']['WEEK']:
			Ext.ux.Scheduler['util']['Date']['clearTime'](_0x9f6cx4);
			if (_0x9f6cx4['getDay']() !== this['weekStartDay'] || _0x9f6cx5['getTime']() - _0x9f6cx4['getTime']() > 0) {
				_0x9f6cx6 = true
			};
			break;
		case Ext.ux.Scheduler['util']['Date']['MONTH']:
			Ext.ux.Scheduler['util']['Date']['clearTime'](_0x9f6cx4);
			if (_0x9f6cx4['getDate']() !== 1 || _0x9f6cx5['getTime']() - _0x9f6cx4['getTime']() > 0) {
				_0x9f6cx6 = true
			};
			break;
		case Ext.ux.Scheduler['util']['Date']['QUARTER']:
			Ext.ux.Scheduler['util']['Date']['clearTime'](_0x9f6cx4);
			if (_0x9f6cx4['getMonth']() % 3 !== 0 || _0x9f6cx4['getDate']() !== 1 || _0x9f6cx5['getTime']() - _0x9f6cx4['getTime']() > 0) {
				_0x9f6cx6 = true
			};
			break;
		case Ext.ux.Scheduler['util']['Date']['YEAR']:
			Ext.ux.Scheduler['util']['Date']['clearTime'](_0x9f6cx4);
			if (_0x9f6cx4['getMonth']() !== 0 || _0x9f6cx4['getDate']() !== 1 || _0x9f6cx5['getTime']() - _0x9f6cx4['getTime']() > 0) {
				_0x9f6cx6 = true
			};
			break;
		default:
			break
		};
		if (_0x9f6cx6) {
			return this['getNext'](_0x9f6cx4, _0x9f6cx3, _0x9f6cx1)
		}
		else {
			return _0x9f6cx4
		}
	}
	, getNext: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return Ext.ux.Scheduler['util']['Date']['getNext'](_0x9f6cx2, _0x9f6cx5, _0x9f6cx1, this['weekStartDay'])
	}
	, getResolution: function () {
		return {
			unit: this['resolutionUnit']
			, increment: this['resolutionIncrement']
		}
	}
	, setResolution: function (_0x9f6cx2, _0x9f6cx1) {
		this['resolutionUnit'] = _0x9f6cx2;
		this['resolutionIncrement'] = _0x9f6cx1 || 1
	}
	, shift: function (_0x9f6cx1, _0x9f6cx2) {
		this['setTimeSpan'](Ext.ux.Scheduler['util']['Date']['add'](this['getStart'](), _0x9f6cx2, _0x9f6cx1), Ext.ux.Scheduler['util']['Date']['add'](this['getEnd'](), _0x9f6cx2, _0x9f6cx1))
	}
	, shiftNext: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['getShiftIncrement']();
		var _0x9f6cx2 = this['getShiftUnit']();
		this['setTimeSpan'](Ext.ux.Scheduler['util']['Date']['add'](this['getStart'](), _0x9f6cx2, _0x9f6cx1), Ext.ux.Scheduler['util']['Date']['add'](this['getEnd'](), _0x9f6cx2, _0x9f6cx1))
	}
	, shiftPrevious: function (_0x9f6cx1) {
		_0x9f6cx1 = -(_0x9f6cx1 || this['getShiftIncrement']());
		var _0x9f6cx2 = this['getShiftUnit']();
		this['setTimeSpan'](Ext.ux.Scheduler['util']['Date']['add'](this['getStart'](), _0x9f6cx2, _0x9f6cx1), Ext.ux.Scheduler['util']['Date']['add'](this['getEnd'](), _0x9f6cx2, _0x9f6cx1))
	}
	, getShiftUnit: function () {
		return this['shiftUnit'] || this['mainUnit']
	}
	, getShiftIncrement: function () {
		return this['shiftIncrement'] || 1
	}
	, getUnit: function () {
		return this['unit']
	}
	, getIncrement: function () {
		return this['increment']
	}
	, getRowTicks: function () {
		if (this['isWeek']()) {
			var _0x9f6cx5 = this['getStart']();
			var _0x9f6cx1 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx5, this['headerConfig']['middle']['splitUnit'], 1);
			var _0x9f6cx2 = this['findBy'](function (_0x9f6cx3) {
				return _0x9f6cx3['getStartDate']()['getTime']() >= _0x9f6cx1['getTime']()
			});
			if (_0x9f6cx2 === -1) {
				return this['getRange']()
			};
			return this['getRange'](0, _0x9f6cx2 - 1)
		}
	}
	, dateInAxis: function (_0x9f6cx5, _0x9f6cxc) {
		var _0x9f6cxa = false;
		var _0x9f6cx7 = this['getStart']();
		var _0x9f6cx6 = this['getEnd']();
		if (this['isContinuous']()) {
			_0x9f6cxa = _0x9f6cxc ? Ext.ux.Scheduler['util']['Date']['betweenLesserEqual'](_0x9f6cx5, _0x9f6cx7, _0x9f6cx6) : Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0x9f6cx5, _0x9f6cx7, _0x9f6cx6)
		}
		else {
			var _0x9f6cx2 = this['getCount']()
				, _0x9f6cx8, _0x9f6cx1;
			for (var _0x9f6cx3 = 0; _0x9f6cx3 < _0x9f6cx2; _0x9f6cx3++) {
				var _0x9f6cx4 = this['getAt'](_0x9f6cx3);
				_0x9f6cx8 = _0x9f6cx4['data']['start'];
				_0x9f6cx1 = _0x9f6cx4['data']['end'];
				if ((_0x9f6cxc && _0x9f6cx5 <= _0x9f6cx1) || (!_0x9f6cxc && _0x9f6cx5 < _0x9f6cx1)) {
					return _0x9f6cx5 >= _0x9f6cx8
				}
			}
		};
		return _0x9f6cxa
	}
	, timeSpanInAxis: function (_0x9f6cx8, _0x9f6cx5) {
		var _0x9f6cx1 = this['getStart']();
		var _0x9f6cx6 = this['getEnd']();
		var _0x9f6cx4 = _0x9f6cx5 - _0x9f6cx8;
		if (_0x9f6cx4 === 0) {
			return this['dateInAxis'](_0x9f6cx8, true)
		};
		if (this['isContinuous']()) {
			return Ext.ux.Scheduler['util']['Date']['intersectSpans'](_0x9f6cx8, _0x9f6cx5, _0x9f6cx1, _0x9f6cx6)
		}
		else {
			var _0x9f6cx3 = _0x9f6cx8 < _0x9f6cx1 && _0x9f6cx5 > _0x9f6cx6;
			if (_0x9f6cx3) {
				return true
			};
			var _0x9f6cx2 = this['getTickFromDate'](_0x9f6cx8);
			var _0x9f6cx7 = this['getTickFromDate'](_0x9f6cx5);
			return (_0x9f6cx2 !== _0x9f6cx7 && (_0x9f6cx8 < _0x9f6cx6 && _0x9f6cx5 > _0x9f6cx1))
		}
	}
	, isRangeInAxis: function (_0x9f6cx2) {
		var _0x9f6cx5 = _0x9f6cx2['getStartDate']()
			, _0x9f6cx1 = _0x9f6cx2['getEndDate']();
		if (!_0x9f6cx5 || !_0x9f6cx1) {
			return false
		};
		return this['timeSpanInAxis'](_0x9f6cx5, _0x9f6cx1)
	}
	, forEachAuxInterval: function (_0x9f6cx8, _0x9f6cx2, _0x9f6cx1, _0x9f6cx7) {
		_0x9f6cx7 = _0x9f6cx7 || this;
		var _0x9f6cx5 = this['getEnd']()
			, _0x9f6cx6 = this['getStart']()
			, _0x9f6cx4 = 0
			, _0x9f6cx3;
		if (_0x9f6cx6 > _0x9f6cx5) {
			throw new Error('Invalid time axis configuration')
		};
		while (_0x9f6cx6 < _0x9f6cx5) {
			_0x9f6cx3 = Ext.ux.Scheduler['util']['Date']['min'](this['getNext'](_0x9f6cx6, _0x9f6cx8, _0x9f6cx2 || 1), _0x9f6cx5);
			_0x9f6cx1['call'](_0x9f6cx7, _0x9f6cx6, _0x9f6cx3, _0x9f6cx4);
			_0x9f6cx6 = _0x9f6cx3;
			_0x9f6cx4++
		}
	}
	, consumeViewPreset: function (_0x9f6cx1) {
		Ext['apply'](this, {
			unit: _0x9f6cx1['getBottomHeader']()['unit']
			, increment: _0x9f6cx1['getBottomHeader']()['increment'] || 1
			, resolutionUnit: _0x9f6cx1['timeResolution']['unit']
			, resolutionIncrement: _0x9f6cx1['timeResolution']['increment']
			, mainUnit: _0x9f6cx1['getMainHeader']()['unit']
			, shiftUnit: _0x9f6cx1['shiftUnit']
			, shiftIncrement: _0x9f6cx1['shiftIncrement'] || 1
			, defaultSpan: _0x9f6cx1['defaultSpan'] || 1
			, presetName: _0x9f6cx1['name']
			, headerConfig: _0x9f6cx1['headerConfig']
		})
	}
});
Ext.define('Ext.ux.Scheduler.preset.ViewPreset', {
	requires: ['Ext.ux.Scheduler.util.Date']
	, name: null
	, rowHeight: 24
	, timeColumnWidth: 50
	, timeRowHeight: null
	, timeAxisColumnWidth: null
	, displayDateFormat: 'G:i'
	, shiftUnit: 'HOUR'
	, shiftIncrement: 1
	, defaultSpan: 12
	, timeResolution: null
	, headerConfig: null
	, columnLinesFor: 'middle'
	, headers: null
	, mainHeader: 0
	, ptype: ''
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1);
		this['normalizeUnits']()
	}
	, normalizeUnits: function () {
		var _0x9f6cx1 = this['headerConfig'];
		var _0x9f6cx3 = Ext.ux.Scheduler['util']['Date'];
		for (var _0x9f6cx4 in _0x9f6cx1) {
			if (_0x9f6cx1['hasOwnProperty'](_0x9f6cx4)) {
				if (_0x9f6cx3[_0x9f6cx1[_0x9f6cx4]['unit']]) {
					_0x9f6cx1[_0x9f6cx4]['unit'] = _0x9f6cx3[_0x9f6cx1[_0x9f6cx4]['unit']['toUpperCase']()]
				};
				if (_0x9f6cx3[_0x9f6cx1[_0x9f6cx4]['splitUnit']]) {
					_0x9f6cx1[_0x9f6cx4]['splitUnit'] = _0x9f6cx3[_0x9f6cx1[_0x9f6cx4]['splitUnit']['toUpperCase']()]
				}
			}
		};
		var _0x9f6cx2 = this['timeResolution'];
		if (_0x9f6cx2 && _0x9f6cx3[_0x9f6cx2['unit']]) {
			_0x9f6cx2['unit'] = _0x9f6cx3[_0x9f6cx2['unit']['toUpperCase']()]
		};
		var _0x9f6cx5 = this['shiftUnit'];
		if (_0x9f6cx5 && _0x9f6cx3[_0x9f6cx5]) {
			this['shiftUnit'] = _0x9f6cx3[_0x9f6cx5['toUpperCase']()]
		}
	}
	, getHeaders: function () {
		if (this['headers']) {
			return this['headers']
		};
		var _0x9f6cx1 = this['headerConfig'];
		this['mainHeader'] = _0x9f6cx1['top'] ? 1 : 0;
		return this['headers'] = []['concat'](_0x9f6cx1['top'] || [], _0x9f6cx1['middle'] || [], _0x9f6cx1['bottom'] || [])
	}
	, getMainHeader: function () {
		return this['getHeaders']()[this['mainHeader']]
	}
	, getBottomHeader: function () {
		var _0x9f6cx1 = this['getHeaders']();
		return _0x9f6cx1[_0x9f6cx1['length'] - 1]
	}
	, clone: function () {
		var _0x9f6cx1 = {};
		var _0x9f6cx2 = this;
		Ext['Array']['each'](['rowHeight', 'timeColumnWidth', 'timeRowHeight', 'timeAxisColumnWidth', 'displayDateFormat', 'shiftUnit', 'shiftIncrement', 'defaultSpan', 'timeResolution', 'headerConfig'], function (_0x9f6cx5) {
			_0x9f6cx1[_0x9f6cx5] = _0x9f6cx2[_0x9f6cx5]
		});
		return new this['self'](Ext['clone'](_0x9f6cx1))
	}
	, isValid: function () {
		var _0x9f6cx3 = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cx2 = true
			, _0x9f6cx5 = Ext.ux.Scheduler['util']['Date']['units']
			, _0x9f6cx1 = {};
		for (var _0x9f6cx4 in this['headerConfig']) {
			if (this['headerConfig']['hasOwnProperty'](_0x9f6cx4)) {
				_0x9f6cx1[_0x9f6cx4] = true;
				_0x9f6cx2 = _0x9f6cx2 && Ext['Array']['indexOf'](_0x9f6cx5, this['headerConfig'][_0x9f6cx4]['unit']) >= 0
			}
		};
		if (!(this['columnLinesFor'] in _0x9f6cx1)) {
			this['columnLinesFor'] = 'middle'
		};
		if (this['timeResolution']) {
			_0x9f6cx2 = _0x9f6cx2 && Ext['Array']['indexOf'](_0x9f6cx5, this['timeResolution']['unit']) >= 0
		};
		if (this['shiftUnit']) {
			_0x9f6cx2 = _0x9f6cx2 && Ext['Array']['indexOf'](_0x9f6cx5, this['shiftUnit']) >= 0
		};
		return _0x9f6cx2
	}
});
Ext.define('Ext.ux.Scheduler.preset.Manager', {
	extend: 'Ext.util.MixedCollection'
	, requires: ['Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.preset.ViewPreset']
	, mixins: ['Ext.ux.Scheduler.mixin.Localizable']
	, singleton: true
	, defaultPresets: {
		secondAndMinute: {
			timeColumnWidth: 30
			, rowHeight: 24
			, resourceColumnWidth: 100
			, displayDateFormat: 'G:i:s'
			, shiftIncrement: 10
			, shiftUnit: 'MINUTE'
			, defaultSpan: 24
			, timeResolution: {
				unit: 'SECOND'
				, increment: 5
			}
			, headerConfig: {
				middle: {
					unit: 'SECOND'
					, increment: 10
					, align: 'center'
					, dateFormat: 's'
				}
				, top: {
					unit: 'MINUTE'
					, align: 'center'
					, dateFormat: 'D, d g:iA'
				}
			}
		}
		, minuteAndHour: {
			timeColumnWidth: 100
			, rowHeight: 24
			, resourceColumnWidth: 100
			, displayDateFormat: 'G:i'
			, shiftIncrement: 1
			, shiftUnit: 'HOUR'
			, defaultSpan: 24
			, timeResolution: {
				unit: 'MINUTE'
				, increment: 30
			}
			, headerConfig: {
				middle: {
					unit: 'MINUTE'
					, increment: '30'
					, align: 'center'
					, dateFormat: 'i'
				}
				, top: {
					unit: 'HOUR'
					, align: 'center'
					, dateFormat: 'D, gA/d'
				}
			}
		}
		, hourAndDay: {
			timeColumnWidth: 60
			, rowHeight: 24
			, resourceColumnWidth: 100
			, displayDateFormat: 'G:i'
			, shiftIncrement: 1
			, shiftUnit: 'DAY'
			, defaultSpan: 24
			, timeResolution: {
				unit: 'MINUTE'
				, increment: 30
			}
			, headerConfig: {
				middle: {
					unit: 'HOUR'
					, align: 'center'
					, dateFormat: 'G:i'
				}
				, top: {
					unit: 'DAY'
					, align: 'center'
					, dateFormat: 'D d/m'
				}
			}
		}
		, dayAndWeek: {
			timeColumnWidth: 100
			, rowHeight: 24
			, resourceColumnWidth: 100
			, displayDateFormat: 'Y-m-d G:i'
			, shiftUnit: 'DAY'
			, shiftIncrement: 1
			, defaultSpan: 5
			, timeResolution: {
				unit: 'HOUR'
				, increment: 1
			}
			, headerConfig: {
				middle: {
					unit: 'DAY'
					, align: 'center'
					, dateFormat: 'D d M'
				}
				, top: {
					unit: 'WEEK'
					, align: 'center'
					, renderer: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
						return Ext.ux.Scheduler['util']['Date']['getShortNameOfUnit']('WEEK') + '.' + Ext['Date']['format'](_0x9f6cx5, 'W M Y')
					}
				}
			}
		}
		, weekAndDay: {
			timeColumnWidth: 100
			, rowHeight: 24
			, resourceColumnWidth: 100
			, displayDateFormat: 'Y-m-d'
			, shiftUnit: 'WEEK'
			, shiftIncrement: 1
			, defaultSpan: 1
			, timeResolution: {
				unit: 'DAY'
				, increment: 1
			}
			, headerConfig: {
				bottom: {
					unit: 'DAY'
					, align: 'center'
					, increment: 1
					, dateFormat: 'd/m'
				}
				, middle: {
					unit: 'WEEK'
					, dateFormat: 'D d M'
				}
			}
		}
		, weekAndMonth: {
			timeColumnWidth: 100
			, rowHeight: 24
			, resourceColumnWidth: 100
			, displayDateFormat: 'Y-m-d'
			, shiftUnit: 'WEEK'
			, shiftIncrement: 5
			, defaultSpan: 6
			, timeResolution: {
				unit: 'DAY'
				, increment: 1
			}
			, headerConfig: {
				middle: {
					unit: 'WEEK'
					, align: 'center'
					, renderer: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
						return Ext['Date']['format'](_0x9f6cx5, 'd M')
					}
				}
				, top: {
					unit: 'MONTH'
					, align: 'center'
					, dateFormat: 'M Y'
				}
			}
		}
		, monthAndYear: {
			timeColumnWidth: 110
			, rowHeight: 24
			, resourceColumnWidth: 100
			, displayDateFormat: 'Y-m-d'
			, shiftIncrement: 3
			, shiftUnit: 'MONTH'
			, defaultSpan: 12
			, timeResolution: {
				unit: 'DAY'
				, increment: 1
			}
			, headerConfig: {
				middle: {
					unit: 'MONTH'
					, align: 'center'
					, dateFormat: 'M Y'
				}
				, top: {
					unit: 'YEAR'
					, align: 'center'
					, dateFormat: 'Y'
				}
			}
		}
		, year: {
			timeColumnWidth: 100
			, rowHeight: 24
			, resourceColumnWidth: 100
			, displayDateFormat: 'Y-m-d'
			, shiftUnit: 'YEAR'
			, shiftIncrement: 1
			, defaultSpan: 1
			, timeResolution: {
				unit: 'MONTH'
				, increment: 1
			}
			, headerConfig: {
				middle: {
					unit: 'QUARTER'
					, align: 'center'
					, renderer: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
						return Ext['String']['format'](Ext.ux.Scheduler['util']['Date']['getShortNameOfUnit']('QUARTER')['toUpperCase']() + '{0}', Math['floor'](_0x9f6cx5['getMonth']() / 3) + 1)
					}
				}
				, top: {
					unit: 'YEAR'
					, align: 'center'
					, dateFormat: 'Y'
				}
			}
		}
		, manyYears: {
			timeColumnWidth: 50
			, rowHeight: 24
			, resourceColumnWidth: 100
			, displayDateFormat: 'Y-m-d'
			, shiftUnit: 'YEAR'
			, shiftIncrement: 1
			, defaultSpan: 1
			, timeResolution: {
				unit: 'YEAR'
				, increment: 1
			}
			, headerConfig: {
				middle: {
					unit: 'YEAR'
					, align: 'center'
					, dateFormat: 'Y'
					, increment: 5
				}
				, bottom: {
					unit: 'YEAR'
					, align: 'center'
					, dateFormat: 'y'
					, increment: 1
				}
			}
		}
		, weekAndDayLetter: {
			timeColumnWidth: 20
			, rowHeight: 24
			, resourceColumnWidth: 100
			, displayDateFormat: 'Y-m-d'
			, shiftUnit: 'WEEK'
			, shiftIncrement: 1
			, defaultSpan: 10
			, timeResolution: {
				unit: 'DAY'
				, increment: 1
			}
			, headerConfig: {
				bottom: {
					unit: 'DAY'
					, align: 'center'
					, renderer: function (_0x9f6cx1) {
						return Ext['Date']['dayNames'][_0x9f6cx1['getDay']()]['substring'](0, 1)
					}
					, verticalColumnWidth: 25
				}
				, middle: {
					unit: 'WEEK'
					, dateFormat: 'D d M Y'
					, verticalColumnWidth: 115
				}
			}
		}
		, weekDateAndMonth: {
			timeColumnWidth: 30
			, rowHeight: 24
			, resourceColumnWidth: 100
			, displayDateFormat: 'Y-m-d'
			, shiftUnit: 'WEEK'
			, shiftIncrement: 1
			, defaultSpan: 10
			, timeResolution: {
				unit: 'DAY'
				, increment: 1
			}
			, headerConfig: {
				middle: {
					unit: 'WEEK'
					, align: 'center'
					, dateFormat: 'd'
				}
				, top: {
					unit: 'MONTH'
					, dateFormat: 'Y F'
				}
			}
		}
		, day: {
			timeRowHeight: 40
			, displayDateFormat: 'G:i'
			, shiftIncrement: 1
			, shiftUnit: 'DAY'
			, defaultSpan: 1
			, timeResolution: {
				unit: 'MINUTE'
				, increment: 30
			}
			, columnLinesFor: 'bottom'
			, headerConfig: {
				bottom: {
					unit: 'HOUR'
					, align: 'center'
					, renderer: function (_0x9f6cx1) {
						return Ext['String']['format']('<div class="sch-calendarcolumn-ct"><span class="sch-calendarcolumn-hours">{0}</span><span class="sch-calendarcolumn-minutes">{1}</span></div>', Ext['Date']['format'](_0x9f6cx1, 'H'), Ext['Date']['format'](_0x9f6cx1, 'i'))
					}
				}
				, middle: {
					unit: 'DAY'
					, align: 'center'
					, dateFormat: 'D d/m'
					, splitUnit: 'DAY'
				}
			}
		}
		, week: {
			timeRowHeight: 40
			, displayDateFormat: 'G:i'
			, shiftIncrement: 1
			, shiftUnit: 'WEEK'
			, defaultSpan: 24
			, timeResolution: {
				unit: 'MINUTE'
				, increment: 30
			}
			, columnLinesFor: 'bottom'
			, headerConfig: {
				bottom: {
					unit: 'HOUR'
					, align: 'center'
					, dateFormat: 'H:i'
					, renderer: function (_0x9f6cx1) {
						return Ext['String']['format']('<div class="sch-calendarcolumn-ct"><span class="sch-calendarcolumn-hours">{0}</span><span class="sch-calendarcolumn-minutes">{1}</span></div>', Ext['Date']['format'](_0x9f6cx1, 'H'), Ext['Date']['format'](_0x9f6cx1, 'i'))
					}
				}
				, middle: {
					unit: 'WEEK'
					, align: 'center'
					, dateFormat: 'D d'
					, splitUnit: 'DAY'
				}
			}
		}
	}
	, constructor: function () {
		this['callParent'](arguments);
		this['registerDefaults']()
	}
	, onLocalized: function () {
		var _0x9f6cx1 = this;
		this['eachKey'](function (_0x9f6cx5, _0x9f6cx3) {
			if (_0x9f6cx1['l10n'][_0x9f6cx5]) {
				var _0x9f6cx2 = _0x9f6cx1.L(_0x9f6cx5);
				_0x9f6cx2['displayDateFormat'] && (_0x9f6cx3['displayDateFormat'] = _0x9f6cx2['displayDateFormat']);
				_0x9f6cx2['middleDateFormat'] && (_0x9f6cx3['headerConfig']['middle']['dateFormat'] = _0x9f6cx2['middleDateFormat']);
				_0x9f6cx2['topDateFormat'] && (_0x9f6cx3['headerConfig']['top']['dateFormat'] = _0x9f6cx2['topDateFormat']);
				_0x9f6cx2['bottomDateFormat'] && (_0x9f6cx3['headerConfig']['bottom']['dateFormat'] = _0x9f6cx2['bottomDateFormat'])
			}
		})
	}
	, registerPreset: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1['name'] = _0x9f6cx2;
		var _0x9f6cx5 = new Ext.ux.Scheduler['preset'].ViewPreset(_0x9f6cx1);
		if (_0x9f6cx5['isValid']()) {
			if (this['containsKey'](_0x9f6cx2)) {
				this['removeAtKey'](_0x9f6cx2)
			};
			this['add'](_0x9f6cx2, _0x9f6cx5)
		}
		else {
			throw 'Invalid preset, please check your configuration'
		}
	}
	, getPreset: function (_0x9f6cx1) {
		return this['get'](_0x9f6cx1)
	}
	, deletePreset: function (_0x9f6cx1) {
		this['removeAtKey'](_0x9f6cx1)
	}
	, registerDefaults: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = this['defaultPresets'];
		for (var _0x9f6cx5 in _0x9f6cx1) {
			_0x9f6cx2['registerPreset'](_0x9f6cx5, _0x9f6cx1[_0x9f6cx5])
		}
	}
});
Ext.define('Ext.ux.Scheduler.view.model.TimeAxis', {
	extend: 'Ext.util.Observable'
	, requires: ['Ext.Date', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.preset.Manager']
	, timeAxis: null
	, availableWidth: 0
	, tickWidth: 100
	, snapToIncrement: false
	, forceFit: false
	, headerConfig: null
	, headers: null
	, mainHeader: 0
	, calendar: null
	, timeAxisColumnWidth: null
	, resourceColumnWidth: null
	, weekViewColumnWidth: null
	, calendarColumnDates: null
	, headersDatesCache: null
	, timeColumnWidth: null
	, rowHeightHorizontal: null
	, rowHeightVertical: null
	, mode: 'horizontal'
	, suppressFit: false
	, refCount: 0
	, columnConfig: {}
	, viewPreset: null
	, columnLinesFor: 'middle'
	, eventStore: null
	, originalTickWidth: null
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx5 = this;
		Ext['apply'](this, _0x9f6cx1);
		_0x9f6cx5['headersDatesCache'] = {};
		if (this['viewPreset']) {
			if (this['viewPreset'] instanceof Ext.ux.Scheduler['preset']['ViewPreset']) {
				this['consumeViewPreset'](this['viewPreset'])
			}
			else {
				var _0x9f6cx2 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](this['viewPreset']);
				_0x9f6cx2 && this['consumeViewPreset'](_0x9f6cx2)
			}
		};
		_0x9f6cx5['timeAxis']['on']('reconfigure', _0x9f6cx5['onTimeAxisReconfigure'], _0x9f6cx5);
		this['callParent'](arguments)
	}
	, isHorizontal: function () {
		return this['mode'] === 'horizontal'
	}
	, isVertical: function () {
		return this['mode'] === 'vertical'
	}
	, isWeek: function () {
		return this['mode'] === 'weekview'
	}
	, destroy: function () {
		this['timeAxis']['un']('reconfigure', this['onTimeAxisReconfigure'], this)
	}
	, onTimeAxisReconfigure: function (_0x9f6cx1, _0x9f6cx2) {
		if (!_0x9f6cx2) {
			this['update']()
		}
	}
	, reconfigure: function (_0x9f6cx1) {
		this['headers'] = null;
		Ext['apply'](this, _0x9f6cx1);
		var _0x9f6cx2;
		if (this['isHorizontal']()) {
			_0x9f6cx2 = this['timeColumnWidth']
		}
		else {
			_0x9f6cx2 = this['rowHeightVertical']
		};
		this['setTickWidth'](_0x9f6cx2);
		this['fireEvent']('reconfigure', this)
	}
	, getColumnConfig: function () {
		return this['columnConfig']
	}
	, update: function (_0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx4 = this['timeAxis']
			, _0x9f6cx5 = this['headerConfig'];
		this['availableWidth'] = Math['max'](_0x9f6cx3 || this['availableWidth'], 0);
		if (!Ext['isNumber'](this['availableWidth'])) {
			throw new Error('Invalid available width provided to Ext.ux.Scheduler.view.model.TimeAxis')
		};
		if (this['forceFit'] && this['availableWidth'] <= 0) {
			return
		};
		this['columnConfig'] = {};
		for (var _0x9f6cx7 in _0x9f6cx5) {
			if (_0x9f6cx5[_0x9f6cx7]['cellGenerator']) {
				this['columnConfig'][_0x9f6cx7] = _0x9f6cx5[_0x9f6cx7]['cellGenerator']['call'](this, _0x9f6cx4['getStart'](), _0x9f6cx4['getEnd']())
			}
			else {
				this['columnConfig'][_0x9f6cx7] = this['createHeaderRow'](_0x9f6cx7, _0x9f6cx5[_0x9f6cx7])
			}
		};
		var _0x9f6cx1 = this['calculateTickWidth'](this['originalTickWidth']);
		if (!Ext['isNumber'](_0x9f6cx1) || _0x9f6cx1 <= 0) {
			throw new Error('Invalid column width calculated in Ext.ux.Scheduler.view.model.TimeAxis')
		};
		this['updateTickWidth'](_0x9f6cx1);
		if (!_0x9f6cx2) {
			this['fireEvent']('update', this)
		}
	}
	, updateCalendarColumnDates: function (_0x9f6cx2) {
		this['calendarColumnDates'] = [];
		for (var _0x9f6cx1 = 0; _0x9f6cx1 < _0x9f6cx2['length']; _0x9f6cx1++) {
			var _0x9f6cx5 = _0x9f6cx2[_0x9f6cx1];
			this['calendarColumnDates']['push']([_0x9f6cx5['start'], _0x9f6cx5['end']])
		}
	}
	, getCalendarColumnDates: function () {
		return this['calendarColumnDates']
	}
	, createHeaderRow: function (_0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx5 = []
			, _0x9f6cx4 = this
			, _0x9f6cx7 = _0x9f6cx3['align']
			, _0x9f6cx2 = Ext['Date']['clearTime'](new Date());
		_0x9f6cx4['headersDatesCache'][_0x9f6cx1] = {};
		_0x9f6cx4['forEachInterval'](_0x9f6cx1, function (_0x9f6cxa, _0x9f6cx6, _0x9f6cx8) {
			var _0x9f6cxc = {
				align: _0x9f6cx7
				, start: _0x9f6cxa
				, end: _0x9f6cx6
				, headerCls: ''
			};
			_0x9f6cx4['headersDatesCache'][_0x9f6cx1][_0x9f6cxa['getTime']()] = 1;
			if (_0x9f6cx3['renderer']) {
				_0x9f6cxc['header'] = _0x9f6cx3['renderer']['call'](_0x9f6cx3['scope'] || _0x9f6cx4, _0x9f6cxa, _0x9f6cx6, _0x9f6cxc, _0x9f6cx8, _0x9f6cx4['eventStore'])
			}
			else {
				_0x9f6cxc['header'] = Ext['Date']['format'](_0x9f6cxa, _0x9f6cx3['dateFormat'])
			};
			if (_0x9f6cx3['unit'] === Ext.ux.Scheduler['util']['Date']['DAY'] && (!_0x9f6cx3['increment'] || _0x9f6cx3['increment'] === 1)) {
				_0x9f6cxc['headerCls'] += ' sch-dayheadercell-' + _0x9f6cxa['getDay']();
				if (this['calendar'] && this['calendar']['isWeekend'](_0x9f6cxa)) {
					_0x9f6cxc['headerCls'] += ' sch-dayheadercell-nonworking'
				};
				if (Ext['Date']['clearTime'](_0x9f6cxa, true) - _0x9f6cx2 === 0) {
					_0x9f6cxc['headerCls'] += ' sch-dayheadercell-today'
				}
			};
			_0x9f6cx5['push'](_0x9f6cxc)
		});
		return _0x9f6cx5
	}
	, getDistanceBetweenDates: function (_0x9f6cx2, _0x9f6cx1) {
		return Math['round'](this['getPositionFromDate'](_0x9f6cx1, true) - this['getPositionFromDate'](_0x9f6cx2))
	}
	, getPositionFromDate: function (_0x9f6cx4, _0x9f6cx3) {
		var _0x9f6cx9 = -1;
		if (this['isWeek']()) {
			var _0x9f6cx1 = this['rowHeightVertical'];
			var _0x9f6cx5 = this['getHeaders']();
			var _0x9f6cx2 = this['timeAxis']['getStart']();
			var _0x9f6cx6 = Ext.ux.Scheduler['util']['Date'];
			var _0x9f6cx8 = _0x9f6cx6['mergeDates'](_0x9f6cx2, _0x9f6cx4, _0x9f6cx5[1]['unit']);
			_0x9f6cx9 = _0x9f6cx6['getDurationInUnit'](_0x9f6cx2, _0x9f6cx8, _0x9f6cx5[1]['unit'], true) * _0x9f6cx1;
			if (_0x9f6cx9 === 0 && _0x9f6cx3) {
				_0x9f6cx9 = this['calendarRowsAmount'] * _0x9f6cx1
			}
		}
		else {
			var _0x9f6cx7 = this['timeAxis']['getTickFromDate'](_0x9f6cx4);
			if (_0x9f6cx7 >= 0) {
				_0x9f6cx9 = this['getTickWidth']() * (_0x9f6cx7 - this['timeAxis']['visibleTickStart'])
			}
		};
		return Math['round'](_0x9f6cx9)
	}
	, getDateFromPosition: function (_0x9f6cx6, _0x9f6cxa) {
		if (this['isWeek']()) {
			var _0x9f6cx2 = this['getCalendarColumnDates']();
			if (!_0x9f6cx2) {
				return null
			};
			var _0x9f6cx8 = Math['min'](Math['floor'](Math['max'](_0x9f6cx6[0], 0) / this['weekViewColumnWidth']), _0x9f6cx2['length'] - 1)
				, _0x9f6cx9 = _0x9f6cx2[_0x9f6cx8][0]
				, _0x9f6cx4 = this['timeAxis']['first']()
				, _0x9f6cx5 = (_0x9f6cx4['get']('end') - _0x9f6cx4['get']('start')) / this['rowHeightVertical']
				, _0x9f6cx7 = Ext.ux.Scheduler['util']['Date']
				, _0x9f6cxc = _0x9f6cx7['add'](_0x9f6cx9, _0x9f6cx7.MILLI, Math['round'](_0x9f6cx6[1] * _0x9f6cx5));
			if (_0x9f6cxa) {
				_0x9f6cxc = this['timeAxis'][_0x9f6cxa + 'Date'](_0x9f6cxc)
			};
			return _0x9f6cxc
		}
		else {
			var _0x9f6cx3 = _0x9f6cx6 / this['getTickWidth']() + this['timeAxis']['visibleTickStart']
				, _0x9f6cx1 = this['timeAxis']['getCount']();
			if (_0x9f6cx3 < 0 || _0x9f6cx3 > _0x9f6cx1) {
				return null
			};
			return this['timeAxis']['getDateFromTick'](_0x9f6cx3, _0x9f6cxa)
		}
	}
	, getSingleUnitInPixels: function (_0x9f6cx1) {
		return Ext.ux.Scheduler['util']['Date']['getUnitToBaseUnitRatio'](this['timeAxis']['getUnit'](), _0x9f6cx1) * this['getTickWidth']() / this['timeAxis']['increment']
	}
	, getSnapPixelAmount: function () {
		if (this['snapToIncrement']) {
			var _0x9f6cx1 = this['timeAxis']['getResolution']();
			return (_0x9f6cx1['increment'] || 1) * this['getSingleUnitInPixels'](_0x9f6cx1['unit'])
		}
		else {
			return 1
		}
	}
	, getTickWidth: function () {
		return this['tickWidth']
	}
	, setTickWidth: function (_0x9f6cx2, _0x9f6cx1) {
		this['originalTickWidth'] = _0x9f6cx2;
		this['updateTickWidth'](_0x9f6cx2);
		this['update'](null, _0x9f6cx1)
	}
	, updateTickWidth: function (_0x9f6cx1) {
		this['tickWidth'] = _0x9f6cx1;
		this[this['isHorizontal']() ? 'timeColumnWidth' : 'rowHeightVertical'] = _0x9f6cx1
	}
	, getTotalWidth: function () {
		return Math['round'](this['getTickWidth']() * this['timeAxis']['getVisibleTickTimeSpan']())
	}
	, calculateTickWidth: function (_0x9f6cx4) {
		var _0x9f6cxa = this['forceFit'];
		var _0x9f6cx8 = this['timeAxis'];
		var _0x9f6cx5 = 0
			, _0x9f6cx6 = _0x9f6cx8['getUnit']()
			, _0x9f6cxc = Number['MAX_VALUE']
			, _0x9f6cx3 = Ext.ux.Scheduler['util']['Date'];
		if (this['snapToIncrement']) {
			var _0x9f6cx7 = _0x9f6cx8['getResolution']();
			_0x9f6cxc = _0x9f6cx3['getUnitToBaseUnitRatio'](_0x9f6cx6, _0x9f6cx7['unit']) * _0x9f6cx7['increment']
		}
		else {
			var _0x9f6cx9 = _0x9f6cx3['getMeasuringUnit'](_0x9f6cx6);
			_0x9f6cxc = Math['min'](_0x9f6cxc, _0x9f6cx3['getUnitToBaseUnitRatio'](_0x9f6cx6, _0x9f6cx9))
		};
		if (!this['suppressFit']) {
			var _0x9f6cx13 = this['isWeek']() ? _0x9f6cx8['endTime'] - _0x9f6cx8['startTime'] : _0x9f6cx8['getVisibleTickTimeSpan']()
				, _0x9f6cx2 = Math[_0x9f6cxa ? 'floor' : 'round'](this['getAvailableWidth']() / _0x9f6cx13);
			_0x9f6cx5 = (_0x9f6cxa || _0x9f6cx4 < _0x9f6cx2) ? _0x9f6cx2 : _0x9f6cx4;
			if (_0x9f6cxc > 0 && (!_0x9f6cxa || _0x9f6cxc < 1)) {
				var _0x9f6cx1 = Ext['versions']['touch'] && _0x9f6cxa ? 'ceil' : (_0x9f6cxa ? 'floor' : 'round');
				_0x9f6cx5 = Math['round'](Math['max'](1, Math[_0x9f6cx1](_0x9f6cxc * _0x9f6cx5)) / _0x9f6cxc)
			}
		}
		else {
			_0x9f6cx5 = _0x9f6cx4
		};
		return _0x9f6cx5
	}
	, getAvailableWidth: function () {
		return this['availableWidth']
	}
	, setAvailableWidth: function (_0x9f6cx1) {
		this['availableWidth'] = Math['max'](0, _0x9f6cx1);
		if (this['availableWidth'] > 0) {
			var _0x9f6cx2 = this['calculateTickWidth'](this['originalTickWidth']);
			if (_0x9f6cx2 > 0 && _0x9f6cx2 !== this['getTickWidth']()) {
				this['update']()
			}
		}
	}
	, fitToAvailableWidth: function (_0x9f6cx1) {
		var _0x9f6cx2 = Math['floor'](this['availableWidth'] / this['timeAxis']['getVisibleTickTimeSpan']());
		this['setTickWidth'](_0x9f6cx2, _0x9f6cx1)
	}
	, setForceFit: function (_0x9f6cx1) {
		if (_0x9f6cx1 !== this['forceFit']) {
			this['forceFit'] = _0x9f6cx1;
			this['update']()
		}
	}
	, setSnapToIncrement: function (_0x9f6cx1) {
		if (_0x9f6cx1 !== this['snapToIncrement']) {
			this['snapToIncrement'] = _0x9f6cx1;
			this['update']()
		}
	}
	, getViewRowHeight: function () {
		var _0x9f6cx1 = this['isHorizontal']() ? this['rowHeightHorizontal'] : this['rowHeightVertical'];
		if (!_0x9f6cx1) {
			throw new Error('rowHeight info not available')
		};
		return _0x9f6cx1
	}
	, setViewRowHeight: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = 'rowHeight' + Ext['String']['capitalize'](this['mode']);
		if (this[_0x9f6cx2] != _0x9f6cx5) {
			this[_0x9f6cx2] = _0x9f6cx5;
			if (this['isHorizontal']()) {
				if (!_0x9f6cx1) {
					this['fireEvent']('update', this)
				}
			}
			else {
				this['setTickWidth'](_0x9f6cx5, _0x9f6cx1)
			}
		}
	}
	, setViewColumnWidth: function (_0x9f6cx2, _0x9f6cx1) {
		if (this['isHorizontal']()) {
			this['setTickWidth'](_0x9f6cx2, _0x9f6cx1)
		}
		else {
			if (this['isVertical']()) {
				this['resourceColumnWidth'] = _0x9f6cx2
			}
			else {
				if (this['isWeek']()) {
					this['weekViewColumnWidth'] = _0x9f6cx2
				}
			}
		};
		if (!_0x9f6cx1) {
			this['fireEvent']('columnwidthchange', this, _0x9f6cx2)
		}
	}
	, getHeaders: function () {
		if (this['headers']) {
			return this['headers']
		};
		var _0x9f6cx1 = this['headerConfig'];
		this['mainHeader'] = _0x9f6cx1['top'] ? 1 : 0;
		return this['headers'] = []['concat'](_0x9f6cx1['top'] || [], _0x9f6cx1['middle'] || [], _0x9f6cx1['bottom'] || [])
	}
	, getMainHeader: function () {
		return this['getHeaders']()[this['mainHeader']]
	}
	, getBottomHeader: function () {
		var _0x9f6cx1 = this['getHeaders']();
		return _0x9f6cx1[_0x9f6cx1['length'] - 1]
	}
	, getLowestHeader: function () {
		return 'bottom' in this['headerConfig'] ? 'bottom' : 'middle'
	}
	, getMajorHeaderName: function () {
		var _0x9f6cx1 = this['headerConfig'];
		if (_0x9f6cx1['bottom']) {
			return 'middle'
		};
		if (_0x9f6cx1['top']) {
			return 'top'
		};
		return null
	}
	, isMajorTick: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getMajorHeaderName']();
		return _0x9f6cx2 && this['headersDatesCache'][_0x9f6cx2] && this['headersDatesCache'][_0x9f6cx2][_0x9f6cx1['getTime']()] || false
	}
	, forEachInterval: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx3) {
		_0x9f6cx3 = _0x9f6cx3 || this;
		var _0x9f6cx5 = this['headerConfig'];
		if (!_0x9f6cx5) {
			return
		};
		if (_0x9f6cx2 === 'top' || (_0x9f6cx2 === 'middle' && _0x9f6cx5['bottom'])) {
			var _0x9f6cx4 = _0x9f6cx5[_0x9f6cx2];
			this['timeAxis']['forEachAuxInterval'](_0x9f6cx4['unit'], _0x9f6cx4['increment'], _0x9f6cx1, _0x9f6cx3)
		}
		else {
			this['timeAxis']['each'](function (_0x9f6cx6, _0x9f6cx7) {
				return _0x9f6cx1['call'](_0x9f6cx3, _0x9f6cx6['data']['start'], _0x9f6cx6['data']['end'], _0x9f6cx7)
			})
		}
	}
	, forEachMainInterval: function (_0x9f6cx1, _0x9f6cx2) {
		this['forEachInterval']('middle', _0x9f6cx1, _0x9f6cx2)
	}
	, consumeViewPreset: function (_0x9f6cx1) {
		this['headers'] = null;
		Ext['apply'](this, {
			headerConfig: _0x9f6cx1['headerConfig']
			, columnLinesFor: _0x9f6cx1['columnLinesFor'] || 'middle'
			, rowHeightHorizontal: _0x9f6cx1['rowHeight']
			, tickWidth: this['isHorizontal']() ? _0x9f6cx1['timeColumnWidth'] : _0x9f6cx1['timeRowHeight'] || _0x9f6cx1['timeColumnWidth'] || 60
			, timeColumnWidth: _0x9f6cx1['timeColumnWidth']
			, rowHeightVertical: _0x9f6cx1['timeRowHeight'] || _0x9f6cx1['timeColumnWidth'] || 60
			, timeAxisColumnWidth: _0x9f6cx1['timeAxisColumnWidth']
			, resourceColumnWidth: _0x9f6cx1['resourceColumnWidth'] || 100
		});
		this['originalTickWidth'] = this['getTickWidth']()
	}
	, setEventStore: function (_0x9f6cx1) {
		this['eventStore'] = _0x9f6cx1
	}
	, setCalendar: function (_0x9f6cx1) {
		if (_0x9f6cx1 !== this['calendar']) {
			this['calendar'] = _0x9f6cx1;
			if (_0x9f6cx1) {
				this['update']()
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.feature.AbstractTimeSpan', {
	extend: 'Ext.AbstractPlugin'
	, mixins: {
		observable: 'Ext.util.Observable'
	}
	, lockableScope: 'top'
	, schedulerView: null
	, timeAxis: null
	, expandToFitView: false
	, disabled: false
	, cls: null
	, clsField: 'Cls'
	, template: null
	, store: null
	, renderElementsBuffered: false
	, renderDelay: 0
	, refreshSizeOnItemUpdate: true
	, _renderTimer: null
	, showHeaderElements: false
	, headerTemplate: null
	, innerHeaderTpl: null
	, headerContainerCls: 'sch-header-secondary-canvas'
	, headerContainerEl: null
	, renderingDoneEvent: null
	, constructor: function (_0x9f6cx1) {
		this['uniqueCls'] = this['uniqueCls'] || ('sch-timespangroup-' + Ext['id']());
		Ext['apply'](this, _0x9f6cx1);
		this['mixins']['observable']['constructor']['call'](this);
		this['callParent'](arguments)
	}
	, init: function (_0x9f6cx1) {
		if (Ext['versions']['touch'] && !_0x9f6cx1['isReady']()) {
			_0x9f6cx1['on']('viewready', function () {
				this['init'](_0x9f6cx1)
			}, this);
			return
		};
		if (typeof this['innerHeaderTpl'] === 'string') {
			this['innerHeaderTpl'] = new Ext.XTemplate(this['innerHeaderTpl'])
		};
		var _0x9f6cx2 = this['innerHeaderTpl'];
		if (!this['headerTemplate']) {
			this['headerTemplate'] = new Ext.XTemplate('<tpl for=".">', '<div id="{id}" class="{cls}" title="{[values.Name || values.Text || ""]}" style="{side}:{position}px;">' + (_0x9f6cx2 ? '{[this.renderInner(values)]}' : '') + '</div>', '</tpl>', {
				renderInner: function (_0x9f6cx5) {
					return _0x9f6cx2['apply'](_0x9f6cx5)
				}
			})
		};
		this['schedulerView'] = _0x9f6cx1['getSchedulingView']();
		this['panel'] = _0x9f6cx1;
		this['timeAxis'] = _0x9f6cx1['getTimeAxis']();
		this['store'] = Ext['StoreManager']['lookup'](this['store']);
		if (!this['store']) {
			Ext['Error']['raise']('Error: You must define a store for this plugin')
		};
		this['panel']['on']({
			horizontaltimeaxiscolumnrender: this['renderHeaderElements']
			, scope: this
		});
		if (!this['schedulerView']['getEl']()) {
			this['schedulerView']['on']({
				viewready: this['onViewReady']
				, scope: this
			})
		}
		else {
			this['onViewReady']()
		}
	}
	, setDisabled: function (_0x9f6cx1) {
		if (_0x9f6cx1) {
			this['removeElements']()
		};
		this['disabled'] = _0x9f6cx1
	}
	, removeElements: function () {
		this['removeBodyElements']();
		if (this['showHeaderElements']) {
			this['removeHeaderElements']()
		}
	}
	, getBodyElements: function () {
		var _0x9f6cx1 = this['getContainerEl']();
		if (_0x9f6cx1) {
			return _0x9f6cx1['select']('.' + this['uniqueCls'])
		};
		return null
	}
	, getHeaderContainerEl: function () {
		var _0x9f6cx3 = this['headerContainerEl']
			, _0x9f6cx5 = Ext['baseCSSPrefix']
			, _0x9f6cx2;
		if (!_0x9f6cx3 || !_0x9f6cx3['dom']) {
			if (this['schedulerView']['isHorizontal']()) {
				var _0x9f6cx1 = this['panel']['getHorizontalTimeAxisColumn']();
				if (_0x9f6cx1['headerView']) {
					_0x9f6cx2 = _0x9f6cx1['headerView']['containerEl']
				}
				else {
					return null
				}
			}
			else {
				_0x9f6cx2 = this['panel']['lockedGrid']['getView']()['el']
			};
			if (_0x9f6cx2) {
				_0x9f6cx3 = _0x9f6cx2['down']('.' + this['headerContainerCls']);
				if (!_0x9f6cx3) {
					_0x9f6cx3 = _0x9f6cx2['appendChild']({
						cls: this['headerContainerCls']
					})
				};
				this['headerContainerEl'] = _0x9f6cx3
			}
		};
		return _0x9f6cx3
	}
	, getHeaderElements: function () {
		var _0x9f6cx1 = this['getHeaderContainerEl']();
		if (_0x9f6cx1) {
			return _0x9f6cx1['select']('.' + this['uniqueCls'])
		};
		return null
	}
	, removeBodyElements: function () {
		var _0x9f6cx1 = this['getBodyElements']();
		if (_0x9f6cx1) {
			_0x9f6cx1['each'](function (_0x9f6cx2) {
				_0x9f6cx2['destroy']()
			})
		}
	}
	, removeHeaderElements: function () {
		var _0x9f6cx1 = this['getHeaderElements']();
		if (_0x9f6cx1) {
			_0x9f6cx1['each'](function (_0x9f6cx2) {
				_0x9f6cx2['destroy']()
			})
		}
	}
	, getElementId: function (_0x9f6cx1) {
		return this['uniqueCls'] + '-' + _0x9f6cx1['internalId']
	}
	, getHeaderElementId: function (_0x9f6cx1) {
		return this['uniqueCls'] + '-header-' + _0x9f6cx1['internalId']
	}
	, getTemplateData: function (_0x9f6cx1) {
		return this['prepareTemplateData'] ? this['prepareTemplateData'](_0x9f6cx1) : _0x9f6cx1['data']
	}
	, getElementCls: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = _0x9f6cx1['clsField'] || this['clsField'];
		if (!_0x9f6cx5) {
			_0x9f6cx5 = this['getTemplateData'](_0x9f6cx1)
		};
		return this['cls'] + ' ' + this['uniqueCls'] + ' ' + (_0x9f6cx5[_0x9f6cx2] || '')
	}
	, getHeaderElementCls: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = _0x9f6cx1['clsField'] || this['clsField'];
		if (!_0x9f6cx5) {
			_0x9f6cx5 = this['getTemplateData'](_0x9f6cx1)
		};
		return 'sch-header-indicator ' + this['uniqueCls'] + ' ' + (_0x9f6cx5[_0x9f6cx2] || '')
	}
	, getContainerEl: function () {
		return this['schedulerView']['getSecondaryCanvasEl']()
	}
	, onViewReady: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['schedulerView'];
		this['storeListeners'] = {
			load: this['renderElements']
			, datachanged: this['renderElements']
			, clear: this['renderElements']
			, update: this['refreshSingle']
			, scope: this
		};
		this['store']['on'](this['storeListeners']);
		this['panel']['on']({
			beforemodechange: this['onTimelinePanelBeforeModeChange']
			, modechange: this['onTimelinePanelModeChange']
			, scope: this
		});
		this['viewListeners'] = {
			refresh: this['renderElements']
			, scope: this
		};
		this['headerListeners'] = {
			afterlayout: this['renderElements']
			, scope: this
		};
		if (_0x9f6cx1['isWeekView']()) {
			_0x9f6cx1['headerCt']['on'](this['headerListeners'])
		}
		else {
			_0x9f6cx1['on'](this['viewListeners']);
			this['renderElements']()
		}
	}
	, onTimelinePanelBeforeModeChange: function () {
		var _0x9f6cx1 = this['schedulerView'];
		if (_0x9f6cx1['isWeekView']()) {
			_0x9f6cx1['headerCt']['un'](this['headerListeners'])
		}
		else {
			this['schedulerView']['un'](this['viewListeners'])
		}
	}
	, onTimelinePanelModeChange: function () {
		var _0x9f6cx1 = this['schedulerView'];
		if (_0x9f6cx1['isWeekView']()) {
			_0x9f6cx1['headerCt']['on'](this['headerListeners'])
		}
		else {
			_0x9f6cx1['on'](this['viewListeners'])
		};
		this['forceNewRenderingTimeout']()
	}
	, forceNewRenderingTimeout: function () {
		this['renderElementsBuffered'] = false;
		clearTimeout(this._renderTimer);
		this['renderElements']()
	}
	, renderElements: function () {
		if (this['renderElementsBuffered'] || this['disabled']) {
			return
		};
		this['renderElementsBuffered'] = true;
		clearTimeout(this._renderTimer);
		this['_renderTimer'] = Ext['Function']['defer'](this['renderElementsInternal'], this['renderDelay'], this)
	}
	, setElementX: function (_0x9f6cx2, _0x9f6cx1) {
		if (this['panel']['rtl']) {
			_0x9f6cx2['setRight'](_0x9f6cx1)
		}
		else {
			_0x9f6cx2['setLeft'](_0x9f6cx1)
		}
	}
	, getHeaderElementPosition: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['schedulerView']['getTimeAxisViewModel']();
		return Math['round'](_0x9f6cx1['getPositionFromDate'](_0x9f6cx2))
	}
	, renderBodyElementsInternal: function (_0x9f6cx2) {
		var _0x9f6cx3 = this['timeAxis']['getStart']()
			, _0x9f6cx1 = this['timeAxis']['getEnd']()
			, _0x9f6cx5 = this['getElementData'](_0x9f6cx3, _0x9f6cx1, _0x9f6cx2);
		this['template']['append'](this['getContainerEl'](), _0x9f6cx5)
	}
	, getHeaderElementData: function (_0x9f6cx1, _0x9f6cx2) {
		throw 'Abstract method call'
	}
	, renderHeaderElements: function (_0x9f6cx1) {
		var _0x9f6cx5 = this['getHeaderContainerEl']();
		if (_0x9f6cx5) {
			var _0x9f6cx2 = this['getHeaderElementData'](_0x9f6cx1);
			this['headerTemplate']['append'](_0x9f6cx5, _0x9f6cx2)
		}
	}
	, renderElementsInternal: function () {
		this['renderElementsBuffered'] = false;
		var _0x9f6cx1 = this['schedulerView'];
		if (this['disabled'] || _0x9f6cx1['isDestroyed'] || !this['getContainerEl']() || _0x9f6cx1['store']['getCount']() === 0) {
			return
		};
		if (_0x9f6cx1['isWeekView']()) {
			var _0x9f6cx2 = _0x9f6cx1['getColumnManager']()['getColumns']();
			if (_0x9f6cx2[0] && !_0x9f6cx2[0]['rendered']) {
				return
			}
		};
		this['removeElements']();
		this['renderBodyElementsInternal']();
		if (this['showHeaderElements']) {
			this['headerContainerEl'] = null;
			this['renderHeaderElements']()
		};
		if (this['renderingDoneEvent']) {
			this['fireEvent'](this['renderingDoneEvent'], this)
		}
	}
	, getElementData: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx1, _0x9f6cx2) {
		throw 'Abstract method call'
	}
	, updateBodyElement: function (_0x9f6cx2) {
		var _0x9f6cx5 = Ext['get'](this['getElementId'](_0x9f6cx2));
		if (_0x9f6cx5) {
			var _0x9f6cx4 = this['timeAxis']['getStart']()
				, _0x9f6cx1 = this['timeAxis']['getEnd']()
				, _0x9f6cx3 = this['getElementData'](_0x9f6cx4, _0x9f6cx1, [_0x9f6cx2])[0];
			if (_0x9f6cx3) {
				_0x9f6cx5['dom']['className'] = _0x9f6cx3['$cls'];
				_0x9f6cx5['setTop'](_0x9f6cx3['top']);
				this['setElementX'](_0x9f6cx5, _0x9f6cx3['left']);
				_0x9f6cx5['setSize'](_0x9f6cx3['width'], _0x9f6cx3['height'])
			}
			else {
				Ext['destroy'](_0x9f6cx5)
			}
		}
		else {
			this['renderBodyElementsInternal']([_0x9f6cx2])
		}
	}
	, updateHeaderElement: function (_0x9f6cx1) {
		var _0x9f6cx2 = Ext['get'](this['getHeaderElementId'](_0x9f6cx1));
		if (_0x9f6cx2) {
			var _0x9f6cx5 = this['getHeaderElementData']([_0x9f6cx1])[0];
			if (_0x9f6cx5) {
				_0x9f6cx2['dom']['className'] = _0x9f6cx5['cls'];
				if (this['schedulerView']['isHorizontal']()) {
					this['setElementX'](_0x9f6cx2, _0x9f6cx5['position']);
					_0x9f6cx2['setWidth'](_0x9f6cx5['size'])
				}
				else {
					_0x9f6cx2['setTop'](_0x9f6cx5['position']);
					_0x9f6cx2['setHeight'](_0x9f6cx5['size'])
				}
			}
			else {
				Ext['destroy'](_0x9f6cx2)
			}
		}
		else {
			this['renderHeaderElements']([_0x9f6cx1])
		}
	}
	, destroy: function () {
		clearTimeout(this._renderTimer);
		this['store']['un'](this['storeListeners']);
		if (this['store']['autoDestroy']) {
			this['store']['destroy']()
		}
	}
	, refreshSingle: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 instanceof Array ? _0x9f6cx1 : [_0x9f6cx1];
		Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cx5) {
			this['updateBodyElement'](_0x9f6cx5);
			if (this['showHeaderElements']) {
				this['updateHeaderElement'](_0x9f6cx5)
			}
		}, this)
	}
});
Ext.define('Ext.ux.Scheduler.plugin.Lines', {
	extend: 'Ext.ux.Scheduler.feature.AbstractTimeSpan'
	, alias: 'plugin.scheduler_lines'
	, cls: 'sch-timeline'
	, showTip: true
	, innerTpl: null
	, prepareTemplateData: null
	, side: null
	, init: function (_0x9f6cx1) {
		if (typeof this['innerTpl'] === 'string') {
			this['innerTpl'] = new Ext.XTemplate(this['innerTpl'])
		};
		this['side'] = _0x9f6cx1['rtl'] ? 'right' : 'left';
		var _0x9f6cx2 = this['innerTpl'];
		if (!this['template']) {
			this['template'] = new Ext.XTemplate('<tpl for=".">', '<div id="{id}" ' + (this['showTip'] ? 'title="{[this.getTipText(values)]}" ' : '') + 'class="{$cls}" style="' + this['side'] + ':{left}px;top:{top}px;width:{width}px">' + (_0x9f6cx2 ? '{[this.renderInner(values)]}' : '') + '</div>', '</tpl>', {
				getTipText: function (_0x9f6cx5) {
					return _0x9f6cx1['getSchedulingView']()['getFormattedDate'](_0x9f6cx5.Date) + ' ' + (_0x9f6cx5['Text'] || '')
				}
				, renderInner: function (_0x9f6cx5) {
					return _0x9f6cx2['apply'](_0x9f6cx5)
				}
			})
		};
		this['callParent'](arguments)
	}
	, getElementData: function (_0x9f6cx7, _0x9f6cx3, _0x9f6cx11) {
		var _0x9f6cxb = this['store']
			, _0x9f6cx5 = this['schedulerView']
			, _0x9f6cxc = _0x9f6cx5['isHorizontal']()
			, _0x9f6cx8 = _0x9f6cx5['isWeekView']()
			, _0x9f6cxa = _0x9f6cx11 || _0x9f6cxb['getRange']()
			, _0x9f6cx2 = _0x9f6cx5['getTimeSpanRegion'](_0x9f6cx7, null, this['expandToFitView'])
			, _0x9f6cx17 = []
			, _0x9f6cxe, _0x9f6cxd, _0x9f6cx1, _0x9f6cx14, _0x9f6cx4;
		for (var _0x9f6cx12 = 0, _0x9f6cxf = _0x9f6cxa['length']; _0x9f6cx12 < _0x9f6cxf; _0x9f6cx12++) {
			_0x9f6cx1 = _0x9f6cxa[_0x9f6cx12];
			_0x9f6cx14 = _0x9f6cx1['get']('Date');
			if (_0x9f6cx14 && _0x9f6cx5['timeAxis']['dateInAxis'](_0x9f6cx14)) {
				_0x9f6cx4 = Ext['apply']({}, this['getTemplateData'](_0x9f6cx1));
				_0x9f6cx4['id'] = this['getElementId'](_0x9f6cx1);
				_0x9f6cx4['$cls'] = this['getElementCls'](_0x9f6cx1, _0x9f6cx4);
				if (_0x9f6cx8) {
					_0x9f6cx2 = _0x9f6cx5['getTimeSpanRegion'](_0x9f6cx14, _0x9f6cx14);
					_0x9f6cx4['left'] = _0x9f6cx2['x'];
					_0x9f6cx4['top'] = _0x9f6cx2['y'];
					_0x9f6cx4['width'] = _0x9f6cx2['right'] - _0x9f6cx2['left']
				}
				else {
					var _0x9f6cx6 = _0x9f6cx5['getCoordinateFromDate'](_0x9f6cx14);
					if (_0x9f6cxc) {
						_0x9f6cx4['left'] = _0x9f6cx6
					}
					else {
						_0x9f6cx4['top'] = _0x9f6cx6
					}
				};
				_0x9f6cx17['push'](_0x9f6cx4)
			}
		};
		return _0x9f6cx17
	}
	, getHeaderElementData: function (_0x9f6cx5) {
		var _0x9f6cx1 = this['timeAxis']['getStart']()
			, _0x9f6cxa = this['timeAxis']['getEnd']()
			, _0x9f6cxb = this['schedulerView']['isHorizontal']()
			, _0x9f6cx6 = []
			, _0x9f6cx8, _0x9f6cx2, _0x9f6cxc, _0x9f6cx4;
		_0x9f6cx5 = _0x9f6cx5 || this['store']['getRange']();
		for (var _0x9f6cx7 = 0, _0x9f6cx3 = _0x9f6cx5['length']; _0x9f6cx7 < _0x9f6cx3; _0x9f6cx7++) {
			_0x9f6cx8 = _0x9f6cx5[_0x9f6cx7];
			_0x9f6cx2 = _0x9f6cx8['get']('Date');
			if (_0x9f6cx2 && Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0x9f6cx2, _0x9f6cx1, _0x9f6cxa)) {
				_0x9f6cxc = this['getHeaderElementPosition'](_0x9f6cx2);
				_0x9f6cx4 = this['getTemplateData'](_0x9f6cx8);
				_0x9f6cx4 = Ext['apply']({
					side: _0x9f6cxb ? this['side'] : 'top'
					, cls: this['getHeaderElementCls'](_0x9f6cx8, _0x9f6cx4)
					, position: _0x9f6cxc
				}, _0x9f6cx4);
				_0x9f6cx4['id'] = this['getHeaderElementId'](_0x9f6cx8);
				_0x9f6cx6['push'](_0x9f6cx4)
			}
		};
		return _0x9f6cx6
	}
});
Ext.define('Ext.ux.Scheduler.feature.ColumnLines', {
	extend: 'Ext.ux.Scheduler.plugin.Lines'
	, requires: ['Ext.data.JsonStore']
	, showTip: false
	, cls: 'sch-column-line'
	, timeAxisViewModel: null
	, renderingDoneEvent: 'columnlinessynced'
	, useLowestHeader: null
	, init: function (_0x9f6cx1) {
		this['timeAxis'] = _0x9f6cx1['getTimeAxis']();
		this['timeAxisViewModel'] = _0x9f6cx1['timeAxisViewModel'];
		this['panel'] = _0x9f6cx1;
		this['store'] = new Ext['data'].JsonStore({
			fields: ['Date']
		});
		this['callParent'](arguments);
		_0x9f6cx1['on']({
			destroy: this['onHostDestroy']
			, scope: this
		});
		this['timeAxisViewModel']['on']('update', this['populate'], this);
		this['populate']()
	}
	, onHostDestroy: function () {
		this['timeAxisViewModel']['un']('update', this['populate'], this)
	}
	, populate: function () {
		this['store']['setData'](this['getData']())
	}
	, getData: function () {
		var _0x9f6cx2 = this['panel']
			, _0x9f6cx6 = [];
		var _0x9f6cx8 = this['timeAxisViewModel'];
		var _0x9f6cx4 = this['useLowestHeader'] ? _0x9f6cx8['getLowestHeader']() : _0x9f6cx8['columnLinesFor'];
		var _0x9f6cx7 = !!(_0x9f6cx8['headerConfig'] && _0x9f6cx8['headerConfig'][_0x9f6cx4]['cellGenerator']);
		if (_0x9f6cx7) {
			var _0x9f6cx5 = _0x9f6cx8['getColumnConfig']()[_0x9f6cx4];
			for (var _0x9f6cx3 = 1, _0x9f6cx1 = _0x9f6cx5['length']; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
				_0x9f6cx6['push']({
					Date: _0x9f6cx5[_0x9f6cx3]['start']
				})
			}
		}
		else {
			_0x9f6cx8['forEachInterval'](_0x9f6cx4, function (_0x9f6cx13, _0x9f6cxc, _0x9f6cxa) {
				if (_0x9f6cxa > 0) {
					_0x9f6cx6['push']({
						Date: _0x9f6cx13
						, Cls: _0x9f6cx8['isMajorTick'](_0x9f6cx13) ? 'sch-column-line-solid' : ''
					})
				}
			})
		};
		return _0x9f6cx6
	}
});
Ext.define('Ext.ux.Scheduler.mixin.Zoomable', {
	zoomOnMouseWheel: true
	, preventScrollZoom: false
	, zoomLevels: [{
		width: 40
		, increment: 1
		, resolution: 1
		, preset: 'manyYears'
		, resolutionUnit: 'YEAR'
	}, {
		width: 80
		, increment: 1
		, resolution: 1
		, preset: 'manyYears'
		, resolutionUnit: 'YEAR'
	}, {
		width: 30
		, increment: 1
		, resolution: 1
		, preset: 'year'
		, resolutionUnit: 'MONTH'
	}, {
		width: 50
		, increment: 1
		, resolution: 1
		, preset: 'year'
		, resolutionUnit: 'MONTH'
	}, {
		width: 100
		, increment: 1
		, resolution: 1
		, preset: 'year'
		, resolutionUnit: 'MONTH'
	}, {
		width: 200
		, increment: 1
		, resolution: 1
		, preset: 'year'
		, resolutionUnit: 'MONTH'
	}, {
		width: 100
		, increment: 1
		, resolution: 7
		, preset: 'monthAndYear'
		, resolutionUnit: 'DAY'
	}, {
		width: 30
		, increment: 1
		, resolution: 1
		, preset: 'weekDateAndMonth'
		, resolutionUnit: 'DAY'
	}, {
		width: 35
		, increment: 1
		, resolution: 1
		, preset: 'weekAndMonth'
		, resolutionUnit: 'DAY'
	}, {
		width: 50
		, increment: 1
		, resolution: 1
		, preset: 'weekAndMonth'
		, resolutionUnit: 'DAY'
	}, {
		width: 20
		, increment: 1
		, resolution: 1
		, preset: 'weekAndDayLetter'
	}, {
		width: 50
		, increment: 1
		, resolution: 1
		, preset: 'weekAndDay'
		, resolutionUnit: 'HOUR'
	}, {
		width: 100
		, increment: 1
		, resolution: 1
		, preset: 'weekAndDay'
		, resolutionUnit: 'HOUR'
	}, {
		width: 50
		, increment: 6
		, resolution: 30
		, preset: 'hourAndDay'
		, resolutionUnit: 'MINUTE'
	}, {
		width: 100
		, increment: 6
		, resolution: 30
		, preset: 'hourAndDay'
		, resolutionUnit: 'MINUTE'
	}, {
		width: 60
		, increment: 2
		, resolution: 30
		, preset: 'hourAndDay'
		, resolutionUnit: 'MINUTE'
	}, {
		width: 60
		, increment: 1
		, resolution: 30
		, preset: 'hourAndDay'
		, resolutionUnit: 'MINUTE'
	}, {
		width: 30
		, increment: 15
		, resolution: 5
		, preset: 'minuteAndHour'
	}, {
		width: 60
		, increment: 15
		, resolution: 5
		, preset: 'minuteAndHour'
	}, {
		width: 130
		, increment: 15
		, resolution: 5
		, preset: 'minuteAndHour'
	}, {
		width: 60
		, increment: 5
		, resolution: 5
		, preset: 'minuteAndHour'
	}, {
		width: 100
		, increment: 5
		, resolution: 5
		, preset: 'minuteAndHour'
	}, {
		width: 50
		, increment: 2
		, resolution: 1
		, preset: 'minuteAndHour'
	}, {
		width: 30
		, increment: 10
		, resolution: 5
		, preset: 'secondAndMinute'
	}, {
		width: 60
		, increment: 10
		, resolution: 5
		, preset: 'secondAndMinute'
	}, {
		width: 130
		, increment: 5
		, resolution: 5
		, preset: 'secondAndMinute'
	}]
	, minZoomLevel: null
	, maxZoomLevel: null
	, visibleZoomFactor: 5
	, zoomKeepsOriginalTimespan: false
	, initializeZooming: function () {
		this['zoomLevels'] = this['zoomLevels']['slice']();
		this['setMinZoomLevel'](this['minZoomLevel'] || 0);
		this['setMaxZoomLevel'](this['maxZoomLevel'] !== null ? this['maxZoomLevel'] : this['zoomLevels']['length'] - 1);
		this['on']('viewready', this['onTimelineReady'], this)
	}
	, getZoomLevelUnit: function (_0x9f6cx1) {
		return Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0x9f6cx1['preset'])['getBottomHeader']()['unit']
	}
	, getMilliSecondsPerPixelForZoomLevel: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = Ext.ux.Scheduler['util']['Date'];
		return Math['round']((_0x9f6cx2['add'](new Date(1, 0, 1), this['getZoomLevelUnit'](_0x9f6cx5), _0x9f6cx5['increment']) - new Date(1, 0, 1)) / (_0x9f6cx1 ? _0x9f6cx5['width'] : _0x9f6cx5['actualWidth'] || _0x9f6cx5['width']))
	}
	, presetToZoomLevel: function (_0x9f6cx2) {
		var _0x9f6cx1 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0x9f6cx2);
		return {
			preset: _0x9f6cx2
			, increment: _0x9f6cx1['getBottomHeader']()['increment'] || 1
			, resolution: _0x9f6cx1['timeResolution']['increment']
			, resolutionUnit: _0x9f6cx1['timeResolution']['unit']
			, width: _0x9f6cx1['timeColumnWidth']
		}
	}
	, calculateCurrentZoomLevel: function () {
		var _0x9f6cx6 = this['presetToZoomLevel'](this['viewPreset'])
			, _0x9f6cx3 = Number['MAX_VALUE']
			, _0x9f6cx2 = this['timeAxisViewModel']
			, _0x9f6cx7 = _0x9f6cx2['timeColumnWidth'];
		_0x9f6cx6['width'] = _0x9f6cx7;
		_0x9f6cx6['increment'] = _0x9f6cx2['getBottomHeader']()['increment'] || 1;
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = this['zoomLevels']['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			var _0x9f6cx4 = this['zoomLevels'][_0x9f6cx5];
			if (_0x9f6cx4['preset'] !== _0x9f6cx6['preset']) {
				continue
			};
			var _0x9f6cx8 = Math['abs'](_0x9f6cx4['width'] - _0x9f6cx7);
			if (_0x9f6cx8 < _0x9f6cx3) {
				_0x9f6cx3 = _0x9f6cx8;
				_0x9f6cx6['actualWidth'] = _0x9f6cx4['actualWidth'];
				_0x9f6cx6['width'] = _0x9f6cx4['width']
			}
		};
		return _0x9f6cx6
	}
	, getCurrentZoomLevelIndex: function () {
		var _0x9f6cx7 = this['calculateCurrentZoomLevel']();
		var _0x9f6cx2 = this['getMilliSecondsPerPixelForZoomLevel'](_0x9f6cx7);
		var _0x9f6cx4 = this['zoomLevels'];
		for (var _0x9f6cx5 = 0; _0x9f6cx5 < _0x9f6cx4['length']; _0x9f6cx5++) {
			var _0x9f6cx3 = this['getMilliSecondsPerPixelForZoomLevel'](_0x9f6cx4[_0x9f6cx5]);
			if (_0x9f6cx3 == _0x9f6cx2) {
				return _0x9f6cx5
			};
			if (_0x9f6cx5 === 0 && _0x9f6cx2 > _0x9f6cx3) {
				return -0.5
			};
			if (_0x9f6cx5 == _0x9f6cx4['length'] - 1 && _0x9f6cx2 < _0x9f6cx3) {
				return _0x9f6cx4['length'] - 1 + 0.5
			};
			var _0x9f6cx1 = this['getMilliSecondsPerPixelForZoomLevel'](_0x9f6cx4[_0x9f6cx5 + 1]);
			if (_0x9f6cx3 > _0x9f6cx2 && _0x9f6cx2 > _0x9f6cx1) {
				return _0x9f6cx5 + 0.5
			}
		};
		throw new Error('can\'t find current zoom level index')
	}
	, setMaxZoomLevel: function (_0x9f6cx1) {
		if (_0x9f6cx1 < 0 || _0x9f6cx1 >= this['zoomLevels']['length']) {
			throw new Error('Invalid range for `setMinZoomLevel`')
		};
		this['maxZoomLevel'] = _0x9f6cx1
	}
	, setMinZoomLevel: function (_0x9f6cx1) {
		if (_0x9f6cx1 < 0 || _0x9f6cx1 >= this['zoomLevels']['length']) {
			throw new Error('Invalid range for `setMinZoomLevel`')
		};
		this['minZoomLevel'] = _0x9f6cx1
	}
	, zoomToLevel: function (_0x9f6cx1, _0x9f6cxa, _0x9f6cxe) {
		_0x9f6cx1 = Ext['Number']['constrain'](_0x9f6cx1, this['minZoomLevel'], this['maxZoomLevel']);
		_0x9f6cxe = _0x9f6cxe || {};
		var _0x9f6cx2 = this['calculateCurrentZoomLevel']();
		var _0x9f6cxd = this['getMilliSecondsPerPixelForZoomLevel'](_0x9f6cx2);
		var _0x9f6cxc = this['zoomLevels'][_0x9f6cx1];
		var _0x9f6cx5 = this['getMilliSecondsPerPixelForZoomLevel'](_0x9f6cxc);
		if (this['getMode']() !== 'horizontal' || (_0x9f6cxd == _0x9f6cx5 && !_0x9f6cxa)) {
			return null
		};
		var _0x9f6cx6 = this;
		_0x9f6cx6['fireEvent']('beforezoomchange', _0x9f6cx6, _0x9f6cx1);
		var _0x9f6cx8 = this['getSchedulingView']();
		if (!this['rendered']) {
			this['on']('afterlayout', Ext['Function']['bind'](this['zoomToLevel'], this, [_0x9f6cx1, _0x9f6cxa, _0x9f6cxe]), null, {
				single: true
			});
			return
		};
		var _0x9f6cxb = _0x9f6cx8['getOuterEl']();
		var _0x9f6cx9 = this['isVertical']();
		var _0x9f6cx3 = _0x9f6cxe['centerDate'] || (_0x9f6cxa ? new Date((_0x9f6cxa['start']['getTime']() + _0x9f6cxa['end']['getTime']()) / 2) : this['getViewportCenterDateCached']());
		var _0x9f6cx7 = _0x9f6cx9 ? _0x9f6cx8['getViewContainerHeight']() : _0x9f6cxb['getWidth']();
		var _0x9f6cx13 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0x9f6cxc['preset'])['clone']();
		_0x9f6cx13['name'] = _0x9f6cxc['preset'];
		var _0x9f6cx4 = _0x9f6cx13['getBottomHeader']();
		_0x9f6cxa = this['calculateOptimalDateRange'](_0x9f6cx3, _0x9f6cx7, _0x9f6cxc, _0x9f6cxa);
		_0x9f6cx13[_0x9f6cx9 ? 'timeRowHeight' : 'timeColumnWidth'] = _0x9f6cxe['customWidth'] || _0x9f6cxc['width'];
		_0x9f6cx4['increment'] = _0x9f6cxc['increment'];
		this['isZooming'] = true;
		_0x9f6cx13['increment'] = _0x9f6cxc['increment'];
		_0x9f6cx13['timeResolution']['unit'] = Ext.ux.Scheduler['util']['Date']['getUnitByName'](_0x9f6cxc['resolutionUnit'] || _0x9f6cx13['timeResolution']['unit'] || _0x9f6cx4['unit']);
		_0x9f6cx13['timeResolution']['increment'] = _0x9f6cxc['resolution'];
		this['setViewPreset'](_0x9f6cx13, _0x9f6cxa['start'] || this['getStart'](), _0x9f6cxa['end'] || this['getEnd'](), false, {
			centerDate: _0x9f6cx3
		});
		_0x9f6cxc['actualWidth'] = this['timeAxisViewModel']['getTickWidth']();
		_0x9f6cx6['isZooming'] = false;
		_0x9f6cx6['fireEvent']('zoomchange', _0x9f6cx6, _0x9f6cx1);
		return _0x9f6cx1
	}
	, setZoomLevel: function () {
		this['zoomToLevel']['apply'](this, arguments)
	}
	, zoomToSpan: function (_0x9f6cx12, _0x9f6cx14) {
		var _0x9f6cxe = this['getSchedulingView']();
		_0x9f6cx14 = _0x9f6cx14 || {};
		if (_0x9f6cx14['leftMargin'] || _0x9f6cx14['rightMargin']) {
			_0x9f6cx14['adjustStart'] = 0;
			_0x9f6cx14['adjustEnd'] = 0
		};
		Ext['applyIf'](_0x9f6cx14, {
			leftMargin: 0
			, rightMargin: 0
		});
		if (!this['rendered']) {
			this['on']('afterlayout', Ext['Function']['bind'](this['zoomToSpan'], this, [_0x9f6cx12, _0x9f6cx14]), null, {
				single: true
			});
			return
		};
		if (_0x9f6cx12['start'] && _0x9f6cx12['end']) {
			var _0x9f6cx6 = _0x9f6cx12['start']
				, _0x9f6cx3 = _0x9f6cx12['end']
				, _0x9f6cx4 = _0x9f6cx14['adjustStart'] >= 0 && _0x9f6cx14['adjustEnd'] >= 0;
			if (_0x9f6cx4) {
				_0x9f6cx6 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx6, this['timeAxis']['mainUnit'], -_0x9f6cx14['adjustStart']);
				_0x9f6cx3 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx3, this['timeAxis']['mainUnit'], _0x9f6cx14['adjustEnd'])
			};
			if (_0x9f6cx6 <= _0x9f6cx3) {
				var _0x9f6cx1 = _0x9f6cxe['getTimeAxisViewModel']()['getAvailableWidth']();
				var _0x9f6cxb = Math['floor'](this['getCurrentZoomLevelIndex']());
				if (_0x9f6cxb == -1) {
					_0x9f6cxb = 0
				};
				var _0x9f6cx17 = this['zoomLevels'];
				var _0x9f6cx2 = _0x9f6cx3 - _0x9f6cx6 || 1
					, _0x9f6cxc = this['getMilliSecondsPerPixelForZoomLevel'](_0x9f6cx17[_0x9f6cxb], true)
					, _0x9f6cx13 = _0x9f6cx2 / _0x9f6cxc + _0x9f6cx14['leftMargin'] + _0x9f6cx14['rightMargin'] > _0x9f6cx1 ? -1 : 1
					, _0x9f6cx7 = _0x9f6cxb + _0x9f6cx13;
				var _0x9f6cxf, _0x9f6cx8 = null;
				while (_0x9f6cx7 >= 0 && _0x9f6cx7 <= _0x9f6cx17['length'] - 1) {
					_0x9f6cxf = _0x9f6cx17[_0x9f6cx7];
					_0x9f6cxc = this['getMilliSecondsPerPixelForZoomLevel'](_0x9f6cxf, true);
					var _0x9f6cx11 = _0x9f6cx2 / _0x9f6cxc + _0x9f6cx14['leftMargin'] + _0x9f6cx14['rightMargin'];
					if (_0x9f6cx13 == -1) {
						if (_0x9f6cx11 <= _0x9f6cx1) {
							_0x9f6cx8 = _0x9f6cx7;
							break
						}
					}
					else {
						if (_0x9f6cx11 <= _0x9f6cx1) {
							if (_0x9f6cxb !== _0x9f6cx7 - _0x9f6cx13) {
								_0x9f6cx8 = _0x9f6cx7
							}
						}
						else {
							break
						}
					};
					_0x9f6cx7 += _0x9f6cx13
				};
				_0x9f6cx8 = _0x9f6cx8 !== null ? _0x9f6cx8 : _0x9f6cx7 - _0x9f6cx13;
				_0x9f6cxf = _0x9f6cx17[_0x9f6cx8];
				var _0x9f6cx5 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0x9f6cxf['preset'])['getBottomHeader']()['unit'];
				if (_0x9f6cx14['leftMargin'] || _0x9f6cx14['rightMargin']) {
					_0x9f6cx6 = new Date(_0x9f6cx6['getTime']() - _0x9f6cxc * _0x9f6cx14['leftMargin']);
					_0x9f6cx3 = new Date(_0x9f6cx3['getTime']() + _0x9f6cxc * _0x9f6cx14['rightMargin'])
				};
				var _0x9f6cx10 = Ext.ux.Scheduler['util']['Date']['getDurationInUnit'](_0x9f6cx6, _0x9f6cx3, _0x9f6cx5, true) / _0x9f6cxf['increment'];
				if (_0x9f6cx10 === 0) {
					return
				};
				var _0x9f6cx9 = Math['floor'](_0x9f6cx1 / _0x9f6cx10);
				var _0x9f6cxa = new Date((_0x9f6cx6['getTime']() + _0x9f6cx3['getTime']()) / 2);
				var _0x9f6cxd;
				if (_0x9f6cx4) {
					_0x9f6cxd = {
						start: _0x9f6cx6
						, end: _0x9f6cx3
					}
				}
				else {
					_0x9f6cxd = this['calculateOptimalDateRange'](_0x9f6cxa, _0x9f6cx1, _0x9f6cxf)
				};
				return this['zoomToLevel'](_0x9f6cx8, _0x9f6cxd, {
					customWidth: _0x9f6cx9
					, centerDate: _0x9f6cxa
				})
			}
		};
		return null
	}
	, zoomIn: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || 1;
		var _0x9f6cx2 = this['getCurrentZoomLevelIndex']();
		if (_0x9f6cx2 >= this['zoomLevels']['length'] - 1) {
			return null
		};
		return this['zoomToLevel'](Math['floor'](_0x9f6cx2) + _0x9f6cx1)
	}
	, zoomOut: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || 1;
		var _0x9f6cx2 = this['getCurrentZoomLevelIndex']();
		if (_0x9f6cx2 <= 0) {
			return null
		};
		return this['zoomToLevel'](Math['ceil'](_0x9f6cx2) - _0x9f6cx1)
	}
	, zoomInFull: function () {
		return this['zoomToLevel'](this['maxZoomLevel'])
	}
	, zoomOutFull: function () {
		return this['zoomToLevel'](this['minZoomLevel'])
	}
	, calculateOptimalDateRange: function (_0x9f6cx5, _0x9f6cx8, _0x9f6cx4, _0x9f6cxc) {
		if (_0x9f6cxc) {
			return _0x9f6cxc
		};
		var _0x9f6cx6 = this['timeAxis'];
		if (this['zoomKeepsOriginalTimespan']) {
			return {
				start: _0x9f6cx6['getStart']()
				, end: _0x9f6cx6['getEnd']()
			}
		};
		var _0x9f6cx2 = Ext.ux.Scheduler['util']['Date'];
		var _0x9f6cx9 = this['getZoomLevelUnit'](_0x9f6cx4);
		var _0x9f6cx3 = Math['ceil'](_0x9f6cx8 / _0x9f6cx4['width'] * _0x9f6cx4['increment'] * this['visibleZoomFactor'] / 2);
		var _0x9f6cx1 = _0x9f6cx2['add'](_0x9f6cx5, _0x9f6cx9, -_0x9f6cx3);
		var _0x9f6cx7 = _0x9f6cx2['add'](_0x9f6cx5, _0x9f6cx9, _0x9f6cx3);
		return {
			start: _0x9f6cx6['floorDate'](_0x9f6cx1, false, _0x9f6cx9, _0x9f6cx4['increment'])
			, end: _0x9f6cx6['ceilDate'](_0x9f6cx7, false, _0x9f6cx9, _0x9f6cx4['increment'])
		}
	}
	, onTimelineReady: function () {
		if (this['zoomOnMouseWheel']) {
			this['getSchedulingView']()['getEl']()['on']('wheel', this['onWheel'], this, {
				capture: true
			});
			this['on']('destroy', function () {
				clearTimeout(this['scrollWheelBlockTimeout'])
			})
		}
	}
	, onWheel: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		if (_0x9f6cx2['ctrlKey']) {
			_0x9f6cx2['preventDefault']();
			if (!_0x9f6cx1['preventScrollZoom']) {
				if (_0x9f6cx2['browserEvent']['deltaY'] > 0) {
					_0x9f6cx1['zoomOut']()
				}
				else {
					if (_0x9f6cx2['browserEvent']['deltaY'] < 0) {
						_0x9f6cx1['zoomIn']()
					}
				};
				_0x9f6cx1['preventScrollZoom'] = true;
				_0x9f6cx1['scrollWheelBlockTimeout'] = setTimeout(function () {
					_0x9f6cx1['preventScrollZoom'] = false
				}, 30)
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.mixin.AbstractTimelinePanel', {
	requires: ['Ext.ux.Scheduler.data.TimeAxis', 'Ext.ux.Scheduler.view.model.TimeAxis', 'Ext.ux.Scheduler.feature.ColumnLines', 'Ext.ux.Scheduler.preset.Manager']
	, mixins: ['Ext.ux.Scheduler.mixin.Zoomable']
	, snapToIncrement: false
	, readOnly: false
	, forceFit: false
	, eventResizeHandles: 'both'
	, timeAxis: null
	, autoAdjustTimeAxis: true
	, timeAxisViewModel: null
	, crudManager: null
	, viewPreset: 'weekAndDay'
	, trackHeaderOver: true
	, startDate: null
	, endDate: null
	, startTime: 0
	, endTime: 24
	, columnLines: true
	, getDateConstraints: Ext['emptyFn']
	, snapRelativeToEventStartDate: false
	, trackMouseOver: false
	, readRowHeightFromPreset: true
	, eventBorderWidth: 1
	, cachedCenterDate: null
	, cellBorderWidth: 1
	, cellTopBorderWidth: 1
	, cellBottomBorderWidth: 1
	, renderers: null
	, getMode: function () {
		return this['mode']
	}
	, isHorizontal: function () {
		return this['getMode']() === 'horizontal'
	}
	, isVertical: function () {
		return this['getMode']() === 'vertical'
	}
	, isWeekView: function () {
		return this['getMode']() === 'weekview'
	}
	, _initializeTimelinePanel: function () {
		if (this['mode']) {
			if (this['mode'] === 'calendar') {
				this['mode'] = 'weekview'
			}
		}
		else {
			this['mode'] = 'horizontal'
		};
		this['applyViewPreset'](this['viewPreset']);
		if (this['isWeekView']()) {
			if (!this['viewPreset']['headerConfig']['middle']['splitUnit']) {
				this['_oldViewPresetArgs'] = [this['viewPreset']];
				this['viewPreset'] = this['calendarViewPreset'] || 'week'
			}
		};
		this['initializeZooming']();
		this['on']('viewchange', this['clearCenterDateCache'], this);
		this['on']('viewready', this['setupClearCenterDateCache'], this);
		this['renderers'] = [];
		if (this['readRowHeightFromPreset']) {
			this['readRowHeightFromPreset'] = !this['rowHeight']
		};
		if (!(this['timeAxis'] instanceof Ext.ux.Scheduler['data']['TimeAxis'])) {
			this['timeAxis'] = Ext['create'](Ext['applyIf'](this['timeAxis'] || {}, {
				xclass: 'Ext.ux.Scheduler.data.TimeAxis'
				, autoAdjust: this['autoAdjustTimeAxis']
				, mode: this['isWeekView']() ? 'week' : 'plain'
			}))
		};
		if (!(this['timeAxisViewModel'] instanceof Ext.ux.Scheduler['view']['model']['TimeAxis'])) {
			this['timeAxisViewModel'] = Ext['create'](Ext['applyIf'](this['timeAxisViewModel'] || {}, {
				xclass: 'Ext.ux.Scheduler.view.model.TimeAxis'
				, mode: this['mode']
				, snapToIncrement: this['snapToIncrement']
				, forceFit: this['forceFit']
				, timeAxis: this['timeAxis']
				, eventStore: this['getEventStore']()
				, viewPreset: this['viewPreset']
			}))
		};
		this['timeAxisViewModel']['on']('update', this['onTimeAxisViewModelUpdate'], this);
		this['timeAxisViewModel']['refCount']++;
		this['on']('destroy', this['onPanelDestroyed'], this);
		var _0x9f6cx1;
		if (this['isHorizontal']()) {
			_0x9f6cx1 = ['sch-horizontal']
		}
		else {
			if (this['isVertical']()) {
				_0x9f6cx1 = ['sch-vertical', 'sch-vertical-resource']
			}
			else {
				if (this['isWeekView']()) {
					_0x9f6cx1 = ['sch-vertical', 'sch-calendar']
				}
			}
		};
		this['addCls']([]['concat']['apply'](['sch-timelinepanel'], _0x9f6cx1))
	}
	, applyViewPreset: function (_0x9f6cx2) {
		var _0x9f6cx3;
		if (Ext['isString'](_0x9f6cx2)) {
			_0x9f6cx3 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0x9f6cx2);
			if (!_0x9f6cx3) {
				throw 'You must define a valid view preset object. See Ext.ux.Scheduler.preset.Manager class for reference'
			}
		}
		else {
			if (Ext['isObject'](_0x9f6cx2)) {
				var _0x9f6cx5 = _0x9f6cx2['name'] && Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0x9f6cx2['name']);
				if (_0x9f6cx5) {
					_0x9f6cx3 = new Ext.ux.Scheduler['preset'].ViewPreset(Ext['applyIf'](_0x9f6cx2, _0x9f6cx5))
				}
				else {
					var _0x9f6cx1 = _0x9f6cx2['name'] || ('preset' + Ext.ux.Scheduler['preset']['Manager']['getCount']());
					Ext.ux.Scheduler['preset']['Manager']['registerPreset'](_0x9f6cx1, _0x9f6cx2);
					_0x9f6cx3 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0x9f6cx1)
				}
			}
		};
		this['viewPreset'] = _0x9f6cx3
	}
	, onTimeAxisViewModelUpdate: function () {
		var _0x9f6cx1 = this['getSchedulingView']();
		if (_0x9f6cx1 && _0x9f6cx1['viewReady']) {
			_0x9f6cx1['refreshKeepingScroll']();
			this['fireEvent']('viewchange', this)
		}
	}
	, onPanelDestroyed: function () {
		var _0x9f6cx1 = this['timeAxisViewModel'];
		_0x9f6cx1['un']('update', this['onTimeAxisViewModelUpdate'], this);
		_0x9f6cx1['refCount']--;
		if (_0x9f6cx1['refCount'] <= 0) {
			_0x9f6cx1['destroy']()
		}
	}
	, getSchedulingView: function () {
		throw 'Abstract method call'
	}
	, setReadOnly: function (_0x9f6cx1) {
		this['getSchedulingView']()['setReadOnly'](_0x9f6cx1)
	}
	, isReadOnly: function () {
		return this['getSchedulingView']()['isReadOnly']()
	}
	, setupClearCenterDateCache: function () {
		this['mon'](this['getSchedulingView']()['getScrollable'](), 'scroll', this['clearCenterDateCache'], this)
	}
	, getViewportCenterDateCached: function () {
		if (this['cachedCenterDate']) {
			return this['cachedCenterDate']
		};
		return this['cachedCenterDate'] = this['getViewportCenterDate']()
	}
	, clearCenterDateCache: function (_0x9f6cx5, _0x9f6cx4, _0x9f6cx3) {
		var _0x9f6cx7 = this['isHorizontal']()
			, _0x9f6cx1 = this['viewPresetActiveScroll'];
		var _0x9f6cx2 = _0x9f6cx1 && (_0x9f6cx7 ? _0x9f6cx4 === _0x9f6cx1['left'] : _0x9f6cx3 == _0x9f6cx1['top']);
		if (!_0x9f6cx2) {
			this['cachedCenterDate'] = null;
			this['viewPresetActiveScroll'] = null
		}
	}
	, switchViewPreset: function () {
		this['setViewPreset']['apply'](this, arguments)
	}
	, setViewPreset: function (_0x9f6cxe, _0x9f6cx1, _0x9f6cx3, _0x9f6cx7, _0x9f6cxd) {
		_0x9f6cxd = _0x9f6cxd || {};
		var _0x9f6cx2 = _0x9f6cxd['centerDate']
			, _0x9f6cx4 = this['timeAxis']
			, _0x9f6cx9 = this['getSchedulingView']();
		if (typeof _0x9f6cxe === 'string') {
			_0x9f6cxe = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0x9f6cxe)
		};
		if (!_0x9f6cxe) {
			throw new Error('View preset not found')
		};
		if (this['fireEvent']('beforeviewchange', this, _0x9f6cxe, _0x9f6cx1, _0x9f6cx3) !== false) {
			this['viewPreset'] = _0x9f6cxe['name'];
			var _0x9f6cx13 = this['isHorizontal']()
				, _0x9f6cxa = this['isVertical']();
			if (!(_0x9f6cx7 && _0x9f6cx4['isConfigured'])) {
				var _0x9f6cx5 = {
					weekStartDay: this['weekStartDay'] !== undefined ? this['weekStartDay'] : (this['L'] ? this.L('weekStartDay') : 1)
					, startTime: this['startTime']
					, endTime: this['endTime']
				};
				if (_0x9f6cx7 || !this['rendered']) {
					if (_0x9f6cx4['getCount']() === 0 || _0x9f6cx1) {
						_0x9f6cx5['start'] = _0x9f6cx1 || new Date();
						_0x9f6cx5['end'] = _0x9f6cx3
					}
				}
				else {
					if (_0x9f6cx1) {
						_0x9f6cx5['start'] = _0x9f6cx1;
						_0x9f6cx5['end'] = _0x9f6cx3;
						if (!_0x9f6cx2 && _0x9f6cx3) {
							if (this['infiniteScroll'] && _0x9f6cx9['cachedScrollDate'] && _0x9f6cx9['cachedScrollDateIsCentered']) {
								_0x9f6cx2 = _0x9f6cx9['cachedScrollDate']
							}
							else {
								_0x9f6cx2 = new Date((_0x9f6cx1['getTime']() + _0x9f6cx3['getTime']()) / 2)
							}
						}
					}
					else {
						_0x9f6cx5['start'] = _0x9f6cx4['getStart']();
						_0x9f6cx5['end'] = _0x9f6cx3 || _0x9f6cx4['getEnd']();
						if (!_0x9f6cx2) {
							if (this['infiniteScroll'] && _0x9f6cx9['cachedScrollDate'] && _0x9f6cx9['cachedScrollDateIsCentered']) {
								_0x9f6cx2 = _0x9f6cx9['cachedScrollDate']
							}
							else {
								_0x9f6cx2 = this['getViewportCenterDateCached']()
							}
						}
					}
				};
				_0x9f6cx4['consumeViewPreset'](_0x9f6cxe);
				_0x9f6cx4['reconfigure'](_0x9f6cx5, true);
				this['timeAxisViewModel']['reconfigure']({
					viewPreset: this['viewPreset']
					, headerConfig: _0x9f6cxe['headerConfig']
					, columnLinesFor: _0x9f6cxe['columnLinesFor'] || 'middle'
					, rowHeightHorizontal: this['readRowHeightFromPreset'] ? _0x9f6cxe['rowHeight'] : (this['rowHeight'] || this['timeAxisViewModel']['getViewRowHeight']())
					, tickWidth: _0x9f6cx13 ? _0x9f6cxe['timeColumnWidth'] : _0x9f6cxe['timeRowHeight'] || _0x9f6cxe['timeColumnWidth'] || 60
					, timeColumnWidth: _0x9f6cxe['timeColumnWidth']
					, rowHeightVertical: _0x9f6cxe['timeRowHeight'] || _0x9f6cxe['timeColumnWidth'] || 60
					, timeAxisColumnWidth: _0x9f6cxe['timeAxisColumnWidth']
					, resourceColumnWidth: this['resourceColumnWidth'] || _0x9f6cxe['resourceColumnWidth'] || 100
				})
			};
			_0x9f6cx9['setDisplayDateFormat'](_0x9f6cxe['displayDateFormat']);
			if (_0x9f6cxa) {
				_0x9f6cx9['setColumnWidth'](this['resourceColumnWidth'] || _0x9f6cxe['resourceColumnWidth'] || 100, true)
			};
			var _0x9f6cxb = _0x9f6cx9['getOuterEl']();
			if (!_0x9f6cxd['notScroll'] && _0x9f6cxb && this['getView']()['el']) {
				if (_0x9f6cx2) {
					this['cachedCenterDate'] = _0x9f6cx2;
					var _0x9f6cxc = null
						, _0x9f6cx8 = null;
					if (_0x9f6cxa) {
						_0x9f6cx8 = Math['max'](Math['floor'](_0x9f6cx9['getCoordinateFromDate'](_0x9f6cx2, true) - _0x9f6cx9['getViewContainerHeight']() / 2), 0);
						this['viewPresetActiveScroll'] = {
							top: _0x9f6cx8
						};
						_0x9f6cx9['scrollVerticallyTo'](_0x9f6cx8)
					}
					else {
						_0x9f6cxc = Math['max'](Math['floor'](_0x9f6cx9['getCoordinateFromDate'](_0x9f6cx2, true) - _0x9f6cxb['getWidth']() / 2), 0);
						this['viewPresetActiveScroll'] = {
							left: _0x9f6cxc
						};
						if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
							var _0x9f6cx6 = _0x9f6cx9['up']('timelinegrid,timelinetree')['normalScrollbarScroller'];
							_0x9f6cx6 && _0x9f6cx6['scrollTo'](_0x9f6cxc)
						};
						_0x9f6cx9['headerCt']['scrollTo'](_0x9f6cxc);
						_0x9f6cx9['scrollTo'](_0x9f6cxc)
					}
				}
				else {
					if (_0x9f6cx13) {
						_0x9f6cx9['scrollHorizontallyTo'](0)
					}
					else {
						_0x9f6cx9['scrollVerticallyTo'](0)
					}
				}
			}
		}
	}
	, getViewPreset: function () {
		return this['viewPreset']
	}
	, getStart: function () {
		return this['getStartDate']()
	}
	, getStartDate: function () {
		return this['timeAxis']['getStart']()
	}
	, getEnd: function () {
		return this['getEndDate']()
	}
	, getEndDate: function () {
		return this['timeAxis']['getEnd']()
	}
	, setTimeColumnWidth: function (_0x9f6cx2, _0x9f6cx1) {
		this['timeAxisViewModel']['setTickWidth'](_0x9f6cx2, _0x9f6cx1)
	}
	, getTimeColumnWidth: function () {
		return this['timeAxisViewModel']['getTickWidth']()
	}
	, getRowHeight: function () {
		return this['timeAxisViewModel']['getViewRowHeight']()
	}
	, shiftNext: function (_0x9f6cx1) {
		this['suspendLayouts'] && this['suspendLayouts']();
		this['timeAxis']['shiftNext'](_0x9f6cx1);
		this['suspendLayouts'] && this['resumeLayouts'](true)
	}
	, shiftPrevious: function (_0x9f6cx1) {
		this['suspendLayouts'] && this['suspendLayouts']();
		this['timeAxis']['shiftPrevious'](_0x9f6cx1);
		this['suspendLayouts'] && this['resumeLayouts'](true)
	}
	, goToNow: function () {
		this['setTimeSpan'](new Date())
	}
	, setTimeSpan: function (_0x9f6cx2, _0x9f6cx1) {
		if (this['timeAxis']) {
			this['timeAxis']['setTimeSpan'](_0x9f6cx2, _0x9f6cx1)
		}
	}
	, setStart: function (_0x9f6cx1) {
		this['setStartDate'](_0x9f6cx1)
	}
	, setEnd: function (_0x9f6cx1) {
		this['setEndDate'](_0x9f6cx1)
	}
	, setStartDate: function (_0x9f6cx1) {
		this['setTimeSpan'](_0x9f6cx1)
	}
	, setEndDate: function (_0x9f6cx1) {
		this['setTimeSpan'](null, _0x9f6cx1)
	}
	, getTimeAxis: function () {
		return this['timeAxis']
	}
	, scrollToDate: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx1 = this['getSchedulingView']();
		var _0x9f6cx4 = _0x9f6cx1['getCoordinateFromDate'](_0x9f6cx5, true);
		this['scrollToCoordinate'](_0x9f6cx4, _0x9f6cx5, _0x9f6cx2, false, _0x9f6cx3)
	}
	, scrollToDateCentered: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this['getSchedulingView']();
		var _0x9f6cx4 = 0;
		if (_0x9f6cx1['isHorizontal']()) {
			_0x9f6cx4 = _0x9f6cx1['getBox']()['width'] / 2
		}
		else {
			_0x9f6cx4 = _0x9f6cx1['getBox']()['height'] / 2
		};
		var _0x9f6cx3 = Math['round'](_0x9f6cx1['getCoordinateFromDate'](_0x9f6cx5, true) - _0x9f6cx4);
		this['scrollToCoordinate'](_0x9f6cx3, _0x9f6cx5, _0x9f6cx2, true)
	}
	, scrollToCoordinate: function (_0x9f6cxc, _0x9f6cx5, _0x9f6cx2, _0x9f6cx7, _0x9f6cx6) {
		var _0x9f6cx9 = this['getSchedulingView']();
		var _0x9f6cx8 = this;
		_0x9f6cx6 = _0x9f6cx6 || 0;
		if (_0x9f6cxc < 0 && !_0x9f6cx9['isWeekView']()) {
			if (this['infiniteScroll']) {
				_0x9f6cx9['shiftToDate'](_0x9f6cx5, _0x9f6cx7)
			}
			else {
				var _0x9f6cx3 = (this['timeAxis']['getEnd']() - this['timeAxis']['getStart']()) / 2;
				var _0x9f6cx1 = new Date(_0x9f6cx5['getTime']() - _0x9f6cx3);
				var _0x9f6cx4 = new Date(_0x9f6cx5['getTime']() + _0x9f6cx3);
				if (_0x9f6cx1 - this['getStart']() !== 0 && _0x9f6cx4 - this['getEnd']() !== 0) {
					this['setTimeSpan'](_0x9f6cx1, _0x9f6cx4);
					if (_0x9f6cx7) {
						_0x9f6cx8['scrollToDateCentered'](_0x9f6cx5, _0x9f6cx2)
					}
					else {
						_0x9f6cx8['scrollToDate'](_0x9f6cx5, _0x9f6cx2, _0x9f6cx6)
					}
				}
			};
			return
		};
		if (this['isHorizontal']()) {
			_0x9f6cx9['scrollHorizontallyTo'](_0x9f6cxc - _0x9f6cx6, _0x9f6cx2)
		}
		else {
			_0x9f6cx9['scrollVerticallyTo'](_0x9f6cxc - _0x9f6cx6, _0x9f6cx2)
		}
	}
	, getViewportCenterDate: function () {
		return this['getSchedulingView']()['getViewportCenterDate']()
	}
	, addCls: function () {
		throw 'Abstract method call'
	}
	, removeCls: function () {
		throw 'Abstract method call'
	}
	, registerRenderer: function (_0x9f6cx2, _0x9f6cx1) {
		this['renderers']['push']({
			fn: _0x9f6cx2
			, scope: _0x9f6cx1
		})
	}
	, deregisterRenderer: function (_0x9f6cx2, _0x9f6cx1) {
		Ext['each'](this['renderers'], function (_0x9f6cx5, _0x9f6cx3) {
			if (_0x9f6cx2 === _0x9f6cx5) {
				Ext['Array']['removeAt'](this['renderers'], _0x9f6cx3);
				return false
			}
		})
	}
	, getCrudManager: function () {
		return this['crudManager']
	}
	, setCrudManager: function (_0x9f6cx1) {
		this['crudManager'] = _0x9f6cx1
	}
});
Ext.define('Ext.ux.Scheduler.view.HorizontalTimeAxis', {
	extend: 'Ext.util.Observable'
	, requires: ['Ext.XTemplate']
	, trackHeaderOver: true
	, compactCellWidthThreshold: 15
	, baseCls: 'sch-column-header'
	, tableCls: 'sch-header-row'
	, enableTickResizing: false
	, headerHtmlRowTpl: '<table border="0" cellspacing="0" cellpadding="0" style="width: {totalWidth}px; {tstyle}" class="{{tableCls}} sch-header-row-{position} {cls}"><tbody><tr><tpl for="cells"><td class="{{baseCls}} {headerCls} sch-header-cell-{align}" data-date="{[fm.date(values.start, \'Ymd_His\')]}" style="text-align: {align}; width: {width}px; {style}" tabIndex="0"headerPosition="{parent.position}" headerIndex="{[xindex-1]}"><div class="sch-simple-timeheader">{header}</div>{{resizeHandle}}</td></tpl></tr></tbody></table>'
	, model: null
	, hoverCls: ''
	, containerEl: null
	, height: null
	, constructor: function (_0x9f6cx5) {
		var _0x9f6cx3 = this;
		var _0x9f6cx1 = !!Ext['versions']['touch'];
		Ext['apply'](this, _0x9f6cx5);
		_0x9f6cx3['callParent'](arguments);
		_0x9f6cx3['model']['on']('update', _0x9f6cx3['onModelUpdate'], this, {
			priority: 5
		});
		_0x9f6cx3['containerEl'] = Ext['get'](_0x9f6cx3['containerEl']);
		if (!(_0x9f6cx3['headerHtmlRowTpl'] instanceof Ext['Template'])) {
			if (Ext['isString'](_0x9f6cx3['headerHtmlRowTpl'])) {
				_0x9f6cx3['headerHtmlRowTpl'] = _0x9f6cx3['headerHtmlRowTpl']['replace']('{{baseCls}}', this['baseCls'])['replace']('{{tableCls}}', this['tableCls'])['replace']('{{resizeHandle}}', this['enableTickResizing'] ? '<div class="sch-header-cell-resizehandle"></div>' : '')
			};
			_0x9f6cx3['headerHtmlRowTpl'] = new Ext.XTemplate(_0x9f6cx3['headerHtmlRowTpl'])
		};
		if (_0x9f6cx3['trackHeaderOver'] && _0x9f6cx3['hoverCls']) {
			_0x9f6cx3['containerEl']['on']({
				mousemove: _0x9f6cx3['highlightCell']
				, delegate: '.' + this['baseCls']
				, scope: _0x9f6cx3
			});
			_0x9f6cx3['containerEl']['on']({
				mouseleave: _0x9f6cx3['clearHighlight']
				, scope: _0x9f6cx3
			})
		};
		var _0x9f6cx2 = {
			scope: this
			, delegate: '.' + this['baseCls']
		};
		if (_0x9f6cx1) {
			_0x9f6cx2['tap'] = this['onElClick']('tap');
			_0x9f6cx2['doubletap'] = this['onElClick']('doubletap')
		}
		else {
			_0x9f6cx2['click'] = this['onElClick']('click');
			_0x9f6cx2['dblclick'] = this['onElClick']('dblclick');
			_0x9f6cx2['contextmenu'] = this['onElClick']('contextmenu')
		};
		_0x9f6cx3['_listenerCfg'] = _0x9f6cx2;
		if (_0x9f6cx3['containerEl']) {
			_0x9f6cx3['containerEl']['on'](_0x9f6cx2)
		}
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['containerEl']) {
			_0x9f6cx1['containerEl']['un'](_0x9f6cx1._listenerCfg);
			_0x9f6cx1['containerEl']['un']({
				mousemove: _0x9f6cx1['highlightCell']
				, delegate: '.sch-simple-timeheader'
				, scope: _0x9f6cx1
			});
			_0x9f6cx1['containerEl']['un']({
				mouseleave: _0x9f6cx1['clearHighlight']
				, scope: _0x9f6cx1
			})
		};
		_0x9f6cx1['model']['un']('update', _0x9f6cx1['onModelUpdate'], this, {
			priority: 5
		})
	}
	, onModelUpdate: function () {
		this['height'] = null;
		this['render']()
	}
	, getHTML: function () {
		var _0x9f6cx5 = this['model']['getColumnConfig']();
		var _0x9f6cx2 = this['model']['getTotalWidth']();
		var _0x9f6cx1 = Ext['Object']['getKeys'](_0x9f6cx5)['length'];
		var _0x9f6cx3 = '';
		if (_0x9f6cx5['top']) {
			this['embedCellWidths'](_0x9f6cx5['top']);
			_0x9f6cx3 += this['headerHtmlRowTpl']['apply']({
				totalWidth: _0x9f6cx2
				, cells: _0x9f6cx5['top']
				, position: 'top'
				, tstyle: 'border-top : 0;'
			})
		};
		if (_0x9f6cx5['middle']) {
			this['embedCellWidths'](_0x9f6cx5['middle']);
			_0x9f6cx3 += this['headerHtmlRowTpl']['apply']({
				totalWidth: _0x9f6cx2
				, cells: _0x9f6cx5['middle']
				, position: 'middle'
				, tstyle: _0x9f6cx5['top'] ? '' : 'border-top : 0;'
				, cls: !_0x9f6cx5['bottom'] && this['model']['getTickWidth']() <= this['compactCellWidthThreshold'] ? 'sch-header-row-compact' : ''
			})
		};
		if (_0x9f6cx5['bottom']) {
			this['embedCellWidths'](_0x9f6cx5['bottom']);
			_0x9f6cx3 += this['headerHtmlRowTpl']['apply']({
				totalWidth: _0x9f6cx2
				, cells: _0x9f6cx5['bottom']
				, position: 'bottom'
				, cls: this['model']['getTickWidth']() <= this['compactCellWidthThreshold'] ? 'sch-header-row-compact' : ''
			})
		};
		return _0x9f6cx3
	}
	, deleteTimeAxisRows: function () {
		var _0x9f6cx1 = this['containerEl']
			, _0x9f6cx2 = _0x9f6cx1['dom'];
		Ext['fly'](_0x9f6cx2)['select']('table')['remove']()
	}
	, render: function () {
		if (!this['containerEl']) {
			return
		};
		var _0x9f6cx3 = this['containerEl']
			, _0x9f6cx4 = _0x9f6cx3['dom']
			, _0x9f6cx5 = _0x9f6cx4['style']['display']
			, _0x9f6cx1 = this['model']['getColumnConfig']()
			, _0x9f6cx2 = _0x9f6cx4['parentNode'];
		_0x9f6cx4['style']['display'] = 'none';
		_0x9f6cx2['removeChild'](_0x9f6cx4);
		this['deleteTimeAxisRows']();
		_0x9f6cx4['insertAdjacentHTML']('afterbegin', this['getHTML']());
		if (!_0x9f6cx1['top'] && !_0x9f6cx1['middle']) {
			this['containerEl']['addCls']('sch-header-single-row')
		}
		else {
			this['containerEl']['removeCls']('sch-header-single-row')
		};
		_0x9f6cx2 && _0x9f6cx2['appendChild'](_0x9f6cx4);
		_0x9f6cx4['style']['display'] = _0x9f6cx5;
		this['fireEvent']('refresh', this)
	}
	, embedCellWidths: function (_0x9f6cx2, _0x9f6cx4) {
		for (var _0x9f6cx5 = 0; _0x9f6cx5 < _0x9f6cx2['length']; _0x9f6cx5++) {
			var _0x9f6cx1 = _0x9f6cx2[_0x9f6cx5];
			var _0x9f6cx3 = this['model']['getDistanceBetweenDates'](_0x9f6cx1['start'], _0x9f6cx1['end']);
			if (_0x9f6cx3) {
				_0x9f6cx1['width'] = _0x9f6cx3
			}
			else {
				_0x9f6cx1['width'] = 0;
				_0x9f6cx1['style'] = 'display: none'
			}
		}
	}
	, onElClick: function (_0x9f6cx1) {
		return function (_0x9f6cx4, _0x9f6cx7) {
			_0x9f6cx7 = _0x9f6cx4['delegatedTarget'] || _0x9f6cx7;
			var _0x9f6cx2 = Ext['fly'](_0x9f6cx7)['getAttribute']('headerPosition')
				, _0x9f6cx5 = Ext['fly'](_0x9f6cx7)['getAttribute']('headerIndex')
				, _0x9f6cx3 = this['model']['getColumnConfig']()[_0x9f6cx2][_0x9f6cx5];
			this['fireEvent']('timeheader' + _0x9f6cx1, this, _0x9f6cx3['start'], _0x9f6cx3['end'], _0x9f6cx4)
		}
	}
	, highlightCell: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx1 !== _0x9f6cx2['highlightedCell']) {
			_0x9f6cx2['clearHighlight']();
			_0x9f6cx2['highlightedCell'] = _0x9f6cx1;
			Ext['fly'](_0x9f6cx1)['addCls'](_0x9f6cx2['hoverCls'])
		}
	}
	, clearHighlight: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['highlightedCell'];
		if (_0x9f6cx1) {
			Ext['fly'](_0x9f6cx1)['removeCls'](_0x9f6cx2['hoverCls']);
			delete _0x9f6cx2['highlightedCell']
		}
	}
});
Ext.define('Ext.ux.Scheduler.feature.HeaderResize', {
	extend: 'Ext.AbstractPlugin'
	, selector: null
	, currentCell: null
	, originalCellWidth: null
	, startClientX: null
	, timeAxisViewModel: null
	, minCellWidth: 15
	, init: function (_0x9f6cx1) {
		_0x9f6cx1['on']('render', this['onColumnRender'], this)
	}
	, onColumnRender: function (_0x9f6cx1) {
		_0x9f6cx1['getEl']()['on']('mousedown', this['onMouseDown'], this, {
			delegate: this['selector']
		})
	}
	, getClientX: function (_0x9f6cx1) {
		return Ext['isNumber'](_0x9f6cx1['clientX']) ? _0x9f6cx1['clientX'] : _0x9f6cx1['browserEvent']['clientX']
	}
	, onMouseDown: function (_0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx2['parentElement'];
		_0x9f6cx5['originalCellWidth'] = Ext['fly'](_0x9f6cx1)['getWidth']();
		_0x9f6cx5['startClientX'] = _0x9f6cx5['getClientX'](_0x9f6cx3);
		_0x9f6cx5['currentCell'] = _0x9f6cx1;
		_0x9f6cx5['getCmp']()['mon'](Ext['getBody'](), 'mousemove', _0x9f6cx5['onMouseMove'], _0x9f6cx5);
		_0x9f6cx5['getCmp']()['mon'](Ext['getBody'](), 'mouseup', _0x9f6cx5['onMouseUp'], _0x9f6cx5, {
			capture: true
			, single: true
		})
	}
	, onMouseMove: function (_0x9f6cx7, _0x9f6cxc) {
		var _0x9f6cx8 = this
			, _0x9f6cx5 = _0x9f6cx8['currentCell']
			, _0x9f6cx6 = _0x9f6cx5['nextSibling']
			, _0x9f6cx9 = _0x9f6cx8['startClientX'] - _0x9f6cx8['getClientX'](_0x9f6cx7)
			, _0x9f6cx2 = _0x9f6cx8['originalCellWidth']
			, _0x9f6cx3 = Math['max'](_0x9f6cx8['minCellWidth'], _0x9f6cx2 - _0x9f6cx9);
		if (_0x9f6cx6 && _0x9f6cx3 < _0x9f6cx2) {
			var _0x9f6cx1 = Math['min'](_0x9f6cx2 * 2 - _0x9f6cx8['minCellWidth'], _0x9f6cx2 + _0x9f6cx9);
			_0x9f6cx6['style']['width'] = _0x9f6cx1 + 'px'
		};
		_0x9f6cx5['style']['width'] = _0x9f6cx3 + 'px'
	}
	, onMouseUp: function (_0x9f6cx3, _0x9f6cxc) {
		var _0x9f6cx6 = this
			, _0x9f6cx8 = _0x9f6cx6['getCmp']()['up']('timelinegrid,timelinetree')
			, _0x9f6cx1 = _0x9f6cx8['getSchedulingView']()['getDateFromCoordinate'](Ext['fly'](_0x9f6cx6['currentCell'])['getLeft']())
			, _0x9f6cx5 = Ext['fly'](_0x9f6cx6['currentCell'])['getX']() - _0x9f6cx8['getSchedulingView']()['getX']()
			, _0x9f6cx2 = _0x9f6cx6['getClientX'](_0x9f6cx3) - _0x9f6cx6['startClientX']
			, _0x9f6cx7 = (_0x9f6cx6['originalCellWidth'] / _0x9f6cx6['timeAxisViewModel']['getTickWidth']())
			, _0x9f6cx9 = Math['max'](_0x9f6cx6['minCellWidth'], _0x9f6cx6['timeAxisViewModel']['getTickWidth']() + (_0x9f6cx2 / _0x9f6cx7));
		_0x9f6cx6['timeAxisViewModel']['setTickWidth'](Math['round'](_0x9f6cx9));
		_0x9f6cx8['scrollToDate'](_0x9f6cx1, false, _0x9f6cx5);
		_0x9f6cx6['getCmp']()['mun'](Ext['getBody'](), 'mousemove', _0x9f6cx6['onMouseMove'], _0x9f6cx6);
		this['currentCell'] = this['offset'] = null
	}
});
Ext.define('Ext.ux.Scheduler.column.timeAxis.Horizontal', {
	extend: 'Ext.grid.column.Column'
	, alias: 'widget.timeaxiscolumn'
	, requires: ['Ext.ux.Scheduler.view.HorizontalTimeAxis', 'Ext.ux.Scheduler.feature.HeaderResize']
	, draggable: false
	, groupable: false
	, hideable: false
	, sortable: false
	, resizable: false
	, menuDisabled: true
	, cls: 'sch-simple-timeaxis'
	, tdCls: 'sch-timetd'
	, enableLocking: false
	, locked: false
	, lockable: false
	, enableTickResizing: false
	, cellFocusable: false
	, timeAxisViewModel: null
	, headerView: null
	, hoverCls: ''
	, ownHoverCls: 'sch-column-header-over'
	, trackHeaderOver: true
	, compactCellWidthThreshold: (Ext['theme'] && Ext['theme']['name']['toLowerCase']() === 'classic') ? 15 : 35
	, initComponent: function () {
		if (this['enableTickResizing']) {
			this['addPlugin'](new Ext.ux.Scheduler['feature'].HeaderResize({
				selector: '.sch-header-cell-resizehandle'
				, timeAxisViewModel: this['timeAxisViewModel']
			}))
		};
		this['callParent'](arguments)
	}
	, afterRender: function () {
		var _0x9f6cx2 = this;
		var _0x9f6cx1 = _0x9f6cx2['titleEl']['createChild']({
			cls: 'sch-horizontaltimeaxis-ct'
		});
		if (!(_0x9f6cx2['headerView'] instanceof Ext.ux.Scheduler['view']['HorizontalTimeAxis'])) {
			_0x9f6cx2['headerView'] = Ext['create'](Ext['applyIf'](_0x9f6cx2['headerView'] || {}, {
				xclass: 'Ext.ux.Scheduler.view.HorizontalTimeAxis'
				, model: _0x9f6cx2['timeAxisViewModel']
				, containerEl: _0x9f6cx1
				, hoverCls: _0x9f6cx2['ownHoverCls']
				, trackHeaderOver: _0x9f6cx2['trackHeaderOver']
				, enableTickResizing: this['enableTickResizing']
				, compactCellWidthThreshold: _0x9f6cx2['compactCellWidthThreshold']
			}))
		};
		_0x9f6cx2['headerView']['on']('refresh', _0x9f6cx2['onTimeAxisViewRefresh'], _0x9f6cx2);
		_0x9f6cx2['ownerCt']['on']('afterlayout', function () {
			if (!_0x9f6cx2['ownerCt']) {
				return
			};
			_0x9f6cx2['mon'](_0x9f6cx2['ownerCt'], 'resize', _0x9f6cx2['onHeaderContainerResize'], _0x9f6cx2);
			if (this['getWidth']() > 0) {
				if (_0x9f6cx2['getAvailableWidthForSchedule']() === _0x9f6cx2['timeAxisViewModel']['getAvailableWidth']()) {
					_0x9f6cx2['headerView']['render']()
				}
				else {
					_0x9f6cx2['timeAxisViewModel']['update'](_0x9f6cx2['getAvailableWidthForSchedule']())
				};
				_0x9f6cx2['setWidth'](_0x9f6cx2['timeAxisViewModel']['getTotalWidth']())
			}
		}, null, {
			single: true
		});
		this['enableBubble']('timeheaderclick', 'timeheaderdblclick', 'timeheadercontextmenu', 'horizontaltimeaxiscolumnrender');
		_0x9f6cx2['relayEvents'](_0x9f6cx2['headerView'], ['timeheaderclick', 'timeheaderdblclick', 'timeheadercontextmenu']);
		_0x9f6cx2['callParent'](arguments);
		_0x9f6cx2['focusable'] = false;
		this['fireEvent']('horizontaltimeaxiscolumnrender', this)
	}
	, initRenderData: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['renderData']['headerCls'] = _0x9f6cx1['renderData']['headerCls'] || _0x9f6cx1['headerCls'];
		return _0x9f6cx1['callParent'](arguments)
	}
	, destroy: function () {
		if (this['headerView']) {
			this['headerView']['destroy']();
			this['headerView'] = null
		};
		this['callParent'](arguments)
	}
	, onTimeAxisViewRefresh: function () {
		this['headerView']['un']('refresh', this['onTimeAxisViewRefresh'], this);
		var _0x9f6cx1 = this['timeAxisViewModel']['getTotalWidth']();
		if (this['getWidth']() !== _0x9f6cx1) {
			this['setWidth'](_0x9f6cx1)
		}
		else {
			this['updateLayout']()
		};
		this['ensureSizing']();
		this['headerView']['on']('refresh', this['onTimeAxisViewRefresh'], this)
	}
	, getAvailableWidthForSchedule: function () {
		if (!this['ownerCt']) {
			return 0
		};
		var _0x9f6cx3 = this['ownerCt']['isVisible'](true) ? this['ownerCt']['getWidth']() : (this['ownerCt']['lastBox'] && this['ownerCt']['lastBox']['width'] || 0)
			, _0x9f6cx1 = this['ownerCt']['items']
			, _0x9f6cx5;
		for (var _0x9f6cx2 = 1; _0x9f6cx2 < _0x9f6cx1['length']; _0x9f6cx2++) {
			_0x9f6cx5 = _0x9f6cx1['get'](_0x9f6cx2);
			if (!_0x9f6cx5['hidden']) {
				_0x9f6cx3 -= _0x9f6cx5['isVisible'](true) ? _0x9f6cx5['getWidth']() : (_0x9f6cx5['lastBox'] && _0x9f6cx5['lastBox']['width'] || 0)
			}
		};
		return _0x9f6cx3 - Ext['getScrollbarSize']()['width'] - 1
	}
	, onResize: function () {
		this['callParent'](arguments);
		this['timeAxisViewModel']['setAvailableWidth'](this['getAvailableWidthForSchedule']())
	}
	, onHeaderContainerResize: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx1, _0x9f6cx2, _0x9f6cx3) {
		this['timeAxisViewModel']['setAvailableWidth'](this['getAvailableWidthForSchedule']());
		if (_0x9f6cx1 !== _0x9f6cx3) {
			this['headerView']['render']()
		}
	}
	, ensureSizing: function () {
		var _0x9f6cx2 = this['headerView']['containerEl'];
		var _0x9f6cx4 = this['ownerCt']['getHeight']();
		var _0x9f6cx1 = _0x9f6cx2['getHeight']();
		var _0x9f6cx3 = _0x9f6cx4 - _0x9f6cx1;
		if (_0x9f6cx3 > 0) {
			var _0x9f6cx5 = _0x9f6cx2['down']('table:last-of-type tr');
			if (_0x9f6cx5) {
				_0x9f6cx2['select']('table tr')['setHeight'](_0x9f6cx4 / this['timeAxisViewModel']['getHeaders']()['length'])
			}
		}
	}
	, refresh: function () {
		if (this['rendered']) {
			this['timeAxisViewModel']['update'](null, true);
			this['headerView']['render']()
		}
	}
});
Ext.define('Ext.ux.Scheduler.plugin.CurrentTimeLine', {
	extend: 'Ext.ux.Scheduler.plugin.Lines'
	, alias: 'plugin.scheduler_currenttimeline'
	, mixins: ['Ext.ux.Scheduler.mixin.Localizable']
	, requires: ['Ext.data.JsonStore']
	, updateInterval: 60000
	, showHeaderElements: true
	, autoUpdate: true
	, expandToFitView: true
	, timer: null
	, init: function (_0x9f6cx5) {
		if (Ext['getVersion']('touch')) {
			this['showHeaderElements'] = false
		};
		var _0x9f6cx2 = new Ext['data'].JsonStore({
			autoDestroy: true
			, fields: ['Date', 'Cls', 'Text']
			, data: [{
				Date: new Date()
				, Cls: 'sch-todayLine'
				, Text: this.L('tooltipText')
			}]
		});
		var _0x9f6cx1 = _0x9f6cx2['first']();
		if (this['autoUpdate']) {
			this['timer'] = setInterval(function () {
				_0x9f6cx1['set']('Date', new Date())
			}, this['updateInterval'])
		};
		this['store'] = _0x9f6cx2;
		this['callParent'](arguments)
	}
	, destroy: function () {
		clearInterval(this['timer']);
		this['timer'] = null;
		if (this['store']['autoDestroy']) {
			this['store']['destroy']()
		};
		this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Scheduler.layout.TableLayout', {
	extend: 'Ext.view.TableLayout'
	, alias: 'layout.timeline_tablelayout'
	, beginLayout: function (_0x9f6cx7) {
		var _0x9f6cx3 = this
			, _0x9f6cx1 = _0x9f6cx3['owner']
			, _0x9f6cx4 = _0x9f6cx1['ownerGrid']
			, _0x9f6cx5 = _0x9f6cx1['lockingPartner']
			, _0x9f6cx6 = _0x9f6cx5 && _0x9f6cx5['grid']['isVisible']() && !_0x9f6cx5['grid']['collapsed']
			, _0x9f6cx2 = _0x9f6cx7['context'];
		_0x9f6cx7['doSyncRowHeights'] = _0x9f6cx6 && (_0x9f6cx4['syncRowHeight'] || _0x9f6cx4['syncRowHeightOnNextLayout']);
		if (!_0x9f6cx3['columnFlusherId']) {
			_0x9f6cx3['columnFlusherId'] = _0x9f6cx3['id'] + '-columns';
			_0x9f6cx3['rowHeightFlusherId'] = _0x9f6cx3['id'] + '-rows'
		};
		if (_0x9f6cx3['owner']['bufferedRenderer']) {
			_0x9f6cx3['owner']['bufferedRenderer']['beforeTableLayout'](_0x9f6cx7)
		};
		_0x9f6cx3['superclass']['superclass']['beginLayout']['apply'](this, [_0x9f6cx7]);
		if (_0x9f6cx6 && _0x9f6cx5['componentLayout']['isRunning']()) {
			if (!_0x9f6cx7['lockingPartnerContext']) {
				(_0x9f6cx7['lockingPartnerContext'] = _0x9f6cx2['getCmp'](_0x9f6cx5))['lockingPartnerContext'] = _0x9f6cx7
			};
			if (_0x9f6cx7['doSyncRowHeights']) {
				_0x9f6cx7['rowHeightSynchronizer'] = _0x9f6cx3['owner']['syncRowHeightBegin']()
			}
		};
		(_0x9f6cx7['headerContext'] = _0x9f6cx2['getCmp'](_0x9f6cx3['headerCt']))['viewContext'] = _0x9f6cx7
	}
});
Ext.define('Ext.ux.Scheduler.patches.LockingScroller', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.scroll.Scroller'
	, minVersion: '6.2.0'
	, overrides: {
		scrollTo: function () {
			if (this['getNormalScroller'] && !this['getNormalScroller']()) {
				if (Ext.ux.Scheduler['panel']['TimelineGridPanel'] && this['component'] instanceof Ext.ux.Scheduler['panel']['TimelineGridPanel'] || Ext.ux.Scheduler['panel']['TimelineTreePanel'] && this['component'] instanceof Ext.ux.Scheduler['panel']['TimelineTreePanel']) {
					return
				}
			};
			return this['callParent'](arguments)
		}
	}
});
Ext.define('Ext.ux.Scheduler.plugin.Zones', {
	extend: 'Ext.ux.Scheduler.feature.AbstractTimeSpan'
	, alias: 'plugin.scheduler_zones'
	, requires: ['Ext.ux.Scheduler.model.Range']
	, innerTpl: null
	, cls: 'sch-zone'
	, side: null
	, init: function (_0x9f6cx1) {
		if (typeof this['innerTpl'] === 'string') {
			this['innerTpl'] = new Ext.XTemplate(this['innerTpl'])
		};
		this['side'] = _0x9f6cx1['rtl'] ? 'right' : 'left';
		var _0x9f6cx2 = this['innerTpl'];
		if (!this['template']) {
			this['template'] = new Ext.XTemplate('<tpl for="."><div id="{id}" class="{$cls}" style="' + this['side'] + ':{left}px;top:{top}px;height:{height}px;width:{width}px;{style}">' + (_0x9f6cx2 ? '{[this.renderInner(values)]}' : '') + '</div></tpl>', {
				renderInner: function (_0x9f6cx5) {
					return _0x9f6cx2['apply'](_0x9f6cx5)
				}
			})
		};
		if (typeof this['innerHeaderTpl'] === 'string') {
			this['innerHeaderTpl'] = new Ext.XTemplate(this['innerHeaderTpl'])
		};
		this['callParent'](arguments)
	}
	, getElementData: function (_0x9f6cx8, _0x9f6cx3, _0x9f6cx12, _0x9f6cx7) {
		var _0x9f6cx6 = this['schedulerView']
			, _0x9f6cx10 = [];
		var _0x9f6cx5 = _0x9f6cx6['getTimeSpanRegion'](_0x9f6cx8, _0x9f6cx3, this['expandToFitView']);
		var _0x9f6cx2, _0x9f6cxa, _0x9f6cx1, _0x9f6cxc, _0x9f6cxb, _0x9f6cx4;
		_0x9f6cx12 = _0x9f6cx12 || this['store']['getRange']();
		for (var _0x9f6cxf = 0, _0x9f6cxd = _0x9f6cx12['length']; _0x9f6cxf < _0x9f6cxd; _0x9f6cxf++) {
			_0x9f6cx2 = _0x9f6cx12[_0x9f6cxf];
			_0x9f6cxa = _0x9f6cx2['getStartDate']();
			_0x9f6cx1 = _0x9f6cx2['getEndDate']();
			_0x9f6cx4 = this['getTemplateData'](_0x9f6cx2);
			if (_0x9f6cxa && _0x9f6cx1 && Ext.ux.Scheduler['util']['Date']['intersectSpans'](_0x9f6cxa, _0x9f6cx1, _0x9f6cx8, _0x9f6cx3)) {
				_0x9f6cxc = Ext['apply']({}, _0x9f6cx4);
				_0x9f6cxc['id'] = this['getElementId'](_0x9f6cx2);
				_0x9f6cxc['$cls'] = this['getElementCls'](_0x9f6cx2, _0x9f6cx4);
				if (_0x9f6cx6['isWeekView']()) {
					var _0x9f6cx11 = _0x9f6cx6['getTimeSpanRegion'](_0x9f6cxa, _0x9f6cx1);
					_0x9f6cxc['left'] = _0x9f6cx11['left'];
					_0x9f6cxc['top'] = _0x9f6cx11['top'];
					_0x9f6cxc['height'] = _0x9f6cx11['bottom'] - _0x9f6cx11['top'];
					_0x9f6cxc['width'] = _0x9f6cx11['right'] - _0x9f6cx11['left']
				}
				else {
					var _0x9f6cx14 = _0x9f6cx6['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cxa, _0x9f6cx8));
					var _0x9f6cxe = _0x9f6cx6['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cx1, _0x9f6cx3));
					if (_0x9f6cx6['isHorizontal']()) {
						_0x9f6cxc['left'] = _0x9f6cx14;
						_0x9f6cxc['top'] = _0x9f6cx5['top'];
						_0x9f6cxc['width'] = _0x9f6cx7 ? 0 : _0x9f6cxe - _0x9f6cx14;
						_0x9f6cxc['style'] = _0x9f6cx7 ? ('border-left-width:' + (_0x9f6cxe - _0x9f6cx14) + 'px') : ''
					}
					else {
						_0x9f6cxc['left'] = _0x9f6cx5['left'];
						_0x9f6cxc['top'] = _0x9f6cx14;
						_0x9f6cxc['height'] = _0x9f6cx7 ? 0 : _0x9f6cxe - _0x9f6cx14;
						_0x9f6cxc['style'] = _0x9f6cx7 ? ('border-top-width:' + (_0x9f6cxe - _0x9f6cx14) + 'px') : ''
					}
				};
				_0x9f6cx10['push'](_0x9f6cxc)
			}
		};
		return _0x9f6cx10
	}
	, getHeaderElementId: function (_0x9f6cx2, _0x9f6cx1) {
		return this['callParent']([_0x9f6cx2]) + (_0x9f6cx1 ? '-start' : '-end')
	}
	, getHeaderElementCls: function (_0x9f6cx2, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx5 = _0x9f6cx2['clsField'] || this['clsField'];
		if (!_0x9f6cx3) {
			_0x9f6cx3 = this['getTemplateData'](_0x9f6cx2)
		};
		return 'sch-header-indicator sch-header-indicator-' + (_0x9f6cx1 ? 'start ' : 'end ') + this['uniqueCls'] + ' ' + (_0x9f6cx3[_0x9f6cx5] || '')
	}
	, getZoneHeaderElementData: function (_0x9f6cx2, _0x9f6cx8, _0x9f6cx7, _0x9f6cx1) {
		var _0x9f6cx5 = _0x9f6cx1 ? _0x9f6cx7['getStartDate']() : _0x9f6cx7['getEndDate']()
			, _0x9f6cx4 = null
			, _0x9f6cx6, _0x9f6cx9, _0x9f6cx3;
		if (_0x9f6cx5 && Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0x9f6cx5, _0x9f6cx2, _0x9f6cx8)) {
			_0x9f6cx6 = this['getHeaderElementPosition'](_0x9f6cx5);
			_0x9f6cx9 = this['schedulerView']['isHorizontal']();
			_0x9f6cx3 = this['getTemplateData'](_0x9f6cx7);
			_0x9f6cx4 = Ext['apply']({
				id: this['getHeaderElementId'](_0x9f6cx7, _0x9f6cx1)
				, cls: this['getHeaderElementCls'](_0x9f6cx7, _0x9f6cx3, _0x9f6cx1)
				, isStart: _0x9f6cx1
				, side: _0x9f6cx9 ? this['side'] : 'top'
				, position: _0x9f6cx6
			}, _0x9f6cx3)
		};
		return _0x9f6cx4
	}
	, getHeaderElementData: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['timeAxis']['getStart']()
			, _0x9f6cx8 = this['timeAxis']['getEnd']()
			, _0x9f6cx4 = []
			, _0x9f6cx6, _0x9f6cx3, _0x9f6cxc;
		_0x9f6cx2 = _0x9f6cx2 || this['store']['getRange']();
		for (var _0x9f6cx7 = 0, _0x9f6cx5 = _0x9f6cx2['length']; _0x9f6cx7 < _0x9f6cx5; _0x9f6cx7++) {
			_0x9f6cx6 = _0x9f6cx2[_0x9f6cx7];
			_0x9f6cx3 = this['getZoneHeaderElementData'](_0x9f6cx1, _0x9f6cx8, _0x9f6cx6, true);
			if (_0x9f6cx3) {
				_0x9f6cx4['push'](_0x9f6cx3)
			};
			_0x9f6cxc = this['getZoneHeaderElementData'](_0x9f6cx1, _0x9f6cx8, _0x9f6cx6, false);
			if (_0x9f6cxc) {
				_0x9f6cx4['push'](_0x9f6cxc)
			}
		};
		return _0x9f6cx4
	}
	, updateZoneHeaderElement: function (_0x9f6cx1, _0x9f6cx2) {
		_0x9f6cx1['dom']['className'] = _0x9f6cx2['cls'];
		if (this['schedulerView']['isHorizontal']()) {
			this['setElementX'](_0x9f6cx1, _0x9f6cx2['position'])
		}
		else {
			_0x9f6cx1['setTop'](_0x9f6cx2['position'])
		}
	}
	, updateHeaderElement: function (_0x9f6cx5) {
		var _0x9f6cx1 = this['timeAxis']['getStart']()
			, _0x9f6cx6 = this['timeAxis']['getEnd']()
			, _0x9f6cx7 = Ext['get'](this['getHeaderElementId'](_0x9f6cx5, true))
			, _0x9f6cx4 = Ext['get'](this['getHeaderElementId'](_0x9f6cx5, false))
			, _0x9f6cx3 = this['getZoneHeaderElementData'](_0x9f6cx1, _0x9f6cx6, _0x9f6cx5, true)
			, _0x9f6cx2 = this['getZoneHeaderElementData'](_0x9f6cx1, _0x9f6cx6, _0x9f6cx5, false);
		if (!(_0x9f6cx7 && _0x9f6cx2) || !(_0x9f6cx4 && _0x9f6cx2)) {
			Ext['destroy'](_0x9f6cx7, _0x9f6cx4);
			this['renderHeaderElements']([_0x9f6cx5])
		}
		else {
			if (_0x9f6cx7) {
				if (!_0x9f6cx3) {
					Ext['destroy'](_0x9f6cx7)
				}
				else {
					this['updateZoneHeaderElement'](_0x9f6cx7, _0x9f6cx3)
				}
			};
			if (_0x9f6cx4) {
				if (!_0x9f6cx2) {
					Ext['destroy'](_0x9f6cx4)
				}
				else {
					this['updateZoneHeaderElement'](_0x9f6cx4, _0x9f6cx2)
				}
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.plugin.NonWorkingTime', {
	extend: 'Ext.ux.Scheduler.plugin.Zones'
	, alias: 'plugin.scheduler_nonworkingtime'
	, alternateClassName: 'Ext.ux.Gantt.feature.WorkingTime'
	, requires: ['Ext.data.Store', 'Ext.ux.Scheduler.model.Range']
	, expandToFitView: true
	, calendar: {
		type: 'calendar'
	}
	, timeAxis: null
	, init: function (_0x9f6cx1) {
		this['calendar'] = this['calendar'] && Ext['StoreMgr']['lookup'](this['calendar']);
		if (!this['calendar']) {
			Ext['Error']['raise']('Required attribute \'calendar\' missed during initialization of \'Ext.ux.Scheduler.plugin.NonWorkingTime\'')
		};
		this['store'] = new Ext['data'].Store({
			model: 'Ext.ux.Scheduler.model.Range'
			, autoDestroy: true
		});
		this['timeAxis'] = _0x9f6cx1['getTimeAxis']();
		this['callParent'](arguments);
		if (_0x9f6cx1['isWeekView']()) {
			_0x9f6cx1['normalGrid']['headerCt']['on']('afterlayout', this['onViewChange'], this)
		}
		else {
			_0x9f6cx1['on']('viewchange', this['onViewChange'], this)
		};
		this['bindCalendar'](this['calendar'])
	}
	, bindCalendar: function (_0x9f6cx2) {
		var _0x9f6cx1 = {
			datachanged: this['refresh']
			, update: this['refresh']
			, scope: this
			, delay: 1
		};
		if (this['calendar']) {
			this['calendar']['un'](_0x9f6cx1)
		};
		if (_0x9f6cx2) {
			_0x9f6cx2['on'](_0x9f6cx1)
		};
		this['calendar'] = _0x9f6cx2;
		this['refresh']()
	}
	, onViewReady: function () {
		this['callParent'](arguments);
		if (this['schedulerView']['isWeekView']()) {
			this['onTimelinePanelBeforeModeChange']();
			this['headerListeners'] = {}
		}
	}
	, onViewChange: function () {
		var _0x9f6cx2 = Ext.ux.Scheduler['util']['Date'];
		var _0x9f6cx1 = _0x9f6cx2['isUnitGreater'](this['timeAxis']['unit'], _0x9f6cx2.WEEK);
		this['setDisabled'](_0x9f6cx1);
		if (!_0x9f6cx1) {
			this['refresh']()
		}
	}
	, setDisabled: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['disabled'];
		this['callParent'](arguments);
		if (_0x9f6cx1 && !_0x9f6cx2) {
			this['refresh']()
		}
	}
	, refresh: function () {
		if (this['store'] && !this['store']['destroyed']) {
			this['store']['removeAll'](true);
			if (this['calendar']) {
				this['store']['add'](this['calendar']['getHolidaysRanges'](this['timeAxis']['getStart'](), this['timeAxis']['getEnd'](), true))
			}
		}
	}
	, destroy: function () {
		this['bindCalendar'](null);
		this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Scheduler.mixin.PartnerTimelinePanel', {
	extend: 'Ext.Mixin'
	, setupPartnerTimelinePanel: function (_0x9f6cx2) {
		var _0x9f6cx4 = this['partnerTimelinePanel'];
		var _0x9f6cx1 = _0x9f6cx4['lockedGrid'];
		var _0x9f6cx3 = this['lockedGrid'];
		_0x9f6cx1['mon'](_0x9f6cx3, 'resize', this['onLockedGridResize'], _0x9f6cx1);
		_0x9f6cx3['mon'](_0x9f6cx1, 'resize', this['onLockedGridResize'], _0x9f6cx3);
		var _0x9f6cx5 = _0x9f6cx4['isVisible']() ? _0x9f6cx4['lockedGrid']['getWidth']() : _0x9f6cx4['lockedGrid']['width'];
		if (_0x9f6cx1['getCollapsed']()) {
			this['mon'](_0x9f6cx1, 'viewready', function (_0x9f6cx7) {
				_0x9f6cx3['setWidth'](_0x9f6cx7['getWidth']())
			})
		}
		else {
			_0x9f6cx3['setWidth'](_0x9f6cx5)
		};
		this['on']('afterlayout', function () {
			if (_0x9f6cx1['getCollapsed']()) {
				_0x9f6cx3['collapse']()
			}
			else {
				_0x9f6cx3['expand']();
				_0x9f6cx3['setWidth'](_0x9f6cx5)
			}
		}, this, {
			single: true
		});
		_0x9f6cx1['on']({
			collapse: this['onPartnerCollapseExpand']
			, expand: this['onPartnerCollapseExpand']
			, scope: this
		});
		_0x9f6cx3['on']({
			collapse: this['onPartnerCollapseExpand']
			, expand: this['onPartnerCollapseExpand']
			, scope: _0x9f6cx4
		});
		this['setupScrollSync']();
		_0x9f6cx4['mon'](this, 'beforezoomchange', this['onBeforeZoomChange'], this);
		_0x9f6cx4['mon'](this, 'viewchange', this['onViewChange'], this);
		this['mon'](_0x9f6cx4, 'beforezoomchange', this['onBeforeZoomChange'], this);
		this['mon'](_0x9f6cx4, 'viewchange', this['onViewChange'], this)
	}
	, onLockedGridResize: function (_0x9f6cx2, _0x9f6cx1) {
		this['setWidth'](_0x9f6cx1)
	}
	, onPartnerCollapseExpand: function (_0x9f6cx1) {
		if (_0x9f6cx1['getCollapsed']()) {
			this['lockedGrid']['collapse']()
		}
		else {
			this['lockedGrid']['expand']()
		}
	}
	, setupScrollSync: function () {
		var _0x9f6cx8 = this['partnerTimelinePanel']['getSchedulingView']()
			, _0x9f6cx5 = _0x9f6cx8['getScrollable']()
			, _0x9f6cx7 = this['getSchedulingView']()
			, _0x9f6cx1 = _0x9f6cx7['getScrollable']()
			, _0x9f6cx4;

		function _0x9f6cx6(_0x9f6cxc) {
			var _0x9f6cx9 = _0x9f6cxc === _0x9f6cx1 ? _0x9f6cx1 : _0x9f6cx5
				, _0x9f6cxa = _0x9f6cxc === _0x9f6cx1 ? _0x9f6cx5 : _0x9f6cx1;
			_0x9f6cx9['component']['mun'](_0x9f6cx9, 'scrollstart', _0x9f6cx6);
			_0x9f6cxa['component']['mun'](_0x9f6cxa, 'scrollstart', _0x9f6cx6);
			_0x9f6cx9['component']['mon'](_0x9f6cx9, 'scroll', _0x9f6cx2);
			_0x9f6cx9['component']['mon'](_0x9f6cx9, 'scrollend', _0x9f6cx3)
		}

		function _0x9f6cx2(_0x9f6cx9, _0x9f6cxb) {
			var _0x9f6cxa = _0x9f6cx9 === _0x9f6cx1 ? _0x9f6cx1 : _0x9f6cx5
				, _0x9f6cx13 = _0x9f6cx9 === _0x9f6cx1 ? _0x9f6cx5 : _0x9f6cx1;
			var _0x9f6cxc = _0x9f6cx13['component']['headerCt']['getScrollable']();
			_0x9f6cxc && _0x9f6cxc['scrollTo'](_0x9f6cxb);
			_0x9f6cx13['scrollTo'](_0x9f6cxb)
		}

		function _0x9f6cx3(_0x9f6cxc) {
			var _0x9f6cx9 = _0x9f6cxc === _0x9f6cx1 ? _0x9f6cx1 : _0x9f6cx5
				, _0x9f6cxa = _0x9f6cxc === _0x9f6cx1 ? _0x9f6cx5 : _0x9f6cx1;
			_0x9f6cx9['component']['mun'](_0x9f6cx9, 'scroll', _0x9f6cx2);
			_0x9f6cx9['component']['mun'](_0x9f6cx9, 'scrollend', _0x9f6cx3);
			_0x9f6cx9['component']['mon'](_0x9f6cx9, 'scrollstart', _0x9f6cx6);
			_0x9f6cxa['component']['mon'](_0x9f6cxa, 'scrollstart', _0x9f6cx6)
		}
		_0x9f6cx5['component']['mon'](_0x9f6cx1, {
			scrollstart: _0x9f6cx6
		});
		_0x9f6cx1['component']['mon'](_0x9f6cx5, {
			scrollstart: _0x9f6cx6
		});
		this['partnerTimelinePanel']['mon'](this, {
			show: function () {
				_0x9f6cx2(_0x9f6cx5, _0x9f6cx5['getPosition']()['x'])
			}
		});
		this['mon'](this['partnerTimelinePanel'], {
			show: function () {
				_0x9f6cx2(_0x9f6cx1, _0x9f6cx1['getPosition']()['x'])
			}
		})
	}
	, onViewChange: function (_0x9f6cx1) {
		if (_0x9f6cx1 === this) {
			this['partnerTimelinePanel']['viewPreset'] = this['viewPreset'] = this['timeAxisViewModel']['viewPreset']
		}
	}
	, onBeforeZoomChange: function () {
		var _0x9f6cx5 = this['partnerTimelinePanel'];
		var _0x9f6cx2 = _0x9f6cx5['getSchedulingView']()['getScrollable']()
			, _0x9f6cx1 = _0x9f6cx2['suspendPartnerSync'];
		_0x9f6cx2['suspendPartnerSync'] = Ext['emptyFn'];
		_0x9f6cx2['on']('scrollend', function () {
			_0x9f6cx2['suspendPartnerSync'] = _0x9f6cx1
		}, null, {
			single: true
		})
	}
});
Ext.define('Ext.ux.Scheduler.mixin.TimelinePanel', {
	extend: 'Ext.ux.Scheduler.mixin.AbstractTimelinePanel'
	, requires: ['Ext.ux.Scheduler.column.timeAxis.Horizontal', 'Ext.ux.Scheduler.preset.Manager', 'Ext.ux.Scheduler.data.Calendar', 'Ext.ux.Scheduler.plugin.CurrentTimeLine', 'Ext.ux.Scheduler.layout.TableLayout', 'Ext.ux.Scheduler.patches.LockingScroller', 'Ext.ux.Scheduler.plugin.NonWorkingTime']
	, uses: ['Ext.layout.container.Border', 'Ext.ux.Scheduler.patches.TableView', 'Ext.ux.Scheduler.patches.TableView_6_0_2', 'Ext.ux.Scheduler.patches.TableView_6_2_0', 'Ext.ux.Scheduler.patches.CellContext_6_2_0', 'Ext.ux.Scheduler.patches.TableView2', 'Ext.ux.Scheduler.patches.TablePanel', 'Ext.ux.Scheduler.patches.TablePanel_6_2_1', 'Ext.ux.Scheduler.patches.BufferedRenderer', 'Ext.ux.Scheduler.patches.BufferedRenderer_6_2_1', 'Ext.ux.Scheduler.patches.CellContext', 'Ext.ux.Scheduler.patches.RowSynchronizer', 'Ext.ux.Scheduler.patches.Explorer', 'Ext.ux.Scheduler.patches.DomScroller', 'Ext.ux.Scheduler.patches.TimelineGridView', 'Ext.ux.Scheduler.patches.TimelineGridViewScroll6_2', 'Ext.ux.Scheduler.patches.TimelinePanel', 'Ext.ux.Scheduler.patches.EXTJS_23846', 'Ext.ux.Scheduler.plugin.NonWorkingTime', 'Ext.ux.Scheduler.patches.LockableGridEmptyText']
	, mixins: ['Ext.ux.Scheduler.mixin.Zoomable', 'Ext.ux.Scheduler.mixin.PartnerTimelinePanel']
	, destroyStores: false
	, bufferCoef: 5
	, bufferThreshold: 0.2
	, infiniteScroll: false
	, showCrudManagerMask: true
	, highlightWeekends: false
	, zoomOnTimeAxisDoubleClick: true
	, showTodayLine: false
	, calendar: null
	, horizontalTimeAxisColumnCfg: null
	, waitingForAutoTimeSpan: false
	, columnLinesFeature: null
	, renderWaitListener: null
	, schedulePinchThreshold: 30
	, pinchStartDistanceX: null
	, pinchStartDistanceY: null
	, pinchDistanceX: null
	, pinchDistanceY: null
	, horizontalColumns: null
	, forceDefineTimeSpanByStore: false
	, workingTimePlugin: null
	, split: true
	, refreshSuspensionCount: 0
	, tipCfg: {
		cls: 'sch-tip'
		, showDelay: 400
		, hideDelay: 0
		, constrain: true
		, autoHide: true
		, anchor: 't'
	}
	, inheritables: function () {
		return {
			columnLines: true
			, enableLocking: true
			, lockable: true
			, stateEvents: ['viewchange']
			, syncRowHeight: false
			, cellTopBorderWidth: 0
			, layout: 'border'
			, initComponent: function () {
				if (this['partnerTimelinePanel']) {
					if (typeof this['partnerTimelinePanel'] === 'string') {
						this['partnerTimelinePanel'] = Ext['getCmp'](this['partnerTimelinePanel'])
					};
					this['timeAxisViewModel'] = this['partnerTimelinePanel']['timeAxisViewModel'];
					this['timeAxis'] = this['partnerTimelinePanel']['getTimeAxis']();
					this['startDate'] = this['timeAxis']['getStart']();
					this['endDate'] = this['timeAxis']['getEnd']()
				};
				this._initializeTimelinePanel();
				this['configureChildGrids']();
				this['forceFit'] = false;
				this['configureColumns'](this['columns']);
				if (Ext['getVersion']()['equals']('6.0.2.437')) {
					this['viewConfig'] = Ext['apply'](this['viewConfig'] || {}, {
						componentLayout: 'timeline_tablelayout'
					})
				};
				var _0x9f6cx3 = this['normalViewConfig'] = this['normalViewConfig'] || {};
				var _0x9f6cx6 = this['getId']();
				Ext['apply'](this['normalViewConfig'], {
					id: _0x9f6cx6 + '-timelineview'
					, eventPrefix: this['autoGenId'] ? null : _0x9f6cx6
					, timeAxisViewModel: this['timeAxisViewModel']
					, eventBorderWidth: this['eventBorderWidth']
					, timeAxis: this['timeAxis']
					, readOnly: this['readOnly']
					, mode: this['mode']
					, rtl: this['rtl']
					, cellBorderWidth: this['cellBorderWidth']
					, cellTopBorderWidth: this['cellTopBorderWidth']
					, cellBottomBorderWidth: this['cellBottomBorderWidth']
					, infiniteScroll: this['infiniteScroll']
					, bufferCoef: this['bufferCoef']
					, bufferThreshold: this['bufferThreshold']
				});
				Ext['Array']['each'](['eventRendererScope', 'eventRenderer', 'dndValidatorFn', 'resizeValidatorFn', 'createValidatorFn', 'tooltipTpl', 'validatorFnScope', 'eventResizeHandles', 'enableEventDragDrop', 'enableDragCreation', 'resizeConfig', 'createConfig', 'tipCfg', 'getDateConstraints'], function (_0x9f6cx8) {
					if (_0x9f6cx8 in this) {
						_0x9f6cx3[_0x9f6cx8] = this[_0x9f6cx8]
					}
				}, this);
				this['callParent'](arguments);
				this['lockedGrid']['view']['addCls']('sch-lockedview');
				if (this['rtl']) {
					this['lockedGrid']['view']['addCls']('sch-locked-column-fixer');
					this['addCls']('sch-rtl')
				}
				else {
					this['addCls']('sch-ltr')
				};
				var _0x9f6cx1 = this['plugins'] = []['concat'](this['plugins'] || []);
				if (this['highlightWeekends']) {
					var _0x9f6cx7 = this['getCalendar']();
					_0x9f6cx7 = _0x9f6cx7 && Ext['StoreMgr']['lookup'](_0x9f6cx7) || new Ext.ux.Scheduler['data'].Calendar();
					this['workingTimePlugin'] = Ext['create']('Ext.ux.Scheduler.plugin.NonWorkingTime', {
						calendar: _0x9f6cx7
					});
					this['timeAxisViewModel']['setCalendar'](_0x9f6cx7);
					_0x9f6cx1['push'](this['workingTimePlugin']);
					this['addCls']('sch-timelinepanel-highlightweekends')
				};
				if (this['showTodayLine']) {
					this['todayLinePlugin'] = new Ext.ux.Scheduler['plugin'].CurrentTimeLine();
					_0x9f6cx1['push'](this['todayLinePlugin'])
				};
				this['patchNavigationModel'](this);
				if (Ext['supports']['Touch']) {
					this['timeAxisViewModel']['on']('update', this['refreshHeaderContainerScrollable'], this)
				};
				this['setViewPreset'](this['viewPreset'], this['startDate'] || this['timeAxis']['getStart'](), this['endDate'] || this['timeAxis']['getEnd'](), true);
				if (!this['startDate']) {
					var _0x9f6cx4 = this['crudManager'];
					if (_0x9f6cx4 && !_0x9f6cx4['loaded']) {
						this['bindAutoTimeSpanListeners']()
					}
					else {
						var _0x9f6cx2 = this['getTimeSpanDefiningStore']();
						if (_0x9f6cx2['isTreeStore'] ? _0x9f6cx2['getRoot']()['childNodes']['length'] : _0x9f6cx2['getCount']()) {
							this['applyStartEndDatesFromStore']()
						}
						else {
							if (_0x9f6cx2['isLoading']() || this['forceDefineTimeSpanByStore']) {
								this['bindAutoTimeSpanListeners']()
							}
						}
					}
				};
				var _0x9f6cx5 = this['columnLines'];
				if (_0x9f6cx5) {
					this['columnLinesFeature'] = new Ext.ux.Scheduler['feature'].ColumnLines(Ext['isObject'](_0x9f6cx5) ? _0x9f6cx5 : undefined);
					this['columnLinesFeature']['init'](this);
					this['columnLines'] = true
				};
				this['relayEvents'](this['getSchedulingView'](), ['beforetooltipshow', 'scheduleclick', 'scheduledblclick', 'schedulecontextmenu', 'schedulepinch', 'schedulepinchstart', 'schedulepinchend']);
				this['on']('zoomchange', function () {
					this['normalGrid']['scrollTask']['cancel']()
				});
				if (this['crudManager']) {
					if (!this['crudManager']['autoSync'] && this['showCrudManagerMask']) {
						this['mon'](this['crudManager'], {
							beforesend: this['beforeCrudOperationStart']
							, synccanceled: this['onCrudOperationComplete']
							, loadcanceled: this['onCrudOperationComplete']
							, load: this['onCrudOperationComplete']
							, sync: this['onCrudOperationComplete']
							, requestfail: this['onCrudOperationComplete']
							, scope: this
						});
						if (this['crudManager']['isLoading']()) {
							this['beforeCrudOperationStart'](this['crudManager'], null, 'load')
						}
					};
					this['mon'](this['crudManager'], {
						beforeloadapply: this['onCrudBeforeLoad']
						, load: this['onCrudLoad']
						, scope: this
					})
				};
				this['afterInitComponent']()
			}
			, refreshHeaderContainerScrollable: function () {
				var _0x9f6cx2 = this['getSchedulingView']()['headerCt']['getScrollable']();
				if (!_0x9f6cx2) {
					return
				};
				if (Ext['getVersion']()['isLessThan']('6.0.1')) {
					var _0x9f6cx1 = _0x9f6cx2['isConfiguring'];
					_0x9f6cx2['isConfiguring'] = true;
					_0x9f6cx2['refresh']();
					_0x9f6cx2['refreshAxes']();
					_0x9f6cx2['isConfiguring'] = _0x9f6cx1
				}
				else {
					_0x9f6cx2['refresh']()
				}
			}
			, getState: function () {
				var _0x9f6cx1 = this
					, _0x9f6cx2 = _0x9f6cx1['callParent'](arguments);
				Ext['apply'](_0x9f6cx2, {
					viewPreset: _0x9f6cx1['viewPreset']
					, startDate: _0x9f6cx1['getStart']()
					, endDate: _0x9f6cx1['getEnd']()
					, zoomMinLevel: _0x9f6cx1['zoomMinLevel']
					, zoomMaxLevel: _0x9f6cx1['zoomMaxLevel']
					, currentZoomLevel: _0x9f6cx1['currentZoomLevel']
				});
				return _0x9f6cx2
			}
			, applyState: function (_0x9f6cx2) {
				var _0x9f6cx1 = this;
				_0x9f6cx1['callParent'](arguments);
				if (_0x9f6cx2 && _0x9f6cx2['viewPreset']) {
					_0x9f6cx1['setViewPreset'](_0x9f6cx2['viewPreset'], _0x9f6cx2['startDate'], _0x9f6cx2['endDate'])
				};
				if (_0x9f6cx2 && _0x9f6cx2['currentZoomLevel']) {
					_0x9f6cx1['zoomToLevel'](_0x9f6cx2['currentZoomLevel'])
				}
			}
			, setTimeSpan: function () {
				this['callParent'](arguments);
				if (this['waitingForAutoTimeSpan']) {
					this['unbindAutoTimeSpanListeners'](false);
					this['getView']()['refresh']()
				};
				if (!this['normalGrid']['getView']()['viewReady']) {
					this['getView']()['refresh']()
				}
			}
			, onBoxReady: function () {
				var _0x9f6cx1 = this;
				_0x9f6cx1['callParent'](arguments);
				if (_0x9f6cx1['partnerTimelinePanel']) {
					if (_0x9f6cx1['partnerTimelinePanel']['rendered']) {
						_0x9f6cx1['setupPartnerTimelinePanel'](_0x9f6cx1['partnerTimelinePanel'])
					}
					else {
						_0x9f6cx1['partnerTimelinePanel']['on']('boxready', _0x9f6cx1['setupPartnerTimelinePanel'], _0x9f6cx1)
					}
				};
				_0x9f6cx1['normalGrid']['on']({
					collapse: _0x9f6cx1['onNormalGridCollapse']
					, expand: _0x9f6cx1['onNormalGridExpand']
					, scope: _0x9f6cx1
				});
				_0x9f6cx1['lockedGrid']['on']({
					collapse: _0x9f6cx1['onLockedGridCollapse']
					, expand: _0x9f6cx1['onLockedGridExpand']
					, scope: _0x9f6cx1
				});
				_0x9f6cx1['lockedGrid']['on']({
					itemdblclick: _0x9f6cx1['onLockedGridItemDblClick']
					, scope: _0x9f6cx1
				});
				if (Ext['supports']['Touch']) {
					this['getSchedulingView']()['on']({
						schedulepinchstart: this['onSchedulePinchStart']
						, schedulepinch: this['onSchedulePinch']
						, schedulepinchend: this['onSchedulePinchEnd']
						, scope: this
					})
				}
			}
		}
	}
	, scrollToDate: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this['getSchedulingView']();
		if (_0x9f6cx1['isWeekView']()) {
			var _0x9f6cx3 = _0x9f6cx1['weekview']['getColumnsBy'](function (_0x9f6cx4) {
				return _0x9f6cx4['start'] <= _0x9f6cx5 && _0x9f6cx4['end'] > _0x9f6cx5
			})[0];
			if (_0x9f6cx3) {
				_0x9f6cx1['scrollHorizontallyTo'](_0x9f6cx3['getLocalX']());
				_0x9f6cx1['scrollVerticallyTo'](_0x9f6cx1['getCoordinateFromDate'](_0x9f6cx5, true))
			}
		}
		else {
			return this['callParent'](arguments)
		}
	}
	, bindAutoTimeSpanListeners: function () {
		var _0x9f6cx1 = this['getTimeSpanDefiningStore']();
		this['waitingForAutoTimeSpan'] = true;
		this['suspendRefresh']();
		this['mon'](_0x9f6cx1, 'load', this['applyStartEndDatesFromStore'], this);
		if (_0x9f6cx1['isTreeStore']) {
			this['mon'](_0x9f6cx1, 'rootchange', this['applyStartEndDatesFromStore'], this);
			this['mon'](_0x9f6cx1, 'nodeappend', this['applyStartEndDatesAfterTreeAppend'], this)
		}
		else {
			this['mon'](_0x9f6cx1, 'add', this['applyStartEndDatesFromStore'], this)
		}
	}
	, getTimeSpanDefiningStore: function () {
		throw 'Abstract method called'
	}
	, unbindAutoTimeSpanListeners: function (_0x9f6cx2) {
		this['waitingForAutoTimeSpan'] = false;
		var _0x9f6cx1 = this['getTimeSpanDefiningStore']();
		this['resumeRefresh'](_0x9f6cx2);
		_0x9f6cx1['un']('load', this['applyStartEndDatesFromStore'], this);
		if (_0x9f6cx1['isTreeStore']) {
			_0x9f6cx1['un']('rootchange', this['applyStartEndDatesFromStore'], this);
			_0x9f6cx1['un']('nodeappend', this['applyStartEndDatesAfterTreeAppend'], this)
		}
		else {
			_0x9f6cx1['un']('add', this['applyStartEndDatesFromStore'], this)
		}
	}
	, applyStartEndDatesAfterTreeAppend: function () {
		var _0x9f6cx1 = this['getTimeSpanDefiningStore']();
		if (!_0x9f6cx1['isSettingRoot'] && !_0x9f6cx1['__loading']) {
			this['applyStartEndDatesFromStore']()
		}
	}
	, applyStartEndDatesFromStore: function () {
		var _0x9f6cx1 = this['getTimeSpanDefiningStore']();
		var _0x9f6cx2 = _0x9f6cx1['getTotalTimeSpan']();
		if (_0x9f6cx2['end'] && _0x9f6cx2['start'] && _0x9f6cx2['end'] - _0x9f6cx2['start'] === 0) {
			_0x9f6cx2['start'] = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2['start'], this['timeAxis']['mainUnit'], -1);
			_0x9f6cx2['end'] = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx2['end'], this['timeAxis']['mainUnit'], 1)
		};
		this['setTimeSpan'](_0x9f6cx2['start'] || new Date(), _0x9f6cx2['end'])
	}
	, onLockedGridItemDblClick: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5, _0x9f6cx4, _0x9f6cx3) {
		if (this['isVertical']() && _0x9f6cx1) {
			this['fireEvent']('timeheaderdblclick', this, _0x9f6cx1['get']('start'), _0x9f6cx1['get']('end'), _0x9f6cx4, _0x9f6cx3)
		}
	}
	, getSchedulingView: function () {
		return this['normalGrid'] && this['normalGrid']['view']
	}
	, getHorizontalTimeAxisColumn: function () {
		return this['getSchedulingView']()['getHorizontalTimeAxisColumn']()
	}
	, configureColumns: function (_0x9f6cx1) {
		var _0x9f6cx5 = [];
		var _0x9f6cx2 = [];
		_0x9f6cx1 = _0x9f6cx1 || [];
		if (_0x9f6cx1['items']) {
			this['columns'] = Ext['apply']({}, this['columns']);
			_0x9f6cx1 = this['columns']['items'] = _0x9f6cx1['items']['slice']()
		}
		else {
			_0x9f6cx1 = this['columns'] = _0x9f6cx1['slice']()
		};
		Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cx3) {
			if (_0x9f6cx3['position'] === 'right' || _0x9f6cx3['locked'] === false) {
				if (!Ext['isNumber'](_0x9f6cx3['width'])) {
					Ext['Error']['raise']('"Right" columns must have a fixed width')
				};
				_0x9f6cx3['locked'] = false;
				_0x9f6cx2['push'](_0x9f6cx3)
			}
			else {
				_0x9f6cx3['locked'] = true;
				_0x9f6cx5['push'](_0x9f6cx3)
			};
			_0x9f6cx3['lockable'] = false
		});
		if (_0x9f6cx1['length'] === 0) {
			this['split'] = false
		};
		Ext['Array']['erase'](_0x9f6cx1, 0, _0x9f6cx1['length']);
		Ext['Array']['insert'](_0x9f6cx1, 0, _0x9f6cx5['concat'](Ext['apply']({
			xtype: 'timeaxiscolumn'
			, timeAxisViewModel: this['timeAxisViewModel']
			, trackHeaderOver: this['trackHeaderOver']
			, renderer: this['mainRenderer']
			, variableRowHeight: this['variableRowHeight']
			, scope: this
		}, this['horizontalTimeAxisColumnCfg'] || {}))['concat'](_0x9f6cx2));
		this['horizontalColumns'] = _0x9f6cx1['slice']()
	}
	, mainRenderer: function (_0x9f6cx2, _0x9f6cx13, _0x9f6cx6, _0x9f6cxc, _0x9f6cxa) {
		var _0x9f6cx5 = this['renderers']
			, _0x9f6cx3 = this['isVertical']() ? this['getResourceStore']()['getAt'](_0x9f6cxa) : _0x9f6cx6
			, _0x9f6cx1 = '&nbsp;';
		_0x9f6cx13['rowHeight'] = null;
		for (var _0x9f6cx4 = 0; _0x9f6cx4 < _0x9f6cx5['length']; _0x9f6cx4++) {
			_0x9f6cx1 += _0x9f6cx5[_0x9f6cx4]['fn']['call'](_0x9f6cx5[_0x9f6cx4]['scope'] || this, _0x9f6cx2, _0x9f6cx13, _0x9f6cx3, _0x9f6cxc, _0x9f6cxa) || ''
		};
		if (this['variableRowHeight']) {
			var _0x9f6cx8 = this['getSchedulingView']();
			var _0x9f6cx7 = this['getRowHeight']();
			_0x9f6cx13['style'] = 'height:' + ((_0x9f6cx13['rowHeight'] || _0x9f6cx7) - _0x9f6cx8['cellTopBorderWidth'] - _0x9f6cx8['cellBottomBorderWidth']) + 'px'
		};
		return _0x9f6cx1
	}
	, onNormalGridCollapse: function () {
		var _0x9f6cx1 = this;
		if (!_0x9f6cx1['normalGrid']['reExpander']) {
			_0x9f6cx1['normalGrid']['reExpander'] = _0x9f6cx1['normalGrid']['placeholder']
		};
		if (!_0x9f6cx1['lockedGrid']['rendered']) {
			_0x9f6cx1['lockedGrid']['on']('render', _0x9f6cx1['onNormalGridCollapse'], _0x9f6cx1, {
				delay: 1
			})
		}
		else {
			_0x9f6cx1['lockedGrid']['savedWidth'] = _0x9f6cx1['lockedGrid']['getWidth']();
			if (_0x9f6cx1['lockedGrid']['collapsed']) {
				_0x9f6cx1['lockedGrid']['expand']()
			};
			_0x9f6cx1['lockedGrid']['setWidth'](_0x9f6cx1['getWidth']() - _0x9f6cx1['normalGrid']['getPlaceholder']()['getWidth']());
			_0x9f6cx1['addCls']('sch-normalgrid-collapsed')
		}
	}
	, onNormalGridExpand: function () {
		this['removeCls']('sch-normalgrid-collapsed')
	}
	, onLockedGridCollapse: function () {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['normalGrid']['collapsed']) {
			_0x9f6cx1['normalGrid']['expand']()
		}
	}
	, onLockedGridExpand: function () {
		if (this['lockedGrid']['savedWidth']) {
			this['lockedGrid']['setWidth'](this['lockedGrid']['savedWidth'])
		}
	}
	, beforeCrudOperationStart: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx2) {
		if (this['rendered']) {
			this['setLoading']({
				msg: _0x9f6cx2 === 'load' ? this.L('loadingText') : this.L('savingText')
			})
		}
		else {
			Ext['destroy'](this['renderWaitListener']);
			this['renderWaitListener'] = this['on']('render', Ext['Function']['bind'](this['beforeCrudOperationStart'], this, Array['prototype']['slice']['apply'](arguments)), this, {
				delay: 1
				, destroyable: true
			})
		}
	}
	, onCrudBeforeLoad: function () {
		this['suspendRefresh']()
	}
	, onCrudLoad: function () {
		this['resumeRefresh'](true)
	}
	, onCrudOperationComplete: function () {
		Ext['destroy'](this['renderWaitListener']);
		this['setLoading'](false)
	}
	, onSchedulePinchStart: function (_0x9f6cx1, _0x9f6cx2) {
		this['pinchStartDistanceX'] = Math['abs'](_0x9f6cx2['touches'][0]['pageX'] - _0x9f6cx2['touches'][1]['pageX']);
		this['pinchStartDistanceY'] = Math['abs'](_0x9f6cx2['touches'][0]['pageY'] - _0x9f6cx2['touches'][1]['pageY'])
	}
	, onSchedulePinch: function (_0x9f6cx1, _0x9f6cx2) {
		this['pinchDistanceX'] = Math['abs'](_0x9f6cx2['touches'][0]['pageX'] - _0x9f6cx2['touches'][1]['pageX']);
		this['pinchDistanceY'] = Math['abs'](_0x9f6cx2['touches'][0]['pageY'] - _0x9f6cx2['touches'][1]['pageY'])
	}
	, onSchedulePinchEnd: function (_0x9f6cx1) {
		var _0x9f6cx4 = this['pinchDistanceX'];
		var _0x9f6cx3 = this['pinchDistanceY'];
		var _0x9f6cx7 = this['isHorizontal']();
		if (Math['abs'](_0x9f6cx4 - this['pinchStartDistanceX']) > this['schedulePinchThreshold']) {
			var _0x9f6cx5 = Math['abs'](_0x9f6cx4 / this['pinchStartDistanceX']);
			if (_0x9f6cx7) {
				_0x9f6cx5 > 1 ? this['zoomIn']() : this['zoomOut']()
			}
			else {
				this['timeAxisViewModel']['setViewColumnWidth'](_0x9f6cx5 * this['timeAxisViewModel']['resourceColumnWidth'])
			}
		};
		if (Math['abs'](_0x9f6cx3 - this['pinchStartDistanceY']) > this['schedulePinchThreshold']) {
			var _0x9f6cx2 = Math['abs'](_0x9f6cx3 / this['pinchStartDistanceY']);
			_0x9f6cx1['setRowHeight'](_0x9f6cx1['getRowHeight']() * _0x9f6cx2)
		};
		this['pinchStartDistanceX'] = this['pinchStartDistanceY'] = this['pinchDistanceX'] = this['pinchDistanceY'] = null
	}
	, patchNavigationModel: function (_0x9f6cx5) {
		_0x9f6cx5['getView']()['getNavigationModel']()['focusItem'] = function (_0x9f6cx3) {
			_0x9f6cx3['addCls'](this['focusCls']);
			if (((Ext['isIE'] || Ext['isEdge']) && !_0x9f6cx3['hasCls']('sch-timetd')) || (!(Ext['isIE'] || Ext['isEdge']) && _0x9f6cx5['isHorizontal']())) {
				_0x9f6cx3['focus']()
			}
		};
		var _0x9f6cx2 = _0x9f6cx5['lockedGrid']['getView']();
		var _0x9f6cx1 = _0x9f6cx5['normalGrid']['getView']();
		_0x9f6cx2['on']('rowclick', function (_0x9f6cx4, _0x9f6cx3, _0x9f6cx7, _0x9f6cx6) {
			if (_0x9f6cx1['lastFocused']) {
				_0x9f6cx1['lastFocused']['rowIdx'] = _0x9f6cx6;
				_0x9f6cx1['lastFocused']['record'] = _0x9f6cx3
			}
			else {
				if (Ext['isIE']) {
					_0x9f6cx1['lastFocused'] = this['lastFocused']
				}
			}
		});
		_0x9f6cx1['on']('rowclick', function (_0x9f6cx4, _0x9f6cx3, _0x9f6cx7, _0x9f6cx6) {
			if (_0x9f6cx2['lastFocused']) {
				_0x9f6cx2['lastFocused']['rowIdx'] = _0x9f6cx6;
				_0x9f6cx2['lastFocused']['record'] = _0x9f6cx3
			}
			else {
				if (Ext['isIE']) {
					_0x9f6cx2['lastFocused'] = this['lastFocused']
				}
			}
		})
	}
	, configureChildGrids: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['lockedGridConfig'] = Ext['apply']({}, _0x9f6cx1['lockedGridConfig'] || {});
		_0x9f6cx1['normalGridConfig'] = Ext['apply']({}, _0x9f6cx1['schedulerConfig'] || _0x9f6cx1['normalGridConfig'] || {});
		var _0x9f6cx5 = _0x9f6cx1['lockedGridConfig']
			, _0x9f6cx2 = _0x9f6cx1['normalGridConfig'];
		if (_0x9f6cx1['lockedXType']) {
			_0x9f6cx5['xtype'] = _0x9f6cx1['lockedXType']
		};
		if (_0x9f6cx1['normalXType']) {
			_0x9f6cx2['xtype'] = _0x9f6cx1['normalXType']
		};
		Ext['applyIf'](_0x9f6cx5, {
			useArrows: true
			, animCollapse: false
			, collapseDirection: 'left'
			, trackMouseOver: false
		});
		Ext['applyIf'](_0x9f6cx2, {
			viewType: _0x9f6cx1['viewType']
			, enableColumnMove: false
			, enableColumnResize: false
			, enableColumnHide: false
			, trackMouseOver: false
			, collapseDirection: 'right'
			, collapseMode: 'placeholder'
			, animCollapse: false
		});
		if (_0x9f6cx1['isVertical']()) {
			_0x9f6cx5['store'] = _0x9f6cx2['store'] = _0x9f6cx1['timeAxis']
		};
		if (_0x9f6cx5['width']) {
			_0x9f6cx1['syncLockedWidth'] = Ext['emptyFn'];
			_0x9f6cx5['scroll'] = Ext['supports']['Touch'] ? 'both' : 'horizontal';
			_0x9f6cx5['scrollerOwner'] = true
		}
	}
	, afterInitComponent: function () {
		var _0x9f6cx4 = this;
		var _0x9f6cx3 = _0x9f6cx4['lockedGrid']['getView']();
		var _0x9f6cx5 = _0x9f6cx4['normalGrid']['getView']();
		var _0x9f6cx2 = Ext['data']['TreeStore'] && _0x9f6cx4['store'] instanceof Ext['data']['TreeStore'];
		if (_0x9f6cx4['normalGrid']['collapsed']) {
			_0x9f6cx4['normalGrid']['collapsed'] = false;
			_0x9f6cx5['on']('boxready', function () {
				_0x9f6cx4['normalGrid']['collapse']()
			}, _0x9f6cx4, {
				delay: 10
			})
		};
		if (_0x9f6cx4['lockedGrid']['collapsed']) {
			_0x9f6cx4['lockedGrid']['collapsed'] = false;
			_0x9f6cx3['on']('boxready', function () {
				_0x9f6cx4['lockedGrid']['collapse']()
			}, _0x9f6cx4, {
				delay: 10
			});
			if (_0x9f6cx3['bufferedRenderer']) {
				_0x9f6cx3['bufferedRenderer']['disabled'] = true
			}
		};
		if (_0x9f6cx2) {
			this['setupLockableFilterableTree']()
		};
		var _0x9f6cx7 = this['getSplitter']();
		if (_0x9f6cx7) {
			_0x9f6cx7['addCls']('sch-timelinepanel-splitter');
			_0x9f6cx7['setVisible'](this['isHorizontal']())
		};
		var _0x9f6cx1 = function (_0x9f6cx8, _0x9f6cx6) {
			if (!('TouchEvent' in window && (_0x9f6cx8['parentEvent'] && _0x9f6cx8['parentEvent']['type']['match'](/touch/i)))) {
				Ext['getBody']()['un']('mousemove', _0x9f6cx1, this);
				this['setTouchEnhancementsEnabled'](false)
			}
		};
		Ext['getBody']()['on']('mousemove', _0x9f6cx1, this);
		this['setTouchEnhancementsEnabled'](true);
		if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
			this['normalGrid']['on']('cellclick', this['onNormalGridCellClick'], this)
		};
		if (this['zoomOnTimeAxisDoubleClick']) {
			this['on']('timeheaderdblclick', function (_0x9f6cx9, _0x9f6cx8, _0x9f6cx6) {
				if (this['isHorizontal']()) {
					this['zoomToSpan']({
						start: _0x9f6cx8
						, end: _0x9f6cx6
					})
				}
			})
		}
	}
	, onNormalGridCellClick: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx9, _0x9f6cx3, _0x9f6cx8, _0x9f6cxc, _0x9f6cx7) {
		if (_0x9f6cx5['className']['match']('sch-timetd')) {
			var _0x9f6cx2 = this['getSelectionModel']();
			var _0x9f6cx6 = _0x9f6cx7['ctrlKey'] && _0x9f6cx2['isSelected'](_0x9f6cxc);
			if (_0x9f6cx6) {
				_0x9f6cx2['deselect'](_0x9f6cxc)
			}
			else {
				_0x9f6cx2['select'](_0x9f6cxc, _0x9f6cx7['ctrlKey'])
			}
		}
	}
	, getSplitter: function () {
		return this['child']('splitter')
	}
	, setTouchEnhancementsEnabled: function (_0x9f6cx1) {
		if (_0x9f6cx1) {
			this['addCls']('sch-touch-only')
		}
		else {
			this['removeCls']('sch-touch-only')
		}
	}
	, setupLockableFilterableTree: function () {
		var _0x9f6cx5 = this;
		var _0x9f6cx2 = _0x9f6cx5['lockedGrid']['getView']();
		var _0x9f6cx1 = Ext.ux.Scheduler['mixin']['FilterableTreeView']['prototype'];
		_0x9f6cx2['initTreeFiltering'] = _0x9f6cx1['initTreeFiltering'];
		_0x9f6cx2['onFilterChangeStart'] = _0x9f6cx1['onFilterChangeStart'];
		_0x9f6cx2['onFilterChangeEnd'] = _0x9f6cx1['onFilterChangeEnd'];
		_0x9f6cx2['onFilterCleared'] = _0x9f6cx1['onFilterCleared'];
		_0x9f6cx2['onFilterSet'] = _0x9f6cx1['onFilterSet'];
		_0x9f6cx2['initTreeFiltering']()
	}
	, showMenuBy: function (_0x9f6cx2, _0x9f6cx7) {
		var _0x9f6cx4 = this['getMenu']()
			, _0x9f6cx5 = _0x9f6cx4['down']('#unlockItem')
			, _0x9f6cx3 = _0x9f6cx4['down']('#lockItem')
			, _0x9f6cx1 = _0x9f6cx5['prev']();
		_0x9f6cx1['hide']();
		_0x9f6cx5['hide']();
		_0x9f6cx3['hide']()
	}
	, zoomToFit: function (_0x9f6cx1) {
		_0x9f6cx1 = Ext['apply']({
			adjustStart: 1
			, adjustEnd: 1
		}, _0x9f6cx1);
		var _0x9f6cx2 = this['getEventStore']();
		var _0x9f6cx5 = this['getEventStore']()['getTotalTimeSpan']();
		if (this['zoomToSpan'](_0x9f6cx5, _0x9f6cx1) === null) {
			this['getSchedulingView']()['fitColumns']()
		}
	}
	, refreshViews: function (_0x9f6cx2) {
		if (!this['rendered']) {
			return
		};
		var _0x9f6cx4 = false;
		var _0x9f6cx5 = function () {
			_0x9f6cx4 = true
		};
		var _0x9f6cx7 = this['normalGrid']['getView']();
		var _0x9f6cx3 = this['lockedGrid']['getView']()
			, _0x9f6cx1 = {
				left: _0x9f6cx3['getScrollX']()
				, top: _0x9f6cx7['getVerticalScroll']()
			};
		_0x9f6cx7['on']('refresh', _0x9f6cx5);
		_0x9f6cx3['refreshView']();
		_0x9f6cx7['un']('refresh', _0x9f6cx5);
		if (_0x9f6cx2 !== false) {
			!_0x9f6cx4 && this['getSchedulingView']()['refreshKeepingScroll']();
			_0x9f6cx3['setScrollX'](_0x9f6cx1['left']);
			_0x9f6cx3['setScrollY'](_0x9f6cx1['top'])
		}
		else {
			if (!_0x9f6cx4) {
				this['getSchedulingView']()['refreshView']()
			}
		}
	}
	, getCalendar: function () {
		return this['calendar']
	}
	, disableWeekendHighlighting: function (_0x9f6cx1) {
		this['workingTimePlugin']['setDisabled'](_0x9f6cx1);
		if (_0x9f6cx1) {
			this['removeCls']('sch-timelinepanel-highlightweekends')
		}
		else {
			this['addCls']('sch-timelinepanel-highlightweekends')
		}
	}
	, preventRefresh: function () {
		return false
	}
	, suspendRefresh: function () {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['refreshSuspensionCount']++ === 0) {
			_0x9f6cx1['getView']()['on']('beforerefresh', _0x9f6cx1['preventRefresh'], _0x9f6cx1);
			_0x9f6cx1['normalGrid']['view']['blockRefresh'] = true;
			_0x9f6cx1['lockedGrid']['view']['blockRefresh'] = true
		}
	}
	, resumeRefresh: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['refreshSuspensionCount'] && !--_0x9f6cx1['refreshSuspensionCount']) {
			_0x9f6cx1['getView']()['un']('beforerefresh', _0x9f6cx1['preventRefresh'], _0x9f6cx1);
			_0x9f6cx1['normalGrid']['view']['blockRefresh'] = false;
			_0x9f6cx1['lockedGrid']['view']['blockRefresh'] = false;
			if (_0x9f6cx2) {
				_0x9f6cx1['refreshViews']()
			}
		}
	}
}, function () {
	var _0x9f6cx1 = '6.0.0';
	Ext['apply'](Ext.ux.Scheduler, {
		VERSION: '5.1.3'
	});
	if (Ext['versions']['extjs']['isLessThan'](_0x9f6cx1)) {
		var _0x9f6cx2 = console;
		_0x9f6cx2 && _0x9f6cx2['log']('The Ext JS version you are using needs to be updated to at least ' + _0x9f6cx1)
	};
	if (Ext['getVersion']()['isGreaterThan']('6.0.2')) {
		Ext.define(null, {
			override: 'Ext.grid.plugin.BufferedRenderer'
			, doRefreshView: function () {
				if (this['view']['ownerGrid']['is']('timelinegrid,timelinetree')) {
					var _0x9f6cx5 = Ext['Error']['ignore'];
					Ext['Error']['ignore'] = true;
					this['callParent'](arguments);
					Ext['Error']['ignore'] = _0x9f6cx5
				}
				else {
					this['callParent'](arguments)
				}
			}
		})
	}
});
Ext.define('Ext.ux.Scheduler.panel.TimelineTreePanel', {
	extend: 'Ext.tree.Panel'
	, requires: ['Ext.grid.Panel', 'Ext.data.TreeStore', 'Ext.ux.Scheduler.mixin.FilterableTreeView', 'Ext.ux.Scheduler.patches.TreeNavigationModel']
	, mixins: ['Ext.ux.Scheduler.mixin.Localizable', 'Ext.ux.Scheduler.mixin.TimelinePanel']
	, alias: ['widget.timelinetree']
	, useArrows: true
	, rootVisible: false
	, lockedXType: 'treepanel'
	, isTimelineTreePanel: true
	, initComponent: function () {
		this['callParent'](arguments);
		this['getSchedulingView']()._initializeTimelineView()
	}
}, function () {
	this['override'](Ext.ux.Scheduler['mixin']['TimelinePanel']['prototype']['inheritables']() || {})
});
Ext.define('Ext.ux.Scheduler.template.DependencyInfo', {
	extend: 'Ext.XTemplate'
	, mixins: ['Ext.ux.Scheduler.mixin.Localizable']
	, text: '<dl class="sch-dep-tip"><dt class="sch-dep-tip-from-title">__FROM__:</dt><dd class="sch-dep-tip-from-value">{[values.fromTask.getName() || "&nbsp;"]}</dd><dt class="sch-dep-tip-to-title">__TO__:</dt><dd class="sch-dep-tip-to-value">{[values.toTask && values.toTask.getName() || "&nbsp;"]}</dd></dl>'
	, constructor: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['text'] = _0x9f6cx1['text']['replace'](/__FROM__/, _0x9f6cx1.L('fromText'))['replace'](/__TO__/, _0x9f6cx1.L('toText'));
		_0x9f6cx1['callParent']([_0x9f6cx1['text']])
	}
});
Ext.define('Ext.ux.Scheduler.view.dependency.DropZone', {
	extend: 'Ext.dd.DropZone'
	, mixins: {
		observable: 'Ext.util.Observable'
	}
	, terminalSelector: null
	, dependencyStore: null
	, toText: null
	, startText: null
	, endText: null
	, view: null
	, tipTpl: null
	, constructor: function (_0x9f6cx2, _0x9f6cx1) {
		this['mixins']['observable']['constructor']['call'](this, _0x9f6cx1);
		this['callParent'](arguments)
	}
	, getTargetFromEvent: function (_0x9f6cx1) {
		return _0x9f6cx1['getTarget'](this['terminalSelector'])
	}
	, onNodeEnter: function (_0x9f6cx5, _0x9f6cx9, _0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx6 = this
			, _0x9f6cx1 = _0x9f6cx6['view']['resolveEventRecord'](_0x9f6cx5)
			, _0x9f6cxc = _0x9f6cx5['className']['match'](/sch-terminal-(\w+)/)[1]
			, _0x9f6cx8 = _0x9f6cx1['getId']() || _0x9f6cx1['internalId']
			, _0x9f6cx7 = Ext['apply']({
				toTask: _0x9f6cx1
				, toSide: _0x9f6cxc
			}, _0x9f6cx2['tplData']);
		_0x9f6cx6['tipTpl']['overwrite'](_0x9f6cx9['proxy']['el']['down']('.' + Ext['baseCSSPrefix'] + 'dd-drag-ghost', true), _0x9f6cx7);
		_0x9f6cx2['valid'] = _0x9f6cx6['isValidLink'](_0x9f6cx2['fromId'], _0x9f6cx8, _0x9f6cx9['dragData']['fromSide'], _0x9f6cxc);
		Ext['fly'](_0x9f6cx5)['addCls']('sch-terminal-' + (_0x9f6cx2['valid'] ? 'valid' : 'invalid') + '-drop')
	}
	, onNodeOut: function (_0x9f6cx3, _0x9f6cx1, _0x9f6cx5, _0x9f6cx2) {
		_0x9f6cx2['valid'] = false;
		Ext['fly'](_0x9f6cx3)['removeCls'](['sch-terminal-valid-drop', 'sch-terminal-invalid-drop']);
		this['tipTpl']['overwrite'](_0x9f6cx1['proxy']['el']['down']('.' + Ext['baseCSSPrefix'] + 'dd-drag-ghost'), _0x9f6cx2['tplData'])
	}
	, onNodeOver: function (_0x9f6cx3, _0x9f6cx1, _0x9f6cx5, _0x9f6cx2) {
		if (_0x9f6cx2['valid']) {
			return this['dropAllowed']
		}
		else {
			return this['dropNotAllowed']
		}
	}
	, onNodeDrop: function (_0x9f6cx7, _0x9f6cxa, _0x9f6cx6, _0x9f6cx5) {
		var _0x9f6cx8 = this
			, _0x9f6cx3 = _0x9f6cx8['view']['resolveEventRecord'](_0x9f6cx7)
			, _0x9f6cxc = _0x9f6cx7['className']['match'](/sch-terminal-(\w+)/)[1]
			, _0x9f6cx9 = _0x9f6cx3['getId']() || _0x9f6cx3['internalId']
			, _0x9f6cx1 = _0x9f6cx5['valid']
			, _0x9f6cx2 = _0x9f6cx8['createDependencyModel'](_0x9f6cxa['dragData']['fromId'], _0x9f6cx9, _0x9f6cx5['fromSide'], _0x9f6cxc);
		_0x9f6cx8['fireEvent']('drop', _0x9f6cx8, _0x9f6cx2, _0x9f6cx1);
		_0x9f6cx8['fireEvent']('afterdrop', _0x9f6cx8);
		return _0x9f6cx1
	}
	, createDependencyModel: function (_0x9f6cx4, _0x9f6cx2, _0x9f6cx7, _0x9f6cx3) {
		var _0x9f6cx5 = this['dependencyStore']
			, _0x9f6cx1 = new(_0x9f6cx5['getModel']())();
		_0x9f6cx1['setSourceId'](_0x9f6cx4);
		_0x9f6cx1['setTargetId'](_0x9f6cx2);
		_0x9f6cx1 instanceof Ext.ux.Scheduler['model']['Dependency'] && _0x9f6cx1['setFromSide'](_0x9f6cx7);
		_0x9f6cx1 instanceof Ext.ux.Scheduler['model']['Dependency'] && _0x9f6cx1['setToSide'](_0x9f6cx3);
		_0x9f6cx1['setType'](_0x9f6cx1['getTypeFromSides'](_0x9f6cx7, _0x9f6cx3, this['view']['rtl']));
		return _0x9f6cx1
	}
	, isValidLink: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cx4, _0x9f6cx5) {
		var _0x9f6cx1 = this['createDependencyModel'](_0x9f6cx3, _0x9f6cx2, _0x9f6cx4, _0x9f6cx5);
		return this['dependencyStore']['isValidDependency'](_0x9f6cx1)
	}
});
Ext.define('Ext.ux.Scheduler.util.ScrollManager', {
	singleton: true
	, vthresh: 25
	, hthresh: 25
	, increment: 100
	, frequency: 500
	, animate: true
	, animDuration: 200
	, activeCmp: null
	, activeEl: null
	, scrollElRegion: null
	, scrollProcess: {}
	, pt: null
	, scrollWidth: null
	, scrollHeight: null
	, direction: 'both'
	, constructor: function () {
		this['doScroll'] = Ext['Function']['bind'](this['doScroll'], this)
	}
	, triggerRefresh: function () {
		if (this['activeEl']) {
			this['refreshElRegion']();
			this['clearScrollInterval']();
			this['onMouseMove']()
		}
	}
	, doScroll: function () {
		var _0x9f6cx6 = this['scrollProcess']
			, _0x9f6cx8 = _0x9f6cx6['cmp']
			, _0x9f6cx7 = _0x9f6cx8['rtl'] && !_0x9f6cx8['up']('[isViewport]')
			, _0x9f6cx2 = _0x9f6cx6['dir'][0]
			, _0x9f6cx9 = this['increment']
			, _0x9f6cx5 = this['activeCmp']['getScrollX']()
			, _0x9f6cx1 = this['activeCmp']['getVerticalScroll']();
		if (_0x9f6cx2 === 'r') {
			_0x9f6cx9 = Math['min'](_0x9f6cx9, _0x9f6cx7 ? _0x9f6cx5 : this['scrollWidth'] - _0x9f6cx5 - this['activeEl']['dom']['clientWidth'])
		}
		else {
			if (_0x9f6cx2 === 'd') {
				_0x9f6cx9 = Math['min'](_0x9f6cx9, this['scrollHeight'] - _0x9f6cx1 - _0x9f6cx8['getViewContainerHeight']())
			}
		};
		_0x9f6cx9 = Math['max'](_0x9f6cx9, 0);
		var _0x9f6cx4 = 0
			, _0x9f6cx3 = 0;
		if (_0x9f6cx2 === 'r') {
			_0x9f6cx4 = _0x9f6cx9
		};
		if (_0x9f6cx2 === 'l') {
			_0x9f6cx4 = -_0x9f6cx9
		};
		if (_0x9f6cx2 === 'u') {
			_0x9f6cx3 = -_0x9f6cx9
		};
		if (_0x9f6cx2 === 'd') {
			_0x9f6cx3 = _0x9f6cx9
		};
		if (_0x9f6cx7) {
			_0x9f6cx4 = -_0x9f6cx4
		};
		if (_0x9f6cx4) {
			_0x9f6cx8['scrollHorizontallyBy'](_0x9f6cx4, {
				duration: this['animDuration']
				, callback: this['triggerRefresh']
				, scope: this
			})
		}
		else {
			if (_0x9f6cx3) {
				_0x9f6cx8['scrollVerticallyBy'](_0x9f6cx3, {
					duration: this['animDuration']
					, callback: this['triggerRefresh']
					, scope: this
				})
			}
		}
	}
	, clearScrollInterval: function () {
		var _0x9f6cx1 = this['scrollProcess'];
		if (_0x9f6cx1['id']) {
			clearTimeout(_0x9f6cx1['id'])
		};
		_0x9f6cx1['id'] = 0;
		_0x9f6cx1['cmp'] = null;
		_0x9f6cx1['dir'] = ''
	}
	, isScrollAllowed: function (_0x9f6cx1) {
		switch (this['direction']) {
		case 'both':
			return true;
		case 'horizontal':
			return _0x9f6cx1 === 'right' || _0x9f6cx1 === 'left';
		case 'vertical':
			return _0x9f6cx1 === 'up' || _0x9f6cx1 === 'down';
		default:
			throw new Error('Invalid direction: ' + this['direction'])
		}
	}
	, startScrollInterval: function (_0x9f6cx2, _0x9f6cx1) {
		if (!this['isScrollAllowed'](_0x9f6cx1)) {
			return
		};
		this['clearScrollInterval']();
		this['scrollProcess']['cmp'] = _0x9f6cx2;
		this['scrollProcess']['dir'] = _0x9f6cx1;
		this['scrollProcess']['id'] = setTimeout(this['doScroll'], this['frequency'])
	}
	, onMouseMove: function (_0x9f6cx8) {
		var _0x9f6cxd = _0x9f6cx8 ? {
				x: _0x9f6cx8['getX']()
				, y: _0x9f6cx8['getY']()
				, right: _0x9f6cx8['getX']()
				, bottom: _0x9f6cx8['getY']()
			} : this['pt']
			, _0x9f6cxe = _0x9f6cxd['x']
			, _0x9f6cx13 = _0x9f6cxd['y']
			, _0x9f6cx9 = this['scrollProcess']
			, _0x9f6cxb = this['activeCmp']
			, _0x9f6cx3 = _0x9f6cxb['getScrollX']()
			, _0x9f6cx5 = _0x9f6cxb['getVerticalScroll']()
			, _0x9f6cx1, _0x9f6cx6 = _0x9f6cxb['rtl'] && !_0x9f6cxb['up']('[isViewport]')
			, _0x9f6cx2 = this['activeEl']
			, _0x9f6cxa = this['scrollElRegion']
			, _0x9f6cx7 = _0x9f6cx2['dom']
			, _0x9f6cxc = this;
		this['pt'] = _0x9f6cxd;
		if (_0x9f6cxa && _0x9f6cxa['contains'](_0x9f6cxd) && _0x9f6cx2['isScrollable']()) {
			if (_0x9f6cxa['bottom'] - _0x9f6cx13 <= _0x9f6cxc['vthresh'] && (this['scrollHeight'] - _0x9f6cx5 - _0x9f6cxb['getViewContainerHeight']() > 0)) {
				if (_0x9f6cx9['cmp'] != _0x9f6cxb) {
					this['startScrollInterval'](_0x9f6cxb, 'down')
				};
				return
			}
			else {
				if (_0x9f6cxa['right'] - _0x9f6cxe <= _0x9f6cxc['hthresh'] && (_0x9f6cx6 ? _0x9f6cx3 > 0 : this['scrollWidth'] - _0x9f6cx3 - _0x9f6cx7['clientWidth'] > 0)) {
					if (_0x9f6cx9['cmp'] != _0x9f6cxb) {
						this['startScrollInterval'](_0x9f6cxb, 'right')
					};
					return
				}
				else {
					if (_0x9f6cx13 - _0x9f6cxa['top'] <= _0x9f6cxc['vthresh'] && _0x9f6cx5 > 0) {
						if (_0x9f6cx9['cmp'] != _0x9f6cxb) {
							this['startScrollInterval'](_0x9f6cxb, 'up')
						};
						return
					}
					else {
						if (_0x9f6cxe - _0x9f6cxa['left'] <= _0x9f6cxc['hthresh'] && (_0x9f6cx6 ? _0x9f6cx7['clientWidth'] + _0x9f6cx3 < this['scrollWidth'] : _0x9f6cx3 > 0)) {
							if (_0x9f6cx9['cmp'] != _0x9f6cxb) {
								this['startScrollInterval'](_0x9f6cxb, 'left')
							};
							return
						}
					}
				}
			}
		};
		this['clearScrollInterval']()
	}
	, refreshElRegion: function () {
		var _0x9f6cx1 = this['activeEl']['getRegion']();
		this['scrollElRegion'] = this['activeCmp']['getScrollableContainerRegion']()
	}
	, activate: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = Ext['getScrollbarSize']();
		this['direction'] = _0x9f6cx5 || 'both';
		this['activeCmp'] = _0x9f6cx2;
		this['activeEl'] = _0x9f6cx2['getEl']();
		var _0x9f6cx3 = _0x9f6cx2['getScrollableMaxPosition']();
		this['scrollWidth'] = _0x9f6cx3['x'] + _0x9f6cx2['getWidth']() - _0x9f6cx1['width'];
		this['scrollHeight'] = _0x9f6cx3['y'] + _0x9f6cx2['getViewContainerHeight']() - _0x9f6cx1['height'];
		this['refreshElRegion']();
		this['activeEl']['on']('mousemove', this['onMouseMove'], this)
	}
	, deactivate: function () {
		if (this['activeEl']) {
			this['clearScrollInterval']();
			this['activeEl']['un']('mousemove', this['onMouseMove'], this);
			this['activeEl'] = this['activeCmp'] = this['scrollElRegion'] = this['scrollWidth'] = this['scrollHeight'] = null;
			this['direction'] = 'both'
		}
	}
});
Ext.define('Ext.ux.Scheduler.view.dependency.DragZone', {
	extend: 'Ext.dd.DragZone'
	, alias: 'schdependencydragzone.default'
	, requires: ['Ext.ux.Scheduler.template.DependencyInfo', 'Ext.ux.Scheduler.view.dependency.DropZone', 'Ext.ux.Scheduler.util.ScrollManager']
	, mixins: {
		factoryable: 'Ext.mixin.Factoryable'
		, observable: 'Ext.util.Observable'
	}
	, terminalSelector: null
	, view: null
	, fromText: null
	, toText: null
	, startText: null
	, endText: null
	, rtl: false
	, useLineProxy: true
	, dependencyStore: null
	, tipTpl: null
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['mixins']['observable']['constructor']['call'](this, _0x9f6cx1);
		_0x9f6cx2['callParent']([_0x9f6cx1['view']['getEl'](), _0x9f6cx1]);
		_0x9f6cx2['tipTpl'] = _0x9f6cx2['tipTpl'] || new Ext.ux.Scheduler['template'].DependencyInfo();
		if (!(_0x9f6cx2['tipTpl'] instanceof Ext['Template'])) {
			_0x9f6cx2['tipTpl'] = new Ext.XTemplate(_0x9f6cx2['tipTpl'])
		};
		_0x9f6cx2['dropZone'] = _0x9f6cx2['createDropZone']();
		_0x9f6cx2['relayEvents'](_0x9f6cx2['dropZone'], ['drop', 'afterdrop']);
		_0x9f6cx2['on']({
			dragstart: _0x9f6cx2['onDependencyDragStart']
			, afterdrop: _0x9f6cx2['onDependencyAfterDrop']
			, scope: _0x9f6cx2
		})
	}
	, onDependencyDragStart: function () {
		Ext.ux.Scheduler['util']['ScrollManager']['activate'](this['view'])
	}
	, onDependencyAfterDrop: function () {
		Ext.ux.Scheduler['util']['ScrollManager']['deactivate']()
	}
	, createDropZone: function () {
		return new Ext.ux.Scheduler['view']['dependency'].DropZone(this['el'], this['getDropZoneConfig']())
	}
	, getDropZoneConfig: function () {
		return {
			rtl: this['rtl']
			, terminalSelector: this['terminalSelector']
			, ddGroup: this['ddGroup']
			, view: this['view']
			, dependencyStore: this['dependencyStore']
			, tipTpl: this['tipTpl']
		}
	}
	, initLineProxy: function (_0x9f6cx2) {
		var _0x9f6cx3 = this
			, _0x9f6cx1 = _0x9f6cx3['view']['getScroll']()
			, _0x9f6cx5 = Ext['fly'](_0x9f6cx2)['getOffsetsTo'](_0x9f6cx3['view']['el'])
			, _0x9f6cx7 = Ext['fly'](_0x9f6cx2)['getWidth']() / 2
			, _0x9f6cx6 = _0x9f6cx5[0] + _0x9f6cx7
			, _0x9f6cx4 = _0x9f6cx5[1] + _0x9f6cx7;
		_0x9f6cx6 = _0x9f6cx6 + _0x9f6cx1['left'];
		_0x9f6cx4 = Ext['getVersion']()['isLessThan']('6.2.0') ? _0x9f6cx4 + _0x9f6cx1['top'] : _0x9f6cx4;
		_0x9f6cx3['lineProxyEl'] = _0x9f6cx3['el']['createChild']({
			cls: 'sch-dependency-connector-proxy'
			, style: 'top:' + _0x9f6cx4 + 'px;left:' + _0x9f6cx6 + 'px'
		});
		Ext['apply'](_0x9f6cx3, {
			containerTop: _0x9f6cx3['el']['getTop']()
			, containerLeft: _0x9f6cx3['el']['getLeft']()
			, startXY: [_0x9f6cx6, _0x9f6cx4]
			, startScrollLeft: _0x9f6cx1['left']
			, startScrollTop: _0x9f6cx1['top']
		})
	}
	, updateLineProxy: function (_0x9f6cx8) {
		var _0x9f6cxa = this
			, _0x9f6cx1 = _0x9f6cxa['lineProxyEl']
			, _0x9f6cxe = _0x9f6cxa['view']['getScroll']()
			, _0x9f6cx2 = _0x9f6cxa['view']['el']['dom']['getBoundingClientRect']()
			, _0x9f6cxb = _0x9f6cx8[0] - _0x9f6cx2['left'] - _0x9f6cxa['startXY'][0] + _0x9f6cxe['left']
			, _0x9f6cx13 = _0x9f6cx8[1] - _0x9f6cx2['top'] - _0x9f6cxa['startXY'][1] + (Ext['getVersion']()['isLessThan']('6.2.0') ? _0x9f6cxe['top'] : 0)
			, _0x9f6cx5 = Math['max'](1, Math['sqrt'](Math['pow'](_0x9f6cxb, 2) + Math['pow'](_0x9f6cx13, 2)) - 2)
			, _0x9f6cxc = Math['atan2'](_0x9f6cx13, _0x9f6cxb) - (Math['PI'] / 2)
			, _0x9f6cx7;
		if (Ext['isIE9m']) {
			var _0x9f6cxd = Math['cos'](_0x9f6cxc)
				, _0x9f6cx9 = Math['sin'](_0x9f6cxc)
				, _0x9f6cxf = 'progid:DXImageTransform.Microsoft.Matrix(sizingMethod="auto expand", M11 = ' + _0x9f6cxd + ', M12 = ' + (-_0x9f6cx9) + ', M21 = ' + _0x9f6cx9 + ', M22 = ' + _0x9f6cxd + ')'
				, _0x9f6cx4, _0x9f6cx6;
			if (_0x9f6cxe['top'] !== _0x9f6cxa['startScrollTop']) {
				_0x9f6cx4 = _0x9f6cxa['startScrollTop'] - _0x9f6cxa['containerTop']
			}
			else {
				_0x9f6cx4 = _0x9f6cxe['top'] - _0x9f6cxa['containerTop']
			};
			if (_0x9f6cxe['left'] !== _0x9f6cxa['startScrollLeft']) {
				_0x9f6cx6 = _0x9f6cxa['startScrollLeft'] - _0x9f6cxa['containerLeft']
			}
			else {
				_0x9f6cx6 = _0x9f6cxe['left'] - _0x9f6cxa['containerLeft']
			};
			_0x9f6cx7 = {
				height: _0x9f6cx5 + 'px'
				, top: Math['min'](0, _0x9f6cx13) + _0x9f6cxa['startXY'][1] + _0x9f6cx4 + (_0x9f6cx13 < 0 ? 2 : 0) + 'px'
				, left: Math['min'](0, _0x9f6cxb) + _0x9f6cxa['startXY'][0] + _0x9f6cx6 + (_0x9f6cxb < 0 ? 2 : 0) + 'px'
				, filter: _0x9f6cxf
				, "-ms-filter": _0x9f6cxf
			}
		}
		else {
			var _0x9f6cx3 = 'rotate(' + _0x9f6cxc + 'rad)';
			_0x9f6cx7 = {
				height: _0x9f6cx5 + 'px'
				, "-o-transform": _0x9f6cx3
				, "-webkit-transform": _0x9f6cx3
				, "-ms-transform": _0x9f6cx3
				, "-moz-transform": _0x9f6cx3
				, transform: _0x9f6cx3
			}
		};
		_0x9f6cx1['setStyle'](_0x9f6cx7)
	}
	, getDragData: function (_0x9f6cx6) {
		var _0x9f6cx7 = this
			, _0x9f6cx3 = _0x9f6cx6['getTarget'](_0x9f6cx7['terminalSelector']);
		if (_0x9f6cx3) {
			var _0x9f6cx5 = _0x9f6cx7['view']['resolveEventRecord'](_0x9f6cx3);
			if (_0x9f6cx7['fireEvent']('beforedrag', _0x9f6cx7, _0x9f6cx5) === false) {
				return null
			};
			var _0x9f6cx2 = _0x9f6cx3['className']['match'](/sch-terminal-(\w+)/)[1]
				, _0x9f6cx1 = {
					fromTask: _0x9f6cx5
					, fromSide: _0x9f6cx2
				}
				, _0x9f6cx8 = Ext['core']['DomHelper']['createDom']({
					html: _0x9f6cx7['tipTpl']['apply'](_0x9f6cx1)
				})['firstChild'];
			_0x9f6cx3['style']['display'] = 'block';
			return {
				fromId: _0x9f6cx5['getId']() || _0x9f6cx5['internalId']
				, fromSide: _0x9f6cx2
				, tplData: _0x9f6cx1
				, repairXY: Ext['fly'](_0x9f6cx3)['getXY']()
				, ddel: _0x9f6cx8
				, valid: false
				, sourceTerminal: _0x9f6cx3
			}
		};
		return false
	}
	, onStartDrag: function (_0x9f6cx2, _0x9f6cx7) {
		var _0x9f6cx3 = this
			, _0x9f6cx1 = _0x9f6cx3['dragData']
			, _0x9f6cx5 = _0x9f6cx1['sourceTerminal']
			, _0x9f6cx4 = _0x9f6cx5['className']['match'](/sch-terminal-(\w+)/)[0];
		_0x9f6cx3['fireEvent']('dragstart', _0x9f6cx3);
		if (_0x9f6cx3['useLineProxy']) {
			_0x9f6cx3['initLineProxy'](_0x9f6cx5, _0x9f6cx1['isStart']);
			_0x9f6cx3['lineProxyEl']['show']()
		};
		_0x9f6cx3['proxy']['addCls']('sch-create-dependency-tip');
		Ext['fly'](_0x9f6cx1['sourceTerminal']['parentNode'])['select']('.sch-terminal:not(.' + _0x9f6cx4 + ')')['addCls']('sch-terminal-hidden')
	}
	, onDrag: function (_0x9f6cx2, _0x9f6cx1) {
		this['useLineProxy'] && this['updateLineProxy'](_0x9f6cx2['getXY']())
	}
	, afterRepair: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['dragging'] = false;
		!_0x9f6cx1['destroyed'] && _0x9f6cx1['fireEvent']('afterdrop', _0x9f6cx1['dropZone'])
	}
	, onMouseUp: function () {
		var _0x9f6cx2 = this;
		_0x9f6cx2['el']['removeCls']('sch-terminals-visible');
		_0x9f6cx2['dragData']['sourceTerminal']['style']['display'] = '';
		if (_0x9f6cx2['lineProxyEl']) {
			var _0x9f6cx5 = Ext['isIE9m'] ? 0 : 400
				, _0x9f6cx1 = _0x9f6cx2['lineProxyEl'];
			_0x9f6cx1['animate']({
				to: {
					height: 0
				}
				, duration: _0x9f6cx5
				, callback: function () {
					Ext['destroy'](_0x9f6cx1)
				}
			});
			_0x9f6cx2['lineProxyEl'] = null
		}
	}
	, getRepairXY: function () {
		return this['dragData']['repairXY']
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		Ext['destroy']([_0x9f6cx1['lineProxyEl'], _0x9f6cx1['dropZone']]);
		_0x9f6cx1['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Scheduler.util.RectangularPathFinder', {
	alias: 'schpathfinder.rectangular'
	, mixins: ['Ext.mixin.Factoryable']
	, uses: ['Ext.Array']
	, config: {
		startSide: 'right'
		, startArrowSize: 8
		, startArrowMargin: 6
		, startShift: 0
		, endSide: 'left'
		, endArrowSize: 8
		, endArrowMargin: 6
		, endShift: 0
		, verticalMargin: 2
		, horizontalMargin: 5
		, otherBoxes: null
	}
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['callParent']([_0x9f6cx1]);
		_0x9f6cx2['initConfig'](_0x9f6cx1)
	}
	, findPath: function (_0x9f6cx3, _0x9f6cx1e) {
		var _0x9f6cx1a = this
			, _0x9f6cxf, _0x9f6cx7, _0x9f6cx15, _0x9f6cx14, _0x9f6cx11, _0x9f6cxa, _0x9f6cx1f, _0x9f6cx21, _0x9f6cx5, _0x9f6cx1b, _0x9f6cx2, _0x9f6cxd, _0x9f6cx19, _0x9f6cx18, _0x9f6cx13, _0x9f6cxe, _0x9f6cx10, _0x9f6cx8, _0x9f6cx1c, _0x9f6cx9, _0x9f6cx16, _0x9f6cx1d, _0x9f6cx17, _0x9f6cx4, _0x9f6cx6, _0x9f6cxb, _0x9f6cx1, _0x9f6cx12, _0x9f6cxc;
		if (_0x9f6cx1e && !Ext['isArray'](_0x9f6cx1e)) {
			_0x9f6cx1e = [_0x9f6cx1e]
		};
		for (_0x9f6cxc = 0; _0x9f6cx3 && !_0x9f6cx12;) {
			_0x9f6cxf = Ext['applyIf'](_0x9f6cx3, _0x9f6cx1a['getConfig']());
			_0x9f6cx7 = _0x9f6cxf['startBox'], _0x9f6cx15 = _0x9f6cxf['endBox'], _0x9f6cx14 = _0x9f6cxf['startShift'], _0x9f6cx11 = _0x9f6cxf['endShift'], _0x9f6cxa = _0x9f6cxf['startSide'], _0x9f6cx1f = _0x9f6cxf['endSide'], _0x9f6cx21 = _0x9f6cxf['startArrowSize'], _0x9f6cx5 = _0x9f6cxf['endArrowSize'], _0x9f6cx1b = _0x9f6cxf['startArrowMargin'], _0x9f6cx2 = _0x9f6cxf['endArrowMargin'], _0x9f6cxd = _0x9f6cxf['horizontalMargin'], _0x9f6cx19 = _0x9f6cxf['verticalMargin'], _0x9f6cx18 = _0x9f6cxf['hasOwnProperty']('startHorizontalMargin') ? _0x9f6cxf['startHorizontalMargin'] : _0x9f6cxd, _0x9f6cx13 = _0x9f6cxf['hasOwnProperty']('startVerticalMargin') ? _0x9f6cxf['startVerticalMargin'] : _0x9f6cx19, _0x9f6cxe = _0x9f6cxf['hasOwnProperty']('endHorizontalMargin') ? _0x9f6cxf['endHorizontalMargin'] : _0x9f6cxd, _0x9f6cx10 = _0x9f6cxf['hasOwnProperty']('endVerticalMargin') ? _0x9f6cxf['endVerticalMargin'] : _0x9f6cx19, _0x9f6cx8 = _0x9f6cxf['otherBoxes'];
			_0x9f6cxa = _0x9f6cx1a['normalizeSide'](_0x9f6cxa);
			_0x9f6cx1f = _0x9f6cx1a['normalizeSide'](_0x9f6cx1f);
			_0x9f6cx1c = _0x9f6cx1a['getConnectionCoordinatesFromBoxSideShift'](_0x9f6cx7, _0x9f6cxa, _0x9f6cx14);
			_0x9f6cx9 = _0x9f6cx1a['getConnectionCoordinatesFromBoxSideShift'](_0x9f6cx15, _0x9f6cx1f, _0x9f6cx11);
			_0x9f6cx6 = _0x9f6cx1a['calcGridBaseBoxFromBoxAndDrawParams'](_0x9f6cx7, _0x9f6cxa, _0x9f6cx21, _0x9f6cx1b, _0x9f6cx18, _0x9f6cx13);
			_0x9f6cxb = _0x9f6cx1a['calcGridBaseBoxFromBoxAndDrawParams'](_0x9f6cx15, _0x9f6cx1f, _0x9f6cx5, _0x9f6cx2, _0x9f6cxe, _0x9f6cx10);
			_0x9f6cx8 = _0x9f6cx8 && Ext['Array']['map'](_0x9f6cx8, function (_0x9f6cx20) {
				return _0x9f6cx1a['calcGridBaseBoxFromBoxAndDrawParams'](_0x9f6cx20, false, 0, 0, _0x9f6cxd, _0x9f6cx19)
			});
			_0x9f6cx16 = _0x9f6cx1a['getConnectionCoordinatesFromBoxSideShift'](_0x9f6cx6, _0x9f6cxa, _0x9f6cx14);
			_0x9f6cx1d = _0x9f6cx1a['getConnectionCoordinatesFromBoxSideShift'](_0x9f6cxb, _0x9f6cx1f, _0x9f6cx11);
			_0x9f6cx1 = _0x9f6cx1a['buildPathGrid'](_0x9f6cx6, _0x9f6cxb, _0x9f6cx16, _0x9f6cx1d, _0x9f6cxa, _0x9f6cx1f, _0x9f6cx8);
			_0x9f6cx17 = _0x9f6cx1a['convertDecartPointToGridPoint'](_0x9f6cx1, _0x9f6cx16);
			_0x9f6cx4 = _0x9f6cx1a['convertDecartPointToGridPoint'](_0x9f6cx1, _0x9f6cx1d);
			_0x9f6cx12 = _0x9f6cx1a['findPathOnGrid'](_0x9f6cx1, _0x9f6cx17, _0x9f6cx4, _0x9f6cxa, _0x9f6cx1f);
			for (_0x9f6cx3 = false; !_0x9f6cx12 && !_0x9f6cx3 && _0x9f6cx1e && _0x9f6cxc < _0x9f6cx1e['length']; _0x9f6cxc++) {
				_0x9f6cx3 = (_0x9f6cx1e[_0x9f6cxc])(_0x9f6cxf)
			}
		};
		if (_0x9f6cx12) {
			_0x9f6cx12 = _0x9f6cx1a['prependPathWithArrowStaffSegment'](_0x9f6cx12, _0x9f6cx1c, _0x9f6cx21, _0x9f6cxa);
			_0x9f6cx12 = _0x9f6cx1a['appendPathWithArrowStaffSegment'](_0x9f6cx12, _0x9f6cx9, _0x9f6cx5, _0x9f6cx1f);
			_0x9f6cx12 = _0x9f6cx1a['optimizePath'](_0x9f6cx12)
		};
		return _0x9f6cx12
	}
	, getConnectionCoordinatesFromBoxSideShift: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx3;
		switch (_0x9f6cx2) {
		case 'left':
			_0x9f6cx3 = {
				x: _0x9f6cx5['start']
				, y: (_0x9f6cx5['top'] + _0x9f6cx5['bottom']) / 2 + _0x9f6cx1
			};
			break;
		case 'right':
			_0x9f6cx3 = {
				x: _0x9f6cx5['end']
				, y: (_0x9f6cx5['top'] + _0x9f6cx5['bottom']) / 2 + _0x9f6cx1
			};
			break;
		case 'top':
			_0x9f6cx3 = {
				x: (_0x9f6cx5['start'] + _0x9f6cx5['end']) / 2 + _0x9f6cx1
				, y: _0x9f6cx5['top']
			};
			break;
		case 'bottom':
			_0x9f6cx3 = {
				x: (_0x9f6cx5['start'] + _0x9f6cx5['end']) / 2 + _0x9f6cx1
				, y: _0x9f6cx5['bottom']
			};
			break
		};
		return _0x9f6cx3
	}
	, calcGridBaseBoxFromBoxAndDrawParams: function (_0x9f6cx7, _0x9f6cx5, _0x9f6cx3, _0x9f6cx6, _0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx4;
		switch (_0x9f6cx5) {
		case 'left':
			_0x9f6cx4 = {
				start: _0x9f6cx7['start'] - Math['max'](_0x9f6cx3 + _0x9f6cx6, _0x9f6cx2)
				, end: _0x9f6cx7['end'] + _0x9f6cx2
				, top: _0x9f6cx7['top'] - _0x9f6cx1
				, bottom: _0x9f6cx7['bottom'] + _0x9f6cx1
			};
			break;
		case 'right':
			_0x9f6cx4 = {
				start: _0x9f6cx7['start'] - _0x9f6cx2
				, end: _0x9f6cx7['end'] + Math['max'](_0x9f6cx3 + _0x9f6cx6, _0x9f6cx2)
				, top: _0x9f6cx7['top'] - _0x9f6cx1
				, bottom: _0x9f6cx7['bottom'] + _0x9f6cx1
			};
			break;
		case 'top':
			_0x9f6cx4 = {
				start: _0x9f6cx7['start'] - _0x9f6cx2
				, end: _0x9f6cx7['end'] + _0x9f6cx2
				, top: _0x9f6cx7['top'] - Math['max'](_0x9f6cx3 + _0x9f6cx6, _0x9f6cx1)
				, bottom: _0x9f6cx7['bottom'] + _0x9f6cx1
			};
			break;
		case 'bottom':
			_0x9f6cx4 = {
				start: _0x9f6cx7['start'] - _0x9f6cx2
				, end: _0x9f6cx7['end'] + _0x9f6cx2
				, top: _0x9f6cx7['top'] - _0x9f6cx1
				, bottom: _0x9f6cx7['bottom'] + Math['max'](_0x9f6cx3 + _0x9f6cx6, _0x9f6cx1)
			};
			break;
		default:
			_0x9f6cx4 = {
				start: _0x9f6cx7['start'] - _0x9f6cx2
				, end: _0x9f6cx7['end'] + _0x9f6cx2
				, top: _0x9f6cx7['top'] - _0x9f6cx1
				, bottom: _0x9f6cx7['bottom'] + _0x9f6cx1
			}
		};
		return _0x9f6cx4
	}
	, buildPathGrid: function (_0x9f6cx1, _0x9f6cxa, _0x9f6cx10, _0x9f6cx14, _0x9f6cx3, _0x9f6cx16, _0x9f6cx7) {
		var _0x9f6cx6, _0x9f6cxf, _0x9f6cx8, _0x9f6cxc, _0x9f6cx5, _0x9f6cx2, _0x9f6cx17, _0x9f6cx13, _0x9f6cxe, _0x9f6cx4, _0x9f6cx9, _0x9f6cx11, _0x9f6cxd, _0x9f6cx12 = {}
			, _0x9f6cxb = [];
		_0x9f6cx6 = [_0x9f6cx1['start'], (_0x9f6cx3 == 'left' || _0x9f6cx3 == 'right') ? (_0x9f6cx1['start'] + _0x9f6cx1['end']) / 2 : _0x9f6cx10['x'], _0x9f6cx1['end'], _0x9f6cxa['start'], (_0x9f6cx16 == 'left' || _0x9f6cx16 == 'right') ? (_0x9f6cxa['start'] + _0x9f6cxa['end']) / 2 : _0x9f6cx14['x'], _0x9f6cxa['end']];
		_0x9f6cxf = [_0x9f6cx1['top'], (_0x9f6cx3 == 'top' || _0x9f6cx3 == 'bottom') ? (_0x9f6cx1['top'] + _0x9f6cx1['bottom']) / 2 : _0x9f6cx10['y'], _0x9f6cx1['bottom'], _0x9f6cxa['top'], (_0x9f6cx16 == 'top' || _0x9f6cx16 == 'bottom') ? (_0x9f6cxa['top'] + _0x9f6cxa['bottom']) / 2 : _0x9f6cx14['y'], _0x9f6cxa['bottom']];
		if (_0x9f6cx7) {
			Ext['Array']['forEach'](_0x9f6cx7, function (_0x9f6cx15) {
				_0x9f6cx6['push'](_0x9f6cx15['start'], (_0x9f6cx15['start'] + _0x9f6cx15['end']) / 2, _0x9f6cx15['end']);
				_0x9f6cxf['push'](_0x9f6cx15['top'], (_0x9f6cx15['top'] + _0x9f6cx15['bottom']) / 2, _0x9f6cx15['bottom'])
			})
		};
		_0x9f6cx6 = Ext['Array']['unique'](Ext['Array']['sort'](_0x9f6cx6, Ext['Array']['numericSortFn']));
		_0x9f6cxf = Ext['Array']['unique'](Ext['Array']['sort'](_0x9f6cxf, Ext['Array']['numericSortFn']));
		for (_0x9f6cx2 = 0, _0x9f6cx13 = _0x9f6cxf['length']; _0x9f6cx2 < _0x9f6cx13; ++_0x9f6cx2) {
			_0x9f6cx12[_0x9f6cx2] = _0x9f6cx12[_0x9f6cx2] || {};
			_0x9f6cx8 = _0x9f6cxf[_0x9f6cx2];
			for (_0x9f6cx5 = 0, _0x9f6cx17 = _0x9f6cx6['length']; _0x9f6cx5 < _0x9f6cx17; ++_0x9f6cx5) {
				_0x9f6cxc = _0x9f6cx6[_0x9f6cx5];
				_0x9f6cx11 = ((_0x9f6cxc <= _0x9f6cx1['start'] || _0x9f6cxc >= _0x9f6cx1['end'] || _0x9f6cx8 <= _0x9f6cx1['top'] || _0x9f6cx8 >= _0x9f6cx1['bottom']) && (_0x9f6cxc <= _0x9f6cxa['start'] || _0x9f6cxc >= _0x9f6cxa['end'] || _0x9f6cx8 <= _0x9f6cxa['top'] || _0x9f6cx8 >= _0x9f6cxa['bottom']));
				if (_0x9f6cx7) {
					for (_0x9f6cxe = 0, _0x9f6cx4 = _0x9f6cx7['length']; _0x9f6cx11 && _0x9f6cxe < _0x9f6cx4; ++_0x9f6cxe) {
						_0x9f6cx9 = _0x9f6cx7[_0x9f6cxe];
						_0x9f6cx11 = (_0x9f6cxc <= _0x9f6cx9['start'] || _0x9f6cxc >= _0x9f6cx9['end'] || _0x9f6cx8 <= _0x9f6cx9['top'] || _0x9f6cx8 >= _0x9f6cx9['bottom'])
					}
				};
				_0x9f6cxd = {
					distance: Math['pow'](2, 53) - 1
					, permitted: _0x9f6cx11
					, x: _0x9f6cxc
					, y: _0x9f6cx8
					, ix: _0x9f6cx5
					, iy: _0x9f6cx2
				};
				_0x9f6cx12[_0x9f6cx2][_0x9f6cx5] = _0x9f6cxd;
				_0x9f6cxb['push'](_0x9f6cxd)
			}
		};
		return {
			width: _0x9f6cx6['length']
			, height: _0x9f6cxf['length']
			, xs: _0x9f6cx6
			, ys: _0x9f6cxf
			, points: _0x9f6cx12
			, linearPoints: _0x9f6cxb
		}
	}
	, convertDecartPointToGridPoint: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = Ext['Array']['indexOf'](_0x9f6cx5['xs'], _0x9f6cx2['x'])
			, _0x9f6cx3 = Ext['Array']['indexOf'](_0x9f6cx5['ys'], _0x9f6cx2['y']);
		return _0x9f6cx5['points'][_0x9f6cx3][_0x9f6cx1]
	}
	, findPathOnGrid: function (_0x9f6cx5, _0x9f6cx6, _0x9f6cx2, _0x9f6cx1, _0x9f6cx7) {
		var _0x9f6cx3 = this
			, _0x9f6cx4 = false;
		if (_0x9f6cx6['permitted'] && _0x9f6cx2['permitted']) {
			_0x9f6cx5 = _0x9f6cx3['waveForward'](_0x9f6cx5, _0x9f6cx6, 0);
			_0x9f6cx4 = _0x9f6cx3['collectPath'](_0x9f6cx5, _0x9f6cx2, _0x9f6cx7)
		};
		return _0x9f6cx4
	}
	, getGridPointNeighbors: function (_0x9f6cx4, _0x9f6cx3, _0x9f6cx6) {
		var _0x9f6cx5 = _0x9f6cx3['ix']
			, _0x9f6cx2 = _0x9f6cx3['iy']
			, _0x9f6cx1 = []
			, _0x9f6cx7;
		if (_0x9f6cx2 < _0x9f6cx4['height'] - 1) {
			_0x9f6cx7 = _0x9f6cx4['points'][_0x9f6cx2 + 1][_0x9f6cx5];
			(!_0x9f6cx6 || _0x9f6cx6(_0x9f6cx7)) && _0x9f6cx1['push'](_0x9f6cx7)
		};
		if (_0x9f6cx2 > 0) {
			_0x9f6cx7 = _0x9f6cx4['points'][_0x9f6cx2 - 1][_0x9f6cx5];
			(!_0x9f6cx6 || _0x9f6cx6(_0x9f6cx7)) && _0x9f6cx1['push'](_0x9f6cx7)
		};
		if (_0x9f6cx5 < _0x9f6cx4['width'] - 1) {
			_0x9f6cx7 = _0x9f6cx4['points'][_0x9f6cx2][_0x9f6cx5 + 1];
			(!_0x9f6cx6 || _0x9f6cx6(_0x9f6cx7)) && _0x9f6cx1['push'](_0x9f6cx7)
		};
		if (_0x9f6cx5 > 0) {
			_0x9f6cx7 = _0x9f6cx4['points'][_0x9f6cx2][_0x9f6cx5 - 1];
			(!_0x9f6cx6 || _0x9f6cx6(_0x9f6cx7)) && _0x9f6cx1['push'](_0x9f6cx7)
		};
		return _0x9f6cx1
	}
	, waveForward: function (_0x9f6cx2, _0x9f6cx4, _0x9f6cx3) {
		var _0x9f6cxc = this
			, _0x9f6cxb, _0x9f6cx7, _0x9f6cx6, _0x9f6cx13, _0x9f6cx1, _0x9f6cx5, _0x9f6cxa, _0x9f6cx8;
		_0x9f6cx4['distance'] = _0x9f6cx3;
		_0x9f6cxb = _0x9f6cxc['getGridPointNeighbors'](_0x9f6cx2, _0x9f6cx4, function (_0x9f6cx9) {
			return _0x9f6cx9['permitted'] && (_0x9f6cx9['distance'] > _0x9f6cx3 + 1)
		});
		for (_0x9f6cx7 = 0, _0x9f6cx6 = _0x9f6cxb['length']; _0x9f6cx7 < _0x9f6cx6; ++_0x9f6cx7) {
			_0x9f6cx13 = _0x9f6cxb[_0x9f6cx7];
			_0x9f6cx13['distance'] = _0x9f6cx3 + 1
		};
		for (_0x9f6cx7 = 0, _0x9f6cx6 = _0x9f6cxb['length']; _0x9f6cx7 < _0x9f6cx6; ++_0x9f6cx7) {
			_0x9f6cx13 = _0x9f6cxb[_0x9f6cx7];
			_0x9f6cxc['waveForward'](_0x9f6cx2, _0x9f6cx13, _0x9f6cx3 + 1)
		};
		return _0x9f6cx2
	}
	, collectPath: function (_0x9f6cx1, _0x9f6cx2, _0x9f6cx6) {
		var _0x9f6cx4 = this
			, _0x9f6cx5 = true
			, _0x9f6cx9, _0x9f6cx8, _0x9f6cx7, _0x9f6cx3, _0x9f6cxc = [];
		while (_0x9f6cx5 && _0x9f6cx2['distance']) {
			_0x9f6cx9 = _0x9f6cx4['getGridPointNeighbors'](_0x9f6cx1, _0x9f6cx2, function (_0x9f6cxa) {
				return _0x9f6cxa['permitted'] && (_0x9f6cxa['distance'] == _0x9f6cx2['distance'] - 1)
			});
			_0x9f6cx5 = _0x9f6cx9['length'] > 0;
			if (_0x9f6cx5) {
				_0x9f6cx9 = Ext['Array']['sort'](_0x9f6cx9, function (_0x9f6cx13, _0x9f6cxa) {
					var _0x9f6cxf, _0x9f6cxd;
					_0x9f6cxf = _0x9f6cx13['ix'] - _0x9f6cx2['ix'];
					_0x9f6cxd = _0x9f6cx13['iy'] - _0x9f6cx2['iy'];
					var _0x9f6cxe = (((_0x9f6cx6 == 'left' || _0x9f6cx6 == 'right') && _0x9f6cxd === 0) || ((_0x9f6cx6 == 'top' || _0x9f6cx6 == 'bottom') && _0x9f6cxf === 0)) ? -1 : 1;
					_0x9f6cxf = _0x9f6cxa['ix'] - _0x9f6cx2['ix'];
					_0x9f6cxd = _0x9f6cxa['iy'] - _0x9f6cx2['iy'];
					var _0x9f6cxb = (((_0x9f6cx6 == 'left' || _0x9f6cx6 == 'right') && _0x9f6cxd === 0) || ((_0x9f6cx6 == 'top' || _0x9f6cx6 == 'bottom') && _0x9f6cxf === 0)) ? -1 : 1;
					if (_0x9f6cxe > _0x9f6cxb) {
						return 1
					}
					else {
						if (_0x9f6cxe < _0x9f6cxb) {
							return -1
						}
						else {
							if (_0x9f6cxe == _0x9f6cxb) {
								return _0x9f6cx13['y'] > _0x9f6cxa['y'] ? -1 : 1
							}
						}
					}
				});
				_0x9f6cx8 = _0x9f6cx9[0];
				_0x9f6cxc['push']({
					x1: _0x9f6cx8['x']
					, y1: _0x9f6cx8['y']
					, x2: _0x9f6cx2['x']
					, y2: _0x9f6cx2['y']
				});
				_0x9f6cx7 = _0x9f6cx8['ix'] - _0x9f6cx2['ix'];
				_0x9f6cx3 = _0x9f6cx8['iy'] - _0x9f6cx2['iy'];
				switch (true) {
				case !_0x9f6cx3 && _0x9f6cx7 > 0:
					_0x9f6cx6 = 'left';
					break;
				case !_0x9f6cx3 && _0x9f6cx7 < 0:
					_0x9f6cx6 = 'right';
					break;
				case !_0x9f6cx7 && _0x9f6cx3 > 0:
					_0x9f6cx6 = 'top';
					break;
				case !_0x9f6cx7 && _0x9f6cx3 < 0:
					_0x9f6cx6 = 'bottom';
					break
				};
				_0x9f6cx2 = _0x9f6cx8
			}
		};
		return _0x9f6cx5 && _0x9f6cxc['reverse']() || false
	}
	, prependPathWithArrowStaffSegment: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx7, _0x9f6cx1) {
		var _0x9f6cx2, _0x9f6cx3;
		if (_0x9f6cx4['length'] > 0) {
			_0x9f6cx3 = _0x9f6cx4[0];
			_0x9f6cx2 = {
				x2: _0x9f6cx3['x1']
				, y2: _0x9f6cx3['y1']
			};
			switch (_0x9f6cx1) {
			case 'left':
				_0x9f6cx2['x1'] = _0x9f6cx5['x'] - _0x9f6cx7;
				_0x9f6cx2['y1'] = _0x9f6cx3['y1'];
				break;
			case 'right':
				_0x9f6cx2['x1'] = _0x9f6cx5['x'] + _0x9f6cx7;
				_0x9f6cx2['y1'] = _0x9f6cx3['y1'];
				break;
			case 'top':
				_0x9f6cx2['x1'] = _0x9f6cx3['x1'];
				_0x9f6cx2['y1'] = _0x9f6cx5['y'] - _0x9f6cx7;
				break;
			case 'bottom':
				_0x9f6cx2['x1'] = _0x9f6cx3['x1'];
				_0x9f6cx2['y1'] = _0x9f6cx5['y'] + _0x9f6cx7;
				break
			};
			_0x9f6cx4['unshift'](_0x9f6cx2)
		};
		return _0x9f6cx4
	}
	, appendPathWithArrowStaffSegment: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx1, _0x9f6cx7) {
		var _0x9f6cx3, _0x9f6cx2;
		if (_0x9f6cx4['length'] > 0) {
			_0x9f6cx2 = _0x9f6cx4[_0x9f6cx4['length'] - 1];
			_0x9f6cx3 = {
				x1: _0x9f6cx2['x2']
				, y1: _0x9f6cx2['y2']
			};
			switch (_0x9f6cx7) {
			case 'left':
				_0x9f6cx3['x2'] = _0x9f6cx5['x'] - _0x9f6cx1;
				_0x9f6cx3['y2'] = _0x9f6cx2['y2'];
				break;
			case 'right':
				_0x9f6cx3['x2'] = _0x9f6cx5['x'] + _0x9f6cx1;
				_0x9f6cx3['y2'] = _0x9f6cx2['y2'];
				break;
			case 'top':
				_0x9f6cx3['x2'] = _0x9f6cx2['x2'];
				_0x9f6cx3['y2'] = _0x9f6cx5['y'] - _0x9f6cx1;
				break;
			case 'bottom':
				_0x9f6cx3['x2'] = _0x9f6cx2['x2'];
				_0x9f6cx3['y2'] = _0x9f6cx5['y'] + _0x9f6cx1;
				break
			};
			_0x9f6cx4['push'](_0x9f6cx3)
		};
		return _0x9f6cx4
	}
	, optimizePath: function (_0x9f6cx3) {
		var _0x9f6cx1 = []
			, _0x9f6cx2, _0x9f6cx5;
		if (_0x9f6cx3['length'] > 0) {
			_0x9f6cx2 = _0x9f6cx3['shift']();
			_0x9f6cx1['push'](_0x9f6cx2);
			while (_0x9f6cx3['length'] > 0) {
				_0x9f6cx5 = _0x9f6cx3['shift']();
				if (_0x9f6cx2['x1'] == _0x9f6cx5['x1'] && _0x9f6cx2['y1'] == _0x9f6cx5['y1'] && _0x9f6cx2['x2'] == _0x9f6cx5['x2'] && _0x9f6cx2['y2'] == _0x9f6cx5['y2']) {
					_0x9f6cx2 = _0x9f6cx5
				}
				else {
					if ((_0x9f6cx2['y1'] - _0x9f6cx2['y2'] === 0) && (_0x9f6cx5['y1'] - _0x9f6cx5['y2'] === 0)) {
						_0x9f6cx2['x2'] = _0x9f6cx5['x2']
					}
					else {
						if ((_0x9f6cx2['x1'] - _0x9f6cx2['x2'] === 0) && (_0x9f6cx5['x1'] - _0x9f6cx5['x2'] === 0)) {
							_0x9f6cx2['y2'] = _0x9f6cx5['y2']
						}
						else {
							_0x9f6cx1['push'](_0x9f6cx5);
							_0x9f6cx2 = _0x9f6cx5
						}
					}
				}
			}
		};
		return _0x9f6cx1
	}
	, normalizeSide: function (_0x9f6cx1) {
		return this['self']['sideToSide'][_0x9f6cx1] || _0x9f6cx1
	}
	, statics: {
		sideToSide: {
			l: 'left'
			, r: 'right'
			, t: 'top'
			, b: 'bottom'
		}
	}
});
Ext.define('Ext.ux.Scheduler.template.Dependency', {
	extend: 'Ext.XTemplate'
	, disableFormats: true
	, rtl: null
	, text: '<tpl if="startArrow"><div style="__SIDE__:{startArrow.side}px;top:{startArrow.top}px" class="sch-dependency sch-dependency-arrow sch-dependency-start-arrow sch-dependency-arrow-{startArrow.dir} {lineCls} {[ this.getSuffixedCls(values.cls, "-arrow") ]} {[ values.highlighted || "" ]}" <tpl if="dependencyId">data-sch-dependency-id="{[values.dependencyId]}"</tpl>></div></tpl><tpl for="segments"><div class="sch-dependency sch-dependency-line sch-dependency-line-{dir} {parent.lineCls} {[ parent.highlighted || "" ]} {[ this.getSuffixedCls(parent.cls, "-line") ]}" style="__SIDE__:{side}px;top:{top}px;<tpl if="width !== null && width !== undefined">width:{width}px;</tpl><tpl if="height !== null && height !== undefined">height:{height}px</tpl>" <tpl if="parent.dependencyId">data-sch-dependency-id="{parent.dependencyId}"</tpl>></div></tpl><tpl if="endArrow"><div style="__SIDE__:{endArrow.side}px;top:{endArrow.top}px" class="sch-dependency sch-dependency-arrow sch-dependency-end-arrow sch-dependency-arrow-{endArrow.dir} {lineCls} {[ this.getSuffixedCls(values.cls, "-arrow") ]} {[ values.highlighted || "" ]}" <tpl if="dependencyId">data-sch-dependency-id="{dependencyId}"</tpl>></div></tpl>'
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		Ext['apply'](_0x9f6cx2, _0x9f6cx1);
		_0x9f6cx2['text'] = _0x9f6cx2['text']['replace'](/__SIDE__/g, _0x9f6cx2['rtl'] ? 'right' : 'left');
		_0x9f6cx2['callParent']([_0x9f6cx2['text']])
	}
	, getSuffixedCls: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = '';
		if (_0x9f6cx2 && _0x9f6cx2['indexOf'](' ') != -1) {
			_0x9f6cx1 = _0x9f6cx2['replace'](/^\s*(.*)\s*$/, '$1')['split'](/\s+/).join(_0x9f6cx5 + ' ') + _0x9f6cx5
		}
		else {
			if (_0x9f6cx2) {
				_0x9f6cx1 = _0x9f6cx2 + _0x9f6cx5
			}
		};
		return _0x9f6cx1
	}
});
Ext.define('Ext.ux.Scheduler.view.dependency.Painter', function (_0x9f6cx1) {
	function _0x9f6cx2(_0x9f6cx7) {
		var _0x9f6cx6 = false;
		if (_0x9f6cx7['startArrowMargin'] > 0 || _0x9f6cx7['endArrowMargin'] > 0) {
			_0x9f6cx7['startArrowMargin'] = _0x9f6cx7['endArrowMargin'] = 0;
			_0x9f6cx6 = true
		};
		return _0x9f6cx6 ? _0x9f6cx7 : _0x9f6cx6
	}

	function _0x9f6cx3(_0x9f6cx7) {
		var _0x9f6cx6 = false;
		if (_0x9f6cx7['hasOwnProperty']('startHorizontalMargin') && _0x9f6cx7['startHorizontalMargin'] > 2) {
			_0x9f6cx7['startHorizontalMargin'] = Math['round'](_0x9f6cx7['startHorizontalMargin'] / 2);
			_0x9f6cx6 = true
		};
		if (_0x9f6cx7['hasOwnProperty']('startVerticalMargin') && _0x9f6cx7['startVerticalMargin'] > 2) {
			_0x9f6cx7['startVerticalMargin'] = Math['round'](_0x9f6cx7['startVerticalMargin'] / 2);
			_0x9f6cx6 = true
		};
		if (_0x9f6cx7['hasOwnProperty']('endHorizontalMargin') && _0x9f6cx7['endHorizontalMargin'] > 2) {
			_0x9f6cx7['endHorizontalMargin'] = Math['round'](_0x9f6cx7['endHorizontalMargin'] / 2);
			_0x9f6cx6 = true
		};
		if (_0x9f6cx7['hasOwnProperty']('endVerticalMargin') && _0x9f6cx7['endVerticalMargin'] > 2) {
			_0x9f6cx7['endVerticalMargin'] = Math['round'](_0x9f6cx7['endVerticalMargin'] / 2);
			_0x9f6cx6 = true
		};
		return _0x9f6cx6 ? _0x9f6cx7 : _0x9f6cx6
	}

	function _0x9f6cx5(_0x9f6cx7) {
		var _0x9f6cx6 = false;
		if (_0x9f6cx7['startArrowSize'] > 0 || _0x9f6cx7['endArrowSize'] > 0) {
			_0x9f6cx7['startArrowSize'] = _0x9f6cx7['endArrowSize'] = 0;
			_0x9f6cx6 = true
		};
		return _0x9f6cx6 ? _0x9f6cx7 : _0x9f6cx6
	}
	var _0x9f6cx4 = [_0x9f6cx2, _0x9f6cx3, _0x9f6cx3, _0x9f6cx3, _0x9f6cx5];
	return {
		alias: 'schdependencypainter.default'
		, mixins: ['Ext.mixin.Factoryable']
		, requires: ['Ext.ux.Scheduler.util.RectangularPathFinder', 'Ext.ux.Scheduler.template.Dependency']
		, uses: ['Ext.Array', 'Ext.XTemplate', 'Ext.dom.Query', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.util.RectangularPathFinder', 'Ext.ux.Scheduler.template.Dependency']
		, config: {
			selectedCls: 'sch-dependency-selected'
			, cls: ''
			, rtl: false
			, lineTpl: null
			, canvasCls: null
			, pathFinderConfig: null
			, realLineThickness: null
			, useDependencyRowIntersectionCache: true
		}
		, pathFinder: null
		, dependencyIdAttr: 'data-sch-dependency-id'
		, constructor: function (_0x9f6cx7) {
			var _0x9f6cx6 = this;
			_0x9f6cx6['initConfig'](_0x9f6cx7);
			_0x9f6cx6['pathFinder'] = _0x9f6cx6['createPathFinder'](_0x9f6cx6['getPathFinderConfig']());
			if (!_0x9f6cx6['getLineTpl']()) {
				_0x9f6cx6['setLineTpl'](new Ext.ux.Scheduler['template'].Dependency({
					rtl: _0x9f6cx6['getRtl']()
				}))
			};
			_0x9f6cx6['resetRowIntersectionCache']()
		}
		, clone: function () {
			var _0x9f6cx7 = this;
			return new _0x9f6cx7['self'](_0x9f6cx7['getConfig']())
		}
		, applyLineTpl: function (_0x9f6cx7) {
			return _0x9f6cx7 instanceof Ext['XTemplate'] ? _0x9f6cx7 : new Ext.XTemplate(_0x9f6cx7)
		}
		, updatePathFinderConfig: function (_0x9f6cx7) {
			var _0x9f6cx6 = this;
			if (_0x9f6cx6['pathFinder']) {
				if (_0x9f6cx7 && 'type' in _0x9f6cx7 && _0x9f6cx7['type'] !== _0x9f6cx6['pathFinder']['type']) {
					Ext['destroy'](_0x9f6cx6['pathFinder']);
					_0x9f6cx6['pathFinder'] = _0x9f6cx6['createPathFinder'](_0x9f6cx7)
				}
				else {
					_0x9f6cx6['pathFinder']['setConfig'](_0x9f6cx7)
				}
			}
		}
		, createPathFinder: function (_0x9f6cx7) {
			return Ext.ux.Scheduler['util']['RectangularPathFinder']['create'](_0x9f6cx7)
		}
		, getCanvasSpecification: function () {
			return {
				tag: 'div'
				, role: 'presentation'
				, cls: this['getCanvasCls']()
			}
		}
		, paint: function (_0x9f6cx13, _0x9f6cx9, _0x9f6cxa, _0x9f6cx6) {
			var _0x9f6cxc = this
				, _0x9f6cxb = _0x9f6cxc['getUseDependencyRowIntersectionCache']() ? _0x9f6cxc['filterByRowIntersections'](_0x9f6cx13, _0x9f6cxa) : _0x9f6cxa
				, _0x9f6cx7 = _0x9f6cxc['generatePaintMarkup'](_0x9f6cx13, _0x9f6cxb);
			_0x9f6cx9 = Ext['fly'](_0x9f6cx9);
			if (_0x9f6cx6) {
				var _0x9f6cx8 = document['createElement']('div');
				_0x9f6cx8['innerHTML'] = _0x9f6cx7;
				_0x9f6cx9['syncContent'](_0x9f6cx8)
			}
			else {
				_0x9f6cx9['insertHtml']('beforeEnd', _0x9f6cx7)
			}
		}
		, generatePaintMarkup: function (_0x9f6cx9, _0x9f6cx8) {
			var _0x9f6cx6 = this
				, _0x9f6cx7 = _0x9f6cx6['getLineDefsForDependencies'](_0x9f6cx9, _0x9f6cx8);
			if (!Ext['isArray'](_0x9f6cx7)) {
				_0x9f6cx7 = [_0x9f6cx7]
			};
			return Ext['Array']['map'](_0x9f6cx7, function (_0x9f6cxa) {
				var _0x9f6cxc;
				_0x9f6cxa['path'] = _0x9f6cx6['findPath'](_0x9f6cxa);
				_0x9f6cxc = _0x9f6cxa['path'] && _0x9f6cx6['getLineTplData'](_0x9f6cxa);
				return _0x9f6cxc && _0x9f6cx6['getLineTpl']()['apply'](_0x9f6cxc) || ''
			}).join('')
		}
		, isDependencyElement: function (_0x9f6cx7) {
			return Ext['fly'](_0x9f6cx7)['is']('.sch-dependency')
		}
		, getElementsForDependency: function (_0x9f6cx7, _0x9f6cx8) {
			var _0x9f6cx9 = Ext['dom']['Query']
				, _0x9f6cx6 = this;
			if (_0x9f6cx8 && !Ext['isArray'](_0x9f6cx8)) {
				_0x9f6cx8 = [_0x9f6cx8]
			};
			return new Ext['dom'].CompositeElementLite(Ext['Array']['reduce'](_0x9f6cx8 || [], function (_0x9f6cxc, _0x9f6cxa) {
				return _0x9f6cxc['concat'](_0x9f6cx9['select']('[' + _0x9f6cx6['dependencyIdAttr'] + '="' + _0x9f6cxa['internalId'] + '"]', Ext['getDom'](_0x9f6cx7)))
			}, []))
		}
		, getDependencyElements: function (_0x9f6cx6) {
			var _0x9f6cx7 = Ext['getDom'](_0x9f6cx6);
			return new Ext['dom'].CompositeElementLite(_0x9f6cx7 && _0x9f6cx7['childNodes'] || [])
		}
		, getElementDependencyInternalId: function (_0x9f6cx7) {
			return Ext['fly'](_0x9f6cx7)['getAttribute'](this['dependencyIdAttr'])
		}
		, highlightDependency: function (_0x9f6cx8, _0x9f6cx6, _0x9f6cx7) {
			var _0x9f6cx9 = this;
			_0x9f6cx9['getElementsForDependency'](_0x9f6cx8, _0x9f6cx6)['addCls'](_0x9f6cx7 || _0x9f6cx9['getSelectedCls']())
		}
		, unhighlightDependency: function (_0x9f6cx8, _0x9f6cx6, _0x9f6cx7) {
			var _0x9f6cx9 = this;
			_0x9f6cx9['getElementsForDependency'](_0x9f6cx8, _0x9f6cx6)['removeCls'](_0x9f6cx7 || _0x9f6cx9['getSelectedCls']())
		}
		, getSelectedDependencyElements: function (_0x9f6cx7) {
			var _0x9f6cx6 = this;
			return Ext['fly'](_0x9f6cx7)['select']('.' + _0x9f6cx6['getSelectedCls']())
		}
		, clearSelectedDependencies: function (_0x9f6cx7) {
			var _0x9f6cx6 = this;
			_0x9f6cx6['getDependencyElements'](_0x9f6cx7)['removeCls'](_0x9f6cx6['getSelectedCls']())
		}
		, findPath: function (_0x9f6cx7) {
			var _0x9f6cx6;
			_0x9f6cx6 = this['pathFinder']['findPath'](_0x9f6cx7, _0x9f6cx4);
			if (!_0x9f6cx6) {
				if (_0x9f6cx7['startBox']['bottom'] - _0x9f6cx7['startBox']['top'] === 0 || _0x9f6cx7['endBox']['bottom'] - _0x9f6cx7['endBox']['top'] === 0) {
					throw new Error('Zero height dependency line boxes detected')
				}
			};
			return _0x9f6cx6
		}
		, getLineTplData: function (_0x9f6cx7) {
			var _0x9f6cxc = this
				, _0x9f6cx13, _0x9f6cx8, _0x9f6cxb, _0x9f6cxa, _0x9f6cxd;
			_0x9f6cxd = _0x9f6cx7['path'];
			if (!_0x9f6cx7['startBox']['rendered'] && !_0x9f6cx7['endBox']['rendered']) {
				for (var _0x9f6cx6 = _0x9f6cxd['length'] - 1; _0x9f6cx6 >= 0; _0x9f6cx6--) {
					var _0x9f6cxe = _0x9f6cxd[_0x9f6cx6];
					if (_0x9f6cxe['x1'] === _0x9f6cxe['x2']) {
						_0x9f6cxd = [_0x9f6cxe];
						_0x9f6cx7['startArrowSize'] = _0x9f6cx7['endArrowSize'] = 0;
						break
					}
				}
			};
			_0x9f6cx13 = _0x9f6cxc['getRtl']();
			_0x9f6cx8 = _0x9f6cxc['getRealLineThickness']();
			_0x9f6cxb = _0x9f6cxd['length'] && _0x9f6cxd[0];
			_0x9f6cxa = _0x9f6cxd['length'] && _0x9f6cxd[_0x9f6cxd['length'] - 1];
			_0x9f6cxd = {
				cls: _0x9f6cx7['cls'] || ''
				, lineCls: _0x9f6cx7['lineCls'] || ''
				, dependencyId: _0x9f6cx7['dependencyId'] || ''
				, highlighted: _0x9f6cx7['highlighted']
				, segments: Ext['Array']['map'](_0x9f6cxd, function (_0x9f6cx12) {
					var _0x9f6cxf = _0x9f6cxc['getSegmentDir'](_0x9f6cx12)
						, _0x9f6cx9;
					if (_0x9f6cxf == 'horizontal') {
						_0x9f6cx9 = {
							width: Math['abs'](_0x9f6cx12['x1'] - _0x9f6cx12['x2']) + 1
							, height: _0x9f6cx8
							, top: Math['min'](_0x9f6cx12['y1'], _0x9f6cx12['y2'])
							, side: Math['min'](_0x9f6cx12['x1'], _0x9f6cx12['x2'])
							, dir: _0x9f6cxf
						}
					}
					else {
						_0x9f6cx9 = {
							height: Math['abs'](_0x9f6cx12['y1'] - _0x9f6cx12['y2']) + 1
							, width: _0x9f6cx8
							, top: Math['min'](_0x9f6cx12['y1'], _0x9f6cx12['y2'])
							, side: Math['min'](_0x9f6cx12['x1'], _0x9f6cx12['x2'])
							, dir: _0x9f6cxf
						}
					};
					return _0x9f6cx9
				})
				, startArrow: _0x9f6cx7['startArrowSize'] && {
					side: _0x9f6cxb['x1']
					, top: _0x9f6cxb['y1']
					, dir: _0x9f6cxc['convertSideToDir'](_0x9f6cx7['startSide'], _0x9f6cx13)
				}
				, endArrow: _0x9f6cx7['endArrowSize'] && {
					side: _0x9f6cxa['x2']
					, top: _0x9f6cxa['y2']
					, dir: _0x9f6cxc['convertSideToDir'](_0x9f6cx7['endSide'], _0x9f6cx13)
				}
				, realLineThickness: _0x9f6cxc['getRealLineThickness']()
			};
			return _0x9f6cxd
		}
		, isDependencyInTimeSpan: function (_0x9f6cx6, _0x9f6cx7, _0x9f6cx9) {
			var _0x9f6cx8 = _0x9f6cx6['getDateRange']();
			return _0x9f6cx8 && (!_0x9f6cx7 || !_0x9f6cx9 || Ext.ux.Scheduler['util']['Date']['intersectSpans'](_0x9f6cx8['start'], _0x9f6cx8['end'], _0x9f6cx7, _0x9f6cx9))
		}
		, addToRowIntersectionCacheIfNotPresent: function (_0x9f6cxc, _0x9f6cx9) {
			var _0x9f6cx6 = this
				, _0x9f6cxa = _0x9f6cxc['getViewStartDate']()
				, _0x9f6cx8 = _0x9f6cxc['getViewEndDate']()
				, _0x9f6cx7 = _0x9f6cx6['dependencyStore']['count']() === _0x9f6cx9['length'];
			if (_0x9f6cx6['allInRowIntersectionCache']) {
				return
			};
			Ext['Array']['each'](_0x9f6cx9, function (_0x9f6cxe) {
				if (_0x9f6cx7 || !_0x9f6cx6['isInRowIntersectionCache'](_0x9f6cxe)) {
					var _0x9f6cx12 = _0x9f6cxe['getSourceEvent']()
						, _0x9f6cx11 = _0x9f6cxe['getTargetEvent']();
					if (_0x9f6cx6['isDependencyInTimeSpan'](_0x9f6cxe, _0x9f6cxa, _0x9f6cx8)) {
						var _0x9f6cx13 = _0x9f6cx6['getIndexForCache'](_0x9f6cxc, _0x9f6cx12)
							, _0x9f6cxb = _0x9f6cx6['getIndexForCache'](_0x9f6cxc, _0x9f6cx11)
							, _0x9f6cx10 = Math['min'](_0x9f6cx13, _0x9f6cxb)
							, _0x9f6cxf = Math['max'](_0x9f6cx13, _0x9f6cxb);
						if (_0x9f6cx10 > -1 && _0x9f6cxf > -1) {
							_0x9f6cx10 = Math['floor'](_0x9f6cx10 / 10);
							_0x9f6cxf = Math['floor'](_0x9f6cxf / 10);
							for (var _0x9f6cxd = _0x9f6cx10; _0x9f6cxd <= _0x9f6cxf; _0x9f6cxd++) {
								if (!_0x9f6cx6['rowIntersectionCache'][_0x9f6cxd]) {
									_0x9f6cx6['rowIntersectionCache'][_0x9f6cxd] = []
								};
								_0x9f6cx6['rowIntersectionCache'][_0x9f6cxd]['push'](_0x9f6cxe);
								_0x9f6cx6['cachedDependencies'][_0x9f6cxe['internalId']] = true
							}
						}
					}
				}
			});
			if (!_0x9f6cx7) {
				_0x9f6cx7 = Object['keys'](_0x9f6cx6['cachedDependencies'])['length'] === _0x9f6cx6['dependencyStore']['count']()
			};
			if (_0x9f6cx7) {
				_0x9f6cx6['allInRowIntersectionCache'] = true
			}
		}
		, getIndexForCache: function (_0x9f6cx8, _0x9f6cx7) {
			if ('getResource' in _0x9f6cx7) {
				var _0x9f6cx6 = _0x9f6cx7['getResource']();
				if (_0x9f6cx6) {
					return _0x9f6cx8['getResourceStore']()['indexOf'](_0x9f6cx6)
				};
				if (!_0x9f6cx6 && _0x9f6cx7['resourceIdField'] in _0x9f6cx7['data']) {
					return -1
				};
				throw new Error('Not implemented for scheduler with multi assignment')
			}
			else {
				if ('getTaskStore' in _0x9f6cx7) {
					return _0x9f6cx7['getTaskStore']()['indexOf'](_0x9f6cx7)
				}
			}
		}
		, resetRowIntersectionCache: function (_0x9f6cx7) {
			this['allInRowIntersectionCache'] = false;
			if (!_0x9f6cx7) {
				this['rowIntersectionCache'] = {};
				this['cachedDependencies'] = {}
			}
		}
		, isInRowIntersectionCache: function (_0x9f6cx7) {
			return !!this['cachedDependencies'][_0x9f6cx7['internalId']]
		}
		, filterByRowIntersections: function (_0x9f6cxc, _0x9f6cxa) {
			var _0x9f6cxb = this;
			if (!Ext['isArray'](_0x9f6cxa)) {
				_0x9f6cxa = [_0x9f6cxa]
			};
			if (!_0x9f6cxa['length']) {
				return []
			};
			_0x9f6cxb['addToRowIntersectionCacheIfNotPresent'](_0x9f6cxc, _0x9f6cxa);
			var _0x9f6cx13 = []
				, _0x9f6cxd = _0x9f6cxc['getNodes']()
				, _0x9f6cx8 = _0x9f6cxc['indexOf'](_0x9f6cxd[0])
				, _0x9f6cxe = _0x9f6cxc['indexOf'](_0x9f6cxd[_0x9f6cxd['length'] - 1])
				, _0x9f6cx7;
			_0x9f6cx8 = Math['floor'](_0x9f6cx8 / 10);
			_0x9f6cxe = Math['floor'](_0x9f6cxe / 10);
			for (var _0x9f6cx6 = _0x9f6cx8; _0x9f6cx6 <= _0x9f6cxe; _0x9f6cx6++) {
				_0x9f6cx7 = _0x9f6cxb['rowIntersectionCache'][_0x9f6cx6];
				_0x9f6cx7 && _0x9f6cx13['push']['apply'](_0x9f6cx13, _0x9f6cx7)
			};
			return Ext['Array']['unique'](_0x9f6cx13)
		}
		, getLineDefsForDependencies: function (_0x9f6cx8, _0x9f6cxc) {
			var _0x9f6cx6 = Ext['Array']
				, _0x9f6cxa = this
				, _0x9f6cx7 = {}
				, _0x9f6cxb = _0x9f6cx8['getViewStartDate']()
				, _0x9f6cx13 = _0x9f6cx8['getViewEndDate']()
				, _0x9f6cx9;
			if (!Ext['isArray'](_0x9f6cxc)) {
				_0x9f6cxc = [_0x9f6cxc]
			};
			if (!_0x9f6cxc['length']) {
				return []
			};
			var _0x9f6cxe = _0x9f6cx6['reduce'](_0x9f6cxc || [], function (_0x9f6cxd, _0x9f6cx11) {
				var _0x9f6cx10 = _0x9f6cx11['getSourceEvent']()
					, _0x9f6cx14 = _0x9f6cx11['getTargetEvent']()
					, _0x9f6cxf, _0x9f6cx12;
				if (_0x9f6cxa['isDependencyInTimeSpan'](_0x9f6cx11, _0x9f6cxb, _0x9f6cx13)) {
					_0x9f6cx9 = _0x9f6cx10['internalId'];
					if (!_0x9f6cx7[_0x9f6cx9]) {
						_0x9f6cxf = _0x9f6cxa['getItemBox'](_0x9f6cx8, _0x9f6cx10) || [];
						if (!Ext['isArray'](_0x9f6cxf)) {
							_0x9f6cxf = [_0x9f6cxf]
						};
						_0x9f6cx7[_0x9f6cx9] = _0x9f6cxf
					}
					else {
						_0x9f6cxf = _0x9f6cx7[_0x9f6cx9]
					};
					_0x9f6cx9 = _0x9f6cx14['internalId'];
					if (!_0x9f6cx7[_0x9f6cx9]) {
						_0x9f6cx12 = _0x9f6cxa['getItemBox'](_0x9f6cx8, _0x9f6cx14) || [];
						if (!Ext['isArray'](_0x9f6cx12)) {
							_0x9f6cx12 = [_0x9f6cx12]
						};
						_0x9f6cx7[_0x9f6cx9] = _0x9f6cx12
					}
					else {
						_0x9f6cx12 = _0x9f6cx7[_0x9f6cx9]
					};
					_0x9f6cxd = _0x9f6cx6['reduce'](_0x9f6cxf, function (_0x9f6cx17, _0x9f6cx15, _0x9f6cx16) {
						return _0x9f6cx6['reduce'](_0x9f6cx12, function (_0x9f6cx18, _0x9f6cx1b, _0x9f6cx1e) {
							if (_0x9f6cx15 && _0x9f6cx1b && (_0x9f6cx15['rendered'] || _0x9f6cx1b['rendered'] || _0x9f6cx15['relPos'] != _0x9f6cx1b['relPos'])) {
								_0x9f6cx18['push'](_0x9f6cxa['createLineDef'](_0x9f6cx8, _0x9f6cx11, _0x9f6cx10, _0x9f6cx14, _0x9f6cx15, _0x9f6cx1b, null))
							};
							return _0x9f6cx18
						}, _0x9f6cx17)
					}, _0x9f6cxd)
				};
				return _0x9f6cxd
			}, []);
			return _0x9f6cxe
		}
		, getItemBox: function (_0x9f6cx6, _0x9f6cx7) {
			return _0x9f6cx6['getItemBox'](_0x9f6cx7)
		}
		, createLineDef: function (_0x9f6cxe, _0x9f6cx16, _0x9f6cx15, _0x9f6cx19, _0x9f6cx7, _0x9f6cx12, _0x9f6cxd) {
			var _0x9f6cx1b = _0x9f6cx16['self']['Type']
				, _0x9f6cx1d = this
				, _0x9f6cxb = _0x9f6cx16['getType']()
				, _0x9f6cx14 = _0x9f6cx1d['pathFinder']['getHorizontalMargin']()
				, _0x9f6cx1c = _0x9f6cx1d['pathFinder']['getVerticalMargin']()
				, _0x9f6cxa = _0x9f6cx16['getBidirectional']()
				, _0x9f6cx1e = _0x9f6cxa ? _0x9f6cx1d['pathFinder']['getStartArrowMargin']() : 0
				, _0x9f6cx1f = _0x9f6cxa ? _0x9f6cx1d['pathFinder']['getStartArrowSize']() : 0
				, _0x9f6cx6 = _0x9f6cx1d['pathFinder']['getEndArrowMargin']()
				, _0x9f6cx9 = _0x9f6cx1d['pathFinder']['getEndArrowSize']()
				, _0x9f6cx11 = _0x9f6cx16['getFromSide']()
				, _0x9f6cx1a = _0x9f6cx16['getToSide']();
			if (!_0x9f6cx11) {
				switch (true) {
				case _0x9f6cxb == _0x9f6cx1b['StartToEnd']:
					_0x9f6cx11 = _0x9f6cxe['getConnectorStartSide'](_0x9f6cx15);
					break;
				case _0x9f6cxb == _0x9f6cx1b['StartToStart']:
					_0x9f6cx11 = _0x9f6cxe['getConnectorStartSide'](_0x9f6cx15);
					break;
				case _0x9f6cxb == _0x9f6cx1b['EndToStart']:
					_0x9f6cx11 = _0x9f6cxe['getConnectorEndSide'](_0x9f6cx15);
					break;
				case _0x9f6cxb == _0x9f6cx1b['EndToEnd']:
					_0x9f6cx11 = _0x9f6cxe['getConnectorEndSide'](_0x9f6cx15);
					break;
				default:
					throw new Error('Invalid dependency type: ' + _0x9f6cx16['getType']())
				}
			};
			if (!_0x9f6cx1a) {
				switch (true) {
				case _0x9f6cxb == _0x9f6cx1b['StartToEnd']:
					_0x9f6cx1a = _0x9f6cxe['getConnectorEndSide'](_0x9f6cx19);
					break;
				case _0x9f6cxb == _0x9f6cx1b['StartToStart']:
					_0x9f6cx1a = _0x9f6cxe['getConnectorStartSide'](_0x9f6cx19);
					break;
				case _0x9f6cxb == _0x9f6cx1b['EndToStart']:
					_0x9f6cx1a = _0x9f6cxe['getConnectorStartSide'](_0x9f6cx19);
					break;
				case _0x9f6cxb == _0x9f6cx1b['EndToEnd']:
					_0x9f6cx1a = _0x9f6cxe['getConnectorEndSide'](_0x9f6cx19);
					break;
				default:
					throw new Error('Invalid dependency type: ' + _0x9f6cx16['getType']())
				}
			};
			switch (true) {
			case (_0x9f6cx11 == 'left' || _0x9f6cx11 == 'right') && (_0x9f6cx1a == 'left' || _0x9f6cx1a == 'right'):
				_0x9f6cx1c = 2;
				_0x9f6cx14 = 5;
				break;
			case (_0x9f6cx11 == 'top' || _0x9f6cx11 == 'bottom') && (_0x9f6cx1a == 'top' || _0x9f6cx1a == 'bottom'):
				_0x9f6cx1c = 7;
				_0x9f6cx14 = 2;
				break
			};
			var _0x9f6cx13 = Number['MAX_VALUE'];
			var _0x9f6cx10 = {
				from: (_0x9f6cx7['start'] + _0x9f6cx7['end']) / 2
				, to: (_0x9f6cx12['start'] + _0x9f6cx12['end']) / 2
			};
			var _0x9f6cxc = {
				from: (_0x9f6cx7['top'] + _0x9f6cx7['bottom']) / 2
				, to: (_0x9f6cx12['top'] + _0x9f6cx12['bottom']) / 2
			};
			if ((_0x9f6cx11 === 'top' && _0x9f6cx1a === 'bottom' || _0x9f6cx11 === 'bottom' && _0x9f6cx1a === 'top') && _0x9f6cx10['from'] === _0x9f6cx10['to']) {
				_0x9f6cx13 = Math['abs'](_0x9f6cx7[_0x9f6cx11] - _0x9f6cx12[_0x9f6cx1a])
			}
			else {
				if ((_0x9f6cx11 === 'left' && _0x9f6cx1a === 'right' || _0x9f6cx11 === 'right' && _0x9f6cx1a === 'left') && _0x9f6cxc['from'] === _0x9f6cxc['to']) {
					var _0x9f6cxf = _0x9f6cx11 === 'left' ? 'start' : 'end';
					var _0x9f6cx17 = _0x9f6cx1a === 'left' ? 'start' : 'end';
					if (_0x9f6cxe['rtl']) {
						_0x9f6cxf = _0x9f6cxf === 'start' ? 'end' : 'start';
						_0x9f6cx17 = _0x9f6cx17 === 'start' ? 'end' : 'start'
					};
					var _0x9f6cx18 = _0x9f6cx7[_0x9f6cxf];
					var _0x9f6cx8 = _0x9f6cx12[_0x9f6cx17];
					_0x9f6cx13 = Math['abs'](_0x9f6cx18 - _0x9f6cx8)
				}
			};
			if (_0x9f6cx13 < (_0x9f6cx9 * _0x9f6cx6) * 2) {
				_0x9f6cx1e = _0x9f6cx6 = 0;
				if (_0x9f6cx13 <= _0x9f6cx9 * 2) {
					_0x9f6cx1f = _0x9f6cx9 = 0
				}
			};
			return Ext['applyIf']({
				startBox: _0x9f6cx7
				, startSide: _0x9f6cx11
				, startArrowSize: _0x9f6cx1f
				, startArrowMargin: _0x9f6cx1e
				, endBox: _0x9f6cx12
				, endSide: _0x9f6cx1a
				, endArrowSize: _0x9f6cx9
				, endArrowMargin: _0x9f6cx6
				, top: Math['min'](_0x9f6cx7['top'], _0x9f6cx12['top'])
				, bottom: Math['max'](_0x9f6cx7['bottom'], _0x9f6cx12['bottom'])
				, verticalMargin: _0x9f6cx1c
				, horizontalMargin: _0x9f6cx14
				, startVerticalMargin: _0x9f6cx1c
				, startHorizontalMargin: _0x9f6cx14
				, endVerticalMargin: _0x9f6cx1c
				, endHorizontalMargin: _0x9f6cx14
				, otherBoxes: _0x9f6cxd
				, dependency: _0x9f6cx16
				, dependencyId: _0x9f6cx16['internalId']
				, lineCls: _0x9f6cx1d['getCls']()
				, cls: _0x9f6cx16['getCls']()
				, highlighted: _0x9f6cx16['getHighlighted']()
			}, _0x9f6cx1d['getConfig']())
		}
		, convertSideToDir: function (_0x9f6cx7, _0x9f6cx6) {
			return this['self']['sideToDir'][_0x9f6cx7 + (_0x9f6cx6 && '-rtl' || '')]
		}
		, getSegmentDir: function (_0x9f6cx6) {
			var _0x9f6cx7 = 'vertical';
			if (_0x9f6cx6['y1'] === _0x9f6cx6['y2']) {
				_0x9f6cx7 = 'horizontal'
			};
			return _0x9f6cx7
		}
		, inheritableStatics: {
			sideToDir: {
				left: 'right'
				, right: 'left'
				, top: 'down'
				, bottom: 'up'
				, "left-rtl": 'left'
				, "right-rtl": 'right'
				, "top-rtl": 'down'
				, "bottom-rtl": 'up'
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.view.dependency.renderingstrategy.Abstract', function () {
	function _0x9f6cx6(_0x9f6cx9) {
		return Ext['Array']['reduce'](_0x9f6cx9, function (_0x9f6cxc, _0x9f6cxa) {
			_0x9f6cxc[_0x9f6cxa['getId']()] = _0x9f6cxa;
			return _0x9f6cxc
		}, {})
	}

	function _0x9f6cx7(_0x9f6cx9) {
		return Ext['Object']['getValues'](_0x9f6cx6(_0x9f6cx9))
	}

	function _0x9f6cx4(_0x9f6cxa, _0x9f6cxc) {
		var _0x9f6cxb, _0x9f6cx13, _0x9f6cx9 = [];
		_0x9f6cxb = _0x9f6cx6(_0x9f6cxa);
		_0x9f6cx13 = _0x9f6cx6(_0x9f6cxc);
		Ext['Object']['each'](_0x9f6cxb, function (_0x9f6cxd, _0x9f6cxe) {
			_0x9f6cx13['hasOwnProperty'](_0x9f6cxd) || _0x9f6cx9['push'](_0x9f6cxe)
		});
		return _0x9f6cx9
	}
	var _0x9f6cx5 = function () {
		Ext['Error']['raise']('Method is not allowed to call at this state')
	};
	var _0x9f6cx2 = {
		render: _0x9f6cx5
		, clear: _0x9f6cx5
		, scheduledRender: _0x9f6cx5
		, destroy: _0x9f6cx5
	};
	var _0x9f6cx1, _0x9f6cx8, _0x9f6cx3;
	_0x9f6cx1 = Ext['applyIf']({
		render: function (_0x9f6cxe, _0x9f6cxa, _0x9f6cxf, _0x9f6cxb) {
			var _0x9f6cxd, _0x9f6cxc, _0x9f6cx13, _0x9f6cx9;
			_0x9f6cxd = new Ext.Promise(function (_0x9f6cx11, _0x9f6cx12) {
				_0x9f6cxc = _0x9f6cx11;
				_0x9f6cx13 = _0x9f6cx12
			});
			if (_0x9f6cxa['canDrawDependencies']()) {
				_0x9f6cxe['_depsToRender'] = _0x9f6cxf;
				_0x9f6cxe['_depsRendered'] = [];
				Ext['Array']['reduce'](_0x9f6cxe._depsToRender, function (_0x9f6cx12, _0x9f6cx11) {
					return _0x9f6cx12 && !!_0x9f6cx11['store']
				}, true) || Ext['Error']['raise']('can\'t render unstorred dependency');
				_0x9f6cx9 = _0x9f6cxa['getPrimaryView']()['up']('{isHidden()}');
				if (_0x9f6cx9) {
					_0x9f6cxe['_scheduledRenderDetacher'] = _0x9f6cx9['on']('show', function () {
						delete _0x9f6cxe['_scheduledRenderDetacher'];
						_0x9f6cxe['_fsaState']['scheduledRender'](_0x9f6cxe, _0x9f6cxa)
					}, null, {
						single: true
						, destroyable: true
					})
				}
				else {
					_0x9f6cxe['_scheduledRenderCancelId'] = Ext['asap'](function () {
						delete _0x9f6cxe['_scheduledRenderCancelId'];
						_0x9f6cxe['_fsaState']['scheduledRender'](_0x9f6cxe, _0x9f6cxa)
					})
				};
				_0x9f6cxe['hasListeners']['rendering-start'] && _0x9f6cxe['fireEvent']('rendering-start', _0x9f6cxe);
				_0x9f6cxe['_renderPromise'] = _0x9f6cxd;
				_0x9f6cxe['_renderPromiseResolve'] = _0x9f6cxc;
				_0x9f6cxe['_renderPromiseReject'] = _0x9f6cx13;
				_0x9f6cxe['_fsaState'] = _0x9f6cx8
			}
			else {
				_0x9f6cx13(_0x9f6cxf)
			};
			return _0x9f6cxd
		}
		, clear: function (_0x9f6cxa, _0x9f6cx9, _0x9f6cxb, _0x9f6cxc) {
			var _0x9f6cx13;
			if (_0x9f6cx9['canDrawDependencies']()) {
				if (_0x9f6cx9['isDependencyCanvasPresent']()) {
					if (_0x9f6cxc) {
						_0x9f6cx9['getPainter']()['paint'](_0x9f6cx9['getPrimaryView'](), _0x9f6cx9['getDependencyCanvas'](), [], true)
					}
					else {
						Ext['destroy'](_0x9f6cx9['getPainter']()['getElementsForDependency'](_0x9f6cx9['getDependencyCanvas'](), _0x9f6cxb))
					}
				};
				_0x9f6cx13 = Ext['Promise']['resolve'](_0x9f6cxb)
			}
			else {
				_0x9f6cx13 = Ext['Promise']['reject'](_0x9f6cxb)
			};
			return _0x9f6cx13
		}
		, destroy: function (_0x9f6cx9) {
			_0x9f6cx9['destroyed'] = true;
			_0x9f6cx9['_fsaState'] = _0x9f6cx3
		}
	}, _0x9f6cx2);
	_0x9f6cx8 = Ext['applyIf']({
		render: function (_0x9f6cxa, _0x9f6cx9, _0x9f6cx13, _0x9f6cxc) {
			_0x9f6cxa['_depsToRender'] = _0x9f6cxc ? _0x9f6cx13 : _0x9f6cx7(_0x9f6cxa['_depsToRender']['concat'](_0x9f6cx13));
			Ext['Array']['reduce'](_0x9f6cxa._depsToRender, function (_0x9f6cxb, _0x9f6cxe) {
				return _0x9f6cxb && !!_0x9f6cxe['store']
			}, true) || Ext['Error']['raise']('can\'t render unstored dependency');
			return _0x9f6cxa['_renderPromise']
		}
		, clear: function (_0x9f6cxa, _0x9f6cx9, _0x9f6cxb, _0x9f6cxc) {
			var _0x9f6cx13;
			if (_0x9f6cx9['canDrawDependencies']()) {
				if (_0x9f6cx9['isDependencyCanvasPresent']()) {
					if (_0x9f6cxc) {
						_0x9f6cx9['getPainter']()['paint'](_0x9f6cx9['getPrimaryView'](), _0x9f6cx9['getDependencyCanvas'](), [], true)
					}
					else {
						Ext['destroy'](_0x9f6cx9['getPainter']()['getElementsForDependency'](_0x9f6cx9['getDependencyCanvas'](), _0x9f6cxb))
					}
				};
				if (_0x9f6cxc) {
					_0x9f6cxa['_depsToRender'] = []
				}
				else {
					_0x9f6cxa['_depsToRender'] = _0x9f6cx4(_0x9f6cxa._depsToRender, _0x9f6cxb)
				};
				_0x9f6cx13 = Ext['Promise']['resolve'](_0x9f6cxb)
			}
			else {
				_0x9f6cx13 = Ext['Promise']['reject'](_0x9f6cxb)
			};
			return _0x9f6cx13
		}
		, scheduledRender: function (_0x9f6cx13, _0x9f6cxa) {
			var _0x9f6cx9, _0x9f6cxc;
			if (_0x9f6cxa['canDrawDependencies']()) {
				_0x9f6cx9 = _0x9f6cxa['getPrimaryView']()['up']('{isHidden()}');
				if (_0x9f6cx9) {
					_0x9f6cx13['_scheduledRenderDetacher'] = _0x9f6cx9['on']('show', function () {
						delete _0x9f6cx13['_scheduledRenderDetacher'];
						_0x9f6cx13['_fsaState']['scheduledRender'](_0x9f6cx13, _0x9f6cxa)
					}, null, {
						single: true
						, destroyable: true
					})
				}
				else {
					if (_0x9f6cx13['_depsToRender']['length'] > 0) {
						Ext['Array']['reduce'](_0x9f6cx13._depsToRender, function (_0x9f6cxb, _0x9f6cxe) {
							return _0x9f6cxb && !!_0x9f6cxe['store']
						}, true) || Ext['Error']['raise']('can\'t render unstorred dependency');
						_0x9f6cxc = _0x9f6cx13['delegateRendering'](_0x9f6cxa, _0x9f6cx13._depsToRender, _0x9f6cx13._depsRendered);
						Ext['Assert'] && Ext['Assert']['isArray'](_0x9f6cxc, 'Delegate rendering result must be an array');
						Ext['Assert'] && Ext['Assert']['truthy'](_0x9f6cxc['length'] == 2, 'Delegate rendering result array length must be 2');
						_0x9f6cx13['_depsRendered'] = _0x9f6cx7(_0x9f6cx13['_depsRendered']['concat'](_0x9f6cxc[0]));
						_0x9f6cx13['_depsToRender'] = _0x9f6cxc[1];
						_0x9f6cx13['hasListeners']['rendering-progress'] && _0x9f6cx13['fireEvent']('rendering-progress', _0x9f6cx13, _0x9f6cx13._depsToRender, _0x9f6cx13._depsRendered);
						if (_0x9f6cx13['_depsToRender']['length'] > 0) {
							_0x9f6cx13['_scheduledRenderCancelId'] = Ext['asap'](function () {
								delete _0x9f6cx13['_scheduledRenderCancelId'];
								_0x9f6cx13['_fsaState']['scheduledRender'](_0x9f6cx13, _0x9f6cxa)
							})
						}
						else {
							_0x9f6cx13['hasListeners']['rendering-complete'] && _0x9f6cx13['fireEvent']('rendering-complete', _0x9f6cx13, _0x9f6cx13._depsRendered);
							_0x9f6cx13._renderPromiseResolve(_0x9f6cx13._depsRendered);
							delete _0x9f6cx13['_renderPromise'];
							delete _0x9f6cx13['_renderPromiseResolve'];
							delete _0x9f6cx13['_renderPromiseReject'];
							delete _0x9f6cx13['_depsToRender'];
							delete _0x9f6cx13['_depsRendered'];
							_0x9f6cx13['_fsaState'] = _0x9f6cx1
						}
					}
					else {
						_0x9f6cx13['hasListeners']['rendering-complete'] && _0x9f6cx13['fireEvent']('rendering-complete', _0x9f6cx13, _0x9f6cx13._depsRendered);
						_0x9f6cx13._renderPromiseResolve(_0x9f6cx13._depsRendered);
						delete _0x9f6cx13['_renderPromise'];
						delete _0x9f6cx13['_renderPromiseResolve'];
						delete _0x9f6cx13['_renderPromiseReject'];
						delete _0x9f6cx13['_depsToRender'];
						delete _0x9f6cx13['_depsRendered'];
						_0x9f6cx13['_fsaState'] = _0x9f6cx1
					}
				}
			}
			else {
				_0x9f6cx13['hasListeners']['rendering-canceled'] && _0x9f6cx13['fireEvent']('rendering-canceled', _0x9f6cx13, _0x9f6cx13._depsRendered, _0x9f6cx13._depsToRender);
				_0x9f6cx13._renderPromiseReject(_0x9f6cx13._depsToRender);
				delete _0x9f6cx13['_renderPromise'];
				delete _0x9f6cx13['_renderPromiseResolve'];
				delete _0x9f6cx13['_renderPromiseReject'];
				delete _0x9f6cx13['_depsToRender'];
				delete _0x9f6cx13['_depsRendered'];
				_0x9f6cx13['_fsaState'] = _0x9f6cx1
			}
		}
		, destroy: function (_0x9f6cx9) {
			if (_0x9f6cx9['_scheduledRenderCancelId']) {
				Ext['asapCancel'](_0x9f6cx9._scheduledRenderCancelId);
				delete _0x9f6cx9['_scheduledRenderCancelId']
			};
			if (_0x9f6cx9['_scheduledRenderDetacher']) {
				Ext['destroy'](_0x9f6cx9._scheduledRenderDetacher);
				delete _0x9f6cx9['_scheduledRenderDetacher']
			};
			_0x9f6cx9['hasListeners']['rendering-canceled'] && _0x9f6cx9['fireEvent']('rendering-canceled', _0x9f6cx9, _0x9f6cx9._depsRendered, _0x9f6cx9._depsToRender);
			_0x9f6cx9._renderPromiseReject(_0x9f6cx9._depsToRender);
			delete _0x9f6cx9['_renderPromise'];
			delete _0x9f6cx9['_renderPromiseResolve'];
			delete _0x9f6cx9['_renderPromiseReject'];
			delete _0x9f6cx9['_depsToRender'];
			delete _0x9f6cx9['_depsRendered'];
			_0x9f6cx9['destroyed'] = true;
			_0x9f6cx9['_fsaState'] = _0x9f6cx3
		}
	}, _0x9f6cx2);
	_0x9f6cx3 = _0x9f6cx2;
	return {
		alias: 'sch_dependency_rendering_strategy.abstract'
		, mixins: ['Ext.mixin.Factoryable', 'Ext.mixin.Observable']
		, _fsaState: _0x9f6cx1
		, constructor: function (_0x9f6cx9) {
			var _0x9f6cxc = this;
			_0x9f6cxc['mixins']['observable']['constructor']['call'](_0x9f6cxc, _0x9f6cx9)
		}
		, destroy: function () {
			var _0x9f6cx9 = this;
			return _0x9f6cx9['_fsaState']['destroy'](_0x9f6cx9)
		}
		, renderDependencies: function (_0x9f6cx9, _0x9f6cx13) {
			var _0x9f6cxa = this
				, _0x9f6cxc = !_0x9f6cx13;
			return _0x9f6cxa['_fsaState']['render'](_0x9f6cxa, _0x9f6cx9, _0x9f6cx13 || _0x9f6cx9['getDependencyStore']()['getRange'](), _0x9f6cxc)
		}
		, clearDependencies: function (_0x9f6cx9, _0x9f6cx13) {
			var _0x9f6cxa = this
				, _0x9f6cxc = !_0x9f6cx13;
			return _0x9f6cxa['_fsaState']['clear'](_0x9f6cxa, _0x9f6cx9, _0x9f6cx13 || _0x9f6cx9['getDependencyStore']()['getRange'](), _0x9f6cxc)
		}
		, updateDependencies: function (_0x9f6cx9, _0x9f6cx13) {
			var _0x9f6cxa = this
				, _0x9f6cxc = !_0x9f6cx13;
			_0x9f6cx13 = _0x9f6cx13 || _0x9f6cx9['getDependencyStore']()['getRange']();
			return _0x9f6cxa['_fsaState']['clear'](_0x9f6cxa, _0x9f6cx9, _0x9f6cx13, _0x9f6cxc)['then'](function () {
				_0x9f6cx13 = _0x9f6cxc ? _0x9f6cx9['getDependencyStore']()['getRange']() : Ext['Array']['reduce'](_0x9f6cx13, function (_0x9f6cxe, _0x9f6cxb) {
					if (_0x9f6cxb['store'] && Ext['Array']['indexOf'](_0x9f6cxb['store']['removed'], _0x9f6cxb) === -1) {
						_0x9f6cxe['push'](_0x9f6cxb)
					};
					return _0x9f6cxe
				}, []);
				return !_0x9f6cxa['destroyed'] ? _0x9f6cxa['_fsaState']['render'](_0x9f6cxa, _0x9f6cx9, _0x9f6cx13, _0x9f6cxc) : _0x9f6cx13
			})
		}
		, delegateRendering: function (_0x9f6cxc, _0x9f6cx9, _0x9f6cxa) {
			Ext['Error']['raise']('Abstract method call')
		}
		, inheritableStatics: {
			depsToMap: _0x9f6cx6
			, uniqueDeps: _0x9f6cx7
			, diffDeps: _0x9f6cx4
		}
	}
});
Ext.define('Ext.ux.Scheduler.view.dependency.renderingstrategy.Combined', {
	extend: 'Ext.ux.Scheduler.view.dependency.renderingstrategy.Abstract'
	, alias: 'sch_dependency_rendering_strategy.combined'
	, config: {
		depsPerStep: 50
		, mode: 'bulk'
	}
	, delegateRendering: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx3 = this;
		return _0x9f6cx3['getMode']() == 'bulk' ? _0x9f6cx3['delegateRenderingBulk'](_0x9f6cx2, _0x9f6cx1, _0x9f6cx5) : _0x9f6cx3['delegateRenderingAsync'](_0x9f6cx2, _0x9f6cx1, _0x9f6cx5)
	}
	, delegateRenderingBulk: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5) {
		_0x9f6cx2['getPainter']()['paint'](_0x9f6cx2['getPrimaryView'](), _0x9f6cx2['getDependencyCanvas'](), _0x9f6cx1, false);
		return [_0x9f6cx1, []]
	}
	, delegateRenderingAsync: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx4 = this
			, _0x9f6cx7 = _0x9f6cx4['getDepsPerStep']()
			, _0x9f6cx1 = _0x9f6cx2['slice'](0, _0x9f6cx7)
			, _0x9f6cx6 = _0x9f6cx2['slice'](_0x9f6cx7);
		_0x9f6cx5['getPainter']()['paint'](_0x9f6cx5['getPrimaryView'](), _0x9f6cx5['getDependencyCanvas'](), _0x9f6cx1, false);
		return [_0x9f6cx1, _0x9f6cx6]
	}
});
Ext.define('Ext.ux.Scheduler.view.dependency.View', {
	alias: 'schdependencyview.base'
	, mixins: ['Ext.mixin.Factoryable', 'Ext.mixin.Observable']
	, requires: ['Ext.ux.Scheduler.view.dependency.DragZone', 'Ext.ux.Scheduler.view.dependency.Painter', 'Ext.ux.Scheduler.view.dependency.renderingstrategy.Combined']
	, uses: ['Ext.data.StoreManager', 'Ext.Array', 'Ext.dom.CompositeElementLite']
	, config: {
		primaryView: null
		, dependencyStore: null
		, drawDependencies: true
		, bulkRenderingDependencyLimit: 100
		, asyncRenderingDepsPerStep: 50
		, painterConfig: {
			canvasCls: 'sch-dependencyview-ct'
		}
		, canvasLayer: 0
		, enableDependencyDragDrop: true
		, terminalSides: ['left', 'right', 'top', 'bottom']
		, dragTipTpl: null
		, dragZoneConfig: null
		, selectedCls: null
		, overCls: null
	}
	, painter: null
	, renderingStrategy: null
	, primaryViewDetacher: null
	, primaryViewLockableDetacher: null
	, primaryViewElDetacher: null
	, dependencyStoreDetacher: null
	, dragZone: null
	, scrolling: false
	, constructor: function (_0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1;
		_0x9f6cx5['callParent']([_0x9f6cx2]);
		_0x9f6cx5['mixins']['observable']['constructor']['call'](_0x9f6cx5, _0x9f6cx2);
		_0x9f6cx5['initConfig'](_0x9f6cx2);
		Ext['Assert'] && Ext['Assert']['isObject'](_0x9f6cx5['getPrimaryView'](), 'Dependency view requires a primary view to be configured in');
		Ext['Assert'] && Ext['Assert']['isFunctionProp'](_0x9f6cx5['getPrimaryView'](), 'isItemCanvasAvailable', 'Dependency view requires `Ext.ux.Scheduler.mixin.GridViewCanvas` mixin to be mixed into scheduling view, or the corresponding interface to be implemented');
		Ext['Assert'] && Ext['Assert']['isFunctionProp'](_0x9f6cx5['getPrimaryView'](), 'getItemCanvasEl', 'Dependency view requires `Ext.ux.Scheduler.mixin.GridViewCanvas` mixin to be mixed into scheduling view, or the corresponding interface to be implemented');
		_0x9f6cx5['painter'] = _0x9f6cx5['createPainter'](Ext['apply']({
			rtl: _0x9f6cx5['getPrimaryView']()['rtl']
			, dependencyStore: _0x9f6cx5['getDependencyStore']()
		}, _0x9f6cx5['getPainterConfig']()));
		if (_0x9f6cx5['painter']['getUseDependencyRowIntersectionCache']()) {
			if (_0x9f6cx5['getPrimaryView']()['resourceStore']) {
				_0x9f6cx5['getPrimaryView']()['mon'](_0x9f6cx5['getPrimaryView']()['resourceStore'], {
					add: _0x9f6cx5['resetPainterCache']
					, remove: _0x9f6cx5['resetPainterCache']
					, clear: _0x9f6cx5['resetPainterCache']
					, refresh: _0x9f6cx5['resetPainterCache']
					, scope: _0x9f6cx5
				})
			};
			if (_0x9f6cx5['getDependencyStore']()) {
				_0x9f6cx5['mon'](_0x9f6cx5['getDependencyStore'](), {
					add: _0x9f6cx5['updatePainterCache']
					, remove: _0x9f6cx5['resetPainterCache']
					, clear: _0x9f6cx5['resetPainterCache']
					, refresh: _0x9f6cx5['resetPainterCache']
					, scope: _0x9f6cx5
				})
			}
		};
		if (!_0x9f6cx5['getSelectedCls']()) {
			_0x9f6cx5['setSelectedCls'](_0x9f6cx5['painter']['getSelectedCls']())
		};
		if (_0x9f6cx5['canDrawDependencies']()) {
			_0x9f6cx5['startDrawDependencies']()
		};
		if (_0x9f6cx5['getEnableDependencyDragDrop']()) {
			_0x9f6cx1 = _0x9f6cx5['getPrimaryView']();
			_0x9f6cx5['dragZone'] = _0x9f6cx5['createDragZone'](Ext['apply']({
				view: _0x9f6cx1
				, ddGroup: _0x9f6cx1['getId']() + '-dep-dd'
				, rtl: _0x9f6cx1['rtl']
				, terminalSelector: '.sch-terminal'
				, dependencyStore: _0x9f6cx5['getDependencyStore']()
				, tipTpl: _0x9f6cx5['getDragTipTpl']()
			}, _0x9f6cx5['getDragZoneConfig']() || {}));
			_0x9f6cx5['dragZone']['on']({
				dragstart: _0x9f6cx5['onDragStart']
				, drop: _0x9f6cx5['onDependencyDrop']
				, afterdrop: _0x9f6cx5['onDependencyAfterDrop']
				, scope: _0x9f6cx5
			});
			_0x9f6cx5['relayEvents'](_0x9f6cx5['dragZone'], ['beforedrag', 'dragstart', 'drop', 'afterdrop'])
		}
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['stopDrawDependencies']();
		_0x9f6cx1['dragZone'] && _0x9f6cx1['dragZone']['destroy']()
	}
	, destroyDetachers: function () {
		var _0x9f6cx1 = this;
		Ext['destroyMembers'](this, ['primaryViewDetacher', 'primaryViewLockableDetacher', 'primaryViewElDetacher', 'dependencyStoreDetacher'])
	}
	, destroyDependencyCanvas: function () {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['isDependencyCanvasPresent']()) {
			Ext['destroy'](_0x9f6cx1['getDependencyCanvas']())
		}
	}
	, destroyRenderingStrategy: function () {
		var _0x9f6cx1 = this;
		Ext['destroy'](_0x9f6cx1['renderingStrategy']);
		_0x9f6cx1['renderingStrategy'] = null
	}
	, resetPainterCache: function () {
		this['painter']['resetRowIntersectionCache']()
	}
	, updatePainterCache: function () {
		this['painter']['resetRowIntersectionCache'](true)
	}
	, canDrawDependencies: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx5 = this;
		return !!(_0x9f6cx5['painter'] && _0x9f6cx5['getPrimaryView']() && (_0x9f6cx2 || _0x9f6cx5['getDrawDependencies']()) && (_0x9f6cx1 || _0x9f6cx5['isDependencyCanvasAvailable']()) && (_0x9f6cx3 || _0x9f6cx5['getDependencyStore']()))
	}
	, startDrawDependencies: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx5 = _0x9f6cx2['getPrimaryView']()
			, _0x9f6cx1 = _0x9f6cx2['getDependencyStore']()
			, _0x9f6cx3;
		_0x9f6cx2['renderingStrategy'] = _0x9f6cx2['createRenderingStrategy']();
		_0x9f6cx2['primaryViewDetacher'] = _0x9f6cx5['on'](Ext['applyIf']({
			destroyable: true
		}, _0x9f6cx2['getPrimaryViewListeners']()));
		_0x9f6cx2['primaryViewElDetacher'] = _0x9f6cx5['getEl']()['on'](Ext['applyIf']({
			destroyable: true
		}, _0x9f6cx2['getPrimaryViewElListeners']()));
		if (_0x9f6cx5['grid']) {
			_0x9f6cx3 = _0x9f6cx5['grid']['ownerLockable'] && _0x9f6cx5['grid']['ownerLockable']['getView']();
			if (_0x9f6cx5 != _0x9f6cx3) {
				_0x9f6cx2['primaryViewLockableDetacher'] = _0x9f6cx3['on'](Ext['applyIf']({
					destroyable: true
				}, _0x9f6cx2['getPrimaryViewLockableListeners']()))
			}
		};
		_0x9f6cx2['dependencyStoreDetacher'] = _0x9f6cx1['on'](Ext['applyIf']({
			destroyable: true
		}, _0x9f6cx2['getDependencyStoreListeners']()));
		_0x9f6cx2['renderAllDependencies']()['then'](null, Ext['emptyFn'])
	}
	, stopDrawDependencies: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['destroyRenderingStrategy']();
		_0x9f6cx1['destroyDetachers']();
		_0x9f6cx1['destroyDependencyCanvas']()
	}
	, createRenderingStrategy: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1;
		return Ext.ux.Scheduler['view']['dependency']['renderingstrategy']['Combined']['create']({
			depsPerStep: _0x9f6cx2['getAsyncRenderingDepsPerStep']()
		})
	}
	, maybeSwitchRenderingStrategy: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getDependencyStore']();
		if (_0x9f6cx2['getDependencyStore']()['getCount']() <= _0x9f6cx2['getBulkRenderingDependencyLimit']()) {
			_0x9f6cx2['renderingStrategy']['setMode']('bulk')
		}
		else {
			_0x9f6cx2['renderingStrategy']['setMode']('async')
		}
	}
	, updatePrimaryView: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx1) {
			_0x9f6cx2['stopDrawDependencies']()
		};
		if (_0x9f6cx5) {
			if (!_0x9f6cx2['getDependencyStore']() && _0x9f6cx5['getEventStore']()) {
				_0x9f6cx2['setDependencyStore'](_0x9f6cx5['getEventStore']()['getDependencyStore']())
			};
			if (_0x9f6cx2['canDrawDependencies']()) {
				_0x9f6cx2['startDrawDependencies']()
			}
		}
	}
	, applyDependencyStore: function (_0x9f6cx1) {
		return _0x9f6cx1 && Ext['StoreMgr']['lookup'](_0x9f6cx1)
	}
	, updateDependencyStore: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx5) {
			_0x9f6cx2['stopDrawDependencies']()
		};
		if (_0x9f6cx1 && _0x9f6cx2['canDrawDependencies']()) {
			_0x9f6cx2['startDrawDependencies']()
		}
	}
	, updateDrawDependencies: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx5 && _0x9f6cx2['canDrawDependencies'](true)) {
			_0x9f6cx2['startDrawDependencies']()
		}
		else {
			if (!_0x9f6cx5) {
				_0x9f6cx2['stopDrawDependencies']()
			}
		}
	}
	, applyPainterConfig: function (_0x9f6cx1) {
		return Ext['isObject'](_0x9f6cx1) ? Ext['apply']({}, _0x9f6cx1) : _0x9f6cx1
	}
	, updatePainterConfig: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx2['painter']) {
			if (_0x9f6cx1) {
				_0x9f6cx1 = Ext['apply']({}, {
					rtl: _0x9f6cx2['getPrimaryView']()['rtl']
				}, _0x9f6cx1)
			};
			if (_0x9f6cx1 && 'type' in _0x9f6cx1 && _0x9f6cx1['type'] !== _0x9f6cx2['painter']['type']) {
				Ext['destroy'](_0x9f6cx2['painter']);
				_0x9f6cx2['painter'] = _0x9f6cx2['createPainter'](_0x9f6cx1)
			}
			else {
				_0x9f6cx2['painter']['setConfig'](_0x9f6cx1)
			};
			_0x9f6cx2['destroyDependencyCanvas']();
			if (_0x9f6cx2['canDrawDependencies']()) {
				_0x9f6cx2['renderAllDependencies']()['then'](null, Ext['emptyFn'])
			}
		}
	}
	, updateCanvasLayer: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['destroyDependencyCanvas']();
		if (_0x9f6cx2['canDrawDependencies']()) {
			_0x9f6cx2['renderAllDependencies']()['then'](null, Ext['emptyFn'])
		}
	}
	, updateSelectedCls: function (_0x9f6cx1) {
		this['painter']['setSelectedCls'](_0x9f6cx1)
	}
	, getPrimaryViewListeners: function () {
		var _0x9f6cx1 = this;
		return {
			itemadd: _0x9f6cx1['onPrimaryViewItemAdd']
			, itemremove: _0x9f6cx1['onPrimaryViewItemRemove']
			, itemupdate: _0x9f6cx1['onPrimaryViewItemUpdate']
			, refresh: _0x9f6cx1['onPrimaryViewRefresh']
			, bufferedrefresh: _0x9f6cx1['onPrimaryViewRefresh']
			, expandbody: _0x9f6cx1['onPrimaryViewExpandBody']
			, collapsebody: _0x9f6cx1['onPrimaryViewCollapseBody']
			, eventrepaint: _0x9f6cx1['onPrimaryViewEventRepaint']
			, scope: _0x9f6cx1
		}
	}
	, getPrimaryViewLockableListeners: function () {
		var _0x9f6cx1 = this;
		return {
			expandbody: _0x9f6cx1['onPrimaryViewExpandBody']
			, collapsebody: _0x9f6cx1['onPrimaryViewCollapseBody']
			, scope: _0x9f6cx1
		}
	}
	, getPrimaryViewElListeners: function () {
		var _0x9f6cx1 = this;
		return {
			dblclick: _0x9f6cx1['onPrimaryViewDependencyElPointerEvent']
			, click: _0x9f6cx1['onPrimaryViewDependencyElPointerEvent']
			, contextmenu: _0x9f6cx1['onPrimaryViewDependencyElPointerEvent']
			, mouseover: _0x9f6cx1['onPrimaryViewDependencyElPointerEvent']
			, mouseout: _0x9f6cx1['onPrimaryViewDependencyElPointerEvent']
			, delegate: '.sch-dependency'
			, scope: _0x9f6cx1
		}
	}
	, getDependencyStoreListeners: function () {
		var _0x9f6cx1 = this;
		return {
			add: _0x9f6cx1['onDependencyStoreAdd']
			, remove: _0x9f6cx1['onDependencyStoreRemove']
			, update: _0x9f6cx1['onDependencyStoreUpdate']
			, refresh: _0x9f6cx1['onDependencyStoreRefresh']
			, clear: _0x9f6cx1['onDependencyStoreClear']
			, scope: _0x9f6cx1
		}
	}
	, createPainter: function (_0x9f6cx1) {
		return Ext.ux.Scheduler['view']['dependency']['Painter']['create'](_0x9f6cx1)
	}
	, getPainter: function () {
		return this['painter']
	}
	, clonePainter: function () {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['painter'] && _0x9f6cx1['painter']['clone']() || null
	}
	, createDragZone: function (_0x9f6cx1) {
		return Ext.ux.Scheduler['view']['dependency']['DragZone']['create'](_0x9f6cx1)
	}
	, isDependencyCanvasAvailable: function () {
		var _0x9f6cx1 = this['getPrimaryView']();
		return _0x9f6cx1 && _0x9f6cx1['isItemCanvasAvailable']()
	}
	, isDependencyCanvasPresent: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['getPrimaryView']();
		return _0x9f6cx2 && _0x9f6cx2['isItemCanvasPresent'](_0x9f6cx1['getCanvasLayer']())
	}
	, getDependencyCanvas: function () {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['getPrimaryView']()['getItemCanvasEl'](_0x9f6cx1['getCanvasLayer'](), _0x9f6cx1['painter']['getCanvasSpecification']())
	}
	, renderAllDependencies: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2;
		if (_0x9f6cx1['canDrawDependencies']() && (_0x9f6cx1['refreshing'] || _0x9f6cx1['fireEvent']('beforerefresh', _0x9f6cx1) !== false)) {
			_0x9f6cx1['refreshing'] || _0x9f6cx1['renderingStrategy']['on']('rendering-complete', function (_0x9f6cx5, _0x9f6cx3) {
				_0x9f6cx1['refreshing'] = false;
				_0x9f6cx1['fireEvent']('refresh', _0x9f6cx1)
			}, null, {
				single: true
			});
			_0x9f6cx1['refreshing'] = true;
			_0x9f6cx2 = _0x9f6cx1['renderingStrategy']['updateDependencies'](_0x9f6cx1)
		}
		else {
			_0x9f6cx2 = Ext['Promise']['reject'](_0x9f6cx1['getDependencyStore']()['getRange']())
		};
		return _0x9f6cx2
	}
	, renderDependencies: function (_0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = this
			, _0x9f6cx5;
		if (!Ext['isArray'](_0x9f6cx3)) {
			_0x9f6cx3 = [_0x9f6cx3]
		};
		if (_0x9f6cx2['canDrawDependencies']()) {
			if (_0x9f6cx1) {
				_0x9f6cx5 = _0x9f6cx2['renderingStrategy']['clearDependencies'](_0x9f6cx2)['then'](function () {
					return !_0x9f6cx2['renderingStrategy']['destroyed'] ? _0x9f6cx2['renderingStrategy']['renderDependencies'](_0x9f6cx2, _0x9f6cx3) : _0x9f6cx3
				})
			}
			else {
				_0x9f6cx5 = _0x9f6cx2['renderingStrategy']['renderDependencies'](_0x9f6cx2, _0x9f6cx3)
			}
		}
		else {
			_0x9f6cx5 = Ext['Promise']['reject'](_0x9f6cx3)
		};
		return _0x9f6cx5
	}
	, updateDependencies: function (_0x9f6cx5) {
		var _0x9f6cx1 = this
			, _0x9f6cx2;
		if (!Ext['isArray'](_0x9f6cx5)) {
			_0x9f6cx5 = [_0x9f6cx5]
		};
		if (_0x9f6cx1['canDrawDependencies']()) {
			_0x9f6cx2 = _0x9f6cx1['renderingStrategy']['updateDependencies'](_0x9f6cx1, _0x9f6cx5)
		}
		else {
			_0x9f6cx2 = Ext['Promise']['reject'](_0x9f6cx5)
		};
		return _0x9f6cx2
	}
	, clearDependencies: function (_0x9f6cx5) {
		var _0x9f6cx1 = this
			, _0x9f6cx2;
		if (!Ext['isArray'](_0x9f6cx5)) {
			_0x9f6cx5 = [_0x9f6cx5]
		};
		if (_0x9f6cx1['canDrawDependencies']()) {
			_0x9f6cx2 = _0x9f6cx1['renderingStrategy']['clearDependencies'](_0x9f6cx1, _0x9f6cx5)
		}
		else {
			_0x9f6cx2 = Ext['Promise']['reject'](_0x9f6cx5)
		};
		return _0x9f6cx2
	}
	, clearAllDependencies: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2;
		if (_0x9f6cx1['canDrawDependencies']()) {
			_0x9f6cx2 = _0x9f6cx1['renderingStrategy']['clearDependencies'](_0x9f6cx1)
		}
		else {
			_0x9f6cx2 = Ext['Promise']['reject']()
		};
		return _0x9f6cx2
	}
	, getElementsForDependency: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = false;
		if (_0x9f6cx2['canDrawDependencies']() && _0x9f6cx2['isDependencyCanvasPresent']()) {
			_0x9f6cx1 = _0x9f6cx2['painter']['getElementsForDependency'](_0x9f6cx2['getDependencyCanvas'](), _0x9f6cx5)
		};
		return _0x9f6cx1
	}
	, getDependencyForElement: function (_0x9f6cx5) {
		var _0x9f6cx4 = this
			, _0x9f6cx2 = _0x9f6cx4['getDependencyStore']()
			, _0x9f6cx1 = null
			, _0x9f6cx3;
		if (_0x9f6cx2) {
			_0x9f6cx3 = _0x9f6cx4['painter']['getElementDependencyInternalId'](_0x9f6cx5);
			_0x9f6cx1 = _0x9f6cx2['getByInternalId'](_0x9f6cx3)
		};
		return _0x9f6cx1
	}
	, getDependencyElements: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = false;
		if (_0x9f6cx2['canDrawDependencies']() && _0x9f6cx2['isDependencyCanvasPresent']()) {
			_0x9f6cx1 = _0x9f6cx2['painter']['getDependencyElements'](_0x9f6cx2['getDependencyCanvas']())
		};
		return _0x9f6cx1
	}
	, highlightDependency: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		if (!(_0x9f6cx2 instanceof Ext['data']['Model'])) {
			_0x9f6cx2 = _0x9f6cx5['getDependencyStore']()['getById'](_0x9f6cx2)
		};
		_0x9f6cx2 && _0x9f6cx2['highlight'](_0x9f6cx1 || _0x9f6cx5['getSelectedCls']())
	}
	, unhighlightDependency: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		if (!(_0x9f6cx2 instanceof Ext['data']['Model'])) {
			_0x9f6cx2 = _0x9f6cx5['getDependencyStore']()['getById'](_0x9f6cx2)
		};
		_0x9f6cx2 && _0x9f6cx2['unhighlight'](_0x9f6cx1 || _0x9f6cx5['getSelectedCls']())
	}
	, getHighlightedDependencies: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getDependencyStore']();
		return _0x9f6cx2 && _0x9f6cx2['getHighlightedDependencies']() || []
	}
	, getSelectedDependencyElements: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = false;
		if (_0x9f6cx2['canDrawDependencies']() && _0x9f6cx2['isDependencyCanvasPresent']()) {
			_0x9f6cx1 = _0x9f6cx2['painter']['getSelectedDependencyElements'](_0x9f6cx2['getDependencyCanvas']())
		};
		return _0x9f6cx1
	}
	, clearSelectedDependencies: function () {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['canDrawDependencies']() && _0x9f6cx1['isDependencyCanvasPresent']()) {
			_0x9f6cx1['painter']['clearSelectedDependencies'](_0x9f6cx1['getDependencyCanvas']());
			_0x9f6cx1['getDependencyStore']()['each'](function (_0x9f6cx2) {
				_0x9f6cx1['unhighlightDependency'](_0x9f6cx2)
			})
		}
	}
	, onPrimaryViewItemAdd: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		this['renderAllDependencies']()['then'](null, Ext['emptyFn'])
	}
	, onPrimaryViewItemUpdate: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		this['renderAllDependencies']()['then'](null, Ext['emptyFn'])
	}
	, onPrimaryViewItemRemove: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		this['renderAllDependencies']()['then'](null, Ext['emptyFn'])
	}
	, onPrimaryViewRefresh: function (_0x9f6cx1) {
		this['renderAllDependencies']()['then'](null, Ext['emptyFn'])
	}
	, onPrimaryViewExpandBody: function () {
		this['renderAllDependencies']()['then'](null, Ext['emptyFn'])
	}
	, onPrimaryViewCollapseBody: function () {
		this['renderAllDependencies']()['then'](null, Ext['emptyFn'])
	}
	, onPrimaryViewEventRepaint: function () {
		this['renderAllDependencies']()['then'](null, Ext['emptyFn'])
	}
	, onPrimaryViewDependencyElPointerEvent: function (_0x9f6cx6, _0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx7 = this
			, _0x9f6cx1, _0x9f6cx5;
		_0x9f6cx1 = _0x9f6cx7['painter']['getElementDependencyInternalId'](_0x9f6cx2);
		_0x9f6cx5 = _0x9f6cx7['getDependencyStore']()['getByInternalId'](_0x9f6cx1);
		if (_0x9f6cx5) {
			var _0x9f6cx8 = this['getOverCls']();
			_0x9f6cx7['fireEvent']('dependency' + _0x9f6cx6['type'], _0x9f6cx7, _0x9f6cx5, _0x9f6cx6, _0x9f6cx2);
			if (_0x9f6cx8) {
				if (_0x9f6cx6['type'] === 'mouseover' || _0x9f6cx6['type'] === 'mouseout') {
					var _0x9f6cx4 = _0x9f6cx7['painter']['getElementsForDependency'](_0x9f6cx7['getDependencyCanvas'](), _0x9f6cx5);
					if (_0x9f6cx6['type'] === 'mouseover') {
						_0x9f6cx4['addCls'](_0x9f6cx8)
					}
					else {
						if (_0x9f6cx6['type'] === 'mouseout') {
							_0x9f6cx4['removeCls'](_0x9f6cx8)
						}
					}
				}
			}
		}
	}
	, onDependencyStoreAdd: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['maybeSwitchRenderingStrategy']();
		_0x9f6cx2['renderDependencies'](_0x9f6cx5)['then'](null, Ext['emptyFn'])
	}
	, onDependencyStoreRemove: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['maybeSwitchRenderingStrategy']();
		_0x9f6cx2['clearDependencies'](_0x9f6cx5)['then'](null, Ext['emptyFn'])
	}
	, onDependencyStoreUpdate: function (_0x9f6cx1, _0x9f6cx2) {
		this['updateDependencies'](_0x9f6cx2)['then'](null, Ext['emptyFn'])
	}
	, onDependencyStoreRefresh: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['maybeSwitchRenderingStrategy']();
		_0x9f6cx2['renderAllDependencies']()['then'](null, Ext['emptyFn'])
	}
	, onDependencyStoreClear: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['maybeSwitchRenderingStrategy']();
		_0x9f6cx2['renderAllDependencies']()['then'](null, Ext['emptyFn'])
	}
	, onDragStart: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['getPrimaryView']();
		_0x9f6cx2['onDragDropStart'] && _0x9f6cx2['onDragDropStart']();
		_0x9f6cx1['getPrimaryView']()['getEl']()['addCls']('sch-terminals-visible')
	}
	, onDependencyDrop: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx2) {
		_0x9f6cx2 && this['getDependencyStore']()['add'](_0x9f6cx1)
	}
	, onDependencyAfterDrop: function () {
		var _0x9f6cx1 = this['getPrimaryView']();
		if (!_0x9f6cx1['destroyed']) {
			_0x9f6cx1['onDragDropEnd'] && _0x9f6cx1['onDragDropEnd']();
			_0x9f6cx1['getEl']()['removeCls']('sch-terminals-visible');
			_0x9f6cx1['getEl']()['select']('.sch-terminal-hidden')['removeCls']('sch-terminal-hidden')
		}
	}
});
Ext.define('Ext.ux.Scheduler.view.dependency.Mixin', {
	extend: 'Ext.Mixin'
	, requires: ['Ext.ux.Scheduler.view.dependency.View']
	, mixinConfig: {
		after: {
			initComponent: 'initComponent'
			, destroy: 'destroy'
		}
	}
	, dependencyViewConfig: null
	, dependencyView: null
	, dependencyViewRelayDetacher: null
	, dependencyDragRelayDetacher: null
	, initComponent: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['on']('viewready', function () {
			if (_0x9f6cx1['getEventStore']()) {
				_0x9f6cx1['setupDependencyView'](_0x9f6cx1['getDependencyViewConfig'](), _0x9f6cx1['getSchedulingView']())
			}
		})
	}
	, getDependencyViewConfig: function () {
		return this['dependencyViewConfig']
	}
	, setDependencyViewConfig: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx2['dependencyViewConfig'] !== _0x9f6cx1) {
			_0x9f6cx2['dependencyViewConfig'] = _0x9f6cx1;
			if (_0x9f6cx2['dependencyView']) {
				if (_0x9f6cx1 && 'type' in _0x9f6cx1 && _0x9f6cx1['type'] !== _0x9f6cx2['dependencyView']['type']) {
					_0x9f6cx2['setupDependencyView'](_0x9f6cx1, _0x9f6cx2['getSchedulingView']())
				}
				else {
					_0x9f6cx2['dependencyView']['setConfig'](_0x9f6cx1)
				}
			}
		}
	}
	, hasDependencyView: function () {
		return !!this['dependencyView']
	}
	, getDependencyView: function () {
		return this['dependencyView']
	}
	, createDependencyView: function (_0x9f6cx1, _0x9f6cx2) {
		return Ext.ux.Scheduler['view']['dependency']['View']['create'](Ext['applyIf']({
			primaryView: _0x9f6cx2
		}, _0x9f6cx1))
	}
	, destroy: function () {
		Ext['destroyMembers'](this, 'dependencyViewRelayDetacher', 'dependencyDragRelayDetacher', 'dependencyView')
	}
	, setupDependencyView: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		Ext['destroy'](_0x9f6cx2['dependencyView']);
		_0x9f6cx2['dependencyView'] = _0x9f6cx2['createDependencyView'](_0x9f6cx1, _0x9f6cx5);
		_0x9f6cx2['setupDependencyViewRelay']();
		_0x9f6cx2['fireEvent']('dependencyviewready', _0x9f6cx2, _0x9f6cx2['dependencyView']);
		if (_0x9f6cx2['dependencyView']['canDrawDependencies']()) {
			_0x9f6cx2['dependencyView']['renderAllDependencies']()['then'](null, Ext['emptyFn'])
		}
	}
	, setupDependencyViewRelay: function () {
		var _0x9f6cx1 = this;
		Ext['destroy'](_0x9f6cx1['dependencyViewRelayDetacher'], _0x9f6cx1['dependencyDragRelayDetacher']);
		_0x9f6cx1['dependencyViewRelayDetacher'] = _0x9f6cx1['relayEvents'](_0x9f6cx1['getDependencyView'](), ['dependencyclick', 'dependencydblclick', 'dependencycontextmenu', 'dependencymouseover', 'dependencymouseout']);
		_0x9f6cx1['dependencyDragRelayDetacher'] = _0x9f6cx1['relayEvents'](_0x9f6cx1['getDependencyView'](), ['beforedrag', 'dragstart', 'drop', 'afterdrop'], 'dependency')
	}
});
Ext.define('Ext.ux.Gantt.view.dependency.Painter', {
	extend: 'Ext.ux.Scheduler.view.dependency.Painter'
	, alias: 'schdependencypainter.ganttdefault'
	, getIndexForCache: function (_0x9f6cx2, _0x9f6cx1) {
		return _0x9f6cx2['getTaskStore']()['indexOf'](_0x9f6cx1)
	}
	, createLineDef: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx1, _0x9f6cx7, _0x9f6cxa, _0x9f6cx6, _0x9f6cx2) {
		var _0x9f6cxe = _0x9f6cx5['self']['Type']
			, _0x9f6cx8 = this
			, _0x9f6cx3 = _0x9f6cx8['pathFinder']['getHorizontalMargin']()
			, _0x9f6cxb = _0x9f6cx4['getRowHeight']()
			, _0x9f6cx13 = _0x9f6cx8['callParent']([_0x9f6cx4, _0x9f6cx5, _0x9f6cx1, _0x9f6cx7, _0x9f6cxa, _0x9f6cx6, _0x9f6cx2]);
		var _0x9f6cx9 = _0x9f6cx13['endBox'];
		var _0x9f6cxc = _0x9f6cx13['endSide'];
		_0x9f6cx13['startArrowSize'] = _0x9f6cx13['endArrowSize'];
		_0x9f6cx13['startArrowMargin'] = _0x9f6cx13['endArrowMargin'];
		_0x9f6cx13['endArrowSize'] = 0;
		_0x9f6cx13['endArrowMargin'] = 0;
		_0x9f6cx13['endBox'] = _0x9f6cx13['startBox'];
		_0x9f6cx13['endSide'] = _0x9f6cx13['startSide'];
		_0x9f6cx13['startBox'] = _0x9f6cx9;
		_0x9f6cx13['startSide'] = _0x9f6cxc;
		_0x9f6cx13['boxesReversed'] = true;
		_0x9f6cx13['startVerticalMargin'] = Math['floor']((_0x9f6cxb - (_0x9f6cx13['startBox']['bottom'] - _0x9f6cx13['startBox']['top'])) / 2) + 1;
		_0x9f6cx13['endVerticalMargin'] = Math['floor']((_0x9f6cxb - (_0x9f6cx13['endBox']['bottom'] - _0x9f6cx13['endBox']['top'])) / 2) - 1;
		if (_0x9f6cx5['getType']() == _0x9f6cxe['EndToStart'] && _0x9f6cx13['endBox']['bottom'] < _0x9f6cx13['startBox']['top'] && (_0x9f6cx13['endBox']['end'] - _0x9f6cx13['startBox']['start'] < _0x9f6cx3)) {
			_0x9f6cx13['startShift'] = _0x9f6cx7['isMilestone']() ? 0 : (_0x9f6cx3 - (_0x9f6cx6['end'] - _0x9f6cx6['start']) / 2);
			_0x9f6cx13['startVerticalMargin'] = _0x9f6cx13['startHorizontalMargin'] = _0x9f6cx13['startArrowMargin'] = _0x9f6cx13['endArrowMargin'] = 0;
			_0x9f6cx13['startSide'] = 'top'
		};
		return _0x9f6cx13
	}
});
Ext.define('Ext.ux.Gantt.view.dependency.View', {
	extend: 'Ext.ux.Scheduler.view.dependency.View'
	, alias: 'schdependencyview.basegantt'
	, requires: ['Ext.ux.Gantt.view.dependency.Painter']
	, config: {
		painterConfig: {
			type: 'ganttdefault'
		}
	}
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['callParent'](arguments);
		if (_0x9f6cx2['painter']['getUseDependencyRowIntersectionCache']()) {
			if (_0x9f6cx2['getPrimaryView']()['taskStore']) {
				_0x9f6cx2['getPrimaryView']()['mon'](_0x9f6cx2['getPrimaryView']()['taskStore'], {
					rootchange: _0x9f6cx2['resetPainterCache']
					, add: _0x9f6cx2['resetPainterCache']
					, remove: _0x9f6cx2['resetPainterCache']
					, clear: _0x9f6cx2['resetPainterCache']
					, refresh: _0x9f6cx2['resetPainterCache']
					, scope: _0x9f6cx2
				})
			}
		};
		if (_0x9f6cx2['getEnableDependencyDragDrop']()) {
			_0x9f6cx2['configureAllowedSourceTerminals']();
			if (_0x9f6cx2['getDependencyStore']()['allowedDependencyTypes']) {
				_0x9f6cx2['dragZone']['on']('dragstart', _0x9f6cx2['configureAllowedTargetTerminals'], _0x9f6cx2)
			}
			else {
				_0x9f6cx2['getPrimaryView']()['el']['addCls'](['sch-terminal-allow-target-start', 'sch-terminal-allow-target-end'])
			};
			_0x9f6cx2['dragZone']['on']('drop', _0x9f6cx2['hideTargetTerminals'], _0x9f6cx2)
		}
	}
	, configureAllowedSourceTerminals: function () {
		var _0x9f6cx2 = this['getDependencyStore']()['allowedDependencyTypes']
			, _0x9f6cx1 = ['sch-terminal-allow-source-start', 'sch-terminal-allow-source-end'];
		if (_0x9f6cx2) {
			_0x9f6cx1 = [];
			if (Ext['Array']['contains'](_0x9f6cx2, 'EndToEnd') || Ext['Array']['contains'](_0x9f6cx2, 'EndToStart')) {
				_0x9f6cx1['push']('sch-terminal-allow-source-end')
			};
			if (Ext['Array']['contains'](_0x9f6cx2, 'StartToStart') || Ext['Array']['contains'](_0x9f6cx2, 'StartToEnd')) {
				_0x9f6cx1['push']('sch-terminal-allow-source-start')
			}
		};
		this['dragZone']['view']['el']['addCls'](_0x9f6cx1)
	}
	, configureAllowedTargetTerminals: function () {
		var _0x9f6cx5 = this['getDependencyStore']()['allowedDependencyTypes']
			, _0x9f6cx1 = []
			, _0x9f6cx2 = this['dragZone']['view']['el'];
		_0x9f6cx2['removeCls'](['sch-terminal-allow-target-start', 'sch-terminal-allow-target-end']);
		if (Ext['Array']['contains'](_0x9f6cx5, 'EndToEnd') || Ext['Array']['contains'](_0x9f6cx5, 'StartToEnd')) {
			_0x9f6cx1['push']('sch-terminal-allow-target-end')
		};
		if (Ext['Array']['contains'](_0x9f6cx5, 'StartToStart') || Ext['Array']['contains'](_0x9f6cx5, 'EndToStart')) {
			_0x9f6cx1['push']('sch-terminal-allow-target-start')
		};
		_0x9f6cx2['addCls'](_0x9f6cx1)
	}
	, hideTargetTerminals: function () {
		this['getDependencyStore']()['allowedDependencyTypes'] && this['getPrimaryView']()['el']['removeCls'](['sch-terminal-allow-target-start', 'sch-terminal-allow-target-end'])
	}
	, onPrimaryViewItemUpdate: function (_0x9f6cx1, _0x9f6cx2, _0x9f6cx5) {
		this['updateDependencies'](_0x9f6cx1['getAllDependencies']())['then'](null, Ext['emptyFn'])
	}
});
Ext.define('Ext.ux.Gantt.view.dependency.Mixin', {
	extend: 'Ext.ux.Scheduler.view.dependency.Mixin'
	, requires: ['Ext.ux.Gantt.view.dependency.View']
	, enableDependencyDragDrop: true
	, createDependencyView: function (_0x9f6cx1, _0x9f6cx2) {
		return Ext.ux.Scheduler['view']['dependency']['View']['create'](Ext['apply']({}, _0x9f6cx1, {
			primaryView: _0x9f6cx2
			, type: 'basegantt'
		}))
	}
});
Ext.define('Ext.ux.Gantt.patches.CellEditor', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.CellEditor'
	, minVersion: '6.0.0'
	, maxVersion: '6.0.2'
	, overrides: {
		destroy: function () {
			clearTimeout(this['restoreTimer']);
			this['callParent'](arguments)
		}
		, onViewRefresh: function (_0x9f6cx2) {
			var _0x9f6cx3 = this
				, _0x9f6cx4 = _0x9f6cx3['el'] && _0x9f6cx3['el']['dom']
				, _0x9f6cx1, _0x9f6cx5 = _0x9f6cx3['context'];
			if (_0x9f6cx4) {
				_0x9f6cx1 = _0x9f6cx2['getCellByPosition'](_0x9f6cx5, true);
				if (!_0x9f6cx1) {
					_0x9f6cx3['allowBlur'] = _0x9f6cx3['wasAllowBlur'];
					_0x9f6cx3['completeEdit']();
					Ext['getDetachedBody']()['dom']['appendChild'](_0x9f6cx4);
					return
				};
				_0x9f6cx5['node'] = _0x9f6cx2['getNode'](_0x9f6cx5['record']);
				_0x9f6cx5['row'] = _0x9f6cx2['getRow'](_0x9f6cx5['record']);
				_0x9f6cx5['cell'] = _0x9f6cx1;
				_0x9f6cx5['rowIdx'] = _0x9f6cx2['indexOf'](_0x9f6cx5['row']);
				_0x9f6cx1['insertBefore'](_0x9f6cx4, _0x9f6cx1['firstChild']);
				_0x9f6cx3['boundEl'] = _0x9f6cx3['container'] = Ext['get'](_0x9f6cx1);
				_0x9f6cx3['realign'](true);
				if (_0x9f6cx3['editing']) {
					if (Ext['isIE']) {
						_0x9f6cx3['restoreTimer'] = Ext['defer'](function () {
							if (!_0x9f6cx3['destroyed']) {
								_0x9f6cx3['allowBlur'] = _0x9f6cx3['wasAllowBlur'];
								_0x9f6cx3['editingPlugin']['getActiveEditor']() === _0x9f6cx3 && _0x9f6cx3['field']['focus']()
							}
						}, 10)
					}
					else {
						_0x9f6cx3['allowBlur'] = _0x9f6cx3['wasAllowBlur'];
						_0x9f6cx3['field']['focus']()
					}
				}
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.CellEditor_2', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.CellEditor'
	, minVersion: '6.0.2'
	, maxVersion: '6.0.3'
	, overrides: {
		completeEdit: function (_0x9f6cx1) {
			var _0x9f6cx2 = this;
			if (_0x9f6cx2['editing']) {
				_0x9f6cx2['context']['value'] = _0x9f6cx2['field']['value']
			};
			_0x9f6cx2['callParent'](arguments)
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.CellEditing', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.plugin.CellEditing'
	, minVersion: '5.1.1'
	, maxVersion: '6.0.1.250'
	, overrides: {
		showEditor: function (_0x9f6cx1, _0x9f6cx2, _0x9f6cx5) {
			if (_0x9f6cx1['context'] && _0x9f6cx1['context']['record'] !== _0x9f6cx2['record'] && _0x9f6cx1['field'] instanceof Ext['form']['field']['ComboBox']) {
				_0x9f6cx1['field']['lastSelectedRecords'] = null
			};
			this['callParent'](arguments)
		}
		, cancelEdit: function (_0x9f6cx3) {
			var _0x9f6cx5 = this
				, _0x9f6cx2 = _0x9f6cx5['context'];
			if (_0x9f6cx3 && _0x9f6cx3['isCellEditor']) {
				_0x9f6cx5['context']['value'] = _0x9f6cx3['context']['value'] = ('editedValue' in _0x9f6cx3) ? _0x9f6cx3['editedValue'] : _0x9f6cx3['getValue']();
				var _0x9f6cx1 = _0x9f6cx5['context'];
				_0x9f6cx5['context'] = _0x9f6cx3['context'];
				_0x9f6cx5['callParent'](arguments);
				_0x9f6cx5['context'] = _0x9f6cx1;
				if (_0x9f6cx3['context'] === _0x9f6cx2) {
					_0x9f6cx5['setActiveEditor'](null);
					_0x9f6cx5['setActiveColumn'](null);
					_0x9f6cx5['setActiveRecord'](null)
				}
				else {
					_0x9f6cx5['editing'] = true
				}
			}
			else {
				_0x9f6cx3 = _0x9f6cx5['getActiveEditor']();
				if (_0x9f6cx3 && _0x9f6cx3['field']) {
					_0x9f6cx3['cancelEdit']()
				}
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.TreeViewDragDrop', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.tree.plugin.TreeViewDragDrop'
	, minVersion: '6.0.0'
	, overrides: {
		disable: function () {
			this['callParent'](arguments);
			this['dragZone'] && this['dragZone']['lock']();
			this['dropZone'] && this['dropZone']['lock']()
		}
		, enable: function () {
			this['callParent'](arguments);
			this['dragZone'] && this['dragZone']['unlock']();
			this['dropZone'] && this['dropZone']['unlock']()
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.SpreadsheetModel', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.selection.SpreadsheetModel'
	, minVersion: '6.0.0'
	, applyFn: function () {
		var _0x9f6cx1 = {
			privates: {
				onMouseMove: function (_0x9f6cx5, _0x9f6cx2) {
					if (!Ext['fly'](_0x9f6cx2)['up']('.sch-ganttview')) {
						this['callParent'](arguments)
					}
				}
				, handleMouseDown: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx4, _0x9f6cx2) {
					if (!(_0x9f6cx3 instanceof Ext.ux.Gantt['view']['Gantt'])) {
						var _0x9f6cx7 = _0x9f6cx5['className']['indexOf']('sch-gantt-column-dragdrop') >= 0;
						if (_0x9f6cx7) {
							this['selectRows']([_0x9f6cx2], this['isSelected'](_0x9f6cx2))
						}
						else {
							this['callParent'](arguments)
						}
					}
				}
			}
		};
		if (Ext['getVersion']()['isLessThan']('6.0.2')) {
			_0x9f6cx1['select'] = function (_0x9f6cx5, _0x9f6cxb, _0x9f6cx13) {
				var _0x9f6cx8 = this
					, _0x9f6cx2 = _0x9f6cx8['selected']
					, _0x9f6cxc = _0x9f6cx8['view']
					, _0x9f6cxa = _0x9f6cxc['dataSource']
					, _0x9f6cx6, _0x9f6cx4, _0x9f6cx7, _0x9f6cx3 = false;
				if (!_0x9f6cx2 || !_0x9f6cx2['isRows'] || _0x9f6cx2['view'] !== _0x9f6cxc) {
					_0x9f6cx8['resetSelection'](true);
					_0x9f6cx2 = _0x9f6cx8['selected'] = new Ext['grid']['selection'].Rows(_0x9f6cxc)
				}
				else {
					if (!_0x9f6cxb) {
						_0x9f6cx2['clear']()
					}
				};
				if (!Ext['isArray'](_0x9f6cx5)) {
					_0x9f6cx5 = [_0x9f6cx5]
				};
				_0x9f6cx6 = _0x9f6cx5['length'];
				for (_0x9f6cx4 = 0; _0x9f6cx4 < _0x9f6cx6; _0x9f6cx4++) {
					_0x9f6cx7 = _0x9f6cx5[_0x9f6cx4];
					if (typeof _0x9f6cx7 === 'number') {
						_0x9f6cx7 = _0x9f6cxa['getAt'](_0x9f6cx7)
					};
					if (!_0x9f6cx2['contains'](_0x9f6cx7)) {
						_0x9f6cx2['add'](_0x9f6cx7);
						_0x9f6cx3 = true
					}
				};
				if (_0x9f6cx3) {
					_0x9f6cx8['updateHeaderState']();
					if (!_0x9f6cx13) {
						_0x9f6cx8['fireSelectionChange']()
					}
				}
			}
		};
		Ext['override'](Ext['grid']['selection'].SpreadsheetModel, _0x9f6cx1)
	}
});
Ext.define('Ext.ux.Gantt.patches.SpreadsheetModel_2', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.selection.SpreadsheetModel'
	, minVersion: '6.2.1'
	, overrides: {
		privates: {
			onMouseUp: function (_0x9f6cx8, _0x9f6cx6, _0x9f6cx7) {
				var _0x9f6cx3 = this
					, _0x9f6cx5 = _0x9f6cx7['view']
					, _0x9f6cx1, _0x9f6cx2;
				_0x9f6cx3['checkCellClicked'] = null;
				if (_0x9f6cx5 && !_0x9f6cx5['destroyed']) {
					if (!_0x9f6cx8['position']) {
						_0x9f6cx1 = _0x9f6cx8['getTarget'](_0x9f6cx5['cellSelector']);
						if (_0x9f6cx1) {
							_0x9f6cx2 = _0x9f6cx5['getRecord'](_0x9f6cx1);
							if (_0x9f6cx2) {
								_0x9f6cx8['position'] = new Ext['grid'].CellContext(_0x9f6cx5)['setPosition'](_0x9f6cx2, _0x9f6cx5['getHeaderByCell'](_0x9f6cx1))
							}
						}
					};
					if (_0x9f6cx3['extensible'] && _0x9f6cx8['position'] && !_0x9f6cx8['position']['isEqual'](_0x9f6cx3['mousedownPosition'])) {
						_0x9f6cx3['extensible']['disable']()
					};
					_0x9f6cx5['el']['un']('mousemove', _0x9f6cx3['onMouseMove'], _0x9f6cx3);
					if (_0x9f6cx3['selected']['isRows']) {
						_0x9f6cx3['selected']['addRange']()
					};
					if (!_0x9f6cx8['position'] || !_0x9f6cx8['position']['isEqual'](_0x9f6cx3['mousedownPosition'])) {
						_0x9f6cx3['fireSelectionChange']()
					}
				}
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.SpreadsheetModel_3', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.selection.SpreadsheetModel'
	, minVersion: '6.0.2'
	, overrides: {
		privates: {
			onSelectionFinish: function (_0x9f6cx7, _0x9f6cx5, _0x9f6cx1) {
				var _0x9f6cx2 = this['view'];
				if (_0x9f6cx1 && _0x9f6cx2 instanceof Ext.ux.Gantt['view']['Gantt']) {
					var _0x9f6cx4 = _0x9f6cx2['ownerGrid']['lockedGrid']['view']
						, _0x9f6cx6 = _0x9f6cx4['getHeaderCt']()
						, _0x9f6cx3 = _0x9f6cx6['getVisibleGridColumns']();
					if (Ext['Array']['indexOf'](_0x9f6cx3, _0x9f6cx1['column']) === -1 && _0x9f6cx1['record'] !== null) {
						_0x9f6cx1 = new Ext['grid'].CellContext(_0x9f6cx2)['setPosition'](_0x9f6cx1['record'], _0x9f6cx3[_0x9f6cx3['length'] - 1])
					}
				};
				this['callParent'](arguments)
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.SpreadsheetModel_4', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.selection.SpreadsheetModel'
	, minVersion: '6.0.2'
	, overrides: {
		privates: {
			onStoreRemove: function () {
				var _0x9f6cx1 = this['getSelected']();
				if (_0x9f6cx1 && !_0x9f6cx1['isCells']) {
					this['callParent'](arguments)
				}
			}
		}
		, deselect: function (_0x9f6cx2, _0x9f6cxc) {
			var _0x9f6cx6 = this
				, _0x9f6cx1 = _0x9f6cx6['selected']
				, _0x9f6cx8 = _0x9f6cx6['view']['dataSource']
				, _0x9f6cx7, _0x9f6cx3, _0x9f6cx4, _0x9f6cx5 = false;
			if (_0x9f6cx1 && _0x9f6cx1['isRows']) {
				if (!Ext['isArray'](_0x9f6cx2)) {
					_0x9f6cx2 = [_0x9f6cx2]
				};
				_0x9f6cx7 = _0x9f6cx2['length'];
				for (_0x9f6cx3 = 0; _0x9f6cx3 < _0x9f6cx7; _0x9f6cx3++) {
					_0x9f6cx4 = _0x9f6cx2[_0x9f6cx3];
					if (typeof _0x9f6cx4 === 'number') {
						_0x9f6cx4 = _0x9f6cx8['getAt'](_0x9f6cx4)
					};
					if (_0x9f6cx1['remove'](_0x9f6cx4)) {
						_0x9f6cx5 = true
					}
				}
			};
			if (_0x9f6cx5) {
				_0x9f6cx6['updateHeaderState']();
				if (!_0x9f6cxc) {
					_0x9f6cx6['fireSelectionChange']()
				}
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.TreeView', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.tree.View'
	, minVersion: '6.0.2'
	, overrides: {
		onFocusLeave: function (_0x9f6cx5) {
			var _0x9f6cx2 = this
				, _0x9f6cx1;
			if (!_0x9f6cx2['destroying'] && !_0x9f6cx2['refreshing']) {
				_0x9f6cx1 = !_0x9f6cx5['isScroll'] && (!_0x9f6cx2['lockingPartner'] || !_0x9f6cx5['toComponent'] || (_0x9f6cx5['toComponent'] !== _0x9f6cx2['lockingPartner'] && !_0x9f6cx2['lockingPartner']['isAncestor'](_0x9f6cx5['toComponent'])));
				if (_0x9f6cx2['cellFocused']) {
					if (_0x9f6cx1) {
						_0x9f6cx2['getNavigationModel']()['setPosition'](null, null, _0x9f6cx5['event'], null, true)
					};
					_0x9f6cx2['cellFocused'] = false;
					_0x9f6cx2['focusEl'] = _0x9f6cx2['el'];
					_0x9f6cx2['focusEl']['dom']['setAttribute']('tabIndex', 0)
				};
				if (_0x9f6cx1) {
					if (_0x9f6cx2['ownerGrid']['actionableMode']) {
						_0x9f6cx2['lastFocused'] = _0x9f6cx2['actionPosition'];
						_0x9f6cx2['ownerGrid']['setActionableMode'](false)
					}
				}
				else {
					_0x9f6cx2['actionPosition'] = null
				};
				Ext['Component']['prototype']['onFocusLeave']['call'](_0x9f6cx2, _0x9f6cx5)
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.SelectionExtender2', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.selection.SelectionExtender'
	, minVersion: '6.0.0'
	, overrides: {
		setHandle: function (_0x9f6cx2, _0x9f6cx1) {
			if (this['view']['lockedView']['getNodes']()['length'] === 0 || (_0x9f6cx2 && _0x9f6cx1 && (!_0x9f6cx2['record'] || !_0x9f6cx1['record']))) {
				this['disable']();
				return
			};
			return this['callParent'](arguments)
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.LockingView', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.locking.View'
	, minVersion: '6.0.0'
	, overrides: {
		getCellByPosition: function (_0x9f6cx2, _0x9f6cx1) {
			if (_0x9f6cx2 && !_0x9f6cx2['column']) {
				return null
			};
			return this['callParent'](arguments)
		}
		, onCellDeselect: function (_0x9f6cx1) {
			if (_0x9f6cx1 && !_0x9f6cx1['column']) {
				return
			};
			return this['callParent'](arguments)
		}
		, onDataRefresh: function () {
			Ext['suspendLayouts']();
			this['relayFn']('onDataRefresh', arguments);
			Ext['resumeLayouts'](true)
		}
	}
});
Ext.define('Ext.ux.Scheduler.template.Event', {
	extend: 'Ext.XTemplate'
	, eventPrefix: null
	, resizeHandles: null
	, resizeTpl: '<div class="sch-resizable-handle sch-resizable-handle-DIR"></div>'
	, terminalSides: null
	, terminalTpl: '<div class="sch-terminal sch-terminal-SIDE"></div>'
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		Ext['apply'](_0x9f6cx2, _0x9f6cx1);
		_0x9f6cx2['callParent']([this['getOuterMarkup']()])
	}
	, getOuterMarkup: function () {
		var _0x9f6cx1 = this;
		var _0x9f6cx2 = Ext['Array']['map'](_0x9f6cx1['terminalSides'] || [], function (_0x9f6cx5) {
			return _0x9f6cx1['terminalTpl']['replace'](/SIDE/, _0x9f6cx5)
		}).join('');
		return ['<tpl for=".">', '<div unselectable="on" tabindex="-1" id="', _0x9f6cx1['eventPrefix'], '{id}" style="right:{right}px;left:{left}px;top:{top}px;height:{height}px;width:{width}px;{style}" class="sch-event ', Ext['baseCSSPrefix'], 'unselectable {internalCls} {cls}">', ((_0x9f6cx1['resizeHandles'] === 'start' || _0x9f6cx1['resizeHandles'] === 'both') ? _0x9f6cx1['resizeTpl']['replace'](/DIR/, 'start') : ''), '<div unselectable="on" class="sch-event-inner {iconCls}">', this['getInnerMarkup'](), '</div>', ((_0x9f6cx1['resizeHandles'] === 'end' || _0x9f6cx1['resizeHandles'] === 'both') ? _0x9f6cx1['resizeTpl']['replace'](/DIR/, 'end') : ''), _0x9f6cx2, '</div>', '</tpl>'].join('')
	}
	, getInnerMarkup: function () {
		return '{body}'
	}
});
Ext.define('Ext.ux.Scheduler.view.Horizontal', {
	requires: ['Ext.util.Region', 'Ext.Element', 'Ext.Array', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.model.Resource']
	, view: null
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1)
	}
	, getElementsFromEventRecord: function (_0x9f6cx2, _0x9f6cx4, _0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx1 = this['view']
			, _0x9f6cx7;
		_0x9f6cx5 = _0x9f6cx5 || false;
		if (_0x9f6cx4) {
			_0x9f6cx7 = '[id^=' + _0x9f6cx1['eventPrefix'] + _0x9f6cx2['internalId'] + '-' + _0x9f6cx4['internalId'] + '-]'
		}
		else {
			_0x9f6cx7 = '[id^=' + _0x9f6cx1['eventPrefix'] + _0x9f6cx2['internalId'] + '-]'
		};
		return _0x9f6cx1['getEl']()['query'](_0x9f6cx7, _0x9f6cx5)
	}
	, translateToScheduleCoordinate: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['view'];
		var _0x9f6cx5;
		if (_0x9f6cx2['shouldAdjustForRtl']()) {
			_0x9f6cx5 = _0x9f6cx2['getEl']()['getRight']() - _0x9f6cx1
		}
		else {
			_0x9f6cx5 = _0x9f6cx1 - _0x9f6cx2['getEl']()['getX']()
		};
		return _0x9f6cx5 + _0x9f6cx2['getScroll']()['left']
	}
	, translateToPageCoordinate: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['view'];
		return _0x9f6cx1 + _0x9f6cx2['getEl']()['getX']() - _0x9f6cx2['getScroll']()['left']
	}
	, getDateFromXY: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx3 = _0x9f6cx5[0];
		if (!_0x9f6cx1) {
			_0x9f6cx3 = this['translateToScheduleCoordinate'](_0x9f6cx3)
		};
		return this['view']['timeAxisViewModel']['getDateFromPosition'](_0x9f6cx3, _0x9f6cx2)
	}
	, getEventRenderData: function (_0x9f6cx1) {
		var _0x9f6cx7 = _0x9f6cx1['getStartDate']()
			, _0x9f6cx4 = _0x9f6cx1['getEndDate']() || _0x9f6cx7
			, _0x9f6cx8 = this['view']
			, _0x9f6cx5 = _0x9f6cx8['timeAxis']['getStart']()
			, _0x9f6cx9 = _0x9f6cx8['timeAxis']['getEnd']()
			, _0x9f6cx6 = Math
			, _0x9f6cx3 = _0x9f6cx8['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cx7, _0x9f6cx5))
			, _0x9f6cxc = _0x9f6cx8['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cx4, _0x9f6cx9))
			, _0x9f6cx2 = {
				event: _0x9f6cx1
			};
		if (this['view']['rtl']) {
			_0x9f6cx2['right'] = _0x9f6cx6['min'](_0x9f6cx3, _0x9f6cxc)
		}
		else {
			_0x9f6cx2['left'] = _0x9f6cx6['min'](_0x9f6cx3, _0x9f6cxc)
		};
		_0x9f6cx2['width'] = _0x9f6cx6['max'](1, _0x9f6cx6['abs'](_0x9f6cxc - _0x9f6cx3)) - _0x9f6cx8['eventBorderWidth'];
		if (_0x9f6cx8['managedEventSizing']) {
			_0x9f6cx2['top'] = _0x9f6cx6['max'](0, (_0x9f6cx8['barMargin'] - ((Ext['isIE'] && !Ext['isStrict']) ? 0 : _0x9f6cx8['eventBorderWidth'] - _0x9f6cx8['cellTopBorderWidth'])));
			_0x9f6cx2['height'] = _0x9f6cx8['timeAxisViewModel']['rowHeightHorizontal'] - (2 * _0x9f6cx8['barMargin']) - _0x9f6cx8['eventBorderWidth']
		};
		_0x9f6cx2['start'] = _0x9f6cx7;
		_0x9f6cx2['end'] = _0x9f6cx4;
		_0x9f6cx2['startsOutsideView'] = _0x9f6cx7 < _0x9f6cx5;
		_0x9f6cx2['endsOutsideView'] = _0x9f6cx4 > _0x9f6cx9;
		return _0x9f6cx2
	}
	, getScheduleRegion: function (_0x9f6cx4, _0x9f6cx6) {
		var _0x9f6cxc = this['view']
			, _0x9f6cx9;
		if (_0x9f6cx4) {
			var _0x9f6cx5 = _0x9f6cx6 && _0x9f6cxc['getElementsFromEventRecord'](_0x9f6cx6, _0x9f6cx4)[0];
			_0x9f6cx9 = Ext['fly'](_0x9f6cxc['getRowNode'](_0x9f6cx4))['getRegion']();
			if (_0x9f6cx5) {
				var _0x9f6cx13 = _0x9f6cx5['getRegion']();
				_0x9f6cx9['top'] = _0x9f6cx13['top'];
				_0x9f6cx9['bottom'] = _0x9f6cx13['bottom']
			}
			else {
				_0x9f6cx9['top'] = _0x9f6cx9['top'] + _0x9f6cxc['barMargin'];
				_0x9f6cx9['bottom'] = _0x9f6cx9['bottom'] - _0x9f6cxc['barMargin'] - _0x9f6cxc['eventBorderWidth']
			}
		}
		else {
			_0x9f6cx9 = _0x9f6cxc['getTableRegion']();
			_0x9f6cx9['top'] = _0x9f6cx9['top'] + _0x9f6cxc['barMargin'];
			_0x9f6cx9['bottom'] = _0x9f6cx9['bottom'] - _0x9f6cxc['barMargin'] - _0x9f6cxc['eventBorderWidth']
		};
		var _0x9f6cx7 = _0x9f6cxc['timeAxis']['getStart']()
			, _0x9f6cxb = _0x9f6cxc['timeAxis']['getEnd']()
			, _0x9f6cx2 = _0x9f6cxc['getDateConstraints'](_0x9f6cx4, _0x9f6cx6) || {
				start: _0x9f6cx7
				, end: _0x9f6cxb
			}
			, _0x9f6cx3 = this['translateToPageCoordinate'](_0x9f6cxc['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cx7, _0x9f6cx2['start'])))
			, _0x9f6cxa = this['translateToPageCoordinate'](_0x9f6cxc['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cxb, _0x9f6cx2['end'])))
			, _0x9f6cx8 = _0x9f6cx9['top']
			, _0x9f6cx1 = _0x9f6cx9['bottom'];
		return new Ext['util'].Region(_0x9f6cx8, Math['max'](_0x9f6cx3, _0x9f6cxa), _0x9f6cx1, Math['min'](_0x9f6cx3, _0x9f6cxa))
	}
	, getResourceRegion: function (_0x9f6cxc, _0x9f6cx4, _0x9f6cx9) {
		var _0x9f6cxb = this['view']
			, _0x9f6cx3 = _0x9f6cxb['getRowNode'](_0x9f6cxc)
			, _0x9f6cx7 = Ext['fly'](_0x9f6cx3)['getOffsetsTo'](_0x9f6cxb['getEl']())
			, _0x9f6cxa = _0x9f6cxb['timeAxis']['getStart']()
			, _0x9f6cxd = _0x9f6cxb['timeAxis']['getEnd']()
			, _0x9f6cx5 = _0x9f6cx4 ? Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cxa, _0x9f6cx4) : _0x9f6cxa
			, _0x9f6cx6 = _0x9f6cx9 ? Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cxd, _0x9f6cx9) : _0x9f6cxd
			, _0x9f6cx8 = _0x9f6cxb['getCoordinateFromDate'](_0x9f6cx5)
			, _0x9f6cxe = _0x9f6cxb['getCoordinateFromDate'](_0x9f6cx6)
			, _0x9f6cx13 = _0x9f6cx7[1] + _0x9f6cxb['cellTopBorderWidth']
			, _0x9f6cx1 = _0x9f6cx7[1] + Ext['fly'](_0x9f6cx3)['getHeight']() - _0x9f6cxb['cellBottomBorderWidth'];
		if (!Ext['versions']['touch']) {
			var _0x9f6cx2 = _0x9f6cxb['getScroll']();
			_0x9f6cx13 += _0x9f6cx2['top'];
			_0x9f6cx1 += _0x9f6cx2['top']
		};
		return new Ext['util'].Region(_0x9f6cx13, Math['max'](_0x9f6cx8, _0x9f6cxe), _0x9f6cx1, Math['min'](_0x9f6cx8, _0x9f6cxe))
	}
	, columnRenderer: function (_0x9f6cx2, _0x9f6cxc, _0x9f6cx4, _0x9f6cx7, _0x9f6cx9) {
		var _0x9f6cx8 = this['view'];
		var _0x9f6cx1 = _0x9f6cx8['getEventStore']()['filterEventsForResource'](_0x9f6cx4, function (_0x9f6cxa) {
			return _0x9f6cx8['timeAxis']['isRangeInAxis'](_0x9f6cxa)
		});
		if (_0x9f6cx1['length'] === 0) {
			return
		};
		var _0x9f6cx6 = Ext['Array']['map'](_0x9f6cx1, function (_0x9f6cxa) {
			return _0x9f6cx8['generateTplData'](_0x9f6cxa, _0x9f6cx4, _0x9f6cx7)
		});
		if (_0x9f6cx8['dynamicRowHeight']) {
			var _0x9f6cx3 = _0x9f6cx8['eventLayout']['horizontal'];
			var _0x9f6cx5 = _0x9f6cx3['applyLayout'](_0x9f6cx6, _0x9f6cx4, this['layoutEventVertically'], this);
			_0x9f6cxc['rowHeight'] = (_0x9f6cx5 * _0x9f6cx8['timeAxisViewModel']['rowHeightHorizontal']) - ((_0x9f6cx5 - 1) * _0x9f6cx8['barMargin'])
		};
		return _0x9f6cx8['eventTpl']['apply'](_0x9f6cx6)
	}
	, layoutEventVertically: function (_0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx1 = this['view'];
		var _0x9f6cx5 = _0x9f6cx3 === 0 ? _0x9f6cx1['barMargin'] : (_0x9f6cx3 * _0x9f6cx1['timeAxisViewModel']['rowHeightHorizontal'] - (_0x9f6cx3 - 1) * _0x9f6cx1['barMargin']);
		if (_0x9f6cx5 >= _0x9f6cx1['cellBottomBorderWidth']) {
			_0x9f6cx5 -= _0x9f6cx1['cellBottomBorderWidth']
		};
		return _0x9f6cx5
	}
	, resolveResource: function (_0x9f6cx4) {
		var _0x9f6cx3 = this
			, _0x9f6cx2 = _0x9f6cx3['view']
			, _0x9f6cx5, _0x9f6cx1;
		_0x9f6cx5 = Ext['fly'](_0x9f6cx4)['is'](_0x9f6cx2['eventSelector']) && _0x9f6cx4 || Ext['fly'](_0x9f6cx4)['up'](_0x9f6cx2['eventSelector'], null, true);
		if (_0x9f6cx5) {
			_0x9f6cx1 = _0x9f6cx2['getResourceRecordFromDomId'](_0x9f6cx5['id'])
		}
		else {
			_0x9f6cx4 = _0x9f6cx2['findRowByChild'](_0x9f6cx4);
			_0x9f6cx1 = _0x9f6cx4 && _0x9f6cx2['getRecordForRowNode'](_0x9f6cx4) || null
		};
		return _0x9f6cx1
	}
	, getTimeSpanRegion: function (_0x9f6cx2, _0x9f6cx8, _0x9f6cx6) {
		var _0x9f6cx3 = this['view']
			, _0x9f6cx5 = _0x9f6cx3['getCoordinateFromDate'](_0x9f6cx2)
			, _0x9f6cx4 = _0x9f6cx8 ? _0x9f6cx3['getCoordinateFromDate'](_0x9f6cx8) : _0x9f6cx5
			, _0x9f6cx1, _0x9f6cx7;
		_0x9f6cx7 = _0x9f6cx3['getTableRegion']();
		if (_0x9f6cx6) {
			_0x9f6cx1 = Math['max'](_0x9f6cx7 ? _0x9f6cx7['bottom'] - _0x9f6cx7['top'] : 0, _0x9f6cx3['getEl']()['dom']['clientHeight'])
		}
		else {
			_0x9f6cx1 = _0x9f6cx7 ? _0x9f6cx7['bottom'] - _0x9f6cx7['top'] : 0
		};
		return new Ext['util'].Region(0, Math['max'](_0x9f6cx5, _0x9f6cx4), _0x9f6cx1, Math['min'](_0x9f6cx5, _0x9f6cx4))
	}
	, getStartEndDatesFromRegion: function (_0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx1 = this['view'];
		var _0x9f6cx2 = _0x9f6cx1['getDateFromCoordinate'](_0x9f6cx3['left'], _0x9f6cx5)
			, _0x9f6cx4 = _0x9f6cx1['getDateFromCoordinate'](_0x9f6cx3['right'], _0x9f6cx5);
		if (_0x9f6cx2 && _0x9f6cx4) {
			return {
				start: Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cx2, _0x9f6cx4)
				, end: Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cx2, _0x9f6cx4)
			}
		};
		return null
	}
	, onEventAdd: function (_0x9f6cx12, _0x9f6cxf) {
		var _0x9f6cxd = this['view']
			, _0x9f6cx8 = {}
			, _0x9f6cx1, _0x9f6cx2, _0x9f6cxe, _0x9f6cx5, _0x9f6cx4, _0x9f6cxb, _0x9f6cx3, _0x9f6cx6, _0x9f6cx7;
		for (_0x9f6cxb = 0, _0x9f6cx3 = _0x9f6cxf['length']; _0x9f6cxb < _0x9f6cx3; _0x9f6cxb++) {
			_0x9f6cx1 = _0x9f6cxf[_0x9f6cxb];
			_0x9f6cx2 = _0x9f6cx1['getStartDate']();
			_0x9f6cxe = _0x9f6cx1['getEndDate']();
			if (_0x9f6cx2 && _0x9f6cxe && _0x9f6cxd['timeAxis']['timeSpanInAxis'](_0x9f6cx2, _0x9f6cxe)) {
				_0x9f6cx5 = _0x9f6cxf[_0x9f6cxb]['getResources'](_0x9f6cxd['getEventStore']());
				for (_0x9f6cx6 = 0, _0x9f6cx7 = _0x9f6cx5['length']; _0x9f6cx6 < _0x9f6cx7; _0x9f6cx6++) {
					_0x9f6cx4 = _0x9f6cx5[_0x9f6cx6];
					_0x9f6cx8[_0x9f6cx4['getId']()] = _0x9f6cx4
				}
			}
		};
		Ext['Object']['each'](_0x9f6cx8, function (_0x9f6cxc, _0x9f6cx9) {
			_0x9f6cxd['repaintEventsForResource'](_0x9f6cx9)
		})
	}
	, onEventRemove: function (_0x9f6cx4, _0x9f6cx2) {
		var _0x9f6cx7 = this
			, _0x9f6cx1 = _0x9f6cx7['view']
			, _0x9f6cx3 = _0x9f6cx1['getEventStore']()
			, _0x9f6cx6, _0x9f6cx5;
		_0x9f6cx6 = Ext['Array']['unique'](Ext['Array']['reduce'](_0x9f6cx2, function (_0x9f6cx8, _0x9f6cx9) {
			return _0x9f6cx8['concat'](_0x9f6cx3['getResourcesForEvent'](_0x9f6cx9))
		}, []));
		_0x9f6cx5 = Ext['Array']['reduce'](_0x9f6cx2, function (_0x9f6cx8, _0x9f6cx9) {
			return _0x9f6cx8['concat'](_0x9f6cx1['getElementsFromEventRecord'](_0x9f6cx9, null, null, true))
		}, []);
		_0x9f6cx5 = new Ext.CompositeElementLite(_0x9f6cx5);
		_0x9f6cx5['fadeOut']({
			callback: function (_0x9f6cx8) {
				Ext['Array']['forEach'](_0x9f6cx6, function (_0x9f6cx9) {
					if (_0x9f6cx1 && !_0x9f6cx1['isDestroyed']) {
						_0x9f6cx1['store']['indexOf'](_0x9f6cx9) >= 0 && _0x9f6cx1['repaintEventsForResource'](_0x9f6cx9)
					}
				})
			}
		})
	}
	, onEventUpdate: function (_0x9f6cx3, _0x9f6cx4) {
		var _0x9f6cx8 = _0x9f6cx4['previous'] || {};
		var _0x9f6cxc = this['view'];
		var _0x9f6cx6 = _0x9f6cxc['timeAxis'];
		var _0x9f6cx1 = _0x9f6cx4['getStartDate']();
		var _0x9f6cx9 = _0x9f6cx4['getEndDate']();
		var _0x9f6cx2 = _0x9f6cx8['StartDate'] || _0x9f6cx1;
		var _0x9f6cx7 = _0x9f6cx8['EndDate'] || _0x9f6cx9;
		var _0x9f6cxa = _0x9f6cx2 && _0x9f6cx7 && _0x9f6cx6['timeSpanInAxis'](_0x9f6cx2, _0x9f6cx7);
		var _0x9f6cx5;
		if (_0x9f6cx4['resourceIdField'] in _0x9f6cx8 && _0x9f6cxa) {
			_0x9f6cx5 = _0x9f6cx3['getResourceStore']()['getById'](_0x9f6cx8[_0x9f6cx4['resourceIdField']]);
			_0x9f6cx5 && _0x9f6cxc['repaintEventsForResource'](_0x9f6cx5, true)
		};
		if ((_0x9f6cx1 && _0x9f6cx9 && _0x9f6cx6['timeSpanInAxis'](_0x9f6cx1, _0x9f6cx9)) || _0x9f6cxa) {
			Ext['Array']['each'](_0x9f6cx4['getResources'](), function (_0x9f6cx13) {
				_0x9f6cxc['repaintEventsForResource'](_0x9f6cx13, true)
			})
		}
	}
	, setColumnWidth: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this['view'];
		_0x9f6cx1['getTimeAxisViewModel']()['setViewColumnWidth'](_0x9f6cx5, _0x9f6cx2)
	}
	, getVisibleDateRange: function () {
		var _0x9f6cx4 = this['view'];
		if (!_0x9f6cx4['getEl']()) {
			return null
		};
		var _0x9f6cx3 = _0x9f6cx4['getTableRegion']()
			, _0x9f6cx5 = _0x9f6cx4['timeAxis']['getStart']()
			, _0x9f6cx6 = _0x9f6cx4['timeAxis']['getEnd']()
			, _0x9f6cx7 = _0x9f6cx4['getWidth']();
		if ((_0x9f6cx3['right'] - _0x9f6cx3['left']) < _0x9f6cx7) {
			return {
				startDate: _0x9f6cx5
				, endDate: _0x9f6cx6
			}
		};
		var _0x9f6cx2 = _0x9f6cx4['getScroll']();
		var _0x9f6cx1 = {
			startDate: _0x9f6cx4['getDateFromCoordinate'](_0x9f6cx2['left'], null, true)
			, endDate: _0x9f6cx4['getDateFromCoordinate'](_0x9f6cx2['left'] + _0x9f6cx7, null, true) || _0x9f6cx4['timeAxis']['getEnd']()
		};
		if (!_0x9f6cx1['endDate']) {
			_0x9f6cx1['endDate'] = _0x9f6cx4['timeAxis']['getEnd']()
		};
		return _0x9f6cx1
	}
	, getItemBox: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return Ext['Array']['map'](_0x9f6cx1['getResources'](), function (_0x9f6cx5) {
			return _0x9f6cx2['getResourceEventBox'](_0x9f6cx1, _0x9f6cx5)
		})
	}
	, isRowVisible: function (_0x9f6cx2) {
		var _0x9f6cx5 = Ext['isFunction'](_0x9f6cx2['isVisible']) && !_0x9f6cx2['isVisible']();
		if (!_0x9f6cx5 && this['view']['groupingFeature'] && !this['view']['groupingFeature']['disabled']) {
			var _0x9f6cx1 = this['view']['resourceStore']['getGroups']();
			if (_0x9f6cx1) {
				var _0x9f6cx3 = _0x9f6cx1['getByKey'](_0x9f6cx2['get'](this['view']['resourceStore']['groupField']));
				_0x9f6cx5 = _0x9f6cx3 && !this['view']['lockingPartner']['groupingFeature']['isExpanded'](_0x9f6cx3)
			}
		};
		return !_0x9f6cx5
	}
	, isElementRenderedAndDisplayed: function (_0x9f6cx1) {
		if (_0x9f6cx1 instanceof Ext.ux.Scheduler['model']['Resource']) {
			_0x9f6cx1 = this['view']['getRowNode'](_0x9f6cx1)
		};
		return !!(_0x9f6cx1 && Ext['fly'](_0x9f6cx1)['getHeight']())
	}
	, getResultEventBox: function (_0x9f6cx2, _0x9f6cx1) {
		return {
			rendered: true
			, start: (_0x9f6cx2['hasOwnProperty']('left') ? _0x9f6cx2['left'] : _0x9f6cx2['right'])
			, end: (_0x9f6cx2['hasOwnProperty']('left') ? _0x9f6cx2['left'] : _0x9f6cx2['right']) + _0x9f6cx2['width']
			, top: _0x9f6cx1 + _0x9f6cx2['top']
			, bottom: _0x9f6cx1 + _0x9f6cx2['top'] + _0x9f6cx2['height']
		}
	}
	, getResourceEventBox: function (_0x9f6cx9, _0x9f6cxc) {
		var _0x9f6cxb = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cx1d = this
			, _0x9f6cxf = null
			, _0x9f6cx10 = _0x9f6cx1d['view']
			, _0x9f6cxe = _0x9f6cx10['timeAxis']['getStart']()
			, _0x9f6cx13 = _0x9f6cx10['timeAxis']['getEnd']()
			, _0x9f6cx1b = _0x9f6cx9['getStartDate']()
			, _0x9f6cx12 = _0x9f6cx9['getEndDate']()
			, _0x9f6cx16, _0x9f6cx14, _0x9f6cx1c, _0x9f6cx1e, _0x9f6cxd, _0x9f6cx4, _0x9f6cx7, _0x9f6cx11, _0x9f6cx15, _0x9f6cx2, _0x9f6cx1, _0x9f6cx5, _0x9f6cx18, _0x9f6cx17, _0x9f6cx3, _0x9f6cx6, _0x9f6cxa;
		if (_0x9f6cx1b && _0x9f6cx12 && _0x9f6cxb['intersectSpans'](_0x9f6cx1b, _0x9f6cx12, _0x9f6cxe, _0x9f6cx13) && _0x9f6cx1d['isRowVisible'](_0x9f6cxc)) {
			_0x9f6cx1e = _0x9f6cx10['getRowNode'](_0x9f6cxc);
			if (_0x9f6cx1e && _0x9f6cx1d['isElementRenderedAndDisplayed'](_0x9f6cx1e)) {
				if (_0x9f6cx10['managedEventSizing']) {
					_0x9f6cx16 = _0x9f6cx10['eventLayout']['horizontal'];
					var _0x9f6cx8 = _0x9f6cx10['getEventStore']()['filterEventsForResource'](_0x9f6cxc, _0x9f6cx10['timeAxis']['isRangeInAxis'], _0x9f6cx10['timeAxis']);
					_0x9f6cx14 = Ext['Array']['map'](_0x9f6cx8, _0x9f6cx1d['getEventRenderData'], _0x9f6cx1d);
					_0x9f6cx16['applyLayout'](_0x9f6cx14, _0x9f6cxc);
					_0x9f6cx1c = Ext['Array']['findBy'](_0x9f6cx14, function (_0x9f6cx19) {
						return _0x9f6cx19['event'] == _0x9f6cx9
					});
					if (_0x9f6cx1c) {
						_0x9f6cx4 = Ext['fly'](_0x9f6cx1e)['getOffsetsTo'](_0x9f6cx10['getNodeContainer']())[1];
						_0x9f6cxf = this['getResultEventBox'](_0x9f6cx1c, _0x9f6cx4)
					}
				}
				else {
					_0x9f6cx15 = _0x9f6cx10['getElementsFromEventRecord'](_0x9f6cx9, _0x9f6cx9 !== _0x9f6cxc && _0x9f6cxc);
					if (_0x9f6cx15['length']) {
						_0x9f6cx2 = _0x9f6cx15[0];
						_0x9f6cx1 = _0x9f6cx2['getOffsetsTo'](_0x9f6cx10['getEl']());
						_0x9f6cx5 = _0x9f6cx2['getBox']();
						_0x9f6cxf = {
							rendered: true
							, start: _0x9f6cx1[0]
							, end: _0x9f6cx1[0] + _0x9f6cx5['width']
							, top: _0x9f6cx1[1]
							, bottom: _0x9f6cx1[1] + _0x9f6cx5['height']
						}
					}
				}
			}
			else {
				_0x9f6cxf = {
					rendered: false
					, start: _0x9f6cx10['getCoordinateFromDate'](_0x9f6cxb['max'](_0x9f6cx1b, _0x9f6cxe))
					, end: _0x9f6cx10['getCoordinateFromDate'](_0x9f6cxb['min'](_0x9f6cx12, _0x9f6cx13))
				};
				_0x9f6cx18 = _0x9f6cx10['all']['startIndex'];
				_0x9f6cx17 = _0x9f6cx10['getRecord'](_0x9f6cx18);
				_0x9f6cx3 = _0x9f6cx10['all']['endIndex'];
				_0x9f6cx6 = _0x9f6cx10['getRecord'](_0x9f6cx3);
				_0x9f6cx7 = _0x9f6cx10['getRowHeight']();
				if (_0x9f6cxc['isAbove'](_0x9f6cx17)) {
					_0x9f6cxf['top'] = -_0x9f6cx7;
					_0x9f6cxf['bottom'] = _0x9f6cxf['top'] + _0x9f6cx7;
					_0x9f6cxf['relPos'] = 'before'
				}
				else {
					if (_0x9f6cxc == _0x9f6cx6 || _0x9f6cxc['isAbove'](_0x9f6cx6)) {
						_0x9f6cxd = _0x9f6cx10['indexOf'](_0x9f6cxc);
						_0x9f6cxf['top'] = _0x9f6cxd * _0x9f6cx7;
						_0x9f6cxf['bottom'] = _0x9f6cxf['top'] + _0x9f6cx7
					}
					else {
						_0x9f6cxa = _0x9f6cx10['getNode'](_0x9f6cx3);
						if (_0x9f6cx1d['isElementRenderedAndDisplayed'](_0x9f6cxa)) {
							_0x9f6cxf['top'] = Ext['fly'](_0x9f6cxa)['getOffsetsTo'](_0x9f6cx10['getNodeContainer']())[1] + Ext['fly'](_0x9f6cxa)['getHeight']()
						}
						else {
							_0x9f6cxf['top'] = (_0x9f6cx3 + 1) * _0x9f6cx7
						};
						_0x9f6cxf['bottom'] = _0x9f6cxf['top'] + _0x9f6cx7;
						_0x9f6cxf['relPos'] = 'after'
					}
				}
			};
			if (_0x9f6cxf) {
				_0x9f6cxf = _0x9f6cx1d['adjustItemBox'](_0x9f6cx9, _0x9f6cxf)
			}
		};
		return _0x9f6cxf
	}
	, adjustItemBox: function (_0x9f6cx1, _0x9f6cx2) {
		return _0x9f6cx2
	}
	, getConnectorStartSide: function (_0x9f6cx1) {
		return 'left'
	}
	, getConnectorEndSide: function (_0x9f6cx1) {
		return 'right'
	}
});
Ext.define('Ext.ux.Scheduler.mixin.AbstractTimelineView', {
	requires: ['Ext.ux.Scheduler.data.TimeAxis', 'Ext.ux.Scheduler.template.Event', 'Ext.ux.Scheduler.view.Horizontal']
	, uses: ['Ext.dom.Query']
	, selectedEventCls: 'sch-event-selected'
	, readOnly: false
	, horizontalViewClass: 'Ext.ux.Scheduler.view.Horizontal'
	, timeCellCls: 'sch-timetd'
	, timeCellSelector: '.sch-timetd'
	, eventBorderWidth: 1
	, timeAxis: null
	, timeAxisViewModel: null
	, eventPrefix: null
	, rowHeight: null
	, mode: 'horizontal'
	, horizontal: null
	, vertical: null
	, panel: null
	, displayDateFormat: null
	, el: null
	, _initializeTimelineView: function () {
		if (this['horizontalViewClass']) {
			this['horizontal'] = Ext['create'](this['horizontalViewClass'], {
				view: this
			})
		};
		if (this['verticalViewClass']) {
			this['vertical'] = Ext['create'](this['verticalViewClass'], {
				view: this
			})
		};
		if (this['weekViewClass']) {
			this['weekview'] = Ext['create'](this['weekViewClass'], {
				view: this
			})
		};
		this['eventPrefix'] = (this['eventPrefix'] || this['getId']()) + '-'
	}
	, getTimeAxisViewModel: function () {
		return this['timeAxisViewModel']
	}
	, getFormattedDate: function (_0x9f6cx1) {
		return Ext['Date']['format'](_0x9f6cx1, this['getDisplayDateFormat']())
	}
	, getFormattedEndDate: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = this['getDisplayDateFormat']();
		if (_0x9f6cx5['getHours']() === 0 && _0x9f6cx5['getMinutes']() === 0 && (!_0x9f6cx1 || !(_0x9f6cx5['getYear']() === _0x9f6cx1['getYear']() && _0x9f6cx5['getMonth']() === _0x9f6cx1['getMonth']() && _0x9f6cx5['getDate']() === _0x9f6cx1['getDate']())) && !Ext.ux.Scheduler['util']['Date']['hourInfoRe']['test'](_0x9f6cx2['replace'](Ext.ux.Scheduler['util']['Date']['stripEscapeRe'], ''))) {
			_0x9f6cx5 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx5, Ext.ux.Scheduler['util']['Date'].DAY, -1)
		};
		return Ext['Date']['format'](_0x9f6cx5, _0x9f6cx2)
	}
	, getDisplayDateFormat: function () {
		return this['displayDateFormat']
	}
	, setDisplayDateFormat: function (_0x9f6cx1) {
		this['displayDateFormat'] = _0x9f6cx1
	}
	, fitColumns: function (_0x9f6cx2) {
		if (this['isHorizontal']()) {
			this['getTimeAxisViewModel']()['fitToAvailableWidth'](_0x9f6cx2)
		}
		else {
			var _0x9f6cx1 = Math['floor']((this['panel']['getWidth']() - Ext['getScrollbarSize']()['width'] - 1) / this['headerCt']['getColumnCount']());
			this['setColumnWidth'](_0x9f6cx1, _0x9f6cx2)
		}
	}
	, getElementsFromEventRecord: function (_0x9f6cx1, _0x9f6cx3, _0x9f6cx5, _0x9f6cx2) {
		return this[this['mode']]['getElementsFromEventRecord'](_0x9f6cx1, _0x9f6cx3, _0x9f6cx5, _0x9f6cx2)
	}
	, getStartEndDatesFromRegion: function (_0x9f6cx2, _0x9f6cx1) {
		return this[this['mode']]['getStartEndDatesFromRegion'](_0x9f6cx2, _0x9f6cx1)
	}
	, getTimeResolution: function () {
		return this['timeAxis']['getResolution']()
	}
	, setTimeResolution: function (_0x9f6cx2, _0x9f6cx1) {
		this['timeAxis']['setResolution'](_0x9f6cx2, _0x9f6cx1);
		if (this['getTimeAxisViewModel']()['snapToIncrement']) {
			this['refreshKeepingScroll']()
		}
	}
	, getEventIdFromDomNodeId: function (_0x9f6cx1) {
		return _0x9f6cx1['substring'](this['eventPrefix']['length'])['split']('-')[0]
	}
	, getResourceIdFromDomNodeId: function (_0x9f6cx1) {
		return _0x9f6cx1['substring'](this['eventPrefix']['length'])['split']('-')[1]
	}
	, getDateFromDomEvent: function (_0x9f6cx2, _0x9f6cx1) {
		return this['getDateFromXY'](_0x9f6cx2['getXY'](), _0x9f6cx1)
	}
	, getSnapPixelAmount: function () {
		return this['getTimeAxisViewModel']()['getSnapPixelAmount']()
	}
	, setSnapEnabled: function (_0x9f6cx1) {
		this['getTimeAxisViewModel']()['setSnapToIncrement'](_0x9f6cx1)
	}
	, setReadOnly: function (_0x9f6cx1) {
		this['readOnly'] = _0x9f6cx1;
		this[_0x9f6cx1 ? 'addCls' : 'removeCls'](this['_cmpCls'] + '-readonly')
	}
	, isReadOnly: function () {
		return this['readOnly']
	}
	, setMode: function (_0x9f6cx1) {
		this['mode'] = _0x9f6cx1;
		this['timeAxisViewModel']['mode'] = _0x9f6cx1
	}
	, getMode: function () {
		return this['mode']
	}
	, isHorizontal: function () {
		return this['getMode']() === 'horizontal'
	}
	, isVertical: function () {
		return this['getMode']() === 'vertical'
	}
	, isWeekView: function () {
		return this['getMode']() === 'weekview'
	}
	, getDateFromXY: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		return this[this['mode']]['getDateFromXY'](_0x9f6cx5, _0x9f6cx2, _0x9f6cx1)
	}
	, getDateFromCoordinate: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		if (!_0x9f6cx1) {
			_0x9f6cx5 = this[this['mode']]['translateToScheduleCoordinate'](_0x9f6cx5)
		};
		return this['timeAxisViewModel']['getDateFromPosition'](_0x9f6cx5, _0x9f6cx2)
	}
	, getDateFromX: function (_0x9f6cx1, _0x9f6cx2) {
		return this['getDateFromCoordinate'](_0x9f6cx1, _0x9f6cx2)
	}
	, getDateFromY: function (_0x9f6cx2, _0x9f6cx1) {
		return this['getDateFromCoordinate'](_0x9f6cx2, _0x9f6cx1)
	}
	, getCoordinateFromDate: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = this['timeAxisViewModel']['getPositionFromDate'](_0x9f6cx1);
		if (_0x9f6cx2 === false) {
			_0x9f6cx5 = this[this['mode']]['translateToPageCoordinate'](_0x9f6cx5)
		};
		return _0x9f6cx5
	}
	, getTimeSpanDistance: function (_0x9f6cx1, _0x9f6cx2) {
		return this['timeAxisViewModel']['getDistanceBetweenDates'](_0x9f6cx1, _0x9f6cx2)
	}
	, getTimeSpanRegion: function (_0x9f6cx1, _0x9f6cx2) {
		return this[this['mode']]['getTimeSpanRegion'](_0x9f6cx1, _0x9f6cx2)
	}
	, getScheduleRegion: function (_0x9f6cx2, _0x9f6cx1) {
		return this[this['mode']]['getScheduleRegion'](_0x9f6cx2, _0x9f6cx1)
	}
	, getTableRegion: function () {
		throw 'Abstract method call'
	}
	, getRowNode: function (_0x9f6cx1) {
		throw 'Abstract method call'
	}
	, getRecordForRowNode: function (_0x9f6cx1) {
		throw 'Abstract method call'
	}
	, getVisibleDateRange: function () {
		return this[this['mode']]['getVisibleDateRange']()
	}
	, setColumnWidth: function (_0x9f6cx2, _0x9f6cx1) {
		this[this['mode']]['setColumnWidth'](_0x9f6cx2, _0x9f6cx1)
	}
	, findRowByChild: function (_0x9f6cx1) {
		throw 'Abstract method call'
	}
	, setBarMargin: function (_0x9f6cx2, _0x9f6cx1) {
		this['barMargin'] = _0x9f6cx2;
		if (!_0x9f6cx1) {
			this['refreshKeepingScroll']()
		}
	}
	, getRowHeight: function () {
		return this['timeAxisViewModel']['getViewRowHeight']()
	}
	, setRowHeight: function (_0x9f6cx1, _0x9f6cx2) {
		this['timeAxisViewModel']['setViewRowHeight'](_0x9f6cx1, _0x9f6cx2)
	}
	, refreshKeepingScroll: function () {
		throw 'Abstract method call'
	}
	, scrollVerticallyTo: function (_0x9f6cx2, _0x9f6cx1) {
		throw 'Abstract method call'
	}
	, scrollHorizontallyTo: function (_0x9f6cx1, _0x9f6cx2) {
		throw 'Abstract method call'
	}
	, getVerticalScroll: function () {
		throw 'Abstract method call'
	}
	, getHorizontalScroll: function () {
		throw 'Abstract method call'
	}
	, getEl: Ext['emptyFn']
	, getScroll: function () {
		throw 'Abstract method call'
	}
	, getOuterEl: function () {
		return this['getEl']()
	}
	, getRowContainerEl: function () {
		return this['getEl']()
	}
	, getScheduleCell: function (_0x9f6cx2, _0x9f6cx1) {
		return this['getCellByPosition']({
			row: _0x9f6cx2
			, column: _0x9f6cx1
		})
	}
	, getScrollEventSource: function () {
		return this['getEl']()
	}
	, getViewportHeight: function () {
		return this['getEl']()['getHeight']()
	}
	, getViewportWidth: function () {
		return this['getEl']()['getWidth']()
	}
	, getViewportCenterDate: function () {
		var _0x9f6cx1 = this['getScroll']()
			, _0x9f6cx2;
		if (this['isVertical']()) {
			_0x9f6cx2 = [0, _0x9f6cx1['top'] + this['getViewportHeight']() / 2]
		}
		else {
			_0x9f6cx2 = [_0x9f6cx1['left'] + this['getViewportWidth']() / 2, 0]
		};
		return this['getDateFromXY'](_0x9f6cx2, null, true)
	}
	, getDateConstraints: Ext['emptyFn']
	, getItemBox: function (_0x9f6cx1) {
		return this[this['mode']]['getItemBox'](_0x9f6cx1)
	}
	, getConnectorStartSide: function (_0x9f6cx1) {
		return this[this['mode']]['getConnectorStartSide'](_0x9f6cx1)
	}
	, getConnectorEndSide: function (_0x9f6cx1) {
		return this[this['mode']]['getConnectorEndSide'](_0x9f6cx1)
	}
	, getViewStartDate: function () {
		return this['timeAxis']['getStart']()
	}
	, getViewEndDate: function () {
		return this['timeAxis']['getEnd']()
	}
});
Ext['apply'](Ext.ux.Scheduler, {
	VERSION: '5.1.3'
});
Ext.define('Ext.ux.Scheduler.patches.NavigationModel6_0_2', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.NavigationModel'
	, minVersion: '6.0.2'
	, maxVersion: '6.2.0'
	, overrides: {
		focusPosition: function (_0x9f6cx2) {
			var _0x9f6cx3 = this
				, _0x9f6cx5, _0x9f6cx4, _0x9f6cx1;
			_0x9f6cx3['item'] = _0x9f6cx3['cell'] = null;
			if (_0x9f6cx2 && _0x9f6cx2['record'] && _0x9f6cx2['column']) {
				_0x9f6cx5 = _0x9f6cx2['view'];
				if (_0x9f6cx2['rowElement']) {
					_0x9f6cx4 = _0x9f6cx3['item'] = _0x9f6cx2['rowElement']
				}
				else {
					_0x9f6cx4 = _0x9f6cx5['getRowByRecord'](_0x9f6cx2['record'])
				};
				if (_0x9f6cx4) {
					_0x9f6cx3['cell'] = _0x9f6cx2['cellElement'] || Ext['fly'](_0x9f6cx4)['down'](_0x9f6cx2['column']['getCellSelector'](), true);
					if (_0x9f6cx3['cell']) {
						_0x9f6cx3['cell'] = new Ext['dom'].Fly(_0x9f6cx3['cell']);
						_0x9f6cx5['lastFocused'] = _0x9f6cx3['lastFocused'] = _0x9f6cx3['position']['clone']();
						_0x9f6cx1 = _0x9f6cx5['getScrollable']();
						if (_0x9f6cx1 && !_0x9f6cx5['mixins']['Ext.ux.Scheduler.mixin.TimelineView']) {
							_0x9f6cx1['scrollIntoView'](_0x9f6cx3['cell'])
						};
						_0x9f6cx3['focusItem'](_0x9f6cx3['cell']);
						_0x9f6cx5['focusEl'] = _0x9f6cx3['cell']
					}
					else {
						_0x9f6cx3['position']['setAll']();
						_0x9f6cx3['record'] = _0x9f6cx3['column'] = _0x9f6cx3['recordIndex'] = _0x9f6cx3['columnIndex'] = null
					}
				}
				else {
					_0x9f6cx4 = _0x9f6cx5['dataSource']['indexOf'](_0x9f6cx2['record']);
					_0x9f6cx3['position']['setAll']();
					_0x9f6cx3['record'] = _0x9f6cx3['column'] = _0x9f6cx3['recordIndex'] = _0x9f6cx3['columnIndex'] = null;
					if (_0x9f6cx4 !== -1 && _0x9f6cx5['bufferedRenderer']) {
						_0x9f6cx3['lastKeyEvent'] = null;
						_0x9f6cx5['bufferedRenderer']['scrollTo'](_0x9f6cx4, false, _0x9f6cx3['afterBufferedScrollTo'], _0x9f6cx3)
					}
				}
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.TouchScroll', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.scroll.TouchScroller'
	, minVersion: '5.1.0'
	, maxVersion: '6.2.0'
	, overrides: {
		privates: {
			onEvent: function (_0x9f6cx2) {
				var _0x9f6cx1 = this;
				if (!_0x9f6cx1[_0x9f6cx1['listenerMap'][_0x9f6cx2['type']]]) {
					return
				};
				return this['callParent'](arguments)
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.View', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.view.View'
	, minVersion: '5.1.0'
	, overrides: {
		handleEvent: function (_0x9f6cx7) {
			var _0x9f6cx3 = this
				, _0x9f6cx5 = _0x9f6cx3['keyEventRe']['test'](_0x9f6cx7['type'])
				, _0x9f6cx1 = _0x9f6cx3['getNavigationModel']();
			_0x9f6cx7['view'] = _0x9f6cx3;
			if (_0x9f6cx5) {
				_0x9f6cx7['item'] = _0x9f6cx7['getTarget'](_0x9f6cx3['itemSelector']);
				_0x9f6cx7['record'] = _0x9f6cx1['getRecord'](_0x9f6cx7['item'])
			};
			if (!_0x9f6cx7['item']) {
				var _0x9f6cx2 = _0x9f6cx3['editingPlugin'] && _0x9f6cx3['editingPlugin']['getActiveEditor'] && _0x9f6cx3['editingPlugin']['getActiveEditor']();
				if (!(_0x9f6cx2 && _0x9f6cx2['getEl']()['contains'](_0x9f6cx7['getTarget']()))) {
					_0x9f6cx7['item'] = _0x9f6cx7['getTarget'](_0x9f6cx3['itemSelector'])
				}
			};
			if (_0x9f6cx7['item'] && !_0x9f6cx7['record']) {
				_0x9f6cx7['record'] = _0x9f6cx3['getRecord'](_0x9f6cx7['item'])
			};
			if (_0x9f6cx3['processUIEvent'](_0x9f6cx7) !== false) {
				_0x9f6cx3['processSpecialEvent'](_0x9f6cx7)
			};
			if (_0x9f6cx5 && !Ext['fly'](_0x9f6cx7['target'])['isInputField']()) {
				if (_0x9f6cx7['getKey']() === _0x9f6cx7['SPACE'] || _0x9f6cx7['isNavKeyPress'](true)) {
					_0x9f6cx7['preventDefault']()
				}
			};
			_0x9f6cx7['view'] = null
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.Scroller', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.scroll.Scroller'
	, minVersion: '6.0.2'
	, maxVersion: '6.0.3'
	, applyFn: function () {
		var _0x9f6cx1 = {
			destroy: function () {
				clearTimeout(this['restoringTimer']);
				this['callParent'](arguments)
			}
			, privates: {
				restoreState: function () {
					var _0x9f6cx5 = this
						, _0x9f6cx2 = _0x9f6cx5['getScrollElement']()
						, _0x9f6cx3;
					if (_0x9f6cx2) {
						_0x9f6cx3 = _0x9f6cx2['dom'];
						if (_0x9f6cx5['trackingScrollTop'] !== undefined) {
							_0x9f6cx5['restoring'] = true;
							_0x9f6cx5['restoringTimer'] = Ext['defer'](function () {
								_0x9f6cx5['restoring'] = false
							}, 50);
							_0x9f6cx3['scrollTop'] = _0x9f6cx5['trackingScrollTop'];
							_0x9f6cx3['scrollLeft'] = _0x9f6cx5['trackingScrollLeft']
						}
					}
				}
			}
		};
		if (Ext['isIE9m']) {
			_0x9f6cx1['privates']['updateSpacerXY'] = function (_0x9f6cx5) {
				var _0x9f6cx2 = this['getSpacer']();
				if (this['getRtl'] && this['getRtl']()) {
					_0x9f6cx2['rtlSetLocalXY'](_0x9f6cx5['x'], _0x9f6cx5['y'])
				}
				else {
					_0x9f6cx2['setLocalXY'](_0x9f6cx5['x'], _0x9f6cx5['y'])
				}
			}
		};
		Ext['ClassManager']['get'](this['target'])['override'](_0x9f6cx1)
	}
});
Ext.define('Ext.ux.Scheduler.patches.Scroller_6_5', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.scroll.Scroller'
	, minVersion: '6.5.0'
	, overrides: {
		privates: {
			updateDomScrollPosition: function (_0x9f6cx5) {
				var _0x9f6cx3 = this
					, _0x9f6cx2 = _0x9f6cx3['position']
					, _0x9f6cx9 = _0x9f6cx2['x']
					, _0x9f6cx8 = _0x9f6cx2['y']
					, _0x9f6cx6, _0x9f6cx7, _0x9f6cx1, _0x9f6cx4;
				_0x9f6cx3['readPosition'](_0x9f6cx2);
				_0x9f6cx6 = _0x9f6cx2['x'];
				_0x9f6cx7 = _0x9f6cx2['y'];
				_0x9f6cx3['positionDirty'] = false;
				if (!_0x9f6cx5) {
					_0x9f6cx1 = _0x9f6cx6 - _0x9f6cx9;
					_0x9f6cx4 = _0x9f6cx7 - _0x9f6cx8;
					if (!_0x9f6cx3['isScrolling']) {
						_0x9f6cx3['isScrolling'] = Ext['isScrolling'] = true;
						_0x9f6cx3['fireScrollStart'](_0x9f6cx6, _0x9f6cx7, _0x9f6cx1, _0x9f6cx4)
					};
					_0x9f6cx3['fireScroll'](_0x9f6cx6, _0x9f6cx7, _0x9f6cx1, _0x9f6cx4);
					_0x9f6cx3['bufferedOnDomScrollEnd'](_0x9f6cx6, _0x9f6cx7, _0x9f6cx1, _0x9f6cx4)
				};
				return _0x9f6cx2
			}
		}
		, getPosition: function () {
			var _0x9f6cx1 = this;
			if (_0x9f6cx1['positionDirty']) {
				_0x9f6cx1['updateDomScrollPosition'](true)
			};
			return _0x9f6cx1['position']
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.Queue', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.util.Queue'
	, minVersion: '6.0.2'
	, maxVersion: '6.0.3'
	, overrides: {
		add: function (_0x9f6cx4, _0x9f6cx2) {
			var _0x9f6cx5 = this
				, _0x9f6cx1 = _0x9f6cx5['getKey'](_0x9f6cx4)
				, _0x9f6cx3;
			if (!(_0x9f6cx3 = _0x9f6cx5['map'][_0x9f6cx1])) {
				++_0x9f6cx5['length'];
				_0x9f6cx5['items']['push'](_0x9f6cx4);
				_0x9f6cx5['map'][_0x9f6cx1] = _0x9f6cx4
			}
			else {
				if (_0x9f6cx2) {
					_0x9f6cx5['map'][_0x9f6cx1] = _0x9f6cx4;
					_0x9f6cx5['items'][Ext['Array']['indexOf'](_0x9f6cx5['items'], _0x9f6cx3)] = _0x9f6cx4
				}
			};
			return _0x9f6cx4
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.LayoutContext', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.layout.Context'
	, minVersion: '6.0.2'
	, maxVersion: '6.0.3'
	, overrides: {
		queueFlush: function (_0x9f6cx2, _0x9f6cx1) {
			this['flushQueue']['add'](_0x9f6cx2, _0x9f6cx1)
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.LayoutContext_6_5', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.layout.Context'
	, minVersion: '6.5.0'
	, maxVersion: '6.5.1'
	, overrides: {
		callLayout: function (_0x9f6cx2, _0x9f6cx1) {
			this['currentLayout'] = _0x9f6cx2;
			if (!_0x9f6cx2['destroyed']) {
				_0x9f6cx2[_0x9f6cx1](this['getCmp'](_0x9f6cx2['owner']))
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.Lockable', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.locking.Lockable'
	, minVersion: '6.0.2'
	, maxVersion: '6.0.3'
	, applyFn: function () {
		if (Ext['firefoxVersion'] > 51 && Ext['supports']['touchScroll'] === 2) {
			Ext['supports']['Touch'] = 0;
			Ext['supports']['TouchEvents'] = 0;
			Ext['supports']['touchScroll'] = 0
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.TableLayout', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, requires: 'Ext.ux.Scheduler.patches.Lockable'
	, target: 'Ext.view.TableLayout'
	, minVersion: '6.0.2'
	, maxVersion: '6.0.3'
	, overrides: {
		calculate: function (_0x9f6cxc) {
			var _0x9f6cx11 = this
				, _0x9f6cx3 = _0x9f6cxc['context']
				, _0x9f6cx10 = _0x9f6cxc['lockingPartnerContext']
				, _0x9f6cxf = _0x9f6cxc['headerContext']
				, _0x9f6cxe = _0x9f6cxc['ownerCtContext']
				, _0x9f6cx1 = _0x9f6cx11['owner']
				, _0x9f6cx5 = _0x9f6cxf['getProp']('columnsChanged')
				, _0x9f6cx7 = _0x9f6cxc['state']
				, _0x9f6cx13, _0x9f6cx6, _0x9f6cx2, _0x9f6cxa, _0x9f6cxb = _0x9f6cx1['body']['dom']
				, _0x9f6cxd, _0x9f6cx9, _0x9f6cx8, _0x9f6cx14, _0x9f6cx12, _0x9f6cx4;
			if (!_0x9f6cx1['all']['getCount']() && (!_0x9f6cxb || !_0x9f6cx1['body']['child']('table'))) {
				_0x9f6cxc['setProp']('viewOverflowY', false);
				_0x9f6cx11['callParent']([_0x9f6cxc]);
				return
			};
			if (_0x9f6cx5 === undefined) {
				_0x9f6cx11['done'] = false;
				return
			};
			if (_0x9f6cx5) {
				if (!(_0x9f6cx13 = _0x9f6cx7['columnFlusher'])) {
					_0x9f6cx3['queueFlush'](_0x9f6cx7['columnFlusher'] = _0x9f6cx13 = {
						ownerContext: _0x9f6cxc
						, columnsChanged: _0x9f6cx5
						, layout: _0x9f6cx11
						, id: _0x9f6cx11['columnFlusherId']
						, flush: _0x9f6cx11['flushColumnWidths']
					}, true)
				};
				if (!_0x9f6cx13['flushed']) {
					_0x9f6cx11['done'] = false;
					return
				}
			};
			if (_0x9f6cxc['doSyncRowHeights']) {
				if (!(_0x9f6cxa = _0x9f6cx7['rowHeightFlusher'])) {
					if (!(_0x9f6cx2 = _0x9f6cx7['rowHeights'])) {
						_0x9f6cx7['rowHeights'] = _0x9f6cx2 = _0x9f6cxc['rowHeightSynchronizer'];
						_0x9f6cx11['owner']['syncRowHeightMeasure'](_0x9f6cx2);
						_0x9f6cxc['setProp']('rowHeights', _0x9f6cx2)
					};
					if (!(_0x9f6cx6 = _0x9f6cx10['getProp']('rowHeights'))) {
						_0x9f6cx11['done'] = false;
						return
					};
					_0x9f6cx3['queueFlush'](_0x9f6cx7['rowHeightFlusher'] = _0x9f6cxa = {
						ownerContext: _0x9f6cxc
						, synchronizer: _0x9f6cx2
						, otherSynchronizer: _0x9f6cx6
						, layout: _0x9f6cx11
						, id: _0x9f6cx11['rowHeightFlusherId']
						, flush: _0x9f6cx11['flushRowHeights']
					}, true)
				};
				if (!_0x9f6cxa['flushed']) {
					_0x9f6cx11['done'] = false;
					return
				}
			};
			_0x9f6cx11['callParent']([_0x9f6cxc]);
			if (!_0x9f6cxc['heightModel']['shrinkWrap']) {
				_0x9f6cx8 = false;
				if (!_0x9f6cxe['heightModel']['shrinkWrap']) {
					_0x9f6cx9 = _0x9f6cxe['target']['layout']['getContainerSize'](_0x9f6cxe);
					if (!_0x9f6cx9['gotHeight']) {
						_0x9f6cx11['done'] = false;
						return
					};
					_0x9f6cxd = _0x9f6cxb['offsetHeight'];
					_0x9f6cx8 = _0x9f6cxd > _0x9f6cx9['height']
				};
				_0x9f6cxc['setProp']('viewOverflowY', _0x9f6cx8)
			};
			if (_0x9f6cx11['done'] && Ext['getScrollbarSize']()['height']) {
				if (_0x9f6cx10 && _0x9f6cx1['isLockedView']) {
					_0x9f6cx14 = _0x9f6cx1['lockingPartner'];
					_0x9f6cx12 = _0x9f6cx1['scrollFlags']['x'] && _0x9f6cxc['headerContext']['state']['boxPlan']['tooNarrow'];
					_0x9f6cx4 = _0x9f6cx14['scrollFlags']['x'] && _0x9f6cx10['headerContext']['state']['boxPlan']['tooNarrow'];
					if (_0x9f6cx12 !== _0x9f6cx4) {
						if (_0x9f6cx4) {
							_0x9f6cx10['setProp']('overflowX', true);
							_0x9f6cxc['setProp']('overflowX', 'scroll')
						}
						else {
							_0x9f6cxc['setProp']('overflowX', true);
							_0x9f6cx10['setProp']('overflowX', 'scroll')
						}
					}
					else {
						_0x9f6cxc['setProp']('overflowX', _0x9f6cx4);
						_0x9f6cx10['setProp']('overflowX', _0x9f6cx12)
					};
					_0x9f6cxc['setProp']('overflowY', 'scroll')
				}
				else {
					if (!_0x9f6cx1['isAutoTree']) {
						_0x9f6cxc['setProp']('overflowX', !!_0x9f6cxc['headerContext']['state']['boxPlan']['tooNarrow'])
					}
				}
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.ColumnLayout', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.ColumnLayout'
	, minVersion: '6.0.2'
	, maxVersion: '6.0.3'
	, overrides: {
		calculate: function (_0x9f6cx3) {
			var _0x9f6cxf = this
				, _0x9f6cx1 = _0x9f6cxf['owner']['grid']
				, _0x9f6cxa = _0x9f6cx3['viewContext']
				, _0x9f6cx2 = _0x9f6cx3['state']
				, _0x9f6cx5 = _0x9f6cx3['context']
				, _0x9f6cxc, _0x9f6cxe, _0x9f6cx12, _0x9f6cx13, _0x9f6cx6, _0x9f6cxd, _0x9f6cxb, _0x9f6cx7, _0x9f6cx8, _0x9f6cx4;
			_0x9f6cxf['callSuper']([_0x9f6cx3]);
			if (_0x9f6cx1 && _0x9f6cx2['parallelDone']) {
				_0x9f6cxc = _0x9f6cxa['lockingPartnerContext'];
				if (_0x9f6cxc) {
					_0x9f6cxe = _0x9f6cxc['target']['ownerCt'];
					if (!_0x9f6cxe['isVisible']() || _0x9f6cxe['collapsed']) {
						_0x9f6cxc = null
					}
				};
				_0x9f6cx12 = _0x9f6cx1['ownerGrid'];
				if (_0x9f6cx12['forceFit'] && !_0x9f6cx2['reflexed']) {
					if (_0x9f6cxf['convertWidthsToFlexes'](_0x9f6cx3)) {
						_0x9f6cxf['cacheFlexes'](_0x9f6cx3);
						_0x9f6cxf['done'] = false;
						_0x9f6cx3['invalidate']({
							state: {
								reflexed: true
								, scrollbarAdjustment: _0x9f6cxf['getScrollbarAdjustment'](_0x9f6cx3)
							}
						});
						return
					}
				};
				if ((_0x9f6cx13 = _0x9f6cx2['columnsChanged']) === undefined) {
					_0x9f6cx6 = _0x9f6cx3['target']['getVisibleGridColumns']();
					_0x9f6cx13 = false;
					for (_0x9f6cxb = 0, _0x9f6cxd = _0x9f6cx6['length']; _0x9f6cxb < _0x9f6cxd; _0x9f6cxb++) {
						_0x9f6cx7 = _0x9f6cx5['getCmp'](_0x9f6cx6[_0x9f6cxb]);
						if (!_0x9f6cx7['lastBox'] || _0x9f6cx7['props']['width'] !== _0x9f6cx7['lastBox']['width']) {
							(_0x9f6cx13 || (_0x9f6cx13 = []))[_0x9f6cxb] = _0x9f6cx7
						}
					};
					_0x9f6cx2['columnsChanged'] = _0x9f6cx13;
					_0x9f6cx3['setProp']('columnsChanged', _0x9f6cx13)
				};
				if (_0x9f6cx3['manageScrollbar']) {
					_0x9f6cx8 = _0x9f6cxf['getScrollbarAdjustment'](_0x9f6cx3);
					if (_0x9f6cx8) {
						_0x9f6cx4 = _0x9f6cxa['getProp']('viewOverflowY');
						if (_0x9f6cx4 === undefined) {
							_0x9f6cxf['done'] = false;
							return
						};
						if (!_0x9f6cx4) {
							if (_0x9f6cxc) {
								_0x9f6cxc['invalidate']();
								_0x9f6cxc['headerContext']['invalidate']()
							};
							_0x9f6cxa['invalidate']();
							_0x9f6cx3['invalidate']({
								state: {
									scrollbarAdjustment: 0
								}
							})
						}
					}
				}
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.ToolTip', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.tip.ToolTip'
	, minVersion: '6.0.0'
	, applyFn: function () {
		var _0x9f6cx1 = {
			setTarget: function (_0x9f6cx3) {
				var _0x9f6cx2 = this;
				if (_0x9f6cx2['target']) {
					var _0x9f6cx5 = Ext['get'](_0x9f6cx2['target']);
					if (_0x9f6cx5) {
						_0x9f6cx2['mun'](_0x9f6cx5, {
							mouseover: _0x9f6cx2['onTargetOver']
							, tap: _0x9f6cx2['onTargetOver']
							, mouseout: _0x9f6cx2['onTargetOut']
							, mousemove: _0x9f6cx2['onMouseMove']
							, scope: _0x9f6cx2
						})
					}
				};
				_0x9f6cx2['target'] = Ext['get'](_0x9f6cx3);
				if (_0x9f6cx2['target']) {
					_0x9f6cx2['mon'](_0x9f6cx2['target'], {
						mouseover: _0x9f6cx2['onTargetOver']
						, tap: _0x9f6cx2['onTargetOver']
						, mouseout: _0x9f6cx2['onTargetOut']
						, mousemove: _0x9f6cx2['onMouseMove']
						, scope: _0x9f6cx2
					})
				};
				if (_0x9f6cx2['anchor']) {
					_0x9f6cx2['anchorTarget'] = _0x9f6cx2['target']
				}
			}
		};
		if (Ext['getVersion']()['isLessThan']('6.0.2')) {
			_0x9f6cx1['afterSetPosition'] = function (_0x9f6cx2, _0x9f6cx3) {
				var _0x9f6cx5 = this;
				_0x9f6cx5['callParent'](arguments);
				if (_0x9f6cx5['anchor']) {
					if (!_0x9f6cx5['anchorEl']['isVisible']()) {
						_0x9f6cx5['anchorEl']['show']()
					};
					_0x9f6cx5['syncAnchor']()
				}
				else {
					_0x9f6cx5['anchorEl']['hide']()
				}
			}
		};
		Ext['ClassManager']['get'](this['target'])['override'](_0x9f6cx1)
	}
});
Ext.define('Ext.ux.Scheduler.patches.AbstractView', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.view.AbstractView'
	, minVersion: '6.2.0'
	, obsoleteTestName: 'patches/002_abstract_view.t.js'
	, overrides: {
		setItemsDraggable: function (_0x9f6cx2) {
			var _0x9f6cx5 = this
				, _0x9f6cx1;
			_0x9f6cx1 = _0x9f6cx5['callParent']([_0x9f6cx2]);
			if (!_0x9f6cx2 && _0x9f6cx5['viewStyleSheet'] && _0x9f6cx5['viewStyleSheet']['cssRules']['length'] === 0) {
				_0x9f6cx5['viewStyleSheet']['ownerNode']['parentNode']['removeChild'](_0x9f6cx5['viewStyleSheet']['ownerNode']);
				_0x9f6cx5['viewStyleSheet'] = Ext['view']['AbstractView']['prototype']['viewStyleSheet'] = null
			};
			return _0x9f6cx1
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.TableScroller', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, minVersion: '6.2.1'
	, maxVersion: '6.5.0'
	, target: 'Ext.scroll.TableScroller'
	, overrides: {
		privates: {
			onDomScroll: function () {
				var _0x9f6cx4 = this
					, _0x9f6cx2 = _0x9f6cx4['position']
					, _0x9f6cx3 = _0x9f6cx2['x']
					, _0x9f6cx5 = _0x9f6cx2['y']
					, _0x9f6cx1, _0x9f6cx8, _0x9f6cx6, _0x9f6cx7;
				_0x9f6cx2 = _0x9f6cx4['updateDomScrollPosition']();
				if (_0x9f6cx4['restoreTimer']) {
					clearTimeout(_0x9f6cx4['onDomScrollEnd']['timer']);
					return
				};
				_0x9f6cx1 = _0x9f6cx2['x'];
				_0x9f6cx8 = _0x9f6cx2['y'];
				_0x9f6cx6 = _0x9f6cx1 - _0x9f6cx3;
				_0x9f6cx7 = _0x9f6cx8 - _0x9f6cx5;
				if (!_0x9f6cx4['isScrolling']) {
					_0x9f6cx4['isScrolling'] = Ext['isScrolling'] = true;
					_0x9f6cx4['fireScrollStart'](_0x9f6cx1, _0x9f6cx8, _0x9f6cx6, _0x9f6cx7)
				};
				_0x9f6cx4['fireScroll'](_0x9f6cx1, _0x9f6cx8, _0x9f6cx6, _0x9f6cx7);
				_0x9f6cx4['bufferedOnDomScrollEnd'](_0x9f6cx1, _0x9f6cx8, _0x9f6cx6, _0x9f6cx7)
			}
			, invokePartners: function (_0x9f6cx1, _0x9f6cx9, _0x9f6cx6, _0x9f6cx3, _0x9f6cx8) {
				var _0x9f6cx7 = this
					, _0x9f6cxc = _0x9f6cx7['_partners']
					, _0x9f6cx5, _0x9f6cx2, _0x9f6cx4;
				if (!_0x9f6cx7['suspendSync']) {
					_0x9f6cx7['invokingPartners'] = true;
					for (_0x9f6cx2 in _0x9f6cxc) {
						_0x9f6cx4 = _0x9f6cxc[_0x9f6cx2]['axes'];
						_0x9f6cx5 = _0x9f6cxc[_0x9f6cx2]['scroller'];
						if (!_0x9f6cx5['invokingPartners']) {
							_0x9f6cx5[_0x9f6cx1](_0x9f6cx7, _0x9f6cx4['x'] ? _0x9f6cx9 : null, _0x9f6cx4['y'] ? _0x9f6cx6 : null, _0x9f6cx3, _0x9f6cx8)
						}
					};
					_0x9f6cx7['invokingPartners'] = false
				}
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.TableScroller2', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, minVersion: '6.2.1'
	, maxVersion: '6.2.2'
	, target: 'Ext.scroll.TableScroller'
	, overrides: {
		privates: {
			getScrollIntoViewXY: function (_0x9f6cx3, _0x9f6cx4) {
				var _0x9f6cx2 = this['getLockingScroller']()
					, _0x9f6cx1 = this['getPosition']()
					, _0x9f6cx5;
				if (_0x9f6cx2) {
					_0x9f6cx1['y'] = _0x9f6cx2['position']['y']
				};
				_0x9f6cx5 = Ext['fly'](_0x9f6cx3)['getScrollIntoViewXY'](this['getElement'](), _0x9f6cx1['x'], _0x9f6cx1['y']);
				_0x9f6cx5['x'] = (_0x9f6cx4 === false) ? _0x9f6cx1['x'] : _0x9f6cx5['x'];
				if (_0x9f6cx2) {
					_0x9f6cx5['y'] = Ext['fly'](_0x9f6cx3)['getScrollIntoViewXY'](_0x9f6cx2['getElement'](), _0x9f6cx1['x'], _0x9f6cx1['y'])['y']
				};
				return _0x9f6cx5
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.Ie9FormFieldText', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.form.field.Text'
	, ieOnly: true
	, minVersion: '6.0.0'
	, reportUrl: null
	, obsoleteTestName: 'patches/003_ie9_form_field_text.t.js'
	, description: ['Text field being a part of grid cell editor might find itself in a situation when it\'s detached', 'from the document and requested to select text inside itself, by being focused for example, simultaneously'].join(' ')
	, applyFn: function () {
		Ext['isIE9'] && Ext['ClassManager']['get'](this['target'])['override']({
			selectTextAsapId: null
			, selectText: function (_0x9f6cx3, _0x9f6cx1) {
				var _0x9f6cx2 = this;
				if (!_0x9f6cx2['destroying'] && !_0x9f6cx2['destroyed'] && _0x9f6cx2['inputEl']) {
					try {
						Ext['asapCancel'](_0x9f6cx2['selectTextAsapId']), _0x9f6cx2['selectTextAsapId'] = null;
						_0x9f6cx2['callParent']([_0x9f6cx3, _0x9f6cx1])
					}
					catch (c) {
						_0x9f6cx2['selectTextAsapId'] = Ext['asap'](_0x9f6cx2['selectText'], _0x9f6cx2, [_0x9f6cx3, _0x9f6cx1])
					}
				}
			}
		})
	}
});
Ext.define('Ext.ux.Scheduler.tooltip.EventTip', {
	extend: 'Ext.tip.ToolTip'
	, alias: 'widget.scheduler_eventtip'
	, uses: ['Ext.Number', 'Ext.util.Format', 'Ext.util.Region', 'Ext.util.Point']
	, config: {
		view: null
	}
	, componentCls: 'sch-tooltip-eventtip'
	, anchor: 't'
	, constraintInsets: '7 -7 -7 7'
	, initComponent: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['callParent'](arguments);
		_0x9f6cx1['on']('beforeshow', _0x9f6cx1['onTipBeforeShow'], _0x9f6cx1)
	}
	, getAlignRegion: function () {
		var _0x9f6cx6 = this
			, _0x9f6cx7 = _0x9f6cx6['anchorEl']
			, _0x9f6cx5 = _0x9f6cx6['getAnchorAlign']()
			, _0x9f6cx9, _0x9f6cx8, _0x9f6cx3, _0x9f6cx2 = _0x9f6cx6['mouseOffset']
			, _0x9f6cx4, _0x9f6cx1;
		if (!_0x9f6cx6['anchorSize']) {
			_0x9f6cx7['addCls'](Ext['baseCSSPrefix'] + 'tip-anchor-top');
			_0x9f6cx7['show']();
			_0x9f6cx6['anchorSize'] = new Ext['util'].Offset(_0x9f6cx7['getWidth'](), _0x9f6cx7['getHeight']());
			_0x9f6cx7['removeCls'](Ext['baseCSSPrefix'] + 'tip-anchor-top');
			_0x9f6cx7['hide']()
		};
		if ((_0x9f6cx6['anchor'] || _0x9f6cx6['align']) && _0x9f6cx6['anchorToTarget'] && !_0x9f6cx6['trackMouse']) {
			_0x9f6cx3 = _0x9f6cx6['currentTarget']['getRegion']();
			if (!Ext['isGarbage'](_0x9f6cx6['currentTarget']['dom']) && _0x9f6cx6['getView']()['getMode']() === 'horizontal' && _0x9f6cx6['pointerEvent']) {
				_0x9f6cx3 = _0x9f6cx3['intersect'](new Ext['util'].Region(_0x9f6cx3['top'], _0x9f6cx6['pointerEvent']['getPoint']()['x'] + _0x9f6cx6['getRegion']()['width'] / 2, _0x9f6cx3['bottom'], _0x9f6cx6['pointerEvent']['getPoint']()['x'] + (-_0x9f6cx6['getRegion']()['width'] / 2))) || _0x9f6cx3
			}
		}
		else {
			_0x9f6cx3 = _0x9f6cx6['pointerEvent'] ? _0x9f6cx6['pointerEvent']['getPoint']()['adjust'](-Math['abs'](_0x9f6cx2[1]), Math['abs'](_0x9f6cx2[0]), Math['abs'](_0x9f6cx2[1]), -Math['abs'](_0x9f6cx2[0])) : new Ext['util'].Point();
			if (!_0x9f6cx6['anchor']) {
				_0x9f6cx9 = true;
				if (_0x9f6cx2[0] > 0) {
					if (_0x9f6cx2[1] > 0) {
						_0x9f6cx5 = 'tl-br'
					}
					else {
						_0x9f6cx5 = 'bl-tr'
					}
				}
				else {
					if (_0x9f6cx2[1] > 0) {
						_0x9f6cx5 = 'tr-bl'
					}
					else {
						_0x9f6cx5 = 'br-tl'
					}
				}
			}
		};
		_0x9f6cx8 = {
			align: _0x9f6cx6['convertPositionSpec'](_0x9f6cx5)
			, axisLock: _0x9f6cx6['axisLock']
			, target: _0x9f6cx3
			, overlap: _0x9f6cx9
			, offset: _0x9f6cx6['targetOffset']
		};
		if (_0x9f6cx6['anchor']) {
			_0x9f6cx8['anchorSize'] = _0x9f6cx6['anchorSize']
		};
		if (_0x9f6cx6['constrainPosition']) {
			_0x9f6cx4 = _0x9f6cx6['constrainTo'] || Ext['getBody']();
			if (!_0x9f6cx4['isRegion']) {
				_0x9f6cx4 = Ext['util']['Region']['getRegion'](_0x9f6cx4)
			};
			if (_0x9f6cx6['constraintInsets']) {
				_0x9f6cx1 = _0x9f6cx6['constraintInsets'];
				if (!Ext['isObject'](_0x9f6cx1)) {
					_0x9f6cx1 = Ext['util']['Format']['parseBox'](_0x9f6cx1)
				};
				_0x9f6cx4 = _0x9f6cx4['copy']()['adjust'](_0x9f6cx1['top'], _0x9f6cx1['right'], _0x9f6cx1['bottom'], _0x9f6cx1['left'])
			};
			_0x9f6cx8['inside'] = _0x9f6cx4
		};
		return _0x9f6cx6['getRegion']()['alignTo'](_0x9f6cx8)
	}
	, onTipBeforeShow: function (_0x9f6cx4) {
		if (!_0x9f6cx4['triggerElement'] || !_0x9f6cx4['triggerElement']['id']) {
			return false
		};
		var _0x9f6cx5 = _0x9f6cx4['getView']();
		var _0x9f6cx6 = Ext['all']('window[modal=true]{isVisible()}');
		var _0x9f6cx2 = Ext['Array']['findBy'](_0x9f6cx6, function (_0x9f6cx8) {
			return _0x9f6cx5 !== _0x9f6cx8 && !_0x9f6cx5['isDescendantOf'](_0x9f6cx8)
		});
		if (_0x9f6cx2) {
			return false
		};
		var _0x9f6cx1 = _0x9f6cx5['resolveEventRecord'](_0x9f6cx4['triggerElement']);
		if (!_0x9f6cx1 || _0x9f6cx5['fireEvent']('beforetooltipshow', _0x9f6cx5, _0x9f6cx1) === false) {
			return false
		};
		var _0x9f6cx7 = _0x9f6cx5['getDataForTooltipTpl'](_0x9f6cx1, _0x9f6cx4['triggerElement'])
			, _0x9f6cx3;
		if (!_0x9f6cx7) {
			return false
		};
		_0x9f6cx3 = _0x9f6cx5['tooltipTpl']['apply'](_0x9f6cx7);
		if (!_0x9f6cx3) {
			return false
		};
		_0x9f6cx4['update'](_0x9f6cx3)
	}
}, function (_0x9f6cx1) {
	var _0x9f6cx5 = 't';

	function _0x9f6cx2(_0x9f6cx6) {
		var _0x9f6cx7 = Ext['util']['Region'];
		if (_0x9f6cx6 && !_0x9f6cx6['isRegion'] && _0x9f6cx6['isComponent']) {
			_0x9f6cx6 = _0x9f6cx6['getConstrainRegion']()
		}
		else {
			if (_0x9f6cx6 && !_0x9f6cx6['isRegion'] && _0x9f6cx6['isElement']) {
				_0x9f6cx6 = _0x9f6cx6['getConstrainRegion']()
			}
			else {
				if (_0x9f6cx6 && !_0x9f6cx6['isRegion'] && Ext['isElement'](_0x9f6cx6)) {
					_0x9f6cx6 = _0x9f6cx7['getRegion'](_0x9f6cx6)
				}
				else {
					if (_0x9f6cx6 && !_0x9f6cx6['isRegion']) {
						_0x9f6cx6 = _0x9f6cx7['from'](_0x9f6cx6)
					}
				}
			}
		};
		return _0x9f6cx6
	}

	function _0x9f6cx3(_0x9f6cx6) {
		var _0x9f6cx7 = Ext['util']['Point'];
		if (_0x9f6cx6 && !_0x9f6cx6['isPoint'] && Ext['isArray'](_0x9f6cx6)) {
			_0x9f6cx6 = new _0x9f6cx7(_0x9f6cx6[0] || 0, _0x9f6cx6[1] || 0)
		}
		else {
			if (_0x9f6cx6 && !_0x9f6cx6['isPoint']) {
				_0x9f6cx6 = _0x9f6cx7['from'](_0x9f6cx6)
			}
		};
		return _0x9f6cx6
	}

	function _0x9f6cx4(_0x9f6cx7, _0x9f6cx6) {
		return (_0x9f6cx7['right'] - _0x9f6cx7['left']) >= (_0x9f6cx6['right'] - _0x9f6cx6['left']) && (_0x9f6cx7['bottom'] - _0x9f6cx7['top']) >= (_0x9f6cx6['bottom'] - _0x9f6cx6['top'])
	}
	Ext['versions']['extjs']['isLessThan']('6.2.0') && Ext['override'](_0x9f6cx1, {
		show: function () {
			var _0x9f6cx6 = this
				, _0x9f6cx7 = _0x9f6cx6['getView']();
			_0x9f6cx6['callParent'](arguments);
			if (_0x9f6cx6['triggerElement'] && _0x9f6cx7['getMode']() === 'horizontal') {
				_0x9f6cx6['alignTipToEvent'](_0x9f6cx6['triggerElement'], _0x9f6cx6['constrainPosition'] && _0x9f6cx6['constrainTo'], _0x9f6cx6['targetXY'])
			}
		}
		, alignTipToEvent: function (_0x9f6cx7, _0x9f6cx19, _0x9f6cx1e) {
			var _0x9f6cx13 = Ext['util']['Region']
				, _0x9f6cxe = Ext['util']['Point']
				, _0x9f6cx8 = Ext['Number']['constrain']
				, _0x9f6cx1a = this
				, _0x9f6cxf = window['tipAnchor'] || _0x9f6cx1a['origAnchor'] || _0x9f6cx5
				, _0x9f6cxa = _0x9f6cx1a['rtl']
				, _0x9f6cx1d, _0x9f6cx14, _0x9f6cx9, _0x9f6cx12, _0x9f6cx1b, _0x9f6cx10, _0x9f6cx1c, _0x9f6cxc, _0x9f6cx6, _0x9f6cx16, _0x9f6cxd, _0x9f6cx18, _0x9f6cx17, _0x9f6cx11, _0x9f6cx15, _0x9f6cxb;
			_0x9f6cx1b = _0x9f6cx2(_0x9f6cx19 || Ext['getBody']());
			_0x9f6cx12 = _0x9f6cx1b['intersect'](_0x9f6cx2(_0x9f6cx7));
			if (_0x9f6cx12) {
				_0x9f6cx1d = _0x9f6cx1a['getWidth'](), _0x9f6cx14 = _0x9f6cx1a['getHeight'](), _0x9f6cx16 = _0x9f6cx1a['anchorEl'] && _0x9f6cx1a['anchorEl']['getSize']() || {
					width: 0
					, height: 0
				};
				_0x9f6cx16['width'] /= 2;
				_0x9f6cx16['height'] /= 2;
				_0x9f6cx1e = _0x9f6cx1e && _0x9f6cx3(_0x9f6cx1e);
				if (!_0x9f6cx1e || !_0x9f6cx12['contains'](_0x9f6cx1e)) {
					_0x9f6cx1e = new _0x9f6cxe((_0x9f6cx12['left'] + _0x9f6cx12['right']) / 2, (_0x9f6cx12['top'] + _0x9f6cx12['bottom']) / 2)
				};
				_0x9f6cx10 = {
					top: new _0x9f6cx13(_0x9f6cx1b['top'], _0x9f6cx1b['right'], _0x9f6cx12['top'], _0x9f6cx1b['left'])
					, bottom: new _0x9f6cx13(_0x9f6cx12['bottom'], _0x9f6cx1b['right'], _0x9f6cx1b['bottom'], _0x9f6cx1b['left'])
					, left: new _0x9f6cx13(_0x9f6cx1b['top'], _0x9f6cx12['left'], _0x9f6cx1b['bottom'], _0x9f6cx1b['left'])
					, right: new _0x9f6cx13(_0x9f6cx1b['top'], _0x9f6cx1b['right'], _0x9f6cx1b['bottom'], _0x9f6cx12['right'])
				};
				_0x9f6cx1c = {
					top: new _0x9f6cx13(_0x9f6cx10['top']['bottom'] - _0x9f6cx14 - _0x9f6cx16['height'], _0x9f6cx1e['x'] + _0x9f6cx1d / 2, _0x9f6cx10['top']['bottom'] - _0x9f6cx16['height'], _0x9f6cx1e['x'] - _0x9f6cx1d / 2)
					, bottom: new _0x9f6cx13(_0x9f6cx10['bottom']['top'] + _0x9f6cx16['height'], _0x9f6cx1e['x'] + _0x9f6cx1d / 2, _0x9f6cx10['bottom']['top'] + _0x9f6cx14 + _0x9f6cx16['height'], _0x9f6cx1e['x'] - _0x9f6cx1d / 2)
					, left: new _0x9f6cx13(_0x9f6cx1e['y'] - _0x9f6cx14 / 2, _0x9f6cx10['left']['right'] - _0x9f6cx16['width'], _0x9f6cx1e['y'] + _0x9f6cx14 / 2, _0x9f6cx10['left']['right'] - _0x9f6cx1d - _0x9f6cx16['width'])
					, right: new _0x9f6cx13(_0x9f6cx1e['y'] - _0x9f6cx14 / 2, _0x9f6cx10['right']['left'] + _0x9f6cx1d + _0x9f6cx16['width'], _0x9f6cx1e['y'] - _0x9f6cx14 / 2, _0x9f6cx10['right']['left'] + _0x9f6cx16['width'])
				};
				_0x9f6cxc = {
					top: new _0x9f6cx13(_0x9f6cx10['top']['bottom'] - _0x9f6cx14 - _0x9f6cx16['height'], _0x9f6cx1e['x'] + _0x9f6cx1d / 2, _0x9f6cx10['top']['bottom'], _0x9f6cx1e['x'] - _0x9f6cx1d / 2)
					, bottom: new _0x9f6cx13(_0x9f6cx10['bottom']['top'], _0x9f6cx1e['x'] + _0x9f6cx1d / 2, _0x9f6cx10['bottom']['top'] + _0x9f6cx14 + _0x9f6cx16['height'], _0x9f6cx1e['x'] - _0x9f6cx1d / 2)
					, left: new _0x9f6cx13(_0x9f6cx1e['y'] - _0x9f6cx14 / 2, _0x9f6cx10['left']['right'], _0x9f6cx1e['y'] + _0x9f6cx14 / 2, _0x9f6cx10['left']['right'] - _0x9f6cx1d - _0x9f6cx16['width'])
					, right: new _0x9f6cx13(_0x9f6cx1e['y'] - _0x9f6cx14 / 2, _0x9f6cx10['right']['left'] + _0x9f6cx1d + _0x9f6cx16['width'], _0x9f6cx1e['y'] - _0x9f6cx14 / 2, _0x9f6cx10['right']['left'])
				};
				switch (_0x9f6cxf['charAt'](0)) {
				case 't':
					_0x9f6cx6 = ['top', 'bottom', _0x9f6cxa ? 'right' : 'left', _0x9f6cxa ? 'left' : 'right'];
					break;
				case 'r':
					_0x9f6cx6 = ['right', 'left', 'top', 'bottom'];
					break;
				case 'b':
					_0x9f6cx6 = ['bottom', 'top', _0x9f6cxa ? 'right' : 'left', _0x9f6cxa ? 'left' : 'right'];
					break;
				case 'l':
					_0x9f6cx6 = ['left', 'right', 'top', 'bottom'];
					break;
				default:
					Ext['Error']['raise']('Unknown anchor')
				};
				_0x9f6cxd = Ext['Array']['findBy'](_0x9f6cx6, function (_0x9f6cx20) {
					var _0x9f6cx21 = _0x9f6cx10[_0x9f6cx20]
						, _0x9f6cx1f = _0x9f6cxc[_0x9f6cx20];
					return _0x9f6cx4(_0x9f6cx21, _0x9f6cx1f)
				});
				if (_0x9f6cxd) {
					_0x9f6cx18 = _0x9f6cx10[_0x9f6cxd];
					_0x9f6cx17 = _0x9f6cxc[_0x9f6cxd];
					_0x9f6cx11 = _0x9f6cx1c[_0x9f6cxd];
					if (_0x9f6cx18['contains'](_0x9f6cx17)) {
						_0x9f6cx9 = 0;
						_0x9f6cxb = [_0x9f6cx11['x'], _0x9f6cx11['y']]
					}
					else {
						_0x9f6cx15 = _0x9f6cx1a['getConstrainVector'](_0x9f6cx17);
						_0x9f6cxb = _0x9f6cx1a['getXY']();
						_0x9f6cxb = [_0x9f6cxb[0] + _0x9f6cx15[0], _0x9f6cxb[1] + _0x9f6cx15[1]];
						_0x9f6cx1a['setXY'](_0x9f6cxb);
						_0x9f6cx15 = _0x9f6cx1a['getConstrainVector'](_0x9f6cx18);
						if (_0x9f6cxd == 'left' || _0x9f6cxd == 'right') {
							_0x9f6cx9 = -_0x9f6cx15[1]
						}
						else {
							if (_0x9f6cxd == 'top' || _0x9f6cxd == 'bottom') {
								_0x9f6cx9 = -_0x9f6cx15[0]
							}
						};
						_0x9f6cxb = [_0x9f6cxb[0] + _0x9f6cx15[0], _0x9f6cxb[1] + _0x9f6cx15[1]]
					};
					switch (_0x9f6cxd) {
					case 'top':
						_0x9f6cx1a['tipAnchor'] = 'bottom';
						_0x9f6cx1a['anchorOffset'] = _0x9f6cx8(_0x9f6cx1d / 2 - 20 + _0x9f6cx9, 0, _0x9f6cx1d - 40);
						break;
					case 'right':
						_0x9f6cx1a['tipAnchor'] = 'left';
						_0x9f6cx1a['anchorOffset'] = _0x9f6cx8(_0x9f6cx14 / 2 - 12 + _0x9f6cx9, 0, _0x9f6cx14 - 24);
						break;
					case 'bottom':
						_0x9f6cx1a['tipAnchor'] = 'top';
						_0x9f6cx1a['anchorOffset'] = _0x9f6cx8(_0x9f6cx1d / 2 - 20 + _0x9f6cx9, 0, _0x9f6cx1d - 40);
						break;
					case 'left':
						_0x9f6cx1a['tipAnchor'] = 'right';
						_0x9f6cx1a['anchorOffset'] = _0x9f6cx8(_0x9f6cx14 / 2 - 12 + _0x9f6cx9, 0, _0x9f6cx14 - 24);
						break
					};
					_0x9f6cx1a['anchorEl']['removeCls'](Ext['Array']['map'](_0x9f6cx6, function (_0x9f6cx1f) {
						return Ext['baseCSSPrefix'] + 'tip-anchor-' + _0x9f6cx1f
					}));
					_0x9f6cx1a['anchorEl']['addCls'](Ext['baseCSSPrefix'] + 'tip-anchor-' + _0x9f6cx1a['tipAnchor']);
					_0x9f6cx1a['syncAnchor']();
					_0x9f6cx1a['setXY'](_0x9f6cxb)
				}
				else {}
			}
		}
	})
});
Ext.define('Ext.ux.Scheduler.mixin.TimelineView', {
	extend: 'Ext.ux.Scheduler.mixin.AbstractTimelineView'
	, requires: ['Ext.tip.ToolTip', 'Ext.ux.Scheduler.patches.NavigationModel6_0_2', 'Ext.ux.Scheduler.patches.TouchScroll', 'Ext.ux.Scheduler.patches.View', 'Ext.ux.Scheduler.patches.Scroller', 'Ext.ux.Scheduler.patches.Scroller_6_5', 'Ext.ux.Scheduler.patches.Queue', 'Ext.ux.Scheduler.patches.LayoutContext', 'Ext.ux.Scheduler.patches.LayoutContext_6_5', 'Ext.ux.Scheduler.patches.TableLayout', 'Ext.ux.Scheduler.patches.ColumnLayout', 'Ext.ux.Scheduler.patches.ToolTip', 'Ext.ux.Scheduler.patches.AbstractView', 'Ext.ux.Scheduler.patches.TableScroller', 'Ext.ux.Scheduler.patches.TableScroller2', 'Ext.ux.Scheduler.patches.Ie9FormFieldText', 'Ext.ux.Scheduler.tooltip.EventTip']
	, tip: null
	, overScheduledEventClass: 'sch-event-hover'
	, ScheduleBarEvents: ['mousedown', 'mouseup', 'click', 'dblclick', 'longpress', 'contextmenu']
	, ResourceRowEvents: ['keydown', 'keyup']
	, preventOverCls: false
	, hoveredEventNode: null
	, _initializeTimelineView: function () {
		this['callParent'](arguments);
		this['on']('destroy', this._onDestroy, this);
		this['on']('afterrender', this._onAfterRender, this);
		this['setMode'](this['mode']);
		this['enableBubble']('columnwidthchange');
		this['addCls']('sch-timelineview');
		if (this['readOnly']) {
			this['addCls'](this['_cmpCls'] + '-readonly')
		};
		this['addCls'](this._cmpCls);
		if (this['eventAnimations']) {
			this['addCls']('sch-animations-enabled')
		}
	}
	, handleScheduleBarEvent: function (_0x9f6cx2, _0x9f6cx1) {
		this['fireEvent'](this['scheduledEventName'] + _0x9f6cx2['type'], this, this['resolveEventRecord'](_0x9f6cx1), _0x9f6cx2)
	}
	, handleResourceRowEvent: function (_0x9f6cx1, _0x9f6cx2) {
		this['fireEvent'](this['scheduledEventName'] + _0x9f6cx1['type'], this, this['resolveEventRecordFromResourceRow'](_0x9f6cx2), _0x9f6cx1)
	}
	, _onDestroy: function () {
		if (this['tip']) {
			this['tip']['destroy']()
		}
	}
	, _onAfterRender: function () {
		if (this['overScheduledEventClass']) {
			this['setMouseOverEnabled'](true)
		};
		if (this['tooltipTpl']) {
			if (typeof this['tooltipTpl'] === 'string') {
				this['tooltipTpl'] = new Ext.XTemplate(this['tooltipTpl'])
			};
			this['el']['on']('mousemove', this['setupTooltip'], this, {
				single: true
			})
		};
		var _0x9f6cx5 = this['bufferedRenderer'];
		if (_0x9f6cx5) {
			this['patchBufferedRenderingPlugin'](_0x9f6cx5);
			this['patchBufferedRenderingPlugin'](this['lockingPartner']['bufferedRenderer'])
		};
		this['setupTimeCellEvents']();
		var _0x9f6cx2 = {
			delegate: this['eventSelector']
			, scope: this
		};
		var _0x9f6cx1 = {
			delegate: this['rowSelector']
			, scope: this
		};
		Ext['Array']['each'](this.ScheduleBarEvents, function (_0x9f6cx3) {
			_0x9f6cx2[_0x9f6cx3] = this['handleScheduleBarEvent']
		}, this);
		Ext['Array']['each'](this.ResourceRowEvents, function (_0x9f6cx3) {
			_0x9f6cx1[_0x9f6cx3] = this['handleResourceRowEvent']
		}, this);
		this['el']['on'](_0x9f6cx2);
		this['el']['on'](_0x9f6cx1)
	}
	, patchBufferedRenderingPlugin: function (_0x9f6cx5) {
		var _0x9f6cx2 = this;
		var _0x9f6cx1 = _0x9f6cx5['setBodyTop'];
		_0x9f6cx5['setBodyTop'] = function (_0x9f6cx3, _0x9f6cx4) {
			var _0x9f6cx7 = _0x9f6cx1['apply'](this, arguments);
			_0x9f6cx2['fireEvent']('bufferedrefresh', this);
			return _0x9f6cx7
		}
	}
	, setMouseOverEnabled: function (_0x9f6cx1) {
		this[_0x9f6cx1 ? 'mon' : 'mun'](this['el'], {
			mouseover: this['onEventMouseOver']
			, mouseout: this['onEventMouseOut']
			, delegate: this['eventSelector']
			, scope: this
		});
		if (!_0x9f6cx1) {
			this['getEl']()['select']('.' + this['overScheduledEventClass'])['removeCls'](this['overScheduledEventClass'])
		}
	}
	, onEventMouseOver: function (_0x9f6cx5, _0x9f6cx1) {
		if (_0x9f6cx1 !== this['hoveredEventNode'] && !this['preventOverCls']) {
			this['hoveredEventNode'] = _0x9f6cx1;
			Ext['fly'](_0x9f6cx1)['addCls'](this['overScheduledEventClass']);
			var _0x9f6cx2 = this['resolveEventRecord'](_0x9f6cx1);
			if (_0x9f6cx2) {
				this['fireEvent']('eventmouseenter', this, _0x9f6cx2, _0x9f6cx5)
			}
		}
	}
	, onEventMouseOut: function (_0x9f6cx2, _0x9f6cx1) {
		if (this['hoveredEventNode']) {
			if (!_0x9f6cx2['within'](this['hoveredEventNode'], true, true)) {
				Ext['fly'](this['hoveredEventNode'])['removeCls'](this['overScheduledEventClass']);
				this['fireEvent']('eventmouseleave', this, this['resolveEventRecord'](this['hoveredEventNode']), _0x9f6cx2);
				this['hoveredEventNode'] = null
			}
		}
	}
	, highlightItem: function (_0x9f6cx2) {
		if (_0x9f6cx2) {
			var _0x9f6cx1 = this;
			_0x9f6cx1['clearHighlight']();
			_0x9f6cx1['highlightedItem'] = _0x9f6cx2;
			Ext['fly'](_0x9f6cx2)['addCls'](_0x9f6cx1['overItemCls'])
		}
	}
	, setupTooltip: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['getEl']();
		_0x9f6cx1['tip'] = new Ext.ux.Scheduler['tooltip'].EventTip(Ext['apply']({
			view: _0x9f6cx1
			, delegate: _0x9f6cx1['eventSelector']
			, target: _0x9f6cx2
			, constrainTo: _0x9f6cx1['grid']['getEl']()
			, rtl: _0x9f6cx1['rtl']
		}, _0x9f6cx1['tipCfg']));
		if (Ext['supports']['Touch']) {
			_0x9f6cx1['el']['un']({
				touchmove: _0x9f6cx1['setupTooltip']
				, mousemove: _0x9f6cx1['setupTooltip']
				, scope: _0x9f6cx1
			})
		}
	}
	, getHorizontalTimeAxisColumn: function () {
		if (!this['timeAxisColumn']) {
			this['timeAxisColumn'] = this['headerCt']['down']('timeaxiscolumn');
			if (this['timeAxisColumn']) {
				this['timeAxisColumn']['on']('destroy', function () {
					this['timeAxisColumn'] = null
				}, this)
			}
		};
		return this['timeAxisColumn']
	}
	, getDataForTooltipTpl: function (_0x9f6cx1, _0x9f6cx2) {
		return Ext['apply']({
			_record: _0x9f6cx1
		}, _0x9f6cx1['data'])
	}
	, refreshKeepingScroll: function () {
		Ext['suspendLayouts']();
		this['blockRestoringInfiniteScrollDate']();
		this['refreshView']();
		Ext['resumeLayouts'](true);
		this['resumeRestoringInfiniteScrollDate']()
	}
	, setupTimeCellEvents: function () {
		this['mon'](this['el'], {
			click: this['handleScheduleEvent']
			, dblclick: this['handleScheduleEvent']
			, contextmenu: this['handleScheduleEvent']
			, pinch: this['handleScheduleEvent']
			, pinchstart: this['handleScheduleEvent']
			, pinchend: this['handleScheduleEvent']
			, scope: this
		})
	}
	, getTableRegion: function () {
		var _0x9f6cx1 = this['el']['down']('.' + Ext['baseCSSPrefix'] + 'grid-item-container');
		return (_0x9f6cx1 || this['el'])['getRegion']()
	}
	, getRowNode: function (_0x9f6cx1) {
		return this['getNodeByRecord'](_0x9f6cx1)
	}
	, findRowByChild: function (_0x9f6cx1) {
		return this['findItemByChild'](_0x9f6cx1)
	}
	, getRecordForRowNode: function (_0x9f6cx1) {
		return this['getRecord'](_0x9f6cx1)
	}
	, refreshKeepingResourceScroll: function () {
		var _0x9f6cx1 = this['getScroll']();
		this['refreshView']();
		if (this['isHorizontal']()) {
			this['scrollVerticallyTo'](_0x9f6cx1['top'])
		}
		else {
			this['scrollHorizontallyTo'](_0x9f6cx1['left'])
		}
	}
	, scrollHorizontallyTo: function (_0x9f6cx1, _0x9f6cx2) {
		if (this['rendered']) {
			this['scrollTo'](_0x9f6cx1, null, _0x9f6cx2)
		}
	}
	, scrollVerticallyTo: function (_0x9f6cx2, _0x9f6cx1) {
		if (this['rendered']) {
			this['scrollTo'](null, _0x9f6cx2, _0x9f6cx1)
		}
	}
	, getVerticalScroll: function () {
		return this['getScrollY']()
	}
	, getHorizontalScroll: function () {
		return this['getScrollX']()
	}
	, getScroll: function () {
		var _0x9f6cx1 = this;
		return {
			top: _0x9f6cx1['getVerticalScroll']()
			, left: _0x9f6cx1['getHorizontalScroll']()
		}
	}
	, handleScheduleEvent: function () {}
	, disableViewScroller: function (_0x9f6cx5) {
		var _0x9f6cx1 = this['getScrollable']();
		if (_0x9f6cx1) {
			if (_0x9f6cx1['setDisabled']) {
				_0x9f6cx1['setDisabled'](_0x9f6cx5)
			}
			else {
				var _0x9f6cx2 = this['up']('timelinetree,timelinegrid')['getScrollable']();
				_0x9f6cx1['setConfig']({
					x: !_0x9f6cx5
					, y: !_0x9f6cx5
				});
				_0x9f6cx2['setConfig']({
					x: !_0x9f6cx5
					, y: !_0x9f6cx5
				})
			}
		}
	}
	, shouldAdjustForRtl: function () {
		return this['rtl'] && !Ext['rootInheritedState']['rtl']
	}
	, getHorizontalPositionSide: function () {
		return this['rtl'] ? 'right' : 'left'
	}
	, getViewContainerElementTop: function () {
		var _0x9f6cx1;
		if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
			_0x9f6cx1 = this['up']('timelinegrid,timelinetree')['getView']()['el']
		}
		else {
			_0x9f6cx1 = this['getEl']()
		};
		return _0x9f6cx1['getY']()
	}
	, getViewContainerHeight: function () {
		if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
			return this['up']('timelinegrid,timelinetree')['getView']()['el']['getHeight']()
		};
		return this['getHeight']()
	}
	, getScrollableMaxPosition: function () {
		return {
			x: this['getScrollable']()['getMaxPosition']()['x']
			, y: this['getVerticalScrollableMaxHeight']()
		}
	}
	, getVerticalScrollableMaxHeight: function () {
		var _0x9f6cx1;
		if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
			_0x9f6cx1 = this['up']('timelinegrid,timelinetree')['getScrollable']()
		}
		else {
			_0x9f6cx1 = this['getScrollable']()
		};
		return _0x9f6cx1['getMaxPosition']()['y']
	}
	, getScrollableContainerRegion: function () {
		var _0x9f6cx1 = this['getEl']()['getRegion']();
		if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
			_0x9f6cx1['top'] = this['up']('timelinegrid, timelinetree')['getScrollable']()['getElement']()['getY']()
		};
		return new Ext['util'].Region(_0x9f6cx1['top'], _0x9f6cx1['right'], _0x9f6cx1['top'] + this['getViewContainerHeight'](), _0x9f6cx1['left'])
	}
	, scrollHorizontallyBy: function (_0x9f6cx1, _0x9f6cx2) {
		this['scrollBy'](_0x9f6cx1, 0, _0x9f6cx2)
	}
	, scrollVerticallyBy: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5;
		if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
			_0x9f6cx5 = this['up']('timelinegrid, timelinetree')['getScrollable']()
		}
		else {
			_0x9f6cx5 = this['getScrollable']()
		};
		_0x9f6cx5['scrollBy'](0, _0x9f6cx1, _0x9f6cx2)
	}
	, scrollElementIntoView: function (_0x9f6cx5, _0x9f6cx4, _0x9f6cx1, _0x9f6cx7, _0x9f6cxa, _0x9f6cxf, _0x9f6cx12) {
		var _0x9f6cx9 = this
			, _0x9f6cx6 = _0x9f6cx5['dom']
			, _0x9f6cxb = _0x9f6cx9['getScroll']()
			, _0x9f6cxd = _0x9f6cxb['left']
			, _0x9f6cxe = _0x9f6cxb['top']
			, _0x9f6cx8 = _0x9f6cx9['getScrollIntoViewXY'](_0x9f6cx5, _0x9f6cxd, _0x9f6cxe, _0x9f6cxa)
			, _0x9f6cx3 = _0x9f6cx8['x']
			, _0x9f6cx2 = _0x9f6cx8['y']
			, _0x9f6cx13, _0x9f6cxc;
		_0x9f6cx13 = _0x9f6cx4 !== false ? _0x9f6cx3 : _0x9f6cxd;
		_0x9f6cxc = _0x9f6cx2;
		if (_0x9f6cx13 !== _0x9f6cxd || _0x9f6cxc !== _0x9f6cxe) {
			_0x9f6cx9['on']({
				scrollend: {
					fn: function () {
						_0x9f6cx7 && _0x9f6cx5['highlight']();
						_0x9f6cxf && _0x9f6cxf['call'](_0x9f6cx12)
					}
					, scope: _0x9f6cx9
					, single: true
				}
			});
			_0x9f6cx9['scrollTo'](_0x9f6cx13, _0x9f6cxc, _0x9f6cx1)
		}
		else {
			_0x9f6cxf && _0x9f6cxf['call'](_0x9f6cx12)
		};
		return _0x9f6cx9
	}
	, getScrollIntoViewXY: function (_0x9f6cx2, _0x9f6cxe, _0x9f6cxb, _0x9f6cx1) {
		_0x9f6cx1 = Ext['isEmpty'](_0x9f6cx1) ? 20 : _0x9f6cx1;
		var _0x9f6cx14 = this
			, _0x9f6cx3 = Ext['getVersion']()['isGreaterThan']('6.2.0') ? Ext['getDom'](_0x9f6cx14['ownerCt']['getEl']()) : Ext['getDom'](_0x9f6cx14['getEl']())
			, _0x9f6cxf = _0x9f6cx2['dom']
			, _0x9f6cx4 = _0x9f6cx2['getOffsetsTo'](_0x9f6cx3)
			, _0x9f6cx13 = _0x9f6cxf['offsetWidth']
			, _0x9f6cx9 = _0x9f6cxf['offsetHeight']
			, _0x9f6cx5 = _0x9f6cx4[0] + _0x9f6cxe
			, _0x9f6cx8 = _0x9f6cx4[1] + _0x9f6cxb
			, _0x9f6cx6 = _0x9f6cx8 + _0x9f6cx9
			, _0x9f6cx11 = _0x9f6cx5 + _0x9f6cx13
			, _0x9f6cxc = _0x9f6cx3['clientHeight']
			, _0x9f6cxd = _0x9f6cx3['clientWidth']
			, _0x9f6cx12 = _0x9f6cxe
			, _0x9f6cxa = _0x9f6cxb
			, _0x9f6cx7 = _0x9f6cxa + _0x9f6cxc
			, _0x9f6cx10 = _0x9f6cx12 + _0x9f6cxd;
		if (_0x9f6cx9 > _0x9f6cxc || _0x9f6cx8 < _0x9f6cxa) {
			_0x9f6cxb = _0x9f6cx8 - _0x9f6cx1
		}
		else {
			if (_0x9f6cx6 > _0x9f6cx7) {
				_0x9f6cxb = _0x9f6cx6 - _0x9f6cxc + _0x9f6cx1
			}
		};
		if (_0x9f6cx13 > _0x9f6cxd || _0x9f6cx5 < _0x9f6cx12) {
			_0x9f6cxe = _0x9f6cx5 - _0x9f6cx1
		}
		else {
			if (_0x9f6cx11 > _0x9f6cx10) {
				_0x9f6cxe = _0x9f6cx11 - _0x9f6cxd + _0x9f6cx1
			}
		};
		return {
			x: _0x9f6cxe
			, y: _0x9f6cxb
		}
	}
});
Ext.define('Ext.ux.Scheduler.view.TimelineGridView', {
	extend: 'Ext.grid.View'
	, mixins: ['Ext.ux.Scheduler.mixin.TimelineView']
	, infiniteScroll: false
	, bufferCoef: 5
	, bufferThreshold: 0.2
	, cachedScrollDate: null
	, boxIsReady: false
	, ignoreNextHorizontalScroll: false
	, constructor: function (_0x9f6cx1) {
		this['callParent'](arguments);
		if (this['infiniteScroll']) {
			this['on']('boxready', this['setupInfiniteScroll'], this)
		};
		if (this['timeAxisViewModel']) {
			this['relayEvents'](this['timeAxisViewModel'], ['columnwidthchange'])
		}
	}
	, setupInfiniteScroll: function () {
		var _0x9f6cx3 = this['panel']['ownerCt'];
		this['cachedScrollDate'] = _0x9f6cx3['startDate'] || this['timeAxis']['getStart']();
		if (Ext['getVersion']()['isLessThan']('6.0.1') && Ext['supports']['Touch'] && Ext['os']['is']['Windows']) {
			var _0x9f6cx1 = this['panel']['headerCt']['getScrollable']();
			var _0x9f6cx2 = this['getScrollable']();
			_0x9f6cx1['onIdle'] && Ext['GlobalEvents']['un']('idle', _0x9f6cx1['onIdle'], _0x9f6cx1);
			_0x9f6cx2['onIdle'] && Ext['GlobalEvents']['un']('idle', _0x9f6cx2['onIdle'], _0x9f6cx2)
		};
		var _0x9f6cx5 = this;
		_0x9f6cx3['calculateOptimalDateRange'] = function (_0x9f6cx7, _0x9f6cx4, _0x9f6cx9, _0x9f6cx6) {
			if (_0x9f6cx6) {
				return _0x9f6cx6
			};
			var _0x9f6cx8 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0x9f6cx9['preset']);
			return _0x9f6cx5['calculateInfiniteScrollingDateRange'](_0x9f6cx7, _0x9f6cx8['getBottomHeader']()['unit'], _0x9f6cx9['increment'], _0x9f6cx9['width'], true)
		};
		this['bindInfiniteScrollListeners']()
	}
	, bindInfiniteScrollListeners: function () {
		this['getScrollable']()['on']('scroll', this['onHorizontalScroll'], this)
	}
	, unbindInfiniteScrollListeners: function () {
		this['getScrollable']()['un']('scroll', this['onHorizontalScroll'], this);
		this['infiniteScroll'] = false
	}
	, onHorizontalScroll: function (_0x9f6cx7, _0x9f6cx8, _0x9f6cx6) {
		if (this['ignoreNextHorizontalScroll'] || this['cachedScrollDate']) {
			this['ignoreNextHorizontalScroll'] = false;
			return
		};
		var _0x9f6cx4 = Ext['getScrollbarSize']()
			, _0x9f6cx3 = this['getWidth']()
			, _0x9f6cx2 = _0x9f6cx3 * this['bufferThreshold'] * this['bufferCoef']
			, _0x9f6cx5 = this['getScrollable']()['getMaxPosition']()['x'];
		_0x9f6cx5 -= _0x9f6cx4['width'];
		if ((_0x9f6cx5 - _0x9f6cx8 < _0x9f6cx2) || _0x9f6cx8 < _0x9f6cx2) {
			this['shiftToDate'](this['getDateFromCoordinate'](_0x9f6cx8, null, true));
			if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
				var _0x9f6cx1 = this['getScrollable']()['_translatable'] || this['getScrollable']()['translatable'];
				_0x9f6cx1 && _0x9f6cx1['stopAnimation']()
			}
			else {
				this['el']['stopAnimation']()
			}
		}
	}
	, refresh: function () {
		this['callParent'](arguments);
		if (this['infiniteScroll'] && !this['scrollStateSaved'] && this['boxIsReady']) {
			this['restoreScrollToCachedDate']()
		}
	}
	, onResize: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx2, _0x9f6cx3) {
		this['boxIsReady'] = true;
		this['callParent'](arguments);
		if (this['infiniteScroll'] && _0x9f6cx5 > 0 && _0x9f6cx5 !== _0x9f6cx2) {
			this['shiftToDate'](this['cachedScrollDate'] || this['getVisibleDateRange']()['startDate'], this['cachedScrollDateIsCentered'])
		}
	}
	, restoreScrollToCachedDate: function () {
		if (this['cachedScrollDate'] && this['boxIsReady']) {
			this['ignoreNextHorizontalScroll'] = true;
			this['scrollToDate'](this['cachedScrollDate']);
			this['cachedScrollDate'] = null
		}
	}
	, scrollToDate: function (_0x9f6cx1) {
		this['cachedScrollDate'] = _0x9f6cx1;
		if (this['cachedScrollDateIsCentered']) {
			this['panel']['ownerCt']['scrollToDateCentered'](_0x9f6cx1)
		}
		else {
			this['panel']['ownerCt']['scrollToDate'](_0x9f6cx1)
		};
		var _0x9f6cx2 = this['getScrollX']();
		this['panel']['scrollLeftPos'] = _0x9f6cx2;
		this['headerCt']['setScrollX'](_0x9f6cx2);
		if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
			this['up']('timelinegrid,timelinetree')['lastScrollPos']['x'] = _0x9f6cx2
		}
	}
	, blockRestoringInfiniteScrollDate: function () {
		this['scrollStateSaved'] = this['boxIsReady']
	}
	, resumeRestoringInfiniteScrollDate: function () {
		this['scrollStateSaved'] = false;
		if (this['infiniteScroll'] && this['cachedScrollDate']) {
			this['restoreScrollToCachedDate']()
		}
	}
	, calculateInfiniteScrollingDateRange: function (_0x9f6cx5, _0x9f6cx9, _0x9f6cxc, _0x9f6cx8, _0x9f6cx6) {
		var _0x9f6cx7 = this['timeAxis']
			, _0x9f6cx4 = this['getWidth']()
			, _0x9f6cxa;
		_0x9f6cx8 = _0x9f6cx8 || this['timeAxisViewModel']['getTickWidth']();
		_0x9f6cxc = _0x9f6cxc || _0x9f6cx7['increment'] || 1;
		_0x9f6cx9 = _0x9f6cx9 || _0x9f6cx7['unit'];
		var _0x9f6cx1 = Ext.ux.Scheduler['util']['Date'];
		var _0x9f6cx3 = Math['ceil'](_0x9f6cx4 * this['bufferCoef'] / _0x9f6cx8);
		if (_0x9f6cx6) {
			var _0x9f6cx2 = Math['ceil']((_0x9f6cx4 * (1 + this['bufferCoef'])) / (2 * _0x9f6cx8)) * _0x9f6cxc;
			_0x9f6cxa = {
				start: _0x9f6cx7['floorDate'](_0x9f6cx1['add'](_0x9f6cx5, _0x9f6cx9, -_0x9f6cx2), false, _0x9f6cx9, _0x9f6cxc)
				, end: _0x9f6cx7['ceilDate'](_0x9f6cx1['add'](_0x9f6cx5, _0x9f6cx9, _0x9f6cx2), false, _0x9f6cx9, _0x9f6cxc)
			}
		}
		else {
			_0x9f6cxa = {
				start: _0x9f6cx7['floorDate'](_0x9f6cx1['add'](_0x9f6cx5, _0x9f6cx9, -_0x9f6cx3 * _0x9f6cxc), false, _0x9f6cx9, _0x9f6cxc)
				, end: _0x9f6cx7['ceilDate'](_0x9f6cx1['add'](_0x9f6cx5, _0x9f6cx9, Math['ceil']((_0x9f6cx4 / _0x9f6cx8 + _0x9f6cx3) * _0x9f6cxc)), false, _0x9f6cx9, _0x9f6cxc)
			}
		};
		return _0x9f6cxa
	}
	, shiftToDate: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = this['calculateInfiniteScrollingDateRange'](_0x9f6cx5, null, null, null, _0x9f6cx1);
		this['cachedScrollDate'] = _0x9f6cx5;
		this['cachedScrollDateIsCentered'] = _0x9f6cx1;
		this['timeAxis']['setTimeSpan'](_0x9f6cx2['start'], _0x9f6cx2['end'])
	}
	, destroy: function () {
		if (this['infiniteScroll'] && this['rendered']) {
			this['unbindInfiniteScrollListeners']()
		};
		this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Scheduler.patches.DragDropManager', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, requires: ['Ext.dd.ScrollManager']
	, target: 'Ext.dd.DragDropManager'
	, minVersion: '6.0.0'
	, applyFn: function () {
		Ext['override'](Ext['dd'].DragDropManager, {
			fireEvents: function (_0x9f6cx1e, _0x9f6cxf) {
				var _0x9f6cx1d = this
					, _0x9f6cx12 = Ext['supports']['Touch']
					, _0x9f6cxa = _0x9f6cx1d['dragCurrent']
					, _0x9f6cx18 = _0x9f6cx1d['currentPoint']
					, _0x9f6cx14 = _0x9f6cx18['x']
					, _0x9f6cx10 = _0x9f6cx18['y']
					, _0x9f6cx11 = []
					, _0x9f6cx13 = []
					, _0x9f6cxe = []
					, _0x9f6cx3 = []
					, _0x9f6cx1c = []
					, _0x9f6cx1b = []
					, _0x9f6cx5 = _0x9f6cx12 ? document['documentElement']['clientWidth'] / window['innerWidth'] : 1
					, _0x9f6cx8, _0x9f6cxc, _0x9f6cxd, _0x9f6cx7, _0x9f6cx16, _0x9f6cx15, _0x9f6cx17, _0x9f6cxb;
				if (!_0x9f6cxa || _0x9f6cxa['isLocked']()) {
					return
				};
				_0x9f6cxb = !(_0x9f6cxa['deltaX'] < 0 || _0x9f6cxa['deltaY'] < 0);
				if (_0x9f6cx12 || (!_0x9f6cx1d['notifyOccluded'] && (!Ext['supports']['CSSPointerEvents'] || Ext['isIE10m'] || Ext['isOpera']) && _0x9f6cxb)) {
					_0x9f6cx8 = _0x9f6cxa['getDragEl']();
					if (_0x9f6cxb) {
						_0x9f6cx8['style']['visibility'] = 'hidden'
					};
					var _0x9f6cx6 = Ext['getBody']()['getScroll']();
					_0x9f6cx1e['target'] = document['elementFromPoint'](_0x9f6cx14 - _0x9f6cx6['left'] / _0x9f6cx5, _0x9f6cx10 - _0x9f6cx6['top'] / _0x9f6cx5);
					if (_0x9f6cxb) {
						_0x9f6cx8['style']['visibility'] = 'visible'
					}
				};
				for (_0x9f6cx16 in _0x9f6cx1d['dragOvers']) {
					_0x9f6cxc = _0x9f6cx1d['dragOvers'][_0x9f6cx16];
					delete _0x9f6cx1d['dragOvers'][_0x9f6cx16];
					if (!_0x9f6cx1d['isTypeOfDD'](_0x9f6cxc) || _0x9f6cxc['destroyed']) {
						continue
					};
					if (_0x9f6cx1d['notifyOccluded']) {
						if (!this['isOverTarget'](_0x9f6cx18, _0x9f6cxc, _0x9f6cx1d['mode'])) {
							_0x9f6cxe['push'](_0x9f6cxc)
						}
					}
					else {
						if (!_0x9f6cx1e['within'](_0x9f6cxc['getEl']())) {
							_0x9f6cxe['push'](_0x9f6cxc)
						}
					};
					_0x9f6cx13[_0x9f6cx16] = true
				};
				for (_0x9f6cx17 in _0x9f6cxa['groups']) {
					if ('string' !== typeof _0x9f6cx17) {
						continue
					};
					for (_0x9f6cx16 in _0x9f6cx1d['ids'][_0x9f6cx17]) {
						_0x9f6cxc = _0x9f6cx1d['ids'][_0x9f6cx17][_0x9f6cx16];
						if (_0x9f6cx1d['isTypeOfDD'](_0x9f6cxc) && (_0x9f6cxd = _0x9f6cxc['getEl']()) && (_0x9f6cxc['isTarget']) && (!_0x9f6cxc['isLocked']()) && (Ext['fly'](_0x9f6cxd)['isVisible'](true)) && ((_0x9f6cxc !== _0x9f6cxa) || (_0x9f6cxa['ignoreSelf'] === false))) {
							if (_0x9f6cx1d['notifyOccluded']) {
								if ((_0x9f6cxc['zIndex'] = _0x9f6cx1d['getZIndex'](_0x9f6cxd)) !== -1) {
									_0x9f6cx7 = true
								};
								_0x9f6cx11['push'](_0x9f6cxc)
							}
							else {
								if (_0x9f6cx1e['within'](_0x9f6cxc['getEl']())) {
									_0x9f6cx11['push'](_0x9f6cxc);
									break
								}
							}
						}
					}
				};
				if (_0x9f6cx7) {
					Ext['Array']['sort'](_0x9f6cx11, _0x9f6cx1d['byZIndex'])
				};
				for (_0x9f6cx16 = 0, _0x9f6cx15 = _0x9f6cx11['length']; _0x9f6cx16 < _0x9f6cx15; _0x9f6cx16++) {
					_0x9f6cxc = _0x9f6cx11[_0x9f6cx16];
					if (_0x9f6cx1d['isOverTarget'](_0x9f6cx18, _0x9f6cxc, _0x9f6cx1d['mode'])) {
						if (_0x9f6cxf) {
							_0x9f6cx1c['push'](_0x9f6cxc)
						}
						else {
							if (!_0x9f6cx13[_0x9f6cxc['id']]) {
								_0x9f6cx1b['push'](_0x9f6cxc)
							}
							else {
								_0x9f6cx3['push'](_0x9f6cxc)
							};
							_0x9f6cx1d['dragOvers'][_0x9f6cxc['id']] = _0x9f6cxc
						};
						if (!_0x9f6cx1d['notifyOccluded']) {
							break
						}
					}
				};
				if (_0x9f6cx1d['mode']) {
					if (_0x9f6cxe['length']) {
						_0x9f6cxa['b4DragOut'](_0x9f6cx1e, _0x9f6cxe);
						_0x9f6cxa['onDragOut'](_0x9f6cx1e, _0x9f6cxe)
					};
					if (_0x9f6cx1b['length']) {
						_0x9f6cxa['onDragEnter'](_0x9f6cx1e, _0x9f6cx1b)
					};
					if (_0x9f6cx3['length']) {
						_0x9f6cxa['b4DragOver'](_0x9f6cx1e, _0x9f6cx3);
						_0x9f6cxa['onDragOver'](_0x9f6cx1e, _0x9f6cx3)
					};
					if (_0x9f6cx1c['length']) {
						_0x9f6cxa['b4DragDrop'](_0x9f6cx1e, _0x9f6cx1c);
						_0x9f6cxa['onDragDrop'](_0x9f6cx1e, _0x9f6cx1c)
					}
				}
				else {
					for (_0x9f6cx16 = 0, _0x9f6cx15 = _0x9f6cxe['length']; _0x9f6cx16 < _0x9f6cx15; ++_0x9f6cx16) {
						_0x9f6cxa['b4DragOut'](_0x9f6cx1e, _0x9f6cxe[_0x9f6cx16]['id']);
						_0x9f6cxa['onDragOut'](_0x9f6cx1e, _0x9f6cxe[_0x9f6cx16]['id'])
					};
					for (_0x9f6cx16 = 0, _0x9f6cx15 = _0x9f6cx1b['length']; _0x9f6cx16 < _0x9f6cx15; ++_0x9f6cx16) {
						_0x9f6cxa['onDragEnter'](_0x9f6cx1e, _0x9f6cx1b[_0x9f6cx16]['id'], _0x9f6cx1b[_0x9f6cx16])
					};
					for (_0x9f6cx16 = 0, _0x9f6cx15 = _0x9f6cx3['length']; _0x9f6cx16 < _0x9f6cx15; ++_0x9f6cx16) {
						_0x9f6cxa['b4DragOver'](_0x9f6cx1e, _0x9f6cx3[_0x9f6cx16]['id']);
						_0x9f6cxa['onDragOver'](_0x9f6cx1e, _0x9f6cx3[_0x9f6cx16]['id'])
					};
					for (_0x9f6cx16 = 0, _0x9f6cx15 = _0x9f6cx1c['length']; _0x9f6cx16 < _0x9f6cx15; ++_0x9f6cx16) {
						_0x9f6cxa['b4DragDrop'](_0x9f6cx1e, _0x9f6cx1c[_0x9f6cx16]['id']);
						_0x9f6cxa['onDragDrop'](_0x9f6cx1e, _0x9f6cx1c[_0x9f6cx16]['id'])
					}
				};
				if (_0x9f6cxf && !_0x9f6cx1c['length']) {
					_0x9f6cxa['onInvalidDrop'](_0x9f6cx1e)
				}
			}
		});
		Ext['override'](Ext['dd'].DragSource, {
			onDragEnter: function (_0x9f6cx3, _0x9f6cx7, _0x9f6cx5) {
				this['forceCachedTarget'] = _0x9f6cx5;
				return this['callParent']([_0x9f6cx3, _0x9f6cx7])
			}
			, beforeDragEnter: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx7) {
				if (this['forceCachedTarget']) {
					_0x9f6cx3 = this['cachedTarget'] = this['forceCachedTarget'];
					delete this['forceCachedTarget']
				};
				return this['callParent']([_0x9f6cx3, _0x9f6cx5, _0x9f6cx7])
			}
		});
		var _0x9f6cx2 = Ext['dd']['ScrollManager'];
		var _0x9f6cx1 = Ext['dd']['DragDropManager'];
		_0x9f6cx1['fireEvents'] = Ext['Function']['createSequence'](_0x9f6cx1['fireEvents'], _0x9f6cx2['onFire'], _0x9f6cx2);
		_0x9f6cx1['stopDrag'] = Ext['Function']['createSequence'](_0x9f6cx1['stopDrag'], _0x9f6cx2['onStop'], _0x9f6cx2)
	}
});
Ext.define('Ext.ux.Scheduler.patches.NavigationModel', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.NavigationModel'
	, minVersion: '6.0.0'
	, overrides: {
		setPosition: function (_0x9f6cx2, _0x9f6cx3, _0x9f6cx7, _0x9f6cx1, _0x9f6cx6) {
			var _0x9f6cx4 = this;
			if (Ext['isIE'] && _0x9f6cx7 && (_0x9f6cx7['getKey']() === _0x9f6cx7['PAGE_DOWN'] || _0x9f6cx7['getKey']() === _0x9f6cx7['PAGE_UP'])) {
				var _0x9f6cx5 = _0x9f6cx4['lastFocused'];
				if (_0x9f6cx7['view']['isLockedView'] && _0x9f6cx5 && _0x9f6cx7['view']['getVisibleColumnManager']()['indexOf'](_0x9f6cx5['column']) === -1) {
					_0x9f6cx7['view'] = _0x9f6cx7['view']['lockingPartner']
				}
			};
			if (Ext['getVersion']()['equals']('6.0.1.250')) {
				_0x9f6cx4['patchedSetPosition']['apply'](this, arguments)
			}
			else {
				return _0x9f6cx4['callParent'](arguments)
			}
		}
		, patchedSetPosition: function (_0x9f6cx2, _0x9f6cxf, _0x9f6cxb, _0x9f6cx3, _0x9f6cxa) {
			var _0x9f6cx12 = this
				, _0x9f6cx9, _0x9f6cxe, _0x9f6cxc, _0x9f6cxd, _0x9f6cx4, _0x9f6cx8, _0x9f6cx1, _0x9f6cx7, _0x9f6cx6, _0x9f6cx11 = _0x9f6cx2 == null && _0x9f6cxf == null
				, _0x9f6cx13 = _0x9f6cx12['record'] == null && _0x9f6cx12['recordIndex'] == null && _0x9f6cx12['item'] == null;
			if (_0x9f6cx2 && _0x9f6cx2['isCellContext']) {
				_0x9f6cx9 = _0x9f6cx2['view']
			}
			else {
				if (_0x9f6cxb && _0x9f6cxb['view']) {
					_0x9f6cx9 = _0x9f6cxb['view']
				}
				else {
					if (_0x9f6cx12['lastFocused']) {
						_0x9f6cx9 = _0x9f6cx12['lastFocused']['view']
					}
					else {
						_0x9f6cx9 = _0x9f6cx12['view']
					}
				}
			};
			_0x9f6cx9['getFocusTask']()['cancel']();
			if (_0x9f6cx9['destroyed'] || !_0x9f6cx9['refreshCounter'] || !_0x9f6cx9['ownerCt'] || _0x9f6cx11 && _0x9f6cx13 || !_0x9f6cx9['all']['getCount']()) {
				return
			};
			_0x9f6cxc = _0x9f6cx9['getSelectionModel']();
			_0x9f6cxd = _0x9f6cx9['dataSource'];
			_0x9f6cx4 = _0x9f6cx9['getVisibleColumnManager']();
			if (_0x9f6cx2 && _0x9f6cx2['isCellContext']) {
				_0x9f6cx7 = _0x9f6cx2['record'];
				_0x9f6cx8 = _0x9f6cx2['rowIdx'];
				_0x9f6cx1 = Math['min'](_0x9f6cx2['colIdx'], _0x9f6cx4['getColumns']()['length'] - 1);
				_0x9f6cx6 = _0x9f6cx4['getColumns']()[_0x9f6cx1];
				if (_0x9f6cxd['indexOf'](_0x9f6cx7) === -1) {
					_0x9f6cxe = _0x9f6cx9['getScrollable']();
					_0x9f6cx12['recordIndex'] = -1;
					if (_0x9f6cxe['getPosition']()['y'] >= _0x9f6cxe['getMaxPosition']()['y'] - _0x9f6cx9['all']['last'](true)['offsetHeight']) {
						_0x9f6cx2['rowIdx']--
					};
					_0x9f6cx8 = Math['min'](_0x9f6cx2['rowIdx'], _0x9f6cxd['getCount']() - 1);
					_0x9f6cx7 = _0x9f6cxd['getAt'](_0x9f6cx8)
				}
			}
			else {
				if (_0x9f6cx11) {
					_0x9f6cx7 = _0x9f6cx8 = null
				}
				else {
					if (_0x9f6cxf == null) {
						_0x9f6cxf = _0x9f6cx12['lastFocused'] ? _0x9f6cx12['lastFocused']['column'] : 0
					};
					if (typeof _0x9f6cx2 === 'number') {
						_0x9f6cx8 = Math['max'](Math['min'](_0x9f6cx2, _0x9f6cxd['getCount']() - 1), 0);
						_0x9f6cx7 = _0x9f6cxd['getAt'](_0x9f6cx2)
					}
					else {
						if (_0x9f6cx2['isEntity']) {
							_0x9f6cx7 = _0x9f6cx2;
							_0x9f6cx8 = _0x9f6cxd['indexOf'](_0x9f6cx7)
						}
						else {
							if (_0x9f6cx2['tagName']) {
								_0x9f6cx7 = _0x9f6cx9['getRecord'](_0x9f6cx2);
								_0x9f6cx8 = _0x9f6cxd['indexOf'](_0x9f6cx7);
								if (_0x9f6cx8 === -1) {
									_0x9f6cx7 = null
								}
							}
							else {
								if (_0x9f6cx13) {
									return
								};
								_0x9f6cx11 = true;
								_0x9f6cx7 = _0x9f6cx8 = null
							}
						}
					}
				};
				if (_0x9f6cx7) {
					if (_0x9f6cx8 === -1) {
						_0x9f6cx12['recordIndex'] = -1;
						_0x9f6cx7 = _0x9f6cxd['getAt'](0);
						_0x9f6cx8 = 0;
						_0x9f6cxf = null
					};
					if (_0x9f6cxf == null) {
						if (!(_0x9f6cx6 = _0x9f6cx12['column'])) {
							_0x9f6cx1 = 0;
							_0x9f6cx6 = _0x9f6cx4['getColumns']()[0]
						}
					}
					else {
						if (typeof _0x9f6cxf === 'number') {
							_0x9f6cx6 = _0x9f6cx4['getColumns']()[_0x9f6cxf];
							_0x9f6cx1 = _0x9f6cxf
						}
						else {
							_0x9f6cx6 = _0x9f6cxf;
							_0x9f6cx1 = _0x9f6cx4['indexOf'](_0x9f6cxf)
						}
					}
				}
				else {
					_0x9f6cx11 = true;
					_0x9f6cx6 = _0x9f6cx1 = null
				}
			};
			if (_0x9f6cx9['actionableMode'] && !_0x9f6cx11) {
				var _0x9f6cx5 = new Ext['grid'].CellContext(_0x9f6cx9)['setPosition'](_0x9f6cx7, _0x9f6cx6);
				_0x9f6cx12['focusPosition'](_0x9f6cx5);
				return _0x9f6cx9['ownerGrid']['setActionableMode'](false, _0x9f6cx5)
			};
			if (_0x9f6cx8 === _0x9f6cx12['recordIndex'] && _0x9f6cx1 === _0x9f6cx12['columnIndex'] && _0x9f6cx9 === _0x9f6cx12['position']['view']) {
				return _0x9f6cx12['focusPosition'](_0x9f6cx12['position'])
			};
			if (_0x9f6cx12['cell']) {
				_0x9f6cx12['cell']['removeCls'](_0x9f6cx12['focusCls'])
			};
			_0x9f6cx12['previousRecordIndex'] = _0x9f6cx12['recordIndex'];
			_0x9f6cx12['previousRecord'] = _0x9f6cx12['record'];
			_0x9f6cx12['previousItem'] = _0x9f6cx12['item'];
			_0x9f6cx12['previousCell'] = _0x9f6cx12['cell'];
			_0x9f6cx12['previousColumn'] = _0x9f6cx12['column'];
			_0x9f6cx12['previousColumnIndex'] = _0x9f6cx12['columnIndex'];
			_0x9f6cx12['previousPosition'] = _0x9f6cx12['position']['clone']();
			_0x9f6cx12['selectionStart'] = _0x9f6cxc['selectionStart'];
			_0x9f6cx12['position']['setAll'](_0x9f6cx9, _0x9f6cx12['recordIndex'] = _0x9f6cx8, _0x9f6cx12['columnIndex'] = _0x9f6cx1, _0x9f6cx12['record'] = _0x9f6cx7, _0x9f6cx12['column'] = _0x9f6cx6);
			if (_0x9f6cx11) {
				_0x9f6cx12['item'] = _0x9f6cx12['cell'] = null
			}
			else {
				_0x9f6cx12['focusPosition'](_0x9f6cx12['position'], _0x9f6cxa)
			};
			if (!_0x9f6cx3) {
				_0x9f6cxc['fireEvent']('focuschange', _0x9f6cxc, _0x9f6cx12['previousRecord'], _0x9f6cx12['record']);
				_0x9f6cx9['fireEvent']('rowfocus', _0x9f6cx12['record'], _0x9f6cx12['item'], _0x9f6cx12['recordIndex']);
				_0x9f6cx9['fireEvent']('cellfocus', _0x9f6cx12['record'], _0x9f6cx12['cell'], _0x9f6cx12['position'])
			};
			if (_0x9f6cxb && !_0x9f6cxa && _0x9f6cx12['cell'] !== _0x9f6cx12['previousCell']) {
				_0x9f6cx12['fireNavigateEvent'](_0x9f6cxb)
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.NavigationModel_6_2_0', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.NavigationModel'
	, minVersion: '6.2.0'
	, overrides: {
		focusPosition: function (_0x9f6cx1, _0x9f6cx2) {
			if (this['view'] instanceof Ext.ux.Gantt['view']['Gantt']) {
				!_0x9f6cx2 && this['callParent'](arguments)
			}
			else {
				this['callParent'](arguments)
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.TableView', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.view.Table'
	, minVersion: '6.2.1'
	, applyFn: function () {
		if (Ext['isIE9']) {
			Ext.define(null, {
				override: 'Ext.view.Table'
				, getRow: function (_0x9f6cx1) {
					var _0x9f6cx2;
					if ((!_0x9f6cx1 && _0x9f6cx1 !== 0) || !this['rendered']) {
						return null
					};
					if (_0x9f6cx1['target']) {
						_0x9f6cx1 = _0x9f6cx1['target']
					};
					if (Ext['isString'](_0x9f6cx1)) {
						return Ext['fly'](_0x9f6cx1)['down'](this['rowSelector'], true)
					};
					if (Ext['isNumber'](_0x9f6cx1)) {
						_0x9f6cx2 = this['all']['item'](_0x9f6cx1);
						return _0x9f6cx2 && _0x9f6cx2['down'](this['rowSelector'], true)
					};
					if (_0x9f6cx1['isModel']) {
						return this['getRowByRecord'](_0x9f6cx1)
					};
					_0x9f6cx1['setAttribute']('class', _0x9f6cx1['className']);
					_0x9f6cx2 = Ext['fly'](_0x9f6cx1);
					if (_0x9f6cx2['is'](this['itemSelector'])) {
						return this['getRowFromItem'](_0x9f6cx2)
					};
					return _0x9f6cx2['findParent'](this['rowSelector'], this['getTargetEl']())
				}
			})
		}
	}
});
Ext.define('Ext.ux.Gantt.template.Template', {
	extend: 'Ext.XTemplate'
	, disableFormats: true
	, isLegacyIE: Ext['isIE8m']
	, getInnerTpl: Ext['emptyFn']
	, innerTpl: null
	, dependencyTerminalMarkup: '<div class="sch-terminal sch-terminal-start"></div><div class="sch-terminal sch-terminal-end"></div>'
	, terminalSides: null
	, terminalTpl: '<div class="sch-terminal sch-terminal-SIDE"></div>'
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1);
		var _0x9f6cx5 = _0x9f6cx1['rtl'] ? 'right' : 'left';
		var _0x9f6cx2 = this['getInnerTpl'](_0x9f6cx1) || '';
		this['callParent'](['<div class="sch-event-wrap {ctcls} ' + Ext['baseCSSPrefix'] + 'unselectable" style="' + _0x9f6cx5 + ':{offset}px">', '<tpl if="isRollup">', _0x9f6cx2, '<tpl else>', (_0x9f6cx1['leftLabel'] ? '<div class="sch-gantt-labelct sch-gantt-labelct-left"><label class="sch-gantt-label sch-gantt-label-left">{leftLabel}</label></div>' : ''), (_0x9f6cx1['rightLabel'] ? '<div class="sch-gantt-labelct sch-gantt-labelct-right" style="left:{width}px"><label class="sch-gantt-label sch-gantt-label-right">{rightLabel}</label></div>' : ''), (_0x9f6cx1['topLabel'] ? '<div class="sch-gantt-labelct sch-gantt-labelct-top"><label class="sch-gantt-label sch-gantt-label-top">{topLabel}</label></div>' : ''), _0x9f6cx2, (_0x9f6cx1['bottomLabel'] ? '<div class="sch-gantt-labelct sch-gantt-labelct-bottom"><label class="sch-gantt-label sch-gantt-label-bottom">{bottomLabel}</label></div>' : ''), '</tpl>', '</div>'])
	}
});
Ext.define('Ext.ux.Gantt.template.Task', {
	extend: 'Ext.ux.Gantt.template.Template'
	, innerTpl: '<div class="sch-gantt-progress-bar" style="width:{progressBarWidth}px;{progressBarStyle}" unselectable="on">&#160;</div>'
	, getInnerTpl: function (_0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx1['rtl'] ? 'right' : 'left';
		return '<div id="' + _0x9f6cx1['prefix'] + '{id}" {attr} class="sch-gantt-item sch-gantt-task-bar {cls}" unselectable="on" style="width:{width}px;{style}"><tpl if="isRollup"><tpl else><tpl if="segments"><div class="sch-gantt-segment-connector"></div></tpl>' + ((_0x9f6cx1['taskResizeHandles'] === 'both' || _0x9f6cx1['taskResizeHandles'] === 'left') ? '<div class="sch-resizable-handle sch-gantt-task-handle sch-resizable-handle-start"></div>' : '') + '<tpl for="segments"><div id="' + _0x9f6cx1['prefix'] + '{parent.Id}-segment-{[xindex-1]}" class="sch-gantt-task-segment {cls}" style="' + _0x9f6cx2 + ':{left}px;width:{width}px;{style}" data-segmentIndex="{[xindex-1]}">' + this['innerTpl'] + ((_0x9f6cx1['taskResizeHandles'] === 'both' || _0x9f6cx1['taskResizeHandles'] === 'right') ? '<div class="sch-resizable-handle sch-gantt-task-handle sch-resizable-handle-end"></div>' : '') + '</div></tpl>' + this['innerTpl'] + ((_0x9f6cx1['taskResizeHandles'] === 'both' || _0x9f6cx1['taskResizeHandles'] === 'right') ? '<div class="sch-resizable-handle sch-gantt-task-handle sch-resizable-handle-end"></div>' : '') + (_0x9f6cx1['enableProgressBarResize'] ? '<div style="' + _0x9f6cx2 + ':{progressBarWidth}px" class="sch-gantt-progressbar-handle"></div>' : '') + (_0x9f6cx1['enableDependencyDragDrop'] ? this['dependencyTerminalMarkup'] : '') + '</tpl></div>'
	}
});
Ext.define('Ext.ux.Gantt.template.ParentTask', {
	extend: 'Ext.ux.Gantt.template.Template'
	, innerTpl: '<div class="sch-gantt-progress-bar" style="width:{progressBarWidth}px;{progressBarStyle}">&#160;</div>'
	, getInnerTpl: function (_0x9f6cx1) {
		return '<div id="' + _0x9f6cx1['prefix'] + '{id}" {attr} class="sch-gantt-item sch-gantt-parenttask-bar {cls}" style="width:{width}px; {style}">' + this['innerTpl'] + ((_0x9f6cx1['enableDependencyDragDrop'] && _0x9f6cx1['allowParentTaskDependencies']) ? this['dependencyTerminalMarkup'] : '') + '</div>'
	}
});
Ext.define('Ext.ux.Gantt.template.Milestone', {
	extend: 'Ext.ux.Gantt.template.Template'
	, innerTpl: (Ext['isIE8m'] ? ('<div style="border-width:{[Math.floor(values.side*0.7)]}px;{style}" class="sch-gantt-milestone-diamond-top {cls}" unselectable="on"></div><div style="border-width:{[Math.floor(values.side*0.7)]}px;{style}" class="sch-gantt-milestone-diamond-bottom {cls}" unselectable="on"></div>') : ('<img style="{[values.print ? "height:" + values.side + "px;border-left-width:" + values.side + "px" : ""]};{style}" src="' + Ext['BLANK_IMAGE_URL'] + '" class="sch-gantt-milestone-diamond {cls}" unselectable="on"/>'))
	, getInnerTpl: function (_0x9f6cx1) {
		return '<div ' + (this['isLegacyIE'] ? 'style="width:{[Math.floor(values.side*0.7)]}px"' : '') + ' id="' + _0x9f6cx1['prefix'] + '{id}" {attr} class="sch-gantt-item sch-gantt-milestone-diamond-ct">' + this['innerTpl'] + '<tpl if="isRollup"><tpl else>' + (_0x9f6cx1['enableDependencyDragDrop'] ? this['dependencyTerminalMarkup'] : '') + '</tpl></div>'
	}
});
Ext.define('Ext.ux.Gantt.template.RollupTask', {
	extend: 'Ext.XTemplate'
	, text: '<div class="sch-rollup-wrap"><tpl for=".">{[values.tpl.apply(values)]}</tpl></div>'
	, constructor: function (_0x9f6cx1) {
		this['callParent']([this['text']])
	}
});
Ext.define('Ext.ux.Gantt.template.Deadline', {
	extend: 'Ext.XTemplate'
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, disableFormats: true
	, markup: '<div data-qtip="__DEADLINE__:  {date}" data-qalign="b-tl" class="gnt-deadline-indicator {cls}" style="{dir}:{offset}px"></div>'
	, constructor: function () {
		this['markup'] = this['markup']['replace'](/__DEADLINE__/, this.L('deadline'));
		this['callParent']([this['markup']])
	}
});
Ext.define('Ext.ux.Scheduler.mixin.GridViewCanvas', {
	extend: 'Ext.Mixin'
	, mixinConfig: {
		after: {
			onRender: 'afterOnRender'
		}
	}
	, secondaryCanvasCls: 'sch-secondary-canvas'
	, secondaryCanvasLayerCls: 'sch-secondary-canvas-layer'
	, itemsCanvasEl: null
	, itemsCanvasCls: 'sch-item-canvas'
	, itemsCanvasLayerCls: 'sch-item-canvas-layer'
	, getSecondaryCanvasEl: function () {
		var _0x9f6cx1 = null;
		if (this['isItemCanvasAvailable']()) {
			_0x9f6cx1 = this['getItemCanvasEl'](-1, {
				tag: 'div'
				, role: 'presentation'
				, cls: this['secondaryCanvasCls']
			})
		};
		return _0x9f6cx1
	}
	, isItemCanvasAvailable: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return !!(_0x9f6cx2['rendered'] && !_0x9f6cx2['destroyed'] && (_0x9f6cx2['getNodeContainer']() || _0x9f6cx2['itemsCanvasEl'] && (_0x9f6cx2['itemsCanvasEl']['_underMixinControl'] || !Ext['isGarbage'](_0x9f6cx2['itemsCanvasEl']['dom']))))
	}
	, isItemCanvasPresent: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return !!(_0x9f6cx2['rendered'] && !_0x9f6cx2['destroyed'] && _0x9f6cx2['itemsCanvasEl'] && (_0x9f6cx1 === undefined || (_0x9f6cx2['itemsCanvasEl'][_0x9f6cx1] && (_0x9f6cx2['itemsCanvasEl']['_underMixinControl'] || !Ext['isGarbage'](_0x9f6cx2['itemsCanvasEl'][_0x9f6cx1]['dom'])))))
	}
	, getItemCanvasEl: function (_0x9f6cx2, _0x9f6cx4) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['itemsCanvasEl']
			, _0x9f6cx3 = _0x9f6cx1;
		Ext['Assert'] && Ext['Assert']['truthy'](_0x9f6cx5['isItemCanvasAvailable'](), 'can\'t get sub canvas element, view\'s node container isn\'t rendered yet');
		if (!_0x9f6cx1 || !_0x9f6cx1['dom'] || (!_0x9f6cx1['_underMixinControl'] && (Ext['isGarbage'](_0x9f6cx1['dom'])))) {
			_0x9f6cx3 = _0x9f6cx1 = _0x9f6cx5['itemsCanvasEl'] = Ext['fly'](_0x9f6cx5['getNodeContainer']())['insertFirst']({
				cls: _0x9f6cx5['itemsCanvasCls']
			})
		};
		if (arguments['length'] > 0) {
			_0x9f6cx2 = _0x9f6cx2 || 0;
			_0x9f6cx3 = _0x9f6cx1[_0x9f6cx2] || Ext['dom']['Query']['selectNode']('[data-sch-secondary-canvas-layer="' + _0x9f6cx2 + '"]', _0x9f6cx1['dom']);
			if (!_0x9f6cx3 || !_0x9f6cx3['dom'] || (!_0x9f6cx1['_underMixinControl'] && Ext['isGarbage'](_0x9f6cx3['dom']))) {
				_0x9f6cx3 = _0x9f6cx1['createChild']((Ext['isFunction'](_0x9f6cx4) ? _0x9f6cx4() : _0x9f6cx4) || {
					tag: 'div'
				});
				_0x9f6cx3['set']({
					"data-sch-secondary-canvas-layer": _0x9f6cx2
				});
				_0x9f6cx3['setStyle']('zIndex', _0x9f6cx2);
				_0x9f6cx3['addCls'](_0x9f6cx5['itemsCanvasLayerCls']);
				_0x9f6cx1[_0x9f6cx2] = _0x9f6cx3
			}
		};
		return _0x9f6cx3
	}
	, afterOnRender: function () {
		if (this['bufferedRenderer']) {
			this['on']('viewready', this['onBufferedRendererViewReady'], this)
		}
	}
	, onBufferedRendererViewReady: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx5 = _0x9f6cx2['bufferedRenderer']
			, _0x9f6cx1 = _0x9f6cx5['onRangeFetched'];
		_0x9f6cx5['onRangeFetched'] = function () {
			var _0x9f6cx3 = _0x9f6cx2['getItemCanvasEl']()
				, _0x9f6cx7 = _0x9f6cx2['getNodeContainer']()
				, _0x9f6cx4;
			_0x9f6cx3['_underMixinControl'] = true;
			_0x9f6cx3['dom']['parentNode'] && _0x9f6cx3['dom']['parentNode']['removeChild'](_0x9f6cx3['dom']);
			_0x9f6cx4 = _0x9f6cx1['apply'](this, arguments);
			_0x9f6cx7['insertBefore'](_0x9f6cx3['dom'], _0x9f6cx7['firstChild']);
			delete _0x9f6cx3['_underMixinControl'];
			return _0x9f6cx4
		}
	}
});
Ext.define('Ext.ux.Gantt.view.Gantt', {
	extend: 'Ext.ux.Scheduler.view.TimelineGridView'
	, alias: ['widget.ganttview']
	, requires: ['Ext.dd.ScrollManager', 'Ext.ux.Scheduler.patches.DragDropManager', 'Ext.ux.Scheduler.patches.NavigationModel', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Gantt.patches.NavigationModel_6_2_0', 'Ext.ux.Gantt.patches.TableView', 'Ext.ux.Gantt.model.Task', 'Ext.ux.Gantt.template.Task', 'Ext.ux.Gantt.template.ParentTask', 'Ext.ux.Gantt.template.Milestone', 'Ext.ux.Gantt.template.RollupTask', 'Ext.ux.Gantt.template.Deadline', 'Ext.ux.Gantt.feature.taskdd.DragZone', 'Ext.ux.Gantt.feature.ProgressBarResize', 'Ext.ux.Gantt.feature.TaskResize', 'Ext.ux.Scheduler.view.Horizontal', 'Ext.ux.Gantt.feature.LabelEditor', 'Ext.ux.Gantt.feature.DragCreator']
	, uses: ['Ext.ux.Gantt.patches.LabelEditor']
	, mixins: ['Ext.ux.Scheduler.mixin.GridViewCanvas', 'Ext.ux.Scheduler.mixin.FilterableTreeView']
	, _cmpCls: 'sch-ganttview'
	, scheduledEventName: 'task'
	, trackOver: false
	, toggleOnDblClick: false
	, eventSelector: '.sch-gantt-item'
	, eventWrapSelector: '.sch-event-wrap'
	, barMargin: 4
	, progressBarResizer: null
	, taskResizer: null
	, taskDragDrop: null
	, dragCreator: null
	, resizeConfig: null
	, createConfig: null
	, dragDropConfig: null
	, progressBarResizeConfig: null
	, externalGetRowClass: null
	, outsideLabelsGatherWidth: 200
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		if (_0x9f6cx1) {
			this['externalGetRowClass'] = _0x9f6cx1['getRowClass'];
			delete _0x9f6cx1['getRowClass']
		};
		this['callParent'](arguments);
		this['on']({
			itemupdate: this['onRowUpdate']
			, scope: this
		});
		this['mon'](this['taskStore'], {
			update: this['onTaskStoreUpdate']
			, scope: this
		});
		this['initTreeFiltering']()
	}
	, onBeforeIndentationChange: function () {
		var _0x9f6cx1 = this['getNavigationModel']()['getPosition']();
		if (_0x9f6cx1 && _0x9f6cx1['record']) {
			this['_lastNavigatedRecord'] = _0x9f6cx1['record']
		}
	}
	, onIndentationChange: function () {
		this['_lastNavigatedRecord'] && this['getNavigationModel']()['setPosition'](this._lastNavigatedRecord);
		delete this['_lastNavigatedRecord']
	}
	, onRender: function () {
		this['mon'](this['getTaskStore'](), {
			beforeindentationchange: this['onBeforeIndentationChange']
			, indentationchange: this['onIndentationChange']
			, scope: this
		});
		this['configureLabels']();
		this['setupGanttEvents']();
		this['setupTemplates']();
		this['callParent'](arguments)
	}
	, getDependencyStore: function () {
		return this['dependencyStore']
	}
	, configureFeatures: function () {
		if (this['enableProgressBarResize'] !== false) {
			this['progressBarResizer'] = Ext['create']('Ext.ux.Gantt.feature.ProgressBarResize', Ext['apply']({
				ganttView: this
			}, this['progressBarResizeConfig'] || {}));
			this['on']({
				beforeprogressbarresize: this['onBeforeTaskProgressBarResize']
				, progressbarresizestart: this['onTaskProgressBarResizeStart']
				, afterprogressbarresize: this['onTaskProgressBarResizeEnd']
				, scope: this
			})
		};
		if (this['taskResizeHandles'] !== 'none') {
			this['taskResizer'] = Ext['create']('Ext.ux.Gantt.feature.TaskResize', Ext['apply']({
				ganttView: this
				, validatorFn: this['resizeValidatorFn'] || Ext['emptyFn']
				, validatorFnScope: this
			}, this['resizeConfig'] || {}));
			this['on']({
				beforedragcreate: this['onBeforeDragCreate']
				, beforetaskresize: this['onBeforeTaskResize']
				, taskresizestart: this['onTaskResizeStart']
				, aftertaskresize: this['onTaskResizeEnd']
				, progressbarresizestart: this['onTaskResizeStart']
				, afterprogressbarresize: this['onTaskResizeEnd']
				, scope: this
			})
		};
		if (this['enableTaskDragDrop']) {
			this['taskDragDrop'] = Ext['create'](this['dragDropConfig'] && this['dragDropConfig']['xclass'] || 'Ext.ux.Gantt.feature.taskdd.DragZone', this['getEl'](), Ext['apply']({
				gantt: this
				, taskSelector: this['eventSelector']
				, deadlineSelector: '.gnt-deadline-indicator'
				, validatorFn: this['dndValidatorFn'] || Ext['emptyFn']
				, validatorFnScope: this
				, skipWeekendsDuringDragDrop: this['taskStore']['skipWeekendsDuringDragDrop']
				, snapRelativeToEventStartDate: this['snapRelativeToEventStartDate']
			}, this['dragDropConfig']));
			this['on']({
				beforetaskdrag: this['onBeforeTaskDrag']
				, taskdragstart: this['onDragDropStart']
				, aftertaskdrop: this['onDragDropEnd']
				, scope: this
			})
		};
		if (this['enableDragCreation']) {
			this['dragCreator'] = Ext['create']('Ext.ux.Gantt.feature.DragCreator', Ext['apply']({
				ganttView: this
				, validatorFn: this['createValidatorFn'] || Ext['emptyFn']
				, validatorFnScope: this
			}, this['createConfig']))
		}
	}
	, getTemplateForTask: function (_0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx2['isMilestone'](_0x9f6cx1)) {
			return this['milestoneTemplate']
		};
		if (_0x9f6cx2['isLeaf']()) {
			return this['eventTemplate']
		};
		return this['parentEventTemplate']
	}
	, refreshNotReadOnlyChildNodes: function (_0x9f6cx1) {
		_0x9f6cx1['cascadeBy']({
			before: function (_0x9f6cx2) {
				return _0x9f6cx2 == _0x9f6cx1 || !_0x9f6cx2['getReadOnly']()
			}
			, after: function (_0x9f6cx2) {
				if (_0x9f6cx2 !== _0x9f6cx1) {
					this['refreshNode'](_0x9f6cx2)
				}
			}
			, scope: this
		})
	}
	, setShowRollupTasks: function (_0x9f6cx1) {
		this['showRollupTasks'] = _0x9f6cx1;
		var _0x9f6cx2 = {};
		this['taskStore']['getRootNode']()['cascadeBy'](function (_0x9f6cx7) {
			if (_0x9f6cx7['getRollup']()) {
				var _0x9f6cx4 = _0x9f6cx7['parentNode'];
				_0x9f6cx2[_0x9f6cx4['internalId']] = _0x9f6cx4
			}
		});
		for (var _0x9f6cx3 in _0x9f6cx2) {
			var _0x9f6cx5 = this['store']['indexOf'](_0x9f6cx2[_0x9f6cx3]);
			if (_0x9f6cx5 >= 0) {
				this['refreshNode'](_0x9f6cx5)
			}
		}
	}
	, getRollupRenderData: function (_0x9f6cx4) {
		var _0x9f6cx1 = [];
		var _0x9f6cxc = this['timeAxis']
			, _0x9f6cxa = _0x9f6cxc['getStart']()
			, _0x9f6cxe = _0x9f6cxc['getEnd']();
		for (var _0x9f6cx8 = 0; _0x9f6cx8 < _0x9f6cx4['childNodes']['length']; _0x9f6cx8++) {
			var _0x9f6cx7 = _0x9f6cx4['childNodes'][_0x9f6cx8];
			var _0x9f6cx12 = _0x9f6cx7['getStartDate']();
			var _0x9f6cx3 = _0x9f6cx7['getEndDate']() || _0x9f6cx12 && Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx12, _0x9f6cx7['getDurationUnit'](), 1);
			if (_0x9f6cx7['getRollup']() && _0x9f6cx12 && _0x9f6cx3) {
				if (Ext.ux.Scheduler['util']['Date']['intersectSpans'](_0x9f6cx12, _0x9f6cx3, _0x9f6cxa, _0x9f6cxe)) {
					var _0x9f6cx6 = {}
						, _0x9f6cxd = _0x9f6cx7['isMilestone']();
					_0x9f6cx6['isRollup'] = true;
					_0x9f6cx6['id'] = Ext['id']();
					_0x9f6cx6['attr'] = 'rolluptaskid="' + _0x9f6cx7['getId']() + '"';
					var _0x9f6cx5 = _0x9f6cx3 > _0x9f6cxe
						, _0x9f6cx2 = Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0x9f6cx12, _0x9f6cxa, _0x9f6cxe)
						, _0x9f6cxb = this['getCoordinateFromDate'](_0x9f6cx2 ? _0x9f6cx12 : _0x9f6cxa)
						, _0x9f6cxf = this['getCoordinateFromDate'](_0x9f6cx5 ? _0x9f6cxe : _0x9f6cx3)
						, _0x9f6cx13 = _0x9f6cxd ? 0 : _0x9f6cxf - _0x9f6cxb;
					_0x9f6cx6['offset'] = (_0x9f6cxd ? (_0x9f6cxf || _0x9f6cxb) - this['getXOffset'](_0x9f6cx7) : _0x9f6cxb);
					_0x9f6cx6['tpl'] = _0x9f6cxd ? this['milestoneTemplate'] : this['eventTemplate'];
					_0x9f6cx6['cls'] = _0x9f6cx7['getCls']();
					_0x9f6cx6['ctcls'] = '';
					_0x9f6cx6['record'] = _0x9f6cx7;
					if (_0x9f6cxd) {
						_0x9f6cx6['side'] = Ext['isIE8m'] ? Math['round'](0.3 * this['getRowHeight']()) : Math['round'](0.5 * this['getRowHeight']());
						_0x9f6cx6['ctcls'] += ' sch-gantt-milestone'
					}
					else {
						_0x9f6cx6['width'] = Math['max'](1, _0x9f6cx13);
						if (_0x9f6cx5) {
							_0x9f6cx6['ctcls'] += ' sch-event-endsoutside '
						};
						if (!_0x9f6cx2) {
							_0x9f6cx6['ctcls'] += ' sch-event-startsoutside '
						};
						_0x9f6cx6['ctcls'] += ' sch-gantt-task'
					};
					if (_0x9f6cx7['isReadOnly']()) {
						_0x9f6cx6['ctcls'] += ' sch-gantt-task-readonly'
					};
					if (_0x9f6cx7['isProject']) {
						_0x9f6cx6['ctcls'] += ' sch-gantt-project-task'
					};
					_0x9f6cx6['cls'] += ' sch-rollup-task';
					_0x9f6cx1['push'](_0x9f6cx6)
				}
			}
		};
		return _0x9f6cx1
	}
	, getLabelRenderData: function (_0x9f6cx5) {
		var _0x9f6cx6 = this['leftLabelField']
			, _0x9f6cx2 = this['rightLabelField']
			, _0x9f6cx7 = this['topLabelField']
			, _0x9f6cx1 = this['bottomLabelField']
			, _0x9f6cx4, _0x9f6cx3 = {
				labelRendered: true
			};
		if (_0x9f6cx6) {
			_0x9f6cx4 = _0x9f6cx6['dataIndex'] ? _0x9f6cx5['data'][_0x9f6cx6['dataIndex']] : undefined;
			_0x9f6cx3['leftLabel'] = _0x9f6cx6['renderer'] ? _0x9f6cx6['renderer']['call'](_0x9f6cx6['scope'] || this, _0x9f6cx4, _0x9f6cx5) : Ext['util']['Format']['htmlEncode'](_0x9f6cx4)
		};
		if (_0x9f6cx2) {
			_0x9f6cx4 = _0x9f6cx2['dataIndex'] ? _0x9f6cx5['data'][_0x9f6cx2['dataIndex']] : undefined;
			_0x9f6cx3['rightLabel'] = _0x9f6cx2['renderer'] ? _0x9f6cx2['renderer']['call'](_0x9f6cx2['scope'] || this, _0x9f6cx4, _0x9f6cx5) : Ext['util']['Format']['htmlEncode'](_0x9f6cx4)
		};
		if (_0x9f6cx7) {
			_0x9f6cx4 = _0x9f6cx7['dataIndex'] ? _0x9f6cx5['data'][_0x9f6cx7['dataIndex']] : undefined;
			_0x9f6cx3['topLabel'] = _0x9f6cx7['renderer'] ? _0x9f6cx7['renderer']['call'](_0x9f6cx7['scope'] || this, _0x9f6cx4, _0x9f6cx5) : Ext['util']['Format']['htmlEncode'](_0x9f6cx4)
		};
		if (_0x9f6cx1) {
			_0x9f6cx4 = _0x9f6cx1['dataIndex'] ? _0x9f6cx5['data'][_0x9f6cx1['dataIndex']] : undefined;
			_0x9f6cx3['bottomLabel'] = _0x9f6cx1['renderer'] ? _0x9f6cx1['renderer']['call'](_0x9f6cx1['scope'] || this, _0x9f6cx4, _0x9f6cx5) : Ext['util']['Format']['htmlEncode'](_0x9f6cx4)
		};
		return _0x9f6cx3
	}
	, getSegmentsRenderData: function (_0x9f6cx7, _0x9f6cxc, _0x9f6cx16) {
		var _0x9f6cxa = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cxe = _0x9f6cx7['getSegments']()
			, _0x9f6cx4 = this['timeAxis']['getStart']()
			, _0x9f6cx3 = this['timeAxis']['getEnd']()
			, _0x9f6cxf = []
			, _0x9f6cx5 = 0
			, _0x9f6cx10, _0x9f6cx12, _0x9f6cxd, _0x9f6cx2, _0x9f6cx1, _0x9f6cxb, _0x9f6cx14, _0x9f6cx8, _0x9f6cx17, _0x9f6cx11, _0x9f6cx15, _0x9f6cx6;
		for (_0x9f6cx10 = 0, _0x9f6cx12 = _0x9f6cxe['length']; _0x9f6cx10 < _0x9f6cx12; _0x9f6cx10++) {
			_0x9f6cxd = _0x9f6cxe[_0x9f6cx10];
			_0x9f6cx5 += (_0x9f6cxd['getEndDate']() - _0x9f6cxd['getStartDate']()) * _0x9f6cxc
		};
		for (_0x9f6cx10 = 0, _0x9f6cx12 = _0x9f6cxe['length']; _0x9f6cx10 < _0x9f6cx12; _0x9f6cx10++) {
			_0x9f6cxd = _0x9f6cxe[_0x9f6cx10];
			_0x9f6cx8 = _0x9f6cxd['getCls']() || '';
			_0x9f6cx14 = _0x9f6cxd['getEndDate']() || _0x9f6cx7['getStartDate']();
			_0x9f6cxb = _0x9f6cxd['getStartDate']();
			if (_0x9f6cxa['betweenLesser'](_0x9f6cxb, _0x9f6cx4, _0x9f6cx3)) {
				_0x9f6cx2 = this['getCoordinateFromDate'](_0x9f6cxb);
				if (_0x9f6cxa['betweenLesser'](_0x9f6cx14, _0x9f6cx4, _0x9f6cx3)) {
					_0x9f6cx1 = this['getCoordinateFromDate'](_0x9f6cx14)
				}
				else {
					_0x9f6cx1 = this['getCoordinateFromDate'](_0x9f6cx3)
				}
			}
			else {
				_0x9f6cx2 = this['getCoordinateFromDate'](_0x9f6cx4);
				if (_0x9f6cxa['betweenLesser'](_0x9f6cx14, _0x9f6cx4, _0x9f6cx3)) {
					_0x9f6cx1 = this['getCoordinateFromDate'](_0x9f6cx14)
				}
				else {
					if (_0x9f6cxb > _0x9f6cx3 && _0x9f6cx14 > _0x9f6cx3) {
						_0x9f6cx2 = _0x9f6cx1 = this['getCoordinateFromDate'](_0x9f6cx3) + 100
					}
					else {
						if (_0x9f6cxb < _0x9f6cx4 && _0x9f6cx14 < _0x9f6cx4) {
							_0x9f6cx2 = _0x9f6cx1 = this['getCoordinateFromDate'](_0x9f6cx4) - 100
						}
						else {
							_0x9f6cx1 = this['getCoordinateFromDate'](_0x9f6cx3)
						}
					}
				}
			};
			_0x9f6cx11 = _0x9f6cx1 - _0x9f6cx2;
			if (!_0x9f6cx15) {
				_0x9f6cx5 -= (_0x9f6cx14 - _0x9f6cxb);
				if (_0x9f6cx5 <= 0) {
					_0x9f6cx15 = _0x9f6cxa['add'](_0x9f6cx14, _0x9f6cxa.MILLI, _0x9f6cx5);
					_0x9f6cx8 += ' sch-segment-in-progress';
					_0x9f6cx6 = this['getCoordinateFromDate'](_0x9f6cx15);
					_0x9f6cx17 = Math['min'](Math['abs'](_0x9f6cx6 - _0x9f6cx2), _0x9f6cx11)
				}
				else {
					_0x9f6cx17 = _0x9f6cxd['width']
				}
			}
			else {
				_0x9f6cx17 = 0
			};
			_0x9f6cxf['push'](Ext['applyIf']({
				left: _0x9f6cx2 - _0x9f6cx16
				, width: _0x9f6cx11
				, cls: _0x9f6cx8
				, percentDone: _0x9f6cxc * 100
				, SegmentIndex: _0x9f6cx10
				, progressBarWidth: _0x9f6cx17
			}, _0x9f6cxd['data']))
		};
		_0x9f6cxf[0]['cls'] += ' sch-gantt-task-segment-first';
		_0x9f6cxf[_0x9f6cxf['length'] - 1]['cls'] += ' sch-gantt-task-segment-last';
		return {
			percentDoneAtDate: _0x9f6cx15
			, segments: _0x9f6cxf
		}
	}
	, buildTaskCls: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cx1, _0x9f6cx8) {
		var _0x9f6cx7 = ''
			, _0x9f6cx4 = '';
		if (_0x9f6cx3['isMilestone']()) {
			_0x9f6cx2['side'] = Math['round']((this['enableBaseline'] ? 0.4 : 0.5) * this['getRowHeight']());
			_0x9f6cx4 += ' sch-gantt-milestone'
		}
		else {
			var _0x9f6cx6 = 8;
			if (_0x9f6cx2['width'] < _0x9f6cx6) {
				_0x9f6cx4 += 'sch-gantt-parent-noarrows'
			};
			if (_0x9f6cx8) {
				_0x9f6cx4 += ' sch-event-endsoutside '
			};
			if (!_0x9f6cx1) {
				_0x9f6cx4 += ' sch-event-startsoutside '
			};
			if (_0x9f6cx3['isLeaf']()) {
				var _0x9f6cx5 = _0x9f6cx3['getResizable']();
				_0x9f6cx4 += ' sch-gantt-task';
				if (typeof _0x9f6cx5 === 'boolean' || typeof _0x9f6cx5 === 'string') {
					_0x9f6cx7 += ' sch-event-resizable-' + _0x9f6cx5
				}
			}
			else {
				_0x9f6cx4 += ' sch-gantt-parent-task'
			}
		};
		if (_0x9f6cx3['isReadOnly']()) {
			_0x9f6cx4 += ' sch-gantt-task-readonly'
		};
		if (_0x9f6cx3['isProject']) {
			_0x9f6cx4 += ' sch-gantt-project-task'
		};
		if (_0x9f6cx3['dirty']) {
			_0x9f6cx7 += ' sch-dirty '
		};
		if (_0x9f6cx3['isDraggable']() === false) {
			_0x9f6cx7 += ' sch-event-fixed '
		};
		_0x9f6cx7 += _0x9f6cx3['isSegmented']() ? ' sch-event-segmented ' : ' sch-event-notsegmented ';
		_0x9f6cx2['cls'] += ' ' + _0x9f6cx7;
		_0x9f6cx2['ctcls'] += ' ' + _0x9f6cx4
	}
	, columnRenderer: function (_0x9f6cx17, _0x9f6cxd, _0x9f6cx8) {
		var _0x9f6cxc = _0x9f6cx8['getStartDate']()
			, _0x9f6cxa = this['timeAxis']
			, _0x9f6cxf = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cx2 = {}
			, _0x9f6cx20 = ''
			, _0x9f6cx6 = _0x9f6cxa['getStart']()
			, _0x9f6cx7 = _0x9f6cxa['getEnd']()
			, _0x9f6cx23 = _0x9f6cx8['isMilestone']()
			, _0x9f6cx13, _0x9f6cxe, _0x9f6cx12;
		if (_0x9f6cxc) {
			var _0x9f6cx15 = _0x9f6cx8['getEndDate']() || _0x9f6cxf['add'](_0x9f6cxc, _0x9f6cx8['getDurationUnit']() || _0x9f6cxf['DAY'], 1)
				, _0x9f6cx1b = _0x9f6cxa['getAt'](0)
				, _0x9f6cx18 = (_0x9f6cx1b['getEndDate']() - _0x9f6cx1b['getStartDate']()) / this['timeAxisViewModel']['getTickWidth']()
				, _0x9f6cx14 = _0x9f6cx18 * this['outsideLabelsGatherWidth']
				, _0x9f6cx3 = _0x9f6cxf['intersectSpans'](_0x9f6cxc, _0x9f6cx15, _0x9f6cx6, _0x9f6cx7)
				, _0x9f6cx1e = this['outsideLabelsGatherWidth'] > 0
				, _0x9f6cx19 = _0x9f6cx1e && _0x9f6cxf['intersectSpans'](_0x9f6cxc, _0x9f6cx15, _0x9f6cx7, new Date(_0x9f6cx7['getTime']() + _0x9f6cx14))
				, _0x9f6cx11 = _0x9f6cx1e && _0x9f6cxf['intersectSpans'](_0x9f6cxc, _0x9f6cx15, new Date(_0x9f6cx6['getTime']() - _0x9f6cx14), _0x9f6cx6);
			if (_0x9f6cx3 || _0x9f6cx19 || _0x9f6cx11) {
				_0x9f6cx12 = _0x9f6cx15 > _0x9f6cx7;
				_0x9f6cxe = _0x9f6cxf['betweenLesser'](_0x9f6cxc, _0x9f6cx6, _0x9f6cx7);
				var _0x9f6cx1d, _0x9f6cx5, _0x9f6cx4;
				if (_0x9f6cx3) {
					_0x9f6cx1d = this['getCoordinateFromDate'](_0x9f6cxe ? _0x9f6cxc : _0x9f6cx6);
					_0x9f6cx5 = this['getCoordinateFromDate'](_0x9f6cx12 ? _0x9f6cx7 : _0x9f6cx15);
					_0x9f6cx4 = _0x9f6cx23 ? 0 : _0x9f6cx5 - _0x9f6cx1d
				}
				else {
					_0x9f6cxe = true;
					_0x9f6cx4 = 0;
					if (_0x9f6cx19) {
						_0x9f6cx1d = Math['floor'](this['getCoordinateFromDate'](_0x9f6cx7) + (_0x9f6cxc - _0x9f6cx7) / _0x9f6cx18)
					}
					else {
						_0x9f6cx1d = Math['floor'](this['getCoordinateFromDate'](_0x9f6cx6) - (_0x9f6cx6 - _0x9f6cx15) / _0x9f6cx18)
					}
				};
				var _0x9f6cxb = Math['min'](_0x9f6cx8['getPercentDone']() || 0, 100) / 100
					, _0x9f6cx21, _0x9f6cx9, _0x9f6cx1c, _0x9f6cx16;
				if (_0x9f6cx8['isSegmented']()) {
					var _0x9f6cx1 = this['getSegmentsRenderData'](_0x9f6cx8, _0x9f6cxb, _0x9f6cx1d);
					_0x9f6cx21 = _0x9f6cx1['percentDoneAtDate'];
					_0x9f6cx16 = _0x9f6cx1['segments']
				}
				else {
					_0x9f6cx21 = new Date((_0x9f6cx15 - _0x9f6cxc) * _0x9f6cxb + _0x9f6cxc['getTime']());
					if (_0x9f6cx21 < _0x9f6cx6) {
						_0x9f6cx21 = _0x9f6cx6
					}
					else {
						if (_0x9f6cx21 > _0x9f6cx7) {
							_0x9f6cx21 = _0x9f6cx7
						}
					}
				};
				_0x9f6cx9 = this['getCoordinateFromDate'](_0x9f6cx21);
				_0x9f6cx1c = Math['min'](Math['abs'](_0x9f6cx9 - _0x9f6cx1d), _0x9f6cx4);
				_0x9f6cx2 = {
					id: _0x9f6cx8['internalId'] + '-x-x'
					, offset: _0x9f6cx23 ? (_0x9f6cx5 || _0x9f6cx1d) - this['getXOffset'](_0x9f6cx8) : _0x9f6cx1d
					, width: Math['max'](1, _0x9f6cx4)
					, ctcls: ''
					, cls: _0x9f6cx8['getCls']() || ''
					, print: this['_print']
					, record: _0x9f6cx8
					, percentDone: _0x9f6cxb * 100
					, progressBarWidth: Math['max'](0, _0x9f6cx1c - 2 * this['eventBorderWidth'])
					, segments: _0x9f6cx16
				};
				Ext['apply'](_0x9f6cx2, this['getLabelRenderData'](_0x9f6cx8));
				this['buildTaskCls'](_0x9f6cx8, _0x9f6cx2, _0x9f6cxe, _0x9f6cx12);
				_0x9f6cx13 = this['eventRenderer'] && this['eventRenderer']['call'](this['eventRendererScope'] || this, _0x9f6cx8, _0x9f6cx2, _0x9f6cx8['store'], _0x9f6cxd) || {};
				if (_0x9f6cx13) {
					Ext['apply'](_0x9f6cx2, _0x9f6cx13)
				};
				if (this['showRollupTasks']) {
					var _0x9f6cx10 = this['getRollupRenderData'](_0x9f6cx8);
					if (_0x9f6cx10['length'] > 0) {
						_0x9f6cx20 += this['rollupTemplate']['apply'](_0x9f6cx10)
					}
				};
				_0x9f6cx20 += this['getTemplateForTask'](_0x9f6cx8)['apply'](_0x9f6cx2)
			}
		};
		if (this['enableBaseline']) {
			if (!_0x9f6cx13) {
				_0x9f6cx13 = this['eventRenderer'] && this['eventRenderer']['call'](this, _0x9f6cx8, _0x9f6cx2, _0x9f6cx8['store'], _0x9f6cxd) || {}
			};
			_0x9f6cx20 += this['baselineRenderer'](_0x9f6cx8, _0x9f6cx13, _0x9f6cx6, _0x9f6cx7, _0x9f6cx2['labelRendered'])
		};
		var _0x9f6cx1f = _0x9f6cx8['getDeadlineDate']();
		if (_0x9f6cx1f) {
			_0x9f6cx20 += this['deadlineRenderer'](_0x9f6cx8, _0x9f6cx1f)
		};
		return _0x9f6cx20
	}
	, deadlineRenderer: function (_0x9f6cx1, _0x9f6cx2) {
		return this['deadlineTemplate']['apply']({
			dir: this['rtl'] ? 'right' : 'left'
			, offset: this['getCoordinateFromDate'](_0x9f6cx2)
			, date: this['getFormattedEndDate'](_0x9f6cx2)
			, cls: (new Date() > _0x9f6cx2 && !_0x9f6cx1['isCompleted']()) ? 'gnt-deadline-indicator-late' : ''
		})
	}
	, baselineRenderer: function (_0x9f6cx9, _0x9f6cx3, _0x9f6cx13, _0x9f6cxe, _0x9f6cx6) {
		var _0x9f6cx1 = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cxf = _0x9f6cx9['getBaselineStartDate']()
			, _0x9f6cxb = _0x9f6cx9['getBaselineEndDate']();
		if (_0x9f6cxf && _0x9f6cxb && _0x9f6cx1['intersectSpans'](_0x9f6cxf, _0x9f6cxb, _0x9f6cx13, _0x9f6cxe)) {
			var _0x9f6cx7 = _0x9f6cxb > _0x9f6cxe;
			var _0x9f6cx4 = _0x9f6cx1['betweenLesser'](_0x9f6cxf, _0x9f6cx13, _0x9f6cxe);
			_0x9f6cx3 = _0x9f6cx3 || {};
			var _0x9f6cxa = _0x9f6cx9['isBaselineMilestone']()
				, _0x9f6cx12 = this['getCoordinateFromDate'](_0x9f6cx4 ? _0x9f6cxf : _0x9f6cx13)
				, _0x9f6cxd = this['getCoordinateFromDate'](_0x9f6cx7 ? _0x9f6cxe : _0x9f6cxb)
				, _0x9f6cx8 = Math['max'](1, _0x9f6cxa ? 0 : _0x9f6cxd - _0x9f6cx12)
				, _0x9f6cx5 = this['getTemplateForTask'](_0x9f6cx9, true)
				, _0x9f6cxc = {
					progressBarStyle: _0x9f6cx3['baseProgressBarStyle'] || ''
					, id: 'base-' + _0x9f6cx9['internalId']
					, progressBarWidth: Math['min'](100, _0x9f6cx9['getBaselinePercentDone']()) * _0x9f6cx8 / 100
					, percentDone: _0x9f6cx9['getBaselinePercentDone']()
					, offset: _0x9f6cxa ? (_0x9f6cxd || _0x9f6cx12) - this['getXOffset'](_0x9f6cx9, true) : _0x9f6cx12
					, print: this['_print']
					, width: Math['max'](1, _0x9f6cx8)
					, baseline: true
				};
			var _0x9f6cx2 = '';
			if (_0x9f6cxa) {
				_0x9f6cxc['side'] = Math['round'](0.4 * this['getRowHeight']());
				_0x9f6cx2 = 'sch-gantt-milestone-baseline sch-gantt-baseline-item'
			}
			else {
				if (_0x9f6cx9['isLeaf']()) {
					_0x9f6cx2 = 'sch-gantt-task-baseline sch-gantt-baseline-item'
				}
				else {
					_0x9f6cx2 = 'sch-gantt-parenttask-baseline sch-gantt-baseline-item'
				}
			};
			if (_0x9f6cx7) {
				_0x9f6cx2 += ' sch-event-endsoutside '
			};
			if (!_0x9f6cx4) {
				_0x9f6cx2 += ' sch-event-startsoutside '
			};
			_0x9f6cxc['ctcls'] = _0x9f6cx2 + ' ' + (_0x9f6cx3['basecls'] || '');
			if (!_0x9f6cx6) {
				Ext['apply'](_0x9f6cxc, this['getLabelRenderData'](_0x9f6cx9))
			};
			return _0x9f6cx5['apply'](_0x9f6cxc)
		};
		return ''
	}
	, setupTemplates: function () {
		var _0x9f6cx1 = {
			leftLabel: this['leftLabelField']
			, rightLabel: this['rightLabelField']
			, topLabel: this['topLabelField']
			, bottomLabel: this['bottomLabelField']
			, prefix: this['eventPrefix']
			, taskResizeHandles: this['taskResizeHandles']
			, enableDependencyDragDrop: this['enableDependencyDragDrop'] !== false
			, allowParentTaskDependencies: this['allowParentTaskDependencies'] !== false
			, enableProgressBarResize: this['enableProgressBarResize']
			, rtl: this['rtl']
		};
		var _0x9f6cx2;
		if (!this['eventTemplate']) {
			_0x9f6cx2 = this['taskBodyTemplate'] ? Ext['apply']({
				innerTpl: this['taskBodyTemplate']
			}, _0x9f6cx1) : _0x9f6cx1;
			this['eventTemplate'] = Ext['create']('Ext.ux.Gantt.template.Task', _0x9f6cx2)
		};
		if (!this['parentEventTemplate']) {
			_0x9f6cx2 = this['parentTaskBodyTemplate'] ? Ext['apply']({
				innerTpl: this['parentTaskBodyTemplate']
			}, _0x9f6cx1) : _0x9f6cx1;
			this['parentEventTemplate'] = Ext['create']('Ext.ux.Gantt.template.ParentTask', _0x9f6cx2)
		};
		if (!this['milestoneTemplate']) {
			_0x9f6cx2 = this['milestoneBodyTemplate'] ? Ext['apply']({
				innerTpl: this['milestoneBodyTemplate']
			}, _0x9f6cx1) : _0x9f6cx1;
			this['milestoneTemplate'] = Ext['create']('Ext.ux.Gantt.template.Milestone', _0x9f6cx2)
		};
		if (!this['rollupTemplate']) {
			this['rollupTemplate'] = Ext['create']('Ext.ux.Gantt.template.RollupTask')
		};
		if (!this['deadlineTemplate']) {
			this['deadlineTemplate'] = Ext['create']('Ext.ux.Gantt.template.Deadline')
		}
	}
	, getTaskStore: function () {
		return this['taskStore']
	}
	, getEventStore: function () {
		return this['getTaskStore']()
	}
	, setupGanttEvents: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = this['taskStore'];
		if (this['toggleParentTasksOnClick']) {
			this['on']({
				taskclick: function (_0x9f6cx5, _0x9f6cx4) {
					if (!_0x9f6cx4['isLeaf']() && (!_0x9f6cx1['isTreeFiltered']() || _0x9f6cx1['allowExpandCollapseWhileFiltered'])) {
						var _0x9f6cx3 = function () {
							_0x9f6cx2['fireEvent']['apply'](this, ['taskdblclick']['concat'](Array['prototype']['slice']['apply'](arguments)))
						};
						_0x9f6cx2['on']('taskclick', _0x9f6cx3);
						_0x9f6cx2['unbindListenerTimer'] = setTimeout(function () {
							_0x9f6cx2['un']('taskclick', _0x9f6cx3)
						}, 300);
						_0x9f6cx4['isExpanded']() ? _0x9f6cx4['collapse']() : _0x9f6cx4['expand']()
					}
				}
			})
		}
	}
	, configureLabels: function () {
		Ext['Array']['each'](['left', 'right', 'top', 'bottom'], function (_0x9f6cx5) {
			var _0x9f6cx2 = this[_0x9f6cx5 + 'LabelField'];
			if (_0x9f6cx2) {
				_0x9f6cx2 = Ext['isObject'](_0x9f6cx2) ? Ext['apply']({}, _0x9f6cx2) : _0x9f6cx2;
				if (Ext['isString'](_0x9f6cx2)) {
					_0x9f6cx2 = this[_0x9f6cx5 + 'LabelField'] = {
						dataIndex: _0x9f6cx2
					}
				};
				if (_0x9f6cx2['editor']) {
					var _0x9f6cx1 = _0x9f6cx2['editor'];
					if (!_0x9f6cx1['isComponent']) {
						_0x9f6cx1 = Ext['clone'](_0x9f6cx1)
					};
					_0x9f6cx2['editor'] = Ext['create']('Ext.ux.Gantt.feature.LabelEditor', this, {
						labelPosition: _0x9f6cx5
						, field: _0x9f6cx1
						, dataIndex: _0x9f6cx2['dataIndex']
					})
				};
				this[_0x9f6cx5 + 'LabelField'] = _0x9f6cx2
			}
		}, this);
		this['on']('labeledit_beforestartedit', this['onBeforeLabelEdit'], this)
	}
	, onBeforeTaskDrag: function (_0x9f6cx2, _0x9f6cx1) {
		return !this['readOnly'] && _0x9f6cx1['isDraggable']() !== false && !_0x9f6cx1['isReadOnly']() && (this['allowParentTaskMove'] || _0x9f6cx1['isLeaf']())
	}
	, onDragDropStart: function () {
		if (this['tip']) {
			this['tip']['on']('beforeshow', this['falseReturningFn'])
		}
	}
	, falseReturningFn: function () {
		return false
	}
	, onDragDropEnd: function () {
		if (this['tip']) {
			this['tip']['un']('beforeshow', this['falseReturningFn'])
		}
	}
	, onTaskProgressBarResizeStart: function () {
		if (this['tip']) {
			this['tip']['hide']();
			this['tip']['disable']()
		}
	}
	, onTaskProgressBarResizeEnd: function () {
		if (this['tip']) {
			this['tip']['enable']()
		}
	}
	, onTaskResizeStart: function () {
		var _0x9f6cx1 = this['getScrollable']();
		if (this['tip']) {
			this['tip']['hide']();
			this['tip']['disable']()
		};
		_0x9f6cx1['setDisabled'] && _0x9f6cx1['setDisabled'](true)
	}
	, onTaskResizeEnd: function () {
		var _0x9f6cx1 = this['getScrollable']();
		if (this['tip']) {
			this['tip']['enable']()
		};
		_0x9f6cx1['setDisabled'] && _0x9f6cx1['setDisabled'](false)
	}
	, onBeforeDragCreate: function () {
		return !this['readOnly']
	}
	, onBeforeTaskResize: function (_0x9f6cx1, _0x9f6cx2) {
		return !this['readOnly'] && _0x9f6cx2['getSchedulingMode']() !== 'EffortDriven'
	}
	, onBeforeTaskProgressBarResize: function () {
		return !this['readOnly']
	}
	, onBeforeLabelEdit: function () {
		return !this['readOnly']
	}
	, afterRender: function () {
		this['callParent'](arguments);
		this['getEl']()['on']('mousemove', this['configureFeatures'], this, {
			single: true
		});
		Ext['dd']['ScrollManager']['register'](this['el'])
	}
	, resolveTaskRecord: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['findItemByChild'](_0x9f6cx1);
		if (_0x9f6cx2) {
			return this['getRecord'](_0x9f6cx2)
		};
		return null
	}
	, resolveEventRecord: function (_0x9f6cx1) {
		return this['resolveTaskRecord'](_0x9f6cx1)
	}
	, resolveEventRecordFromResourceRow: function (_0x9f6cx1) {
		return this['resolveTaskRecord'](_0x9f6cx1)
	}
	, triggerHighlightTask: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx6) {
		if (!(_0x9f6cx5 instanceof Ext['data']['Model'])) {
			_0x9f6cx5 = this['taskStore']['getModelById'](_0x9f6cx5)
		};
		if (_0x9f6cx5) {
			_0x9f6cx5['isHighlighted'] = _0x9f6cx2;
			var _0x9f6cx4 = this['getRow'](_0x9f6cx5);
			if (_0x9f6cx4) {
				Ext['fly'](_0x9f6cx4)[_0x9f6cx2 ? 'addCls' : 'removeCls']('sch-gantt-task-highlighted')
			};
			if (_0x9f6cx6 !== false) {
				for (var _0x9f6cx3 = 0, _0x9f6cx1 = _0x9f6cx5['successors']['length']; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
					var _0x9f6cx7 = _0x9f6cx5['successors'][_0x9f6cx3];
					this[(_0x9f6cx2 ? '' : 'un') + 'highlightDependency'](_0x9f6cx7);
					this[(_0x9f6cx2 ? '' : 'un') + 'highlightTask'](_0x9f6cx7['getTargetTask'](), _0x9f6cx6)
				}
			}
		}
	}
	, highlightTask: function (_0x9f6cx2, _0x9f6cx1) {
		this['triggerHighlightTask'](_0x9f6cx2, true, _0x9f6cx1)
	}
	, unhighlightTask: function (_0x9f6cx1, _0x9f6cx2) {
		this['triggerHighlightTask'](_0x9f6cx1, false, _0x9f6cx2)
	}
	, highlightTasksBy: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		_0x9f6cx1 = _0x9f6cx1 || _0x9f6cx5;
		_0x9f6cx5['taskStore']['getRoot']()['cascadeBy'](function (_0x9f6cx3) {
			_0x9f6cx2['call'](_0x9f6cx1, _0x9f6cx3) && _0x9f6cx5['highlightTask'](_0x9f6cx3, false)
		})
	}
	, clearHighlightedTasks: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['ownerGrid']['getDependencyView']();
		_0x9f6cx1['taskStore']['getRoot']()['cascadeBy'](function (_0x9f6cx5) {
			_0x9f6cx1['unhighlightTask'](_0x9f6cx5, false)
		});
		Ext['Array']['each'](_0x9f6cx2['getHighlightedDependencies'](), _0x9f6cx2['unhighlightDependency'])
	}
	, getRowClass: function (_0x9f6cx2) {
		var _0x9f6cx1 = '';
		if (_0x9f6cx2['isHighlighted']) {
			_0x9f6cx1 = 'sch-gantt-task-highlighted'
		};
		if (this['externalGetRowClass']) {
			_0x9f6cx1 += ' ' + (this['externalGetRowClass']['apply'](this, arguments) || '')
		};
		return _0x9f6cx1
	}
	, clearSelectedTasksAndDependencies: function () {
		this['ownerGrid']['getDependencyView']()['clearSelectedDependencies']();
		this['el']['select']('.sch-gantt-task-highlighted')['removeCls']('sch-gantt-task-highlighted');
		this['taskStore']['getRootNode']()['cascadeBy'](function (_0x9f6cx1) {
			_0x9f6cx1['isHighlighted'] = false
		})
	}
	, getCriticalPaths: function () {
		return this['taskStore']['getCriticalPaths']()
	}
	, highlightCriticalPaths: function () {
		var _0x9f6cx2 = this;
		_0x9f6cx2['clearSelectedTasksAndDependencies']();
		var _0x9f6cx3 = _0x9f6cx2['getCriticalPaths']()
			, _0x9f6cx5 = _0x9f6cx2['ownerGrid']['getDependencyView']()
			, _0x9f6cx1 = {};
		Ext['Array']['each'](_0x9f6cx3, function (_0x9f6cx4) {
			Ext['Array']['each'](_0x9f6cx4, function (_0x9f6cxf) {
				for (var _0x9f6cxb = 0, _0x9f6cx7 = _0x9f6cxf['length']; _0x9f6cxb < _0x9f6cx7; _0x9f6cxb++) {
					var _0x9f6cx6 = _0x9f6cxf[_0x9f6cxb];
					if (_0x9f6cx6['isLeaf']()) {
						_0x9f6cx6['bubble'](function (_0x9f6cx9) {
							if (!_0x9f6cx9['isRoot']() && !_0x9f6cx9['isProject'] && (_0x9f6cx9 === _0x9f6cx6 || _0x9f6cx9['isCritical']())) {
								_0x9f6cx2['highlightTask'](_0x9f6cx9, false)
							}
						})
					}
					else {
						_0x9f6cx6['cascadeBy'](function (_0x9f6cx9) {
							if (_0x9f6cx9 === _0x9f6cx6 || _0x9f6cx9['isCritical']()) {
								_0x9f6cx2['highlightTask'](_0x9f6cx9, false)
							}
						})
					};
					var _0x9f6cxd = _0x9f6cx6['getOutgoingDependencies']()
						, _0x9f6cxe = _0x9f6cxd['length']
						, _0x9f6cxa;
					for (var _0x9f6cx8 = 0; _0x9f6cx8 < _0x9f6cxe; _0x9f6cx8++) {
						_0x9f6cxa = _0x9f6cxd[_0x9f6cx8];
						if (_0x9f6cx1[_0x9f6cxa['getTargetId']()]) {
							_0x9f6cx5['highlightDependency'](_0x9f6cxa)
						}
					};
					_0x9f6cx1[_0x9f6cx6['getId']()] = true
				}
			})
		});
		_0x9f6cx2['addCls']('sch-gantt-critical-chain')
	}
	, unhighlightCriticalPaths: function () {
		this['removeCls']('sch-gantt-critical-chain');
		this['clearSelectedTasksAndDependencies']()
	}
	, getXOffset: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = 0;
		if (_0x9f6cx2['isMilestone'](_0x9f6cx1)) {
			_0x9f6cx5 = Math['floor'](this['getRowHeight']() * 0.3535533905932738) - 2
		};
		return _0x9f6cx5
	}
	, onDestroy: function () {
		if (this['rendered']) {
			Ext['dd']['ScrollManager']['unregister'](this['el'])
		};
		clearTimeout(this['scrollTimer']);
		clearTimeout(this['unbindListenerTimer']);
		this['taskDragDrop'] && Ext['destroy'](this['taskDragDrop']);
		this['callParent'](arguments)
	}
	, highlightDependency: function (_0x9f6cx1) {
		this['ownerGrid']['getDependencyView']()['highlightDependency'](_0x9f6cx1)
	}
	, unhighlightDependency: function (_0x9f6cx1) {
		this['ownerGrid']['getDependencyView']()['unhighlightDependency'](_0x9f6cx1)
	}
	, getLeftEditor: function () {
		return this['leftLabelField'] && this['leftLabelField']['editor']
	}
	, getRightEditor: function () {
		return this['rightLabelField'] && this['rightLabelField']['editor']
	}
	, getTopEditor: function () {
		return this['topLabelField'] && this['topLabelField']['editor']
	}
	, getBottomEditor: function () {
		return this['bottomLabelField'] && this['bottomLabelField']['editor']
	}
	, editLeftLabel: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getLeftEditor']();
		if (_0x9f6cx2) {
			_0x9f6cx2['edit'](_0x9f6cx1)
		}
	}
	, editRightLabel: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getRightEditor']();
		if (_0x9f6cx2) {
			_0x9f6cx2['edit'](_0x9f6cx1)
		}
	}
	, editTopLabel: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getTopEditor']();
		if (_0x9f6cx2) {
			_0x9f6cx2['edit'](_0x9f6cx1)
		}
	}
	, editBottomLabel: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getBottomEditor']();
		if (_0x9f6cx2) {
			_0x9f6cx2['edit'](_0x9f6cx1)
		}
	}
	, onRowUpdate: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = this['store']['getAt'](_0x9f6cx5);
		if (_0x9f6cx1 && _0x9f6cx1['previous']) {
			var _0x9f6cx3 = _0x9f6cx1['previous'];
			if (_0x9f6cx1['parentNode'] && (_0x9f6cx1['rollupField'] in _0x9f6cx3 || _0x9f6cx1['getRollup']())) {
				this['refreshNode'](_0x9f6cx1['parentNode'])
			};
			if (_0x9f6cx1['readOnlyField'] in _0x9f6cx3) {
				this['refreshNotReadOnlyChildNodes'](_0x9f6cx1)
			}
		}
	}
	, onTaskStoreUpdate: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1, _0x9f6cx7, _0x9f6cx3) {
		var _0x9f6cx4 = _0x9f6cx2['previous'];
		if (_0x9f6cx4 && _0x9f6cx2['getRollup']() && _0x9f6cx2['parentNode'] && !_0x9f6cx2['parentNode']['expanded'] && _0x9f6cx5['isUndoingOrRedoing']()) {
			this['refreshNode'](_0x9f6cx2['parentNode'])
		}
	}
	, handleScheduleEvent: function (_0x9f6cx5) {
		var _0x9f6cx1 = _0x9f6cx5['getTarget']('.' + this['timeCellCls'], 3);
		if (_0x9f6cx1) {
			var _0x9f6cx2 = this['findRowByChild'](_0x9f6cx1);
			if (_0x9f6cx5['type']['indexOf']('pinch') >= 0) {
				this['fireEvent']('schedule' + _0x9f6cx5['type'], this, _0x9f6cx5)
			}
			else {
				this['fireEvent']('schedule' + _0x9f6cx5['type'], this, this['getDateFromDomEvent'](_0x9f6cx5, 'floor'), this['indexOf'](_0x9f6cx2), _0x9f6cx5)
			}
		}
	}
	, scrollEventIntoView: function (_0x9f6cx4, _0x9f6cx7, _0x9f6cx5, _0x9f6cxe, _0x9f6cxd) {
		_0x9f6cxd = _0x9f6cxd || this;
		var _0x9f6cxc = this;
		var _0x9f6cxa = this['taskStore'];
		var _0x9f6cx13 = function (_0x9f6cx12, _0x9f6cxf) {
			_0x9f6cxc['up']('panel')['scrollTask']['cancel']();
			_0x9f6cxc['scrollElementIntoView'](_0x9f6cx12, _0x9f6cxf, _0x9f6cx5);
			if (_0x9f6cx7) {
				if (typeof _0x9f6cx7 === 'boolean') {
					_0x9f6cx12['highlight']()
				}
				else {
					_0x9f6cx12['highlight'](null, _0x9f6cx7)
				}
			};
			_0x9f6cxe && _0x9f6cxe['call'](_0x9f6cxd)
		};
		if (!_0x9f6cx4['isVisible']()) {
			_0x9f6cx4['bubble'](function (_0x9f6cxf) {
				_0x9f6cxf['expand']()
			})
		};
		var _0x9f6cxb;
		var _0x9f6cx3 = _0x9f6cx4['getStartDate']()
			, _0x9f6cx9 = _0x9f6cx4['getEndDate']()
			, _0x9f6cx2 = Boolean(_0x9f6cx3 && _0x9f6cx9)
			, _0x9f6cx1;
		if (_0x9f6cx2) {
			var _0x9f6cx8 = this['timeAxis'];
			if (!_0x9f6cx8['dateInAxis'](_0x9f6cx3) || !_0x9f6cx8['dateInAxis'](_0x9f6cx9)) {
				var _0x9f6cx6 = _0x9f6cx8['getEnd']() - _0x9f6cx8['getStart']();
				_0x9f6cx8['setTimeSpan'](new Date(_0x9f6cx3['getTime']() - _0x9f6cx6 / 2), new Date(_0x9f6cx9['getTime']() + _0x9f6cx6 / 2))
			};
			_0x9f6cx1 = this['getElementsFromEventRecord'](_0x9f6cx4);
			_0x9f6cxb = _0x9f6cx1 && _0x9f6cx1[0]
		}
		else {
			_0x9f6cxb = this['getNode'](_0x9f6cx4);
			if (_0x9f6cxb) {
				_0x9f6cxb = Ext['fly'](_0x9f6cxb)['down'](this['getCellSelector']())
			}
		};
		if (_0x9f6cxb) {
			_0x9f6cx13(_0x9f6cxb, _0x9f6cx2)
		}
		else {
			if (this['bufferedRenderer']) {
				this['scrollTimer'] = Ext['Function']['defer'](function () {
					_0x9f6cxc['bufferedRenderer']['scrollTo'](_0x9f6cx4, false, function () {
						var _0x9f6cxf = _0x9f6cxc['getElementsFromEventRecord'](_0x9f6cx4);
						_0x9f6cxb = _0x9f6cxf && _0x9f6cxf[0];
						if (_0x9f6cxb) {
							_0x9f6cx13(_0x9f6cxb, true)
						}
						else {
							_0x9f6cxe && _0x9f6cxe['call'](_0x9f6cxd)
						}
					})
				}, 10)
			}
		}
	}
	, isElementRenderedAndDisplayed: function (_0x9f6cx1) {
		if (_0x9f6cx1 instanceof Ext.ux.Gantt['model']['Task']) {
			_0x9f6cx1 = this['view']['getRowNode'](_0x9f6cx1)
		};
		return !!(_0x9f6cx1 && Ext['fly'](_0x9f6cx1)['getHeight']())
	}
	, getItemBox: function (_0x9f6cx7) {
		var _0x9f6cx6 = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cx1b = this
			, _0x9f6cxb = null
			, _0x9f6cxc = _0x9f6cx1b['getViewStartDate']()
			, _0x9f6cx9 = _0x9f6cx1b['getViewEndDate']()
			, _0x9f6cx15 = _0x9f6cx7['isMilestone']() && _0x9f6cx7['getEndDate']() || _0x9f6cx7['getStartDate']()
			, _0x9f6cx1e = _0x9f6cx7['getEndDate']()
			, _0x9f6cx13 = _0x9f6cx1b['getTaskStore']()
			, _0x9f6cx17, _0x9f6cx4, _0x9f6cx16, _0x9f6cxa, _0x9f6cx2, _0x9f6cx5, _0x9f6cx10, _0x9f6cxe, _0x9f6cx1, _0x9f6cx3, _0x9f6cx8;
		_0x9f6cxb = (_0x9f6cx15 && _0x9f6cx1e && _0x9f6cx1b['store']['indexOf'](_0x9f6cx7) >= 0 && (!_0x9f6cx13['isTreeFiltered']() || _0x9f6cx13['lastTreeFilter']['filter']['call'](_0x9f6cx13['lastTreeFilter']['scope'] || _0x9f6cx13, _0x9f6cx7))) || null;
		if (_0x9f6cxb) {
			_0x9f6cx16 = _0x9f6cx1b['getNode'](_0x9f6cx7);
			if (_0x9f6cx16 && _0x9f6cx1b['isElementRenderedAndDisplayed'](_0x9f6cx16)) {
				var _0x9f6cx14, _0x9f6cxd;
				var _0x9f6cx12 = _0x9f6cx1b['getNodeContainer']();
				var _0x9f6cx11 = 40;
				if (_0x9f6cx7['isMilestone']()) {
					var _0x9f6cx18 = _0x9f6cx1b['getRowHeight']() * 0.16;
					_0x9f6cx2 = Ext['fly'](_0x9f6cx16)['getOffsetsTo'](_0x9f6cx12)[1];
					_0x9f6cx14 = _0x9f6cx2 + _0x9f6cx18;
					_0x9f6cxd = _0x9f6cx2 + _0x9f6cx1b['getRowHeight']() - _0x9f6cx18
				}
				else {
					var _0x9f6cxf = Ext['fly'](_0x9f6cx16)['down']('.' + Ext['baseCSSPrefix'] + 'grid-cell-inner > .sch-event-wrap .sch-gantt-item', true) || _0x9f6cx16;
					_0x9f6cx14 = Ext['fly'](_0x9f6cxf)['getOffsetsTo'](_0x9f6cx12)[1];
					_0x9f6cxd = _0x9f6cx14 + Ext['fly'](_0x9f6cxf)['getHeight']()
				};
				_0x9f6cx17 = _0x9f6cx1b['getCoordinateFromDate'](_0x9f6cx6['min'](_0x9f6cx6['max'](_0x9f6cx15, _0x9f6cxc), _0x9f6cx9));
				_0x9f6cx4 = _0x9f6cx1b['getCoordinateFromDate'](_0x9f6cx6['max'](_0x9f6cx6['min'](_0x9f6cx1e, _0x9f6cx9), _0x9f6cxc));
				if (_0x9f6cxc['getTime']() > _0x9f6cx15['getTime']()) {
					_0x9f6cx17 -= _0x9f6cx11
				};
				if (_0x9f6cxc['getTime']() > _0x9f6cx1e['getTime']()) {
					_0x9f6cx4 -= _0x9f6cx11
				};
				if (_0x9f6cx9['getTime']() < _0x9f6cx15['getTime']()) {
					_0x9f6cx17 += _0x9f6cx11
				};
				if (_0x9f6cx9['getTime']() < _0x9f6cx1e['getTime']()) {
					_0x9f6cx4 += _0x9f6cx11
				};
				_0x9f6cxb = {
					rendered: true
					, start: _0x9f6cx17
					, end: _0x9f6cx4
					, top: Math['round'](_0x9f6cx14)
					, bottom: Math['round'](_0x9f6cxd)
				}
			}
			else {
				_0x9f6cxb = {
					rendered: false
					, start: _0x9f6cx1b['getCoordinateFromDate'](_0x9f6cx6['max'](_0x9f6cx15, _0x9f6cxc))
					, end: _0x9f6cx1b['getCoordinateFromDate'](_0x9f6cx6['min'](_0x9f6cx1e, _0x9f6cx9))
				};
				_0x9f6cx10 = _0x9f6cx1b['all']['startIndex'];
				_0x9f6cxe = _0x9f6cx1b['getRecord'](_0x9f6cx10);
				_0x9f6cx1 = _0x9f6cx1b['all']['endIndex'];
				_0x9f6cx3 = _0x9f6cx1b['getRecord'](_0x9f6cx1);
				if (_0x9f6cxe && _0x9f6cx3) {
					_0x9f6cx5 = _0x9f6cx1b['getRowHeight']();
					if (_0x9f6cx7['isAbove'](_0x9f6cxe)) {
						_0x9f6cxb['top'] = -_0x9f6cx5;
						_0x9f6cxb['bottom'] = _0x9f6cxb['top'] + _0x9f6cx5;
						_0x9f6cxb['relPos'] = 'before'
					}
					else {
						if (_0x9f6cx7 == _0x9f6cx3 || _0x9f6cx7['isAbove'](_0x9f6cx3)) {
							_0x9f6cxa = _0x9f6cx1b['indexOf'](_0x9f6cx7);
							_0x9f6cxb['top'] = _0x9f6cxa * _0x9f6cx5;
							_0x9f6cxb['bottom'] = _0x9f6cxb['top'] + _0x9f6cx5
						}
						else {
							_0x9f6cx8 = _0x9f6cx1b['getNode'](_0x9f6cx1);
							if (_0x9f6cx1b['isElementRenderedAndDisplayed'](_0x9f6cx8)) {
								_0x9f6cxb['top'] = Ext['fly'](_0x9f6cx8)['getOffsetsTo'](_0x9f6cx1b['getNodeContainer']())[1] + Ext['fly'](_0x9f6cx8)['getHeight']()
							}
							else {
								_0x9f6cxb['top'] = (_0x9f6cx1 + 1) * _0x9f6cx5
							};
							_0x9f6cxb['bottom'] = _0x9f6cxb['top'] + _0x9f6cx5;
							_0x9f6cxb['relPos'] = 'after'
						}
					}
				}
				else {
					_0x9f6cxb = null
				}
			};
			if (_0x9f6cxb) {
				_0x9f6cxb = _0x9f6cx1b['adjustItemBox'](_0x9f6cx7, _0x9f6cxb)
			}
		};
		return _0x9f6cxb
	}
	, adjustItemBox: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = _0x9f6cx5;
		if (_0x9f6cx2['isMilestone']()) {
			_0x9f6cx1 = {
				rendered: _0x9f6cx5['rendered']
				, top: _0x9f6cx5['top']
				, bottom: _0x9f6cx5['bottom'] + 1
				, start: _0x9f6cx5['start'] - 8
				, end: _0x9f6cx5['end'] + 8
				, relPos: _0x9f6cx5['relPos']
			}
		};
		return _0x9f6cx1
	}
	, getDataForTooltipTpl: function (_0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx4 = _0x9f6cx3['getAttribute']('rolluptaskid');
		if (_0x9f6cx4) {
			var _0x9f6cx2 = this['getTaskStore']()['getNodeById'](_0x9f6cx4);
			if (_0x9f6cx2) {
				_0x9f6cx1 = _0x9f6cx2
			}
		};
		var _0x9f6cx5 = this['callParent']([_0x9f6cx1, _0x9f6cx3]);
		_0x9f6cx5['_useBaselineData'] = Boolean(Ext['fly'](_0x9f6cx3)['up']('.sch-gantt-baseline-item'));
		return _0x9f6cx5
	}
});
Ext.define('Ext.ux.Gantt.patches.RightClick', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.ux.Gantt.view.Gantt'
	, maxVersion: '6.0.1'
	, overrides: {
		handleScheduleBarEvent: function (_0x9f6cx1) {
			if (Ext['isGecko'] && _0x9f6cx1['type'] === 'click' && _0x9f6cx1['button'] === 2) {
				return false
			};
			return this['callParent'](arguments)
		}
	}
});
Ext.define('Ext.ux.Gantt.widget.ConstraintResolutionForm', {
	extend: 'Ext.form.Panel'
	, requires: ['Ext.form.RadioGroup', 'Ext.form.field.Display']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.constraintresolutionform'
	, legacyMode: false
	, config: {
		resolutionContext: null
		, dateFormat: null
	}
	, bodyPadding: 10
	, autoScroll: true
	, initComponent: function () {
		var _0x9f6cx1 = this;
		Ext['isObject'](_0x9f6cx1['resolutionContext']) || Ext['Error']['raise']('can\'t initialize constration resolution form, resolution context is not given!');
		_0x9f6cx1['setupItemsFromResolutionContext'](_0x9f6cx1['resolutionContext']);
		_0x9f6cx1['setupFooterFromResolutionContext'](_0x9f6cx1['resolutionContext']);
		_0x9f6cx1['callParent'](arguments)
	}
	, setupItemsFromResolutionContext: function (_0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1;
		Ext['isObject'](_0x9f6cx2) && Ext['isArray'](_0x9f6cx2['resolutions']) && Ext['isFunction'](_0x9f6cx2['getCancelActionOption']) || Ext['Error']['raise']('Invalid resolution context provided!');
		_0x9f6cx1 = Ext['Array']['map'](_0x9f6cx2['resolutions'], function (_0x9f6cx4, _0x9f6cx3) {
			return {
				xtype: 'radio'
				, boxLabel: _0x9f6cx5['getResolutionOptionDescription'](_0x9f6cx4, _0x9f6cx2)
				, name: 'resolutionOption'
				, checked: _0x9f6cx4 === _0x9f6cx2['getCancelActionOption']()
				, inputValue: _0x9f6cx3
				, tabIndex: _0x9f6cx3
			}
		});
		_0x9f6cx5['items'] = [{
			xtype: 'displayfield'
			, itemId: 'description'
			, value: _0x9f6cx5['getConstraintViolationDescription'](_0x9f6cx2)
			, anchor: '-0'
		}, {
			xtype: 'radiogroup'
			, itemId: 'options'
			, columns: 1
			, title: _0x9f6cx5.L('Resolution options')
			, allowBlank: false
			, items: _0x9f6cx1
			, anchor: '-0'
		}]
	}
	, setupFooterFromResolutionContext: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		Ext['isObject'](_0x9f6cx1) && Ext['isArray'](_0x9f6cx1['resolutions']) || Ext['Error']['raise']('Invalid resolution context provided!');
		_0x9f6cx2['fbar'] = {
			itemId: 'footer-tb'
			, items: [{
				xtype: 'checkbox'
				, itemId: 'dont-ask-cb'
				, boxLabel: _0x9f6cx2.L('Don\'t ask again')
				, tabIndex: _0x9f6cx1['resolutions']['length'] + 1
			}, '->', {
				text: _0x9f6cx2.L('OK')
				, itemId: 'ok-btn'
				, formBind: true
				, tabIndex: _0x9f6cx1['resolutions']['length'] + 2
				, handler: _0x9f6cx2['onUserActionOk']
				, scope: _0x9f6cx2
			}, {
				text: _0x9f6cx2.L('Cancel')
				, itemId: 'cancel-btn'
				, tabIndex: _0x9f6cx1['resolutions']['length'] + 3
				, handler: _0x9f6cx2['onUserActionCancel']
				, scope: _0x9f6cx2
			}]
		}
	}
	, getDontAskValue: function () {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['down']('#dont-ask-cb')['getValue']()
	}
	, getConstraintViolationDescription: function (_0x9f6cx1) {
		var _0x9f6cx6 = this
			, _0x9f6cx4, _0x9f6cx7, _0x9f6cx9, _0x9f6cx3, _0x9f6cx5, _0x9f6cx2, _0x9f6cx8;
		Ext['isObject'](_0x9f6cx1) && Ext['isDefined'](_0x9f6cx1['title']) && Ext['isDefined'](_0x9f6cx1['task']) || Ext['Error']['raise']('Invalid resolution context provided!');
		_0x9f6cx4 = _0x9f6cx1['title'];
		_0x9f6cx3 = _0x9f6cx1['task'];
		_0x9f6cx5 = _0x9f6cx3['getName']() || '';
		_0x9f6cx9 = _0x9f6cx3['getConstraintClass']();
		_0x9f6cx2 = _0x9f6cx6['dateFormat'] || _0x9f6cx6.L('dateFormat') || Ext['Date']['defaultFormat'];
		_0x9f6cx7 = _0x9f6cx9 && _0x9f6cx9['getDisplayableConstraintDateForFormat'](_0x9f6cx1['date'], _0x9f6cx2, _0x9f6cx3) || _0x9f6cx1['date'];
		if (_0x9f6cx1['description']) {
			_0x9f6cx8 = _0x9f6cx1['description']
		}
		else {
			if (_0x9f6cx1['getConstraintViolationDescription']) {
				_0x9f6cx8 = _0x9f6cx1['getConstraintViolationDescription'](_0x9f6cx1, _0x9f6cx6)
			}
			else {
				_0x9f6cx8 = _0x9f6cx7 ? Ext['String']['format'](_0x9f6cx6.L('Task {0} violates constraint {1} {2}'), _0x9f6cx5, _0x9f6cx4, Ext['Date']['format'](_0x9f6cx7, _0x9f6cx2)) : Ext['String']['format'](_0x9f6cx6.L('Task {0} violates constraint {1}'), _0x9f6cx5, _0x9f6cx4)
			}
		};
		return _0x9f6cx8
	}
	, getResolutionOptionDescription: function (_0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx8 = this
			, _0x9f6cx4 = Ext['String']
			, _0x9f6cx5, _0x9f6cx6, _0x9f6cxa, _0x9f6cx2;
		Ext['isObject'](_0x9f6cx1) || Ext['Error']['raise']('Invalid resolution context provided!');
		_0x9f6cx5 = _0x9f6cx1['task'];
		_0x9f6cxa = _0x9f6cx5['getConstraintClass']();
		_0x9f6cx2 = _0x9f6cx8['dateFormat'] || _0x9f6cx8.L('dateFormat') || Ext['Date']['defaultFormat'];
		_0x9f6cx6 = _0x9f6cxa && _0x9f6cxa['getDisplayableConstraintDateForFormat'](_0x9f6cx1['date'], _0x9f6cx2, _0x9f6cx5) || _0x9f6cx1['date'];
		var _0x9f6cxc = [_0x9f6cx3['title']];
		if (_0x9f6cx3['getTitleValues']) {
			_0x9f6cxc = _0x9f6cxc['concat'](_0x9f6cx3['getTitleValues'](_0x9f6cx1, _0x9f6cx8));
			for (var _0x9f6cx7 = _0x9f6cxc['length'] - 1; _0x9f6cx7 >= 0; _0x9f6cx7--) {
				if (_0x9f6cxc[_0x9f6cx7] instanceof Date) {
					_0x9f6cxc[_0x9f6cx7] = Ext['Date']['format'](_0x9f6cxc[_0x9f6cx7], _0x9f6cx2)
				}
			}
		}
		else {
			_0x9f6cxc = _0x9f6cxc['concat']([_0x9f6cx6 && Ext['Date']['format'](_0x9f6cx6, _0x9f6cx2) || ''])
		};
		_0x9f6cx4['format']['apply'](_0x9f6cx4, _0x9f6cxc);
		return _0x9f6cx4['format']['apply'](_0x9f6cx4, _0x9f6cxc)
	}
	, onUserActionOk: function (_0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1;
		_0x9f6cx1 = _0x9f6cx5['getValues']();
		_0x9f6cx1['dontAsk'] = _0x9f6cx5['getDontAskValue']();
		_0x9f6cx5['fireEvent']('ok', _0x9f6cx5, _0x9f6cx1)
	}
	, onUserActionCancel: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['fireEvent']('cancel', _0x9f6cx2)
	}
	, getOptimalHeight: function (_0x9f6cx7) {
		var _0x9f6cx6 = this
			, _0x9f6cx1, _0x9f6cx8, _0x9f6cx4, _0x9f6cx3, _0x9f6cx5, _0x9f6cx2;
		if (_0x9f6cx7) {
			_0x9f6cx1 = _0x9f6cx6['getXY']();
			_0x9f6cx8 = _0x9f6cx6['getWidth']();
			_0x9f6cx6['setXY']([-10000, -10000]);
			_0x9f6cx6['setWidth'](_0x9f6cx7)
		};
		_0x9f6cx4 = _0x9f6cx6['getComponent']('options');
		_0x9f6cx3 = _0x9f6cx4['getEl']()['getOffsetsTo'](_0x9f6cx6['body']);
		_0x9f6cx2 = _0x9f6cx6['getDockedComponent']('footer-tb');
		_0x9f6cx5 = _0x9f6cx3[1] + Ext['getDom'](_0x9f6cx4['getEl']())['scrollHeight'] + 2 * _0x9f6cx6['bodyPadding'] + _0x9f6cx2['getHeight']() + 10;
		if (_0x9f6cx7) {
			_0x9f6cx6['setWidth'](_0x9f6cx8);
			_0x9f6cx6['setXY'](_0x9f6cx1)
		};
		return _0x9f6cx5
	}
});
Ext.define('Ext.ux.Gantt.widget.ConstraintResolutionWindow', {
	extend: 'Ext.window.Window'
	, alias: 'widget.constraintresolutionwindow'
	, requires: ['Ext.ux.Gantt.widget.ConstraintResolutionForm']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, modal: true
	, closable: true
	, resizable: true
	, collapsible: false
	, border: false
	, bodyBorder: false
	, config: {
		resolutionContext: null
		, dateFormat: null
	}
	, form: null
	, minWidth: 300
	, initComponent: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['title'] = _0x9f6cx1.L('Constraint violation');
		_0x9f6cx1['setupItems']();
		_0x9f6cx1['height'] = Math['round'](Ext['dom']['Element']['getViewportHeight']() / 3);
		_0x9f6cx1['width'] = Math['round'](Ext['dom']['Element']['getViewportWidth']() / 4);
		_0x9f6cx1['callParent'](arguments);
		_0x9f6cx1['on']('afterlayout', _0x9f6cx1['onAfterOptimalLayout'], _0x9f6cx1, {
			single: true
		})
	}
	, setupItems: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['layout'] = 'fit';
		_0x9f6cx1['form'] = new Ext.ux.Gantt['widget'].ConstraintResolutionForm({
			resolutionContext: _0x9f6cx1['getResolutionContext']()
			, dateFormat: _0x9f6cx1['getDateFormat']()
			, bubbleEvents: ['ok', 'cancel']
		});
		_0x9f6cx1['items'] = _0x9f6cx1['form']
	}
	, onAfterOptimalLayout: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx3, _0x9f6cx1, _0x9f6cx4, _0x9f6cx2;
		_0x9f6cx3 = _0x9f6cx5['getHeight']();
		_0x9f6cx1 = _0x9f6cx5['form']['getHeight']();
		_0x9f6cx4 = _0x9f6cx5['form']['getOptimalHeight']();
		_0x9f6cx2 = _0x9f6cx4 + _0x9f6cx3 - _0x9f6cx1;
		_0x9f6cx3 != _0x9f6cx2 && _0x9f6cx5['setHeight'](_0x9f6cx2)
	}
});
Ext.define('Ext.ux.Gantt.plugin.ConstraintResolutionGui', {
	extend: 'Ext.AbstractPlugin'
	, alias: 'plugin.constraintresolutiongui'
	, requires: ['Ext.ux.Gantt.widget.ConstraintResolutionWindow']
	, config: {
		dateFormat: null
	}
	, cmpDetacher: null
	, storeDetacher: null
	, storedResolutions: null
	, window: null
	, init: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['callParent'](arguments);
		if (!_0x9f6cx1['disabled']) {
			_0x9f6cx1['enable']()
		}
	}
	, destroy: function () {
		this['window'] && this['window']['destroy']();
		this['callParent'](arguments)
	}
	, enable: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getCmp']();
		_0x9f6cx2['callParent']();
		if (_0x9f6cx1['rendered']) {
			_0x9f6cx2['attachToTaskStore']()
		}
		else {
			_0x9f6cx2['cmpDetacher'] = _0x9f6cx1['on']('afterrender', function () {
				_0x9f6cx2['attachToTaskStore']()
			}, null, {
				destroyable: true
				, single: true
			})
		}
	}
	, disable: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getCmp']();
		_0x9f6cx2['callParent']();
		if (_0x9f6cx1['rendered']) {
			_0x9f6cx2['detachFromTaskStore']()
		}
		else {
			_0x9f6cx2['cmpDetacher'] && Ext['destroy'](_0x9f6cx2['cmpDetacher']);
			_0x9f6cx2['cmpDetacher'] = null
		}
	}
	, attachToTaskStore: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx2, _0x9f6cx1;
		if (!_0x9f6cx5['storeDetacher']) {
			_0x9f6cx2 = _0x9f6cx5['getCmp']();
			_0x9f6cx1 = _0x9f6cx2['getTaskStore']();
			_0x9f6cx5['storeDetacher'] = _0x9f6cx2['mon'](_0x9f6cx1, 'constraintconflict', _0x9f6cx5['onConstraintConflict'], _0x9f6cx5, {
				destroyable: true
			})
		}
	}
	, detachFromTaskStore: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['storeDetacher'] && Ext['destroy'](_0x9f6cx1['storeDetacher']);
		_0x9f6cx1['storeDetacher'] = null
	}
	, onConstraintConflict: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx8 = this
			, _0x9f6cxc = _0x9f6cx8['getCmp']()
			, _0x9f6cxa = _0x9f6cxc['lockedGrid']['getView']()
			, _0x9f6cx5 = _0x9f6cxc['normalGrid']['getView']()
			, _0x9f6cx4 = _0x9f6cxc['getDependencyView']()
			, _0x9f6cx9 = _0x9f6cx5['indexOf'](_0x9f6cx2)
			, _0x9f6cx6, _0x9f6cx7 = {
				destroy: function () {
					Ext['destroy'](_0x9f6cx6)
				}
			};

		function _0x9f6cx3() {
			if (_0x9f6cx9 != -1) {
				_0x9f6cxa['refreshNode'](_0x9f6cx9);
				_0x9f6cx5['refreshNode'](_0x9f6cx9);
				_0x9f6cx4['updateDependencies'](_0x9f6cx2['getAllDependencies']())
			}
		}
		_0x9f6cx3();
		if (!_0x9f6cx8['hasStoredResolutionForContext'](_0x9f6cx1)) {
			_0x9f6cx8['window'] = new Ext.ux.Gantt['widget'].ConstraintResolutionWindow({
				dateFormat: _0x9f6cx8['getDateFormat']()
				, resolutionContext: _0x9f6cx1
			});
			_0x9f6cx6 = _0x9f6cx8['window']['on']({
				ok: Ext['Function']['bind'](_0x9f6cx8['onUserActionOk'], _0x9f6cx8, [_0x9f6cx1, _0x9f6cx3, _0x9f6cx8['window'], _0x9f6cx7], true)
				, cancel: Ext['Function']['bind'](_0x9f6cx8['onUserActionCancel'], _0x9f6cx8, [_0x9f6cx1, _0x9f6cx3, _0x9f6cx8['window'], _0x9f6cx7], true)
				, close: Ext['Function']['bind'](_0x9f6cx8['onUserActionClose'], _0x9f6cx8, [_0x9f6cx1, _0x9f6cx3, _0x9f6cx7], true)
				, destroyable: true
			});
			_0x9f6cxc['completeEdit']();
			_0x9f6cx8['window']['show']()
		}
		else {
			_0x9f6cx8['resolveSilently'](_0x9f6cx1, _0x9f6cx3)
		}
	}
	, getStoredResolutions: function () {
		var _0x9f6cx1 = this;
		if (!_0x9f6cx1['storedResolutions']) {
			_0x9f6cx1['storedResolutions'] = {}
		};
		return _0x9f6cx1['storedResolutions']
	}
	, getStoredResolutionKeyForContext: function (_0x9f6cx1) {
		Ext['isObject'](_0x9f6cx1) && Ext['isString'](_0x9f6cx1['constraintClassName']) && Ext['isArray'](_0x9f6cx1['resolutions']) || Ext['Error']['raise']('can\'t get stored resolution key for context, invalid context is given!');
		return _0x9f6cx1['constraintClassName'] + _0x9f6cx1['resolutions']['length']
	}
	, hasStoredResolutionForContext: function (_0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['getStoredResolutionKeyForContext'](_0x9f6cx2)
			, _0x9f6cx3 = _0x9f6cx5['getStoredResolutions']();
		return Ext['isDefined'](_0x9f6cx3[_0x9f6cx1])
	}
	, getStoredResolutionForContext: function (_0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['getStoredResolutionKeyForContext'](_0x9f6cx2)
			, _0x9f6cx3 = _0x9f6cx5['getStoredResolutions']();
		Ext['isDefined'](_0x9f6cx3[_0x9f6cx1]) || Ext['Error']['raise']('can\'t get resolution for context, no resolutions has been stored previously!');
		return _0x9f6cx3[_0x9f6cx1]
	}
	, storeResolutionForContext: function (_0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['getStoredResolutionKeyForContext'](_0x9f6cx2)
			, _0x9f6cx4 = _0x9f6cx5['storedResolutions'];
		_0x9f6cx5['storedResolutions'][_0x9f6cx1] = _0x9f6cx3
	}
	, resolveSilently: function (_0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['getStoredResolutionForContext'](_0x9f6cx1);
		Ext['isObject'](_0x9f6cx1) && Ext['isArray'](_0x9f6cx1['resolutions']) && Ext['isDefined'](_0x9f6cx1['resolutions'][_0x9f6cx2]) || Ext['Error']['raise']('can\'t resolve constraint confict silently, stored resolution is inconsistent to the context given!');
		_0x9f6cx1['resolutions'][_0x9f6cx2]['resolve']();
		_0x9f6cx3()
	}
	, onUserActionOk: function (_0x9f6cx6, _0x9f6cx3, _0x9f6cx5, _0x9f6cx2, _0x9f6cx8, _0x9f6cx7, _0x9f6cx1) {
		var _0x9f6cx4 = this;
		Ext['isObject'](_0x9f6cx3) && Ext['isDefined'](_0x9f6cx3['resolutionOption']) && Ext['isDefined'](_0x9f6cx3['dontAsk']) || Ext['Error']['raise']('can\'t resolve constraint conflict according to user choice, user choice is invalid!');
		Ext['isObject'](_0x9f6cx2) && Ext['isArray'](_0x9f6cx2['resolutions']) && Ext['isDefined'](_0x9f6cx2['resolutions'][_0x9f6cx3['resolutionOption']]) || Ext['Error']['raise']('can\'t resolve constraint conflict according to user choice, resolution context is inconsistent to user choice!');
		Ext['destroy'](_0x9f6cx1);
		_0x9f6cx7['close']();
		if (_0x9f6cx3['dontAsk']) {
			_0x9f6cx4['storeResolutionForContext'](_0x9f6cx2, _0x9f6cx3['resolutionOption'])
		};
		_0x9f6cx2['resolutions'][_0x9f6cx3['resolutionOption']]['resolve']();
		_0x9f6cx8()
	}
	, onUserActionCancel: function (_0x9f6cx7, _0x9f6cx5, _0x9f6cx2, _0x9f6cx6, _0x9f6cx4, _0x9f6cx1) {
		var _0x9f6cx3 = this;
		Ext['isObject'](_0x9f6cx2) && Ext['isFunction'](_0x9f6cx2['cancelAction']) || Ext['Error']['raise']('Invalid resolution context given!');
		Ext['destroy'](_0x9f6cx1);
		_0x9f6cx4['close']();
		_0x9f6cx2['cancelAction']();
		_0x9f6cx6()
	}
	, onUserActionClose: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx2, _0x9f6cx7, _0x9f6cx1) {
		var _0x9f6cx3 = this;
		_0x9f6cx2 && Ext['isFunction'](_0x9f6cx2['cancelAction']) || Ext['Error']['raise']('Invalid resolution context given!');
		Ext['destroy'](_0x9f6cx1);
		_0x9f6cx2['cancelAction']();
		_0x9f6cx7()
	}
});
Ext.define('Ext.ux.Gantt.plugin.ProjectLines', {
	extend: 'Ext.ux.Scheduler.plugin.Lines'
	, alias: 'plugin.gantt_projectlines'
	, requires: ['Ext.data.Store']
	, innerTpl: '<span class="sch-gantt-project-line-text" style="{Style}">{Text}</span>'
	, labelHeight: 25
	, showHeaderElements: true
	, taskStore: null
	, linesFor: 'both'
	, init: function (_0x9f6cx1) {
		this['taskStore'] = this['taskStore'] || _0x9f6cx1['getTaskStore']();
		this['bindTaskStore'](this['taskStore']);
		if (!this['store']) {
			this['store'] = new Ext['data'].Store({
				fields: [{
					name: 'Id'
				}, {
					name: 'ProjectId'
				}, {
					name: 'Date'
					, type: 'date'
				}, {
					name: 'Cls'
					, type: 'string'
				}, {
					name: 'Text'
					, type: 'string'
				}]
			})
		};
		this['callParent'](arguments);
		this['onTaskStoreLoad']()
	}
	, bindTaskStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = {
			nodeappend: this['onTaskStoreNodeAppend']
			, noderemove: this['onTaskStoreNodeRemove']
			, update: this['onUpdate']
			, load: this['onTaskStoreLoad']
			, scope: this
		};
		if (this['taskStore']) {
			this['taskStore']['un'](_0x9f6cx2)
		};
		if (_0x9f6cx1) {
			_0x9f6cx1['on'](_0x9f6cx2)
		};
		this['taskStore'] = _0x9f6cx1
	}
	, onUpdate: function (_0x9f6cx3, _0x9f6cx1, _0x9f6cx5, _0x9f6cx4) {
		_0x9f6cx4 = _0x9f6cx4 || [];
		if (_0x9f6cx1 && _0x9f6cx1['isProject'] && _0x9f6cx5 == Ext['data']['Model']['EDIT']) {
			var _0x9f6cx7 = Ext['Array']['some']([_0x9f6cx1['startDateField'], _0x9f6cx1['endDateField'], _0x9f6cx1['nameField']], function (_0x9f6cx6) {
				return Ext['Array']['indexOf'](_0x9f6cx4, _0x9f6cx6) !== -1
			});
			if (_0x9f6cx7) {
				var _0x9f6cx2 = _0x9f6cx1['modified'] && _0x9f6cx1['modified']['Id'] || _0x9f6cx1['getId']();
				this['store']['remove'](this['getProjectLines'](_0x9f6cx2));
				this['store']['add'](this['retrieveProjectLines'](_0x9f6cx1))
			}
		}
	}
	, onTaskStoreNodeAppend: function (_0x9f6cx1, _0x9f6cx2) {
		if (_0x9f6cx2 && _0x9f6cx2['isProject'] && !this['taskStore']['isSettingRoot']) {
			this['store']['add'](this['retrieveProjectLines'](_0x9f6cx2))
		}
	}
	, onTaskStoreNodeRemove: function (_0x9f6cx1, _0x9f6cx2) {
		if (_0x9f6cx2 && _0x9f6cx2['isProject']) {
			this['store']['remove'](this['getProjectLines'](_0x9f6cx2['getId']()))
		}
	}
	, onTaskStoreLoad: function () {
		this['refreshAllProjects']()
	}
	, refreshAllProjects: function () {
		this['store']['removeAll'](true);
		this['store']['add'](this['retrieveProjectLines']())
	}
	, getProjectLines: function (_0x9f6cx2) {
		var _0x9f6cx1 = [];
		this['store']['each'](function (_0x9f6cx5) {
			if (_0x9f6cx5['get']('ProjectId') == _0x9f6cx2) {
				_0x9f6cx1['push'](_0x9f6cx5)
			}
		});
		return _0x9f6cx1
	}
	, prepareProjectStartLine: function (_0x9f6cx2, _0x9f6cx1) {
		return {
			Date: _0x9f6cx2['getStartDate']()
			, Text: 'Start of: ' + _0x9f6cx2['getName']()
			, Cls: 'sch-gantt-project-line sch-gantt-project-line-start sch-gantt-project-line-' + _0x9f6cx2['getId']()
			, ProjectId: _0x9f6cx2['getId']()
			, Style: 'margin-top:' + (_0x9f6cx1 * this['labelHeight']) + 'px'
		}
	}
	, prepareProjectEndLine: function (_0x9f6cx2, _0x9f6cx1) {
		return {
			Date: _0x9f6cx2['getEndDate']()
			, Text: 'End of: ' + _0x9f6cx2['getName']()
			, Cls: 'sch-gantt-project-line sch-gantt-project-line-end sch-gantt-project-line-' + _0x9f6cx2['getId']()
			, ProjectId: _0x9f6cx2['getId']()
			, Style: 'margin-top:' + (_0x9f6cx1 * this['labelHeight']) + 'px'
		}
	}
	, retrieveProjectLines: function (_0x9f6cx7) {
		var _0x9f6cx4 = this
			, _0x9f6cx5 = Ext['isArray'](_0x9f6cx7) ? _0x9f6cx7 : _0x9f6cx7 && [_0x9f6cx7] || this['taskStore']['getProjects']()
			, _0x9f6cx2 = []
			, _0x9f6cx3 = _0x9f6cx4['linesFor'];
		for (var _0x9f6cx1 = 0; _0x9f6cx1 < _0x9f6cx5['length']; _0x9f6cx1++) {
			_0x9f6cx3 != 'end' && _0x9f6cx2['push'](_0x9f6cx4['prepareProjectStartLine'](_0x9f6cx5[_0x9f6cx1], _0x9f6cx1));
			_0x9f6cx3 != 'start' && _0x9f6cx2['push'](_0x9f6cx4['prepareProjectEndLine'](_0x9f6cx5[_0x9f6cx1], _0x9f6cx1))
		};
		return _0x9f6cx2
	}
	, destroy: function () {
		this['bindTaskStore'](null);
		this['store']['destroy']();
		this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Gantt.plugin.Replicator', {
	extend: 'Ext.grid.selection.Replicator'
	, alias: 'plugin.gantt_selectionreplicator'
	, init: function (_0x9f6cx1) {
		this['gantt'] = _0x9f6cx1;
		this['callParent'](arguments)
	}
	, replicateSelection: function (_0x9f6cx3, _0x9f6cxe, _0x9f6cxa) {
		var _0x9f6cx17 = this;
		if (_0x9f6cxa['columns'] || _0x9f6cxe['isColumns'] || this['gantt']['isReadOnly']()) {
			return
		};
		var _0x9f6cx12 = _0x9f6cxe['getFirstRowIndex']()
			, _0x9f6cx11 = _0x9f6cxe['getLastRowIndex']()
			, _0x9f6cx13 = _0x9f6cx11 - _0x9f6cx12 + 1
			, _0x9f6cx8 = _0x9f6cxe['view']['dataSource']
			, _0x9f6cx6, _0x9f6cx16, _0x9f6cx14, _0x9f6cx4, _0x9f6cx2 = _0x9f6cx17['columns']
			, _0x9f6cxb = _0x9f6cx2['length']
			, _0x9f6cx7, _0x9f6cx5, _0x9f6cxd, _0x9f6cx10, _0x9f6cxf;
		if (_0x9f6cx13 === 1) {
			_0x9f6cx5 = _0x9f6cx17['getColumnValuesWithMetaData'](_0x9f6cx8['getAt'](_0x9f6cx12))
		}
		else {
			_0x9f6cx5 = new Array(_0x9f6cxb);
			if (_0x9f6cxa['rows'] < 0) {
				_0x9f6cxd = [_0x9f6cx8['getAt'](_0x9f6cx12 + 1), _0x9f6cx8['getAt'](_0x9f6cx12)]
			}
			else {
				_0x9f6cxd = [_0x9f6cx8['getAt'](_0x9f6cx11 - 1), _0x9f6cx8['getAt'](_0x9f6cx11)]
			};
			_0x9f6cxd[0] = _0x9f6cx17['getColumnValuesWithMetaData'](_0x9f6cxd[0]);
			_0x9f6cxd[1] = _0x9f6cx17['getColumnValuesWithMetaData'](_0x9f6cxd[1]);
			for (_0x9f6cxf = 0; _0x9f6cxf < _0x9f6cxb; _0x9f6cxf++) {
				_0x9f6cx5[_0x9f6cxf] = this['calculateDifference'](_0x9f6cxd[0][_0x9f6cxf], _0x9f6cxd[1][_0x9f6cxf])
			}
		};
		if (_0x9f6cxa['rows'] < 0) {
			_0x9f6cx6 = _0x9f6cxa['end']['rowIdx'];
			_0x9f6cx16 = _0x9f6cxa['start']['rowIdx'] - 1;
			_0x9f6cx14 = -1
		}
		else {
			_0x9f6cx6 = _0x9f6cxa['start']['rowIdx'];
			_0x9f6cx16 = _0x9f6cxa['end']['rowIdx'] + 1;
			_0x9f6cx14 = 1
		};
		this['disableListeners']();
		if (_0x9f6cx13 === 1) {
			for (_0x9f6cx10 = _0x9f6cx6; _0x9f6cx10 !== _0x9f6cx16; _0x9f6cx10 += _0x9f6cx14) {
				_0x9f6cx4 = _0x9f6cx8['getAt'](_0x9f6cx10);
				if (!_0x9f6cx4['isReadOnly']()) {
					for (_0x9f6cxf = 0; _0x9f6cxf < _0x9f6cxb; _0x9f6cxf++) {
						_0x9f6cx7 = _0x9f6cx2[_0x9f6cxf];
						if (this['isEditable'](_0x9f6cx7, _0x9f6cx4)) {
							this['copyDataTo'](_0x9f6cx5[_0x9f6cxf], _0x9f6cx5[_0x9f6cxf]['value'], _0x9f6cx7, _0x9f6cx4)
						}
					}
				}
			}
		}
		else {
			var _0x9f6cx1;
			for (_0x9f6cx10 = _0x9f6cx6; _0x9f6cx10 !== _0x9f6cx16; _0x9f6cx10 += _0x9f6cx14) {
				_0x9f6cx4 = _0x9f6cx8['getAt'](_0x9f6cx10);
				if (!_0x9f6cx4['isReadOnly']()) {
					_0x9f6cx1 = _0x9f6cx17['getColumnValuesWithMetaData'](_0x9f6cx8['getAt'](_0x9f6cx10 - _0x9f6cx14));
					for (_0x9f6cxf = 0; _0x9f6cxf < _0x9f6cxb; _0x9f6cxf++) {
						this['sumUpDifference'](_0x9f6cx2[_0x9f6cxf], _0x9f6cx4, _0x9f6cx1[_0x9f6cxf], _0x9f6cx5[_0x9f6cxf])
					}
				}
			}
		};
		this['enableListeners']()
	}
	, isEditable: function (_0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx2['dataIndex'] && !_0x9f6cx1['isEditable'](_0x9f6cx2['dataIndex'])) {
			return false
		}
		else {
			return true
		}
	}
	, calculateDifference: function (_0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx2 = _0x9f6cx3['value']
			, _0x9f6cx4 = _0x9f6cx5['value']
			, _0x9f6cx1 = Ext['clone'](_0x9f6cx5);
		if (!isNaN(_0x9f6cx2) && !isNaN(_0x9f6cx4)) {
			switch (_0x9f6cx5['dataIndex']) {
			case _0x9f6cx5['record']['durationField']:
				break;
			case _0x9f6cx5['record']['effortField']:
				break;
			default:
				_0x9f6cx1['value'] = Number(_0x9f6cx4) - Number(_0x9f6cx2)
			};
			return _0x9f6cx1
		}
	}
	, sumUpDifference: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx2, _0x9f6cx6) {
		var _0x9f6cx7 = _0x9f6cx2['value']
			, _0x9f6cx3 = _0x9f6cx6 && _0x9f6cx6['value']
			, _0x9f6cx4;
		if (this['isEditable'](_0x9f6cx5, _0x9f6cx1)) {
			if (!isNaN(_0x9f6cx7) && !Ext['isEmpty'](_0x9f6cx7)) {
				switch (_0x9f6cx6['dataIndex']) {
				case _0x9f6cx1['durationField']:
					break;
				case _0x9f6cx1['effortField']:
					break;
				default:
					if (_0x9f6cx7 instanceof Date) {
						_0x9f6cx4 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx7, 'ms', _0x9f6cx3)
					}
					else {
						_0x9f6cx4 = Ext['coerce'](Number(_0x9f6cx7) + _0x9f6cx3, _0x9f6cx7)
					};
					this['copyDataTo'](_0x9f6cx6, _0x9f6cx4, _0x9f6cx5, _0x9f6cx1)
				}
			}
		}
	}
	, copyDataTo: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		switch (_0x9f6cx3['dataIndex']) {
		case _0x9f6cx3['record']['durationField']:
			_0x9f6cx1['setDuration'](_0x9f6cx5, _0x9f6cx3['record']['getDurationUnit']());
			break;
		case _0x9f6cx3['record']['effortField']:
			_0x9f6cx1['setEffort'](_0x9f6cx5, _0x9f6cx3['record']['getEffortUnit']());
			break;
		default:
			if (_0x9f6cx2['putRawData']) {
				_0x9f6cx2['putRawData'](Ext['clone'](_0x9f6cx5), _0x9f6cx1)
			}
			else {
				if (_0x9f6cx2['dataIndex']) {
					_0x9f6cx1['set'](_0x9f6cx3['dataIndex'], _0x9f6cx5)
				}
			}
		}
	}
	, getColumnValuesWithMetaData: function (_0x9f6cx1) {
		return Ext['Array']['map'](this['columns'], function (_0x9f6cx2) {
			var _0x9f6cx5 = {
				dataIndex: _0x9f6cx2['dataIndex']
				, record: _0x9f6cx1
			};
			if (_0x9f6cx2['getRawData']) {
				_0x9f6cx5['value'] = _0x9f6cx2['getRawData'](_0x9f6cx1)
			}
			else {
				if (_0x9f6cx2['dataIndex']) {
					_0x9f6cx5['value'] = _0x9f6cx1['get'](_0x9f6cx2['dataIndex'])
				}
			};
			return _0x9f6cx5
		})
	}
	, enableListeners: function () {
		var _0x9f6cx1 = this;
		if (!Ext['getVersion']()['isGreaterThan']('6.2.0')) {
			_0x9f6cx1['gantt']['lockedGrid']['view']['on']('beforerefresh', _0x9f6cx1['gantt']['selModel']['onBeforeViewRefresh'], _0x9f6cx1['gantt']['selModel']);
			_0x9f6cx1['gantt']['normalGrid']['view']['on']('beforerefresh', _0x9f6cx1['gantt']['selModel']['onBeforeViewRefresh'], _0x9f6cx1['gantt']['selModel'])
		}
	}
	, disableListeners: function () {
		var _0x9f6cx1 = this;
		if (!Ext['getVersion']()['isGreaterThan']('6.2.0')) {
			_0x9f6cx1['gantt']['lockedGrid']['view']['un']('beforerefresh', _0x9f6cx1['gantt']['selModel']['onBeforeViewRefresh'], _0x9f6cx1['gantt']['selModel']);
			_0x9f6cx1['gantt']['normalGrid']['view']['un']('beforerefresh', _0x9f6cx1['gantt']['selModel']['onBeforeViewRefresh'], _0x9f6cx1['gantt']['selModel'])
		}
	}
});
Ext.define('Ext.ux.Gantt.template.TaskTooltip', {
	extend: 'Ext.XTemplate'
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, disableFormats: true
	, dateFormat: null
	, markup: '<h2 class="sch-task-tip-header">{Name}</h2><table class="sch-task-tip"><tr><td>_startText_:</td> <td align="right">{[this.getStartDateString(values)]}</td></tr><tr><td>_endText_:</td> <td align="right">{[this.getEndDateString(values)]}</td></tr><tr><td>_percentText_:</td><td align="right">{[this.getPercentDoneString(values)]}%</td></tr></table>'
	, constructor: function (_0x9f6cx1) {
		this['markup'] = _0x9f6cx1 || this['markup'];
		this['markup'] = this['markup']['replace'](/_startText_/, this.L('startText'));
		this['markup'] = this['markup']['replace'](/_endText_/, this.L('endText'));
		this['markup'] = this['markup']['replace'](/_percentText_/, this.L('percentText'));
		this['dateFormat'] = this.L('format');
		this['callParent']([this['markup']])
	}
	, getStartDateString: function (_0x9f6cx5) {
		var _0x9f6cx1 = _0x9f6cx5['_record'];
		var _0x9f6cx2 = _0x9f6cx5['_useBaselineData'] ? _0x9f6cx1['getBaselineStartDate']() : _0x9f6cx1['getStartDate']();
		return _0x9f6cx5['_record']['getDisplayStartDate'](this['dateFormat'], true, _0x9f6cx2, false, _0x9f6cx5._useBaselineData)
	}
	, getEndDateString: function (_0x9f6cx5) {
		var _0x9f6cx1 = _0x9f6cx5['_record'];
		var _0x9f6cx2 = _0x9f6cx5['_useBaselineData'] ? _0x9f6cx1['getBaselineEndDate']() : _0x9f6cx1['getEndDate']();
		return _0x9f6cx5['_record']['getDisplayEndDate'](this['dateFormat'], true, _0x9f6cx2, false, _0x9f6cx5._useBaselineData)
	}
	, getPercentDoneString: function (_0x9f6cx5) {
		var _0x9f6cx1 = _0x9f6cx5['_record'];
		var _0x9f6cx2 = _0x9f6cx5['_useBaselineData'] ? _0x9f6cx1['getBaselinePercentDone']() : _0x9f6cx1['getPercentDone']();
		return Math['round'](_0x9f6cx2)
	}
});
Ext.define('Ext.ux.Gantt.panel.Gantt', {
	extend: 'Ext.ux.Scheduler.panel.TimelineTreePanel'
	, alias: ['widget.ganttpanel']
	, alternateClassName: ['Ext.ux.Scheduler.gantt.GanttPanel']
	, mixins: ['Ext.ux.Gantt.view.dependency.Mixin']
	, requires: ['Ext.layout.container.Border', 'Ext.tree.plugin.TreeViewDragDrop', 'Ext.util.CSS', 'Ext.ux.Scheduler.plugin.NonWorkingTime', 'Ext.ux.Gantt.patches.CellEditor', 'Ext.ux.Gantt.patches.CellEditor_2', 'Ext.ux.Gantt.patches.CellEditing', 'Ext.ux.Gantt.patches.TreeViewDragDrop', 'Ext.ux.Gantt.patches.SpreadsheetModel', 'Ext.ux.Gantt.patches.SpreadsheetModel_2', 'Ext.ux.Gantt.patches.SpreadsheetModel_3', 'Ext.ux.Gantt.patches.SpreadsheetModel_4', 'Ext.ux.Gantt.patches.TreeView', 'Ext.ux.Gantt.patches.SelectionExtender2', 'Ext.ux.Gantt.patches.LockingView', 'Ext.ux.Gantt.data.ResourceStore', 'Ext.ux.Gantt.data.AssignmentStore', 'Ext.ux.Gantt.data.Calendar', 'Ext.ux.Gantt.data.TaskStore', 'Ext.ux.Gantt.data.DependencyStore', 'Ext.ux.Gantt.view.Gantt', 'Ext.ux.Gantt.patches.RightClick', 'Ext.ux.Gantt.plugin.ConstraintResolutionGui', 'Ext.ux.Gantt.plugin.ProjectLines', 'Ext.ux.Gantt.plugin.Replicator', 'Ext.ux.Gantt.template.TaskTooltip']
	, uses: ['Ext.ux.Scheduler.plugin.CurrentTimeLine', 'Ext.ux.Gantt.patches.GanttPanel']
	, viewType: 'ganttview'
	, layout: 'border'
	, rowLines: true
	, syncRowHeight: false
	, rowHeight: 24
	, rowHeightStyleSheetNode: null
	, tooltipTpl: true
	, rowNumberColumn: null
	, topLabelField: null
	, leftLabelField: null
	, bottomLabelField: null
	, rightLabelField: null
	, weekendsAreWorkdays: false
	, skipWeekendsDuringDragDrop: true
	, enableTaskDragDrop: true
	, enableProgressBarResize: false
	, toggleParentTasksOnClick: true
	, addRowOnTab: true
	, recalculateParents: true
	, cascadeChanges: false
	, enableBaseline: false
	, baselineVisible: false
	, enableAnimations: false
	, animate: false
	, workingTimePlugin: null
	, todayLinePlugin: null
	, highlightWeekends: true
	, allowParentTaskMove: true
	, allowParentTaskDependencies: true
	, enableDragCreation: true
	, eventRenderer: null
	, eventRendererScope: null
	, eventTemplate: null
	, parentEventTemplate: null
	, rollupTemplate: null
	, milestoneTemplate: null
	, taskBodyTemplate: null
	, parentTaskBodyTemplate: null
	, milestoneBodyTemplate: null
	, autoHeight: null
	, calendar: null
	, crudManager: null
	, taskStore: null
	, dependencyStore: null
	, resourceStore: null
	, assignmentStore: null
	, columnLines: false
	, dndValidatorFn: Ext['emptyFn']
	, createValidatorFn: Ext['emptyFn']
	, taskResizeHandles: 'both'
	, resizeValidatorFn: Ext['emptyFn']
	, resizeConfig: null
	, progressBarResizeConfig: null
	, dragDropConfig: null
	, createConfig: null
	, autoFitOnLoad: false
	, showRollupTasks: false
	, enableConstraintsResolutionGui: true
	, showProjectLines: true
	, projectLinesConfig: null
	, constraintResolutionGuiConfig: null
	, scrollTaskIntoViewOnClick: false
	, enableTaskReordering: true
	, refreshLockedTreeOnDependencyUpdate: false
	, _lockedDependencyListeners: null
	, _lastSpreadsheetSelection: null
	, earlyColumns: null
	, lateColumns: null
	, earlyDatesListeners: null
	, lateDatesListeners: null
	, fullRefreshColumnsListeners: null
	, refreshTimeout: 100
	, batchUpdate: false
	, ganttEditingPlugin: null
	, simpleCascadeThreshold: 30
	, forceDefineTimeSpanByStore: true
	, keepSelection: true
	, setShowRollupTasks: function (_0x9f6cx1) {
		this['showRollupTasks'] = _0x9f6cx1;
		this['getSchedulingView']()['setShowRollupTasks'](_0x9f6cx1)
	}
	, onCalendarSet: function (_0x9f6cx1, _0x9f6cx2) {
		if (this['needToTranslateOption']('weekendsAreWorkdays')) {
			_0x9f6cx2['setWeekendsAreWorkDays'](this['weekendsAreWorkdays'])
		};
		if (this['workingTimePlugin']) {
			this['workingTimePlugin']['bindCalendar'](_0x9f6cx2);
			this['timeAxisViewModel']['setCalendar'](_0x9f6cx2)
		}
	}
	, initStores: function () {
		if (this['crudManager']) {
			if (this['crudManager'] && !(this['crudManager'] instanceof Ext.ux.Gantt['data']['CrudManager'])) {
				this['crudManager'] = new Ext.ux.Gantt['data'].CrudManager(Ext['clone'](this['crudManager']))
			};
			if (!this['taskStore']) {
				this['taskStore'] = this['crudManager']['getTaskStore'](this)
			};
			if (!this['dependencyStore']) {
				this['dependencyStore'] = this['crudManager']['getDependencyStore'](this)
			};
			if (!this['resourceStore']) {
				this['resourceStore'] = this['crudManager']['getResourceStore'](this)
			};
			if (!this['assignmentStore']) {
				this['assignmentStore'] = this['crudManager']['getAssignmentStore'](this)
			}
		};
		if (!this['taskStore']) {
			Ext['Error']['raise']('You must specify a taskStore config.')
		};
		var _0x9f6cx1 = Ext['StoreMgr']['lookup'](this['taskStore']);
		if (!_0x9f6cx1) {
			Ext['Error']['raise']('You have provided an incorrect taskStore identifier')
		};
		if (!(_0x9f6cx1 instanceof Ext.ux.Gantt['data']['TaskStore'])) {
			Ext['Error']['raise']('A `taskStore` should be an instance of `Ext.ux.Gantt.data.TaskStore` (or of a subclass)')
		};
		this['mon'](_0x9f6cx1, {
			calendarset: this['onCalendarSet']
			, scope: this
		});
		this['mon'](_0x9f6cx1, {
			beforeindentationchange: this['onBeforeBatchStoreUpdate']
			, indentationchange: this['onBatchStoreUpdate']
			, beforebatchremove: this['onBeforeBatchStoreUpdate']
			, batchremove: this['onBatchStoreUpdate']
			, scope: this
		});
		Ext['apply'](this, {
			store: _0x9f6cx1
			, taskStore: _0x9f6cx1
		});
		var _0x9f6cx3 = _0x9f6cx1['calendar'];
		if (this['dependencyStore']) {
			this['dependencyStore'] = Ext['StoreMgr']['lookup'](this['dependencyStore']);
			_0x9f6cx1['setDependencyStore'](this['dependencyStore'])
		}
		else {
			this['dependencyStore'] = _0x9f6cx1['dependencyStore']
		};
		this['dependencyStore']['allowParentTaskDependencies'] = this['allowParentTaskDependencies'];
		if (!(this['dependencyStore'] instanceof Ext.ux.Gantt['data']['DependencyStore'])) {
			Ext['Error']['raise']('The Gantt dependency store should be a Ext.ux.Gantt.data.DependencyStore, or a subclass thereof.')
		};
		var _0x9f6cx2 = this['resourceStore'] ? Ext['StoreMgr']['lookup'](this['resourceStore']) : _0x9f6cx1['getResourceStore']();
		if (!(_0x9f6cx2 instanceof Ext.ux.Gantt['data']['ResourceStore'])) {
			Ext['Error']['raise']('A `ResourceStore` should be an instance of `Ext.ux.Gantt.data.ResourceStore` (or of a subclass)')
		};
		var _0x9f6cx5 = this['assignmentStore'] ? Ext['StoreMgr']['lookup'](this['assignmentStore']) : _0x9f6cx1['getAssignmentStore']();
		if (!(_0x9f6cx5 instanceof Ext.ux.Gantt['data']['AssignmentStore'])) {
			Ext['Error']['raise']('An `assignmentStore` should be an instance of `Ext.ux.Gantt.data.AssignmentStore` (or of a subclass)')
		};
		this['bindAssignmentStore'](_0x9f6cx5, true);
		this['bindResourceStore'](_0x9f6cx2, true);
		if (this['needToTranslateOption']('weekendsAreWorkdays')) {
			_0x9f6cx3['setWeekendsAreWorkDays'](this['weekendsAreWorkdays'])
		}
	}
	, onBeforeBatchStoreUpdate: function () {
		this['batchUpdate'] = true;
		this['taskStore']['suspendEvent']('refresh', 'add', 'insert', 'remove');
		this['taskStore']['filterUpdateSuspended'] = true;
		var _0x9f6cx1 = this['getSchedulingView']()['getNavigationModel']()['getPosition']();
		this['lockedGrid']['view']['viewReady'] = this['normalGrid']['view']['viewReady'] = false;
		if (_0x9f6cx1) {
			this['_lastNavigationPosition'] = _0x9f6cx1['clone']()
		};
		if (this['bufferedRenderer']) {
			this['suspendLayouts']()
		}
	}
	, onBatchStoreUpdate: function () {
		var _0x9f6cx2 = this['getTaskStore']();
		this['lockedGrid']['view']['viewReady'] = this['normalGrid']['view']['viewReady'] = true;
		_0x9f6cx2['resumeEvent']('refresh', 'add', 'insert', 'remove');
		_0x9f6cx2['filterUpdateSuspended'] = false;
		var _0x9f6cx1 = this['_lastNavigationPosition'];
		if (_0x9f6cx1) {
			if (_0x9f6cx1['record'] && _0x9f6cx2['getNodeById'](_0x9f6cx1['record']['getId']())) {
				this['getSchedulingView']()['getNavigationModel']()['setPosition'](_0x9f6cx1)
			};
			delete this['_lastNavigationPosition']
		};
		this['refreshViews']();
		if (this['bufferedRenderer']) {
			this['resumeLayouts'](true);
			_0x9f6cx2['reApplyFilter']()
		};
		this['batchUpdate'] = false
	}
	, initComponent: function () {
		this['autoHeight'] = false;
		this['initStores']();
		if (this['needToTranslateOption']('cascadeChanges')) {
			this['setCascadeChanges'](this['cascadeChanges'])
		};
		if (this['needToTranslateOption']('recalculateParents')) {
			this['setRecalculateParents'](this['recalculateParents'])
		};
		if (this['needToTranslateOption']('skipWeekendsDuringDragDrop')) {
			this['setSkipWeekendsDuringDragDrop'](this['skipWeekendsDuringDragDrop'])
		};
		this['dependencyViewConfig'] = this['dependencyViewConfig'] || {};
		Ext['applyIf'](this['dependencyViewConfig'], {
			enableDependencyDragDrop: this['enableDependencyDragDrop']
		});
		this['normalViewConfig'] = this['normalViewConfig'] || {};
		Ext['applyIf'](this['normalViewConfig'], {
			taskStore: this['taskStore']
			, dependencyStore: this['dependencyStore']
			, snapRelativeToEventStartDate: this['snapRelativeToEventStartDate']
			, progressBarResizeConfig: this['progressBarResizeConfig']
			, enableDependencyDragDrop: this['enableDependencyDragDrop']
			, enableTaskDragDrop: this['enableTaskDragDrop']
			, enableProgressBarResize: this['enableProgressBarResize']
			, enableDragCreation: this['enableDragCreation']
			, allowParentTaskMove: this['allowParentTaskMove']
			, allowParentTaskDependencies: this['allowParentTaskDependencies']
			, toggleParentTasksOnClick: this['toggleParentTasksOnClick']
			, taskResizeHandles: this['taskResizeHandles']
			, enableBaseline: this['baselineVisible'] || this['enableBaseline']
			, leftLabelField: this['leftLabelField']
			, rightLabelField: this['rightLabelField']
			, topLabelField: this['topLabelField']
			, bottomLabelField: this['bottomLabelField']
			, eventTemplate: this['eventTemplate']
			, parentEventTemplate: this['parentEventTemplate']
			, milestoneTemplate: this['milestoneTemplate']
			, rollupTemplate: this['rollupTemplate']
			, taskBodyTemplate: this['taskBodyTemplate']
			, parentTaskBodyTemplate: this['parentTaskBodyTemplate']
			, milestoneBodyTemplate: this['milestoneBodyTemplate']
			, resizeConfig: this['resizeConfig']
			, dragDropConfig: this['dragDropConfig']
			, showRollupTasks: this['showRollupTasks']
		});
		if (this['topLabelField'] || this['bottomLabelField']) {
			this['addCls']('sch-gantt-topbottom-labels ' + (this['topLabelField'] ? 'sch-gantt-top-label' : ''));
			this['rowHeight'] = 60
		};
		this['configureFunctionality']();
		this['mon'](this['taskStore'], {
			beforecascade: this['onBeforeCascade']
			, cascade: this['onAfterCascade']
			, scope: this
		});
		if (this['tooltipTpl'] === true) {
			this['tooltipTpl'] = new Ext.ux.Gantt['template'].TaskTooltip()
		};
		this['callParent'](arguments);
		var _0x9f6cx8 = this['getSelectionModel']();
		var _0x9f6cx6 = Ext['grid']['selection'] && Ext['grid']['selection']['SpreadsheetModel'] && _0x9f6cx8 instanceof Ext['grid']['selection']['SpreadsheetModel'];
		if (this['keepSelection'] && _0x9f6cx6) {
			this['mon'](this['taskStore'], {
				remove: this['tryRestoreSelectionAfterRemove']
				, priority: 1
				, scope: this
			});
			if (Ext['getVersion']()['isLessThan']('6.0.1') || Ext['getVersion']()['isGreaterThan']('6.2.0')) {
				this['mon'](this['taskStore'], {
					remove: this['storeSelectionBeforeRemove']
					, priority: 2001
					, scope: this
				})
			};
			this['mon'](this['taskStore'], {
				beforebatchremove: this['storeSelectionBeforeRemove']
				, batchremove: this['tryRestoreSelectionAfterBatchRemove']
				, scope: this
			})
		};
		if (_0x9f6cx6) {
			var _0x9f6cx7 = this['lockedGrid'];
			var _0x9f6cx5 = _0x9f6cx8['applyExtensible'];
			_0x9f6cx8['applyExtensible'] = function (_0x9f6cx9) {
				var _0x9f6cxc = _0x9f6cx5['apply'](this, arguments);
				_0x9f6cx7['view']['el']['appendChild'](_0x9f6cxc['handle']);
				this['applyExtensible'] = _0x9f6cx5;
				return _0x9f6cxc
			}
		};
		if (this['autoFitOnLoad']) {
			var _0x9f6cx2 = typeof this['autoFitOnLoad'] === 'object' ? this['autoFitOnLoad'] : {};
			this['normalGrid']['on']('afterlayout', function () {
				if (this['store']['getCount']()) {
					this['zoomToFit'](null, _0x9f6cx2)
				};
				this['mon'](this['store'], 'load', function () {
					this['zoomToFit'](null, _0x9f6cx2)
				}, this)
			}, this, {
				single: true
			})
		};
		this['bodyCls'] = (this['bodyCls'] || '') + ' sch-ganttpanel-container-body';
		var _0x9f6cx3 = this['getSchedulingView']();
		this['relayEvents'](_0x9f6cx3, ['taskclick', 'taskdblclick', 'taskcontextmenu', 'beforetaskresize', 'taskresizestart', 'partialtaskresize', 'beforetaskresizefinalize', 'aftertaskresize', 'beforeprogressbarresize', 'progressbarresizestart', 'afterprogressbarresize', 'beforetaskdrag', 'taskdragstart', 'beforetaskdropfinalize', 'beforedragcreate', 'dragcreatestart', 'beforedragcreatefinalize', 'dragcreateend', 'afterdragcreate', 'taskdrop', 'aftertaskdrop', 'labeledit_beforestartedit', 'labeledit_beforecomplete', 'labeledit_complete', 'scheduleclick', 'scheduledblclick', 'schedulecontextmenu', 'rowlongpress', 'containerlongpress']);
		this['relayEvents'](this['lockedGrid']['getView'](), ['rowlongpress', 'containerlongpress']);
		if (this['addRowOnTab']) {
			var _0x9f6cx4 = this['lockedGrid']['getView']();
			_0x9f6cx4['onRowExit'] = Ext['Function']['createInterceptor'](_0x9f6cx4['onRowExit'], this['beforeRowExit'], this)
		};
		this['registerRenderer'](_0x9f6cx3['columnRenderer'], _0x9f6cx3);
		var _0x9f6cx1 = ' sch-ganttpanel sch-horizontal ';
		this['addCls'](_0x9f6cx1);
		if (this['eventBorderWidth'] < 1) {
			this['addCls']('sch-gantt-no-task-border')
		};
		if (this['baselineVisible']) {
			this['showBaseline']()
		};
		this['on']('add', function (_0x9f6cxc, _0x9f6cx9) {
			if (_0x9f6cx9 instanceof Ext['Editor']) {
				_0x9f6cxc['lockedGrid']['suspendLayouts']();
				_0x9f6cxc['suspendLayouts']();
				_0x9f6cxc['lockedGrid']['add'](_0x9f6cx9);
				_0x9f6cxc['resumeLayouts']();
				_0x9f6cxc['lockedGrid']['resumeLayouts']()
			}
		});
		this['on']('viewready', this['onMyViewReady'], this);
		this['on']({
			dragcreatestart: function () {
				var _0x9f6cxc = this['findPlugin']('scheduler_pan');
				var _0x9f6cx9 = this['getSchedulingView']()['getScrollable']();
				if (_0x9f6cxc) {
					_0x9f6cxc['disable']()
				};
				_0x9f6cx9['setDisabled'] && _0x9f6cx9['setDisabled'](true)
			}
			, afterdragcreate: function () {
				var _0x9f6cxc = this['findPlugin']('scheduler_pan');
				var _0x9f6cx9 = this['getSchedulingView']()['getScrollable']();
				if (_0x9f6cxc) {
					_0x9f6cxc['enable']()
				};
				_0x9f6cx9['setDisabled'] && _0x9f6cx9['setDisabled'](false)
			}
			, scope: this
		});
		if (this['scrollTaskIntoViewOnClick']) {
			this['lockedGrid']['on']('itemclick', this['onRowClicked'], this)
		};
		Ext['Array']['each'](this['lockedGrid']['plugins'] || [], function (_0x9f6cx9) {
			if (Ext.ux.Scheduler['plugin'] && Ext.ux.Scheduler['plugin']['TreeCellEditing'] && _0x9f6cx9 instanceof Ext.ux.Scheduler['plugin']['TreeCellEditing']) {
				this['ganttEditingPlugin'] = _0x9f6cx9;
				return false
			}
		}, this)
	}
	, onRender: function () {
		this['setRowHeight'](this['rowHeight']);
		this['callParent'](arguments)
	}
	, tryRestoreSelectionAfterRemove: function (_0x9f6cxe, _0x9f6cx1, _0x9f6cxc) {
		var _0x9f6cx4 = this['getSelectionModel']();
		var _0x9f6cx2 = this['_lastSpreadsheetSelection'] || _0x9f6cx4['selected'];
		this['_lastSpreadsheetSelection'] = null;
		if (!_0x9f6cx2 || _0x9f6cxe['getCount']() === 0) {
			return
		};
		var _0x9f6cx13 = this['lockedGrid']['getView']();
		if (_0x9f6cx2['isCells']) {
			var _0x9f6cx3 = _0x9f6cx2['getRange']();
			if (_0x9f6cx3[1][0] === -1) {
				return
			};
			var _0x9f6cx8 = _0x9f6cx13['getNodes']()['length'] - 1;
			_0x9f6cx4['selectCells']([_0x9f6cx3[0][0], Math['min'](_0x9f6cx8, _0x9f6cx3[0][1])], [_0x9f6cx3[1][0], Math['min'](_0x9f6cx8, _0x9f6cx3[1][1])])
		}
		else {
			if (_0x9f6cx2['isRows']) {
				var _0x9f6cx6 = _0x9f6cx2['getRecords']();
				if (_0x9f6cx6['length']) {
					var _0x9f6cxa = false;
					for (var _0x9f6cx5 = 0, _0x9f6cx7 = _0x9f6cx6['length']; _0x9f6cx5 < _0x9f6cx7; _0x9f6cx5++) {
						if (_0x9f6cxa = _0x9f6cxa || _0x9f6cxe['indexOf'](_0x9f6cx6[_0x9f6cx5]) !== -1) {
							break
						}
					};
					if (!_0x9f6cxa) {
						var _0x9f6cxb = _0x9f6cx13['getRecord'](Math['min'](_0x9f6cxc, _0x9f6cxe['getCount']() - 1));
						_0x9f6cxb && _0x9f6cx4['select'](_0x9f6cxb)
					}
				}
			}
		}
	}
	, storeSelectionBeforeRemove: function () {
		var _0x9f6cx2 = this['getSelectionModel']()['getSelected']();
		if (!_0x9f6cx2) {
			return
		};
		_0x9f6cx2 = _0x9f6cx2['clone']();
		if (_0x9f6cx2['isRows']) {
			var _0x9f6cx1 = _0x9f6cx2['getRecords']();
			if (_0x9f6cx1['length']) {
				_0x9f6cx2['_lastRecordIndex'] = this['getView']()['indexOf'](_0x9f6cx1[_0x9f6cx1['length'] - 1])
			}
		};
		this['_lastSpreadsheetSelection'] = _0x9f6cx2
	}
	, tryRestoreSelectionAfterBatchRemove: function (_0x9f6cxb, _0x9f6cx1) {
		var _0x9f6cx2 = this['_lastSpreadsheetSelection'];
		this['_lastSpreadsheetSelection'] = null;
		this['getSelectionModel']()['onStoreRemove'](_0x9f6cxb, _0x9f6cx1, null, false);
		if (!_0x9f6cx2 || _0x9f6cxb['getCount']() === 0) {
			return
		};
		var _0x9f6cx4 = this['getSelectionModel']();
		var _0x9f6cxa = this['lockedGrid']['getView']();
		if (_0x9f6cx2['isCells']) {
			var _0x9f6cx3 = _0x9f6cx2['getRange']();
			if (_0x9f6cx3[1][0] === -1) {
				return
			};
			var _0x9f6cx8 = _0x9f6cxa['getNodes']()['length'];
			_0x9f6cx4['selectCells']([_0x9f6cx3[0][0], Math['min'](_0x9f6cx8, _0x9f6cx3[0][1])], [_0x9f6cx3[1][0], Math['min'](_0x9f6cx8, _0x9f6cx3[1][1])])
		}
		else {
			if (_0x9f6cx2['isRows']) {
				var _0x9f6cx6 = _0x9f6cx2['getRecords']();
				var _0x9f6cxc = false;
				for (var _0x9f6cx5 = 0, _0x9f6cx7 = _0x9f6cx6['length']; _0x9f6cx5 < _0x9f6cx7; _0x9f6cx5++) {
					if (_0x9f6cxc = _0x9f6cxc || _0x9f6cxb['indexOf'](_0x9f6cx6[_0x9f6cx5]) !== -1) {
						break
					}
				};
				if (!_0x9f6cxc) {
					var _0x9f6cx13 = _0x9f6cxa['getRecord'](Math['min'](_0x9f6cx2._lastRecordIndex, _0x9f6cxb['getCount']() - 1));
					_0x9f6cx13 && _0x9f6cx4['select'](_0x9f6cx13)
				}
			}
		}
	}
	, getTreeViewDragDropPlugin: function () {
		var _0x9f6cx1 = this['lockedGrid']['view']['plugins'] || [];
		var _0x9f6cx5;
		for (var _0x9f6cx2 = 0; _0x9f6cx2 < _0x9f6cx1['length']; _0x9f6cx2++) {
			_0x9f6cx5 = _0x9f6cx1[_0x9f6cx2];
			if (_0x9f6cx5 instanceof Ext['tree']['plugin']['TreeViewDragDrop']) {
				return _0x9f6cx5
			}
		}
	}
	, doSetTreeViewDragDropDisabled: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getTreeViewDragDropPlugin']();
		if (_0x9f6cx2) {
			if (_0x9f6cx1) {
				_0x9f6cx2['disable']()
			}
			else {
				_0x9f6cx2['enable']()
			}
		}
	}
	, setTreeViewDragDropDisabled: function (_0x9f6cx2) {
		var _0x9f6cx5 = this;
		var _0x9f6cx1 = this['lockedGrid']['view'];
		if (_0x9f6cx1['rendered']) {
			_0x9f6cx5['doSetTreeViewDragDropDisabled'](_0x9f6cx2)
		}
		else {
			_0x9f6cx1['on']('render', function () {
				_0x9f6cx5['doSetTreeViewDragDropDisabled'](_0x9f6cx2)
			})
		}
	}
	, restoreSpreadsheetSelectionModel: function () {
		var _0x9f6cx1 = this['getSelectionModel']()
			, _0x9f6cx2 = this['getTreeViewDragDropPlugin']();
		if (_0x9f6cx1['isLocked']() && _0x9f6cx2 && !_0x9f6cx2['disabled']) {
			_0x9f6cx1['setLocked'](false);
			this['setTreeViewDragDropDisabled'](true);
			this['lockedGrid']['view']['on']('cellmousedown', _0x9f6cx1['handleMouseDown'], _0x9f6cx1);
			_0x9f6cx1['navigationListeners'] = _0x9f6cx1['navigationModel']['on']({
				navigate: _0x9f6cx1['onNavigate']
				, scope: _0x9f6cx1
				, destroyable: true
			})
		}
	}
	, setReadOnly: function (_0x9f6cx1) {
		this['callParent'](arguments);
		this['fireEvent']('setreadonly', this, _0x9f6cx1)
	}
	, getTimeSpanDefiningStore: function () {
		return this['taskStore']
	}
	, bindAutoTimeSpanListeners: function () {
		if (!this['autoFitOnLoad']) {
			this['callParent'](arguments)
		}
	}
	, onBeforeCascade: function () {
		this['lockedGrid']['view']['onUpdate'] = this['normalGrid']['view']['onUpdate'] = Ext['emptyFn'];
		this['suspendLayouts']()
	}
	, onAfterCascade: function (_0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx6 = this;
		this['lockedGrid']['view']['onUpdate'] = this['lockedGrid']['view']['self']['prototype']['onUpdate'];
		this['normalGrid']['view']['onUpdate'] = this['normalGrid']['view']['self']['prototype']['onUpdate'];
		_0x9f6cx6['resumeLayouts']();
		if (this['batchUpdate']) {
			return
		};
		if (_0x9f6cx2['nbrAffected'] > 0) {
			var _0x9f6cx9 = this['lockedGrid']['getView']();
			if (_0x9f6cx2['nbrAffected'] <= _0x9f6cx6['simpleCascadeThreshold']) {
				var _0x9f6cx8 = this['getView']();
				var _0x9f6cx4 = this['getSchedulingView']();
				_0x9f6cx4['suspendEvents'](true);
				for (var _0x9f6cx1 in _0x9f6cx2['affected']) {
					var _0x9f6cx5 = _0x9f6cx2['affected'][_0x9f6cx1];
					var _0x9f6cx7 = _0x9f6cx9['store']['indexOf'](_0x9f6cx5);
					if (_0x9f6cx7 >= 0) {
						_0x9f6cx8['refreshNode'](_0x9f6cx7)
					}
				};
				_0x9f6cx4['resumeEvents']();
				return
			};
			this['refreshViews']()
		}
	}
	, updateFullRefreshColumns: function () {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['refreshTimer']) {
			return
		};
		if (_0x9f6cx1['fullRefreshColumns'] && _0x9f6cx1['fullRefreshColumns']['length']) {
			_0x9f6cx1['refreshTimer'] = setTimeout(function () {
				_0x9f6cx1['refreshTimer'] = null;
				_0x9f6cx1['redrawColumns'](_0x9f6cx1['fullRefreshColumns'])
			}, _0x9f6cx1['refreshTimeout'])
		}
	}
	, bindFullRefreshListeners: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['fullRefreshColumnsListeners'] = _0x9f6cx1['mon'](this['taskStore'], {
			nodeappend: _0x9f6cx2['updateFullRefreshColumns']
			, nodeinsert: _0x9f6cx2['updateFullRefreshColumns']
			, noderemove: _0x9f6cx2['updateFullRefreshColumns']
			, destroyable: true
			, scope: this
		})
	}
	, bindSequentialDataListeners: function (_0x9f6cx2) {
		var _0x9f6cx5 = this['lockedGrid']['view'];
		var _0x9f6cx1 = this['taskStore'];
		_0x9f6cx2['mon'](_0x9f6cx1, {
			nodeappend: function (_0x9f6cx3, _0x9f6cx4) {
				if (!_0x9f6cx1['fillCount']) {
					this['updateAutoGeneratedCells'](_0x9f6cx2, _0x9f6cx5['store']['indexOf'](_0x9f6cx4['parentNode']))
				}
			}
			, nodeinsert: function (_0x9f6cx3, _0x9f6cx7, _0x9f6cx4) {
				this['updateAutoGeneratedCells'](_0x9f6cx2, _0x9f6cx5['store']['indexOf'](_0x9f6cx4))
			}
			, noderemove: function (_0x9f6cx4, _0x9f6cx7, _0x9f6cx3) {
				if (!_0x9f6cx3) {
					this['updateAutoGeneratedCells'](_0x9f6cx2, _0x9f6cx5['store']['indexOf'](_0x9f6cx7))
				}
			}
			, nodemove: function (_0x9f6cx3, _0x9f6cx4) {
				this['updateAutoGeneratedCells'](_0x9f6cx2, _0x9f6cx5['store']['indexOf'](_0x9f6cx4))
			}
			, scope: this
		})
	}
	, bindEarlyDatesListeners: function () {
		var _0x9f6cx1 = Ext['Function']['createBuffered'](this['updateEarlyDateColumns'], this['refreshTimeout'], this, []);
		this['earlyDatesListeners'] = this['mon'](this['taskStore'], {
			earlydatesreset: _0x9f6cx1
			, scope: this
			, destroyable: true
		})
	}
	, bindLateDatesListeners: function () {
		var _0x9f6cx1 = Ext['Function']['createBuffered'](this['updateLateDateColumns'], this['refreshTimeout'], this, []);
		this['lateDatesListeners'] = this['mon'](this['taskStore'], {
			latedatesreset: _0x9f6cx1
			, scope: this
			, destroyable: true
		})
	}
	, startEditScrollToEditor: function () {
		var _0x9f6cx1 = this['ganttEditingPlugin'];
		!Ext.ux.Scheduler['disableOverrides'] && _0x9f6cx1 && _0x9f6cx1['on']('beforeedit', function (_0x9f6cx2, _0x9f6cx5) {
			_0x9f6cx5['column']['getEl']()['scrollIntoView'](_0x9f6cx5['column']['ownerCt']['getEl']());
			_0x9f6cx5['view']['scrollCellIntoView'](_0x9f6cx5['cell'])
		}, this, {
			single: true
		})
	}
	, beforeRowExit: function (_0x9f6cx7, _0x9f6cx6, _0x9f6cx4, _0x9f6cx3) {
		if (!(_0x9f6cx7 instanceof Ext['event']['Event'])) {
			_0x9f6cx3 = _0x9f6cx4;
			_0x9f6cx4 = _0x9f6cx6;
			_0x9f6cx6 = _0x9f6cx7
		};
		if (_0x9f6cx3 && !_0x9f6cx4) {
			var _0x9f6cx5 = this['lockedGrid']['getView']();
			var _0x9f6cx2 = _0x9f6cx5['getRecord'](_0x9f6cx6);
			var _0x9f6cx1 = _0x9f6cx5['saveFocusState'];
			_0x9f6cx5['saveFocusState'] = function () {
				return Ext['emptyFn']
			};
			_0x9f6cx2['addTaskBelow']({
				leaf: true
			});
			_0x9f6cx5['saveFocusState'] = _0x9f6cx1;
			if (Ext['getVersion']()['isGreaterThanOrEqual']('6.5.0')) {
				this['startEditScrollToEditor']()
			}
		}
	}
	, needToTranslateOption: function (_0x9f6cx1) {
		return this['hasOwnProperty'](_0x9f6cx1) || this['self']['prototype']['hasOwnProperty'](_0x9f6cx1) && this['self'] != Ext.ux.Gantt['panel']['Gantt']
	}
	, resolveTaskRecord: function (_0x9f6cx1) {
		return this['getSchedulingView']()['resolveTaskRecord'](_0x9f6cx1)
	}
	, fitTimeColumns: function () {
		this['getSchedulingView']()['fitColumns']()
	}
	, getResourceStore: function () {
		return this['getTaskStore']()['getResourceStore']()
	}
	, getAssignmentStore: function () {
		return this['getTaskStore']()['getAssignmentStore']()
	}
	, getCrudManager: function () {
		return this['crudManager']
	}
	, getTaskStore: function () {
		return this['taskStore']
	}
	, getEventStore: function () {
		return this['taskStore']
	}
	, getDependencyStore: function () {
		return this['dependencyStore']
	}
	, onDragDropStart: function () {
		if (this['tip']) {
			this['tip']['hide']();
			this['tip']['disable']()
		}
	}
	, onDragDropEnd: function () {
		if (this['tip']) {
			this['tip']['enable']()
		}
	}
	, configureFunctionality: function () {
		var _0x9f6cx1 = this['plugins'] = []['concat'](this['plugins'] || []);
		if (this['enableConstraintsResolutionGui'] && !Ext['Array']['findBy'](_0x9f6cx1, function (_0x9f6cx4) {
				return (_0x9f6cx4 instanceof Ext.ux.Gantt['plugin']['ConstraintResolutionGui']) || (_0x9f6cx4['ptype'] == 'constraintresolutiongui')
			})) {
			_0x9f6cx1['push'](Ext['apply'](this['constraintResolutionGuiConfig'] || {}, {
				pluginId: 'constraintresolutiongui'
				, ptype: 'constraintresolutiongui'
			}))
		};
		if (this['showProjectLines']) {
			_0x9f6cx1['push'](Ext['apply']({
				pluginId: 'gantt_projectlines'
				, ptype: 'gantt_projectlines'
			}, this['projectLinesConfig']))
		};
		if (this['enableTaskReordering']) {
			if (!this['hasOwnProperty']('lockedViewConfig')) {
				this['lockedViewConfig'] = Ext['apply']({}, this['lockedViewConfig'] || {})
			};
			this['lockedViewConfig']['plugins'] = []['concat'](this['lockedViewConfig']['plugins'] || []);
			var _0x9f6cx5 = this['lockedViewConfig']['plugins'];
			var _0x9f6cx3;
			Ext['Array']['each'](_0x9f6cx5, function (_0x9f6cx4) {
				if (_0x9f6cx4 === 'treeviewdragdrop' || _0x9f6cx4['ptype'] === 'treeviewdragdrop') {
					_0x9f6cx3 = true
				}
			});
			if (!_0x9f6cx3) {
				var _0x9f6cx2 = Ext['apply']({}, Ext['isObject'](this['enableTaskReordering']) && this['enableTaskReordering'] || {}, {
					ptype: 'treeviewdragdrop'
					, pluginId: 'bryntum_treedragdrop'
					, nodeHighlightOnDrop: false
					, nodeHighlightOnRepair: false
					, containerScroll: true
					, dragZone: {
						onBeforeDrag: Ext['Function']['bind'](this['onBeforeTaskReorder'], this)
					}
					, dropZone: {
						onNodeDrop: this['onTaskReorder']
						, onNodeOver: this['onTaskReorderOver']
					}
				});
				_0x9f6cx5['push'](_0x9f6cx2)
			}
		}
	}
	, getWorkingTimePlugin: function () {
		return this['workingTimePlugin']
	}
	, registerLockedDependencyListeners: function () {
		var _0x9f6cx2 = this;
		var _0x9f6cx1 = this['getDependencyStore']();
		this['_lockedDependencyListeners'] = this['_lockedDependencyListeners'] || {
			load: function () {
				var _0x9f6cx5 = _0x9f6cx2['getTaskStore']();
				_0x9f6cx5['resetEarlyDates']();
				_0x9f6cx5['resetLateDates']();
				_0x9f6cx2['lockedGrid']['getView']()['refreshView']()
			}
			, clear: function () {
				var _0x9f6cx5 = _0x9f6cx2['getTaskStore']();
				_0x9f6cx5['resetEarlyDates']();
				_0x9f6cx5['resetLateDates']();
				_0x9f6cx2['lockedGrid']['getView']()['refreshView']()
			}
			, add: function (_0x9f6cx3, _0x9f6cx5) {
				_0x9f6cx2['refreshTasksForDependencies'](_0x9f6cx5)
			}
			, update: function (_0x9f6cx8, _0x9f6cx7, _0x9f6cx6) {
				if (_0x9f6cx6 != Ext['data']['Model']['COMMIT']) {
					var _0x9f6cx4 = _0x9f6cx2['lockedGrid']['view'];
					if (_0x9f6cx7['previous'][_0x9f6cx7['fromField']]) {
						var _0x9f6cx3 = _0x9f6cx2['taskStore']['getModelById'](_0x9f6cx7['previous'][_0x9f6cx7['fromField']]);
						if (_0x9f6cx3) {
							_0x9f6cx4['refreshNode'](_0x9f6cx3)
						}
					};
					if (_0x9f6cx7['previous'][_0x9f6cx7['toField']]) {
						var _0x9f6cx5 = _0x9f6cx2['taskStore']['getModelById'](_0x9f6cx7['previous'][_0x9f6cx7['toField']]);
						if (_0x9f6cx5) {
							_0x9f6cx4['refreshNode'](_0x9f6cx5)
						}
					}
				};
				_0x9f6cx2['refreshTasksForDependencies']([_0x9f6cx7])
			}
			, remove: function (_0x9f6cx3, _0x9f6cx5) {
				_0x9f6cx2['refreshTasksForDependencies'](_0x9f6cx5)
			}
		};
		this['mun'](_0x9f6cx1, this._lockedDependencyListeners);
		this['mon'](_0x9f6cx1, this._lockedDependencyListeners)
	}
	, getDependencyTasks: function (_0x9f6cx5) {
		var _0x9f6cx2 = _0x9f6cx5['getSourceTask'](this['taskStore'])
			, _0x9f6cx3 = _0x9f6cx5['getTargetTask'](this['taskStore'])
			, _0x9f6cx1 = [];
		if (_0x9f6cx2 && _0x9f6cx2['getTreeStore']()) {
			_0x9f6cx1['push'](_0x9f6cx2)
		};
		if (_0x9f6cx3 && _0x9f6cx3['getTreeStore']()) {
			_0x9f6cx1['push'](_0x9f6cx3)
		};
		return _0x9f6cx1
	}
	, refreshLockedViewRows: function (_0x9f6cx5) {
		var _0x9f6cx2 = this['lockedGrid']['view'];
		for (var _0x9f6cx1 = 0; _0x9f6cx1 < _0x9f6cx5['length']; _0x9f6cx1++) {
			_0x9f6cx2['refreshNode'](_0x9f6cx5[_0x9f6cx1])
		}
	}
	, refreshTasksForDependencies: function (_0x9f6cx3) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = {}
			, _0x9f6cx2 = [];
		Ext['Array']['each'](_0x9f6cx3, function (_0x9f6cx4) {
			var _0x9f6cx6 = _0x9f6cx5['getDependencyTasks'](_0x9f6cx4);
			for (var _0x9f6cx7 = 0; _0x9f6cx7 < _0x9f6cx6['length']; _0x9f6cx7++) {
				if (!_0x9f6cx1[_0x9f6cx6[_0x9f6cx7]['getId']()]) {
					_0x9f6cx1[_0x9f6cx6[_0x9f6cx7]['getId']()] = 1;
					_0x9f6cx2['push'](_0x9f6cx6[_0x9f6cx7])
				}
			};
			_0x9f6cx5['refreshLockedViewRows'](_0x9f6cx2)
		})
	}
	, showBaseline: function () {
		this['addCls']('sch-ganttpanel-showbaseline')
	}
	, hideBaseline: function () {
		this['removeCls']('sch-ganttpanel-showbaseline')
	}
	, toggleBaseline: function () {
		this['el'] && this['el']['toggleCls']('sch-ganttpanel-showbaseline')
	}
	, zoomToFit: function (_0x9f6cx5, _0x9f6cx1) {
		_0x9f6cx1 = Ext['apply']({
			adjustStart: 1
			, adjustEnd: 1
		}, _0x9f6cx1);
		if (!_0x9f6cx5 && this['taskStore']['isTreeFiltered']()) {
			_0x9f6cx5 = this['getSchedulingView']()['store']['getRange']()
		};
		var _0x9f6cx2 = _0x9f6cx5 ? this['taskStore']['getTimeSpanForTasks'](_0x9f6cx5) : this['taskStore']['getTotalTimeSpan']();
		if (this['zoomToSpan'](_0x9f6cx2, _0x9f6cx1) === null) {
			if (!_0x9f6cx5) {
				this['fitTimeColumns']()
			}
		}
	}
	, getCascadeChanges: function () {
		return this['taskStore']['cascadeChanges']
	}
	, setCascadeChanges: function (_0x9f6cx1) {
		this['taskStore']['cascadeChanges'] = _0x9f6cx1
	}
	, getRecalculateParents: function () {
		return this['taskStore']['recalculateParents']
	}
	, setRecalculateParents: function (_0x9f6cx1) {
		this['taskStore']['recalculateParents'] = _0x9f6cx1
	}
	, setSkipWeekendsDuringDragDrop: function (_0x9f6cx1) {
		this['taskStore']['skipWeekendsDuringDragDrop'] = this['skipWeekendsDuringDragDrop'] = _0x9f6cx1
	}
	, getSkipWeekendsDuringDragDrop: function () {
		return this['taskStore']['skipWeekendsDuringDragDrop']
	}
	, bindResourceStore: function (_0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		var _0x9f6cx2 = {
			scope: _0x9f6cx5
			, update: _0x9f6cx5['onResourceStoreUpdate']
			, add: _0x9f6cx5['onResourceStoreDataChanged']
			, remove: _0x9f6cx5['onResourceStoreDataChanged']
			, write: _0x9f6cx5['onResourceStoreDataChanged']
			, refresh: _0x9f6cx5['onResourceStoreDataChanged']
			, sort: _0x9f6cx5['onResourceStoreDataChanged']
			, filter: _0x9f6cx5['onResourceStoreDataChanged']
			, clear: _0x9f6cx5['onResourceStoreDataChanged']
		};
		if (!_0x9f6cx1 && _0x9f6cx5['resourceStore']) {
			if (_0x9f6cx3 !== _0x9f6cx5['resourceStore'] && _0x9f6cx5['resourceStore']['autoDestroy']) {
				_0x9f6cx5['resourceStore']['destroy']()
			}
			else {
				_0x9f6cx5['mun'](_0x9f6cx5['resourceStore'], _0x9f6cx2)
			};
			if (!_0x9f6cx3) {
				_0x9f6cx5['resourceStore'] = null
			}
		};
		if (_0x9f6cx3) {
			_0x9f6cx3 = Ext['data']['StoreManager']['lookup'](_0x9f6cx3);
			_0x9f6cx5['mon'](_0x9f6cx3, _0x9f6cx2);
			this['taskStore']['setResourceStore'](_0x9f6cx3)
		};
		_0x9f6cx5['resourceStore'] = _0x9f6cx3;
		if (_0x9f6cx3 && !_0x9f6cx1) {
			_0x9f6cx5['refreshViews']()
		}
	}
	, bindAssignmentStore: function (_0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		var _0x9f6cx2 = {
			scope: _0x9f6cx5
			, beforetaskassignmentschange: _0x9f6cx5['onBeforeSingleTaskAssignmentChange']
			, taskassignmentschanged: _0x9f6cx5['onSingleTaskAssignmentChange']
			, update: _0x9f6cx5['onAssignmentStoreUpdate']
			, add: _0x9f6cx5['onAssignmentStoreDataChanged']
			, remove: _0x9f6cx5['onAssignmentStoreDataChanged']
			, write: _0x9f6cx5['onAssignmentStoreDataChanged']
			, refresh: _0x9f6cx5['onAssignmentStoreDataChanged']
			, filter: _0x9f6cx5['onAssignmentStoreDataChanged']
			, sort: _0x9f6cx5['onAssignmentStoreDataChanged']
			, clear: _0x9f6cx5['onAssignmentStoreDataChanged']
		};
		if (!_0x9f6cx1 && _0x9f6cx5['assignmentStore']) {
			if (_0x9f6cx3 !== _0x9f6cx5['assignmentStore'] && _0x9f6cx5['assignmentStore']['autoDestroy']) {
				_0x9f6cx5['assignmentStore']['destroy']()
			}
			else {
				_0x9f6cx5['mun'](_0x9f6cx5['assignmentStore'], _0x9f6cx2)
			};
			if (!_0x9f6cx3) {
				_0x9f6cx5['assignmentStore'] = null
			}
		};
		if (_0x9f6cx3) {
			_0x9f6cx3 = Ext['data']['StoreManager']['lookup'](_0x9f6cx3);
			_0x9f6cx5['mon'](_0x9f6cx3, _0x9f6cx2);
			this['taskStore']['setAssignmentStore'](_0x9f6cx3)
		};
		_0x9f6cx5['assignmentStore'] = _0x9f6cx3;
		if (_0x9f6cx3 && !_0x9f6cx1) {
			_0x9f6cx5['refreshViews']()
		}
	}
	, onResourceStoreUpdate: function (_0x9f6cx1, _0x9f6cx2) {
		Ext['Array']['each'](_0x9f6cx2['getTasks'](), function (_0x9f6cx5) {
			var _0x9f6cx3 = this['lockedGrid']['view']['store']['indexOf'](_0x9f6cx5);
			if (_0x9f6cx3 >= 0) {
				this['getView']()['refreshNode'](_0x9f6cx3)
			}
		}, this)
	}
	, onResourceStoreDataChanged: function () {
		if (this['taskStore']['getRootNode']()['childNodes']['length'] > 0) {
			this['refreshViews']()
		}
	}
	, onAssignmentStoreDataChanged: function () {
		if (this['taskStore']['getRootNode']()['childNodes']['length'] > 0) {
			this['refreshViews']()
		}
	}
	, onAssignmentStoreUpdate: function (_0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx1 = _0x9f6cx3['getTask']();
		if (_0x9f6cx1) {
			var _0x9f6cx5 = this['lockedGrid']['view']['store']['indexOf'](_0x9f6cx1);
			if (_0x9f6cx5 >= 0) {
				this['getView']()['refreshNode'](_0x9f6cx5)
			}
		}
	}
	, onBeforeSingleTaskAssignmentChange: function () {
		this['assignmentStore']['un']('add', this['onAssignmentStoreDataChanged'], this);
		this['assignmentStore']['un']('remove', this['onAssignmentStoreDataChanged'], this)
	}
	, onSingleTaskAssignmentChange: function (_0x9f6cx3, _0x9f6cx5) {
		this['assignmentStore']['on']('add', this['onAssignmentStoreDataChanged'], this);
		this['assignmentStore']['on']('remove', this['onAssignmentStoreDataChanged'], this);
		if (this['rendered']) {
			var _0x9f6cx1 = this['taskStore']['getModelById'](_0x9f6cx5);
			if (_0x9f6cx1 && _0x9f6cx1['parentNode']) {
				var _0x9f6cx2 = this['taskStore']['indexOf'](_0x9f6cx1);
				if (_0x9f6cx2 >= 0) {
					this['getView']()['refreshNode'](_0x9f6cx2)
				}
			}
		}
	}
	, updateAutoGeneratedCells: function (_0x9f6cx4, _0x9f6cx5) {
		var _0x9f6cx2 = this['lockedGrid']['view'];
		var _0x9f6cx8 = _0x9f6cx2['all']['startIndex'];
		var _0x9f6cx7 = _0x9f6cx2['all']['endIndex'];
		if (_0x9f6cx5 < 0 || _0x9f6cx5 > _0x9f6cx7) {
			return
		};
		for (var _0x9f6cx3 = Math['max'](_0x9f6cx8, _0x9f6cx5); _0x9f6cx3 <= _0x9f6cx7; _0x9f6cx3++) {
			var _0x9f6cx6 = _0x9f6cx2['store']['getAt'](_0x9f6cx3);
			var _0x9f6cx1 = this['getCellDom'](_0x9f6cx2, _0x9f6cx6, _0x9f6cx4);
			if (_0x9f6cx1) {
				_0x9f6cx1['firstChild']['innerHTML'] = _0x9f6cx4['renderer'](null, null, _0x9f6cx6)
			}
		}
	}
	, getCellDom: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx3 = _0x9f6cx2['getNode'](_0x9f6cx1, true);
		return _0x9f6cx3 && Ext['fly'](_0x9f6cx3)['down'](_0x9f6cx5['getCellSelector'](), true)
	}
	, redrawCell: function (_0x9f6cx1, _0x9f6cx3, _0x9f6cx5, _0x9f6cx6, _0x9f6cx4) {
		if (!this['isDestroyed']) {
			var _0x9f6cx8 = this['lockedGrid']['view'];
			var _0x9f6cx9 = this['getCellDom'](_0x9f6cx8, _0x9f6cx3, _0x9f6cx1);
			if (_0x9f6cx9) {
				var _0x9f6cx2 = [];
				if (_0x9f6cx5 === undefined) {
					_0x9f6cx5 = this['taskStore']['indexOf'](_0x9f6cx3)
				};
				if (_0x9f6cx6 === undefined) {
					_0x9f6cx6 = _0x9f6cx8['indexOf'](_0x9f6cx3)
				};
				if (_0x9f6cx4 === undefined) {
					_0x9f6cx4 = _0x9f6cx1['getIndex']()
				};
				_0x9f6cx8['renderCell'](_0x9f6cx1, _0x9f6cx3, _0x9f6cx5, _0x9f6cx6, _0x9f6cx4, _0x9f6cx2);
				var _0x9f6cx7 = Ext['DomHelper']['createDom'](_0x9f6cx2.join(''));
				Ext['fly'](_0x9f6cx9)['down']('.' + Ext['baseCSSPrefix'] + 'grid-cell-inner')['syncContent'](_0x9f6cx7)
			}
		}
	}
	, redrawColumns: function (_0x9f6cx7) {
		if (_0x9f6cx7['length'] && !this['isDestroyed']) {
			var _0x9f6cx1 = this['lockedGrid']['view'];
			for (var _0x9f6cx3 = _0x9f6cx1['all']['startIndex']; _0x9f6cx3 <= _0x9f6cx1['all']['endIndex']; _0x9f6cx3++) {
				var _0x9f6cx6 = _0x9f6cx1['store']['getAt'](_0x9f6cx3);
				for (var _0x9f6cx5 = 0, _0x9f6cx4 = _0x9f6cx7['length']; _0x9f6cx5 < _0x9f6cx4; _0x9f6cx5++) {
					var _0x9f6cx2 = _0x9f6cx7[_0x9f6cx5];
					this['redrawCell'](_0x9f6cx2, _0x9f6cx6, _0x9f6cx3, _0x9f6cx3, _0x9f6cx2['getIndex']())
				}
			}
		}
	}
	, updateEarlyDateColumns: function () {
		this['earlyColumns'] && this['earlyColumns']['length'] && this['redrawColumns'](this['earlyColumns'])
	}
	, updateLateDateColumns: function () {
		this['lateColumns'] && this['lateColumns']['length'] && this['redrawColumns'](this['lateColumns'])
	}
	, onMyViewReady: function () {
		this['on']('beforeedit', this['onBeforeEdit'], this);
		this['setupColumnListeners']();
		var _0x9f6cx1 = this['down']('splitter');
		if (_0x9f6cx1) {
			_0x9f6cx1['on']('dragend', function () {
				this['saveState']()
			}, this, {
				delay: 10
			})
		};
		if (this['ganttEditingPlugin']) {
			if ((Ext['isIE10m'] || Ext['isFirefox']) && Ext['getVersion']()['isLessThan']('6.0.2')) {
				this['applyIETabbingPatch']()
			};
			this['ganttEditingPlugin']['on']({
				editingstart: this['onEditingStart']
				, edit: this['onAfterEdit']
				, canceledit: this['onAfterEdit']
			})
		}
	}
	, applyIETabbingPatch: function () {
		var _0x9f6cx2 = function (_0x9f6cx4, _0x9f6cx5) {
			var _0x9f6cx3 = _0x9f6cx5['column'];
			_0x9f6cx3['preventUpdate'] = _0x9f6cx3['_oldPreventUpdate'];
			this['redrawCell'](_0x9f6cx3, _0x9f6cx5['record'])
		};
		var _0x9f6cx1 = function (_0x9f6cx4, _0x9f6cx5) {
			var _0x9f6cx3 = _0x9f6cx5['column'];
			_0x9f6cx3['_oldPreventUpdate'] = _0x9f6cx3['preventUpdate'];
			_0x9f6cx3['preventUpdate'] = true
		};
		this['ganttEditingPlugin']['on']({
			edit: _0x9f6cx2
			, canceledit: _0x9f6cx2
			, scope: this
		});
		this['ganttEditingPlugin']['on']({
			beforeedit: _0x9f6cx1
			, priority: -50
		})
	}
	, onBeforeEdit: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = _0x9f6cx5['column'];
		return !this['isReadOnly']() && _0x9f6cx5['record']['isEditable'](_0x9f6cx5['field']) && (!_0x9f6cx1['isEditable'] || _0x9f6cx1['isEditable'](_0x9f6cx5['record']))
	}
	, onEditingStart: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = _0x9f6cx2['field'];
		if (_0x9f6cx5['originalInstantUpdate']) {
			_0x9f6cx5['setInstantUpdate'](true)
		}
	}
	, onAfterEdit: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = _0x9f6cx1['column']['getEditor']();
		if (_0x9f6cx5['setInstantUpdate']) {
			_0x9f6cx5['setInstantUpdate'](false)
		}
	}
	, setupColumnListeners: function () {
		var _0x9f6cx1 = this;
		var _0x9f6cx2 = this['lockedGrid']['getHeaderContainer']();
		_0x9f6cx2['on']('add', this['onLockedColumnAdded'], this);
		_0x9f6cx2['on']('remove', this['onLockedColumnRemoved'], this);
		_0x9f6cx2['items']['each'](function (_0x9f6cx5) {
			_0x9f6cx1['onLockedColumnAdded'](_0x9f6cx2, _0x9f6cx5)
		})
	}
	, onLockedColumnRemoved: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = Ext.ux.Gantt['column'];
		if (_0x9f6cx5) {
			if (_0x9f6cx1['isDependencyColumn'] && _0x9f6cx1['useSequenceNumber']) {
				Ext['Array']['remove'](this['fullRefreshColumns'], _0x9f6cx1)
			}
			else {
				if (_0x9f6cx1['isEarlyStartDateColumn'] || _0x9f6cx1['isEarlyEndDateColumn']) {
					Ext['Array']['remove'](this['earlyColumns'], _0x9f6cx1)
				}
				else {
					if (_0x9f6cx1['isLateStartDateColumn'] || _0x9f6cx1['isLateEndDateColumn']) {
						Ext['Array']['remove'](this['lateColumns'], _0x9f6cx1)
					}
					else {
						if (_0x9f6cx1['isTotalSlackColumn'] || _0x9f6cx1['isFreeSlackColumn']) {
							Ext['Array']['remove'](this['earlyColumns'], _0x9f6cx1);
							Ext['Array']['remove'](this['lateColumns'], _0x9f6cx1)
						}
					}
				}
			}
		};
		if (this['earlyDatesListeners'] && !(this['slackColumns'] && this['slackColumns']['length']) && !(this['earlyColumns'] && this['earlyColumns']['length'])) {
			this['earlyDatesListeners']['destroy']()
		};
		if (this['lateDatesListeners'] && !(this['slackColumns'] && this['slackColumns']['length']) && !(this['lateColumns'] && this['lateColumns']['length'])) {
			this['lateDatesListeners']['destroy']()
		};
		if (this['fullRefreshColumnsListeners'] && !(this['fullRefreshColumns'] && this['fullRefreshColumns']['length'])) {
			this['fullRefreshColumnsListeners']['destroy']()
		}
	}
	, onLockedColumnAdded: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = Ext.ux.Gantt['column'];
		if (_0x9f6cx5) {
			if (_0x9f6cx1['isWBSColumn'] || _0x9f6cx1['isSequenceColumn']) {
				this['bindSequentialDataListeners'](_0x9f6cx1)
			}
			else {
				if (_0x9f6cx1['isDependencyColumn'] && _0x9f6cx1['useSequenceNumber']) {
					this['fullRefreshColumns'] = this['fullRefreshColumns'] || [];
					this['fullRefreshColumns']['push'](_0x9f6cx1);
					this['bindFullRefreshListeners'](_0x9f6cx1)
				}
				else {
					if (_0x9f6cx1['isEarlyStartDateColumn'] || _0x9f6cx1['isEarlyEndDateColumn']) {
						this['earlyColumns'] = this['earlyColumns'] || [];
						this['earlyColumns']['push'](_0x9f6cx1)
					}
					else {
						if (_0x9f6cx1['isLateStartDateColumn'] || _0x9f6cx1['isLateEndDateColumn']) {
							this['lateColumns'] = this['lateColumns'] || [];
							this['lateColumns']['push'](_0x9f6cx1)
						}
						else {
							if (_0x9f6cx1['isTotalSlackColumn'] || _0x9f6cx1['isFreeSlackColumn']) {
								this['earlyColumns'] = this['earlyColumns'] || [];
								this['earlyColumns']['push'](_0x9f6cx1);
								this['lateColumns'] = this['lateColumns'] || [];
								this['lateColumns']['push'](_0x9f6cx1)
							}
						}
					}
				}
			}
		};
		if (!this['earlyDatesListeners'] && (this['slackColumns'] && this['slackColumns']['length'] || this['earlyColumns'] && this['earlyColumns']['length'])) {
			this['bindEarlyDatesListeners']()
		};
		if (!this['lateDatesListeners'] && (this['slackColumns'] && this['slackColumns']['length'] || this['lateColumns'] && this['lateColumns']['length'])) {
			this['bindLateDatesListeners']()
		}
	}
	, getState: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['callParent'](arguments);
		_0x9f6cx2['lockedWidth'] = _0x9f6cx1['lockedGrid']['getWidth']();
		return _0x9f6cx2
	}
	, applyState: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['callParent'](arguments);
		if (_0x9f6cx2 && _0x9f6cx2['lockedWidth']) {
			_0x9f6cx1['lockedGrid']['setWidth'](_0x9f6cx2['lockedWidth'])
		}
	}
	, completeEdit: function () {
		this['ganttEditingPlugin'] && this['ganttEditingPlugin']['completeEdit']()
	}
	, cancelEdit: function () {
		this['ganttEditingPlugin'] && this['ganttEditingPlugin']['cancelEdit']()
	}
	, setRowHeight: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['isViewport'] ? '.sch-ganttpanel' : '#' + this['getId']();
		var _0x9f6cx3 = _0x9f6cx2 + ' .' + Ext['baseCSSPrefix'] + 'grid-cell';
		var _0x9f6cx5 = _0x9f6cx3 + '{ height:' + _0x9f6cx1 + 'px; }';
		if (!this['rowHeightStyleSheetNode']) {
			this['rowHeightStyleSheetNode'] = Ext['util']['CSS']['createStyleSheet'](_0x9f6cx5)['ownerNode']
		}
		else {
			this['rowHeightStyleSheetNode']['innerHTML'] = _0x9f6cx5
		};
		this['getSchedulingView']()['setRowHeight'](_0x9f6cx1)
	}
	, getTaskEditor: function (_0x9f6cx5) {
		var _0x9f6cx2 = this['plugins'];
		for (var _0x9f6cx3 = 0, _0x9f6cx1 = _0x9f6cx2['length']; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
			var _0x9f6cx4 = _0x9f6cx2[_0x9f6cx3];
			if (_0x9f6cx4['isTaskEditor'] && (!_0x9f6cx5 || _0x9f6cx4['matchFilters'](_0x9f6cx5))) {
				return _0x9f6cx4
			}
		}
	}
	, onRowClicked: function (_0x9f6cx1, _0x9f6cx2) {
		this['getSchedulingView']()['scrollEventIntoView'](_0x9f6cx2, false, false)
	}
	, onBeforeTaskReorder: function (_0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx1 = _0x9f6cx3['record'];
		var _0x9f6cx2 = Ext['grid']['selection'] && Ext['grid']['selection']['SpreadsheetModel'] && this['getSelectionModel']() instanceof Ext['grid']['selection']['SpreadsheetModel'];
		_0x9f6cx5['_reorderingTask'] = _0x9f6cx1;
		return (!_0x9f6cx2 || Boolean(_0x9f6cx3['getTarget']('.sch-gantt-column-dragdrop'))) && !this['isReadOnly']() && _0x9f6cx1 && !_0x9f6cx1['isReadOnly']()
	}
	, onTaskReorderOver: function (_0x9f6cx2, _0x9f6cx7, _0x9f6cx8, _0x9f6cx3) {
		var _0x9f6cx1 = this['self']['prototype']['onNodeOver']['apply'](this, arguments);
		if (_0x9f6cx1 !== this['dropNotAllowed']) {
			var _0x9f6cx6 = this['getTargetFromEvent'](_0x9f6cx8);
			if (_0x9f6cx6) {
				var _0x9f6cx5 = this['view']['getRecord'](_0x9f6cx6);
				_0x9f6cx1 = _0x9f6cx5 !== _0x9f6cx3['_reorderingTask'] && !_0x9f6cx5['isReadOnly']() ? this['dropAllowed'] : this['dropNotAllowed']
			}
		};
		return _0x9f6cx1
	}
	, onTaskReorder: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cxc, _0x9f6cx8) {
		var _0x9f6cx5 = this['valid'];
		if (_0x9f6cx5) {
			var _0x9f6cxa = this['getTargetFromEvent'](_0x9f6cxc);
			var _0x9f6cx9 = this['view']['getRecord'](_0x9f6cxa);
			_0x9f6cx8['_reorderingTask'] && !_0x9f6cx9['isReadOnly']();
			_0x9f6cx5 = _0x9f6cx9 !== _0x9f6cx8['_reorderingTask'] && !_0x9f6cx9['isReadOnly']();
			if (_0x9f6cx5) {
				var _0x9f6cx13 = _0x9f6cx2['view']['store'];
				var _0x9f6cx6 = _0x9f6cx8['records'];
				var _0x9f6cxb = {};
				var _0x9f6cx7 = _0x9f6cx2['view']['up']('ganttpanel');
				_0x9f6cx7['suspendRefresh']();
				Ext['Array']['each'](_0x9f6cx6, function (_0x9f6cx4) {
					_0x9f6cxb[_0x9f6cx4['parentNode']['id']] = _0x9f6cx4['parentNode']
				});
				_0x9f6cx13['suspendAutoRecalculateParents']++;
				_0x9f6cx5 = this['self']['prototype']['onNodeDrop']['apply'](this, arguments);
				_0x9f6cx13['suspendAutoRecalculateParents']--;
				if (_0x9f6cx5) {
					_0x9f6cxb[_0x9f6cx6[0]['parentNode']['id']] = _0x9f6cx6[0]['parentNode'];
					var _0x9f6cx1 = Ext['Object']['getValues'](_0x9f6cxb);
					_0x9f6cx1['sort'](function (_0x9f6cxe, _0x9f6cx4) {
						return _0x9f6cxe['data']['depth'] > _0x9f6cx4['data']['depth'] ? -1 : 1
					});
					Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cx4) {
						_0x9f6cx4['refreshCalculatedParentNodeData']()
					})
				};
				_0x9f6cx7['resumeRefresh'](true)
			}
		};
		return _0x9f6cx5
	}
	, getSelectedRows: function () {
		var _0x9f6cx1 = this['getSelectionModel']()['getSelected']();
		var _0x9f6cx2 = [];
		if (Ext['grid']['selection']['Cells'] && _0x9f6cx1 instanceof Ext['grid']['selection']['Cells']) {
			_0x9f6cx1['eachRow'](function (_0x9f6cx5) {
				_0x9f6cx2['push'](_0x9f6cx5)
			})
		}
		else {
			_0x9f6cx2 = this['getSelectionModel']()['getSelection']()
		};
		return _0x9f6cx2
	}
	, destroy: function () {
		clearTimeout(this['refreshTimer']);
		if (this['destroyStores']) {
			var _0x9f6cx1 = this['taskStore']['calendarManager'];
			this['assignmentStore'] && this['assignmentStore']['destroy']();
			this['assignmentStore'] = null;
			this['resourceStore'] && this['resourceStore']['destroy']();
			this['resourceStore'] = null;
			this['taskStore'] && this['taskStore']['destroy']();
			this['taskStore'] = null;
			this['dependencyStore'] && this['dependencyStore']['destroy']();
			this['dependencyStore'] = null;
			_0x9f6cx1 && _0x9f6cx1['destroy']()
		};
		if (this['rowHeightStyleSheetNode']) {
			this['rowHeightStyleSheetNode']['parentNode']['removeChild'](this['rowHeightStyleSheetNode']);
			this['rowHeightStyleSheetNode'] = null
		};
		this['callParent'](arguments)
	}
	, collapseAll: function () {
		this['taskStore']['suspendEvent']('refresh', 'add', 'insert', 'remove');
		this['lockedGrid']['getView']()['blockRefresh'] = this['normalGrid']['getView']()['blockRefresh'] = true;
		this['callParent'](arguments);
		this['lockedGrid']['getView']()['blockRefresh'] = this['normalGrid']['getView']()['blockRefresh'] = false;
		this['taskStore']['resumeEvent']('refresh', 'add', 'insert', 'remove');
		this['refreshViews']()
	}
	, expandAll: function () {
		this['lockedGrid']['getView']()['blockRefresh'] = this['normalGrid']['getView']()['blockRefresh'] = true;
		this['callParent'](arguments);
		this['lockedGrid']['getView']()['blockRefresh'] = this['normalGrid']['getView']()['blockRefresh'] = false;
		this['refreshViews']()
	}
	, getCalendar: function () {
		return this['getTaskStore']()['getCalendar']()
	}
});
Ext.define('Ext.ux.Scheduler.panel.TimelineGridPanel', {
	extend: 'Ext.grid.Panel'
	, mixins: ['Ext.ux.Scheduler.mixin.Localizable', 'Ext.ux.Scheduler.mixin.TimelinePanel']
	, alias: ['widget.timelinegrid']
	, subGridXType: 'gridpanel'
	, isTimelineGridPanel: true
	, initComponent: function () {
		this['callParent'](arguments);
		this['getSchedulingView']()._initializeTimelineView()
	}
}, function () {
	this['override'](Ext.ux.Scheduler['mixin']['TimelinePanel']['prototype']['inheritables']() || {})
});
Ext.define('Ext.ux.Scheduler.patches.TablePanel', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.panel.Table'
	, applyFn: function () {
		var _0x9f6cx1 = {};
		if (Ext['getVersion']()['equals']('6.0.1.250')) {
			_0x9f6cx1['ensureVisible'] = function (_0x9f6cx2, _0x9f6cx5) {
				if (_0x9f6cx5 && _0x9f6cx5['column'] && this['getVisibleColumnManager']()['indexOf'](_0x9f6cx5['column']) === -1) {
					return
				};
				this['callParent'](arguments)
			}
		};
		Ext['ClassManager']['get'](this['target'])['override'](_0x9f6cx1)
	}
});
Ext.define('Ext.ux.Gantt.view.ResourceHistogram', {
	extend: 'Ext.ux.Scheduler.view.TimelineGridView'
	, alias: 'widget.resourcehistogramview'
	, requires: ['Ext.ux.Scheduler.patches.DragDropManager', 'Ext.ux.Scheduler.patches.NavigationModel', 'Ext.XTemplate', 'Ext.util.Format', 'Ext.ux.Scheduler.util.Date']
	, mixins: ['Ext.ux.Scheduler.mixin.GridViewCanvas']
	, _cmpCls: 'gnt-resourcehistogramview'
	, scheduledEventName: 'bar'
	, eventSelector: '.gnt-resourcehistogram-bar'
	, barTpl: null
	, barRenderer: Ext['emptyFn']
	, limitLineRenderer: Ext['emptyFn']
	, lineRenderer: Ext['emptyFn']
	, lineTpl: null
	, limitLineTpl: null
	, _barCls: 'gnt-resourcehistogram-bar'
	, _limitLineCls: 'gnt-resourcehistogram-limitline'
	, _limitLineVerticalCls: 'gnt-resourcehistogram-limitline-vertical'
	, _lineCls: 'gnt-resourcehistogram-line'
	, barCls: null
	, limitLineCls: null
	, lineCls: null
	, limitLineWidth: 1
	, rowHeight: 60
	, showLimitLinesThreshold: 10
	, showVerticalLimitLines: true
	, labelMode: false
	, labelPercentFormat: '0'
	, labelUnitsFormat: '0.0'
	, histogram: null
	, unitHeight: null
	, availableRowHeight: null
	, initComponent: function (_0x9f6cx1) {
		if (this['barCls']) {
			this['eventSelector'] = '.' + this['barCls']
		};
		if (!this['barTpl']) {
			this['barTpl'] = new Ext.XTemplate('<tpl for=".">', '<div id="{id}" class="gnt-resourcehistogram-bar ' + (this['barCls'] || '') + ' {cls}" gnt-bar-index="{index}" style="left:{left}px;top:{top}px;height:{height}px;width:{width}px">', '<tpl if="text !== \'\'">', '<span class="gnt-resourcehistogram-bar-text" style="bottom:' + Math['floor'](this['rowHeight'] / 2) + 'px">{text}</span>', '</tpl>', '</div>', '</tpl>')
		};
		if (!this['lineTpl']) {
			this['lineTpl'] = new Ext.XTemplate('<tpl for=".">', '<div class="gnt-resourcehistogram-line ' + (this['lineCls'] || '') + ' {cls}" style="top:{top}px;"></div>', '</tpl>')
		};
		if (!this['limitLineTpl']) {
			this['limitLineTpl'] = new Ext.XTemplate('<tpl for=".">', '<div class="gnt-resourcehistogram-limitline ' + (this['limitLineCls'] || '') + ' {cls}" style="left:{left}px;top:{top}px;width:{width}px;height:{height}px"></div>', '</tpl>')
		};
		this['callParent'](arguments);
		this['unitHeight'] = this['getAvailableRowHeight']() / (this['scaleMax'] - this['scaleMin'] + this['scaleStep'])
	}
	, renderLines: function () {
		return this['lineTpl']['apply'](this['prepareLines']())
	}
	, prepareLines: function () {
		var _0x9f6cx4 = this['scaleMin']
			, _0x9f6cxc = this['scaleMax']
			, _0x9f6cxa = _0x9f6cx4
			, _0x9f6cx7 = this['scaleLabelStep']
			, _0x9f6cx1 = this['getAvailableRowHeight']()
			, _0x9f6cx6 = []
			, _0x9f6cxd = this['_lineCls']
			, _0x9f6cxb = _0x9f6cxd + 'min';
		var _0x9f6cxe, _0x9f6cx2;
		if (this['scalePoints']) {
			for (var _0x9f6cx3 = 0, _0x9f6cx5 = this['scalePoints']['length']; _0x9f6cx3 < _0x9f6cx5; _0x9f6cx3++) {
				var _0x9f6cx8 = this['scalePoints'][_0x9f6cx3];
				_0x9f6cxe = {
					value: _0x9f6cx8['value']
					, top: _0x9f6cx8['top'] || Math['round'](_0x9f6cx1 - this['unitHeight'] * (_0x9f6cx8['value'] - _0x9f6cx4))
					, cls: _0x9f6cx8['cls'] + (_0x9f6cx8['label'] ? ' ' + _0x9f6cxd + '-label' : '') + (_0x9f6cx3 === 0 ? ' ' + _0x9f6cxd + '-min' : (_0x9f6cx3 == _0x9f6cx5 ? ' ' + _0x9f6cxd + '-max' : ''))
				};
				_0x9f6cx2 = this['lineRenderer'](_0x9f6cx6, _0x9f6cxe);
				_0x9f6cx6['push'](Ext['apply'](_0x9f6cxe, _0x9f6cx2))
			}
		}
		else {
			while (_0x9f6cxa <= _0x9f6cxc) {
				_0x9f6cxe = {
					value: _0x9f6cxa
					, top: Math['round'](_0x9f6cx1 - this['unitHeight'] * (_0x9f6cxa - _0x9f6cx4))
					, cls: _0x9f6cxb
				};
				_0x9f6cx2 = this['lineRenderer'](_0x9f6cx6, _0x9f6cxe);
				_0x9f6cx6['push'](Ext['apply'](_0x9f6cxe, _0x9f6cx2));
				_0x9f6cxa += this['scaleStep'];
				_0x9f6cxb = _0x9f6cxa % _0x9f6cx7 ? '' : _0x9f6cxd + '-label';
				if (_0x9f6cxa == _0x9f6cxc) {
					_0x9f6cxb += ' ' + _0x9f6cxd + '-max'
				}
			};
			if (_0x9f6cx6['length'] && _0x9f6cx6[_0x9f6cx6['length'] - 1]['value'] !== _0x9f6cxc) {
				_0x9f6cxe = {
					value: _0x9f6cxc
					, top: Math['round'](_0x9f6cx1 - this['unitHeight'] * (_0x9f6cxc - _0x9f6cx4))
					, cls: (_0x9f6cxc % _0x9f6cx7 ? '' : _0x9f6cxd + '-label') + ' ' + _0x9f6cxd + '-max'
				};
				_0x9f6cx2 = this['lineRenderer'](_0x9f6cx6, _0x9f6cxe);
				_0x9f6cx6['push'](Ext['apply'](_0x9f6cxe, _0x9f6cx2))
			}
		};
		return _0x9f6cx6
	}
	, renderLimitLines: function (_0x9f6cx1) {
		return this['limitLineTpl']['apply'](this['prepareLimitLines'](_0x9f6cx1))
	}
	, getLimitLinesConnector: function (_0x9f6cx2, _0x9f6cx1) {
		return {
			left: _0x9f6cx2['right']
			, width: 1
			, top: Math['min'](_0x9f6cx2['top'], _0x9f6cx1['top'])
			, height: Math['abs'](_0x9f6cx2['top'] - _0x9f6cx1['top']) + this['limitLineWidth']
			, cls: this['_limitLineCls'] + '-top ' + this['_limitLineVerticalCls']
		}
	}
	, pushLimitLine: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx4 = _0x9f6cx5[_0x9f6cx5['length'] - 1];
		if (_0x9f6cx3) {
			if (_0x9f6cx4) {
				_0x9f6cx4['width'] = _0x9f6cx3['right'] - _0x9f6cx4['left'];
				_0x9f6cx4['right'] = _0x9f6cx3['right']
			}
			else {
				_0x9f6cx2['left'] = _0x9f6cx3['left'];
				_0x9f6cx2['width'] = _0x9f6cx2['right'] - _0x9f6cx3['left']
			}
		};
		if (_0x9f6cx4 && this['showVerticalLimitLines']) {
			if (!_0x9f6cx4['visible']) {
				_0x9f6cx5['pop']()
			};
			_0x9f6cx5['push'](this['getLimitLinesConnector'](_0x9f6cx4, _0x9f6cx2))
		};
		var _0x9f6cx1 = this['limitLineRenderer'](_0x9f6cx5, _0x9f6cx2, _0x9f6cx3);
		_0x9f6cx5['push'](Ext['apply'](_0x9f6cx2, _0x9f6cx1))
	}
	, prepareLimitLines: function (_0x9f6cx16) {
		if (!_0x9f6cx16) {
			return
		};
		var _0x9f6cx2 = []
			, _0x9f6cx1 = this['scaleMin']
			, _0x9f6cx3 = this['scaleMax']
			, _0x9f6cxa = this['scaleStep']
			, _0x9f6cx10 = this['scaleUnit']
			, _0x9f6cx5 = this['getAvailableRowHeight']()
			, _0x9f6cxd = this['_limitLineCls']
			, _0x9f6cx14 = this['getTimeAxisViewModel']() && this['getTimeAxisViewModel']()['getTotalWidth']()
			, _0x9f6cxf, _0x9f6cxc, _0x9f6cxb;
		for (var _0x9f6cx11 = 0, _0x9f6cx12 = _0x9f6cx16['length']; _0x9f6cx11 < _0x9f6cx12; _0x9f6cx11++) {
			var _0x9f6cx4 = this['calendar']['convertMSDurationToUnit'](_0x9f6cx16[_0x9f6cx11]['allocationMS'], _0x9f6cx10);
			var _0x9f6cx7 = true;
			if (_0x9f6cx4 * this['unitHeight'] > _0x9f6cx5) {
				_0x9f6cx4 = _0x9f6cx3 + _0x9f6cxa;
				_0x9f6cx7 = false
			}
			else {
				if (_0x9f6cx4 <= 0) {
					_0x9f6cx4 = 0;
					_0x9f6cx7 = false
				}
			};
			var _0x9f6cx6 = _0x9f6cx16[_0x9f6cx11]['startDate'] && this['getCoordinateFromDate'](_0x9f6cx16[_0x9f6cx11]['startDate'], true) || 0;
			var _0x9f6cx17 = _0x9f6cx16[_0x9f6cx11]['endDate'] && this['getCoordinateFromDate'](_0x9f6cx16[_0x9f6cx11]['endDate'], true) || _0x9f6cx14;
			if (_0x9f6cx6 < 0) {
				_0x9f6cx6 = 0
			};
			if (_0x9f6cx17 < 0) {
				_0x9f6cx17 = _0x9f6cx14
			};
			_0x9f6cxc = {
				left: _0x9f6cx6
				, width: _0x9f6cx17 - _0x9f6cx6
				, right: _0x9f6cx17
				, top: ''
				, height: 0
				, cls: ''
				, visible: _0x9f6cx7
			};
			_0x9f6cxc['top'] = Math['round'](_0x9f6cx5 - (_0x9f6cx4 - _0x9f6cx1) * this['unitHeight']);
			if (_0x9f6cx7) {
				_0x9f6cxc['cls'] += ' ' + _0x9f6cxd + '-top'
			};
			_0x9f6cxb = _0x9f6cx2[_0x9f6cx2['length'] - 1] || _0x9f6cxf;
			var _0x9f6cx8 = _0x9f6cxc['width'] <= this['showLimitLinesThreshold'];
			if (_0x9f6cxb && (_0x9f6cxc['top'] == _0x9f6cxb['top'] || (_0x9f6cx8 && !_0x9f6cx7))) {
				_0x9f6cxb['width'] = _0x9f6cx17 - _0x9f6cxb['left'];
				_0x9f6cxb['right'] = _0x9f6cx17;
				_0x9f6cxc = null;
				if (_0x9f6cx2[_0x9f6cx2['length'] - 1]) {
					_0x9f6cxf = null
				}
				else {
					if (_0x9f6cxf['width'] > this['showLimitLinesThreshold']) {
						this['pushLimitLine'](_0x9f6cx2, _0x9f6cxf);
						_0x9f6cxf = null
					}
				}
			}
			else {
				if (_0x9f6cx8 && _0x9f6cx7) {
					if (_0x9f6cxf) {
						var _0x9f6cxe = _0x9f6cxf['width'] + _0x9f6cxc['width'];
						_0x9f6cxf['top'] = Math['round'](_0x9f6cxc['top'] * _0x9f6cxc['width'] / _0x9f6cxe + _0x9f6cxf['top'] * _0x9f6cxf['width'] / _0x9f6cxe);
						_0x9f6cxf['width'] = _0x9f6cx17 - _0x9f6cxf['left'];
						_0x9f6cxf['right'] = _0x9f6cx17
					}
					else {
						_0x9f6cxf = _0x9f6cxc
					};
					if (_0x9f6cxf['width'] > this['showLimitLinesThreshold']) {
						this['pushLimitLine'](_0x9f6cx2, _0x9f6cxf);
						_0x9f6cxc = _0x9f6cxf = null
					}
				}
				else {
					this['pushLimitLine'](_0x9f6cx2, _0x9f6cxc, _0x9f6cxf);
					_0x9f6cxc = _0x9f6cxf = null
				}
			}
		};
		_0x9f6cxc && this['pushLimitLine'](_0x9f6cx2, _0x9f6cxc, _0x9f6cxf);
		_0x9f6cxb = _0x9f6cx2[_0x9f6cx2['length'] - 1];
		if (_0x9f6cxb && !_0x9f6cxb['visible']) {
			_0x9f6cx2['pop']()
		};
		return _0x9f6cx2
	}
	, renderBars: function (_0x9f6cx1, _0x9f6cx2) {
		return this['barTpl']['apply'](this['prepareBars'](_0x9f6cx1, _0x9f6cx2))
	}
	, prepareBars: function (_0x9f6cx18, _0x9f6cxd) {
		if (!_0x9f6cx18) {
			return
		};
		var _0x9f6cx2 = []
			, _0x9f6cx5 = this['getAvailableRowHeight']()
			, _0x9f6cx7 = this['_barCls']
			, _0x9f6cx16 = this['scaleUnit']
			, _0x9f6cxb = Ext.ux.Scheduler['util']['Date']['getShortNameOfUnit'](_0x9f6cx16)
			, _0x9f6cx1 = this['scaleMin']
			, _0x9f6cx3 = this['scaleMax']
			, _0x9f6cxf = this['scaleStep']
			, _0x9f6cx10 = _0x9f6cx3 + _0x9f6cxf
			, _0x9f6cxc = this['timeAxis']['getStart']()
			, _0x9f6cx8 = this['timeAxis']['getEnd']()
			, _0x9f6cx1b, _0x9f6cx4;
		for (var _0x9f6cx14 = 0, _0x9f6cx11 = _0x9f6cx18['length']; _0x9f6cx14 < _0x9f6cx11; _0x9f6cx14++) {
			var _0x9f6cx17 = _0x9f6cx18[_0x9f6cx14];
			if (_0x9f6cx17['totalAllocation']) {
				_0x9f6cx4 = this['calendar']['convertMSDurationToUnit'](_0x9f6cx17['allocationMS'], _0x9f6cx16);
				var _0x9f6cx12 = _0x9f6cx17['endDate'] <= _0x9f6cx8;
				var _0x9f6cxe = Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0x9f6cx17['startDate'], _0x9f6cxc, _0x9f6cx8);
				var _0x9f6cx6 = this['getCoordinateFromDate'](_0x9f6cxe ? _0x9f6cx17['startDate'] : _0x9f6cxc, true);
				var _0x9f6cx15 = this['getCoordinateFromDate'](_0x9f6cx12 ? _0x9f6cx17['endDate'] : _0x9f6cx8, true);
				_0x9f6cx1b = {
					id: 'bar-' + _0x9f6cxd + '-' + _0x9f6cx14
					, index: _0x9f6cx14
					, left: _0x9f6cx6
					, width: _0x9f6cx15 - _0x9f6cx6
					, height: _0x9f6cx5
					, top: 0
					, text: ''
					, cls: ''
				};
				if (this['labelMode']) {
					switch (this['labelMode']) {
					case 'percent':
						_0x9f6cx1b['text'] = Ext['util']['Format']['number'](_0x9f6cx17['totalAllocation'], this['labelPercentFormat']) + '%';
						break;
					case 'units':
						_0x9f6cx1b['text'] = Ext['util']['Format']['number'](_0x9f6cx4, this['labelUnitsFormat']) + _0x9f6cxb;
						break;
					default:
						_0x9f6cx1b['text'] = this['labelMode']['apply']({
							allocation: _0x9f6cx4
							, percent: _0x9f6cx17['totalAllocation']
						})
					}
				};
				if (_0x9f6cx4 <= _0x9f6cx10) {
					_0x9f6cx1b['height'] = _0x9f6cx4 >= _0x9f6cx1 ? Math['round']((_0x9f6cx4 - _0x9f6cx1) * this['unitHeight']) : 0;
					_0x9f6cx1b['top'] = _0x9f6cx5 - _0x9f6cx1b['height']
				}
				else {
					_0x9f6cx1b['cls'] += ' ' + _0x9f6cx7 + '-partofbar'
				};
				if (_0x9f6cx17['totalAllocation'] > 100 || _0x9f6cx17['totalOverAllocationMS'] > 0) {
					_0x9f6cx1b['cls'] += ' ' + _0x9f6cx7 + '-overwork'
				};
				var _0x9f6cxa = this['barRenderer'](_0x9f6cxd, _0x9f6cx17, _0x9f6cx1b);
				if (_0x9f6cxa && _0x9f6cxa['cls']) {
					_0x9f6cxa['cls'] = _0x9f6cx1b['cls'] + ' ' + _0x9f6cxa['cls']
				};
				_0x9f6cx1b = Ext['apply'](_0x9f6cx1b, _0x9f6cxa);
				_0x9f6cx2['push'](_0x9f6cx1b)
			}
		};
		return _0x9f6cx2
	}
	, getAvailableRowHeight: function () {
		if (this['availableRowHeight']) {
			return this['availableRowHeight']
		};
		this['availableRowHeight'] = this['rowHeight'] - this['cellTopBorderWidth'] - this['cellBottomBorderWidth'];
		return this['availableRowHeight']
	}
	, resolveEventRecord: function (_0x9f6cx5) {
		var _0x9f6cx4 = this['findItemByChild'](_0x9f6cx5);
		if (_0x9f6cx4) {
			var _0x9f6cx6 = this['getRecord'](_0x9f6cx4);
			if (_0x9f6cx6) {
				var _0x9f6cx1 = {
					resource: _0x9f6cx6
				};
				var _0x9f6cx7 = this['histogram']['allocationData'][_0x9f6cx6['getId']()];
				var _0x9f6cx2 = _0x9f6cx5['getAttribute']('gnt-bar-index');
				var _0x9f6cx3 = _0x9f6cx7['bars'][_0x9f6cx2];
				if (_0x9f6cx3) {
					_0x9f6cx1['startDate'] = _0x9f6cx3['startDate'];
					_0x9f6cx1['endDate'] = _0x9f6cx3['endDate'];
					_0x9f6cx1['assignments'] = _0x9f6cx3['assignments'];
					_0x9f6cx1['allocationMS'] = _0x9f6cx3['allocationMS'];
					_0x9f6cx1['totalAllocation'] = _0x9f6cx3['totalAllocation']
				};
				return _0x9f6cx1
			}
		};
		return null
	}
	, resolveEventRecordFromResourceRow: function (_0x9f6cx1) {
		return this['resolveEventRecord'](_0x9f6cx1)
	}
	, getDataForTooltipTpl: function (_0x9f6cx1) {
		return _0x9f6cx1
	}
});
Ext.define('Ext.ux.Gantt.panel.ResourceHistogram', {
	extend: 'Ext.ux.Scheduler.panel.TimelineGridPanel'
	, requires: ['Ext.ux.Scheduler.patches.TablePanel', 'Ext.XTemplate', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.plugin.NonWorkingTime', 'Ext.ux.Gantt.column.Scale', 'Ext.ux.Gantt.view.ResourceHistogram']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.resourcehistogram'
	, viewType: 'resourcehistogramview'
	, layout: 'border'
	, preserveScrollOnRefresh: true
	, showScaleLines: false
	, showLimitLines: true
	, showLimitLinesThreshold: 10
	, showVerticalLimitLines: true
	, cacheLimitDurationMS: 0
	, cacheLimitDuration: 6
	, cacheLimitDurationUnit: 'mo'
	, calendarResources: null
	, calendarListenersHash: null
	, calendar: null
	, taskStore: null
	, resourceStore: null
	, assignmentStore: null
	, startDate: null
	, endDate: null
	, highlightWeekends: true
	, allocationData: null
	, scaleUnit: 'HOUR'
	, scaleMin: 0
	, scaleMax: 24
	, scaleLabelStep: 4
	, scaleStep: 2
	, rowHeight: 50
	, scaleColumnClass: 'Ext.ux.Gantt.column.Scale'
	, scaleColumnConfigs: ['scalePoints', 'scaleStep', 'scaleLabelStep', 'scaleMin', 'scaleMax', 'scaleLabelStep', 'scaleStep']
	, normalViewConfigs: ['barCls', 'barTpl', 'barRenderer', 'lineRenderer', 'limitLineRenderer', 'lineTpl', 'lineCls', 'limitLineTpl', 'limitLineCls', 'limitLineWidth', 'labelMode', 'labelPercentFormat', 'labelUnitsFormat', 'scaleMin', 'scaleMax', 'scaleStep', 'scaleLabelStep', 'scalePoints', 'scaleUnit', 'loadMask', 'showLimitLinesThreshold', 'showVerticalLimitLines', 'calendar']
	, cacheUpdateSuspended: false
	, suspendedCacheUpdatesCount: 0
	, gapThreshold: 24 * 3600000
	, rowLines: true
	, initComponent: function () {
		this['cacheLimitDurationMS'] = Ext.ux.Scheduler['util']['Date']['getUnitDurationInMs'](this['cacheLimitDurationUnit']) * this['cacheLimitDuration'];
		this['resetAllocationDataCache']();
		this['initStores']();
		this['lockedGridConfig'] = Ext['applyIf'](this['lockedGridConfig'] || {}, {
			reserveScrollbar: false
			, width: 300
			, forceFit: true
		});
		this['normalViewConfig'] = Ext['apply'](this['normalViewConfig'] || {}, {
			histogram: this
			, trackOver: false
			, rowHeight: this['rowHeight']
			, preserveScrollOnRefresh: this['preserveScrollOnRefresh']
		});
		this['lockedViewConfig'] = Ext['apply'](this['lockedViewConfig'] || {}, {
			rowHeight: this['rowHeight']
			, preserveScrollOnRefresh: this['preserveScrollOnRefresh']
		});
		if (this['scalePoints']) {
			this['scalePoints']['sort'](function (_0x9f6cx3, _0x9f6cx5) {
				return _0x9f6cx3['value'] > _0x9f6cx5['value'] ? 1 : -1
			});
			this['scaleMin'] = this['scalePoints'][0]['value'];
			this['scaleMax'] = this['scalePoints'][this['scalePoints']['length'] - 1]['value'];
			this['scaleStep'] = (this['scaleMax'] - this['scaleMin']) / 10
		};
		this['initColumns']();
		Ext['Array']['each'](this['normalViewConfigs'], function (_0x9f6cx5) {
			if (_0x9f6cx5 in this) {
				this['normalViewConfig'][_0x9f6cx5] = this[_0x9f6cx5]
			}
		}, this);
		this['callParent'](arguments);
		var _0x9f6cx2 = 'gnt-resourcehistogram sch-horizontal ';
		this['addCls'](_0x9f6cx2);
		this['registerRenderer'](this['columnRenderer'], this);
		var _0x9f6cx1 = this['getSchedulingView']();
		this['relayEvents'](_0x9f6cx1, ['barclick', 'bardblclick', 'barcontextmenu'])
	}
	, onRender: function () {
		var _0x9f6cx1 = this['getScaleColumn']();
		if (_0x9f6cx1) {
			_0x9f6cx1['setAvailableHeight'](this['getSchedulingView']()['getAvailableRowHeight']())
		};
		this['callParent'](arguments)
	}
	, initStores: function () {
		var _0x9f6cx1 = false;
		if (this['crudManager']) {
			this['setCrudManager'](this['crudManager']);
			_0x9f6cx1 = true
		};
		this['store'] = this['resourceStore'];
		this['taskStore'] = this['taskStore'] || this['store']['getTaskStore']();
		this['calendar'] = this['calendar'] || this['taskStore'] && this['taskStore']['getCalendar']();
		if (!this['calendar']) {
			throw 'Cannot get project calendar instance: please specify either "calendar" or "taskStore" option'
		};
		this['assignmentStore'] = this['assignmentStore'] || this['store']['getAssignmentStore']() || this['taskStore'] && this['taskStore']['getAssignmentStore']();
		if (!_0x9f6cx1) {
			this['bindStores']()
		}
	}
	, getCrudManager: function () {
		return this['crudManager']
	}
	, setCrudManager: function (_0x9f6cx1) {
		this['unbindStores']();
		this['crudManagerListeners'] && this['crudManagerListeners']['destroy']();
		this['crudManager'] = _0x9f6cx1;
		this['taskStore'] = this['crudManager']['getTaskStore']();
		this['store'] = this['resourceStore'] = this['crudManager']['getResourceStore']();
		this['assignmentStore'] = this['crudManager']['getAssignmentStore']();
		this['crudManagerListeners'] = this['mon'](this['crudManager'], {
			beforeloadapply: {
				fn: this['beforeCrudManagerLoad']
				, priority: -999
			}
			, load: this['afterCrudManagerLoad']
			, destroyable: true
			, scope: this
		});
		this['bindStores']()
	}
	, beforeCrudManagerLoad: function () {
		this['suspendStoreListeners']()
	}
	, afterCrudManagerLoad: function () {
		this['beforeCrudOperationStart'](this['crudManager'], null, 'load');
		this['resumeStoreListeners'](true);
		this['onCrudOperationComplete']()
	}
	, bindStores: function () {
		if (this['taskStore']) {
			this['mon'](this['taskStore'], {
				refresh: this['onTaskStoreRefresh']
				, load: this['onTaskStoreRefresh']
				, update: this['onTaskUpdateOrAppend']
				, nodeappend: this['onTaskUpdateOrAppend']
				, scope: this
			})
		};
		if (this['assignmentStore']) {
			this['mon'](this['assignmentStore'], {
				refresh: this['onAssignmentsRefresh']
				, remove: this['onAssignmentsChange']
				, update: this['onAssignmentUpdate']
				, add: this['onAssignmentsChange']
				, scope: this
			})
		};
		this['calendar'] && this['mon'](this['calendar'], {
			calendarchange: this['onProjectCalendarChange']
			, scope: this
		});
		this['bindCalendarListeners']();
		this['store'] && this['mon'](this['store'], {
			update: this['onResourceUpdate']
			, refresh: this['onResourceStoreRefresh']
			, scope: this
			, priority: 100
		})
	}
	, unbindStores: function () {
		if (this['taskStore']) {
			this['mun'](this['taskStore'], {
				refresh: this['onTaskStoreRefresh']
				, load: this['onTaskStoreRefresh']
				, update: this['onTaskUpdateOrAppend']
				, nodeappend: this['onTaskUpdateOrAppend']
				, scope: this
			})
		};
		if (this['assignmentStore']) {
			this['mun'](this['assignmentStore'], {
				refresh: this['onAssignmentsRefresh']
				, remove: this['onAssignmentsChange']
				, update: this['onAssignmentUpdate']
				, add: this['onAssignmentsChange']
				, scope: this
			})
		};
		this['calendar'] && this['mun'](this['calendar'], {
			calendarchange: this['onProjectCalendarChange']
			, scope: this
		});
		this['unbindCalendarListeners']();
		this['store'] && this['mun'](this['store'], {
			update: this['onResourceUpdate']
			, refresh: this['onResourceStoreRefresh']
			, scope: this
			, priority: 100
		})
	}
	, suspendStoreListeners: function () {
		this['cacheUpdateSuspended'] = true;
		this['suspendedCacheUpdatesCount'] = 0;
		this['unbindStores']()
	}
	, resumeStoreListeners: function (_0x9f6cx1) {
		this['cacheUpdateSuspended'] = false;
		this['bindStores']();
		if (_0x9f6cx1 && this['suspendedCacheUpdatesCount']) {
			this['clearCacheAndRefresh']()
		}
	}
	, clearCacheAndRefresh: function (_0x9f6cx1) {
		this['resetAllocationDataCache'](_0x9f6cx1);
		this['refreshIfRendered'](_0x9f6cx1)
	}
	, createDefaultColumns: function () {
		var _0x9f6cx2 = []
			, _0x9f6cx1;
		_0x9f6cx2['push']({
			flex: 1
			, resizable: false
			, text: this.L('resourceText')
			, dataIndex: this['resourceStore']['model']['prototype']['nameField']
			, renderer: function (_0x9f6cx5) {
				return Ext['String']['htmlEncode'](_0x9f6cx5)
			}
		});
		_0x9f6cx1 = {
			width: 40
			, resizable: false
			, availableHeight: this['rowHeight']
		};
		Ext['copyTo'](_0x9f6cx1, this, this['scaleColumnConfigs'], true);
		_0x9f6cx1 = this['scaleCol'] = Ext['create'](this['scaleColumnClass'], _0x9f6cx1);
		_0x9f6cx1['on']({
			beforerender: function () {
				_0x9f6cx1['setAvailableHeight'](this['getSchedulingView']()['getAvailableRowHeight']());
				if (this['scalePoints']) {
					this['scalePoints'] = _0x9f6cx1['scalePoints']
				}
			}
			, scope: this
		});
		_0x9f6cx2['push'](_0x9f6cx1);
		return _0x9f6cx2
	}
	, initColumns: function () {
		if (!this['columns']) {
			this['columns'] = this['createDefaultColumns']();
			var _0x9f6cx1 = this['scaleCol'];
			if (this['scalePoints']) {
				this['scaleMin'] = _0x9f6cx1['scaleMin'];
				this['scaleMax'] = _0x9f6cx1['scaleMax'];
				this['scaleStep'] = _0x9f6cx1['scaleStep']
			}
		}
		else {
			var _0x9f6cx3 = !Ext['isArray'](this['columns']) ? [this['columns']] : this['columns'];
			for (var _0x9f6cx5 = 0; _0x9f6cx5 < _0x9f6cx3['length']; _0x9f6cx5++) {
				var _0x9f6cx2 = _0x9f6cx3[_0x9f6cx5];
				if (this['isScaleColumn'](_0x9f6cx2)) {
					Ext['copyToIf'](_0x9f6cx2, this, this['scaleColumnConfigs'])
				}
			}
		}
	}
	, isScaleColumn: function (_0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx1['xtype'] && (Ext['ClassManager']['getByAlias']('widget.' + _0x9f6cx1['xtype']));
		_0x9f6cx2 = _0x9f6cx2 && _0x9f6cx2['prototype'];
		return (_0x9f6cx1 instanceof Ext.ux.Gantt['column']['Scale'] || (_0x9f6cx2 && _0x9f6cx2['isXType']('scalecolumn')))
	}
	, getScaleColumn: function () {
		return this['lockedGrid']['down']('scalecolumn')
	}
	, destroy: function () {
		this['unbindStores']();
		this['callParent'](arguments)
	}
	, getEventStore: function () {
		return this['taskStore']
	}
	, getTimeSpanDefiningStore: function () {
		return this['taskStore']
	}
	, unbindResourceCalendarListener: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this['calendarResources'][_0x9f6cx1];
		if (_0x9f6cx5) {
			Ext['Array']['remove'](_0x9f6cx5, _0x9f6cx2);
			if (!_0x9f6cx5['length']) {
				this['calendarListenersHash'][_0x9f6cx1]['destroy']();
				delete this['calendarListenersHash'][_0x9f6cx1];
				delete this['calendarResources'][_0x9f6cx1]
			}
		}
	}
	, bindResourceCalendarListener: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx3 = _0x9f6cx5['getOwnCalendar']()
			, _0x9f6cx1 = _0x9f6cx3['getCalendarId']();
		if (!_0x9f6cx2['calendarListenersHash'][_0x9f6cx1]) {
			_0x9f6cx2['calendarListenersHash'][_0x9f6cx1] = _0x9f6cx2['mon'](_0x9f6cx3, {
				load: _0x9f6cx2['onCalendarChange']
				, calendarchange: _0x9f6cx2['onCalendarChange']
				, scope: _0x9f6cx2
				, destroyable: true
			})
		};
		if (!_0x9f6cx2['calendarResources'][_0x9f6cx1]) {
			_0x9f6cx2['calendarResources'][_0x9f6cx1] = [_0x9f6cx5]
		}
		else {
			if (Ext['Array']['indexOf'](_0x9f6cx2['calendarResources'], _0x9f6cx5) === -1) {
				_0x9f6cx2['calendarResources'][_0x9f6cx1]['push'](_0x9f6cx5)
			}
		}
	}
	, bindCalendarListeners: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['unbindCalendarListeners']();
		_0x9f6cx1['store']['each'](function (_0x9f6cx2) {
			var _0x9f6cx5 = _0x9f6cx2['getOwnCalendar']();
			if (_0x9f6cx5 && _0x9f6cx5 !== _0x9f6cx1['calendar']) {
				_0x9f6cx1['bindResourceCalendarListener'](_0x9f6cx2)
			}
		})
	}
	, unbindCalendarListeners: function () {
		for (var _0x9f6cx1 in this['calendarListenersHash']) {
			this['calendarListenersHash'][_0x9f6cx1]['destroy']()
		};
		this['calendarResources'] = [];
		this['calendarListenersHash'] = {}
	}
	, onTaskStoreRefresh: function () {
		this['clearCacheAndRefresh']()
	}
	, onCalendarChange: function (_0x9f6cx5) {
		var _0x9f6cx2 = this['calendarResources'][_0x9f6cx5['getCalendarId']()];
		if (_0x9f6cx2) {
			for (var _0x9f6cx1 = 0; _0x9f6cx1 < _0x9f6cx2['length']; _0x9f6cx1++) {
				this['clearCacheAndRefresh'](_0x9f6cx2[_0x9f6cx1])
			}
		}
	}
	, onProjectCalendarChange: function () {
		this['clearCacheAndRefresh']()
	}
	, onTaskUpdateOrAppend: function (_0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx1;
		var _0x9f6cx5 = _0x9f6cx2['getTreeStore']();
		if (!_0x9f6cx5['isSettingRoot'] && !_0x9f6cx2['isRoot']()) {
			if (this['assignmentStore'] && _0x9f6cx2['getAssignmentStore']() != this['assignmentStore']) {
				_0x9f6cx1 = this['assignmentStore']['getAssignmentsForTask'](_0x9f6cx2['getId']())
			}
			else {
				_0x9f6cx1 = _0x9f6cx2['getAssignments']()
			};
			this['onAssignmentsChange'](this['assignmentStore'], _0x9f6cx1)
		}
	}
	, onAssignmentsRefresh: function (_0x9f6cx1) {
		this['onAssignmentsChange'](_0x9f6cx1, _0x9f6cx1['getRange']())
	}
	, onAssignmentUpdate: function (_0x9f6cx6, _0x9f6cx8, _0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx5 = this
			, _0x9f6cx7 = _0x9f6cx5['assignmentStore']['model']['prototype']['resourceIdField']
			, _0x9f6cx4;
		if (_0x9f6cx2 == Ext['data']['Model']['EDIT']) {
			if (_0x9f6cx3 && Ext['Array']['contains'](_0x9f6cx3, _0x9f6cx7)) {
				var _0x9f6cx1 = _0x9f6cx8['previous'][_0x9f6cx7];
				_0x9f6cx4 = this['resourceStore']['getModelById'](_0x9f6cx1);
				if (_0x9f6cx4) {
					this['clearCacheAndRefresh'](_0x9f6cx4)
				}
			};
			_0x9f6cx5['onAssignmentsChange'](_0x9f6cx6, [_0x9f6cx8])
		}
	}
	, onAssignmentsChange: function (_0x9f6cx7, _0x9f6cx2) {
		var _0x9f6cx3 = this
			, _0x9f6cx4;
		if (!Ext['isArray'](_0x9f6cx2)) {
			_0x9f6cx2 = [_0x9f6cx2]
		};
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx2['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			_0x9f6cx4 = _0x9f6cx3['resourceStore']['getModelById'](_0x9f6cx2[_0x9f6cx5]['getResourceId']());
			if (_0x9f6cx4 && !_0x9f6cx4['inOnCalendarChange']) {
				_0x9f6cx3['clearCacheAndRefresh'](_0x9f6cx4)
			}
		}
	}
	, findEndIndex: function (_0x9f6cx3, _0x9f6cx5) {
		_0x9f6cx5 = _0x9f6cx5 || this['getEndDate']();
		var _0x9f6cx1 = _0x9f6cx3['length'] - 1;
		for (var _0x9f6cx2 = _0x9f6cx1; _0x9f6cx2 >= 0; _0x9f6cx2--) {
			if (_0x9f6cx3[_0x9f6cx2]['startDate'] < _0x9f6cx5) {
				_0x9f6cx1 = _0x9f6cx2;
				break
			}
		};
		return _0x9f6cx1
	}
	, findStartIndex: function (_0x9f6cx4, _0x9f6cx2) {
		_0x9f6cx2 = _0x9f6cx2 || this['getStartDate']();
		var _0x9f6cx1 = 0;
		for (var _0x9f6cx3 = 0, _0x9f6cx5 = _0x9f6cx4['length']; _0x9f6cx3 < _0x9f6cx5; _0x9f6cx3++) {
			if (_0x9f6cx4[_0x9f6cx3]['endDate'] > _0x9f6cx2) {
				_0x9f6cx1 = _0x9f6cx3;
				break
			}
		};
		return _0x9f6cx1
	}
	, resetAllocationDataCache: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		if (!_0x9f6cx2) {
			_0x9f6cx1['allocationData'] = {}
		}
		else {
			_0x9f6cx1['allocationData'] = _0x9f6cx1['allocationData'] || {};
			_0x9f6cx1['allocationData'][_0x9f6cx2['getId']()] = null
		}
	}
	, constrainAllocationDataCache: function (_0x9f6cx2) {
		var _0x9f6cx4 = this
			, _0x9f6cx7 = new Date(_0x9f6cx4['timeAxis']['getStart']() - this['cacheLimitDurationMS'])
			, _0x9f6cx8 = new Date(_0x9f6cx4['timeAxis']['getEnd']() - 0 + this['cacheLimitDurationMS'])
			, _0x9f6cx9 = _0x9f6cx2['maxBars']['length'] - 1
			, _0x9f6cx1 = 0
			, _0x9f6cx5 = _0x9f6cx2['bars']['length'] - 1
			, _0x9f6cx3 = 0
			, _0x9f6cx6 = false;
		if (_0x9f6cx2['cacheEnd'] > _0x9f6cx8) {
			_0x9f6cx9 = _0x9f6cx4['findEndIndex'](_0x9f6cx2['maxBars'], _0x9f6cx8);
			_0x9f6cx5 = _0x9f6cx4['findEndIndex'](_0x9f6cx2['bars'], _0x9f6cx8);
			_0x9f6cx2['cacheEnd'] = _0x9f6cx8;
			_0x9f6cx6 = true
		};
		if (_0x9f6cx2['cacheStart'] < _0x9f6cx7) {
			_0x9f6cx1 = _0x9f6cx4['findStartIndex'](_0x9f6cx2['maxBars'], _0x9f6cx7);
			_0x9f6cx3 = _0x9f6cx4['findStartIndex'](_0x9f6cx2['bars'], _0x9f6cx7);
			_0x9f6cx2['cacheStart'] = _0x9f6cx7;
			_0x9f6cx6 = true
		};
		if (_0x9f6cx6) {
			_0x9f6cx2['maxBars'] = Ext['Array']['splice'](_0x9f6cx2['maxBars'], _0x9f6cx1, _0x9f6cx9 + 1 - _0x9f6cx1);
			_0x9f6cx2['bars'] = Ext['Array']['splice'](_0x9f6cx2['bars'], _0x9f6cx3, _0x9f6cx5 + 1 - _0x9f6cx3)
		};
		return _0x9f6cx6
	}
	, updateAllocationDataCache: function (_0x9f6cx7, _0x9f6cx1, _0x9f6cx8) {
		var _0x9f6cx5 = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cxa = this
			, _0x9f6cxc, _0x9f6cx6, _0x9f6cx2, _0x9f6cx4, _0x9f6cxb;
		if (_0x9f6cxa['cacheUpdateSuspended']) {
			_0x9f6cxa['suspendedCacheUpdatesCount']++;
			return
		};
		_0x9f6cx1 = _0x9f6cx1 || _0x9f6cxa['getStartDate']();
		_0x9f6cx8 = _0x9f6cx8 || _0x9f6cxa['getEndDate']();
		if (!_0x9f6cx7) {
			_0x9f6cxa['resourceStore']['each'](function (_0x9f6cxf) {
				_0x9f6cxa['updateAllocationDataCache'](_0x9f6cxf, _0x9f6cx1, _0x9f6cx8)
			})
		}
		else {
			_0x9f6cxc = _0x9f6cxa['allocationData'][_0x9f6cx7['getId']()] || {};
			_0x9f6cx6 = _0x9f6cxc['cacheStart'];
			_0x9f6cx2 = _0x9f6cxc['cacheEnd'];
			if (_0x9f6cx6 != _0x9f6cx1 || _0x9f6cx2 != _0x9f6cx8) {
				if (_0x9f6cx6 && _0x9f6cx2 && _0x9f6cx5['intersectSpans'](_0x9f6cx6, _0x9f6cx2, _0x9f6cx1, _0x9f6cx8)) {
					if (_0x9f6cx6 > _0x9f6cx1) {
						_0x9f6cx4 = _0x9f6cxa['processAllocationData'](_0x9f6cx7['getAllocationInfo']({
							startDate: _0x9f6cx1
							, endDate: _0x9f6cx6
							, includeResCalIntervals: true
						}));
						if (_0x9f6cx4['maxBars']['length']) {
							if (_0x9f6cx4['maxBars'][_0x9f6cx4['maxBars']['length'] - 1]['startDate']['getTime']() === _0x9f6cx6['getTime']()) {
								_0x9f6cx4['maxBars']['pop']()
							}
						};
						if (_0x9f6cx4['bars']['length'] && _0x9f6cxc['bars']['length']) {
							var _0x9f6cx3 = _0x9f6cx4['bars'][_0x9f6cx4['bars']['length'] - 1];
							var _0x9f6cx9 = _0x9f6cxc['bars'][0];
							if (_0x9f6cx3['startDate'] >= _0x9f6cx9['startDate'] && _0x9f6cx3['endDate'] <= _0x9f6cx9['endDate']) {
								_0x9f6cx4['bars']['pop']()
							}
						};
						_0x9f6cx4['maxBars']['length'] && (_0x9f6cx4['maxBars'][_0x9f6cx4['maxBars']['length'] - 1]['endDate'] = _0x9f6cx6);
						_0x9f6cxc['maxBars']['length'] && (_0x9f6cxc['maxBars'][0]['startDate'] = _0x9f6cx6);
						_0x9f6cxc['bars'] = _0x9f6cx4['bars']['concat'](_0x9f6cxc['bars']);
						_0x9f6cxc['maxBars'] = _0x9f6cx4['maxBars']['concat'](_0x9f6cxc['maxBars']);
						_0x9f6cxc['maxBarsStartIndex'] = 0;
						_0x9f6cxc['barsStartIndex'] = 0;
						_0x9f6cxc['cacheStart'] = _0x9f6cx1
					};
					if (_0x9f6cx2 < _0x9f6cx8) {
						_0x9f6cxb = _0x9f6cxa['processAllocationData'](_0x9f6cx7['getAllocationInfo']({
							startDate: _0x9f6cx2
							, endDate: _0x9f6cx8
							, includeResCalIntervals: true
						}));
						if (_0x9f6cxb['maxBars']['length']) {
							var _0x9f6cxd = _0x9f6cxb['maxBars'][0];
							if (_0x9f6cxd['endDate']['getTime']() === _0x9f6cx2['getTime']()) {
								_0x9f6cxb['maxBars']['shift']()
							}
							else {
								_0x9f6cxd['startDate'] = _0x9f6cx2
							}
						};
						if (_0x9f6cxb['bars']['length'] && _0x9f6cxc['bars']['length']) {
							var _0x9f6cx13 = _0x9f6cxb['bars'][0];
							var _0x9f6cxe = _0x9f6cxc['bars'][_0x9f6cxc['bars']['length'] - 1];
							if (_0x9f6cx13['startDate'] >= _0x9f6cxe['startDate'] && _0x9f6cx13['endDate'] <= _0x9f6cxe['endDate']) {
								_0x9f6cxb['bars']['shift']()
							}
						};
						_0x9f6cxb['maxBars']['length'] && (_0x9f6cxb['maxBars'][_0x9f6cxb['maxBars']['length'] - 1]['endDate'] = _0x9f6cx8);
						_0x9f6cxc['maxBars']['length'] && (_0x9f6cxc['maxBars'][_0x9f6cxc['maxBars']['length'] - 1]['endDate'] = _0x9f6cx2);
						_0x9f6cxc['bars'] = _0x9f6cxc['bars']['concat'](_0x9f6cxb['bars']);
						_0x9f6cxc['maxBars'] = _0x9f6cxc['maxBars']['concat'](_0x9f6cxb['maxBars']);
						_0x9f6cxc['maxBarsEndIndex'] = _0x9f6cxc['maxBars']['length'] - 1;
						_0x9f6cxc['barsEndIndex'] = _0x9f6cxc['bars']['length'] - 1;
						_0x9f6cxc['cacheEnd'] = _0x9f6cx8
					};
					if (_0x9f6cxa['cacheLimitDuration'] > 0) {
						_0x9f6cxa['constrainAllocationDataCache'](_0x9f6cxc)
					};
					_0x9f6cxc['maxBarsStartIndex'] = _0x9f6cxa['findStartIndex'](_0x9f6cxc['maxBars'], _0x9f6cx1);
					_0x9f6cxc['barsStartIndex'] = _0x9f6cxa['findStartIndex'](_0x9f6cxc['bars'], _0x9f6cx1);
					_0x9f6cxc['maxBarsEndIndex'] = _0x9f6cxa['findEndIndex'](_0x9f6cxc['maxBars'], _0x9f6cx8);
					_0x9f6cxc['barsEndIndex'] = _0x9f6cxa['findEndIndex'](_0x9f6cxc['bars'], _0x9f6cx8)
				}
				else {
					_0x9f6cxc = _0x9f6cxa['processAllocationData'](_0x9f6cx7['getAllocationInfo']({
						startDate: _0x9f6cx1
						, endDate: _0x9f6cx8
						, includeResCalIntervals: true
					}));
					_0x9f6cxc['maxBarsStartIndex'] = 0;
					_0x9f6cxc['maxBarsEndIndex'] = _0x9f6cxc['maxBars']['length'] - 1;
					_0x9f6cxc['barsStartIndex'] = 0;
					_0x9f6cxc['barsEndIndex'] = _0x9f6cxc['bars']['length'] - 1;
					_0x9f6cxc['cacheStart'] = _0x9f6cx1;
					_0x9f6cxc['cacheEnd'] = _0x9f6cx8
				}
			};
			_0x9f6cxa['allocationData'][_0x9f6cx7['getId']()] = _0x9f6cxc
		}
	}
	, isBarAssignmentsChanged: function (_0x9f6cx5) {
		var _0x9f6cx3 = _0x9f6cx5['bar']
			, _0x9f6cx4 = _0x9f6cx5['period'];
		if (!_0x9f6cx3['assignments'] || !_0x9f6cx4['inResourceCalendar'] || !_0x9f6cx4['totalAllocation'] || !_0x9f6cx4['inTasksCalendar']) {
			return false
		};
		for (var _0x9f6cx2 = 0, _0x9f6cx1 = _0x9f6cx3['assignments']['length']; _0x9f6cx2 < _0x9f6cx1; _0x9f6cx2++) {
			if (_0x9f6cx4['assignmentsHash'][_0x9f6cx3['assignments'][_0x9f6cx2]['getTaskId']()]) {
				return false
			}
		};
		return true
	}
	, openBar: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1['bar'] = {
			startDate: _0x9f6cx2
			, totalAllocation: _0x9f6cx1['period']['totalAllocation']
			, allocationMS: _0x9f6cx1['allocationMS']
			, assignments: _0x9f6cx1['period']['assignments']
			, totalOverAllocationMS: _0x9f6cx1['totalOverAllocationMS']
		};
		_0x9f6cx1['barOpened'] = true;
		return _0x9f6cx1['bar']
	}
	, closeBar: function (_0x9f6cx2, _0x9f6cx1) {
		if (!_0x9f6cx1['barOpened']) {
			return false
		};
		if (_0x9f6cx2) {
			_0x9f6cx1['bar']['endDate'] = _0x9f6cx2
		};
		_0x9f6cx1['bars']['push'](_0x9f6cx1['bar']);
		_0x9f6cx1['barOpened'] = false
	}
	, appendZeroMaxBars: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx2) {
		if (!_0x9f6cx5) {
			return false
		};
		var _0x9f6cx3 = this
			, _0x9f6cx8 = Ext.ux.Scheduler['util']['Date']['getDurationInDays'](_0x9f6cx5, _0x9f6cx1);
		if (_0x9f6cx8 < 2) {
			return false
		};
		var _0x9f6cx6 = true
			, _0x9f6cx4 = _0x9f6cx2['maxBar']
			, _0x9f6cx7 = _0x9f6cx2['maxBars'];
		if (_0x9f6cx4) {
			if (!_0x9f6cx4['allocationMS']) {
				_0x9f6cx6 = false
			}
			else {
				_0x9f6cx4['endDate'] = Ext.ux.Scheduler['util']['Date']['getStartOfNextDay'](_0x9f6cx5, true);
				_0x9f6cx7['push'](_0x9f6cx4)
			}
		};
		if (_0x9f6cx6) {
			_0x9f6cx2['maxBar'] = {
				startDate: _0x9f6cx4 && _0x9f6cx4['endDate'] || _0x9f6cx3['getStart']()
				, allocationMS: 0
			}
		};
		_0x9f6cx2['maxAllocationMS'] = 0;
		return _0x9f6cx2['maxBar']
	}
	, getMergePeriodStart: function (_0x9f6cx1) {
		return Ext['Date']['clearTime'](_0x9f6cx1, true)
	}
	, processAllocationData: function (_0x9f6cx18) {
		var _0x9f6cx17, _0x9f6cx16, _0x9f6cxa, _0x9f6cx12, _0x9f6cxd, _0x9f6cx2, _0x9f6cx1, _0x9f6cxe, _0x9f6cx5, _0x9f6cx1b, _0x9f6cx7, _0x9f6cx6, _0x9f6cxf = []
			, _0x9f6cx8 = []
			, _0x9f6cx15 = this
			, _0x9f6cx4 = {
				bars: _0x9f6cxf
				, maxBars: _0x9f6cx8
			};
		if (!_0x9f6cx18 || !_0x9f6cx18['length']) {
			return _0x9f6cx4
		};
		var _0x9f6cxb = _0x9f6cx15['getMergePeriodStart'](_0x9f6cx18[0]['startDate']);
		if (_0x9f6cxb > this['getStartDate']()) {
			_0x9f6cx8['push']({
				startDate: this['getStartDate']()
				, endDate: _0x9f6cxb
				, allocationMS: 0
			})
		};
		for (var _0x9f6cx14 = 0, _0x9f6cx11 = _0x9f6cx18['length']; _0x9f6cx14 < _0x9f6cx11; _0x9f6cx14++) {
			_0x9f6cx17 = _0x9f6cx4['period'] = _0x9f6cx18[_0x9f6cx14];
			_0x9f6cxb = _0x9f6cx15['getMergePeriodStart'](_0x9f6cx17['startDate']);
			if (_0x9f6cxb - _0x9f6cx12 !== 0) {
				if (this['showLimitLines']) {
					if (_0x9f6cx15['appendZeroMaxBars'](_0x9f6cx12, _0x9f6cxb, _0x9f6cx4)) {
						_0x9f6cxa = _0x9f6cx4['maxBar']
					}
				};
				_0x9f6cx12 = _0x9f6cxb;
				_0x9f6cxe = _0x9f6cx4['allocationMS'];
				_0x9f6cx6 = _0x9f6cx4['totalOverAllocationMS'];
				_0x9f6cx1b = _0x9f6cx4['maxAllocationMS'];
				_0x9f6cx1 = 0;
				_0x9f6cx7 = 0;
				_0x9f6cx5 = 0;
				var _0x9f6cx10 = _0x9f6cx14;
				while (_0x9f6cx18[_0x9f6cx10] && _0x9f6cx15['getMergePeriodStart'](_0x9f6cx18[_0x9f6cx10]['startDate']) - _0x9f6cxb === 0) {
					if (_0x9f6cx18[_0x9f6cx10]['inResourceCalendar']) {
						_0x9f6cx5 += _0x9f6cx18[_0x9f6cx10]['endDate'] - _0x9f6cx18[_0x9f6cx10]['startDate'];
						if (_0x9f6cx18[_0x9f6cx10]['totalAllocationMS']) {
							_0x9f6cx1 += _0x9f6cx18[_0x9f6cx10]['totalAllocationMS'];
							_0x9f6cx7 += _0x9f6cx18[_0x9f6cx10]['totalOverAllocationMS'] || 0
						}
					};
					_0x9f6cx10++
				};
				_0x9f6cx4['allocationMS'] = _0x9f6cx1;
				_0x9f6cx4['totalOverAllocationMS'] = _0x9f6cx7;
				_0x9f6cx4['maxAllocationMS'] = _0x9f6cx5
			}
			else {
				_0x9f6cxb = false
			};
			if (_0x9f6cx15['showLimitLines']) {
				if (_0x9f6cxb && _0x9f6cx5 != _0x9f6cx1b) {
					if (_0x9f6cxa) {
						_0x9f6cxa['endDate'] = _0x9f6cxb;
						_0x9f6cx8['push'](_0x9f6cxa)
					};
					_0x9f6cxa = _0x9f6cx4['maxBar'] = {
						startDate: _0x9f6cxb
						, allocationMS: _0x9f6cx5
					}
				};
				_0x9f6cxa['endDate'] = _0x9f6cx17['endDate']
			};
			if (!_0x9f6cx4['barOpened']) {
				if (_0x9f6cx17['inTask']) {
					_0x9f6cx16 = _0x9f6cx15['openBar'](new Date(_0x9f6cx17['startDate']), _0x9f6cx4)
				}
			}
			else {
				if (!_0x9f6cx17['inTask']) {
					_0x9f6cx15['closeBar'](null, _0x9f6cx4)
				}
				else {
					var _0x9f6cx3 = false;
					if (_0x9f6cx15['isBarAssignmentsChanged'](_0x9f6cx4)) {
						_0x9f6cxd = _0x9f6cx16['endDate'];
						_0x9f6cx2 = new Date(_0x9f6cx17['startDate']);
						_0x9f6cx3 = true
					}
					else {
						if (_0x9f6cxb && _0x9f6cxb - _0x9f6cx16['endDate'] >= _0x9f6cx15['gapThreshold']) {
							_0x9f6cxd = Ext['Date']['clearTime'](_0x9f6cx16['endDate'], true);
							if (_0x9f6cxd < _0x9f6cx16['endDate']) {
								_0x9f6cxd = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cxd, Ext.ux.Scheduler['util']['Date'].DAY, 1)
							};
							_0x9f6cx2 = Ext['Date']['clearTime'](_0x9f6cx17['startDate'], true);
							_0x9f6cx3 = true
						}
						else {
							if (_0x9f6cxb && _0x9f6cx1 !== _0x9f6cxe && _0x9f6cx17['totalAllocation']) {
								_0x9f6cxd = _0x9f6cx2 = Ext['Date']['clearTime'](_0x9f6cx17['startDate'], true);
								_0x9f6cx3 = true
							}
						}
					};
					if (_0x9f6cx3) {
						_0x9f6cx15['closeBar'](_0x9f6cxd, _0x9f6cx4);
						_0x9f6cx16 = _0x9f6cx15['openBar'](_0x9f6cx2, _0x9f6cx4)
					}
				}
			};
			if (_0x9f6cx4['barOpened']) {
				_0x9f6cx16['endDate'] = _0x9f6cx17['endDate']
			}
		};
		_0x9f6cx15['closeBar'](null, _0x9f6cx4);
		if (_0x9f6cx15['showLimitLines']) {
			if (_0x9f6cx15['appendZeroMaxBars'](_0x9f6cx12 || _0x9f6cx15['getStart'](), _0x9f6cx15['getEnd'](), _0x9f6cx4)) {
				_0x9f6cxa = _0x9f6cx4['maxBar']
			};
			if (_0x9f6cxa) {
				_0x9f6cx8['push'](_0x9f6cxa)
			}
		};
		return {
			bars: _0x9f6cxf
			, maxBars: _0x9f6cx8
		}
	}
	, onResourceUpdate: function (_0x9f6cx2, _0x9f6cx4, _0x9f6cx1, _0x9f6cx5) {
		if (Ext['Array']['indexOf'](_0x9f6cx5, _0x9f6cx4['calendarIdField']) > -1) {
			this['resetAllocationDataCache'](_0x9f6cx4);
			var _0x9f6cx3 = _0x9f6cx4['previous'][_0x9f6cx4['calendarIdField']];
			this['unbindResourceCalendarListener'](_0x9f6cx4, _0x9f6cx3);
			var _0x9f6cx7 = _0x9f6cx4['getOwnCalendar']();
			if (_0x9f6cx7 && _0x9f6cx7 !== this['calendar']) {
				this['bindResourceCalendarListener'](_0x9f6cx4)
			}
		}
	}
	, onResourceStoreRefresh: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['clearCacheAndRefresh']();
		_0x9f6cx1['bindCalendarListeners']()
	}
	, refreshIfRendered: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['rendered'] && _0x9f6cx1['resourceStore'] && _0x9f6cx2) {
			_0x9f6cx1['getView']()['refreshNode'](_0x9f6cx1['resourceStore']['indexOf'](_0x9f6cx2))
		}
		else {
			if (_0x9f6cx1['rendered']) {
				_0x9f6cx1['getView']()['refresh']()
			}
		}
	}
	, columnRenderer: function (_0x9f6cx1, _0x9f6cxa, _0x9f6cx2, _0x9f6cx6, _0x9f6cxc) {
		var _0x9f6cx7 = this
			, _0x9f6cx3 = _0x9f6cx2['getId']()
			, _0x9f6cx8 = this['normalGrid']['getView']()
			, _0x9f6cx5, _0x9f6cx9, _0x9f6cx4;
		_0x9f6cx7['updateAllocationDataCache'](_0x9f6cx2);
		_0x9f6cx5 = _0x9f6cx7['allocationData'][_0x9f6cx3];
		_0x9f6cx9 = _0x9f6cx5 && _0x9f6cx5['bars'];
		_0x9f6cx4 = _0x9f6cx5 && _0x9f6cx5['maxBars'];
		if (_0x9f6cx9 && (_0x9f6cx5['barsStartIndex'] > 0 || _0x9f6cx5['barsEndIndex'] < _0x9f6cx9['length'] - 1)) {
			_0x9f6cx9 = _0x9f6cx9['slice'](_0x9f6cx5['barsStartIndex'], _0x9f6cx5['barsEndIndex'] + 1)
		};
		if (_0x9f6cx4 && (_0x9f6cx5['maxBarsStartIndex'] > 0 || _0x9f6cx5['maxBarsEndIndex'] < _0x9f6cx4['length'] - 1)) {
			_0x9f6cx4 = _0x9f6cx4['slice'](_0x9f6cx5['maxBarsStartIndex'], _0x9f6cx5['maxBarsEndIndex'] + 1)
		};
		return (_0x9f6cx7['showScaleLines'] ? _0x9f6cx8['renderLines']() : '') + _0x9f6cx8['renderBars'](_0x9f6cx9, _0x9f6cx3) + (_0x9f6cx7['showLimitLines'] ? _0x9f6cx8['renderLimitLines'](_0x9f6cx4) : '')
	}
});
Ext.define('Ext.ux.Scheduler.plugin.ResourceZones', {
	extend: 'Ext.ux.Scheduler.plugin.Zones'
	, alias: 'plugin.scheduler_resourcezones'
	, innerTpl: null
	, store: null
	, cls: 'sch-resourcezone'
	, init: function (_0x9f6cx1) {
		this['store'] = Ext['StoreManager']['lookup'](this['store']);
		this['uniqueCls'] = this['uniqueCls'] || ('sch-timespangroup-' + Ext['id']());
		this['scheduler'] = _0x9f6cx1;
		_0x9f6cx1['registerRenderer'](this['renderer'], this);
		if (typeof this['innerTpl'] === 'string') {
			this['innerTpl'] = new Ext.XTemplate(this['innerTpl'])
		};
		var _0x9f6cx2 = this['innerTpl'];
		if (!this['template']) {
			this['template'] = new Ext.XTemplate('<tpl for="."><div id="' + this['uniqueCls'] + '-{id}" class="' + this['cls'] + ' ' + this['uniqueCls'] + ' {Cls}" style="' + (_0x9f6cx1['rtl'] ? 'right' : 'left') + ':{start}px;width:{width}px;top:{start}px;height:{width}px;{style}">' + (_0x9f6cx2 ? '{[this.renderInner(values)]}' : ('{' + this['store']['getModel']()['prototype']['nameField'] + '}')) + '</div></tpl>', {
				renderInner: function (_0x9f6cx5) {
					return _0x9f6cx2['apply'](_0x9f6cx5)
				}
			})
		};
		this['storeListeners'] = {
			load: this['fullRefresh']
			, datachanged: this['fullRefresh']
			, clear: this['fullRefresh']
			, add: this['fullRefresh']
			, remove: this['fullRefresh']
			, update: this['onModelUpdate']
			, addrecords: this['fullRefresh']
			, removerecords: this['fullRefresh']
			, updaterecord: this['onModelUpdate']
			, scope: this
		};
		this['store']['on'](this['storeListeners'])
	}
	, destroy: function () {
		this['store']['un'](this['storeListeners']);
		this['callParent'](arguments)
	}
	, fullRefresh: function () {
		this['scheduler']['getSchedulingView']()['refreshView']()
	}
	, renderer: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1, _0x9f6cx3) {
		if (_0x9f6cx1 && (this['scheduler']['isHorizontal']() || _0x9f6cx3 === 0)) {
			return this['renderZones'](_0x9f6cx1)
		};
		return ''
	}
	, renderZones: function (_0x9f6cx4) {
		var _0x9f6cx5 = this['store']
			, _0x9f6cx8 = this['scheduler']
			, _0x9f6cxa = _0x9f6cx8['timeAxis']['getStart']()
			, _0x9f6cxd = _0x9f6cx8['timeAxis']['getEnd']()
			, _0x9f6cx6 = []
			, _0x9f6cxb = _0x9f6cx4['getEvents'](_0x9f6cx5)
			, _0x9f6cxf, _0x9f6cx3;
		for (var _0x9f6cx7 = 0, _0x9f6cx13 = _0x9f6cxb['length']; _0x9f6cx7 < _0x9f6cx13; _0x9f6cx7++) {
			var _0x9f6cxc = _0x9f6cxb[_0x9f6cx7];
			_0x9f6cxf = _0x9f6cxc['getStartDate']();
			_0x9f6cx3 = _0x9f6cxc['getEndDate']();
			if (_0x9f6cxf && _0x9f6cx3 && Ext.ux.Scheduler['util']['Date']['intersectSpans'](_0x9f6cxf, _0x9f6cx3, _0x9f6cxa, _0x9f6cxd)) {
				var _0x9f6cxe = _0x9f6cx8['getSchedulingView']()[_0x9f6cx8['getMode']()]['getEventRenderData'](_0x9f6cxc);
				var _0x9f6cx2, _0x9f6cx1;
				if (_0x9f6cx8['isHorizontal']()) {
					_0x9f6cx2 = _0x9f6cx8['rtl'] ? _0x9f6cxe['right'] : _0x9f6cxe['left'];
					_0x9f6cx1 = _0x9f6cxe['width']
				}
				else {
					_0x9f6cx2 = _0x9f6cxe['top'];
					_0x9f6cx1 = _0x9f6cxe['height']
				};
				_0x9f6cx6[_0x9f6cx6['length']] = Ext['apply']({
					id: _0x9f6cxc['internalId']
					, start: _0x9f6cx2
					, width: _0x9f6cx1
					, Cls: _0x9f6cxc['getCls']()
				}, _0x9f6cxc['data'])
			}
		};
		return this['template']['apply'](_0x9f6cx6)
	}
	, onModelUpdate: function (_0x9f6cx9, _0x9f6cx8) {
		var _0x9f6cx5 = document['getElementById'](this['uniqueCls'] + '-' + _0x9f6cx8['internalId']);
		if (_0x9f6cx5) {
			var _0x9f6cx4 = this['scheduler']
				, _0x9f6cx7 = _0x9f6cx4['timeAxis']['getStart']()
				, _0x9f6cxc = _0x9f6cx4['timeAxis']['getEnd']();
			var _0x9f6cx2 = Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cx7, _0x9f6cx8['getStartDate']())
				, _0x9f6cx3 = Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cxc, _0x9f6cx8['getEndDate']())
				, _0x9f6cxa = _0x9f6cx8['getCls']();
			var _0x9f6cx6 = _0x9f6cx4['getSchedulingView']()['getCoordinateFromDate'](_0x9f6cx2);
			var _0x9f6cx1 = _0x9f6cx4['getSchedulingView']()['getCoordinateFromDate'](_0x9f6cx3) - _0x9f6cx6;
			_0x9f6cx5['className'] = this['cls'] + ' ' + this['uniqueCls'] + ' ' + (_0x9f6cxa || '');
			_0x9f6cx5['style']['left'] = _0x9f6cx6 + 'px';
			_0x9f6cx5['style']['top'] = _0x9f6cx6 + 'px';
			_0x9f6cx5['style']['height'] = _0x9f6cx1 + 'px';
			_0x9f6cx5['style']['width'] = _0x9f6cx1 + 'px'
		}
	}
});
Ext.define('Ext.ux.Scheduler.mixin.AbstractSchedulerPanel', {
	requires: ['Ext.ux.Scheduler.model.Event', 'Ext.ux.Scheduler.model.Resource', 'Ext.ux.Scheduler.data.EventStore', 'Ext.ux.Scheduler.data.ResourceStore', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.plugin.ResourceZones']
	, eventBarIconClsField: ''
	, enableEventDragDrop: true
	, resourceColumnClass: 'Ext.ux.Scheduler.column.Resource'
	, resourceColumnWidth: null
	, allowOverlap: true
	, startParamName: 'startDate'
	, endParamName: 'endDate'
	, passStartEndParameters: false
	, eventRenderer: null
	, eventRendererScope: null
	, eventStore: null
	, resourceStore: null
	, onEventCreated: function (_0x9f6cx1, _0x9f6cx2) {}
	, resourceZones: null
	, resourceZonesConfig: null
	, initStores: function () {
		var _0x9f6cx1 = this['resourceStore'] || this['store'];
		if (this['crudManager']) {
			if (!Ext.ux.Scheduler['crud']['AbstractManager']) {
				throw new Error('Ext.ux.Scheduler.crud.AbstractManager not loaded, did you forget to require crudManager class (e.g. Ext.ux.Scheduler.data.CrudManager)?')
			};
			if (!(this['crudManager'] instanceof Ext.ux.Scheduler['crud']['AbstractManager'])) {
				this['crudManager'] = Ext['create'](this['crudManager']['xclass'] || 'Ext.ux.Scheduler.data.CrudManager', Ext['clone'](this['crudManager']))
			}
		};
		if (!_0x9f6cx1) {
			if (this['crudManager']) {
				_0x9f6cx1 = this['resourceStore'] = this['crudManager']['getResourceStore']()
			};
			if (!_0x9f6cx1) {
				if (this['isTree']) {
					_0x9f6cx1 = new Ext.ux.Scheduler['data'].ResourceTreeStore({
						proxy: 'memory'
					})
				}
				else {
					_0x9f6cx1 = new Ext.ux.Scheduler['data'].ResourceStore()
				}
			}
		};
		if (!this['dependencyStore']) {
			if (this['crudManager']) {
				this['dependencyStore'] = this['crudManager']['getDependencyStore']()
			}
		};
		if (!this['eventStore']) {
			if (this['crudManager']) {
				this['eventStore'] = this['crudManager']['getEventStore']()
			};
			this['eventStore'] = this['eventStore'] || new Ext.ux.Scheduler['data'].EventStore()
		};
		this['store'] = Ext['StoreManager']['lookup'](_0x9f6cx1);
		this['resourceStore'] = this['store'];
		this['setEventStore'](this['eventStore']);
		if (!this['eventStore'] || !this['eventStore']['isEventStore']) {
			Ext['Error']['raise']('Your eventStore should be a subclass of Ext.ux.Scheduler.data.EventStore (or consume the EventStore mixin)')
		};
		this['resourceStore']['eventStore'] = this['getEventStore']()
	}
	, _initializeSchedulerPanel: function () {
		this['initStores']();
		if (this['eventBodyTemplate'] && typeof this['eventBodyTemplate'] === 'string') {
			this['eventBodyTemplate'] = new Ext.XTemplate(this['eventBodyTemplate'])
		};
		this['on']('destroy', function () {
			this['setResourceStore'](null);
			this['setEventStore'](null)
		})
	}
	, getResourceStore: function () {
		return this['resourceStore']
	}
	, setResourceStore: function (_0x9f6cx2) {
		var _0x9f6cx3 = this['getResourceStore']();
		this['resourceStore'] = _0x9f6cx2 = _0x9f6cx2 && Ext['StoreManager']['lookup'](_0x9f6cx2);
		var _0x9f6cx5 = this['getEventStore']();
		if (_0x9f6cx5) {
			_0x9f6cx5['setResourceStore'](_0x9f6cx2)
		};
		var _0x9f6cx1 = this['getSchedulingView']();
		_0x9f6cx1 && _0x9f6cx1['setResourceStore'](_0x9f6cx2);
		if (_0x9f6cx2) {
			this['fireEvent']('resourcestorechange', this, _0x9f6cx2, _0x9f6cx3);
			if (this['isVertical']()) {
				this['refreshResourceColumns']();
				this['mun'](_0x9f6cx3, this['verticalListeners']);
				this['mon'](_0x9f6cx2, this['verticalListeners'])
			};
			if (this['isWeekView']()) {
				this['mun'](_0x9f6cx3, this['calendarResourceStoreListeners']);
				this['mon'](_0x9f6cx2, this['calendarResourceStoreListeners'])
			};
			if (_0x9f6cx3 === this['store']) {
				this['reconfigure'](_0x9f6cx2)
			}
			else {
				this['refreshViews'](false)
			}
		}
	}
	, getEventStore: function () {
		return this['eventStore']
	}
	, setEventStore: function (_0x9f6cx1) {
		var _0x9f6cx4 = this['getEventStore']();
		_0x9f6cx1 = _0x9f6cx1 && Ext['StoreManager']['lookup'](_0x9f6cx1);
		if (this['getEventStore']()) {
			this['mun'](this['getEventStore'](), 'beforeload', this['applyStartEndParameters'], this)
		};
		var _0x9f6cx3 = this['getResourceStore']();
		var _0x9f6cx7 = this['getAssignmentStore']();
		var _0x9f6cx5 = this['getDependencyStore']();
		this['eventStore'] = _0x9f6cx1;
		if (_0x9f6cx3) {
			_0x9f6cx3['setEventStore'](_0x9f6cx1)
		};
		if (_0x9f6cx7 && _0x9f6cx1 && !_0x9f6cx1['getAssignmentStore']()) {
			_0x9f6cx1['setAssignmentStore'](_0x9f6cx7)
		};
		if (_0x9f6cx5 && _0x9f6cx1 && !_0x9f6cx1['getDependencyStore']()) {
			_0x9f6cx1['setDependencyStore'](_0x9f6cx5)
		};
		var _0x9f6cx2 = this['getSchedulingView']();
		_0x9f6cx2 && _0x9f6cx2['setEventStore'](_0x9f6cx1);
		if (_0x9f6cx1) {
			this['fireEvent']('eventstorechange', this, _0x9f6cx1, _0x9f6cx4);
			if (this['passStartEndParameters']) {
				this['mon'](_0x9f6cx1, 'beforeload', this['applyStartEndParameters'], this)
			};
			this['refreshViews'](false)
		}
	}
	, applyStartEndParameters: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx5['getProxy']();
		_0x9f6cx2['setExtraParam'](this['startParamName'], this['getStart']());
		_0x9f6cx2['setExtraParam'](this['endParamName'], this['getEnd']())
	}
	, getAssignmentStore: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getEventStore']();
		return _0x9f6cx1 && _0x9f6cx1['isStore'] && _0x9f6cx1['getAssignmentStore']() || _0x9f6cx2['assignmentStore']
	}
	, setAssignmentStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getAssignmentStore']();
		this['getEventStore']()['setAssignmentStore'](_0x9f6cx1);
		if (_0x9f6cx1) {
			this['fireEvent']('assignmentstorechange', this, _0x9f6cx1, _0x9f6cx2);
			this['refreshViews'](false)
		}
	}
	, getDependencyStore: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getEventStore']();
		return _0x9f6cx1 && _0x9f6cx1['isStore'] && _0x9f6cx1['getDependencyStore']() || _0x9f6cx2['dependencyStore']
	}
	, setDependencyStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getDependencyStore']();
		this['getEventStore']()['setDependencyStore'](_0x9f6cx1);
		if (_0x9f6cx1) {
			this['fireEvent']('dependencystorechange', this, _0x9f6cx1, _0x9f6cx2);
			this['refreshViews'](false)
		}
	}
	, createResourceColumns: function (_0x9f6cx1) {
		return Ext['Array']['map'](this['resourceStore']['getRange'](), function (_0x9f6cx2) {
			return {
				xclass: this['resourceColumnClass']
				, renderer: this['mainRenderer']
				, scope: this
				, width: _0x9f6cx1 || 100
				, text: _0x9f6cx2['getName']()
				, model: _0x9f6cx2
			}
		}, this)
	}
});
Ext.define('Ext.ux.Scheduler.eventlayout.Horizontal', {
	nbrOfBandsByResource: null
	, bandIndexToPxConvertFn: null
	, bandIndexToPxConvertScope: null
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1);
		this['nbrOfBandsByResource'] = {}
	}
	, clearCache: function (_0x9f6cx1) {
		if (_0x9f6cx1) {
			delete this['nbrOfBandsByResource'][_0x9f6cx1['internalId']]
		}
		else {
			this['nbrOfBandsByResource'] = {}
		}
	}
	, getNumberOfBands: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this['nbrOfBandsByResource'];
		if (_0x9f6cx1['hasOwnProperty'](_0x9f6cx5['internalId'])) {
			return _0x9f6cx1[_0x9f6cx5['internalId']]
		};
		var _0x9f6cx4 = Ext['isFunction'](_0x9f6cx2) ? _0x9f6cx2() : _0x9f6cx2;
		var _0x9f6cx3 = Ext['Array']['map'](_0x9f6cx4, function (_0x9f6cx7) {
			return {
				start: _0x9f6cx7['getStartDate']()
				, end: _0x9f6cx7['getEndDate']()
				, event: _0x9f6cx7
			}
		});
		return this['applyLayout'](_0x9f6cx3, _0x9f6cx5)
	}
	, applyLayout: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx3 = _0x9f6cx1['slice']();
		var _0x9f6cx2 = this;
		_0x9f6cx3['sort'](function (_0x9f6cx7, _0x9f6cx4) {
			return _0x9f6cx2['sortEvents'](_0x9f6cx7['event'], _0x9f6cx4['event'])
		});
		return this['nbrOfBandsByResource'][_0x9f6cx5['internalId']] = this['layoutEventsInBands'](_0x9f6cx3)
	}
	, sortEvents: function (_0x9f6cx7, _0x9f6cx3) {
		var _0x9f6cx6 = _0x9f6cx7['getStartDate']();
		var _0x9f6cx4 = _0x9f6cx3['getStartDate']();
		var _0x9f6cx5 = (_0x9f6cx6 - _0x9f6cx4 === 0);
		if (_0x9f6cx5) {
			return _0x9f6cx7['getEndDate']() > _0x9f6cx3['getEndDate']() ? -1 : 1
		}
		else {
			return (_0x9f6cx6 < _0x9f6cx4) ? -1 : 1
		}
	}
	, layoutEventsInBands: function (_0x9f6cx2) {
		var _0x9f6cx1 = 0;
		do {
			var _0x9f6cx5 = _0x9f6cx2[0];
			while (_0x9f6cx5) {
				_0x9f6cx5['top'] = this['bandIndexToPxConvertFn']['call'](this['bandIndexToPxConvertScope'] || this, _0x9f6cx1, _0x9f6cx5['event']);
				Ext['Array']['remove'](_0x9f6cx2, _0x9f6cx5);
				_0x9f6cx5 = this['findClosestSuccessor'](_0x9f6cx5, _0x9f6cx2)
			};
			_0x9f6cx1++
		} while (_0x9f6cx2['length'] > 0);;
		return _0x9f6cx1
	}
	, findClosestSuccessor: function (_0x9f6cx1, _0x9f6cxc) {
		var _0x9f6cx7 = Infinity
			, _0x9f6cx2, _0x9f6cx6 = _0x9f6cx1['end']
			, _0x9f6cx8, _0x9f6cx5 = _0x9f6cx1['end'] - _0x9f6cx1['start'] === 0;
		for (var _0x9f6cx4 = 0, _0x9f6cx3 = _0x9f6cxc['length']; _0x9f6cx4 < _0x9f6cx3; _0x9f6cx4++) {
			_0x9f6cx8 = _0x9f6cxc[_0x9f6cx4]['start'] - _0x9f6cx6;
			if (_0x9f6cx8 >= 0 && _0x9f6cx8 < _0x9f6cx7 && (_0x9f6cx8 > 0 || _0x9f6cxc[_0x9f6cx4]['end'] - _0x9f6cxc[_0x9f6cx4]['start'] > 0 || !_0x9f6cx5)) {
				_0x9f6cx2 = _0x9f6cxc[_0x9f6cx4];
				_0x9f6cx7 = _0x9f6cx8
			}
		};
		return _0x9f6cx2
	}
});
Ext.define('Ext.ux.Scheduler.view.Vertical', {
	view: null
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1)
	}
	, getElementsFromEventRecord: function (_0x9f6cx2, _0x9f6cx4, _0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx1 = this['view']
			, _0x9f6cx7;
		_0x9f6cx5 = _0x9f6cx5 || false;
		if (_0x9f6cx4) {
			_0x9f6cx7 = '[id^=' + _0x9f6cx1['eventPrefix'] + _0x9f6cx2['internalId'] + '-' + _0x9f6cx4['internalId'] + '-]'
		}
		else {
			_0x9f6cx7 = '[id^=' + _0x9f6cx1['eventPrefix'] + _0x9f6cx2['internalId'] + '-]'
		};
		return _0x9f6cx1['getEl']()['query'](_0x9f6cx7, _0x9f6cx5)
	}
	, translateToScheduleCoordinate: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['view'];
		return _0x9f6cx2 - _0x9f6cx1['getViewContainerElementTop']() + _0x9f6cx1['getVerticalScroll']()
	}
	, translateToPageCoordinate: function (_0x9f6cx5) {
		var _0x9f6cx2 = this['view'];
		var _0x9f6cx1 = _0x9f6cx2['getVerticalScroll']();
		return _0x9f6cx5 + _0x9f6cx2['getViewContainerElementTop']() - _0x9f6cx1
	}
	, getDateFromXY: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx3 = _0x9f6cx5[1];
		if (!_0x9f6cx1) {
			_0x9f6cx3 = this['translateToScheduleCoordinate'](_0x9f6cx3)
		};
		return this['view']['timeAxisViewModel']['getDateFromPosition'](_0x9f6cx3, _0x9f6cx2)
	}
	, getEventRenderData: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx8 = Math
			, _0x9f6cx6 = _0x9f6cx1['getStartDate']()
			, _0x9f6cx7 = _0x9f6cx1['getEndDate']()
			, _0x9f6cx9 = this['view']
			, _0x9f6cx4 = _0x9f6cx9['timeAxis']['getStart']()
			, _0x9f6cxc = _0x9f6cx9['timeAxis']['getEnd']()
			, _0x9f6cx3 = _0x9f6cx8['floor'](_0x9f6cx9['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cx6, _0x9f6cx4)))
			, _0x9f6cxa = _0x9f6cx8['floor'](_0x9f6cx9['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cx7, _0x9f6cxc)))
			, _0x9f6cx5 = {
				event: _0x9f6cx1
			};
		_0x9f6cx5['top'] = _0x9f6cx8['max'](0, _0x9f6cx8['min'](_0x9f6cx3, _0x9f6cxa) - _0x9f6cx9['eventBorderWidth']);
		_0x9f6cx5['height'] = _0x9f6cx8['max'](1, _0x9f6cx8['abs'](_0x9f6cx3 - _0x9f6cxa));
		_0x9f6cx5['start'] = _0x9f6cx6;
		_0x9f6cx5['end'] = _0x9f6cx7;
		_0x9f6cx5['startsOutsideView'] = _0x9f6cx6 < _0x9f6cx4;
		_0x9f6cx5['endsOutsideView'] = _0x9f6cx7 > _0x9f6cxc;
		return _0x9f6cx5
	}
	, getScheduleRegion: function (_0x9f6cx3, _0x9f6cx7) {
		var _0x9f6cx8 = this['view']
			, _0x9f6cx6 = _0x9f6cx3 ? Ext['fly'](_0x9f6cx8['getScheduleCell'](_0x9f6cx8['getNodes']()[0], _0x9f6cx8['getResourceStore']()['indexOf'](_0x9f6cx3)))['getRegion']() : _0x9f6cx8['getTableRegion']()
			, _0x9f6cx4 = _0x9f6cx8['timeAxis']['getStart']()
			, _0x9f6cxa = _0x9f6cx8['timeAxis']['getEnd']()
			, _0x9f6cx1 = _0x9f6cx8['getDateConstraints'](_0x9f6cx3, _0x9f6cx7) || {
				start: _0x9f6cx4
				, end: _0x9f6cxa
			}
			, _0x9f6cx5 = this['translateToPageCoordinate'](_0x9f6cx8['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cx4, _0x9f6cx1['start'])))
			, _0x9f6cxc = this['translateToPageCoordinate'](_0x9f6cx8['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cxa, _0x9f6cx1['end'])))
			, _0x9f6cx2 = _0x9f6cx6['left'] + _0x9f6cx8['barMargin']
			, _0x9f6cx9 = (_0x9f6cx3 ? (_0x9f6cx6['left'] + this['getResourceColumnWidth'](_0x9f6cx3)) : _0x9f6cx6['right']) - _0x9f6cx8['barMargin'];
		return new Ext['util'].Region(Math['min'](_0x9f6cx5, _0x9f6cxc), _0x9f6cx9, Math['max'](_0x9f6cx5, _0x9f6cxc), _0x9f6cx2)
	}
	, getResourceColumnWidth: function (_0x9f6cx1) {
		return this['view']['timeAxisViewModel']['resourceColumnWidth']
	}
	, getResourceColumnLayoutAvailableWidth: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['getResourceColumnWidth'](_0x9f6cx2) - (2 * _0x9f6cx1['view']['barMargin']) - _0x9f6cx1['view']['cellBorderWidth']
	}
	, getResourceRegion: function (_0x9f6cx8, _0x9f6cx2, _0x9f6cx6) {
		var _0x9f6cxc = this['view']
			, _0x9f6cx4 = _0x9f6cxc['getResourceStore']()['indexOf'](_0x9f6cx8) * this['getResourceColumnWidth'](_0x9f6cx8)
			, _0x9f6cx9 = _0x9f6cxc['timeAxis']['getStart']()
			, _0x9f6cxb = _0x9f6cxc['timeAxis']['getEnd']()
			, _0x9f6cx1 = _0x9f6cx2 ? Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cx9, _0x9f6cx2) : _0x9f6cx9
			, _0x9f6cx3 = _0x9f6cx6 ? Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cxb, _0x9f6cx6) : _0x9f6cxb
			, _0x9f6cx7 = Math['max'](0, _0x9f6cxc['getCoordinateFromDate'](_0x9f6cx1) - _0x9f6cxc['cellTopBorderWidth'])
			, _0x9f6cx13 = _0x9f6cxc['getCoordinateFromDate'](_0x9f6cx3) - _0x9f6cxc['cellTopBorderWidth']
			, _0x9f6cx5 = _0x9f6cx4 + _0x9f6cxc['cellBorderWidth']
			, _0x9f6cxa = _0x9f6cx4 + this['getResourceColumnWidth'](_0x9f6cx8) - _0x9f6cxc['cellBorderWidth'];
		return new Ext['util'].Region(Math['min'](_0x9f6cx7, _0x9f6cx13), _0x9f6cxa, Math['max'](_0x9f6cx7, _0x9f6cx13), _0x9f6cx5)
	}
	, columnRenderer: function (_0x9f6cx7, _0x9f6cx11, _0x9f6cxb, _0x9f6cxd, _0x9f6cx12) {
		var _0x9f6cxf = this['view'];
		var _0x9f6cx4 = '';
		if (_0x9f6cxd === 0) {
			var _0x9f6cx1 = Ext.ux.Scheduler['util']['Date']
				, _0x9f6cxa = _0x9f6cxf['timeAxis']
				, _0x9f6cxe, _0x9f6cx5, _0x9f6cxc, _0x9f6cx6;
			_0x9f6cxe = [];
			_0x9f6cx5 = _0x9f6cxf['getEventStore']()['getEventsForResource'](_0x9f6cxb);
			for (_0x9f6cxc = 0, _0x9f6cx6 = _0x9f6cx5['length']; _0x9f6cxc < _0x9f6cx6; _0x9f6cxc++) {
				var _0x9f6cx2 = _0x9f6cx5[_0x9f6cxc]
					, _0x9f6cx3 = _0x9f6cx2['getStartDate']()
					, _0x9f6cx8 = _0x9f6cx2['getEndDate']();
				if (_0x9f6cx3 && _0x9f6cx8 && _0x9f6cxa['timeSpanInAxis'](_0x9f6cx3, _0x9f6cx8)) {
					_0x9f6cxe['push'](_0x9f6cxf['generateTplData'](_0x9f6cx2, _0x9f6cxb, _0x9f6cx12))
				}
			};
			_0x9f6cxf['eventLayout']['vertical']['applyLayout'](_0x9f6cxe, this['getResourceColumnLayoutAvailableWidth'](_0x9f6cxb));
			_0x9f6cx4 = '&#160;' + _0x9f6cxf['eventTpl']['apply'](_0x9f6cxe)
		};
		if (_0x9f6cx12 % 2 === 1) {
			_0x9f6cx11['tdCls'] = (_0x9f6cx11['tdCls'] || '') + ' ' + _0x9f6cxf['altColCls'];
			_0x9f6cx11['cellCls'] = (_0x9f6cx11['cellCls'] || '') + ' ' + _0x9f6cxf['altColCls']
		};
		return _0x9f6cx4
	}
	, resolveResource: function (_0x9f6cx7) {
		var _0x9f6cx4 = this
			, _0x9f6cx2 = _0x9f6cx4['view']
			, _0x9f6cx3, _0x9f6cx5 = -1
			, _0x9f6cx1;
		_0x9f6cx3 = Ext['fly'](_0x9f6cx7)['is'](_0x9f6cx2['eventSelector']) && _0x9f6cx7 || Ext['fly'](_0x9f6cx7)['up'](_0x9f6cx2['eventSelector'], null, true);
		if (_0x9f6cx3) {
			_0x9f6cx1 = _0x9f6cx2['getResourceRecordFromDomId'](_0x9f6cx3['id'])
		}
		else {
			_0x9f6cx7 = Ext['fly'](_0x9f6cx7)['is'](_0x9f6cx2['timeCellSelector']) ? _0x9f6cx7 : Ext['fly'](_0x9f6cx7)['up'](_0x9f6cx2['timeCellSelector'], null, true);
			if (_0x9f6cx7) {
				if (Ext['isIE8m']) {
					_0x9f6cx5 = 0;
					_0x9f6cx7 = _0x9f6cx7['previousSibling'];
					while (_0x9f6cx7) {
						if (_0x9f6cx7['nodeType'] === 1) {
							_0x9f6cx5++
						};
						_0x9f6cx7 = _0x9f6cx7['previousSibling']
					}
				}
				else {
					_0x9f6cx5 = Ext['Array']['indexOf'](Array['prototype']['slice']['call'](_0x9f6cx7['parentNode']['children']), _0x9f6cx7)
				}
			};
			_0x9f6cx1 = _0x9f6cx5 >= 0 && _0x9f6cx2['getResourceStore']()['getAt'](_0x9f6cx5) || null
		};
		return _0x9f6cx1
	}
	, onEventUpdate: function (_0x9f6cx13, _0x9f6cx1) {
		var _0x9f6cx9 = this;
		var _0x9f6cx6 = _0x9f6cx1['previous'] || {};
		var _0x9f6cxc = _0x9f6cx9['view'];
		var _0x9f6cx7 = _0x9f6cxc['timeAxis'];
		var _0x9f6cx2 = _0x9f6cx1['getStartDate']();
		var _0x9f6cx8 = _0x9f6cx1['getEndDate']();
		var _0x9f6cx5 = _0x9f6cx6['StartDate'] || _0x9f6cx2;
		var _0x9f6cx4 = _0x9f6cx6['EndDate'] || _0x9f6cx8;
		var _0x9f6cxa = _0x9f6cx5 && _0x9f6cx4 && _0x9f6cx7['timeSpanInAxis'](_0x9f6cx5, _0x9f6cx4);
		var _0x9f6cx3;
		if (_0x9f6cx1['resourceIdField'] in _0x9f6cx6 && _0x9f6cxa) {
			_0x9f6cx3 = _0x9f6cx13['getResourceStore']()['getById'](_0x9f6cx6[_0x9f6cx1['resourceIdField']]);
			_0x9f6cx3 && _0x9f6cx9['relayoutRenderedEvents'](_0x9f6cx3)
		};
		if ((_0x9f6cx2 && _0x9f6cx8 && _0x9f6cx7['timeSpanInAxis'](_0x9f6cx2, _0x9f6cx8)) || _0x9f6cxa) {
			_0x9f6cx9['renderSingle'](_0x9f6cx1);
			Ext['Array']['each'](_0x9f6cx1['getResources'](), function (_0x9f6cxb) {
				_0x9f6cx9['relayoutRenderedEvents'](_0x9f6cxb);
				_0x9f6cxc['getEventSelectionModel']()['isSelected'](_0x9f6cx1) && _0x9f6cxc['onEventBarSelect'](_0x9f6cx1, true)
			})
		}
	}
	, onEventAdd: function (_0x9f6cx5, _0x9f6cx7) {
		var _0x9f6cx4 = this
			, _0x9f6cx2 = _0x9f6cx4['view']
			, _0x9f6cx3, _0x9f6cx1, _0x9f6cx6;
		if (_0x9f6cx7['length'] === 1) {
			_0x9f6cx3 = _0x9f6cx7[0];
			_0x9f6cx1 = _0x9f6cx3['getStartDate']();
			_0x9f6cx6 = _0x9f6cx3['getEndDate']();
			if (_0x9f6cx1 && _0x9f6cx6 && _0x9f6cx2['timeAxis']['timeSpanInAxis'](_0x9f6cx1, _0x9f6cx6)) {
				_0x9f6cx4['renderSingle'](_0x9f6cx3);
				Ext['Array']['each'](_0x9f6cx5['getResourcesForEvent'](_0x9f6cx3), function (_0x9f6cx8) {
					_0x9f6cx4['relayoutRenderedEvents'](_0x9f6cx8)
				})
			}
		}
		else {
			_0x9f6cx2['repaintAllEvents']()
		}
	}
	, onEventRemove: function (_0x9f6cxa, _0x9f6cxc) {
		var _0x9f6cx6 = this
			, _0x9f6cx8 = _0x9f6cx6['view']
			, _0x9f6cx1, _0x9f6cx5, _0x9f6cx4, _0x9f6cx3, _0x9f6cx7, _0x9f6cx2;
		for (_0x9f6cx2 = false, _0x9f6cx3 = 0, _0x9f6cx7 = _0x9f6cxc['length']; !_0x9f6cx2 && _0x9f6cx3 < _0x9f6cx7; _0x9f6cx3++) {
			_0x9f6cx1 = _0x9f6cxc[_0x9f6cx3];
			_0x9f6cx5 = _0x9f6cx1['getStartDate']();
			_0x9f6cx4 = _0x9f6cx1['getEndDate']();
			_0x9f6cx2 = _0x9f6cx5 && _0x9f6cx4 && _0x9f6cx8['timeAxis']['timeSpanInAxis'](_0x9f6cx5, _0x9f6cx4);
			_0x9f6cx2 && _0x9f6cx8['repaintAllEvents']()
		}
	}
	, relayoutRenderedEvents: function (_0x9f6cx3) {
		var _0x9f6cx5 = []
			, _0x9f6cx1 = this['view']
			, _0x9f6cx2 = _0x9f6cx1['getEventStore']()['getEventsForResource'](_0x9f6cx3);
		Ext['Array']['each'](_0x9f6cx2, function (_0x9f6cx7) {
			var _0x9f6cx4 = _0x9f6cx1['getElementsFromEventRecord'](_0x9f6cx7, _0x9f6cx3);
			_0x9f6cx4['length'] && _0x9f6cx5['push']({
				start: _0x9f6cx7['getStartDate']()
				, end: _0x9f6cx7['getEndDate']()
				, event: _0x9f6cx7
				, node: _0x9f6cx4[0]
			})
		});
		_0x9f6cx1['eventLayout']['vertical']['applyLayout'](_0x9f6cx5, this['getResourceColumnLayoutAvailableWidth'](_0x9f6cx3));
		Ext['Array']['each'](_0x9f6cx5, function (_0x9f6cx4) {
			_0x9f6cx4['node']['setStyle']({
				left: _0x9f6cx4['left'] + 'px'
				, width: _0x9f6cx4['width'] + 'px'
			});
			_0x9f6cx1['fireEvent']('eventrepaint', _0x9f6cx1, _0x9f6cx4['event'], _0x9f6cx4['node'])
		})
	}
	, renderSingle: function (_0x9f6cx5) {
		var _0x9f6cx2 = this['view']
			, _0x9f6cx1 = _0x9f6cx5['getStartDate']()
			, _0x9f6cx3 = _0x9f6cx5['getEndDate']();
		Ext['Array']['each'](_0x9f6cx2['getElementsFromEventRecord'](_0x9f6cx5), function (_0x9f6cx4) {
			_0x9f6cx4['destroy']()
		});
		if (_0x9f6cx1 && _0x9f6cx3 && _0x9f6cx2['timeAxis']['timeSpanInAxis'](_0x9f6cx1, _0x9f6cx3)) {
			Ext['Array']['each'](_0x9f6cx5['getResources'](), function (_0x9f6cx8) {
				var _0x9f6cx6 = _0x9f6cx2['getResourceStore']()['indexOf'](_0x9f6cx8)
					, _0x9f6cx4 = Ext['fly'](_0x9f6cx2['getScheduleCell'](0, _0x9f6cx6))
					, _0x9f6cx7;
				if (_0x9f6cx4) {
					_0x9f6cx7 = _0x9f6cx2['generateTplData'](_0x9f6cx5, _0x9f6cx8, _0x9f6cx6);
					_0x9f6cx2['eventTpl']['append'](_0x9f6cx4['first'](), [_0x9f6cx7])
				}
			})
		}
	}
	, getTimeSpanRegion: function (_0x9f6cx2, _0x9f6cx6) {
		var _0x9f6cx3 = this['view']
			, _0x9f6cx1 = _0x9f6cx3['getCoordinateFromDate'](_0x9f6cx2)
			, _0x9f6cx7 = _0x9f6cx6 ? _0x9f6cx3['getCoordinateFromDate'](_0x9f6cx6) : _0x9f6cx1
			, _0x9f6cx5 = _0x9f6cx3['getTableRegion']()
			, _0x9f6cx4 = _0x9f6cx5 ? _0x9f6cx5['right'] - _0x9f6cx5['left'] : _0x9f6cx3['getEl']()['dom']['clientWidth'];
		return new Ext['util'].Region(Math['min'](_0x9f6cx1, _0x9f6cx7), _0x9f6cx4, Math['max'](_0x9f6cx1, _0x9f6cx7), 0)
	}
	, getStartEndDatesFromRegion: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this['view']['getDateFromCoordinate'](_0x9f6cx5['top'], _0x9f6cx2)
			, _0x9f6cx3 = this['view']['getDateFromCoordinate'](_0x9f6cx5['bottom'], _0x9f6cx2);
		if (_0x9f6cx1 && _0x9f6cx3) {
			return {
				start: _0x9f6cx1
				, end: _0x9f6cx3
			}
		}
		else {
			return null
		}
	}
	, setColumnWidth: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this['view'];
		_0x9f6cx1['resourceColumnWidth'] = _0x9f6cx5;
		_0x9f6cx1['getTimeAxisViewModel']()['setViewColumnWidth'](_0x9f6cx5, _0x9f6cx2)
	}
	, getVisibleDateRange: function () {
		var _0x9f6cx4 = this['view'];
		if (!_0x9f6cx4['rendered']) {
			return null
		};
		var _0x9f6cx5 = _0x9f6cx4['getScroll']()
			, _0x9f6cx2 = _0x9f6cx4['getViewContainerHeight']()
			, _0x9f6cx3 = _0x9f6cx4['getTableRegion']()
			, _0x9f6cx7 = _0x9f6cx4['timeAxis']['getEnd']();
		if (_0x9f6cx3['bottom'] - _0x9f6cx3['top'] < _0x9f6cx2) {
			var _0x9f6cx1 = _0x9f6cx4['timeAxis']['getStart']();
			return {
				startDate: _0x9f6cx1
				, endDate: _0x9f6cx7
			}
		};
		return {
			startDate: _0x9f6cx4['getDateFromCoordinate'](_0x9f6cx5['top'], null, true)
			, endDate: _0x9f6cx4['getDateFromCoordinate'](_0x9f6cx5['top'] + _0x9f6cx2, null, true) || _0x9f6cx7
		}
	}
	, getItemBox: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return Ext['Array']['map'](_0x9f6cx1['getResources'](), function (_0x9f6cx5) {
			return _0x9f6cx2['getResourceEventBox'](_0x9f6cx1, _0x9f6cx5)
		})
	}
	, getResourceEventBox: function (_0x9f6cx7, _0x9f6cx6) {
		var _0x9f6cx9 = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cx10 = this
			, _0x9f6cxa = null
			, _0x9f6cxb = _0x9f6cx10['view']
			, _0x9f6cxc = _0x9f6cxb['timeAxis']['getStart']()
			, _0x9f6cx8 = _0x9f6cxb['timeAxis']['getEnd']()
			, _0x9f6cx12 = _0x9f6cx7['getStartDate']()
			, _0x9f6cx13 = _0x9f6cx7['getEndDate']()
			, _0x9f6cxd, _0x9f6cxe, _0x9f6cx11, _0x9f6cx3, _0x9f6cxf, _0x9f6cx2, _0x9f6cx1, _0x9f6cx5;
		if (_0x9f6cx12 && _0x9f6cx13 && _0x9f6cx9['intersectSpans'](_0x9f6cx12, _0x9f6cx13, _0x9f6cxc, _0x9f6cx8)) {
			if (_0x9f6cxb['managedEventSizing']) {
				_0x9f6cxd = _0x9f6cxb['eventLayout']['vertical'];
				var _0x9f6cx4 = _0x9f6cxb['getEventStore']()['filterEventsForResource'](_0x9f6cx6, _0x9f6cxb['timeAxis']['isRangeInAxis'], _0x9f6cxb['timeAxis']);
				_0x9f6cxe = Ext['Array']['map'](_0x9f6cx4, _0x9f6cx10['getEventRenderData'], _0x9f6cx10);
				_0x9f6cxd['applyLayout'](_0x9f6cxe, _0x9f6cx10['getResourceColumnLayoutAvailableWidth'](_0x9f6cx6));
				_0x9f6cx11 = Ext['Array']['findBy'](_0x9f6cxe, function (_0x9f6cx14) {
					return _0x9f6cx14['event'] == _0x9f6cx7
				});
				if (_0x9f6cx11) {
					_0x9f6cx3 = _0x9f6cxb['getResourceStore']()['indexOf'](_0x9f6cx6) * _0x9f6cx10['getResourceColumnWidth'](_0x9f6cx6);
					_0x9f6cxa = {
						rendered: true
						, start: _0x9f6cx11['left'] + _0x9f6cx3
						, end: _0x9f6cx11['left'] + _0x9f6cx11['width'] + _0x9f6cx3
						, top: _0x9f6cx11['top']
						, bottom: _0x9f6cx11['top'] + _0x9f6cx11['height']
					}
				}
			}
			else {
				_0x9f6cxf = _0x9f6cxb['getElementsFromEventRecord'](_0x9f6cx7, _0x9f6cx7 !== _0x9f6cx6 && _0x9f6cx6);
				if (_0x9f6cxf['length']) {
					_0x9f6cx2 = _0x9f6cxf[0];
					_0x9f6cx1 = _0x9f6cx2['getOffsetsTo'](_0x9f6cxb['getEl']());
					_0x9f6cx5 = _0x9f6cx2['getBox']();
					_0x9f6cxa = {
						rendered: true
						, start: _0x9f6cx1[0]
						, end: _0x9f6cx1[0] + _0x9f6cx5['width']
						, top: _0x9f6cx1[1]
						, bottom: _0x9f6cx1[1] + _0x9f6cx5['height']
					}
				}
			};
			if (_0x9f6cxa) {
				_0x9f6cxa = _0x9f6cx10['adjustItemBox'](_0x9f6cx7, _0x9f6cxa)
			}
		};
		return _0x9f6cxa
	}
	, adjustItemBox: function (_0x9f6cx1, _0x9f6cx2) {
		return _0x9f6cx2
	}
	, getConnectorStartSide: function (_0x9f6cx1) {
		return 'top'
	}
	, getConnectorEndSide: function (_0x9f6cx1) {
		return 'bottom'
	}
});
Ext.define('Ext.ux.Scheduler.eventlayout.Vertical', {
	requires: ['Ext.ux.Scheduler.util.Date']
	, view: null
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1)
	}
	, applyLayout: function (_0x9f6cx1, _0x9f6cx6) {
		if (_0x9f6cx1['length'] === 0) {
			return
		};
		var _0x9f6cx17 = this;
		_0x9f6cx1['sort'](function (_0x9f6cxc, _0x9f6cx9) {
			return _0x9f6cx17['sortEvents'](_0x9f6cxc['event'], _0x9f6cx9['event'])
		});
		var _0x9f6cx3, _0x9f6cx5, _0x9f6cx8 = this['view']
			, _0x9f6cxa = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cxe = 1
			, _0x9f6cx11, _0x9f6cx2, _0x9f6cx4, _0x9f6cx12;
		for (var _0x9f6cx10 = 0, _0x9f6cxf = _0x9f6cx1['length']; _0x9f6cx10 < _0x9f6cxf; _0x9f6cx10++) {
			_0x9f6cx4 = _0x9f6cx1[_0x9f6cx10];
			_0x9f6cx3 = _0x9f6cx4['start'];
			_0x9f6cx5 = _0x9f6cx4['end'];
			_0x9f6cx2 = this['findStartSlot'](_0x9f6cx1, _0x9f6cx4);
			var _0x9f6cx14 = this['getCluster'](_0x9f6cx1, _0x9f6cx10);
			if (_0x9f6cx14['length'] > 1) {
				_0x9f6cx4['left'] = _0x9f6cx2['start'];
				_0x9f6cx4['width'] = _0x9f6cx2['end'] - _0x9f6cx2['start'];
				_0x9f6cx12 = 1;
				while (_0x9f6cx12 < (_0x9f6cx14['length'] - 1) && _0x9f6cx14[_0x9f6cx12 + 1]['start'] - _0x9f6cx4['start'] === 0) {
					_0x9f6cx12++
				};
				var _0x9f6cxd = this['findStartSlot'](_0x9f6cx1, _0x9f6cx14[_0x9f6cx12]);
				if (_0x9f6cxd && _0x9f6cxd['start'] < 0.8) {
					_0x9f6cx14 = _0x9f6cx14['slice'](0, _0x9f6cx12)
				}
			};
			var _0x9f6cx7 = _0x9f6cx14['length']
				, _0x9f6cxb = (_0x9f6cx2['end'] - _0x9f6cx2['start']) / _0x9f6cx7;
			for (_0x9f6cx12 = 0; _0x9f6cx12 < _0x9f6cx7; _0x9f6cx12++) {
				_0x9f6cx14[_0x9f6cx12]['width'] = _0x9f6cxb;
				_0x9f6cx14[_0x9f6cx12]['left'] = _0x9f6cx2['start'] + (_0x9f6cx12 * _0x9f6cxb)
			};
			_0x9f6cx10 += _0x9f6cx7 - 1
		};
		for (_0x9f6cx10 = 0, _0x9f6cxf = _0x9f6cx1['length']; _0x9f6cx10 < _0x9f6cxf; _0x9f6cx10++) {
			_0x9f6cx1[_0x9f6cx10]['width'] = _0x9f6cx1[_0x9f6cx10]['width'] * _0x9f6cx6;
			_0x9f6cx1[_0x9f6cx10]['left'] = _0x9f6cx8['barMargin'] + (_0x9f6cx1[_0x9f6cx10]['left'] * _0x9f6cx6)
		}
	}
	, findStartSlot: function (_0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx1 = this['getPriorOverlappingEvents'](_0x9f6cx5, _0x9f6cx3)
			, _0x9f6cx2;
		if (_0x9f6cx1['length'] === 0) {
			return {
				start: 0
				, end: 1
			}
		};
		for (_0x9f6cx2 = 0; _0x9f6cx2 < _0x9f6cx1['length']; _0x9f6cx2++) {
			if (_0x9f6cx2 === 0 && _0x9f6cx1[0]['left'] > 0) {
				return {
					start: 0
					, end: _0x9f6cx1[0]['left']
				}
			}
			else {
				if (_0x9f6cx1[_0x9f6cx2]['left'] + _0x9f6cx1[_0x9f6cx2]['width'] < (_0x9f6cx2 < _0x9f6cx1['length'] - 1 ? _0x9f6cx1[_0x9f6cx2 + 1]['left'] : 1)) {
					return {
						start: _0x9f6cx1[_0x9f6cx2]['left'] + _0x9f6cx1[_0x9f6cx2]['width']
						, end: _0x9f6cx2 < _0x9f6cx1['length'] - 1 ? _0x9f6cx1[_0x9f6cx2 + 1]['left'] : 1
					}
				}
			}
		};
		return false
	}
	, getPriorOverlappingEvents: function (_0x9f6cx4, _0x9f6cx7) {
		var _0x9f6cx6 = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cx8 = _0x9f6cx7['start']
			, _0x9f6cx2 = _0x9f6cx7['end']
			, _0x9f6cx5 = [];
		for (var _0x9f6cx3 = 0, _0x9f6cx1 = Ext['Array']['indexOf'](_0x9f6cx4, _0x9f6cx7); _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
			if (_0x9f6cx6['intersectSpans'](_0x9f6cx8, _0x9f6cx2, _0x9f6cx4[_0x9f6cx3]['start'], _0x9f6cx4[_0x9f6cx3]['end'])) {
				_0x9f6cx5['push'](_0x9f6cx4[_0x9f6cx3])
			}
		};
		_0x9f6cx5['sort'](this['sortOverlappers']);
		return _0x9f6cx5
	}
	, sortOverlappers: function (_0x9f6cx2, _0x9f6cx1) {
		return _0x9f6cx2['left'] < _0x9f6cx1['left'] ? -1 : 1
	}
	, getCluster: function (_0x9f6cx4, _0x9f6cx6) {
		if (_0x9f6cx6 >= _0x9f6cx4['length'] - 1) {
			return [_0x9f6cx4[_0x9f6cx6]]
		};
		var _0x9f6cx5 = [_0x9f6cx4[_0x9f6cx6]]
			, _0x9f6cx8 = _0x9f6cx4[_0x9f6cx6]['start']
			, _0x9f6cx2 = _0x9f6cx4[_0x9f6cx6]['end']
			, _0x9f6cx1 = _0x9f6cx4['length']
			, _0x9f6cx7 = Ext.ux.Scheduler['util']['Date']
			, _0x9f6cx3 = _0x9f6cx6 + 1;
		while (_0x9f6cx3 < _0x9f6cx1 && _0x9f6cx7['intersectSpans'](_0x9f6cx8, _0x9f6cx2, _0x9f6cx4[_0x9f6cx3]['start'], _0x9f6cx4[_0x9f6cx3]['end'])) {
			_0x9f6cx5['push'](_0x9f6cx4[_0x9f6cx3]);
			_0x9f6cx8 = _0x9f6cx7['max'](_0x9f6cx8, _0x9f6cx4[_0x9f6cx3]['start']);
			_0x9f6cx2 = _0x9f6cx7['min'](_0x9f6cx4[_0x9f6cx3]['end'], _0x9f6cx2);
			_0x9f6cx3++
		};
		return _0x9f6cx5
	}
	, sortEvents: function (_0x9f6cx7, _0x9f6cx3) {
		var _0x9f6cx6 = _0x9f6cx7['getStartDate']()
			, _0x9f6cx9 = _0x9f6cx7['getEndDate']();
		var _0x9f6cx4 = _0x9f6cx3['getStartDate']()
			, _0x9f6cx8 = _0x9f6cx3['getEndDate']();
		var _0x9f6cx5 = (_0x9f6cx6 - _0x9f6cx4 === 0);
		if (_0x9f6cx5) {
			return _0x9f6cx9 > _0x9f6cx8 ? -1 : 1
		}
		else {
			return (_0x9f6cx6 < _0x9f6cx4) ? -1 : 1
		}
	}
});
Ext.define('Ext.ux.Scheduler.mixin.AbstractSchedulerView', {
	requires: ['Ext.ux.Scheduler.model.Assignment', 'Ext.ux.Scheduler.template.Event', 'Ext.ux.Scheduler.eventlayout.Horizontal', 'Ext.ux.Scheduler.view.Vertical', 'Ext.ux.Scheduler.eventlayout.Vertical']
	, _cmpCls: 'sch-schedulerview'
	, scheduledEventName: 'event'
	, eventTemplateClass: 'Ext.ux.Scheduler.template.Event'
	, eventTpl: null
	, barMargin: 0
	, constrainDragToResource: false
	, allowOverlap: null
	, readOnly: null
	, altColCls: 'sch-col-alt'
	, highlightedEventCls: 'sch-event-highlighted'
	, highlightDirtyEvents: false
	, dynamicRowHeight: true
	, managedEventSizing: true
	, eventAnimations: true
	, horizontalLayoutCls: 'Ext.ux.Scheduler.eventlayout.Horizontal'
	, horizontalEventSorterFn: null
	, verticalLayoutCls: 'Ext.ux.Scheduler.eventlayout.Vertical'
	, verticalEventSorterFn: null
	, eventCls: 'sch-event'
	, verticalViewClass: 'Ext.ux.Scheduler.view.Vertical'
	, eventStore: null
	, resourceStore: null
	, eventLayout: null
	, terminalSides: null
	, _initializeSchedulerView: function () {
		var _0x9f6cx1 = Ext['ClassManager']['get'](this['horizontalLayoutCls']);
		var _0x9f6cx2 = Ext['ClassManager']['get'](this['verticalLayoutCls']);
		this['eventSelector'] = '.' + this['eventCls'];
		this['eventLayout'] = {};
		this['eventTpl'] = this['eventTpl'] || Ext['create'](this['eventTemplateClass'], {
			eventPrefix: this['eventPrefix']
			, terminalSides: this['terminalSides']
			, resizeHandles: this['eventResizeHandles']
		});
		if (_0x9f6cx1) {
			this['eventLayout']['horizontal'] = new _0x9f6cx1(Ext['apply']({
				timeAxisViewModel: this['timeAxisViewModel']
			}, {
				bandIndexToPxConvertFn: this['horizontal']['layoutEventVertically']
				, bandIndexToPxConvertScope: this['horizontal']
			}, this['horizontalEventSorterFn'] ? {
				sortEvents: this['horizontalEventSorterFn']
			} : {}))
		};
		if (_0x9f6cx2) {
			this['eventLayout']['vertical'] = new _0x9f6cx2(Ext['apply']({
				view: this
			}, this['verticalEventSorterFn'] ? {
				sortEvents: this['verticalEventSorterFn']
			} : {}))
		};
		this['store'] = this['store'] || this['resourceStore'];
		this['resourceStore'] = this['resourceStore'] || this['store']
	}
	, generateTplData: function (_0x9f6cx4, _0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx6 = this[this['mode']]['getEventRenderData'](_0x9f6cx4, _0x9f6cx3, _0x9f6cx5)
			, _0x9f6cx8 = _0x9f6cx4['getStartDate']()
			, _0x9f6cx2 = _0x9f6cx4['getEndDate']()
			, _0x9f6cx1 = _0x9f6cx4['getCls']() || '';
		_0x9f6cx1 += ' sch-event-resizable-' + _0x9f6cx4['getResizable']();
		if (_0x9f6cx4['dirty']) {
			_0x9f6cx1 += ' sch-dirty '
		};
		if (_0x9f6cx6['endsOutsideView']) {
			_0x9f6cx1 += ' sch-event-endsoutside '
		};
		if (_0x9f6cx6['startsOutsideView']) {
			_0x9f6cx1 += ' sch-event-startsoutside '
		};
		if (this['eventBarIconClsField']) {
			_0x9f6cx1 += ' sch-event-withicon '
		};
		if (_0x9f6cx4['isDraggable']() === false) {
			_0x9f6cx1 += ' sch-event-fixed '
		};
		if (_0x9f6cx2 - _0x9f6cx8 === 0) {
			_0x9f6cx1 += ' sch-event-milestone '
		};
		if (this['getEventSelectionModel']()['isSelected'](_0x9f6cx4)) {
			_0x9f6cx1 += ' ' + this['selectedEventCls'] + ' '
		};
		if (_0x9f6cx4['isHighlighted'] || (this['highlightDirtyEvents'] ? _0x9f6cx4['dirty'] : false)) {
			_0x9f6cx1 += ' ' + this['highlightedEventCls'] + ' '
		};
		if (this['isWeekView']()) {
			_0x9f6cx6['id'] = _0x9f6cx4['internalId'] + '-calendar-' + _0x9f6cx5 + '-x'
		}
		else {
			_0x9f6cx6['id'] = _0x9f6cx4['internalId'] + '-' + _0x9f6cx3['internalId'] + '-x'
		};
		_0x9f6cx6['internalCls'] = _0x9f6cx1;
		_0x9f6cx6['start'] = _0x9f6cx8;
		_0x9f6cx6['end'] = _0x9f6cx2;
		_0x9f6cx6['iconCls'] = _0x9f6cx4['data'][this['eventBarIconClsField']] || (_0x9f6cx4['getIconCls'] && _0x9f6cx4['getIconCls']()) || '';
		_0x9f6cx6['event'] = _0x9f6cx4;
		if (this['eventRenderer']) {
			var _0x9f6cx7 = this['eventRenderer']['call'](this['eventRendererScope'] || this, _0x9f6cx4, _0x9f6cx3, _0x9f6cx6, _0x9f6cx5);
			if (this['eventBodyTemplate']) {
				_0x9f6cx6['body'] = this['eventBodyTemplate']['apply'](_0x9f6cx7)
			}
			else {
				_0x9f6cx6['body'] = _0x9f6cx7
			}
		}
		else {
			if (this['eventBodyTemplate']) {
				_0x9f6cx6['body'] = this['eventBodyTemplate']['apply'](_0x9f6cx4['data'])
			}
			else {
				if (this['eventBarTextField']) {
					_0x9f6cx6['body'] = _0x9f6cx4['data'][this['eventBarTextField']] || ''
				}
			}
		};
		return _0x9f6cx6
	}
	, resolveResource: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		return _0x9f6cx1[_0x9f6cx1['mode']]['resolveResource'](_0x9f6cx2)
	}
	, getResourceRegion: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5) {
		return this[this['mode']]['getResourceRegion'](_0x9f6cx2, _0x9f6cx1, _0x9f6cx5)
	}
	, resolveEventRecord: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1['dom'] ? _0x9f6cx1['dom'] : _0x9f6cx1;
		if (!(Ext['fly'](_0x9f6cx1)['is'](this['eventSelector']))) {
			_0x9f6cx1 = Ext['fly'](_0x9f6cx1)['up'](this['eventSelector'])
		};
		return _0x9f6cx1 && this['getEventRecordFromDomId'](_0x9f6cx1['id'])
	}
	, resolveEventRecordFromResourceRow: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx4 = _0x9f6cx5['getEventSelectionModel']()
			, _0x9f6cx3, _0x9f6cx2;
		_0x9f6cx1 = _0x9f6cx1['dom'] ? _0x9f6cx1['dom'] : _0x9f6cx1;
		_0x9f6cx3 = _0x9f6cx5['getRecord'](_0x9f6cx1);
		return _0x9f6cx4['getFirstSelectedEventForResource'](_0x9f6cx3)
	}
	, resolveAssignmentRecord: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx4 = _0x9f6cx5['getEventStore']()['getAssignmentStore']()
			, _0x9f6cx7 = null
			, _0x9f6cx2, _0x9f6cx3;
		if (_0x9f6cx4) {
			_0x9f6cx2 = _0x9f6cx5['getEventRecordFromDomId'](_0x9f6cx1['id']);
			_0x9f6cx3 = _0x9f6cx5['getResourceRecordFromDomId'](_0x9f6cx1['id']);
			if (_0x9f6cx2 && _0x9f6cx3) {
				_0x9f6cx7 = _0x9f6cx4['getAssignmentForEventAndResource'](_0x9f6cx2, _0x9f6cx3)
			}
		};
		return _0x9f6cx7
	}
	, getEventRecordFromDomId: function (_0x9f6cx1) {
		_0x9f6cx1 = this['getEventIdFromDomNodeId'](_0x9f6cx1);
		return this['getEventStore']()['getModelByInternalId'](_0x9f6cx1)
	}
	, getResourceRecordFromDomId: function (_0x9f6cx1) {
		_0x9f6cx1 = this['getResourceIdFromDomNodeId'](_0x9f6cx1);
		return this['getResourceStore']()['getByInternalId'](_0x9f6cx1)
	}
	, isDateRangeAvailable: function (_0x9f6cx3, _0x9f6cx1, _0x9f6cx2, _0x9f6cx5) {
		return this['getEventStore']()['isDateRangeAvailable'](_0x9f6cx3, _0x9f6cx1, _0x9f6cx2, _0x9f6cx5)
	}
	, getEventsInView: function () {
		var _0x9f6cx2 = this['timeAxis']['getStart']()
			, _0x9f6cx1 = this['timeAxis']['getEnd']();
		return this['getEventStore']()['getEventsInTimeSpan'](_0x9f6cx2, _0x9f6cx1)
	}
	, getEventNodes: function () {
		return this['getEl']()['select'](this['eventSelector'])
	}
	, triggerHighlightEvents: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		var _0x9f6cx3 = [];
		Ext['Array']['each']([]['concat'](_0x9f6cx2), function (_0x9f6cx7) {
			_0x9f6cx3['push']['apply'](_0x9f6cx3, _0x9f6cx5['getElementsFromEventRecord'](_0x9f6cx7, null, null, true))
		});
		var _0x9f6cx4 = _0x9f6cx1 !== false ? 'addCls' : 'removeCls';
		Ext['Array']['each'](_0x9f6cx2, function (_0x9f6cx7) {
			_0x9f6cx7['isHighlighted'] = _0x9f6cx1
		});
		Ext['Array']['each']([]['concat'](_0x9f6cx3), function (_0x9f6cx7) {
			Ext['fly'](_0x9f6cx7)[_0x9f6cx4](_0x9f6cx5['highlightedEventCls'])
		})
	}
	, highlightEvents: function (_0x9f6cx1) {
		this['triggerHighlightEvents'](_0x9f6cx1, true)
	}
	, unhighlightEvents: function (_0x9f6cx1) {
		this['triggerHighlightEvents'](_0x9f6cx1, false)
	}
	, highlightEventsBy: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this['getEventsInView']();
		this['highlightEvents'](_0x9f6cx1['filterBy'](_0x9f6cx5, _0x9f6cx2)['getRange']())
	}
	, clearHighlightedEvents: function () {
		Ext['Array']['each'](this['getEventStore']()['getRange'](), function (_0x9f6cx1) {
			_0x9f6cx1['isHighlighted'] = false
		});
		this['getEl']()['select']('.' + this['highlightedEventCls'])['removeCls'](this['highlightedEventCls'])
	}
	, onEventCreated: function (_0x9f6cx1, _0x9f6cx2) {}
	, getEventStore: function () {
		return this['eventStore']
	}
	, registerEventEditor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['eventEditor'] = _0x9f6cx1;
		_0x9f6cx2['mon'](_0x9f6cx1['editor'] || _0x9f6cx1, {
			beforeeventadd: function () {
				var _0x9f6cx5 = Ext['Array']['toArray'](arguments);
				Ext['Array']['splice'](_0x9f6cx5, 0, 1, _0x9f6cx2);
				return _0x9f6cx2['fireEventArgs']['call'](_0x9f6cx2, 'beforeeventadd', _0x9f6cx5)
			}
		})
	}
	, getEventEditor: function () {
		return this['eventEditor']
	}
	, onEventUpdate: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		this[this['mode']]['onEventUpdate'](_0x9f6cx2, _0x9f6cx5, _0x9f6cx1)
	}
	, onEventAdd: function (_0x9f6cx1, _0x9f6cx2) {
		if (!Ext['isArray'](_0x9f6cx2)) {
			_0x9f6cx2 = [_0x9f6cx2]
		};
		this[this['mode']]['onEventAdd'](_0x9f6cx1, _0x9f6cx2)
	}
	, onAssignmentAdd: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cx4) {
			var _0x9f6cx3 = _0x9f6cx4['getResource']();
			_0x9f6cx3 && _0x9f6cx5['repaintEventsForResource'](_0x9f6cx3)
		})
	}
	, onAssignmentUpdate: function (_0x9f6cx3, _0x9f6cx6) {
		var _0x9f6cx7 = this
			, _0x9f6cx1 = _0x9f6cx6['previous'] && _0x9f6cx6['previous'][_0x9f6cx6['resourceIdField']]
			, _0x9f6cx4 = _0x9f6cx6['getResourceId']()
			, _0x9f6cx2, _0x9f6cx5;
		if (_0x9f6cx1) {
			_0x9f6cx2 = _0x9f6cx7['getResourceStore']()['getModelById'](_0x9f6cx1);
			_0x9f6cx7['repaintEventsForResource'](_0x9f6cx2)
		};
		if (_0x9f6cx4) {
			_0x9f6cx5 = _0x9f6cx7['getResourceStore']()['getModelById'](_0x9f6cx4);
			_0x9f6cx7['repaintEventsForResource'](_0x9f6cx5)
		}
	}
	, onAssignmentRemove: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cx4) {
			var _0x9f6cx7 = _0x9f6cx4['getResourceId']();
			var _0x9f6cx3 = _0x9f6cx7 && _0x9f6cx5['getResourceStore']()['getModelById'](_0x9f6cx7);
			_0x9f6cx3 && _0x9f6cx5['repaintEventsForResource'](_0x9f6cx3)
		})
	}
	, onEventRemove: function (_0x9f6cx1, _0x9f6cx2) {
		this[this['mode']]['onEventRemove'](_0x9f6cx1, _0x9f6cx2)
	}
	, setEventStore: function (_0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx7 = this;
		var _0x9f6cx8 = _0x9f6cx7['getEventStore']();
		var _0x9f6cx1 = {
			scope: _0x9f6cx7
			, refresh: _0x9f6cx7['onEventDataRefresh']
			, addrecords: _0x9f6cx7['onEventAdd']
			, updaterecord: _0x9f6cx7['onEventUpdate']
			, removerecords: _0x9f6cx7['onEventRemove']
			, update: _0x9f6cx7['onEventUpdate']
			, nodeinsert: _0x9f6cx7['onEventAdd']
			, nodeappend: _0x9f6cx7['onEventAdd']
		};
		if (!Ext['data']['TreeStore'] || !(_0x9f6cx3 instanceof Ext['data']['TreeStore'])) {
			_0x9f6cx1['remove'] = _0x9f6cx7['onEventRemove'];
			_0x9f6cx1['add'] = _0x9f6cx7['onEventAdd']
		};
		var _0x9f6cx5 = {
			scope: _0x9f6cx7
			, refresh: _0x9f6cx7['onEventDataRefresh']
			, load: _0x9f6cx7['onEventDataRefresh']
			, update: _0x9f6cx7['onAssignmentUpdate']
			, add: _0x9f6cx7['onAssignmentAdd']
			, remove: _0x9f6cx7['onAssignmentRemove']
		};
		if (!Ext['versions']['touch']) {
			_0x9f6cx1['clear'] = _0x9f6cx7['onEventDataRefresh']
		};
		if (!_0x9f6cx2 && _0x9f6cx7['eventStore']) {
			_0x9f6cx7['eventStore']['setResourceStore'](null);
			if (_0x9f6cx3 !== _0x9f6cx7['eventStore'] && _0x9f6cx7['eventStore']['autoDestroy']) {
				_0x9f6cx7['eventStore']['destroy']()
			}
			else {
				if (_0x9f6cx7['mun']) {
					_0x9f6cx7['mun'](_0x9f6cx7['eventStore'], _0x9f6cx1);
					var _0x9f6cx4 = _0x9f6cx7['eventStore']['getAssignmentStore']();
					if (_0x9f6cx4) {
						_0x9f6cx7['mun'](_0x9f6cx4, _0x9f6cx5)
					}
				}
				else {
					_0x9f6cx7['eventStore']['un'](_0x9f6cx1)
				}
			};
			if (!_0x9f6cx3) {
				_0x9f6cx7['eventStore'] = null
			}
		};
		if (_0x9f6cx3) {
			_0x9f6cx3 = Ext['data']['StoreManager']['lookup'](_0x9f6cx3);
			if (_0x9f6cx7['mon']) {
				_0x9f6cx7['mon'](_0x9f6cx3, _0x9f6cx1)
			}
			else {
				_0x9f6cx3['on'](_0x9f6cx1)
			};
			_0x9f6cx7['eventStore'] = _0x9f6cx3;
			_0x9f6cx3['setResourceStore'](_0x9f6cx7['getResourceStore']());
			var _0x9f6cx6 = _0x9f6cx3['getAssignmentStore']();
			if (_0x9f6cx6) {
				_0x9f6cx7['mon'](_0x9f6cx6, _0x9f6cx5)
			}
		};
		if (_0x9f6cx3 && !_0x9f6cx2) {
			this['getTimeAxisViewModel']()['setEventStore'](_0x9f6cx3);
			this['getEventSelectionModel']()['bindStore'](_0x9f6cx3);
			this['fireEvent']('eventstorechange', this, _0x9f6cx3, _0x9f6cx8);
			_0x9f6cx7['refreshView']()
		}
	}
	, onEventDataRefresh: function () {
		this['refreshKeepingScroll']()
	}
	, onEventBarSelect: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx2, _0x9f6cx3;
		if (_0x9f6cx1 instanceof Ext.ux.Scheduler['model']['Assignment']) {
			_0x9f6cx2 = _0x9f6cx1['getEvent']();
			_0x9f6cx3 = _0x9f6cx1['getResource']()
		}
		else {
			_0x9f6cx2 = _0x9f6cx1;
			_0x9f6cx3 = null
		};
		Ext['Array']['each'](_0x9f6cx5['getElementsFromEventRecord'](_0x9f6cx2, _0x9f6cx3, null, true), function (_0x9f6cx4) {
			Ext['fly'](_0x9f6cx4)['addCls'](_0x9f6cx5['selectedEventCls'])
		})
	}
	, onEventBarDeselect: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx2, _0x9f6cx3;
		if (_0x9f6cx1 instanceof Ext.ux.Scheduler['model']['Assignment']) {
			_0x9f6cx2 = _0x9f6cx1['getEvent']();
			_0x9f6cx3 = _0x9f6cx1['getResource']()
		}
		else {
			_0x9f6cx2 = _0x9f6cx1;
			_0x9f6cx3 = null
		};
		_0x9f6cx2 && Ext['Array']['each'](_0x9f6cx5['getElementsFromEventRecord'](_0x9f6cx2, _0x9f6cx3, null, true), function (_0x9f6cx4) {
			Ext['fly'](_0x9f6cx4)['removeCls'](_0x9f6cx5['selectedEventCls'])
		})
	}
	, refresh: function () {
		throw 'Abstract method call'
	}
	, repaintEventsForResource: function (_0x9f6cx1) {
		throw 'Abstract method call'
	}
	, repaintAllEvents: function () {
		this['refreshKeepingScroll']()
	}
	, scrollEventIntoView: function (_0x9f6cx7, _0x9f6cx2, _0x9f6cx1, _0x9f6cx6, _0x9f6cx5) {
		var _0x9f6cx3 = this
			, _0x9f6cx4 = _0x9f6cx7['getResources']();
		if (_0x9f6cx4['length'] > 1) {
			Ext['Error']['raise']('AbstractSchedulerView::scrollEventIntoView() is not applicable for events with multiple assignments, please use AbstractSchedulerView::scrollResourceEventIntoView() instead.')
		};
		_0x9f6cx4['length'] && _0x9f6cx3['scrollResourceEventIntoView'](_0x9f6cx4[0], _0x9f6cx7, null, _0x9f6cx2, _0x9f6cx1, _0x9f6cx6, _0x9f6cx5)
	}
	, getResourceStore: function () {
		return this['resourceStore']
	}
	, setResourceStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['resourceStore'];
		this['resourceStore'] = _0x9f6cx1;
		if (_0x9f6cx1) {
			this['fireEvent']('resourcestorechange', this, _0x9f6cx1, _0x9f6cx2)
		}
	}
});
Ext.define('Ext.ux.Scheduler.tooltip.ClockTemplate', {
	extend: 'Ext.XTemplate'
	, minuteHeight: 8
	, minuteTop: 2
	, hourHeight: 8
	, hourTop: 2
	, handLeft: 10
	, mode: 'hour'
	, getRotateStyle: function (_0x9f6cx1) {
		return 'transform:rotate(Ddeg);-ms-transform:rotate(Ddeg);-moz-transform: rotate(Ddeg);-webkit-transform: rotate(Ddeg);-o-transform:rotate(Ddeg);'['replace'](/D/g, _0x9f6cx1)
	}
	, getRotateStyleIE: (function () {
		var _0x9f6cx5 = Math['PI'] / 180
			, _0x9f6cx2 = Math['cos']
			, _0x9f6cx1 = Math['sin'];
		return function (_0x9f6cx3, _0x9f6cxc, _0x9f6cxe) {
			var _0x9f6cx6 = this
				, _0x9f6cx8 = _0x9f6cx3 * _0x9f6cx5
				, _0x9f6cx7 = _0x9f6cx2(_0x9f6cx8)
				, _0x9f6cx13 = _0x9f6cx1(_0x9f6cx8)
				, _0x9f6cx9 = _0x9f6cxe * _0x9f6cx1((90 - _0x9f6cx3) * _0x9f6cx5)
				, _0x9f6cxa = _0x9f6cxe * _0x9f6cx2((90 - _0x9f6cx3) * _0x9f6cx5)
				, _0x9f6cxb = Math['min'](_0x9f6cxe, _0x9f6cxe - _0x9f6cx9)
				, _0x9f6cx4 = _0x9f6cx3 > 180 ? _0x9f6cxa : 0
				, _0x9f6cxd = 'progid:DXImageTransform.Microsoft.Matrix(sizingMethod=\'auto expand\', M11 = ' + _0x9f6cx7 + ', M12 = ' + (-_0x9f6cx13) + ', M21 = ' + _0x9f6cx13 + ', M22 = ' + _0x9f6cx7 + ')';
			return Ext['String']['format']('filter:{0};-ms-filter:{0};top:{1}px;left:{2}px;', _0x9f6cxd, _0x9f6cxb + _0x9f6cxc, _0x9f6cx4 + _0x9f6cx6['handLeft'])
		}
	})()
	, constructor: function () {
		var _0x9f6cx1 = Ext['isIE'] && Ext['isIE8m'];
		this['callParent'](['<div class="sch-clockwrap ' + (_0x9f6cx1 ? '' : 'sch-supports-border-radius') + ' sch-clock-{[this.mode]}"><div class="sch-clock"><div class="sch-hourIndicator" style="{[this.getHourStyle((values.date.getHours() % 12) * 30,' + this['hourTop'] + ', + ' + this['hourHeight'] + ')]}">{[Ext.Date.monthNames[values.date.getMonth()].substr(0,3)]}</div><div class="sch-minuteIndicator" style="{[this.getMinuteStyle(values.date.getMinutes() * 6,' + this['minuteTop'] + ', + ' + this['minuteHeight'] + ')]}">{[values.date.getDate()]}</div>' + (_0x9f6cx1 ? '' : '<div class="sch-clock-dot"></div>') + '</div><span class="sch-clock-text">{text}</span></div>', {
			getMinuteStyle: _0x9f6cx1 ? this['getRotateStyleIE'] : this['getRotateStyle']
			, getHourStyle: _0x9f6cx1 ? this['getRotateStyleIE'] : this['getRotateStyle']
		}])
	}
});
Ext.define('Ext.ux.Scheduler.tooltip.Tooltip', {
	extend: 'Ext.tip.ToolTip'
	, requires: ['Ext.ux.Scheduler.tooltip.ClockTemplate']
	, autoHide: false
	, anchor: 'b'
	, padding: '0 3 0 0'
	, showDelay: 0
	, hideDelay: 0
	, quickShowInterval: 0
	, dismissDelay: 0
	, trackMouse: false
	, anchorOffset: 5
	, shadow: false
	, frame: false
	, schedulerView: null
	, message: null
	, startDate: null
	, endDate: null
	, template: null
	, valid: true
	, mode: null
	, offsetAdjust: [18, 5]
	, constructor: function (_0x9f6cx2) {
		var _0x9f6cx1 = new Ext.ux.Scheduler['tooltip'].ClockTemplate();
		this['startDate'] = this['endDate'] = new Date();
		if (!this['template']) {
			this['template'] = Ext['create']('Ext.XTemplate', '<div class="' + Ext['baseCSSPrefix'] + 'fa sch-tip-{[values.valid ? "ok fa-check" : "notok fa-ban"]} ">{[this.renderClock(values.startDate, values.startText, "sch-tooltip-startdate")]}{[this.renderClock(values.endDate, values.endText, "sch-tooltip-enddate")]}<div class="sch-tip-message">{message}</div></div>', {
				renderClock: function (_0x9f6cx3, _0x9f6cx4, _0x9f6cx5) {
					return _0x9f6cx1['apply']({
						date: _0x9f6cx3
						, text: _0x9f6cx4
						, cls: _0x9f6cx5
					})
				}
			})
		};
		this['callParent'](arguments)
	}
	, update: function (_0x9f6cx1, _0x9f6cx7, _0x9f6cx4, _0x9f6cx3) {
		if (this['startDate'] - _0x9f6cx1 !== 0 || this['endDate'] - _0x9f6cx7 !== 0 || this['valid'] !== _0x9f6cx4 || this['message'] !== _0x9f6cx3) {
			this['startDate'] = _0x9f6cx1;
			this['endDate'] = _0x9f6cx7;
			this['valid'] = _0x9f6cx4;
			this['message'] = _0x9f6cx3;
			var _0x9f6cx5 = this['schedulerView']['getFormattedDate'](_0x9f6cx1)
				, _0x9f6cx2 = this['schedulerView']['getFormattedEndDate'](_0x9f6cx7, _0x9f6cx1);
			if (this['mode'] === 'calendar' && _0x9f6cx7['getHours']() === 0 && _0x9f6cx7['getMinutes']() === 0 && !(_0x9f6cx7['getYear']() === _0x9f6cx1['getYear']() && _0x9f6cx7['getMonth']() === _0x9f6cx1['getMonth']() && _0x9f6cx7['getDate']() === _0x9f6cx1['getDate']())) {
				_0x9f6cx7 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx7, Ext.ux.Scheduler['util']['Date'].DAY, -1)
			};
			this['callParent']([this['template']['apply']({
				valid: _0x9f6cx4
				, startDate: _0x9f6cx1
				, endDate: _0x9f6cx7
				, startText: _0x9f6cx5
				, endText: _0x9f6cx2
				, message: _0x9f6cx3
			})])
		};
		if (this['rendered'] && this['isVisible']()) {
			if (Ext['getVersion']()['isGreaterThan']('6.2.1')) {
				this['realignToTarget']()
			}
			else {
				this['realign']()
			}
		}
	}
	, showForElement: function (_0x9f6cx2, _0x9f6cx1) {
		if (Ext.ux.Scheduler['util']['Date']['compareUnits'](this['schedulerView']['getTimeResolution']()['unit'], Ext.ux.Scheduler['util']['Date'].DAY) >= 0) {
			this['mode'] = 'calendar';
			this['addCls']('sch-day-resolution');
			this['removeCls']('sch-hour-resolution')
		}
		else {
			this['mode'] = 'clock';
			this['removeCls']('sch-day-resolution');
			this['addCls']('sch-hour-resolution')
		};
		_0x9f6cx1 = arguments['length'] > 1 ? _0x9f6cx1 : this['offsetAdjust'][0];
		this['mouseOffsets'] = [_0x9f6cx1 - this['offsetAdjust'][0], -this['offsetAdjust'][1]];
		this['setTarget'](_0x9f6cx2);
		this['show']();
		this['realign']()
	}
	, realign: function () {
		this['alignTo'](this['target'], 'bl-tl?', this['mouseOffsets'])
	}
	, afterRender: function () {
		this['callParent'](arguments);
		this['el']['on']('mouseenter', this['realign'], this)
	}
});
Ext.define('Ext.ux.Scheduler.tooltip.HoverTip', {
	extend: 'Ext.tip.ToolTip'
	, alias: 'widget.scheduler_hovertip'
	, requires: ['Ext.ux.Scheduler.tooltip.ClockTemplate']
	, trackMouse: true
	, bodyCls: 'sch-hovertip'
	, messageTpl: '<div class="sch-hovertip-msg">{message}</div>'
	, autoHide: false
	, dismissDelay: 1000
	, showDelay: 0
	, schedulerView: null
	, clockTpl: null
	, lastTime: null
	, lastResource: null
	, initComponent: function () {
		var _0x9f6cx2 = this;
		var _0x9f6cx1 = _0x9f6cx2['schedulerView'];
		_0x9f6cx2['clockTpl'] = new Ext.ux.Scheduler['tooltip'].ClockTemplate();
		_0x9f6cx2['messageTpl'] = new Ext.XTemplate(_0x9f6cx2['messageTpl']);
		_0x9f6cx2['callParent'](arguments);
		_0x9f6cx2['on']('beforeshow', _0x9f6cx2['tipOnBeforeShow'], _0x9f6cx2);
		_0x9f6cx1['mon'](_0x9f6cx1['el'], {
			mouseleave: function () {
				_0x9f6cx2['hide']()
			}
			, mousemove: _0x9f6cx2['handleMouseMove']
			, scope: _0x9f6cx2
		});
		_0x9f6cx1['mon'](_0x9f6cx1['el'], {
			click: _0x9f6cx2['onBodyMouseDown']
			, scope: _0x9f6cx2
			, delay: 1
		})
	}
	, onBodyMouseDown: function () {
		this['hide']()
	}
	, handleMouseMove: function (_0x9f6cx7) {
		var _0x9f6cx5 = this;
		var _0x9f6cx1 = _0x9f6cx5['schedulerView'];
		if (_0x9f6cx5['disabled']) {
			return
		};
		if (_0x9f6cx7['getTarget']('.' + _0x9f6cx1['itemCls'], 5) && !_0x9f6cx7['getTarget'](_0x9f6cx1['eventSelector'])) {
			var _0x9f6cx3 = _0x9f6cx1['getDateFromDomEvent'](_0x9f6cx7, 'floor');
			if (_0x9f6cx3) {
				var _0x9f6cx2 = _0x9f6cx1['resolveResource'](_0x9f6cx7['getTarget']());
				if (_0x9f6cx3 - _0x9f6cx5['lastTime'] !== 0 || _0x9f6cx2 !== _0x9f6cx5['lastResource']) {
					_0x9f6cx5['lastResource'] = _0x9f6cx2;
					if (_0x9f6cx5['hidden']) {
						if (Ext.ux.Scheduler['util']['Date']['compareUnits'](this['schedulerView']['getTimeResolution']()['unit'], Ext.ux.Scheduler['util']['Date'].DAY) >= 0) {
							_0x9f6cx5['clockTpl']['mode'] = 'day'
						}
						else {
							_0x9f6cx5['clockTpl']['mode'] = 'hour'
						};
						_0x9f6cx5['show']()
					};
					_0x9f6cx5['updateHoverTip'](_0x9f6cx3, _0x9f6cx7)
				}
			}
			else {
				_0x9f6cx5['hide']();
				_0x9f6cx5['lastTime'] = null;
				_0x9f6cx5['lastResource'] = null
			}
		}
		else {
			_0x9f6cx5['hide']();
			_0x9f6cx5['lastTime'] = null;
			_0x9f6cx5['lastResource'] = null
		}
	}
	, getText: function () {}
	, updateHoverTip: function (_0x9f6cx5, _0x9f6cx3) {
		if (_0x9f6cx5) {
			var _0x9f6cx2 = this['clockTpl']['apply']({
				date: _0x9f6cx5
				, text: this['schedulerView']['getFormattedDate'](_0x9f6cx5)
			});
			var _0x9f6cx1 = this['messageTpl']['apply']({
				message: this['getText'](_0x9f6cx5, _0x9f6cx3)
			});
			this['update'](_0x9f6cx2 + _0x9f6cx1);
			this['lastTime'] = _0x9f6cx5
		}
	}
	, tipOnBeforeShow: function (_0x9f6cx1) {
		return !this['disabled'] && this['lastTime'] !== null
	}
});
Ext.define('Ext.ux.Scheduler.feature.DragCreator', {
	requires: ['Ext.XTemplate', 'Ext.ToolTip', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.util.ScrollManager', 'Ext.ux.Scheduler.util.DragTracker', 'Ext.ux.Scheduler.tooltip.Tooltip', 'Ext.ux.Scheduler.tooltip.HoverTip']
	, disabled: false
	, showHoverTip: true
	, showDragTip: true
	, dragTip: null
	, dragTolerance: 2
	, hoverTip: null
	, validatorFn: Ext['emptyFn']
	, validatorFnScope: null
	, trackerConfig: null
	, schedulerView: null
	, template: '<div class="sch-dragcreator-proxy"><div class="sch-event-inner">&#160;</div></div>'
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1 || {});
		this['lastTime'] = new Date();
		if (!(this['template'] instanceof Ext['Template'])) {
			this['template'] = new Ext.Template(this['template'])
		};
		this['schedulerView']['on']('destroy', this['onSchedulerDestroy'], this);
		if (Ext['supports']['Touch']) {
			this['schedulerView']['on']('boxready', this['initDragTracker'], this)
		}
		else {
			this['schedulerView']['el']['on']('mousemove', this['initDragTracker'], this, {
				single: true
			})
		};
		this['callParent']([_0x9f6cx1])
	}
	, setDisabled: function (_0x9f6cx1) {
		this['disabled'] = _0x9f6cx1;
		if (this['hoverTip'] && this['hoverTip']['setDisabled']) {
			this['hoverTip']['setDisabled'](_0x9f6cx1)
		};
		if (this['dragTip'] && this['dragTip']['setDisabled']) {
			this['dragTip']['setDisabled'](_0x9f6cx1)
		}
	}
	, getProxy: function () {
		if (!this['proxy']) {
			this['proxy'] = this['template']['append'](this['schedulerView']['getEl'](), {}, true);
			this['proxy']['hide'] = function () {
				this['setStyle']({
					left: 0
					, right: 0
					, top: '-10000px'
				})
			}
		};
		return this['proxy']
	}
	, onBeforeDragStart: function (_0x9f6cx3, _0x9f6cx6) {
		var _0x9f6cx2 = this['schedulerView']
			, _0x9f6cx1 = _0x9f6cx6['getTarget']('.' + _0x9f6cx2['timeCellCls'], 5);
		if (_0x9f6cx1 && this['isCreateAllowed'](_0x9f6cx6) && (!_0x9f6cx6['event']['touches'] || _0x9f6cx6['event']['touches']['length'] === 1)) {
			var _0x9f6cx5 = _0x9f6cx2['resolveResource'](_0x9f6cx1);
			var _0x9f6cx7 = _0x9f6cx2['getDateFromDomEvent'](_0x9f6cx6);
			if (!this['disabled'] && _0x9f6cx1 && _0x9f6cx2['fireEvent']('beforedragcreate', _0x9f6cx2, _0x9f6cx5, _0x9f6cx7, _0x9f6cx6) !== false) {
				this['resourceRecord'] = _0x9f6cx5;
				this['originalStart'] = _0x9f6cx7;
				this['resourceRegion'] = _0x9f6cx2['getScheduleRegion'](this['resourceRecord'], this['originalStart']);
				this['dateConstraints'] = _0x9f6cx2['getDateConstraints'](this['resourceRecord'], this['originalStart']);
				return true
			}
		};
		return false
	}
	, isCreateAllowed: function (_0x9f6cx1) {
		return !_0x9f6cx1['getTarget'](this['schedulerView']['eventSelector'])
	}
	, disableHoverTip: function () {
		this['hoverTip'] && this['hoverTip']['disable'] && this['hoverTip']['disable']()
	}
	, onDragStart: function () {
		var _0x9f6cx3 = this
			, _0x9f6cx2 = _0x9f6cx3['schedulerView']
			, _0x9f6cx1 = _0x9f6cx3['tracker']['getRegion']()
			, _0x9f6cx5 = _0x9f6cx3['getProxy']();
		this['dragging'] = true;
		if (this['hoverTip']) {
			this['hoverTip']['on']('enable', this['disableHoverTip'], this);
			this['hoverTip']['disable']()
		};
		_0x9f6cx3['start'] = _0x9f6cx3['originalStart'];
		_0x9f6cx3['end'] = _0x9f6cx3['start'];
		_0x9f6cx3['originalScroll'] = _0x9f6cx2['getScroll']();
		if (_0x9f6cx2['isHorizontal']()) {
			_0x9f6cx3['rowBoundaries'] = {
				top: _0x9f6cx3['resourceRegion']['top']
				, bottom: _0x9f6cx3['resourceRegion']['bottom']
			}
		}
		else {
			_0x9f6cx3['rowBoundaries'] = {
				left: _0x9f6cx3['resourceRegion']['left']
				, right: _0x9f6cx3['resourceRegion']['right']
			}
		};
		Ext['apply'](_0x9f6cx1, _0x9f6cx3['rowBoundaries']);
		if (_0x9f6cx2['rtl']) {
			_0x9f6cx5['setStyle']({
				right: 'auto'
			})
		};
		_0x9f6cx5['setBox'](_0x9f6cx1);
		_0x9f6cx5['show']();
		_0x9f6cx2['fireEvent']('dragcreatestart', _0x9f6cx2, _0x9f6cx5);
		if (_0x9f6cx3['showDragTip']) {
			_0x9f6cx3['dragTip']['enable']();
			_0x9f6cx3['dragTip']['update'](_0x9f6cx3['start'], _0x9f6cx3['end'], true);
			_0x9f6cx3['dragTip']['showForElement'](_0x9f6cx5);
			_0x9f6cx3['dragTip']['setStyle']('visibility', 'visible')
		};
		Ext.ux.Scheduler['util']['ScrollManager']['activate'](_0x9f6cx2, _0x9f6cx2['isHorizontal']() ? 'horizontal' : 'vertical')
	}
	, onDrag: function () {
		var _0x9f6cx6 = this
			, _0x9f6cx3 = _0x9f6cx6['schedulerView']
			, _0x9f6cx5 = _0x9f6cx6['tracker']['getRegion']()
			, _0x9f6cx8 = _0x9f6cx3['getStartEndDatesFromRegion'](_0x9f6cx5, 'round')
			, _0x9f6cx7 = '';
		if (!_0x9f6cx8) {
			return
		};
		_0x9f6cx6['start'] = _0x9f6cx8['start'] || _0x9f6cx6['start'];
		_0x9f6cx6['end'] = _0x9f6cx8['end'] || _0x9f6cx6['end'];
		var _0x9f6cx2 = _0x9f6cx6['dateConstraints'];
		if (_0x9f6cx2) {
			_0x9f6cx6['end'] = Ext.ux.Scheduler['util']['Date']['constrain'](_0x9f6cx6['end'], _0x9f6cx2['start'], _0x9f6cx2['end']);
			_0x9f6cx6['start'] = Ext.ux.Scheduler['util']['Date']['constrain'](_0x9f6cx6['start'], _0x9f6cx2['start'], _0x9f6cx2['end'])
		};
		_0x9f6cx6['valid'] = this['validatorFn']['call'](_0x9f6cx6['validatorFnScope'] || _0x9f6cx6, _0x9f6cx6['resourceRecord'], _0x9f6cx6['start'], _0x9f6cx6['end']);
		if (_0x9f6cx6['valid'] && typeof _0x9f6cx6['valid'] !== 'boolean') {
			_0x9f6cx7 = _0x9f6cx6['valid']['message'];
			_0x9f6cx6['valid'] = _0x9f6cx6['valid']['valid']
		};
		_0x9f6cx6['valid'] = (_0x9f6cx6['valid'] !== false);
		if (_0x9f6cx6['showDragTip']) {
			_0x9f6cx6['dragTip']['update'](_0x9f6cx6['start'], _0x9f6cx6['end'], _0x9f6cx6['valid'], _0x9f6cx7)
		};
		Ext['apply'](_0x9f6cx5, _0x9f6cx6['rowBoundaries']);
		var _0x9f6cx1 = _0x9f6cx3['getScroll']();
		var _0x9f6cx4 = this['getProxy']();
		_0x9f6cx4['setBox'](_0x9f6cx5);
		if (_0x9f6cx3['isHorizontal']()) {
			_0x9f6cx4['setY'](_0x9f6cx6['resourceRegion']['top'] + _0x9f6cx6['originalScroll']['top'] - _0x9f6cx1['top'])
		}
	}
	, eventSwallower: function (_0x9f6cx1) {
		_0x9f6cx1['stopPropagation']();
		_0x9f6cx1['preventDefault']()
	}
	, onDragEnd: function (_0x9f6cx8, _0x9f6cx9) {
		var _0x9f6cx6 = this
			, _0x9f6cx3 = _0x9f6cx6['schedulerView']
			, _0x9f6cx7 = true
			, _0x9f6cx1 = _0x9f6cx9['getTarget']()
			, _0x9f6cx5 = Ext['get'](_0x9f6cx1);
		_0x9f6cx5['on']('click', this['eventSwallower']);
		_0x9f6cx6['unbindTimer'] = setTimeout(function () {
			_0x9f6cx5['un']('click', _0x9f6cx6['eventSwallower'])
		}, 100);
		_0x9f6cx6['dragging'] = false;
		if (_0x9f6cx6['showDragTip']) {
			_0x9f6cx6['dragTip']['disable']()
		};
		if (!_0x9f6cx6['start'] || !_0x9f6cx6['end'] || (_0x9f6cx6['end'] - _0x9f6cx6['start'] <= 0)) {
			_0x9f6cx6['valid'] = false
		};
		var _0x9f6cx2 = {
			start: _0x9f6cx6['start']
			, end: _0x9f6cx6['end']
			, resourceRecord: _0x9f6cx6['resourceRecord']
			, e: _0x9f6cx9
			, finalize: function (_0x9f6cx4) {
				_0x9f6cx6['finalize'](_0x9f6cx4, _0x9f6cx2)
			}
		};
		if (_0x9f6cx6['valid']) {
			_0x9f6cx7 = _0x9f6cx3['fireEvent']('beforedragcreatefinalize', _0x9f6cx6['schedulerView'], _0x9f6cx2, _0x9f6cx9, this['getProxy']()) !== false
		};
		if (_0x9f6cx7) {
			_0x9f6cx6['finalize'](_0x9f6cx6['valid'], _0x9f6cx2)
		};
		Ext.ux.Scheduler['util']['ScrollManager']['deactivate']()
	}
	, finalize: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx3 = this['schedulerView'];
		if (_0x9f6cx1) {
			var _0x9f6cx5 = Ext['create'](_0x9f6cx3['getEventStore']()['getModel']());
			if (_0x9f6cx5['setCalendar']) {
				_0x9f6cx5['setCalendar'](_0x9f6cx3['getEventStore']()['getCalendar']())
			};
			_0x9f6cx5['setStartEndDate'](_0x9f6cx2['start'], _0x9f6cx2['end']);
			if (_0x9f6cx5['setCalendar']) {
				_0x9f6cx5['setCalendar'](null)
			};
			_0x9f6cx3['fireEvent']('dragcreateend', _0x9f6cx3, _0x9f6cx5, _0x9f6cx2['resourceRecord'], _0x9f6cx2['e'], this['getProxy']())
		};
		this['proxy']['hide']();
		this['schedulerView']['fireEvent']('afterdragcreate', _0x9f6cx3, this['getProxy']());
		if (this['hoverTip']) {
			this['hoverTip']['un']('enable', this['disableHoverTip'], this);
			this['hoverTip']['enable']()
		}
	}
	, dragging: false
	, initDragTracker: function () {
		var _0x9f6cx3 = this
			, _0x9f6cx2 = Ext['supports']['Touch']
			, _0x9f6cx1 = _0x9f6cx3['schedulerView'];
		var _0x9f6cx5 = Ext['apply']({
			el: _0x9f6cx1['el']
			, rtl: _0x9f6cx1['rtl']
			, tolerance: _0x9f6cx3['dragTolerance']
			, listeners: {
				mousedown: _0x9f6cx3['verifyLeftButtonPressed']
				, beforedragstart: _0x9f6cx3['onBeforeDragStart']
				, dragstart: _0x9f6cx3['onDragStart']
				, drag: _0x9f6cx3['onDrag']
				, dragend: _0x9f6cx3['onDragEnd']
				, scope: _0x9f6cx3
			}
		}, this['trackerConfig']);
		this['bindRightClickPreventer']();
		if (_0x9f6cx2) {
			this['showDragTip'] = false;
			this['showHoverTip'] = false;
			this['dragTip'] = null;
			this['hoverTip'] = null
		}
		else {
			this['setupTooltips']()
		};
		_0x9f6cx3['tracker'] = new Ext.ux.Scheduler['util'].DragTracker(_0x9f6cx5)
	}
	, bindRightClickPreventer: function () {
		var _0x9f6cx1;
		if (Ext['isIE9m']) {
			_0x9f6cx1 = 'mousedown'
		}
		else {
			_0x9f6cx1 = 'contextmenu'
		};
		this['schedulerView']['el']['on'](_0x9f6cx1, this['stopDragCreateOnRightClick'], this, {
			priority: 999
		})
	}
	, stopDragCreateOnRightClick: function (_0x9f6cx1) {
		if (_0x9f6cx1['button'] !== 0 && this['dragging']) {
			this['tracker']['onMouseUp'](_0x9f6cx1)
		}
	}
	, setupTooltips: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['schedulerView'];
		if (this['showDragTip']) {
			var _0x9f6cx2 = this['dragTip'];
			if (_0x9f6cx2 instanceof Ext['tip']['ToolTip']) {
				_0x9f6cx2['schedulerView'] = _0x9f6cx1;
				_0x9f6cx2['on']('beforeshow', function () {
					return _0x9f6cx5['dragging']
				})
			}
			else {
				this['dragTip'] = new Ext.ux.Scheduler['tooltip'].Tooltip(Ext['apply']({
					cls: 'sch-dragcreate-tip'
					, schedulerView: _0x9f6cx1
					, constrainTo: _0x9f6cx1['up']('grid')['el']
					, listeners: {
						beforeshow: function () {
							return _0x9f6cx5['dragging']
						}
					}
				}, _0x9f6cx2))
			}
		};
		if (_0x9f6cx5['showHoverTip']) {
			var _0x9f6cx3 = _0x9f6cx5['hoverTip'];
			if (_0x9f6cx3 instanceof Ext['tip']['ToolTip']) {
				_0x9f6cx3['schedulerView'] = _0x9f6cx1
			}
			else {
				_0x9f6cx5['hoverTip'] = Ext['ComponentManager']['create'](Ext['applyIf']({
					renderTo: Ext['getBody']()
					, target: _0x9f6cx1['el']
					, schedulerView: _0x9f6cx1
				}, _0x9f6cx3), 'scheduler_hovertip')
			}
		}
	}
	, verifyLeftButtonPressed: function (_0x9f6cx1, _0x9f6cx2) {
		return _0x9f6cx2['button'] === 0
	}
	, onSchedulerDestroy: function () {
		if (this['hoverTip'] && this['hoverTip']['destroy']) {
			this['hoverTip']['destroy']()
		};
		if (this['dragTip'] && this['dragTip']['destroy']) {
			this['dragTip']['destroy']()
		};
		if (this['tracker']) {
			this['tracker']['destroy']()
		};
		if (this['proxy']) {
			Ext['destroy'](this['proxy']);
			this['proxy'] = null
		};
		clearTimeout(this['unbindTimer'])
	}
});
Ext.define('Ext.ux.Scheduler.feature.SchedulerDragZone', {
	extend: 'Ext.dd.DragZone'
	, requires: ['Ext.dd.StatusProxy', 'Ext.ux.Scheduler.tooltip.Tooltip']
	, uses: ['Ext.ux.Scheduler.patches.DragZone']
	, repairHighlight: false
	, repairHighlightColor: 'transparent'
	, containerScroll: false
	, showTooltip: true
	, tip: null
	, deltaSetXY: null
	, schedulerView: null
	, _onValidDropTimer: null
	, lastXY: null
	, showExactDropPosition: false
	, enableCopy: false
	, enableCopyKey: 'SHIFT'
	, validatorFn: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5, _0x9f6cx7, _0x9f6cx3) {
		return true
	}
	, validatorFnScope: null
	, copyKeyPressed: false
	, dragDropProxyCls: 'sch-dd-ref'
	, invalidCssClasses: ['sch-resizable-handle', 'sch-terminal']
	, constructor: function (_0x9f6cx5, _0x9f6cx1) {
		if (Ext['isIE8m'] && window['top'] !== window) {
			Ext['dd']['DragDropManager']['notifyOccluded'] = true
		};
		var _0x9f6cx2 = this['proxy'] = this['proxy'] || new Ext['dd'].StatusProxy({
			shadow: false
			, dropAllowed: this['dropAllowed']
			, dropNotAllowed: this['dropNotAllowed']
			, ensureAttachedToBody: Ext['emptyFn']
		});
		this['callParent'](arguments);
		this['isTarget'] = true;
		this['scroll'] = false;
		this['ignoreSelf'] = false;
		var _0x9f6cx4 = this['schedulerView'];
		Ext['Array']['each'](this['invalidCssClasses'], this['addInvalidHandleClass'], this);
		if (_0x9f6cx4['touchScroll']) {
			this['showTooltip'] = false
		};
		_0x9f6cx4['el']['appendChild'](_0x9f6cx2['el']);
		this['bindRightClickPreventer']();
		_0x9f6cx2['addCls']('sch-dragproxy');
		_0x9f6cx4['on']({
			eventdragstart: function () {
				Ext.ux.Scheduler['util']['ScrollManager']['activate'](_0x9f6cx4, _0x9f6cx4['constrainDragToResource'] && _0x9f6cx4['getMode']())
			}
			, aftereventdrop: function () {
				Ext.ux.Scheduler['util']['ScrollManager']['deactivate']()
			}
			, scope: this
		});
		if (this['showTooltip']) {
			var _0x9f6cx3 = this['tip'];
			if (_0x9f6cx3 instanceof Ext['tip']['ToolTip']) {
				_0x9f6cx3['schedulerView'] = _0x9f6cx4
			}
			else {
				this['tip'] = new Ext.ux.Scheduler['tooltip'].Tooltip(Ext['apply']({
					schedulerView: _0x9f6cx4
					, constrainTo: _0x9f6cx4['up']('grid')['el']
					, alignOnScroll: false
					, cls: 'sch-dragdrop-tip'
				}, _0x9f6cx3))
			}
		}
	}
	, bindRightClickPreventer: function () {
		var _0x9f6cx1;
		if (Ext['isIE10']) {
			_0x9f6cx1 = 'contextmenu'
		}
		else {
			_0x9f6cx1 = 'mousedown'
		};
		this['schedulerView']['el']['on'](_0x9f6cx1, this['preventRightClick'], this, {
			priority: 999
		})
	}
	, destroy: function () {
		this['tip'] && this['tip']['destroy']();
		clearTimeout(this._onValidDropTimer);
		this['callParent'](arguments)
	}
	, preventRightClick: function (_0x9f6cx1) {
		if (this['dragging'] && _0x9f6cx1['button'] !== 0) {
			_0x9f6cx1['stopEvent']();
			return false
		}
	}
	, autoOffset: function () {
		this['setDelta'](0, 0)
	}
	, setupConstraints: function (_0x9f6cxa, _0x9f6cx3, _0x9f6cx6, _0x9f6cx4, _0x9f6cx9, _0x9f6cx7, _0x9f6cx5) {
		this['clearTicks']();
		var _0x9f6cx1 = _0x9f6cx9 && !this['showExactDropPosition'] && _0x9f6cx7 > 1 ? _0x9f6cx7 : 0;
		var _0x9f6cx8 = !_0x9f6cx9 && !this['showExactDropPosition'] && _0x9f6cx7 > 1 ? _0x9f6cx7 : 0;
		this['resetConstraints']();
		this['initPageX'] = _0x9f6cxa['left'] + _0x9f6cx6;
		this['initPageY'] = _0x9f6cxa['top'] + _0x9f6cx4;
		var _0x9f6cx2 = _0x9f6cx3['right'] - _0x9f6cx3['left'];
		var _0x9f6cxc = _0x9f6cx3['bottom'] - _0x9f6cx3['top'];
		if (_0x9f6cx9) {
			if (_0x9f6cx5) {
				this['setXConstraint'](_0x9f6cxa['left'] + _0x9f6cx6, _0x9f6cxa['right'] - _0x9f6cx2 + _0x9f6cx6, _0x9f6cx1)
			}
			else {
				this['setXConstraint'](_0x9f6cxa['left'], _0x9f6cxa['right'], _0x9f6cx1)
			};
			this['setYConstraint'](_0x9f6cxa['top'] + _0x9f6cx4, _0x9f6cxa['bottom'] - _0x9f6cxc + _0x9f6cx4, _0x9f6cx8)
		}
		else {
			this['setXConstraint'](_0x9f6cxa['left'] + _0x9f6cx6, _0x9f6cxa['right'] - _0x9f6cx2 + _0x9f6cx6, _0x9f6cx1);
			if (_0x9f6cx5) {
				this['setYConstraint'](_0x9f6cxa['top'] + _0x9f6cx4, _0x9f6cxa['bottom'] - _0x9f6cxc + _0x9f6cx4, _0x9f6cx8)
			}
			else {
				this['setYConstraint'](_0x9f6cxa['top'], _0x9f6cxa['bottom'], _0x9f6cx8)
			}
		}
	}
	, setXConstraint: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		this['leftConstraint'] = _0x9f6cx5;
		this['rightConstraint'] = _0x9f6cx2;
		this['minX'] = _0x9f6cx5;
		this['maxX'] = _0x9f6cx2;
		if (_0x9f6cx1) {
			this['setXTicks'](this['initPageX'], _0x9f6cx1)
		};
		this['constrainX'] = true
	}
	, setYConstraint: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx2) {
		this['topConstraint'] = _0x9f6cx1;
		this['bottomConstraint'] = _0x9f6cx5;
		this['minY'] = _0x9f6cx1;
		this['maxY'] = _0x9f6cx5;
		if (_0x9f6cx2) {
			this['setYTicks'](this['initPageY'], _0x9f6cx2)
		};
		this['constrainY'] = true
	}
	, onDragEnter: Ext['emptyFn']
	, onDragOut: Ext['emptyFn']
	, setVisibilityForSourceEvents: function (_0x9f6cx1) {
		Ext['Array']['each'](this['dragData']['getEventBarElements'](), function (_0x9f6cx2) {
			_0x9f6cx2 && Ext['fly'](_0x9f6cx2)[_0x9f6cx1 ? 'show' : 'hide']()
		})
	}
	, onDragOver: function (_0x9f6cx6) {
		if (_0x9f6cx6 && _0x9f6cx6['event']['touches'] && _0x9f6cx6['event']['touches']['length'] > 1) {
			Ext['dd']['DragDropManager']['handleMouseUp'](_0x9f6cx6);
			return
		};
		var _0x9f6cx13 = _0x9f6cx6 ? _0x9f6cx6['getXY']() : this['lastXY'];
		if (!_0x9f6cx13) {
			return
		};
		var _0x9f6cxa = this['dragData'];
		if (!_0x9f6cxa['originalHidden']) {
			this['setVisibilityForSourceEvents'](false);
			_0x9f6cxa['originalHidden'] = true;
			this['onShiftKeyStateChange'](_0x9f6cx6[this['enableCopyKey']['toLowerCase']() + 'Key'])
		};
		var _0x9f6cx2 = _0x9f6cxa['startDate'];
		var _0x9f6cx3 = _0x9f6cxa['newResource'];
		var _0x9f6cx8 = this['schedulerView'];
		this['updateDragContext'](_0x9f6cx6);
		if (this['showExactDropPosition']) {
			var _0x9f6cx9 = _0x9f6cx8['isHorizontal']();
			var _0x9f6cx1 = _0x9f6cx8['getDateFromCoordinate'](_0x9f6cx9 ? _0x9f6cx13[0] : _0x9f6cx13[1]) - _0x9f6cxa['sourceDate'];
			var _0x9f6cxc = new Date(_0x9f6cxa['origStart'] - 0 + _0x9f6cx1);
			var _0x9f6cx7 = _0x9f6cx8['timeAxisViewModel']['getDistanceBetweenDates'](_0x9f6cxc, _0x9f6cxa['startDate']);
			if (_0x9f6cxa['startDate'] > _0x9f6cx8['timeAxis']['getStart']()) {
				var _0x9f6cx5 = this['proxy']['el'];
				if (_0x9f6cx7) {
					if (_0x9f6cx8['isHorizontal']()) {
						_0x9f6cx5['setX'](_0x9f6cx13[0] + (_0x9f6cx8['shouldAdjustForRtl']() ? -_0x9f6cx7 : _0x9f6cx7))
					}
					else {
						_0x9f6cx5['setY'](_0x9f6cx13[1] + _0x9f6cx7)
					}
				}
			}
		};
		if (_0x9f6cxa['startDate'] - _0x9f6cx2 !== 0 || _0x9f6cx3 !== _0x9f6cxa['newResource']) {
			_0x9f6cx8['fireEvent']('eventdrag', _0x9f6cx8, _0x9f6cxa['draggedRecords'], _0x9f6cxa['startDate'], _0x9f6cxa['newResource'], _0x9f6cxa)
		};
		if (this['showTooltip']) {
			this['tip']['update'](_0x9f6cxa['startDate'], _0x9f6cxa['endDate'], _0x9f6cxa['valid'], _0x9f6cxa['message'])
		};
		if (_0x9f6cx6) {
			this['lastXY'] = [_0x9f6cx6['browserEvent']['clientX'] + document['body']['scrollLeft'], _0x9f6cx6['getY']()]
		}
	}
	, getCoordinate: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['schedulerView'];
		if (_0x9f6cx1['isHorizontal']()) {
			return _0x9f6cx2[0]
		};
		if (_0x9f6cx1['isVertical']()) {
			return _0x9f6cx2[1]
		};
		if (_0x9f6cx1['isWeekView']()) {
			return _0x9f6cx2
		}
	}
	, getDragData: function (_0x9f6cxf) {
		var _0x9f6cx8 = this['schedulerView']
			, _0x9f6cx10 = _0x9f6cxf['getTarget'](_0x9f6cx8['eventSelector']);
		if (!_0x9f6cx10 || _0x9f6cxf['event']['touches'] && _0x9f6cxf['event']['touches']['length'] > 1) {
			return
		};
		var _0x9f6cxc = _0x9f6cx8['resolveEventRecord'](_0x9f6cx10)
			, _0x9f6cxb = _0x9f6cx8['resolveResource'](_0x9f6cx10)
			, _0x9f6cx3 = _0x9f6cx8['resolveAssignmentRecord'](_0x9f6cx10)
			, _0x9f6cxd = _0x9f6cxc && _0x9f6cxc['isDraggable']() && !_0x9f6cx8['isReadOnly']();
		if (!_0x9f6cxd || _0x9f6cx8['fireEvent']('beforeeventdrag', _0x9f6cx8, _0x9f6cxc, _0x9f6cxf) === false) {
			return null
		};
		var _0x9f6cx6 = _0x9f6cxf['getXY']()
			, _0x9f6cx11 = Ext['fly'](_0x9f6cx10)['getXY']()
			, _0x9f6cx9 = [_0x9f6cx6[0] - _0x9f6cx11[0], _0x9f6cx6[1] - _0x9f6cx11[1]]
			, _0x9f6cx13 = Ext['fly'](_0x9f6cx10)['getRegion']();
		this['lastXY'] = null;
		var _0x9f6cxa = _0x9f6cx8['isHorizontal']();
		_0x9f6cx8['constrainDragToResource'] && !_0x9f6cxb && Ext['Error']['raise']('Resource could not be resolved for event: ' + _0x9f6cxc['getId']());
		var _0x9f6cx12 = _0x9f6cx8['getDateConstraints'](_0x9f6cx8['constrainDragToResource'] ? _0x9f6cxb : null, _0x9f6cxc);
		this['setupConstraints'](_0x9f6cx8['getScheduleRegion'](_0x9f6cx8['constrainDragToResource'] ? _0x9f6cxb : null, _0x9f6cxc), _0x9f6cx13, _0x9f6cx9[0], _0x9f6cx9[1], _0x9f6cxa, _0x9f6cx8['getSnapPixelAmount'](), Boolean(_0x9f6cx12));
		var _0x9f6cx1 = _0x9f6cxc['getStartDate']()
			, _0x9f6cxe = _0x9f6cxc['getEndDate']()
			, _0x9f6cx2 = _0x9f6cx8['timeAxis']
			, _0x9f6cx7 = this['getRelatedRecords'](_0x9f6cx3 || _0x9f6cxc) || []
			, _0x9f6cx14 = _0x9f6cx8['getElementsFromEventRecord'](_0x9f6cxc, _0x9f6cx8['isWeekView']() ? null : _0x9f6cxb, null, true);
		Ext['Array']['each'](_0x9f6cx7, function (_0x9f6cx4) {
			if (_0x9f6cx4 instanceof Ext.ux.Scheduler['model']['Assignment']) {
				_0x9f6cx14 = _0x9f6cx14['concat'](_0x9f6cx8['getElementsFromEventRecord'](_0x9f6cx4['getEvent'](), _0x9f6cx4['getResource'](), null, true))
			}
			else {
				_0x9f6cx14 = _0x9f6cx14['concat'](_0x9f6cx8['getElementsFromEventRecord'](_0x9f6cx4, null, null, true))
			}
		});
		_0x9f6cx14 = Ext['Array']['unique'](_0x9f6cx14);
		var _0x9f6cx5 = {
			offsets: _0x9f6cx9
			, repairXY: _0x9f6cx11
			, prevScroll: _0x9f6cx8['getScroll']()
			, dateConstraints: _0x9f6cx12
			, eventBarEls: _0x9f6cx14
			, getEventBarElements: function () {
				return _0x9f6cx5['eventBarEls'] = Ext['Array']['map'](_0x9f6cx5['eventBarEls'], function (_0x9f6cx4) {
					return _0x9f6cx4 && document['getElementById'](_0x9f6cx4['id'])
				})
			}
			, draggedRecords: [_0x9f6cx3 || _0x9f6cxc]['concat'](_0x9f6cx7)
			, resourceRecord: _0x9f6cxb
			, sourceDate: _0x9f6cx8['getDateFromCoordinate'](this['getCoordinate'](_0x9f6cx6))
			, origStart: _0x9f6cx1
			, origEnd: _0x9f6cxe
			, startDate: _0x9f6cx1
			, endDate: _0x9f6cxe
			, timeDiff: 0
			, startsOutsideView: _0x9f6cx1 < _0x9f6cx2['getStart']()
			, endsOutsideView: _0x9f6cxe > _0x9f6cx2['getEnd']()
			, duration: _0x9f6cxe - _0x9f6cx1
		};
		this['copyKeyPressed'] = _0x9f6cxf[this['enableCopyKey']['toLowerCase']() + 'Key'];
		_0x9f6cx5['ddel'] = this['getDragElement'](_0x9f6cx10, _0x9f6cx5);
		return _0x9f6cx5
	}
	, onStartDrag: function () {
		var _0x9f6cx2 = this['schedulerView']
			, _0x9f6cx1 = this['dragData'];
		Ext['Array']['each'](_0x9f6cx1['getEventBarElements'](), function (_0x9f6cx5) {
			Ext['fly'](_0x9f6cx5)['removeCls']('sch-event-hover')
		});
		_0x9f6cx2['fireEvent']('eventdragstart', _0x9f6cx2, _0x9f6cx1['draggedRecords']);
		_0x9f6cx2['getScrollable']()['on']('scroll', this['onViewScroll'], this);
		if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
			_0x9f6cx2['up']('timelinetree,timelinegrid')['getScrollable']()['on']('scroll', this['onViewScroll'], this)
		}
	}
	, alignElWithMouse: function (_0x9f6cx2, _0x9f6cx4, _0x9f6cx3) {
		this['callParent'](arguments);
		if (Ext['isIE'] && this['schedulerView']['rtl'] && this['schedulerView']['up']('[isViewport]')) {
			this['deltaSetXY'] = null;
			this['callParent'](arguments)
		};
		var _0x9f6cx5 = this['getTargetCoord'](_0x9f6cx4, _0x9f6cx3)
			, _0x9f6cx1 = _0x9f6cx2['dom'] ? _0x9f6cx2 : Ext['fly'](_0x9f6cx2, '_dd');
		this['setLocalXY'](_0x9f6cx1, _0x9f6cx5['x'] + this['deltaSetXY'][0], _0x9f6cx5['y'] + this['deltaSetXY'][1])
	}
	, onViewScroll: function (_0x9f6cx6) {
		var _0x9f6cx4 = this['proxy']
			, _0x9f6cxa = this['schedulerView']
			, _0x9f6cx9 = this['dragData']
			, _0x9f6cx8 = _0x9f6cxa['getScroll']()
			, _0x9f6cx2 = _0x9f6cx8['left']
			, _0x9f6cx7 = _0x9f6cx8['top']
			, _0x9f6cx3 = _0x9f6cxa['rtl'] && !_0x9f6cxa['up']('[isViewport]');
		this['setVisibilityForSourceEvents'](false);
		var _0x9f6cxc = _0x9f6cx4['getXY']();
		var _0x9f6cx5;
		if (_0x9f6cx3) {
			_0x9f6cx5 = [_0x9f6cxc[0] - _0x9f6cx2 + _0x9f6cx9['prevScroll']['left'], _0x9f6cxc[1] + _0x9f6cx7 - _0x9f6cx9['prevScroll']['top']]
		}
		else {
			_0x9f6cx5 = [_0x9f6cxc[0] + _0x9f6cx2 - _0x9f6cx9['prevScroll']['left'], _0x9f6cxc[1] + _0x9f6cx7 - _0x9f6cx9['prevScroll']['top']]
		};
		var _0x9f6cx1 = this['deltaSetXY'];
		if (_0x9f6cx3) {
			this['deltaSetXY'] = [_0x9f6cx1[0] - _0x9f6cx2 + _0x9f6cx9['prevScroll']['left'], _0x9f6cx1[1] + _0x9f6cx7 - _0x9f6cx9['prevScroll']['top']]
		}
		else {
			this['deltaSetXY'] = [_0x9f6cx1[0] + _0x9f6cx2 - _0x9f6cx9['prevScroll']['left'], _0x9f6cx1[1] + _0x9f6cx7 - _0x9f6cx9['prevScroll']['top']]
		};
		_0x9f6cx9['prevScroll'] = {
			left: _0x9f6cx2
			, top: _0x9f6cx7
		};
		_0x9f6cx4['setXY'](_0x9f6cx5);
		this['onDragOver']()
	}
	, isCopyKeyPressed: function () {
		return this['enableCopy'] && this['copyKeyPressed']
	}
	, onShiftKeyStateChange: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['dragData'];
		if (_0x9f6cx2) {
			_0x9f6cx1['refElements']['addCls']('sch-event-copy')
		}
		else {
			_0x9f6cx1['refElements']['removeCls']('sch-event-copy')
		};
		this['setVisibilityForSourceEvents'](_0x9f6cx2);
		this['copyKeyPressed'] = _0x9f6cx2
	}
	, onKey: function (_0x9f6cx1) {
		if (this['enableCopy'] && _0x9f6cx1['getKey']() === _0x9f6cx1[this['enableCopyKey']]) {
			this['onShiftKeyStateChange'](_0x9f6cx1['type'] === 'keydown')
		};
		if (_0x9f6cx1['getKey']() === _0x9f6cx1['ESC']) {
			this['dragData']['ddCallbackArgs'] = [_0x9f6cx1['getTarget'](), _0x9f6cx1, this['id']];
			this['finalize'](false);
			Ext['dd']['DragDropManager']['stopDrag'](_0x9f6cx1);
			Ext['dd']['DragDropManager']['stopEvent'](_0x9f6cx1)
		}
	}
	, startDrag: function () {
		Ext['getDoc']()['on']({
			keydown: this['onKey']
			, keyup: this['onKey']
			, useCapture: true
			, scope: this
		});
		var _0x9f6cx2 = this['callParent'](arguments);
		var _0x9f6cx1 = this['dragData'];
		_0x9f6cx1['refElement'] = this['proxy']['el']['down']('.' + this['dragDropProxyCls']);
		_0x9f6cx1['refElements'] = this['proxy']['el']['select']('.sch-event');
		_0x9f6cx1['refElement']['removeCls']('sch-event-hover');
		if (this['showTooltip']) {
			this['tip']['setStyle']('visibility');
			this['tip']['update'](_0x9f6cx1['origStart'], _0x9f6cx1['origEnd'], true);
			this['tip']['showForElement'](_0x9f6cx1['refElement'], _0x9f6cx1['offsets'][0])
		};
		if (this['copyKeyPressed']) {
			_0x9f6cx1['refElements']['addCls']('sch-event-copy');
			_0x9f6cx1['originalHidden'] = true
		};
		return _0x9f6cx2
	}
	, endDrag: function () {
		this['schedulerView']['getScrollable']()['un']('scroll', this['onViewScroll'], this);
		if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
			this['schedulerView']['up']('timelinetree,timelinegrid')['getScrollable']()['un']('scroll', this['onViewScroll'], this)
		};
		Ext['getDoc']()['un']({
			keydown: this['onKey']
			, keyup: this['onKey']
			, useCapture: true
			, scope: this
		});
		this['callParent'](arguments)
	}
	, onMouseUp: function () {
		if (!this['dragging']) {
			this['afterDragFinalized']()
		}
	}
	, afterDragFinalized: function () {
		this['proxy']['el']['dom']['style']['top'] = this['proxy']['el']['dom']['style']['left'] = 0
	}
	, updateRecords: function (_0x9f6cx5) {
		var _0x9f6cxc = this
			, _0x9f6cxa = _0x9f6cxc['schedulerView']
			, _0x9f6cx4 = _0x9f6cxa['getEventStore']()
			, _0x9f6cxb = _0x9f6cxa['getResourceStore']()
			, _0x9f6cx8 = _0x9f6cx4['getAssignmentStore']()
			, _0x9f6cx7 = _0x9f6cx5['newResource']
			, _0x9f6cx6 = _0x9f6cx5['draggedRecords'][0]
			, _0x9f6cx2 = _0x9f6cx5['draggedRecords']['slice'](1)
			, _0x9f6cx9 = _0x9f6cx5['resourceRecord']
			, _0x9f6cx13 = _0x9f6cxc['isCopyKeyPressed']()
			, _0x9f6cx3 = _0x9f6cx5['startDate']
			, _0x9f6cx1 = _0x9f6cx5['timeDiff']
			, _0x9f6cxe = _0x9f6cxa['isWeekView']();
		if (_0x9f6cx8 && _0x9f6cx4 instanceof Ext.ux.Scheduler['data']['EventStore']) {
			_0x9f6cxc['updateRecordsMultipleAssignmentMode'](_0x9f6cx3, _0x9f6cx1, _0x9f6cx6, _0x9f6cx2, _0x9f6cx9, _0x9f6cx7, _0x9f6cx4, _0x9f6cxb, _0x9f6cx8, _0x9f6cx13, _0x9f6cxe)
		}
		else {
			if (_0x9f6cx8) {
				_0x9f6cxc['updateRecordsSingleAssignmentMode'](_0x9f6cx3, _0x9f6cx1, _0x9f6cx6['getEvent'](), Ext['Array']['map'](_0x9f6cx2, function (_0x9f6cxd) {
					return _0x9f6cxd['getEvent']()
				}), _0x9f6cx9, _0x9f6cx7, _0x9f6cx4, _0x9f6cxb, _0x9f6cx13, _0x9f6cxe)
			}
			else {
				_0x9f6cxc['updateRecordsSingleAssignmentMode'](_0x9f6cx3, _0x9f6cx1, _0x9f6cx6, _0x9f6cx2, _0x9f6cx9, _0x9f6cx7, _0x9f6cx4, _0x9f6cxb, _0x9f6cx13, _0x9f6cxe)
			}
		};
		_0x9f6cxa['fireEvent']('eventdrop', _0x9f6cxa, _0x9f6cx5['draggedRecords'], _0x9f6cx13)
	}
	, updateRecordsSingleAssignmentMode: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx13, _0x9f6cx8, _0x9f6cx3, _0x9f6cx9, _0x9f6cx4, _0x9f6cxc, _0x9f6cx1, _0x9f6cxa) {
		var _0x9f6cx6 = this
			, _0x9f6cxb = [];
		if (_0x9f6cx1) {
			_0x9f6cx13 = _0x9f6cx13['fullCopy'](null);
			_0x9f6cxb['push'](_0x9f6cx13)
		};
		_0x9f6cx13['beginEdit']();
		if (_0x9f6cx3 instanceof Ext.ux.Scheduler['model']['Resource'] && _0x9f6cx9 instanceof Ext.ux.Scheduler['model']['Resource'] && _0x9f6cx9 !== _0x9f6cx3) {
			if (_0x9f6cx1) {
				_0x9f6cx13['assign'](_0x9f6cx9)
			}
			else {
				_0x9f6cx13['reassign'](_0x9f6cx3, _0x9f6cx9)
			}
		};
		_0x9f6cx13['setStartDate'](_0x9f6cx5, true, _0x9f6cx4['skipWeekendsDuringDragDrop']);
		_0x9f6cx13['endEdit']();
		if (!_0x9f6cxa) {
			var _0x9f6cx7 = _0x9f6cxc['indexOf'](_0x9f6cx3) - _0x9f6cxc['indexOf'](_0x9f6cx9);
			Ext['Array']['each'](_0x9f6cx8, function (_0x9f6cxd) {
				var _0x9f6cxe = _0x9f6cxd['getResources']();
				if (_0x9f6cx1) {
					_0x9f6cxd = _0x9f6cxd['fullCopy'](null);
					_0x9f6cxb['push'](_0x9f6cxd)
				};
				_0x9f6cxd['beginEdit']();
				_0x9f6cxd['setStartDate'](_0x9f6cx6['adjustStartDate'](_0x9f6cxd['getStartDate'](), _0x9f6cx2), true, _0x9f6cx4['skipWeekendsDuringDragDrop']);
				_0x9f6cx7 !== 0 && _0x9f6cxe['length'] && Ext['Array']['each'](_0x9f6cxe, function (_0x9f6cx10) {
					var _0x9f6cx12 = _0x9f6cxc['indexOf'](_0x9f6cx10) - _0x9f6cx7
						, _0x9f6cxf;
					if (_0x9f6cx12 < 0) {
						_0x9f6cx12 = 0
					}
					else {
						if (_0x9f6cx12 >= _0x9f6cxc['getCount']()) {
							_0x9f6cx12 = _0x9f6cxc['getCount']() - 1
						}
					};
					_0x9f6cxf = _0x9f6cxc['getAt'](_0x9f6cx12);
					_0x9f6cxd['reassign'](_0x9f6cx10, _0x9f6cxf)
				});
				_0x9f6cxd['endEdit']()
			})
		};
		if (_0x9f6cxb['length']) {
			_0x9f6cx4['append'](_0x9f6cxb)
		}
	}
	, updateRecordsMultipleAssignmentMode: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx6, _0x9f6cxb, _0x9f6cx3, _0x9f6cx9, _0x9f6cx4, _0x9f6cxa, _0x9f6cx7, _0x9f6cx1, _0x9f6cx13) {
		var _0x9f6cx8 = this;
		var _0x9f6cxc = {};
		Ext['Array']['each']([]['concat'](_0x9f6cx6, _0x9f6cxb), function (_0x9f6cxd) {
			var _0x9f6cxe = _0x9f6cxd['getEvent']();
			if (_0x9f6cxc[_0x9f6cxe['getId']()]) {
				return
			};
			_0x9f6cxc[_0x9f6cxe['getId']()] = true;
			_0x9f6cxe['setStartDate'](_0x9f6cx8['adjustStartDate'](_0x9f6cxe['getStartDate'](), _0x9f6cx2), true, _0x9f6cx4['skipWeekendsDuringDragDrop']);
			if (!_0x9f6cx13 && _0x9f6cx3 !== _0x9f6cx9) {
				if (_0x9f6cx1) {
					_0x9f6cxe['assign'](_0x9f6cx9)
				}
				else {
					if (!_0x9f6cxe['isAssignedTo'](_0x9f6cx9)) {
						_0x9f6cxe['reassign'](_0x9f6cxd['getResource'](), _0x9f6cx9)
					}
					else {
						_0x9f6cxe['unassign'](_0x9f6cxd['getResource']())
					}
				}
			}
		})
	}
	, isValidDrop: function (_0x9f6cx1, _0x9f6cx2, _0x9f6cx5) {
		if (_0x9f6cx1 !== _0x9f6cx2) {
			if (_0x9f6cx5 instanceof Ext.ux.Scheduler['model']['Assignment']) {
				return !_0x9f6cx5['getEvent']()['isAssignedTo'](_0x9f6cx2)
			}
			else {
				return !_0x9f6cx5['isAssignedTo'](_0x9f6cx2)
			}
		};
		return true
	}
	, resolveResource: function (_0x9f6cx4) {
		var _0x9f6cx5 = this['proxy']['el']['dom'];
		var _0x9f6cx7 = Ext['getBody']()['getScroll']();
		var _0x9f6cx1 = this['schedulerView'];
		_0x9f6cx5['style']['display'] = 'none';
		var _0x9f6cx3 = document['elementFromPoint'](_0x9f6cx4[0] - _0x9f6cx7['left'], _0x9f6cx4[1] - _0x9f6cx7['top']);
		if (Ext['isIE8'] && window['top']['Siesta']) {
			_0x9f6cx3 = document['elementFromPoint'](_0x9f6cx4[0] - _0x9f6cx7['left'], _0x9f6cx4[1] - _0x9f6cx7['top'])
		};
		_0x9f6cx5['style']['display'] = 'block';
		if (!_0x9f6cx3) {
			return null
		};
		if (Ext['fly'](_0x9f6cx3)['up']('.' + Ext['baseCSSPrefix'] + 'grid-group-hd', 4, true)) {
			return null
		};
		if (_0x9f6cx3['className']['match'](Ext['baseCSSPrefix'] + 'grid-item')) {
			return this['resolveResource']([_0x9f6cx4[0], _0x9f6cx4[1] + 3])
		};
		if (!_0x9f6cx3['className']['match'](_0x9f6cx1['timeCellCls'])) {
			var _0x9f6cx2 = Ext['fly'](_0x9f6cx3)['up']('.' + _0x9f6cx1['timeCellCls']);
			if (_0x9f6cx2) {
				_0x9f6cx3 = _0x9f6cx2['dom']
			}
			else {
				return null
			}
		};
		return _0x9f6cx1['resolveResource'](_0x9f6cx3)
	}
	, adjustStartDate: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this['schedulerView'];
		return _0x9f6cx2['timeAxis']['roundDate'](new Date(_0x9f6cx1 - 0 + _0x9f6cx5), _0x9f6cx2['snapRelativeToEventStartDate'] ? _0x9f6cx1 : false)
	}
	, updateDragContext: function (_0x9f6cx6) {
		var _0x9f6cx9 = this['dragData']
			, _0x9f6cxa = _0x9f6cx6 ? _0x9f6cx6['getXY']() : this['lastXY']
			, _0x9f6cx1, _0x9f6cx2;
		if (_0x9f6cx6) {
			if (_0x9f6cx6['browserEvent']['touches'] && _0x9f6cx6['browserEvent']['touches']['length'] > 0) {
				_0x9f6cx1 = _0x9f6cx6['browserEvent']['touches'][0]['clientX']
			}
			else {
				_0x9f6cx1 = _0x9f6cx6['browserEvent']['clientX'] != null ? _0x9f6cx6['browserEvent']['clientX'] : _0x9f6cx6['clientX']
			};
			_0x9f6cx2 = [_0x9f6cx1 + document['body']['scrollLeft'], _0x9f6cx6['getY']()]
		}
		else {
			_0x9f6cx2 = this['lastXY']
		};
		if (!_0x9f6cx9['refElement']) {
			return
		};
		var _0x9f6cx13 = this['schedulerView']
			, _0x9f6cx3 = _0x9f6cx9['refElement']['getRegion']();
		if (_0x9f6cx13['timeAxis']['isContinuous']()) {
			if ((_0x9f6cx13['isHorizontal']() && this['minX'] < _0x9f6cxa[0] && _0x9f6cxa[0] < this['maxX']) || (!_0x9f6cx13['isHorizontal']() && this['minY'] < _0x9f6cxa[1] && _0x9f6cxa[1] < this['maxY'])) {
				var _0x9f6cx8 = _0x9f6cx13['getDateFromCoordinate'](this['getCoordinate'](_0x9f6cxa));
				_0x9f6cx9['timeDiff'] = _0x9f6cx8 - _0x9f6cx9['sourceDate'];
				_0x9f6cx9['startDate'] = this['adjustStartDate'](_0x9f6cx9['origStart'], _0x9f6cx9['timeDiff']);
				_0x9f6cx9['endDate'] = new Date(_0x9f6cx9['startDate'] - 0 + _0x9f6cx9['duration'])
			}
		}
		else {
			var _0x9f6cx7;
			if (_0x9f6cx13['isWeekView']()) {
				var _0x9f6cx5 = {
					bottom: _0x9f6cx3['bottom']
					, top: _0x9f6cx3['top']
				};
				_0x9f6cx5['left'] = _0x9f6cx5['right'] = _0x9f6cx3['left'] + _0x9f6cx9['offsets'][0];
				_0x9f6cx7 = this['resolveStartEndDates'](_0x9f6cx5)
			}
			else {
				_0x9f6cx7 = this['resolveStartEndDates'](_0x9f6cx3)
			};
			_0x9f6cx9['startDate'] = _0x9f6cx7['startDate'];
			_0x9f6cx9['endDate'] = _0x9f6cx7['endDate'];
			_0x9f6cx9['timeDiff'] = _0x9f6cx9['startDate'] - _0x9f6cx9['origStart']
		};
		_0x9f6cx9['newResource'] = _0x9f6cx13['constrainDragToResource'] ? _0x9f6cx9['resourceRecord'] : this['resolveResource'](_0x9f6cx2);
		if (_0x9f6cx9['newResource']) {
			var _0x9f6cxc = !_0x9f6cx6 || this['validatorFn']['call'](this['validatorFnScope'] || this, _0x9f6cx9['draggedRecords'], _0x9f6cx9['newResource'], _0x9f6cx9['startDate'], _0x9f6cx9['duration'], _0x9f6cx6);
			if (!_0x9f6cxc || typeof _0x9f6cxc === 'boolean') {
				_0x9f6cx9['valid'] = _0x9f6cxc !== false;
				_0x9f6cx9['message'] = ''
			}
			else {
				_0x9f6cx9['valid'] = _0x9f6cxc['valid'] !== false;
				_0x9f6cx9['message'] = _0x9f6cxc['message']
			}
		}
		else {
			_0x9f6cx9['valid'] = false
		}
	}
	, getRelatedRecords: function (_0x9f6cx5) {
		var _0x9f6cx2 = this['schedulerView']
			, _0x9f6cx3 = _0x9f6cx2['getEventSelectionModel']()
			, _0x9f6cx1 = _0x9f6cx3['getDraggableSelections']();
		return Ext['Array']['filter'](_0x9f6cx1, function (_0x9f6cx4) {
			return _0x9f6cx5 !== _0x9f6cx4
		})
	}
	, getDragElement: function (_0x9f6cxc, _0x9f6cx6) {
		var _0x9f6cx3 = _0x9f6cx6['getEventBarElements']();
		var _0x9f6cx1;
		var _0x9f6cx2;
		var _0x9f6cx8 = _0x9f6cx6['offsets'][0];
		var _0x9f6cx7 = _0x9f6cx6['offsets'][1];
		var _0x9f6cx4 = _0x9f6cxc['dom'] || _0x9f6cxc;
		var _0x9f6cx5 = !this['schedulerView']['rtl'] || this['schedulerView']['shouldAdjustForRtl']();
		if (_0x9f6cx3['length'] > 1) {
			var _0x9f6cx9 = Ext['core']['DomHelper']['createDom']({
				tag: 'div'
				, cls: 'sch-dd-wrap'
				, style: {
					overflow: 'visible'
				}
			});
			Ext['Array']['each'](_0x9f6cx3, function (_0x9f6cx13) {
				_0x9f6cx1 = _0x9f6cx13['cloneNode'](true);
				_0x9f6cx1['id'] = Ext['id']();
				if (_0x9f6cx13 === _0x9f6cx4) {
					_0x9f6cx1['className'] += ' ' + this['dragDropProxyCls'];
					if (Ext['isIE8']) {
						Ext['fly'](_0x9f6cx1)['addCls'](this['dragDropProxyCls'])
					}
				};
				_0x9f6cx9['appendChild'](_0x9f6cx1);
				var _0x9f6cxa = Ext['fly'](_0x9f6cx13)['getOffsetsTo'](_0x9f6cx4);
				if (_0x9f6cx5) {
					_0x9f6cx1['style']['left'] = _0x9f6cxa[0] - _0x9f6cx8 + 'px'
				}
				else {
					_0x9f6cx1['style']['left'] = _0x9f6cx8 - Ext['fly'](_0x9f6cx13)['getWidth']() - _0x9f6cxa[0] + 'px'
				};
				_0x9f6cx1['style']['top'] = _0x9f6cxa[1] - _0x9f6cx7 + 'px'
			}, this);
			_0x9f6cx2 = _0x9f6cx9
		}
		else {
			_0x9f6cx1 = _0x9f6cx4['cloneNode'](true);
			_0x9f6cx1['id'] = Ext['id']();
			_0x9f6cx1['style']['left'] = (_0x9f6cx5 ? -_0x9f6cx8 : (_0x9f6cx8 - Ext['fly'](_0x9f6cx4)['getWidth']())) + 'px';
			_0x9f6cx1['style']['top'] = -_0x9f6cx7 + 'px';
			_0x9f6cx1['className'] += ' ' + this['dragDropProxyCls'];
			if (Ext['isIE8']) {
				Ext['fly'](_0x9f6cx1)['addCls'](this['dragDropProxyCls'])
			};
			_0x9f6cx2 = _0x9f6cx1
		};
		if (!_0x9f6cx4['style']['height']) {
			Ext['fly'](_0x9f6cx2)['setHeight'](Ext['fly'](_0x9f6cx4)['getHeight']())
		};
		return _0x9f6cx2
	}
	, onDragDrop: function (_0x9f6cx8, _0x9f6cx9) {
		this['updateDragContext'](_0x9f6cx8);
		var _0x9f6cx3 = this
			, _0x9f6cx2 = _0x9f6cx3['schedulerView']
			, _0x9f6cx6 = _0x9f6cx3['cachedTarget'] || Ext['dd']['DragDropMgr']['getDDById'](_0x9f6cx9)
			, _0x9f6cx7 = _0x9f6cx3['dragData']
			, _0x9f6cx1 = false
			, _0x9f6cx5 = true;
		if (_0x9f6cx3['tip']) {
			_0x9f6cx3['tip']['hide']()
		};
		_0x9f6cx7['ddCallbackArgs'] = [_0x9f6cx6, _0x9f6cx8, _0x9f6cx9];
		if (_0x9f6cx7['valid'] && _0x9f6cx7['startDate'] && _0x9f6cx7['endDate']) {
			_0x9f6cx7['finalize'] = function () {
				_0x9f6cx3['finalize']['apply'](_0x9f6cx3, arguments)
			};
			_0x9f6cx5 = _0x9f6cx2['fireEvent']('beforeeventdropfinalize', _0x9f6cx3, _0x9f6cx7, _0x9f6cx8) !== false;
			if (_0x9f6cx5 && _0x9f6cx3['isValidDrop'](_0x9f6cx7['resourceRecord'], _0x9f6cx7['newResource'], _0x9f6cx7['draggedRecords'][0])) {
				_0x9f6cx1 = (_0x9f6cx7['startDate'] - _0x9f6cx7['origStart']) !== 0 || _0x9f6cx7['newResource'] !== _0x9f6cx7['resourceRecord']
			}
		};
		if (_0x9f6cx5) {
			_0x9f6cx3['finalize'](_0x9f6cx7['valid'] && _0x9f6cx1)
		}
		else {
			_0x9f6cx3['proxy']['el']['addCls']('sch-before-drag-finalized')
		}
	}
	, finalize: function (_0x9f6cx5) {
		var _0x9f6cx7 = this
			, _0x9f6cx2 = _0x9f6cx7['schedulerView']
			, _0x9f6cx3 = _0x9f6cx2['getEventStore']()
			, _0x9f6cx6 = _0x9f6cx7['dragData'];
		_0x9f6cx7['proxy']['el']['removeCls']('sch-before-drag-finalized');
		if (_0x9f6cx5) {
			var _0x9f6cx1, _0x9f6cx4 = function () {
				_0x9f6cx1 = true
			};
			_0x9f6cx3['on']('update', _0x9f6cx4, null, {
				single: true
			});
			_0x9f6cx7['updateRecords'](_0x9f6cx6);
			_0x9f6cx3['un']('update', _0x9f6cx4, null, {
				single: true
			});
			if (!_0x9f6cx1) {
				_0x9f6cx7['onInvalidDrop']['apply'](_0x9f6cx7, _0x9f6cx6['ddCallbackArgs'])
			}
			else {
				if (Ext['isIE9']) {
					_0x9f6cx7['proxy']['el']['setStyle']('visibility', 'hidden');
					_0x9f6cx7['_onValidDropTimer'] = Ext['Function']['defer'](_0x9f6cx7['onValidDrop'], 10, _0x9f6cx7, _0x9f6cx6['ddCallbackArgs'])
				}
				else {
					_0x9f6cx7['onValidDrop']['apply'](_0x9f6cx7, _0x9f6cx6['ddCallbackArgs'])
				};
				_0x9f6cx2['fireEvent']('aftereventdrop', _0x9f6cx2, _0x9f6cx6['draggedRecords'])
			};
			_0x9f6cx7['afterDragFinalized']()
		}
		else {
			_0x9f6cx7['onInvalidDrop']['apply'](_0x9f6cx7, _0x9f6cx6['ddCallbackArgs'])
		}
	}
	, onInvalidDrop: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx7) {
		if (!_0x9f6cx5) {
			_0x9f6cx5 = _0x9f6cx3;
			_0x9f6cx3 = _0x9f6cx5['getTarget']() || document['body']
		};
		if (this['tip']) {
			this['tip']['hide']()
		};
		this['setVisibilityForSourceEvents'](true);
		var _0x9f6cx1 = this['schedulerView']
			, _0x9f6cx2 = this['callParent']([_0x9f6cx3, _0x9f6cx5, _0x9f6cx7]);
		_0x9f6cx1['fireEvent']('aftereventdrop', _0x9f6cx1, this['dragData']['draggedRecords']);
		this['afterDragFinalized']();
		return _0x9f6cx2
	}
	, resolveStartEndDates: function (_0x9f6cx6) {
		var _0x9f6cx1 = this['dragData']
			, _0x9f6cx3, _0x9f6cx7 = _0x9f6cx1['origStart']
			, _0x9f6cx2 = _0x9f6cx1['origEnd']
			, _0x9f6cx4 = Ext.ux.Scheduler['util']['Date'];
		if (!_0x9f6cx1['startsOutsideView']) {
			_0x9f6cx3 = this['schedulerView']['getStartEndDatesFromRegion'](_0x9f6cx6, 'round');
			if (_0x9f6cx3) {
				if (_0x9f6cx3['start'] && !this['schedulerView']['timeAxis']['dateInAxis'](_0x9f6cx3['start'], false)) {
					var _0x9f6cx5 = this['schedulerView']['timeAxis']['getTickFromDate'](_0x9f6cx3['start']);
					if (_0x9f6cx5) {
						_0x9f6cx3['start'] = this['schedulerView']['timeAxis']['getDateFromTick'](_0x9f6cx5)
					}
				};
				_0x9f6cx7 = _0x9f6cx3['start'] || _0x9f6cx1['startDate'];
				_0x9f6cx2 = _0x9f6cx4['add'](_0x9f6cx7, _0x9f6cx4.MILLI, _0x9f6cx1['duration'])
			}
		}
		else {
			if (!_0x9f6cx1['endsOutsideView']) {
				_0x9f6cx3 = this['schedulerView']['getStartEndDatesFromRegion'](_0x9f6cx6, 'round');
				if (_0x9f6cx3) {
					_0x9f6cx2 = _0x9f6cx3['end'] || _0x9f6cx1['endDate'];
					_0x9f6cx7 = _0x9f6cx4['add'](_0x9f6cx2, _0x9f6cx4.MILLI, -_0x9f6cx1['duration'])
				}
			}
		};
		return {
			startDate: _0x9f6cx7
			, endDate: _0x9f6cx2
		}
	}
});
Ext.define('Ext.ux.Scheduler.feature.DragDrop', {
	requires: ['Ext.XTemplate', 'Ext.ux.Scheduler.feature.SchedulerDragZone']
	, validatorFn: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5, _0x9f6cx7, _0x9f6cx3) {
		return true
	}
	, validatorFnScope: null
	, dragConfig: null
	, constructor: function (_0x9f6cx2, _0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1);
		this['schedulerView'] = _0x9f6cx2;
		_0x9f6cx2['eventDragZone'] = new Ext.ux.Scheduler['feature'].SchedulerDragZone(_0x9f6cx2['getEl'](), Ext['apply']({
			ddGroup: _0x9f6cx2['id']
			, schedulerView: _0x9f6cx2
			, validatorFn: this['validatorFn']
			, validatorFnScope: this['validatorFnScope']
		}, this['dragConfig']));
		this['schedulerView']['on']('destroy', this['cleanUp'], this);
		this['callParent']([_0x9f6cx1])
	}
	, cleanUp: function () {
		var _0x9f6cx1 = this['schedulerView'];
		if (_0x9f6cx1['eventDragZone']) {
			_0x9f6cx1['eventDragZone']['destroy']()
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.ScrollerEvents', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.scroll.Scroller'
	, minVersion: '6.0.2'
	, maxVersion: '6.5.0'
	, reportUrl: 'https://www.sencha.com/forum/showthread.php?334486-Please-add-xDelta-yDelta-to-scroller-s-scroll-scrollstart-scrollend-events&p=1169887#post1169887'
	, obsoleteTestName: 'patches/004_scroller_events.t.js'
	, description: ['Modifies scroller event firing routines to include xDelta, yDelta into', 'the scrollstart/scroll/scrollend event signatures'].join(' ')
	, overrides: {
		privates: {
			fireScrollStart: function (_0x9f6cx1, _0x9f6cx7, _0x9f6cx4, _0x9f6cx3) {
				var _0x9f6cx5 = this
					, _0x9f6cx2 = _0x9f6cx5['component'];
				_0x9f6cx5['invokePartners']('onPartnerScrollStart', _0x9f6cx1, _0x9f6cx7, _0x9f6cx4, _0x9f6cx3);
				if (_0x9f6cx5['hasListeners']['scrollstart']) {
					_0x9f6cx5['fireEvent']('scrollstart', _0x9f6cx5, _0x9f6cx1, _0x9f6cx7, _0x9f6cx4, _0x9f6cx3)
				};
				if (_0x9f6cx2 && _0x9f6cx2['onScrollStart']) {
					_0x9f6cx2['onScrollStart'](_0x9f6cx1, _0x9f6cx7)
				};
				Ext['GlobalEvents']['fireEvent']('scrollstart', _0x9f6cx5, _0x9f6cx1, _0x9f6cx7, _0x9f6cx4, _0x9f6cx3)
			}
			, fireScroll: function (_0x9f6cx1, _0x9f6cx7, _0x9f6cx4, _0x9f6cx3) {
				var _0x9f6cx5 = this
					, _0x9f6cx2 = _0x9f6cx5['component'];
				_0x9f6cx5['invokePartners']('onPartnerScroll', _0x9f6cx1, _0x9f6cx7, _0x9f6cx4, _0x9f6cx3);
				if (_0x9f6cx5['hasListeners']['scroll']) {
					_0x9f6cx5['fireEvent']('scroll', _0x9f6cx5, _0x9f6cx1, _0x9f6cx7, _0x9f6cx4, _0x9f6cx3)
				};
				if (_0x9f6cx2 && _0x9f6cx2['onScrollMove']) {
					_0x9f6cx2['onScrollMove'](_0x9f6cx1, _0x9f6cx7)
				};
				Ext['GlobalEvents']['fireEvent']('scroll', _0x9f6cx5, _0x9f6cx1, _0x9f6cx7, _0x9f6cx4, _0x9f6cx3)
			}
			, fireScrollEnd: function (_0x9f6cx1, _0x9f6cx7, _0x9f6cx4, _0x9f6cx3) {
				var _0x9f6cx5 = this
					, _0x9f6cx2 = _0x9f6cx5['component'];
				_0x9f6cx5['invokePartners']('onPartnerScrollEnd', _0x9f6cx1, _0x9f6cx7, _0x9f6cx4, _0x9f6cx3);
				if (_0x9f6cx5['hasListeners']['scrollend']) {
					_0x9f6cx5['fireEvent']('scrollend', _0x9f6cx5, _0x9f6cx1, _0x9f6cx7, _0x9f6cx4, _0x9f6cx3)
				};
				if (_0x9f6cx2 && _0x9f6cx2['onScrollEnd']) {
					_0x9f6cx2['onScrollEnd'](_0x9f6cx1, _0x9f6cx7)
				};
				Ext['GlobalEvents']['fireEvent']('scrollend', _0x9f6cx5, _0x9f6cx1, _0x9f6cx7, _0x9f6cx4, _0x9f6cx3)
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.feature.ResizeZone', {
	extend: 'Ext.util.Observable'
	, requires: ['Ext.resizer.Resizer', 'Ext.ux.Scheduler.tooltip.Tooltip', 'Ext.ux.Scheduler.util.ScrollManager', 'Ext.ux.Scheduler.patches.ScrollerEvents']
	, showTooltip: true
	, showExactResizePosition: false
	, validatorFn: Ext['emptyFn']
	, validatorFnScope: null
	, schedulerView: null
	, origEl: null
	, handlePos: null
	, eventRec: null
	, mouseDownEvent: null
	, tip: null
	, tipInstance: null
	, startScroll: null
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1);
		var _0x9f6cx2 = this['schedulerView'];
		_0x9f6cx2['on']({
			destroy: this['cleanUp']
			, scope: this
		});
		_0x9f6cx2['el']['on']({
			mousedown: this['onMouseDown']
			, mouseup: this['onMouseUp']
			, scope: this
			, delegate: '.sch-resizable-handle'
		});
		this['bindRightClickPreventer']();
		this['callParent'](arguments)
	}
	, bindRightClickPreventer: function () {
		var _0x9f6cx1;
		if (Ext['isIE9m']) {
			_0x9f6cx1 = 'mousedown'
		}
		else {
			_0x9f6cx1 = 'contextmenu'
		};
		var _0x9f6cx2 = {
			scope: this
			, priority: 999
		};
		_0x9f6cx2[_0x9f6cx1] = this['preventRightClick'];
		this['schedulerView']['el']['on'](_0x9f6cx2)
	}
	, preventRightClick: function (_0x9f6cx1) {
		if (_0x9f6cx1['button'] !== 0 && this['resizer']) {
			_0x9f6cx1['stopEvent']();
			return false
		}
	}
	, onMouseDown: function (_0x9f6cx7, _0x9f6cx1) {
		var _0x9f6cx2 = this['schedulerView'];
		var _0x9f6cx3 = this['eventRec'] = _0x9f6cx2['resolveEventRecord'](_0x9f6cx1);
		var _0x9f6cx5 = _0x9f6cx3['isResizable']();
		if (_0x9f6cx7['button'] !== 0 || (_0x9f6cx5 === false || typeof _0x9f6cx5 === 'string' && !_0x9f6cx1['className']['match'](_0x9f6cx5))) {
			return
		};
		this['eventRec'] = _0x9f6cx3;
		this['handlePos'] = this['getHandlePosition'](_0x9f6cx1);
		this['origEl'] = Ext['get'](_0x9f6cx7['getTarget']('.sch-event'));
		this['mouseDownEvent'] = _0x9f6cx7;
		_0x9f6cx2['el']['on']({
			mousemove: this['onMouseMove']
			, scope: this
			, single: true
		})
	}
	, onMouseUp: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = this['schedulerView'];
		_0x9f6cx2['el']['un']({
			mousemove: this['onMouseMove']
			, scope: this
			, single: true
		});
		this['mouseDownEvent'] = null
	}
	, getTipInstance: function () {
		if (this['tipInstance']) {
			return this['tipInstance']
		};
		var _0x9f6cx1 = this['schedulerView'];
		var _0x9f6cx2 = this['tip'];
		if (_0x9f6cx2 instanceof Ext['tip']['ToolTip']) {
			_0x9f6cx2['schedulerView'] = _0x9f6cx1
		}
		else {
			_0x9f6cx2 = new Ext.ux.Scheduler['tooltip'].Tooltip(Ext['apply']({
				rtl: this['rtl']
				, schedulerView: _0x9f6cx1
				, constrainTo: _0x9f6cx1['up']('grid')['el']
				, cls: 'sch-resize-tip'
			}, _0x9f6cx2))
		};
		return this['tipInstance'] = _0x9f6cx2
	}
	, onMouseMove: function (_0x9f6cx8, _0x9f6cx1) {
		var _0x9f6cx2 = this['schedulerView']
			, _0x9f6cx6 = this['eventRec']
			, _0x9f6cx3 = this['handlePos'];
		if (!_0x9f6cx6 || _0x9f6cx2['fireEvent']('beforeeventresize', _0x9f6cx2, _0x9f6cx6, _0x9f6cx8) === false) {
			return
		};
		delete this['eventRec'];
		_0x9f6cx8['stopEvent']();
		this['origEl']['addCls']('sch-event-resizing');
		this['resizer'] = this['createResizer'](this['origEl'], _0x9f6cx6, _0x9f6cx3);
		var _0x9f6cx5 = this['resizer']['resizeTracker'];
		if (this['showTooltip']) {
			var _0x9f6cx7 = this['getTipInstance']();
			_0x9f6cx7['update'](_0x9f6cx6['getStartDate'](), _0x9f6cx6['getEndDate'](), true);
			_0x9f6cx7['showForElement'](this['origEl'], _0x9f6cx8['getX']() - this['origEl']['getX']())
		};
		_0x9f6cx5['onMouseDown'](this['mouseDownEvent'], this['resizer'][_0x9f6cx3]['dom']);
		_0x9f6cx5['onMouseMove'](_0x9f6cx8, this['resizer'][_0x9f6cx3]['dom']);
		_0x9f6cx2['fireEvent']('eventresizestart', _0x9f6cx2, _0x9f6cx6);
		_0x9f6cx2['getScrollable']()['on']('scroll', this['onViewScroll'], this)
	}
	, getHandlePosition: function (_0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx2['className']['match']('start');
		if (this['schedulerView']['isHorizontal']()) {
			if (this['schedulerView']['rtl']) {
				return _0x9f6cx1 ? 'east' : 'west'
			};
			return _0x9f6cx1 ? 'west' : 'east'
		}
		else {
			return _0x9f6cx1 ? 'north' : 'south'
		}
	}
	, createResizer: function (_0x9f6cx3, _0x9f6cx8, _0x9f6cx5) {
		var _0x9f6cxd = this['schedulerView']
			, _0x9f6cx6 = this
			, _0x9f6cx7 = _0x9f6cxd['resolveResource'](_0x9f6cx3)
			, _0x9f6cxa = _0x9f6cxd['getSnapPixelAmount']()
			, _0x9f6cxe = _0x9f6cxd['getScheduleRegion'](_0x9f6cx7, _0x9f6cx8)
			, _0x9f6cx2 = _0x9f6cxd['getDateConstraints'](_0x9f6cx7, _0x9f6cx8)
			, _0x9f6cxb = _0x9f6cx3['getHeight']()
			, _0x9f6cx1 = (_0x9f6cxd['rtl'] && _0x9f6cx5[0] === 'e') || (!_0x9f6cxd['rtl'] && _0x9f6cx5[0] === 'w') || _0x9f6cx5[0] === 'n'
			, _0x9f6cx9 = !_0x9f6cxd['isHorizontal']()
			, _0x9f6cx4 = {
				otherEdgeX: _0x9f6cx1 ? _0x9f6cx3['getRight']() : _0x9f6cx3['getLeft']()
				, otherEdgeY: _0x9f6cx1 ? _0x9f6cx3['getBottom']() : _0x9f6cx3['getTop']()
				, target: _0x9f6cx3
				, isStart: _0x9f6cx1
				, dateConstraints: _0x9f6cx2
				, resourceRecord: _0x9f6cx7
				, eventRecord: _0x9f6cx8
				, handles: _0x9f6cx5[0]
				, minHeight: _0x9f6cxb
				, constrainTo: _0x9f6cxe
				, listeners: {
					resizedrag: this['partialResize']
					, resize: this['afterResize']
					, scope: this
				}
			};
		if (_0x9f6cx9) {
			if (_0x9f6cxa > 0) {
				var _0x9f6cxc = _0x9f6cx3['getWidth']();
				Ext['apply'](_0x9f6cx4, {
					minHeight: _0x9f6cxa
					, minWidth: _0x9f6cxc
					, maxWidth: _0x9f6cxc
					, heightIncrement: _0x9f6cxa
				})
			}
		}
		else {
			if (_0x9f6cxa > 0) {
				Ext['apply'](_0x9f6cx4, {
					minWidth: _0x9f6cxa
					, maxHeight: _0x9f6cxb
					, widthIncrement: _0x9f6cxa
				})
			}
		};
		var _0x9f6cx13 = new Ext['resizer'].Resizer(_0x9f6cx4);
		if (_0x9f6cx13['resizeTracker']) {
			_0x9f6cx13['resizeTracker']['tolerance'] = -1
		};
		_0x9f6cx3['setStyle']('z-index', parseInt(_0x9f6cx3['getStyle']('z-index'), 10) + 1);
		Ext.ux.Scheduler['util']['ScrollManager']['activate'](_0x9f6cxd, _0x9f6cxd['isHorizontal']() ? 'horizontal' : 'vertical');
		this['startScroll'] = _0x9f6cxd['getScroll']();
		return _0x9f6cx13
	}
	, getStartEndDates: function () {
		var _0x9f6cx4 = this['resizer']
			, _0x9f6cx3 = _0x9f6cx4['el']
			, _0x9f6cx6 = this['schedulerView']
			, _0x9f6cx5 = _0x9f6cx4['isStart']
			, _0x9f6cx8, _0x9f6cx2, _0x9f6cx1, _0x9f6cx7;
		if (_0x9f6cx5) {
			if (_0x9f6cx6['isHorizontal']()) {
				_0x9f6cx1 = _0x9f6cx6['rtl'] && _0x9f6cx6['shouldAdjustForRtl']() ? _0x9f6cx3['getRight']() : _0x9f6cx3['getLeft']() + 1;
				_0x9f6cx7 = [_0x9f6cx1, 0]
			}
			else {
				_0x9f6cx7 = [(_0x9f6cx3['getRight']() + _0x9f6cx3['getLeft']()) / 2, _0x9f6cx3['getTop']()]
			};
			_0x9f6cx2 = _0x9f6cx4['eventRecord']['getEndDate']();
			if (_0x9f6cx6['snapRelativeToEventStartDate']) {
				_0x9f6cx8 = _0x9f6cx6['getDateFromXY'](_0x9f6cx7);
				_0x9f6cx8 = _0x9f6cx6['timeAxis']['roundDate'](_0x9f6cx8, _0x9f6cx4['eventRecord']['getStartDate']())
			}
			else {
				_0x9f6cx8 = _0x9f6cx6['getDateFromXY'](_0x9f6cx7, 'round')
			}
		}
		else {
			if (_0x9f6cx6['isHorizontal']()) {
				_0x9f6cx1 = _0x9f6cx6['rtl'] && _0x9f6cx6['shouldAdjustForRtl']() ? _0x9f6cx3['getLeft']() : _0x9f6cx3['getRight']();
				_0x9f6cx7 = [_0x9f6cx1, 0]
			}
			else {
				_0x9f6cx7 = [(_0x9f6cx3['getRight']() + _0x9f6cx3['getLeft']()) / 2, _0x9f6cx3['getBottom']()]
			};
			_0x9f6cx8 = _0x9f6cx4['eventRecord']['getStartDate']();
			if (_0x9f6cx6['snapRelativeToEventStartDate']) {
				_0x9f6cx2 = _0x9f6cx6['getDateFromXY'](_0x9f6cx7);
				_0x9f6cx2 = _0x9f6cx6['timeAxis']['roundDate'](_0x9f6cx2, _0x9f6cx4['eventRecord']['getEndDate']())
			}
			else {
				_0x9f6cx2 = _0x9f6cx6['getDateFromXY'](_0x9f6cx7, 'round')
			}
		};
		_0x9f6cx8 = _0x9f6cx8 || _0x9f6cx4['start'];
		_0x9f6cx2 = _0x9f6cx2 || _0x9f6cx4['end'];
		if (_0x9f6cx4['dateConstraints']) {
			_0x9f6cx8 = Ext.ux.Scheduler['util']['Date']['constrain'](_0x9f6cx8, _0x9f6cx4['dateConstraints']['start'], _0x9f6cx4['dateConstraints']['end']);
			_0x9f6cx2 = Ext.ux.Scheduler['util']['Date']['constrain'](_0x9f6cx2, _0x9f6cx4['dateConstraints']['start'], _0x9f6cx4['dateConstraints']['end'])
		};
		return {
			start: _0x9f6cx8
			, end: _0x9f6cx2
		}
	}
	, partialResize: function (_0x9f6cxe, _0x9f6cx12, _0x9f6cxd, _0x9f6cx14) {
		var _0x9f6cx13 = this['schedulerView']
			, _0x9f6cx7 = _0x9f6cx14 ? _0x9f6cx14['getXY']() : this['resizer']['resizeTracker']['lastXY']
			, _0x9f6cxb = this['getStartEndDates'](_0x9f6cx7)
			, _0x9f6cx3 = _0x9f6cxb['start']
			, _0x9f6cx5 = _0x9f6cxb['end']
			, _0x9f6cx2 = _0x9f6cxe['eventRecord']
			, _0x9f6cx9 = _0x9f6cx13['isHorizontal']();
		if (this['showTooltip']) {
			var _0x9f6cxf = this['validatorFn']['call'](this['validatorFnScope'] || this, _0x9f6cxe['resourceRecord'], _0x9f6cx2, _0x9f6cx3, _0x9f6cx5);
			var _0x9f6cxa = '';
			if (_0x9f6cxf && typeof _0x9f6cxf !== 'boolean') {
				_0x9f6cxa = _0x9f6cxf['message'];
				_0x9f6cxf = _0x9f6cxf['valid']
			};
			this['getTipInstance']()['update'](_0x9f6cx3, _0x9f6cx5, _0x9f6cxf !== false, _0x9f6cxa)
		};
		if (this['showExactResizePosition']) {
			var _0x9f6cx17 = _0x9f6cxe['target']['el']
				, _0x9f6cx8, _0x9f6cxc, _0x9f6cx6;
			if (_0x9f6cxe['isStart']) {
				if (_0x9f6cx13['isWeekView']()) {
					var _0x9f6cx1 = _0x9f6cx13['weekview']['getEventColumns'](_0x9f6cx2)[0];
					_0x9f6cx8 = _0x9f6cx13['timeAxisViewModel']['getDistanceBetweenDates'](_0x9f6cx3, _0x9f6cx1['end'])
				}
				else {
					_0x9f6cx8 = _0x9f6cx13['timeAxisViewModel']['getDistanceBetweenDates'](_0x9f6cx3, _0x9f6cx2['getEndDate']())
				};
				if (_0x9f6cx9) {
					_0x9f6cxc = _0x9f6cx13['getDateFromCoordinate'](_0x9f6cxe['otherEdgeX'] - Math['min'](_0x9f6cx12, _0x9f6cxe['maxWidth'])) || _0x9f6cx3;
					_0x9f6cx6 = _0x9f6cx13['timeAxisViewModel']['getDistanceBetweenDates'](_0x9f6cxc, _0x9f6cx3);
					if (_0x9f6cx17['getWidth']() !== _0x9f6cx8) {
						_0x9f6cx17['setWidth'](_0x9f6cx8);
						_0x9f6cx17['setX'](_0x9f6cx17['getX']() + _0x9f6cx6)
					}
				}
				else {
					_0x9f6cxc = _0x9f6cx13['getDateFromCoordinate'](_0x9f6cxe['otherEdgeY'] - Math['min'](_0x9f6cxd, _0x9f6cxe['maxHeight'])) || _0x9f6cx3;
					_0x9f6cx6 = _0x9f6cx13['timeAxisViewModel']['getDistanceBetweenDates'](_0x9f6cxc, _0x9f6cx3);
					if (_0x9f6cx17['getHeight']() !== _0x9f6cx8) {
						_0x9f6cx17['setHeight'](_0x9f6cx8);
						_0x9f6cx17['setY'](_0x9f6cx17['getY']() + _0x9f6cx6)
					}
				}
			}
			else {
				_0x9f6cx8 = _0x9f6cx13['timeAxisViewModel']['getDistanceBetweenDates'](_0x9f6cx2['getStartDate'](), _0x9f6cx5);
				if (_0x9f6cx9) {
					_0x9f6cx17['setWidth'](_0x9f6cx8)
				}
				else {
					_0x9f6cx17['setHeight'](_0x9f6cx8)
				}
			}
		}
		else {
			if (!_0x9f6cx3 || !_0x9f6cx5 || ((_0x9f6cxe['start'] - _0x9f6cx3 === 0) && (_0x9f6cxe['end'] - _0x9f6cx5 === 0))) {
				return
			}
		};
		_0x9f6cxe['end'] = _0x9f6cx5;
		_0x9f6cxe['start'] = _0x9f6cx3;
		_0x9f6cx13['fireEvent']('eventpartialresize', _0x9f6cx13, _0x9f6cx2, _0x9f6cx3, _0x9f6cx5, _0x9f6cxe['el'])
	}
	, onViewScroll: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx3, _0x9f6cx5) {
		if (_0x9f6cx5 !== 0) {
			this['resizer']['resizeTracker']['onDrag']({});
			this['partialResize'](this['resizer'], 0, 0)
		}
	}
	, afterResize: function (_0x9f6cx2, _0x9f6cxd, _0x9f6cx9, _0x9f6cxc) {
		var _0x9f6cx13 = this
			, _0x9f6cxa = _0x9f6cx2['resourceRecord']
			, _0x9f6cxb = _0x9f6cx2['eventRecord']
			, _0x9f6cx7 = _0x9f6cxb['getStartDate']()
			, _0x9f6cx10 = _0x9f6cxb['getEndDate']()
			, _0x9f6cx5 = _0x9f6cx2['start'] || _0x9f6cx7
			, _0x9f6cx3 = _0x9f6cx2['end'] || _0x9f6cx10
			, _0x9f6cx12 = _0x9f6cx13['schedulerView']
			, _0x9f6cxf = false
			, _0x9f6cxe = true
			, _0x9f6cx1 = _0x9f6cx13['validatorFn']['call'](_0x9f6cx13['validatorFnScope'] || _0x9f6cx13, _0x9f6cxa, _0x9f6cxb, _0x9f6cx5, _0x9f6cx3, _0x9f6cxc);
		Ext.ux.Scheduler['util']['ScrollManager']['deactivate']();
		_0x9f6cx12['getScrollable']()['un']('scroll', this['onViewScroll'], this);
		if (this['showTooltip']) {
			this['getTipInstance']()['hide']()
		};
		var _0x9f6cx6 = {
			resourceRecord: _0x9f6cx2['resourceRecord']
			, eventRecord: _0x9f6cxb
			, start: _0x9f6cx5
			, end: _0x9f6cx3
			, finalize: function (_0x9f6cx4) {
				_0x9f6cx13['finalize'](_0x9f6cx4, _0x9f6cx6)
			}
		};
		if (_0x9f6cx1 && typeof _0x9f6cx1 !== 'boolean') {
			_0x9f6cx1 = _0x9f6cx1['valid']
		};
		if (_0x9f6cx5 && _0x9f6cx3 && (_0x9f6cx3 - _0x9f6cx5 > 0) && ((_0x9f6cx5 - _0x9f6cx7 !== 0) || (_0x9f6cx3 - _0x9f6cx10 !== 0)) && _0x9f6cx1 !== false) {
			_0x9f6cxe = _0x9f6cx12['fireEvent']('beforeeventresizefinalize', _0x9f6cx13, _0x9f6cx6, _0x9f6cxc) !== false;
			_0x9f6cxf = true
		}
		else {
			_0x9f6cx12['repaintEventsForResource'](_0x9f6cxa)
		};
		if (_0x9f6cxe) {
			_0x9f6cx13['finalize'](_0x9f6cxf, _0x9f6cx6)
		}
	}
	, finalize: function (_0x9f6cx1, _0x9f6cx4) {
		var _0x9f6cx2 = this['schedulerView'];
		var _0x9f6cx3 = false;
		var _0x9f6cx5 = function () {
			_0x9f6cx3 = true
		};
		_0x9f6cx2['getEventStore']()['on']('update', _0x9f6cx5);
		this['resizer']['target']['destroy']();
		if (Ext['isIE']) {
			document['body']['focus']()
		};
		if (_0x9f6cx1) {
			if (this['resizer']['isStart']) {
				_0x9f6cx4['eventRecord']['setStartDate'](_0x9f6cx4['start'], false, _0x9f6cx2['getEventStore']()['skipWeekendsDuringDragDrop'])
			}
			else {
				_0x9f6cx4['eventRecord']['setEndDate'](_0x9f6cx4['end'], false, _0x9f6cx2['getEventStore']()['skipWeekendsDuringDragDrop'])
			};
			if (!_0x9f6cx3) {
				_0x9f6cx2['repaintEventsForResource'](_0x9f6cx4['resourceRecord'])
			}
		}
		else {
			_0x9f6cx2['repaintEventsForResource'](_0x9f6cx4['resourceRecord'])
		};
		this['resizer']['destroy']();
		delete this['resizer'];
		_0x9f6cx2['getEventStore']()['un']('update', _0x9f6cx5);
		_0x9f6cx2['fireEvent']('eventresizeend', _0x9f6cx2, _0x9f6cx4['eventRecord'])
	}
	, cleanUp: function () {
		if (this['tipInstance']) {
			this['tipInstance']['destroy']()
		};
		this['mouseDownEvent'] = null
	}
});
Ext.define('Ext.ux.Scheduler.column.Resource', {
	extend: 'Ext.grid.Column'
	, alias: 'widget.resourcecolumn'
	, align: 'center'
	, menuDisabled: true
	, hideable: false
	, sortable: false
	, locked: false
	, lockable: false
	, draggable: false
	, enableLocking: false
	, cellFocusable: false
	, model: null
	, initComponent: function () {
		this['tdCls'] = (this['tdCls'] || '') + ' sch-timetd';
		this['cls'] = (this['cls'] || '') + ' sch-resourcecolumn-header';
		this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Scheduler.column.Day', {
	extend: 'Ext.grid.column.Column'
	, alias: 'widget.weekview-day'
	, align: 'center'
	, start: null
	, end: null
	, draggable: false
	, groupable: false
	, hideable: false
	, sortable: false
	, menuDisabled: true
	, enableLocking: false
	, lockable: false
	, flex: 1
	, resizable: false
	, cellFocusable: false
	, tdCls: 'sch-timetd'
	, initComponent: function () {
		var _0x9f6cx1 = new Date();
		this['addCls']('sch-daycolumn-header');
		if (this['isWeekend']()) {
			this['addCls']('sch-daycolumn-header-weekend');
			this['tdCls'] = (this['tdCls'] || '') + ' sch-daycolumn-weekend'
		};
		if (this['start']['getDate']() === _0x9f6cx1['getDate']() && this['start']['getMonth']() === _0x9f6cx1['getMonth']() && this['start']['getYear']() === _0x9f6cx1['getYear']()) {
			this['addCls']('sch-daycolumn-header-today');
			this['tdCls'] = (this['tdCls'] || '') + ' sch-daycolumn-today'
		};
		this['callParent'](arguments)
	}
	, isWeekend: function () {
		var _0x9f6cx1 = this['start']['getDay']();
		return _0x9f6cx1 === 6 || _0x9f6cx1 === 0
	}
});
Ext.define('Ext.ux.Scheduler.view.WeekView', {
	requires: ['Ext.util.Region']
	, view: null
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1)
	}
	, getElementsFromEventRecord: function (_0x9f6cx2, _0x9f6cx4, _0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx1 = this['view']
			, _0x9f6cx7;
		_0x9f6cx5 = _0x9f6cx5 || false;
		if (_0x9f6cx3 !== null && _0x9f6cx3 !== undefined) {
			_0x9f6cx7 = '[id^=' + _0x9f6cx1['eventPrefix'] + _0x9f6cx2['internalId'] + '-calendar-' + _0x9f6cx3 + '-]'
		}
		else {
			_0x9f6cx7 = '[id^=' + _0x9f6cx1['eventPrefix'] + _0x9f6cx2['internalId'] + '-calendar-]'
		};
		return _0x9f6cx1['getEl']()['query'](_0x9f6cx7, _0x9f6cx5)
	}
	, getColumnsBy: function (_0x9f6cx2, _0x9f6cx4) {
		var _0x9f6cx3 = this['view']['panel']['headerCt']['getGridColumns']();
		var _0x9f6cx1 = [];
		for (var _0x9f6cx5 = 0; _0x9f6cx5 < _0x9f6cx3['length']; _0x9f6cx5++) {
			if (_0x9f6cx2['call'](this, _0x9f6cx3[_0x9f6cx5])) {
				if (_0x9f6cx4 !== true) {
					_0x9f6cx1['push'](_0x9f6cx3[_0x9f6cx5])
				}
				else {
					_0x9f6cx1['push']({
						column: _0x9f6cx3[_0x9f6cx5]
						, index: _0x9f6cx5
					})
				}
			}
		};
		return _0x9f6cx1
	}
	, getColumnsForDateRange: function (_0x9f6cx1, _0x9f6cx2) {
		return this['getColumnsBy'](function (_0x9f6cx5) {
			return !(_0x9f6cx1['getEndDate']() <= _0x9f6cx5['start'] || _0x9f6cx1['getStartDate']() >= _0x9f6cx5['end'])
		}, _0x9f6cx2)
	}
	, getColumnEvents: function (_0x9f6cx2) {
		var _0x9f6cx1 = [];
		this['view']['getEventStore']()['each'](function (_0x9f6cx5) {
			if (!(_0x9f6cx5['getEndDate']() <= _0x9f6cx2['start'] || _0x9f6cx5['getStartDate']() >= _0x9f6cx2['end'])) {
				_0x9f6cx1['push'](_0x9f6cx5)
			}
		});
		return _0x9f6cx1
	}
	, getColumnsByResource: function (_0x9f6cx2, _0x9f6cx1) {
		return this['getColumnsBy'](function (_0x9f6cx5) {
			return _0x9f6cx5['start'] == _0x9f6cx2['start']
		}, _0x9f6cx1)[0]
	}
	, translateToScheduleCoordinate: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['view'];
		if (Ext['isArray'](_0x9f6cx2)) {
			return [_0x9f6cx2[0] - _0x9f6cx1['getEl']()['getX']() + _0x9f6cx1['getHorizontalScroll'](), _0x9f6cx2[1] - _0x9f6cx1['getViewContainerElementTop']() + _0x9f6cx1['getVerticalScroll']()]
		}
		else {
			return _0x9f6cx2 - _0x9f6cx1['getViewContainerElementTop']() + _0x9f6cx1['getVerticalScroll']()
		}
	}
	, translateToPageCoordinate: function (_0x9f6cx5) {
		var _0x9f6cx1 = this['view'];
		var _0x9f6cx2 = _0x9f6cx1['getEl']();
		if (Ext['isArray'](_0x9f6cx5)) {
			return [_0x9f6cx5[0] + _0x9f6cx2['getX']() - _0x9f6cx1['getHorizontalScroll'](), _0x9f6cx5[1] + _0x9f6cx1['getViewContainerElementTop']() - _0x9f6cx1['getVerticalScroll']()]
		}
		else {
			return _0x9f6cx5 + _0x9f6cx1['getViewContainerElementTop']() - _0x9f6cx1['getVerticalScroll']()
		}
	}
	, getDateFromXY: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx3 = _0x9f6cx5;
		if (!_0x9f6cx1) {
			_0x9f6cx3 = this['translateToScheduleCoordinate'](_0x9f6cx3)
		};
		return this['view']['timeAxisViewModel']['getDateFromPosition'](_0x9f6cx3, _0x9f6cx2)
	}
	, getEventRenderData: function (_0x9f6cx1, _0x9f6cx2, _0x9f6cx8) {
		var _0x9f6cx9 = _0x9f6cx1['getStartDate']()
			, _0x9f6cx6 = _0x9f6cx1['getEndDate']()
			, _0x9f6cxa = this['view']
			, _0x9f6cx5 = _0x9f6cxa['panel']['headerCt']['getGridColumns']()
			, _0x9f6cx7 = _0x9f6cx5[_0x9f6cx8]['start']
			, _0x9f6cx13 = _0x9f6cx5[_0x9f6cx8]['end']
			, _0x9f6cxc = Math;
		var _0x9f6cx4 = Math['floor'](_0x9f6cxa['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cx9, _0x9f6cx7)));
		var _0x9f6cxb = Math['floor'](_0x9f6cxa['timeAxisViewModel']['getPositionFromDate'](Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cx6, _0x9f6cx13), true));
		var _0x9f6cx3;
		if (_0x9f6cxb === 0) {
			_0x9f6cxb = _0x9f6cxa['getStore']()['getCount']() * _0x9f6cxa['getRowHeight']()
		};
		_0x9f6cx3 = {
			top: _0x9f6cxc['max'](0, _0x9f6cxc['min'](_0x9f6cx4, _0x9f6cxb) - _0x9f6cxa['eventBorderWidth'])
			, height: _0x9f6cxc['max'](1, _0x9f6cxc['abs'](_0x9f6cx4 - _0x9f6cxb))
		};
		_0x9f6cx3['start'] = _0x9f6cx9;
		_0x9f6cx3['end'] = _0x9f6cx6;
		_0x9f6cx3['startsOutsideView'] = _0x9f6cx9 < _0x9f6cx7;
		_0x9f6cx3['endsOutsideView'] = _0x9f6cx6 > _0x9f6cx13;
		return _0x9f6cx3
	}
	, getScheduleRegion: function (_0x9f6cx7, _0x9f6cx5) {
		var _0x9f6cx2 = this['view']
			, _0x9f6cx8 = _0x9f6cx7 ? this['getColumnsByResource'](_0x9f6cx7)['getRegion']() : _0x9f6cx2['getTableRegion']()
			, _0x9f6cx1 = this['translateToPageCoordinate'](0)
			, _0x9f6cx4 = this['translateToPageCoordinate'](_0x9f6cx2['getStore']()['getCount']() * _0x9f6cx2['getRowHeight']())
			, _0x9f6cx6 = _0x9f6cx8['left'] + _0x9f6cx2['barMargin']
			, _0x9f6cx3 = _0x9f6cx8['right'] - _0x9f6cx2['barMargin'];
		return new Ext['util'].Region(Math['min'](_0x9f6cx1, _0x9f6cx4), _0x9f6cx3, Math['max'](_0x9f6cx1, _0x9f6cx4), _0x9f6cx6)
	}
	, getWeekViewColumnWidth: function () {
		return this['view']['timeAxisViewModel']['weekViewColumnWidth']
	}
	, getResourceRegion: function (_0x9f6cx8, _0x9f6cx2, _0x9f6cx6) {
		var _0x9f6cxc = this['view']
			, _0x9f6cx4 = _0x9f6cxc['getResourceStore']()['indexOf'](_0x9f6cx8) * this['getWeekViewColumnWidth']()
			, _0x9f6cx9 = _0x9f6cxc['timeAxis']['getStart']()
			, _0x9f6cxb = _0x9f6cxc['timeAxis']['getEnd']()
			, _0x9f6cx1 = _0x9f6cx2 ? Ext.ux.Scheduler['util']['Date']['max'](_0x9f6cx9, _0x9f6cx2) : _0x9f6cx9
			, _0x9f6cx3 = _0x9f6cx6 ? Ext.ux.Scheduler['util']['Date']['min'](_0x9f6cxb, _0x9f6cx6) : _0x9f6cxb
			, _0x9f6cx7 = Math['max'](0, _0x9f6cxc['getCoordinateFromDate'](_0x9f6cx1) - _0x9f6cxc['cellTopBorderWidth'])
			, _0x9f6cx13 = _0x9f6cxc['getCoordinateFromDate'](_0x9f6cx3) - _0x9f6cxc['cellTopBorderWidth']
			, _0x9f6cx5 = _0x9f6cx4 + _0x9f6cxc['cellBorderWidth']
			, _0x9f6cxa = _0x9f6cx4 + this['getWeekViewColumnWidth']() - _0x9f6cxc['cellBorderWidth'];
		return new Ext['util'].Region(Math['min'](_0x9f6cx7, _0x9f6cx13), _0x9f6cxa, Math['max'](_0x9f6cx7, _0x9f6cx13), _0x9f6cx5)
	}
	, columnRenderer: function (_0x9f6cx3, _0x9f6cxe, _0x9f6cx6, _0x9f6cx8, _0x9f6cxb) {
		var _0x9f6cxc = this['view'];
		var _0x9f6cx5 = '';
		if (_0x9f6cx8 === 0) {
			var _0x9f6cxa, _0x9f6cx2, _0x9f6cx7, _0x9f6cx4;
			_0x9f6cxa = [];
			_0x9f6cx2 = this['getColumnEvents'](_0x9f6cxe['column']);
			for (_0x9f6cx7 = 0, _0x9f6cx4 = _0x9f6cx2['length']; _0x9f6cx7 < _0x9f6cx4; _0x9f6cx7++) {
				var _0x9f6cx1 = _0x9f6cx2[_0x9f6cx7];
				_0x9f6cxa['push'](_0x9f6cxc['generateTplData'](_0x9f6cx1, _0x9f6cx1['getResources']()[0], _0x9f6cxb))
			};
			if (_0x9f6cxe['column']['rendered'] && this['getWeekViewColumnWidth']() !== _0x9f6cxe['column']['getWidth']()) {
				this['setColumnWidth'](_0x9f6cxe['column']['getWidth'](), true)
			};
			_0x9f6cxc['eventLayout']['vertical']['applyLayout'](_0x9f6cxa, this['getWeekViewColumnWidth']() - (2 * _0x9f6cxc['barMargin']) - _0x9f6cxc['cellBorderWidth']);
			_0x9f6cx5 = '&#160;' + _0x9f6cxc['eventTpl']['apply'](_0x9f6cxa)
		};
		if (_0x9f6cxb % 2 === 1) {
			_0x9f6cxe['tdCls'] = (_0x9f6cxe['tdCls'] || '') + ' ' + _0x9f6cxc['altColCls'];
			_0x9f6cxe['cellCls'] = (_0x9f6cxe['cellCls'] || '') + ' ' + _0x9f6cxc['altColCls']
		};
		return _0x9f6cx5
	}
	, resolveResource: function (_0x9f6cx3) {
		var _0x9f6cx1 = this['view'];
		_0x9f6cx3 = Ext['fly'](_0x9f6cx3)['is'](_0x9f6cx1['timeCellSelector']) ? _0x9f6cx3 : Ext['fly'](_0x9f6cx3)['up'](_0x9f6cx1['timeCellSelector']);
		if (_0x9f6cx3) {
			var _0x9f6cx4 = _0x9f6cx3['dom'] ? _0x9f6cx3['dom'] : _0x9f6cx3;
			var _0x9f6cx2 = 0;
			if (Ext['isIE8m']) {
				_0x9f6cx4 = _0x9f6cx4['previousSibling'];
				while (_0x9f6cx4) {
					if (_0x9f6cx4['nodeType'] === 1) {
						_0x9f6cx2++
					};
					_0x9f6cx4 = _0x9f6cx4['previousSibling']
				}
			}
			else {
				_0x9f6cx2 = Ext['Array']['indexOf'](Array['prototype']['slice']['call'](_0x9f6cx4['parentNode']['children']), _0x9f6cx4)
			};
			if (_0x9f6cx2 >= 0) {
				var _0x9f6cx5 = _0x9f6cx1['panel']['headerCt']['getGridColumns']()[_0x9f6cx2];
				return {
					start: _0x9f6cx5['start']
					, end: _0x9f6cx5['end']
				}
			}
		}
	}
	, onEventUpdate: function (_0x9f6cx2, _0x9f6cx5) {
		if (!this['view']['headerCt']['items']['get'](0)['rendered']) {
			return
		};
		this['renderSingle'](_0x9f6cx5);
		var _0x9f6cx1 = this['view'];
		var _0x9f6cx3 = _0x9f6cx1['getEventSelectionModel']();
		_0x9f6cx3['forEachEventRelatedSelection'](_0x9f6cx5, function (_0x9f6cx4) {
			_0x9f6cx1['onEventBarSelect'](_0x9f6cx4)
		})
	}
	, onEventAdd: function (_0x9f6cx2, _0x9f6cx5) {
		if (!this['view']['headerCt']['items']['get'](0)['rendered']) {
			return
		};
		var _0x9f6cx1 = this['view'];
		if (_0x9f6cx5['length'] === 1) {
			this['renderSingle'](_0x9f6cx5[0])
		}
		else {
			_0x9f6cx1['repaintAllEvents']()
		}
	}
	, onEventRemove: function (_0x9f6cx2, _0x9f6cx5) {
		if (!this['view']['headerCt']['items']['get'](0)['rendered']) {
			return
		};
		var _0x9f6cx1 = this['view'];
		if (_0x9f6cx5['length'] === 1) {
			Ext['Array']['each'](_0x9f6cx1['getElementsFromEventRecord'](_0x9f6cx5[0]), function (_0x9f6cx3) {
				Ext['fly'](_0x9f6cx3)['destroy']()
			});
			this['relayoutRenderedEvents'](_0x9f6cx5[0])
		}
		else {
			_0x9f6cx1['repaintAllEvents']()
		}
	}
	, relayoutRenderedEvents: function (_0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['getColumnsForDateRange'](_0x9f6cx2, true);
		Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cx3) {
			_0x9f6cx5['repaintEventsForColumn'](_0x9f6cx3['column'], _0x9f6cx3['index'])
		})
	}
	, renderSingle: function (_0x9f6cx4) {
		var _0x9f6cx1 = this['view'];
		Ext['Array']['each'](_0x9f6cx1['getElementsFromEventRecord'](_0x9f6cx4), function (_0x9f6cx6) {
			Ext['fly'](_0x9f6cx6)['destroy']()
		});
		var _0x9f6cx3 = _0x9f6cx4['previous'] || {};
		var _0x9f6cx2 = Ext.ux.Scheduler['util']['Date'];
		var _0x9f6cx7 = new Ext.ux.Scheduler['model'].Range({
			StartDate: _0x9f6cx2['min'](_0x9f6cx3['StartDate'] || _0x9f6cx4['getStartDate'](), _0x9f6cx4['getStartDate']())
			, EndDate: _0x9f6cx2['max'](_0x9f6cx3['EndDate'] || _0x9f6cx4['getEndDate'](), _0x9f6cx4['getEndDate']())
		});
		var _0x9f6cx5 = this['getColumnsForDateRange'](_0x9f6cx7);
		Ext['Array']['each'](_0x9f6cx5, function (_0x9f6cxc) {
			var _0x9f6cx9 = _0x9f6cxc['getIndex']();
			var _0x9f6cx8 = this['getColumnEvents'](_0x9f6cxc);
			var _0x9f6cx6 = Ext['Array']['map'](_0x9f6cx8, function (_0x9f6cxa) {
				if (_0x9f6cxa === _0x9f6cx4) {
					return _0x9f6cx1['generateTplData'](_0x9f6cx4, _0x9f6cx4['getResources']()[0], _0x9f6cx9)
				}
				else {
					return {
						start: _0x9f6cxa['getStartDate']() < _0x9f6cxc['start'] ? _0x9f6cxc['start'] : _0x9f6cxa['getStartDate']()
						, end: _0x9f6cxa['getEndDate']() > _0x9f6cxc['end'] ? _0x9f6cxc['end'] : _0x9f6cxa['getEndDate']()
						, event: _0x9f6cxa
					}
				}
			});
			_0x9f6cx1['eventLayout']['vertical']['applyLayout'](_0x9f6cx6, _0x9f6cxc['getWidth']() - (2 * _0x9f6cx1['barMargin']) - _0x9f6cx1['cellBorderWidth']);
			Ext['Array']['each'](_0x9f6cx6, function (_0x9f6cxb) {
				if (_0x9f6cxb['event'] === _0x9f6cx4) {
					var _0x9f6cx13 = _0x9f6cx1['getScheduleCell'](0, _0x9f6cx9);
					if (_0x9f6cx13) {
						if (!Ext['versions']['touch']) {
							_0x9f6cx13 = Ext['fly'](_0x9f6cx13)['first']()
						};
						_0x9f6cx1['eventTpl']['append'](_0x9f6cx13, [_0x9f6cxb])
					}
				}
				else {
					var _0x9f6cxa = _0x9f6cx1['getElementsFromEventRecord'](_0x9f6cxb['event'], null, _0x9f6cx9)[0];
					if (_0x9f6cxa) {
						_0x9f6cxa['setStyle']({
							left: _0x9f6cxb['left'] + 'px'
							, width: Math['max'](_0x9f6cxb['width'], 0) + 'px'
						})
					}
				}
			})
		}, this)
	}
	, repaintEventsForColumn: function (_0x9f6cx4, _0x9f6cxb) {
		var _0x9f6cxe = this;
		var _0x9f6cxf = _0x9f6cxe['getColumnEvents'](_0x9f6cx4);
		var _0x9f6cxd = _0x9f6cxe['view'];
		var _0x9f6cx8 = []
			, _0x9f6cxc, _0x9f6cx7, _0x9f6cx1, _0x9f6cx3, _0x9f6cx5, _0x9f6cx6;
		for (_0x9f6cxc = 0, _0x9f6cx7 = _0x9f6cxf['length']; _0x9f6cxc < _0x9f6cx7; _0x9f6cxc++) {
			_0x9f6cx1 = _0x9f6cxf[_0x9f6cxc];
			_0x9f6cx3 = _0x9f6cxd['getElementsFromEventRecord'](_0x9f6cx1)[0];
			if (!_0x9f6cx3) {
				return
			};
			var _0x9f6cxa = _0x9f6cx3['id']['split']('-');
			_0x9f6cxa['pop']();
			_0x9f6cx5 = _0x9f6cx1['getStartDate']();
			_0x9f6cx6 = _0x9f6cx1['getEndDate']();
			_0x9f6cx8['push']({
				start: _0x9f6cx5 < _0x9f6cx4['start'] ? _0x9f6cx4['start'] : _0x9f6cx5
				, end: _0x9f6cx6 > _0x9f6cx4['end'] ? _0x9f6cx4['end'] : _0x9f6cx6
				, event: _0x9f6cx1
				, id: _0x9f6cxa.join('-')
			})
		};
		_0x9f6cxd['eventLayout']['vertical']['applyLayout'](_0x9f6cx8, _0x9f6cx4['getWidth']() - (2 * _0x9f6cxd['barMargin']) - _0x9f6cxd['cellBorderWidth']);
		var _0x9f6cx2 = _0x9f6cxd['getNode'](0);
		for (_0x9f6cxc = 0; _0x9f6cxc < _0x9f6cx8['length']; _0x9f6cxc++) {
			_0x9f6cx1 = _0x9f6cx8[_0x9f6cxc];
			_0x9f6cx3 = Ext['DomQuery']['selectNode']('td:nth-child(' + (_0x9f6cxb + 1) + ') [id^=' + _0x9f6cx1['id'] + '-]', _0x9f6cx2);
			_0x9f6cx3 && Ext['fly'](_0x9f6cx3)['setStyle']({
				left: _0x9f6cx1['left'] + 'px'
				, width: Math['max'](_0x9f6cx1['width'], 0) + 'px'
			})
		}
	}
	, getTimeSpanRegion: function (_0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx7 = this['view']
			, _0x9f6cx5 = _0x9f6cx7['getCoordinateFromDate'](_0x9f6cx1)
			, _0x9f6cx6 = _0x9f6cx3 ? _0x9f6cx7['timeAxisViewModel']['getPositionFromDate'](_0x9f6cx3, true) : _0x9f6cx5;
		var _0x9f6cx2 = this['getColumnsBy'](function (_0x9f6cxc) {
			return _0x9f6cxc['start'] <= _0x9f6cx1 && _0x9f6cxc['end'] > _0x9f6cx1
		})[0];
		var _0x9f6cx4 = this['getColumnsBy'](function (_0x9f6cxc) {
			return _0x9f6cxc['start'] < _0x9f6cx3 && _0x9f6cxc['end'] >= _0x9f6cx3
		})[0];
		if (!_0x9f6cx2 || !_0x9f6cx4 || !_0x9f6cx2['rendered'] || !_0x9f6cx4['rendered']) {
			return new Ext['util'].Region(-1, 0, -1, 0)
		};
		var _0x9f6cx9 = this['translateToScheduleCoordinate']([_0x9f6cx2['getX'](), 0]);
		var _0x9f6cx8 = this['translateToScheduleCoordinate']([_0x9f6cx4 ? _0x9f6cx4['getRegion']()['right'] : _0x9f6cx2['getWidth']() + _0x9f6cx9[0], 0]);
		return new Ext['util'].Region(Math['min'](_0x9f6cx5, _0x9f6cx6), _0x9f6cx8[0], Math['max'](_0x9f6cx5, _0x9f6cx6), _0x9f6cx9[0])
	}
	, getStartEndDatesFromRegion: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this['view']['getDateFromCoordinate']([_0x9f6cx5['left'], _0x9f6cx5['top']], _0x9f6cx2)
			, _0x9f6cx3 = this['view']['getDateFromCoordinate']([_0x9f6cx5['left'], _0x9f6cx5['bottom']], _0x9f6cx2);
		if (_0x9f6cx1 && _0x9f6cx3) {
			return {
				start: _0x9f6cx1
				, end: _0x9f6cx3
			}
		}
		else {
			return null
		}
	}
	, setColumnWidth: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this['view'];
		_0x9f6cx1['weekViewColumnWidth'] = _0x9f6cx5;
		_0x9f6cx1['getTimeAxisViewModel']()['setViewColumnWidth'](_0x9f6cx5, _0x9f6cx2)
	}
	, getVisibleDateRange: function () {
		var _0x9f6cx4 = this['view'];
		if (!_0x9f6cx4['rendered']) {
			return null
		};
		var _0x9f6cx5 = _0x9f6cx4['getScroll']()
			, _0x9f6cx2 = _0x9f6cx4['getViewContainerHeight']()
			, _0x9f6cx3 = _0x9f6cx4['getTableRegion']()
			, _0x9f6cx7 = _0x9f6cx4['timeAxis']['getEnd']();
		if (_0x9f6cx3['bottom'] - _0x9f6cx3['top'] < _0x9f6cx2) {
			var _0x9f6cx1 = _0x9f6cx4['timeAxis']['getStart']();
			return {
				startDate: _0x9f6cx1
				, endDate: _0x9f6cx7
			}
		};
		return {
			startDate: _0x9f6cx4['getDateFromCoordinate'](_0x9f6cx5['top'], null, true)
			, endDate: _0x9f6cx4['getDateFromCoordinate'](_0x9f6cx5['top'] + _0x9f6cx2, null, true) || _0x9f6cx7
		}
	}
	, getItemBox: function (_0x9f6cx1) {
		return null
	}
	, getConnectorStartSide: function (_0x9f6cx1) {
		return 'top'
	}
	, getConnectorEndSide: function (_0x9f6cx1) {
		return 'bottom'
	}
});
Ext.define('Ext.ux.Scheduler.mixin.SchedulerView', {
	extend: 'Ext.ux.Scheduler.mixin.AbstractSchedulerView'
	, mixins: ['Ext.ux.Scheduler.mixin.Localizable']
	, requires: ['Ext.ux.Scheduler.patches.DragDropManager', 'Ext.ux.Scheduler.patches.NavigationModel', 'Ext.ux.Scheduler.patches.NavigationModel6_0_2', 'Ext.ux.Scheduler.feature.DragCreator', 'Ext.ux.Scheduler.feature.DragDrop', 'Ext.ux.Scheduler.feature.ResizeZone', 'Ext.ux.Scheduler.column.Resource', 'Ext.ux.Scheduler.column.Day', 'Ext.ux.Scheduler.view.WeekView', 'Ext.XTemplate']
	, eventResizeHandles: 'end'
	, dndValidatorFn: Ext['emptyFn']
	, resizeValidatorFn: Ext['emptyFn']
	, createValidatorFn: Ext['emptyFn']
	, weekViewClass: 'Ext.ux.Scheduler.view.WeekView'
	, lockedGridDependsOnSchedule: null
	, _initializeSchedulerView: function () {
		this['callParent'](arguments);
		this['on']({
			destroy: this['_destroy']
			, afterrender: this['_afterRender']
			, itemupdate: this['onRowUpdated']
			, scope: this
		});
		this['timeAxis']['on']('beginreconfigure', this['clearRowHeightCache'], this);
		if (Ext['getVersion']()['isGreaterThan']('5.1.1')) {
			this['on']('itemadd', function (_0x9f6cx2) {
				var _0x9f6cx5 = this['all']['item'](this['all']['endIndex'] - _0x9f6cx2['length']);
				if (_0x9f6cx5) {
					_0x9f6cx5['dom']['style']['height'] = ''
				}
			})
		};
		var _0x9f6cx1 = this;
		if (!this['eventPrefix']) {
			throw 'eventPrefix missing'
		};
		this['on']({
			resourcestorechange: this['clearRowHeightCache']
			, assignmentstorechange: this['clearRowHeightCache']
			, eventstorechange: this['clearRowHeightCache']
			, scope: this
		})
	}
	, inheritables: function () {
		return {
			loadingText: this.L('loadingText')
			, overItemCls: ''
			, trackOver: false
			, selectedItemCls: ''
			, setReadOnly: function (_0x9f6cx1) {
				if (this['dragCreator']) {
					this['dragCreator']['setDisabled'](_0x9f6cx1)
				};
				this['callParent'](arguments)
			}
			, repaintEventsForResource: function (_0x9f6cx4, _0x9f6cx5) {
				var _0x9f6cx3 = this
					, _0x9f6cx7 = _0x9f6cx3['isHorizontal']()
					, _0x9f6cx1 = _0x9f6cx7 ? _0x9f6cx3['indexOf'](_0x9f6cx4) : 0;
				if (_0x9f6cx7) {
					_0x9f6cx3['eventLayout']['horizontal']['clearCache'](_0x9f6cx4)
				};
				if (_0x9f6cx1 >= 0) {
					Ext['suspendLayouts']();
					if (_0x9f6cx7) {
						_0x9f6cx3['refreshNode'](_0x9f6cx4);
						if (_0x9f6cx3['lockedGridDependsOnSchedule']) {
							_0x9f6cx3['lockingPartner']['refreshNode'](_0x9f6cx4)
						}
					}
					else {
						_0x9f6cx3['refreshNode'](_0x9f6cx1)
					};
					Ext['resumeLayouts']();
					if (_0x9f6cx5) {
						var _0x9f6cx6 = _0x9f6cx3['getEventSelectionModel']();
						var _0x9f6cx2 = _0x9f6cx3['getEventStore']()['getEventsForResource'](_0x9f6cx4);
						Ext['Array']['each'](_0x9f6cx2, function (_0x9f6cx8) {
							_0x9f6cx6['forEachEventRelatedSelection'](_0x9f6cx8, function (_0x9f6cx9) {
								_0x9f6cx3['onEventBarSelect'](_0x9f6cx9, true)
							})
						})
					}
				}
			}
			, repaintAllEvents: function () {
				if (this['isHorizontal']()) {
					this['refreshView']()
				}
				else {
					this['refreshNode'](0)
				}
			}
			, handleScheduleEvent: function (_0x9f6cx6) {
				var _0x9f6cx1 = _0x9f6cx6['getTarget']('.' + this['eventCls'], 3)
					, _0x9f6cxc = !_0x9f6cx1 && _0x9f6cx6['getTarget']('.' + this['timeCellCls'], 3);
				if (_0x9f6cxc) {
					var _0x9f6cxa = this['getDateFromDomEvent'](_0x9f6cx6, 'floor');
					var _0x9f6cx9 = this['findRowByChild'](_0x9f6cxc);
					var _0x9f6cx7 = this['indexOf'](_0x9f6cx9);
					var _0x9f6cx2;
					if (this['isHorizontal']()) {
						_0x9f6cx2 = this['getRecordForRowNode'](_0x9f6cx9)
					}
					else {
						var _0x9f6cx5 = _0x9f6cx6['getTarget'](this['timeCellSelector'], 5);
						if (_0x9f6cx5) {
							var _0x9f6cx8 = typeof _0x9f6cx5['cellIndex'] == 'number' ? _0x9f6cx5['cellIndex'] : _0x9f6cx5['getAttribute']('data-cellIndex');
							var _0x9f6cx3 = this['headerCt']['getGridColumns']()[_0x9f6cx8];
							_0x9f6cx2 = _0x9f6cx3 && _0x9f6cx3['model']
						}
					};
					if (_0x9f6cx6['type']['indexOf']('pinch') >= 0) {
						this['fireEvent']('schedule' + _0x9f6cx6['type'], this, _0x9f6cx6)
					}
					else {
						this['fireEvent']('schedule' + _0x9f6cx6['type'], this, _0x9f6cxa, _0x9f6cx7, _0x9f6cx2, _0x9f6cx6)
					}
				}
			}
			, onEventDataRefresh: function () {
				this['clearRowHeightCache']();
				this['callParent'](arguments)
			}
			, onUnbindStore: function (_0x9f6cx1) {
				_0x9f6cx1['un']({
					refresh: this['clearRowHeightCache']
					, clear: this['clearRowHeightCache']
					, load: this['clearRowHeightCache']
					, scope: this
				});
				this['callParent'](arguments)
			}
			, bindStore: function (_0x9f6cx1) {
				_0x9f6cx1 && _0x9f6cx1['on']({
					refresh: this['clearRowHeightCache']
					, clear: this['clearRowHeightCache']
					, load: this['clearRowHeightCache']
					, scope: this
				});
				this['callParent'](arguments)
			}
			, refreshKeepingScroll: function () {
				this['lockingPartner']['refreshView']();
				this['callParent'](arguments)
			}
		}
	}
	, getEventSelectionModel: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx5 = _0x9f6cx2['eventSelModel'] || {}
			, _0x9f6cx1 = _0x9f6cx2['eventSelModelType']
			, _0x9f6cx3;
		if (_0x9f6cx5['events']) {
			return _0x9f6cx5
		};
		if (!_0x9f6cx1 && _0x9f6cx2['getEventStore']()['getAssignmentStore']()) {
			_0x9f6cx1 = 'assignmentmodel'
		}
		else {
			if (!_0x9f6cx1) {
				_0x9f6cx1 = 'eventmodel'
			}
		};
		_0x9f6cx3 = 'SINGLE';
		if (_0x9f6cx2['simpleSelect']) {
			_0x9f6cx3 = 'SIMPLE'
		}
		else {
			if (_0x9f6cx2['multiSelect']) {
				_0x9f6cx3 = 'MULTI'
			}
		};
		Ext['applyIf'](_0x9f6cx5, {
			allowDeselect: _0x9f6cx2['allowDeselect']
			, mode: _0x9f6cx3
		});
		if (!_0x9f6cx5['events']) {
			_0x9f6cx5 = _0x9f6cx2['eventSelModel'] = Ext['create']('selection.' + _0x9f6cx1, _0x9f6cx5)
		};
		if (_0x9f6cx2['disableSelection']) {
			_0x9f6cx5['locked'] = true
		};
		return _0x9f6cx5
	}
	, _afterRender: function () {
		this['setEventStore'](this['eventStore'], true);
		this['getEventSelectionModel']()['bindToView'](this);
		this['setupEventListeners']();
		this['configureFunctionality']();
		var _0x9f6cx1 = this['headerCt']['resizer'];
		if (_0x9f6cx1) {
			_0x9f6cx1['doResize'] = Ext['Function']['createSequence'](_0x9f6cx1['doResize'], this['afterHeaderResized'], this)
		};
		this['on']('itemupdate', function () {
			this['hoveredEventNode'] = null
		})
	}
	, _destroy: function () {
		this['setEventStore'](null)
	}
	, clearRowHeightCache: function () {
		if (this['isHorizontal']()) {
			this['eventLayout']['horizontal']['clearCache']()
		}
	}
	, configureFunctionality: function () {
		var _0x9f6cx1 = this['validatorFnScope'] || this;
		if (this['eventResizeHandles'] !== 'none' && Ext.ux.Scheduler['feature']['ResizeZone']) {
			this['resizePlug'] = new Ext.ux.Scheduler['feature'].ResizeZone(Ext['applyIf']({
				schedulerView: this
				, validatorFn: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx2, _0x9f6cx4) {
					return (this['allowOverlap'] || this['isDateRangeAvailable'](_0x9f6cx2, _0x9f6cx4, _0x9f6cx5, _0x9f6cx3)) && this['resizeValidatorFn']['apply'](_0x9f6cx1, arguments)
				}
				, validatorFnScope: this
			}, this['resizeConfig'] || {}))
		};
		if (this['enableEventDragDrop'] !== false && Ext.ux.Scheduler['feature']['DragDrop']) {
			this['dragdropPlug'] = new Ext.ux.Scheduler['feature'].DragDrop(this, {
				validatorFn: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx3, _0x9f6cx4) {
					return (this['allowOverlap'] || this['isDateRangeAvailable'](_0x9f6cx3, Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx3, Ext.ux.Scheduler['util']['Date'].MILLI, _0x9f6cx4), _0x9f6cx5[0], _0x9f6cx2)) && this['dndValidatorFn']['apply'](_0x9f6cx1, arguments)
				}
				, validatorFnScope: this
				, dragConfig: this['dragConfig'] || {}
			})
		};
		if (this['enableDragCreation'] !== false && Ext.ux.Scheduler['feature']['DragCreator']) {
			this['dragCreator'] = new Ext.ux.Scheduler['feature'].DragCreator(Ext['applyIf']({
				schedulerView: this
				, disabled: this['readOnly']
				, validatorFn: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx3) {
					return (this['allowOverlap'] || this['isDateRangeAvailable'](_0x9f6cx2, _0x9f6cx3, null, _0x9f6cx5)) && this['createValidatorFn']['apply'](_0x9f6cx1, arguments)
				}
				, validatorFnScope: this
			}, this['createConfig'] || {}))
		}
	}
	, onDragDropStart: function () {
		if (this['dragCreator']) {
			this['dragCreator']['setDisabled'](true)
		};
		if (this['tip']) {
			this['tip']['hide']();
			this['tip']['disable']()
		};
		if (this['overScheduledEventClass']) {
			this['setMouseOverEnabled'](false)
		};
		this['disableViewScroller'](true);
		this['hoveredEventNode'] = null
	}
	, onDragDropEnd: function () {
		if (this['dragCreator']) {
			this['dragCreator']['setDisabled'](false)
		};
		if (this['tip']) {
			this['tip']['enable']()
		};
		if (this['overScheduledEventClass']) {
			this['setMouseOverEnabled'](true)
		};
		this['disableViewScroller'](false)
	}
	, onBeforeDragCreate: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1, _0x9f6cx3) {
		return !this['readOnly'] && !_0x9f6cx3['ctrlKey']
	}
	, onDragCreateStart: function () {
		if (this['overScheduledEventClass']) {
			this['setMouseOverEnabled'](false)
		};
		if (this['tip']) {
			this['tip']['hide']();
			this['tip']['disable']()
		};
		this['disableViewScroller'](true)
	}
	, onDragCreateEnd: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5) {
		if (!this['getEventEditor']()) {
			var _0x9f6cx3 = _0x9f6cx5 ? [_0x9f6cx5] : [];
			if (this['fireEvent']('beforeeventadd', this, _0x9f6cx1, _0x9f6cx3) !== false) {
				this['getEventStore']()['append'](_0x9f6cx1);
				if (!this['isWeekView']()) {
					_0x9f6cx1['assign'](_0x9f6cx5)
				};
				this['onEventCreated'](_0x9f6cx1, _0x9f6cx3)
			}
		};
		if (this['overScheduledEventClass']) {
			this['setMouseOverEnabled'](true)
		}
	}
	, onEventCreated: function (_0x9f6cx1, _0x9f6cx2) {}
	, onAfterDragCreate: function () {
		if (this['overScheduledEventClass']) {
			this['setMouseOverEnabled'](true)
		};
		if (this['tip']) {
			this['tip']['enable']()
		};
		this['disableViewScroller'](false)
	}
	, onBeforeResize: function () {
		return !this['readOnly']
	}
	, onResizeStart: function () {
		if (this['tip']) {
			this['tip']['hide']();
			this['tip']['disable']()
		};
		if (this['dragCreator']) {
			this['dragCreator']['setDisabled'](true)
		};
		this['disableViewScroller'](true)
	}
	, onResizeEnd: function () {
		if (this['tip']) {
			this['tip']['enable']()
		};
		if (this['dragCreator']) {
			this['dragCreator']['setDisabled'](false)
		};
		this['disableViewScroller'](false)
	}
	, setupEventListeners: function () {
		this['on']({
			eventdragstart: this['onDragDropStart']
			, aftereventdrop: this['onDragDropEnd']
			, beforedragcreate: this['onBeforeDragCreate']
			, dragcreatestart: this['onDragCreateStart']
			, dragcreateend: this['onDragCreateEnd']
			, afterdragcreate: this['onAfterDragCreate']
			, beforeeventresize: this['onBeforeResize']
			, eventresizestart: this['onResizeStart']
			, eventresizeend: this['onResizeEnd']
			, scope: this
		})
	}
	, afterHeaderResized: function () {
		var _0x9f6cx2 = this['headerCt']['resizer'];
		if (_0x9f6cx2 && !this['isHorizontal']()) {
			if (this['panel']['forceFit']) {
				this['setColumnWidth'](_0x9f6cx2['origWidth'])
			}
			else {
				var _0x9f6cx1 = _0x9f6cx2['dragHd']['getWidth']();
				this['setColumnWidth'](_0x9f6cx1)
			}
		}
	}
	, columnRenderer: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx1, _0x9f6cx3, _0x9f6cx2) {
		return this[this['mode']]['columnRenderer'](_0x9f6cx4, _0x9f6cx5, _0x9f6cx1, _0x9f6cx3, _0x9f6cx2)
	}
	, onRowUpdated: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx1;
		if (_0x9f6cx2['isHorizontal']() && _0x9f6cx2['hasListener']('eventrepaint')) {
			Ext['Array']['each'](_0x9f6cx5['getEvents'](), function (_0x9f6cx3) {
				_0x9f6cx1 = _0x9f6cx2['getElementsFromEventRecord'](_0x9f6cx3, _0x9f6cx5, null, true);
				Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cx4) {
					_0x9f6cx2['fireEvent']('eventrepaint', _0x9f6cx2, _0x9f6cx3, _0x9f6cx4)
				})
			})
		}
	}
	, scrollResourceEventIntoView: function (_0x9f6cx7, _0x9f6cx8, _0x9f6cxa, _0x9f6cx3, _0x9f6cx1, _0x9f6cxe, _0x9f6cxd) {
		var _0x9f6cxb = this
			, _0x9f6cx13 = _0x9f6cx8['getStartDate']()
			, _0x9f6cx6 = _0x9f6cx8['getEndDate']()
			, _0x9f6cx5, _0x9f6cx2;
		var _0x9f6cx4 = function () {
			_0x9f6cx2 = _0x9f6cxb['getElementsFromEventRecord'](_0x9f6cx8, _0x9f6cx7, _0x9f6cxa);
			_0x9f6cx2 = _0x9f6cx2['length'] && _0x9f6cx2[0] || null;
			_0x9f6cxb['scrollElementIntoView'](_0x9f6cx2, true, _0x9f6cx1, _0x9f6cx3, null, _0x9f6cxe, _0x9f6cxd)
		};
		if (!_0x9f6cxb['timeAxis']['dateInAxis'](_0x9f6cx13) || !_0x9f6cxb['timeAxis']['dateInAxis'](_0x9f6cx6)) {
			_0x9f6cx5 = _0x9f6cxb['timeAxis']['getEnd']() - _0x9f6cxb['timeAxis']['getStart']();
			_0x9f6cxb['timeAxis']['setTimeSpan'](new Date(_0x9f6cx13.valueOf() - _0x9f6cx5 / 2), new Date(_0x9f6cx6['getTime']() + _0x9f6cx5 / 2));
			_0x9f6cxb['up']('panel')['scrollTask']['cancel']()
		};
		if (this['isHorizontal']()) {
			var _0x9f6cxc = _0x9f6cxb['up']('timelinegrid,timelinetree');
			var _0x9f6cx9 = _0x9f6cxc['store']['isTreeStore'];
			_0x9f6cxc['ensureVisible'](_0x9f6cx9 ? _0x9f6cx7['getPath']() : _0x9f6cx7, {
				callback: function () {
					if (this['isLocked'] === false || Ext['getVersion']()['gt']('6.2.2')) {
						_0x9f6cx4()
					}
				}
			})
		}
		else {
			_0x9f6cx4()
		}
	}
});
Ext.define('Ext.ux.Scheduler.view.SchedulerGridView', {
	extend: 'Ext.ux.Scheduler.view.TimelineGridView'
	, mixins: ['Ext.ux.Scheduler.mixin.SchedulerView', 'Ext.ux.Scheduler.mixin.GridViewCanvas', 'Ext.ux.Scheduler.mixin.Localizable']
	, alias: 'widget.schedulergridview'
}, function () {
	this['override'](Ext.ux.Scheduler['mixin']['SchedulerView']['prototype']['inheritables']() || {})
});
Ext.define('Ext.ux.Scheduler.selection.EventModel', {
	extend: 'Ext.selection.Model'
	, alias: 'selection.eventmodel'
	, requires: ['Ext.util.KeyNav']
	, deselectOnContainerClick: true
	, selectedOnMouseDown: null
	, bindToView: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['view'] = _0x9f6cx1;
		_0x9f6cx2['bindStore'](_0x9f6cx2['getSelectionStore'](_0x9f6cx1));
		_0x9f6cx1['on']({
			eventclick: _0x9f6cx2['onEventClick']
			, eventmousedown: _0x9f6cx2['onEventMouseDown']
			, itemmousedown: _0x9f6cx2['onItemMouseDown']
			, refresh: function () {
				_0x9f6cx2['refresh']()
			}
			, destroy: function () {
				_0x9f6cx2['bindStore'](null)
			}
			, scope: _0x9f6cx2
		})
	}
	, getSelectionStore: function (_0x9f6cx1) {
		return _0x9f6cx1['getEventStore']()
	}
	, bindStore: function (_0x9f6cx1) {
		if (this['getStore']()) {
			this['mun'](this['getStore'](), 'load', this['onSelectionStoreLoad'], this)
		};
		if (_0x9f6cx1) {
			this['mon'](_0x9f6cx1, 'load', this['onSelectionStoreLoad'], this)
		};
		this['callParent'](arguments)
	}
	, onSelectionStoreLoad: function () {
		this['deselectAll']()
	}
	, onEventMouseDown: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5) {
		this['selectedOnMouseDown'] = null;
		if ((!this['ignoreRightMouseSelection'] || _0x9f6cx5['button'] !== 2) && !this['isSelected'](_0x9f6cx1)) {
			this['selectedOnMouseDown'] = _0x9f6cx1;
			this['selectWithEvent'](_0x9f6cx1, _0x9f6cx5)
		}
	}
	, onEventClick: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx5) {
		if ((!this['ignoreRightMouseSelection'] || _0x9f6cx5['button'] !== 2) && !this['selectedOnMouseDown']) {
			this['selectWithEvent'](_0x9f6cx1, _0x9f6cx5)
		}
	}
	, onItemMouseDown: function (_0x9f6cx7, _0x9f6cx4, _0x9f6cx9, _0x9f6cx8, _0x9f6cx6) {
		if (this['deselectOnContainerClick'] && !_0x9f6cx6['getTarget'](this['view']['eventSelector'])) {
			this['deselectAll']()
		}
	}
	, onSelectChange: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cxc, _0x9f6cx1) {
		var _0x9f6cx7 = this
			, _0x9f6cx6 = _0x9f6cx7['view']
			, _0x9f6cx8 = _0x9f6cx7['store']
			, _0x9f6cx4 = _0x9f6cx2 ? 'select' : 'deselect'
			, _0x9f6cx5 = 0;
		if ((_0x9f6cxc || _0x9f6cx7['fireEvent']('before' + _0x9f6cx4, _0x9f6cx7, _0x9f6cx3)) !== false && _0x9f6cx1() !== false) {
			if (_0x9f6cx2) {
				_0x9f6cx6['onEventBarSelect'](_0x9f6cx3, _0x9f6cxc)
			}
			else {
				_0x9f6cx6['onEventBarDeselect'](_0x9f6cx3, _0x9f6cxc)
			};
			if (!_0x9f6cxc) {
				_0x9f6cx7['fireEvent'](_0x9f6cx4, _0x9f6cx7, _0x9f6cx3)
			}
		}
	}
	, selectRange: Ext['emptyFn']
	, selectNode: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = this['view']['resolveEventRecord'](_0x9f6cx5);
		if (_0x9f6cx2) {
			this['select'](_0x9f6cx2, _0x9f6cx3, _0x9f6cx1)
		}
	}
	, deselectNode: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = this['view']['resolveEventRecord'](_0x9f6cx5);
		if (_0x9f6cx2) {
			this['deselect'](_0x9f6cx2, _0x9f6cx1)
		}
	}
	, getFirstSelectedEventForResource: function (_0x9f6cx7) {
		var _0x9f6cx5 = this['getSelection']()
			, _0x9f6cx4 = null
			, _0x9f6cx2, _0x9f6cx1, _0x9f6cx3;
		for (_0x9f6cx2 = 0, _0x9f6cx1 = _0x9f6cx5['length']; !_0x9f6cx4 && _0x9f6cx2 < _0x9f6cx1; ++_0x9f6cx2) {
			_0x9f6cx3 = _0x9f6cx5[_0x9f6cx2];
			if (_0x9f6cx3['isAssignedTo'](_0x9f6cx7)) {
				_0x9f6cx4 = _0x9f6cx3
			}
		};
		return _0x9f6cx4
	}
	, getDraggableSelections: function () {
		return Ext['Array']['filter'](this['getSelection'](), function (_0x9f6cx1) {
			return _0x9f6cx1['isDraggable']()
		})
	}
	, forEachEventRelatedSelection: function (_0x9f6cx1, _0x9f6cx2) {
		this['isSelected'](_0x9f6cx1) && _0x9f6cx2(_0x9f6cx1)
	}
});
Ext.define('Ext.ux.Scheduler.selection.AssignmentModel', {
	extend: 'Ext.ux.Scheduler.selection.EventModel'
	, alias: 'selection.assignmentmodel'
	, assignmentStoreDetacher: null
	, getSelectionStore: function (_0x9f6cx1) {
		return _0x9f6cx1['getEventStore']()['assignmentStore']
	}
	, onBindStore: function (_0x9f6cx2) {
		this['callParent'](arguments);
		if (_0x9f6cx2) {
			var _0x9f6cx1 = this;
			_0x9f6cx1['assignmentStoreDetacher'] && _0x9f6cx1['assignmentStoreDetacher']['destroy']();
			_0x9f6cx1['assignmentStoreDetacher'] = _0x9f6cx2['on']({
				remove: _0x9f6cx1['onAssignmentStoreRemove']
				, clear: _0x9f6cx1['onAssignmentStoreClear']
				, refresh: _0x9f6cx1['onAssignmentStoreRefresh']
				, scope: _0x9f6cx1
				, destroyable: true
			})
		}
	}
	, onEventMouseDown: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx3) {
		this['selectedOnMouseDown'] = null;
		var _0x9f6cx5 = this['resolveAssignmentRecordFromEventNode'](_0x9f6cx3['getTarget']());
		if (_0x9f6cx5 && (!this['ignoreRightMouseSelection'] || _0x9f6cx3['button'] !== 2) && !this['isSelected'](_0x9f6cx5)) {
			this['selectedOnMouseDown'] = _0x9f6cx5;
			this['selectWithEvent'](_0x9f6cx5, _0x9f6cx3)
		}
	}
	, onEventClick: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx5 = this['resolveAssignmentRecordFromEventNode'](_0x9f6cx3['getTarget']());
		if (_0x9f6cx5 && (!this['ignoreRightMouseSelection'] || _0x9f6cx3['button'] !== 2) && !this['selectedOnMouseDown']) {
			this['selectWithEvent'](_0x9f6cx5, _0x9f6cx3)
		}
	}
	, resolveAssignmentRecordFromEventNode: function (_0x9f6cx5) {
		var _0x9f6cx1 = this['view']
			, _0x9f6cx2 = _0x9f6cx1['resolveEventRecord'](_0x9f6cx5)
			, _0x9f6cx3 = _0x9f6cx1['resolveResource'](_0x9f6cx5);
		if (_0x9f6cx2 && _0x9f6cx3) {
			var _0x9f6cx4 = _0x9f6cx1['getEventStore']()['getAssignmentStore']();
			return _0x9f6cx4['getAssignmentForEventAndResource'](_0x9f6cx2, _0x9f6cx3)
		}
	}
	, selectNode: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = this['resolveAssignmentRecordFromEventNode'](_0x9f6cx5);
		if (_0x9f6cx2) {
			this['select'](_0x9f6cx2, _0x9f6cx3, _0x9f6cx1)
		}
	}
	, deselectNode: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = this['resolveAssignmentRecordFromEventNode'](_0x9f6cx5);
		if (_0x9f6cx2) {
			this['deselect'](_0x9f6cx2, _0x9f6cx1)
		}
	}
	, getFirstSelectedEventForResource: function (_0x9f6cx7) {
		var _0x9f6cx5 = this['getSelection']()
			, _0x9f6cx4 = null
			, _0x9f6cx2, _0x9f6cx1, _0x9f6cx3;
		for (_0x9f6cx2 = 0, _0x9f6cx1 = _0x9f6cx5['length']; !_0x9f6cx4 && _0x9f6cx2 < _0x9f6cx1; ++_0x9f6cx2) {
			_0x9f6cx3 = _0x9f6cx5[_0x9f6cx2];
			if (_0x9f6cx3['getEvent']()['isAssignedTo'](_0x9f6cx7)) {
				_0x9f6cx4 = _0x9f6cx3;
				break
			}
		};
		return _0x9f6cx4
	}
	, getDraggableSelections: function () {
		return Ext['Array']['filter'](this['getSelection'](), function (_0x9f6cx1) {
			return _0x9f6cx1['getEvent']()['isDraggable']()
		})
	}
	, forEachEventRelatedSelection: function (_0x9f6cx1, _0x9f6cx2) {
		Ext['Array']['each'](this['getSelection'](), function (_0x9f6cx5) {
			_0x9f6cx5['getEvent']() === _0x9f6cx1 && _0x9f6cx2(_0x9f6cx5)
		})
	}
	, onAssignmentStoreRemove: function (_0x9f6cx2, _0x9f6cx1) {
		this['deselect'](_0x9f6cx1, true)
	}
	, onAssignmentStoreClear: function (_0x9f6cx1) {
		this['clearSelections']()
	}
	, onAssignmentStoreRefresh: function (_0x9f6cx1) {
		this['clearSelections']()
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		Ext['destroyMembers'](_0x9f6cx1, 'assignmentStoreDetacher');
		_0x9f6cx1['callParent']()
	}
});
Ext.define('Ext.ux.Scheduler.column.timeAxis.Vertical', {
	extend: 'Ext.grid.column.Column'
	, alias: 'widget.verticaltimeaxis'
	, align: 'right'
	, draggable: false
	, groupable: false
	, hideable: false
	, sortable: false
	, menuDisabled: true
	, timeAxis: null
	, timeAxisViewModel: null
	, cellTopBorderWidth: null
	, cellBottomBorderWidth: null
	, totalBorderWidth: null
	, enableLocking: false
	, locked: true
	, lockable: false
	, dataIndex: 'start'
	, initComponent: function () {
		this['callParent'](arguments);
		this['tdCls'] = (this['tdCls'] || '') + ' sch-verticaltimeaxis-cell';
		this['scope'] = this;
		this['addCls']('sch-verticaltimeaxis-header');
		this['totalBorderWidth'] = this['cellTopBorderWidth'] + this['cellBottomBorderWidth']
	}
	, renderer: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx1, _0x9f6cx7) {
		var _0x9f6cx2 = this['timeAxisViewModel'];
		if (!_0x9f6cx2['columnConfig']['middle']) {
			return
		};
		_0x9f6cx5['style'] = 'height:' + (_0x9f6cx2['getTickWidth']() - this['totalBorderWidth']) + 'px';
		var _0x9f6cx4;
		if (!_0x9f6cx2['isWeek']() && _0x9f6cx3 && _0x9f6cx2['isMajorTick'](_0x9f6cx3)) {
			_0x9f6cx4 = _0x9f6cx2['headerConfig'][_0x9f6cx2['getMajorHeaderName']()];
			_0x9f6cx5['tdCls'] += ' sch-column-line-solid'
		}
		else {
			_0x9f6cx4 = _0x9f6cx2['getBottomHeader']()
		};
		if (_0x9f6cx4['renderer']) {
			return _0x9f6cx4['renderer']['call'](_0x9f6cx4['scope'] || this, _0x9f6cx1['data']['start'], _0x9f6cx1['data']['end'], _0x9f6cx5, _0x9f6cx7)
		}
		else {
			return Ext['Date']['format'](_0x9f6cx3, _0x9f6cx4['dateFormat'])
		}
	}
});
Ext.define('Ext.ux.Scheduler.column.ResourceName', {
	extend: 'Ext.grid.Column'
	, alias: 'widget.scheduler_resourcenamecolumn'
	, mixins: ['Ext.ux.Scheduler.mixin.Localizable']
	, initComponent: function () {
		Ext['apply'](this, {
			text: this.L('name')
		});
		this['callParent'](arguments)
	}
	, renderer: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		return _0x9f6cx1['getName']()
	}
});
Ext.define('Ext.ux.Scheduler.mixin.SchedulerPanel', {
	extend: 'Ext.ux.Scheduler.mixin.AbstractSchedulerPanel'
	, requires: ['Ext.ux.Scheduler.view.SchedulerGridView', 'Ext.ux.Scheduler.selection.EventModel', 'Ext.ux.Scheduler.selection.AssignmentModel', 'Ext.ux.Scheduler.column.Resource', 'Ext.ux.Scheduler.column.timeAxis.Vertical', 'Ext.ux.Scheduler.column.ResourceName']
	, eventSelModelType: null
	, eventSelModel: null
	, enableEventDragDrop: true
	, enableDragCreation: true
	, dragConfig: null
	, weekViewColumnClass: 'Ext.ux.Scheduler.column.Day'
	, componentCls: 'sch-schedulerpanel'
	, lockedGridDependsOnSchedule: true
	, verticalListeners: null
	, horizontalLockedWidth: null
	, verticalColumns: null
	, calendarColumns: null
	, horizontalCls: ['sch-horizontal']
	, verticalCls: ['sch-vertical-resource', 'sch-vertical']
	, weekviewCls: ['sch-calendar', 'sch-vertical']
	, _oldViewPresetArgs: null
	, inheritables: function () {
		return {
			variableRowHeight: true
			, initComponent: function () {
				var _0x9f6cx7 = this
					, _0x9f6cx5 = _0x9f6cx7['normalViewConfig'] = _0x9f6cx7['normalViewConfig'] || {}
					, _0x9f6cx1 = _0x9f6cx7['getDependencyViewConfig'] && _0x9f6cx7['getDependencyViewConfig']() || {};
				_0x9f6cx7._initializeSchedulerPanel();
				_0x9f6cx7['verticalListeners'] = {
					clear: _0x9f6cx7['refreshResourceColumns']
					, datachanged: _0x9f6cx7['refreshResourceColumns']
					, update: _0x9f6cx7['refreshResourceColumns']
					, load: _0x9f6cx7['refreshResourceColumns']
					, scope: _0x9f6cx7
				};
				_0x9f6cx7['calendarListeners'] = {
					reconfigure: _0x9f6cx7['refreshCalendarColumns']
					, priority: 1
					, scope: _0x9f6cx7
				};
				_0x9f6cx7['calendarNormalGridListeners'] = {
					columnresize: _0x9f6cx7['onCalendarColumnResize']
					, scope: _0x9f6cx7
				};
				_0x9f6cx7['calendarResourceStoreListeners'] = {
					load: _0x9f6cx7['onCalendarResourceStoreChange']
					, add: _0x9f6cx7['onCalendarResourceStoreChange']
					, remove: _0x9f6cx7['onCalendarResourceStoreChange']
					, scope: _0x9f6cx7
				};
				_0x9f6cx7['normalViewConfig'] = _0x9f6cx7['normalViewConfig'] || {};
				Ext['apply'](_0x9f6cx7['normalViewConfig'], {
					eventStore: _0x9f6cx7['eventStore']
					, resourceStore: _0x9f6cx7['resourceStore']
					, dependencyStore: _0x9f6cx7['dependencyStore']
					, eventBarTextField: _0x9f6cx7['eventBarTextField'] || this['getEventStore']()['getModel']()['prototype']['nameField']
				});
				if (_0x9f6cx7['getDependencyStore']() && _0x9f6cx1['enableDependencyDragDrop'] !== false) {
					_0x9f6cx5['terminalSides'] = _0x9f6cx1['terminalSides'] || ['left', 'right', 'top', 'bottom']
				};
				Ext['Array']['each'](['barMargin', 'eventBodyTemplate', 'eventTpl', 'allowOverlap', 'dragConfig', 'eventBarIconClsField', 'onEventCreated', 'constrainDragToResource', 'snapRelativeToEventStartDate', 'eventSelModelType', 'eventSelModel', 'simpleSelect', 'multiSelect', 'allowDeselect', 'lockedGridDependsOnSchedule'], function (_0x9f6cx6) {
					if (_0x9f6cx6 in _0x9f6cx7) {
						_0x9f6cx7['normalViewConfig'][_0x9f6cx6] = _0x9f6cx7[_0x9f6cx6]
					}
				});
				_0x9f6cx7['callParent'](arguments);
				if (!_0x9f6cx7['isHorizontal']()) {
					_0x9f6cx7['setGroupingFeatureDisabled'](true)
				};
				if (_0x9f6cx7['isVertical']()) {
					_0x9f6cx7['mon'](_0x9f6cx7['resourceStore'], _0x9f6cx7['verticalListeners'])
				};
				var _0x9f6cx4 = _0x9f6cx7['lockedGrid']['getView']();
				var _0x9f6cx3 = _0x9f6cx7['getSchedulingView']();
				_0x9f6cx4['on']('resize', _0x9f6cx7['onLockedViewResize'], _0x9f6cx7);
				_0x9f6cx7['registerRenderer'](_0x9f6cx3['columnRenderer'], _0x9f6cx3);
				if (_0x9f6cx7['resourceZones']) {
					var _0x9f6cx2 = Ext['StoreManager']['lookup'](_0x9f6cx7['resourceZones']);
					_0x9f6cx2['setResourceStore'](_0x9f6cx7['resourceStore']);
					_0x9f6cx7['resourceZonesPlug'] = new Ext.ux.Scheduler['plugin'].ResourceZones(Ext['apply']({
						store: _0x9f6cx2
					}, _0x9f6cx7['resourceZonesConfig']));
					_0x9f6cx7['resourceZonesPlug']['init'](_0x9f6cx7)
				};
				_0x9f6cx3['on']('columnwidthchange', _0x9f6cx7['onColWidthChange'], _0x9f6cx7);
				_0x9f6cx7['relayEvents'](_0x9f6cx3, ['eventclick', 'eventlongpress', 'eventmousedown', 'eventmouseup', 'eventdblclick', 'eventcontextmenu', 'eventmouseenter', 'eventmouseleave', 'eventkeydown', 'eventkeyup', 'beforeeventresize', 'eventresizestart', 'eventpartialresize', 'beforeeventresizefinalize', 'eventresizeend', 'beforeeventdrag', 'eventdragstart', 'eventdrag', 'beforeeventdropfinalize', 'eventdrop', 'aftereventdrop', 'beforedragcreate', 'dragcreatestart', 'beforedragcreatefinalize', 'dragcreateend', 'afterdragcreate', 'beforeeventadd']);
				if (!_0x9f6cx7['syncRowHeight']) {
					_0x9f6cx7['enableRowHeightInjection'](_0x9f6cx4, _0x9f6cx3)
				};
				if (_0x9f6cx7['getDependencyStore']()) {
					_0x9f6cx7['addCls']('sch-scheduler-with-dependencies')
				}
			}
			, configureColumns: function (_0x9f6cx1) {
				var _0x9f6cx2 = this;
				_0x9f6cx1 = _0x9f6cx1 || [{
					xtype: 'scheduler_resourcenamecolumn'
				}];
				_0x9f6cx2['callParent'](arguments);
				_0x9f6cx2['verticalColumns'] = _0x9f6cx2['verticalColumns'] || [Ext['apply']({
					xtype: 'verticaltimeaxis'
				}, _0x9f6cx2['timeAxisColumnCfg'] || {})];
				Ext['Array']['each'](_0x9f6cx2['verticalColumns'], function (_0x9f6cx5) {
					Ext['apply'](_0x9f6cx5, {
						timeAxis: _0x9f6cx2['timeAxis']
						, timeAxisViewModel: _0x9f6cx2['timeAxisViewModel']
						, cellTopBorderWidth: _0x9f6cx2['cellTopBorderWidth']
						, cellBottomBorderWidth: _0x9f6cx2['cellBottomBorderWidth']
					})
				});
				_0x9f6cx2['calendarColumns'] = [Ext['apply']({
					xtype: 'verticaltimeaxis'
					, width: 60
					, timeAxis: _0x9f6cx2['timeAxis']
					, timeAxisViewModel: _0x9f6cx2['timeAxisViewModel']
					, cellTopBorderWidth: _0x9f6cx2['cellTopBorderWidth']
					, cellBottomBorderWidth: _0x9f6cx2['cellBottomBorderWidth']
				}, _0x9f6cx2['calendarTimeAxisCfg'] || _0x9f6cx2['weekViewTimeAxisCfg'] || {})];
				if (_0x9f6cx2['isVertical']()) {
					_0x9f6cx2['columns'] = _0x9f6cx2['verticalColumns']['concat'](_0x9f6cx2['createResourceColumns'](_0x9f6cx2['resourceColumnWidth'] || _0x9f6cx2['timeAxisViewModel']['resourceColumnWidth']));
					_0x9f6cx2['store'] = _0x9f6cx2['timeAxis'];
					if (_0x9f6cx2['resourceStore']['isGrouped']()) {
						_0x9f6cx2['timeAxis']['group'](_0x9f6cx2['resourceStore']['groupField']);
						_0x9f6cx2['bindGroupingFeatureListener']()
					}
				}
				else {
					if (_0x9f6cx2['isWeekView']()) {
						_0x9f6cx2['columns'] = [];
						_0x9f6cx2['store'] = null;
						_0x9f6cx2['on']('beforerender', _0x9f6cx2['refreshCalendarColumns'], _0x9f6cx2)
					}
				}
			}
			, applyViewSettings: function (_0x9f6cx5, _0x9f6cx2) {
				this['callParent'](arguments);
				var _0x9f6cx3 = this['getSchedulingView']()
					, _0x9f6cx1;
				if (this['orientation'] === 'vertical') {
					_0x9f6cx1 = _0x9f6cx5['timeColumnWidth'] || 60;
					_0x9f6cx3['setColumnWidth'](_0x9f6cx5['resourceColumnWidth'] || 100, true);
					_0x9f6cx3['setRowHeight'](_0x9f6cx1, true)
				}
			}
			, onRender: function () {
				if (!this['isHorizontal']()) {
					this['reconfigureBufferedRendering'](true)
				};
				this['callParent'](arguments)
			}
			, afterRender: function () {
				var _0x9f6cx1 = this;
				var _0x9f6cx2 = this['getSchedulingView']();
				this['callParent'](arguments);
				if (this['isVertical']()) {
					this['onLockedViewResize'](null, null, this['lockedGrid']['getView']()['getHeight']())
				}
				else {
					if (this['isWeekView']()) {
						this['mon'](this['timeAxis'], this['calendarListeners']);
						this['mon'](this['resourceStore'], this['calendarResourceStoreListeners']);
						this['normalGrid']['on'](this['calendarNormalGridListeners'])
					}
				};
				if (this['infiniteScroll']) {
					_0x9f6cx2['on']({
						eventdragstart: this['doSuspendLayouts']
						, aftereventdrop: this['doResumeLayouts']
						, eventresizestart: this['doSuspendLayouts']
						, eventresizeend: this['doResumeLayouts']
						, scope: this
					})
				};
				if (this['lockedGridDependsOnSchedule']) {
					_0x9f6cx2['on']('itemupdate', this['onNormalViewItemUpdate'], this)
				};
				this['relayEvents'](this['getEventSelectionModel'](), ['selectionchange', 'deselect', 'select'], 'event');
				this['getView']()['on']('refresh', function () {
					if (!_0x9f6cx1['isHorizontal']()) {
						_0x9f6cx1['reconfigureBufferedRendering']()
					}
				})
			}
			, getTimeSpanDefiningStore: function () {
				return this['eventStore']
			}
			, destroy: function () {
				var _0x9f6cx1 = this;
				if (_0x9f6cx1['destroyStores']) {
					_0x9f6cx1['getDependencyStore']() && _0x9f6cx1['getDependencyStore']()['destroy']();
					_0x9f6cx1['getAssignmentStore']() && _0x9f6cx1['getAssignmentStore']()['destroy']();
					_0x9f6cx1['getEventStore']() && _0x9f6cx1['getEventStore']()['destroy']();
					_0x9f6cx1['getResourceStore']() && _0x9f6cx1['getResourceStore']()['destroy']()
				};
				Ext['destroyMembers'](_0x9f6cx1, 'resourceZonesPlug');
				_0x9f6cx1['callParent'](arguments)
			}
			, scrollToDateCentered: function (_0x9f6cx4, _0x9f6cx3) {
				var _0x9f6cx5 = this['getSchedulingView']();
				if (_0x9f6cx5['isWeekView']()) {
					var _0x9f6cx7 = _0x9f6cx5['weekview']['getColumnsBy'](function (_0x9f6cx6) {
						return _0x9f6cx6['start'] <= _0x9f6cx4 && _0x9f6cx6['end'] > _0x9f6cx4
					})[0];
					if (_0x9f6cx7) {
						var _0x9f6cx2 = _0x9f6cx5['getWidth']() / 2;
						var _0x9f6cx1 = _0x9f6cx5['getViewContainerHeight']() / 2;
						_0x9f6cx5['scrollHorizontallyTo'](Math['max'](_0x9f6cx7['getLocalX']() - _0x9f6cx2, 0));
						_0x9f6cx5['scrollVerticallyTo'](Math['max'](_0x9f6cx5['getCoordinateFromDate'](_0x9f6cx4, true) - _0x9f6cx1, 0))
					}
				}
				else {
					return this['callParent'](arguments)
				}
			}
		}
	}
	, doSuspendLayouts: function () {
		this['timeAxis']['on']({
			beginreconfigure: this['onBeginReconfigure']
			, endreconfigure: this['onEndReconfigure']
			, scope: this
		});
		this['lockedGrid']['suspendLayouts']();
		this['normalGrid']['suspendLayouts']()
	}
	, doResumeLayouts: function () {
		this['timeAxis']['un']({
			beginreconfigure: this['onBeginReconfigure']
			, endreconfigure: this['onEndReconfigure']
			, scope: this
		});
		this['lockedGrid']['resumeLayouts']();
		this['normalGrid']['resumeLayouts']()
	}
	, onBeginReconfigure: function () {
		this['normalGrid']['resumeLayouts']()
	}
	, onEndReconfigure: function () {
		this['normalGrid']['suspendLayouts']()
	}
	, onColWidthChange: function (_0x9f6cx2, _0x9f6cx1) {
		if (this['isVertical']()) {
			this['resourceColumnWidth'] = _0x9f6cx1;
			this['refreshResourceColumns']()
		}
		else {
			if (this['isWeekView']()) {
				this['weekViewColumnWidth'] = _0x9f6cx1;
				this['refreshCalendarColumns']()
			}
		}
	}
	, enableRowHeightInjection: function (_0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx1 = this;
		var _0x9f6cx5 = new Ext.XTemplate('{%', 'this.processCellValues(values);', 'this.nextTpl.applyOut(values, out, parent);', '%}', {
			priority: 1
			, processCellValues: function (_0x9f6cx4) {
				if (_0x9f6cx3['isHorizontal']()) {
					var _0x9f6cx7 = 1;
					if (_0x9f6cx3['dynamicRowHeight']) {
						var _0x9f6cx9 = _0x9f6cx4['record'];
						var _0x9f6cx8 = _0x9f6cx3['eventLayout']['horizontal'];
						_0x9f6cx7 = _0x9f6cx8['getNumberOfBands'](_0x9f6cx9, function () {
							return _0x9f6cx3['getEventStore']()['filterEventsForResource'](_0x9f6cx9, _0x9f6cx3['timeAxis']['isRangeInAxis'], _0x9f6cx3['timeAxis'])
						})
					};
					var _0x9f6cx6 = (_0x9f6cx7 * _0x9f6cx1['getRowHeight']()) - ((_0x9f6cx7 - 1) * _0x9f6cx3['barMargin']) - _0x9f6cx3['cellTopBorderWidth'] - _0x9f6cx3['cellBottomBorderWidth'];
					_0x9f6cx4['style'] = (_0x9f6cx4['style'] || '') + ';height:' + _0x9f6cx6 + 'px;'
				}
			}
		});
		_0x9f6cx2['addCellTpl'](_0x9f6cx5);
		Ext['Array']['each'](this['columns'], function (_0x9f6cx4) {
			_0x9f6cx4['hasCustomRenderer'] = true
		});
		Ext['Array']['each'](this['horizontalColumns'], function (_0x9f6cx4) {
			_0x9f6cx4['hasCustomRenderer'] = true
		})
	}
	, getEventSelectionModel: function () {
		return this['getSchedulingView']()['getEventSelectionModel']()
	}
	, refreshResourceColumns: function () {
		var _0x9f6cx1 = this['resourceColumnWidth'] || this['timeAxisViewModel']['resourceColumnWidth'];
		this['reconfigure'](this['verticalColumns']['concat'](this['createResourceColumns'](_0x9f6cx1)))
	}
	, onCalendarColumnResize: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx1 !== this['timeAxisViewModel']['weekViewColumnWidth']) {
			this['timeAxisViewModel']['setViewColumnWidth'](_0x9f6cx1, true)
		};
		this['getSchedulingView']()['weekview']['repaintEventsForColumn'](_0x9f6cx2, _0x9f6cx5['columnManager']['indexOf'](_0x9f6cx2))
	}
	, onCalendarResourceStoreChange: function () {
		this['getSchedulingView']()['refreshView']()
	}
	, refreshCalendarColumns: function () {
		var _0x9f6cx2 = this['createCalendarRows']();
		var _0x9f6cx1 = this['createCalendarColumns']();
		this['reconfigure'](_0x9f6cx2, this['calendarColumns']['concat'](_0x9f6cx1))
	}
	, setGroupingFeatureDisabled: function (_0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['normalGrid']['view'];
		if (!_0x9f6cx1['groupingFeature']) {
			return
		};
		_0x9f6cx1['groupingFeature'][_0x9f6cx2 ? 'disable' : 'enable']();
		_0x9f6cx1 = _0x9f6cx5['lockedGrid']['view'];
		_0x9f6cx1['groupingFeature'][_0x9f6cx2 ? 'disable' : 'enable']()
	}
	, refreshGroupingStore: function () {
		var _0x9f6cx1 = this['normalGrid']['view']['groupingFeature'];
		if (_0x9f6cx1) {
			_0x9f6cx1['dataSource']['processStore'](this['timeAxis'])
		}
	}
	, bindGroupingFeatureListener: function () {
		this['mon'](this['timeAxis'], 'reconfigure', this['refreshGroupingStore'], this, {
			priority: 10
		})
	}
	, unbindGroupingFeatureListener: function () {
		this['mun'](this['timeAxis'], 'reconfigure', this['refreshGroupingStore'])
	}
	, setMode: function (_0x9f6cx13, _0x9f6cx3) {
		var _0x9f6cxa = this;
		if (!_0x9f6cxa['normalGrid']) {
			_0x9f6cxa['on']('afterrender', function () {
				_0x9f6cxa['setMode'](_0x9f6cx13, true)
			});
			return
		};
		var _0x9f6cx8 = typeof _0x9f6cx13 === 'string' ? _0x9f6cx13 : _0x9f6cx13['mode'];
		if (!_0x9f6cx8) {
			throw new Error('Mode is undefined')
		};
		if (_0x9f6cx8 === 'calendar') {
			_0x9f6cx8 = 'weekview'
		};
		var _0x9f6cx1;
		if (_0x9f6cx13['viewPreset']) {
			_0x9f6cx1 = [_0x9f6cx13['viewPreset'], _0x9f6cx13['startDate'] || null, _0x9f6cx13['endDate'] || null]
		};
		if (_0x9f6cx8 === _0x9f6cxa['mode'] && !_0x9f6cx3) {
			_0x9f6cx1 && _0x9f6cxa['setViewPreset']['apply'](_0x9f6cxa, _0x9f6cx1);
			return
		};
		if (_0x9f6cxa['fireEvent']('beforemodechange', _0x9f6cxa, _0x9f6cx13) !== false) {
			_0x9f6cxa['mode'] = _0x9f6cx8;
			if (_0x9f6cxa['isHorizontal']()) {
				_0x9f6cxa['removeCls'](_0x9f6cxa['verticalCls'])['removeCls'](_0x9f6cxa['weekviewCls'])['addCls'](_0x9f6cxa['horizontalCls'])
			}
			else {
				if (_0x9f6cxa['isVertical']()) {
					_0x9f6cxa['removeCls'](_0x9f6cxa['horizontalCls'])['removeCls'](_0x9f6cxa['weekviewCls'])['addCls'](_0x9f6cxa['verticalCls'])
				}
				else {
					if (_0x9f6cxa['isWeekView']()) {
						_0x9f6cxa['removeCls'](_0x9f6cxa['horizontalCls'])['removeCls'](_0x9f6cxa['verticalCls'])['addCls'](_0x9f6cxa['weekviewCls'])
					}
				}
			};
			var _0x9f6cxc = _0x9f6cxa['normalGrid']
				, _0x9f6cxe = _0x9f6cxa['lockedGrid']['getView']()
				, _0x9f6cx9 = _0x9f6cxa['getSchedulingView']()
				, _0x9f6cx6 = _0x9f6cxc['headerCt'];
			_0x9f6cxa['suspendRefresh']();
			Ext['suspendLayouts']();
			_0x9f6cxa['setGroupingFeatureDisabled'](!_0x9f6cxa['isHorizontal']());
			_0x9f6cxa['unbindGroupingFeatureListener']();
			var _0x9f6cxb = _0x9f6cxa['isWeekView']();
			var _0x9f6cx4 = _0x9f6cx9['isWeekView']();
			if ((_0x9f6cx4 && !_0x9f6cxb) || (!_0x9f6cx4 && _0x9f6cxb)) {
				_0x9f6cx1 = _0x9f6cx1 || _0x9f6cxa['_oldViewPresetArgs'] || [_0x9f6cxb ? 'week' : 'weekAndDay'];
				_0x9f6cxa['_oldViewPresetArgs'] = [_0x9f6cxa['viewPreset'], _0x9f6cxa['timeAxis']['getStart'](), _0x9f6cxa['timeAxis']['getEnd']()]
			};
			_0x9f6cx9['setMode'](_0x9f6cx8);
			_0x9f6cx6['removeAll'](true);
			_0x9f6cxa['reconfigureBufferedRendering']();
			if (!_0x9f6cxa['isWeekView']()) {
				_0x9f6cxa['timeAxis']['setMode']('plain');
				_0x9f6cxa['mun'](_0x9f6cxa['timeAxis'], _0x9f6cxa['calendarListeners'])
			}
			else {
				_0x9f6cxa['timeAxis']['setMode']('week');
				_0x9f6cxa['mon'](_0x9f6cxa['timeAxis'], _0x9f6cxa['calendarListeners'])
			};
			_0x9f6cx1 && _0x9f6cxa['setViewPreset']['apply'](_0x9f6cxa, _0x9f6cx1);
			if (_0x9f6cxa['isHorizontal']()) {
				_0x9f6cxa['mun'](_0x9f6cxa['resourceStore'], _0x9f6cxa['verticalListeners']);
				_0x9f6cxa['mun'](_0x9f6cxa['resourceStore'], _0x9f6cxa['calendarResourceStoreListeners']);
				_0x9f6cxa['normalGrid']['un'](_0x9f6cxa['calendarNormalGridListeners']);
				_0x9f6cx9['setRowHeight'](_0x9f6cxa['rowHeight'] || _0x9f6cxa['timeAxisViewModel']['rowHeightHorizontal'], true);
				_0x9f6cxa['reconfigure'](_0x9f6cxa['resourceStore'], _0x9f6cxa['horizontalColumns']);
				if (_0x9f6cxa['horizontalLockedWidth'] !== null) {
					_0x9f6cxa['lockedGrid']['setWidth'](_0x9f6cxa['horizontalLockedWidth'])
				}
			}
			else {
				if (_0x9f6cxa['isWeekView']()) {
					_0x9f6cxa['mun'](_0x9f6cxa['resourceStore'], _0x9f6cxa['verticalListeners']);
					_0x9f6cxa['mon'](_0x9f6cxa['resourceStore'], _0x9f6cxa['calendarResourceStoreListeners']);
					_0x9f6cxa['normalGrid']['on'](_0x9f6cxa['calendarNormalGridListeners']);
					_0x9f6cxa['bindGroupingFeatureListener']();
					_0x9f6cxa['refreshCalendarColumns']();
					_0x9f6cx9['setRowHeight'](_0x9f6cxa['rowHeight'] || _0x9f6cxa['timeAxisViewModel']['rowHeightVertical'], true);
					_0x9f6cx9['setColumnWidth'](_0x9f6cxa['timeAxisViewModel']['weekViewColumnWidth'] || 100, true)
				}
				else {
					_0x9f6cxa['normalGrid']['un'](_0x9f6cxa['calendarNormalGridListeners']);
					_0x9f6cxa['mun'](_0x9f6cxa['resourceStore'], _0x9f6cxa['calendarResourceStoreListeners']);
					var _0x9f6cx7 = 0;
					_0x9f6cxa['horizontalLockedWidth'] = _0x9f6cxa['lockedGrid']['getWidth']();
					_0x9f6cxa['mon'](_0x9f6cxa['resourceStore'], _0x9f6cxa['verticalListeners']);
					_0x9f6cxa['bindGroupingFeatureListener']();
					_0x9f6cxa['reconfigure'](_0x9f6cxa['timeAxis'], _0x9f6cxa['verticalColumns']['concat'](_0x9f6cxa['createResourceColumns'](_0x9f6cxa['resourceColumnWidth'] || _0x9f6cxa['timeAxisViewModel']['resourceColumnWidth'])));
					Ext['Array']['each'](_0x9f6cxa['lockedGrid']['query']('gridcolumn'), function (_0x9f6cxd) {
						_0x9f6cx7 += _0x9f6cxd['rendered'] ? _0x9f6cxd['getWidth']() : _0x9f6cxd['width'] || 100
					});
					_0x9f6cx9['setColumnWidth'](_0x9f6cxa['timeAxisViewModel']['resourceColumnWidth'] || 100, true);
					_0x9f6cxa['lockedGrid']['setWidth'](_0x9f6cx7)
				}
			};
			var _0x9f6cx5 = _0x9f6cxa['resourceStore']['groupField'];
			if (_0x9f6cx5) {
				_0x9f6cxa['store']['group'](_0x9f6cx5)
			};
			_0x9f6cxa['resumeRefresh'](false);
			var _0x9f6cx2 = _0x9f6cxa['getSplitter']();
			if (_0x9f6cx2) {
				_0x9f6cx2['setVisible'](_0x9f6cx8 === 'horizontal')
			};
			_0x9f6cxa['refreshViews'](false);
			Ext['resumeLayouts'](true);
			_0x9f6cxa['fireEvent']('modechange', _0x9f6cxa, _0x9f6cx13)
		}
	}
	, reconfigureBufferedRendering: function (_0x9f6cx5) {
		if (this['bufferedRenderer']) {
			var _0x9f6cx2 = this['lockedGrid']['bufferedRenderer']
				, _0x9f6cx3 = this['normalGrid']['bufferedRenderer']
				, _0x9f6cx4;
			if (!this['isHorizontal']()) {
				_0x9f6cx4 = this['timeAxis']['getCount']();
				this['__oldLeadingBufferZone'] = _0x9f6cx2['leadingBufferZone']
			}
			else {
				if (this['__oldLeadingBufferZone']) {
					_0x9f6cx4 = this['__oldLeadingBufferZone'];
					this['__oldLeadingBufferZone'] = null
				}
			};
			if (!_0x9f6cx5 && _0x9f6cx2['scroller'] && _0x9f6cx2['scroller']['getLockedScroller']()) {
				var _0x9f6cx1 = this['lockedGrid']['view']['getHeight']()
					, _0x9f6cx7 = Math['ceil'](_0x9f6cx1 / _0x9f6cx2['rowHeight']) + _0x9f6cx2['trailingBufferZone'] + _0x9f6cx4;
				_0x9f6cx2['setViewSize'](_0x9f6cx7, true);
				_0x9f6cx3['setViewSize'](_0x9f6cx7, true)
			};
			_0x9f6cx2['leadingBufferZone'] = _0x9f6cx3['leadingBufferZone'] = _0x9f6cx4
		}
	}
	, createCalendarRows: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['timeAxis']['getRowTicks']();
		_0x9f6cx1['timeAxisViewModel']['calendarRowsAmount'] = _0x9f6cx2['length'];
		return new Ext['data'].Store({
			model: 'Ext.ux.Scheduler.model.TimeAxisTick'
			, data: _0x9f6cx2
		})
	}
	, createCalendarColumns: function () {
		var _0x9f6cx3 = this
			, _0x9f6cx4 = _0x9f6cx3['timeAxis']
			, _0x9f6cx7 = _0x9f6cx4['headerConfig']['middle']
			, _0x9f6cx2 = []
			, _0x9f6cx6;
		var _0x9f6cx5 = _0x9f6cx3['startTime'] = _0x9f6cx4['startTime'];
		var _0x9f6cx1 = _0x9f6cx3['endTime'] = _0x9f6cx4['endTime'];
		_0x9f6cx4['each'](function (_0x9f6cx9) {
			var _0x9f6cxa = _0x9f6cx9['getStartDate']();
			if (_0x9f6cx6 !== _0x9f6cxa['getDay']()) {
				_0x9f6cx6 = _0x9f6cxa['getDay']();
				_0x9f6cxa['setHours'](_0x9f6cx5);
				var _0x9f6cx8 = new Date(_0x9f6cxa);
				_0x9f6cx8['setHours'](_0x9f6cx1);
				var _0x9f6cxc = {
					xclass: _0x9f6cx3['calendarColumnClass'] || _0x9f6cx3['weekViewColumnClass']
					, renderer: _0x9f6cx3['mainRenderer']
					, scope: _0x9f6cx3
					, start: _0x9f6cxa
					, end: _0x9f6cx8
				};
				if (_0x9f6cx7['renderer']) {
					_0x9f6cxc['text'] = _0x9f6cx7['renderer']['call'](_0x9f6cx7['scope'] || _0x9f6cx3, _0x9f6cxa, _0x9f6cx8, _0x9f6cxc, _0x9f6cx2['length'], _0x9f6cx3['getEventStore']())
				}
				else {
					_0x9f6cxc['text'] = Ext['Date']['format'](_0x9f6cxa, _0x9f6cx7['dateFormat'])
				};
				_0x9f6cx2['push'](_0x9f6cxc)
			}
		});
		_0x9f6cx3['timeAxisViewModel']['updateCalendarColumnDates'](_0x9f6cx2);
		return _0x9f6cx2
	}
	, setRowHeight: function (_0x9f6cx1, _0x9f6cx2) {
		_0x9f6cx2 = _0x9f6cx2 || !this['lockedGrid'];
		this['timeAxisViewModel']['setViewRowHeight'](_0x9f6cx1, _0x9f6cx2)
	}
	, onNormalViewItemUpdate: function (_0x9f6cx1) {
		if (this['lockedGridDependsOnSchedule']) {
			var _0x9f6cx2 = this['lockedGrid']['getView']();
			_0x9f6cx2['suspendEvents']();
			_0x9f6cx2['refreshNode'](_0x9f6cx2['indexOf'](_0x9f6cx1));
			if (this['syncRowHeight']) {
				this['syncRowHeights']()
			};
			_0x9f6cx2['resumeEvents']()
		}
	}
	, onLockedViewResize: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx1, _0x9f6cx2, _0x9f6cx4) {
		if (!this['isHorizontal']() && _0x9f6cx1 !== _0x9f6cx4) {
			this['timeAxisViewModel']['update'](_0x9f6cx1 - 21)
		}
	}
});
Ext.define('Ext.ux.Scheduler.panel.SchedulerTree', {
	extend: 'Ext.ux.Scheduler.panel.TimelineTreePanel'
	, mixins: ['Ext.ux.Scheduler.mixin.SchedulerPanel', 'Ext.ux.Scheduler.view.dependency.Mixin']
	, alias: ['widget.schedulertree']
	, viewType: 'schedulergridview'
	, setMode: function (_0x9f6cx1) {
		if (_0x9f6cx1 !== 'horizontal') {
			Ext['Error']['raise']('Ext.ux.Scheduler.panel.SchedulerTree only support horizontal mode')
		}
	}
	, initComponent: function () {
		this['callParent'](arguments);
		this['getSchedulingView']()._initializeSchedulerView()
	}
}, function () {
	this['override'](Ext.ux.Scheduler['mixin']['SchedulerPanel']['prototype']['inheritables']() || {})
});
Ext.define('Ext.ux.Gantt.panel.ResourceUtilization', {
	extend: 'Ext.ux.Scheduler.panel.SchedulerTree'
	, alias: 'widget.resourceutilizationpanel'
	, requires: ['Ext.ux.Gantt.data.ResourceUtilizationStore']
	, uses: ['Ext.util.Format']
	, enableDragCreation: false
	, enableEventDragDrop: false
	, eventResizeHandles: 'none'
	, readOnly: true
	, rowHeight: 32
	, rowLines: true
	, eventBorderWidth: 0
	, columnLines: {
		useLowestHeader: true
	}
	, variableRowHeight: false
	, syncRowHeight: false
	, lockedGridDependsOnSchedule: false
	, enableRowHeightInjection: function () {}
	, dependencyViewConfig: {
		drawDependencies: false
		, enableDependencyDragDrop: false
	}
	, underUtilizationThreshold: 99
	, overUtilizationThreshold: 100
	, columns: [{
		xtype: 'treecolumn'
		, flex: 1
		, resizable: false
		, sortable: false
		, renderer: function (_0x9f6cx1, _0x9f6cx2, _0x9f6cx5) {
			if (_0x9f6cx5['isSurrogateResource']()) {
				return _0x9f6cx5['getName']()
			}
			else {
				return _0x9f6cx5['getTaskName']()
			}
		}
	}]
	, config: {
		taskStore: null
		, numberFormat: '0'
	}
	, resourceStoreClass: 'Ext.ux.Gantt.data.ResourceUtilizationStore'
	, viewConfig: {
		markDirty: false
		, dynamicRowHeight: false
		, managedEventSizing: false
		, getRowClass: function (_0x9f6cx1) {
			return _0x9f6cx1['data']['leaf'] ? 'gnt-utilizationrow-task' : 'gnt-utilizationrow-resource'
		}
	}
	, eventBodyTemplate: '<tpl for="."><div class="gnt-resource-utilization-interval gnt-resource-utilization-interval-{status} {cls}" style="{dir}: {position}px; width: {width}px;{style}"data-utilization-interval-start="{startTime}"data-utilization-interval-end="{endTime}">{value}</div></tpl>'
	, lockedGridConfig: {
		width: 200
	}
	, utilizationBarRenderer: null
	, utilizationBarRendererScope: null
	, initComponent: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['eventRendererScope'] = _0x9f6cx1;
		_0x9f6cx1['setupComponentStores']();
		_0x9f6cx1['callParent'](arguments);
		_0x9f6cx1['addCls']('gnt-resourceutilizationpanel');
		_0x9f6cx1['provideTimeAxisToStore']();
		if (_0x9f6cx1['partnerTimelinePanel'] && Ext['isFunction'](_0x9f6cx1['partnerTimelinePanel']['getTaskStore'])) {
			_0x9f6cx1['resourceStore']['setTaskStore'](_0x9f6cx1['partnerTimelinePanel']['getTaskStore']())
		};
		_0x9f6cx1['resourceStore']['fillStore']()
	}
	, setupComponentStores: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['resourceStore'] = _0x9f6cx1['resourceStore'] || Ext['create'](_0x9f6cx1['resourceStoreClass'], {
			underUtilizationThreshold: this['underUtilizationThreshold']
			, overUtilizationThreshold: this['overUtilizationThreshold']
			, taskStore: _0x9f6cx1['getTaskStore']()
		});
		_0x9f6cx1['eventStore'] = _0x9f6cx1['resourceStore']['getEventStore']()
	}
	, provideTimeAxisToStore: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['getStore']()['setTimeAxis'](_0x9f6cx1['timeAxis'])
	}
	, eventRenderer: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cxb) {
		var _0x9f6cx4 = Ext['util']['Format']
			, _0x9f6cx8 = this
			, _0x9f6cxc = _0x9f6cx8['getSchedulingView']()
			, _0x9f6cx5 = _0x9f6cx3['getStartDate']()
			, _0x9f6cxa = 60 * 60 * 1000
			, _0x9f6cx7 = _0x9f6cx8['getNumberFormat']()
			, _0x9f6cxd = []
			, _0x9f6cx6, _0x9f6cx9, _0x9f6cx13, _0x9f6cx1, _0x9f6cxe = this['utilizationBarRendererScope'] || this;
		_0x9f6cx6 = _0x9f6cxc['getCoordinateFromDate'](_0x9f6cx5);
		_0x9f6cx3['forEachInterval'](function (_0x9f6cx14, _0x9f6cx10) {
			var _0x9f6cx12 = _0x9f6cx3['getUtilizationInfoForInterval'](_0x9f6cx14)
				, _0x9f6cx11 = _0x9f6cx4['number'](_0x9f6cx12['allocationMs'] / _0x9f6cxa, _0x9f6cx7)
				, _0x9f6cxf = {};
			_0x9f6cx9 = _0x9f6cxc['getCoordinateFromDate'](_0x9f6cx14);
			_0x9f6cx13 = _0x9f6cxc['getCoordinateFromDate'](_0x9f6cx10) - 1;
			if (!_0x9f6cx12['isUtilized']) {
				_0x9f6cx1 = 'notutilized'
			}
			else {
				if (_0x9f6cx12['isUnderallocated']) {
					_0x9f6cx1 = 'underallocated'
				}
				else {
					if (_0x9f6cx12['isOverallocated']) {
						_0x9f6cx1 = 'overallocated'
					}
					else {
						_0x9f6cx1 = 'optimallyallocated'
					}
				}
			};
			if (_0x9f6cx8['utilizationBarRenderer']) {
				_0x9f6cx8['utilizationBarRenderer']['call'](_0x9f6cxe, _0x9f6cx12, _0x9f6cx2, _0x9f6cx14, _0x9f6cx10, _0x9f6cxf)
			};
			_0x9f6cxd['push']({
				status: _0x9f6cx1
				, dir: _0x9f6cx8['rtl'] ? 'right' : 'left'
				, position: _0x9f6cx9 - _0x9f6cx6
				, width: _0x9f6cx13 - _0x9f6cx9
				, startTime: _0x9f6cx14['getTime']()
				, endTime: _0x9f6cx10['getTime']()
				, value: (_0x9f6cx13 - _0x9f6cx9 > 10 ? _0x9f6cx11 : '')
				, style: _0x9f6cxf['style'] || ''
				, cls: _0x9f6cxf['cls'] || ''
			})
		});
		return _0x9f6cxd
	}
	, getRowHeight: function () {
		return this['rowHeight']
	}
});
Ext.define('Ext.ux.Scheduler.panel.SchedulerGrid', {
	extend: 'Ext.ux.Scheduler.panel.TimelineGridPanel'
	, mixins: ['Ext.ux.Scheduler.mixin.SchedulerPanel', 'Ext.ux.Scheduler.view.dependency.Mixin']
	, alias: ['widget.schedulergrid', 'widget.schedulerpanel']
	, alternateClassName: 'Ext.ux.Scheduler.SchedulerPanel'
	, viewType: 'schedulergridview'
	, initComponent: function () {
		this['callParent'](arguments);
		this['getSchedulingView']()._initializeSchedulerView()
	}
}, function () {
	this['override'](Ext.ux.Scheduler['mixin']['SchedulerPanel']['prototype']['inheritables']() || {})
});
Ext.define('Ext.ux.Gantt.panel.TimelineScheduler', {
	extend: 'Ext.ux.Scheduler.panel.SchedulerGrid'
	, requires: ['Ext.data.StoreManager', 'Ext.ux.Scheduler.data.ResourceStore', 'Ext.ux.Scheduler.data.EventStore', 'Ext.ux.Gantt.template.TaskTooltip']
	, alias: 'widget.gantt_timelinescheduler'
	, taskStore: null
	, split: false
	, milestoneBottomPadding: 26
	, barMargin: 0
	, header: false
	, enableColumnMove: false
	, enableColumnHide: false
	, enableColumnResize: false
	, sortableColumns: false
	, trackMouseOver: false
	, bufferedRenderer: false
	, border: false
	, rowLines: false
	, columnLines: false
	, eventResizeHandles: 'none'
	, enableDragCreation: false
	, constrainDragToResource: true
	, autoAdjustTimeAxis: false
	, leftTimespanMargin: 25
	, rightTimespanMargin: 50
	, forceFit: false
	, resourceStoreClass: 'Ext.ux.Scheduler.data.ResourceStore'
	, eventStoreClass: 'Ext.ux.Scheduler.data.EventStore'
	, refreshMainRowTimeout: 5
	, needToZoom: false
	, destroyStores: true
	, variableRowHeight: false
	, syncRowHeight: false
	, lockedGridDependsOnSchedule: false
	, columns: []
	, initComponent: function () {
		var _0x9f6cx4 = this;
		_0x9f6cx4['addCls']('sch-gantt-timeline-scheduler');
		_0x9f6cx4['setTaskStore'](this['taskStore']);
		Ext['apply'](_0x9f6cx4, {
			tooltipTpl: new Ext.ux.Gantt['template'].TaskTooltip()
			, normalViewConfig: {
				onEventUpdate: Ext['Function']['bind'](_0x9f6cx4['onEventUpdate'], _0x9f6cx4)
				, onEventAdd: Ext['Function']['bind'](_0x9f6cx4['onEventAdd'], _0x9f6cx4)
				, onEventRemove: Ext['Function']['bind'](_0x9f6cx4['onEventRemove'], _0x9f6cx4)
			}
			, resourceStore: _0x9f6cx4['buildResourceStore']()
			, eventStore: _0x9f6cx4['buildEventStore']()
			, refreshMainRow: Ext['Function']['createBuffered'](_0x9f6cx4['refreshMainRow'], _0x9f6cx4['refreshMainRowTimeout'], _0x9f6cx4)
		});
		var _0x9f6cx3 = _0x9f6cx4['taskStore']['getRoot']();
		if (_0x9f6cx3 && _0x9f6cx3['childNodes']['length']) {
			_0x9f6cx4['on']({
				afterlayout: _0x9f6cx4['fillStoreFromTaskStore']
				, scope: _0x9f6cx4
				, single: true
			})
		};
		_0x9f6cx4['callParent'](arguments);
		_0x9f6cx4['on']('resize', _0x9f6cx4['onSchedResize'], _0x9f6cx4);
		_0x9f6cx4['resourceRecord'] = _0x9f6cx4['resourceStore']['first']();
		var _0x9f6cx5 = _0x9f6cx4['getSchedulingView']()
			, _0x9f6cx2 = _0x9f6cx5['eventLayout']['horizontal']
			, _0x9f6cx1 = _0x9f6cx2['applyLayout'];
		_0x9f6cx2['applyLayout'] = function (_0x9f6cx6, _0x9f6cx8) {
			_0x9f6cx6 = Ext['Array']['filter'](_0x9f6cx6, function (_0x9f6cx9) {
				return _0x9f6cx9['event']['getDuration']() > 0
			});
			return _0x9f6cx1['call'](this, _0x9f6cx6, _0x9f6cx8)
		};
		this['registerRenderer'](this['rowHeightRenderer'], this);
		var _0x9f6cx7 = this['normalGrid']['getVisibleColumns']();
		if (_0x9f6cx7 && _0x9f6cx7['length'] > 0 && (_0x9f6cx7[0] instanceof Ext.ux.Scheduler['column']['timeAxis']['Horizontal'])) {
			_0x9f6cx7[0]['setFlex'](1)
		}
	}
	, setTaskStore: function (_0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx5 = this;
		var _0x9f6cx2 = {
			load: _0x9f6cx5['fillStoreFromTaskStore']
			, nodeappend: _0x9f6cx5['onTaskAdded']
			, update: _0x9f6cx5['onTaskUpdated']
			, noderemove: _0x9f6cx5['onTaskRemoved']
			, clear: _0x9f6cx5['onTaskStoreClear']
			, scope: _0x9f6cx5
		};
		_0x9f6cx3 && _0x9f6cx5['mun'](_0x9f6cx3, _0x9f6cx2);
		_0x9f6cx1 = Ext['data']['StoreManager']['lookup'](_0x9f6cx1);
		_0x9f6cx5['mon'](_0x9f6cx1, _0x9f6cx2);
		_0x9f6cx5['taskStore'] = _0x9f6cx1;
		return _0x9f6cx1
	}
	, buildResourceStore: function (_0x9f6cx1) {
		return Ext['create'](this['resourceStoreClass'], Ext['apply']({
			storeId: null
			, data: [{
				Id: 1
			}]
		}, _0x9f6cx1))
	}
	, buildEventStore: function (_0x9f6cx1) {
		return Ext['create'](this['eventStoreClass'], Ext['apply']({
			storeId: null
			, createResourceEventsCache: Ext['emptyFn']
			, filterEventsForResource: function () {
				return Ext['Array']['filter'](this['getRange'](), function (_0x9f6cx2) {
					return _0x9f6cx2['isScheduled']()
				})
			}
			, getEventsForResource: function () {
				return this['getRange']()
			}
			, isDateRangeAvailable: function (_0x9f6cx2, _0x9f6cx6, _0x9f6cxc, _0x9f6cx7) {
				if (!_0x9f6cx2 || !_0x9f6cx6) {
					return true
				};
				var _0x9f6cx5 = Ext.ux.Scheduler['util']['Date']
					, _0x9f6cxb = this['getRange']()
					, _0x9f6cx3;
				for (var _0x9f6cx8 = 0, _0x9f6cx4 = _0x9f6cxb['length']; _0x9f6cx8 < _0x9f6cx4; _0x9f6cx8++) {
					var _0x9f6cxa = _0x9f6cxb[_0x9f6cx8];
					_0x9f6cx3 = (_0x9f6cxc === _0x9f6cxa || _0x9f6cxa['getDuration']() === 0 || !_0x9f6cxa['getStartDate']() || !_0x9f6cxa['getEndDate']() || !_0x9f6cx5['intersectSpans'](_0x9f6cx2, _0x9f6cx6, _0x9f6cxa['getStartDate'](), _0x9f6cxa['getEndDate']()));
					if (!_0x9f6cx3) {
						break
					}
				};
				return _0x9f6cx3
			}
		}, _0x9f6cx1))
	}
	, refreshMainRow: function (_0x9f6cx1) {
		if (_0x9f6cx1 || this['needToZoom']) {
			this['zoomToFit']()
		}
		else {
			this['getSchedulingView']()['repaintEventsForResource'](this['resourceRecord']);
			this['fitEvents']()
		}
	}
	, eventRenderer: function (_0x9f6cx1, _0x9f6cx2, _0x9f6cx5) {
		if (_0x9f6cx1['store']['isDateRangeAvailable'](_0x9f6cx1['getStartDate'](), _0x9f6cx1['getEndDate'](), _0x9f6cx1, _0x9f6cx2)) {
			_0x9f6cx5['cls'] = 'sch-gantt-timeline-stretch'
		};
		if (!_0x9f6cx1['isMilestone']()) {
			_0x9f6cx5['style'] = 'line-height:' + _0x9f6cx5['height'] + 'px;'
		};
		return _0x9f6cx1['getName']()
	}
	, rowHeightRenderer: function (_0x9f6cx1, _0x9f6cx2) {
		_0x9f6cx2['style'] = 'height:' + this['getAvailableRowHeight']() + 'px'
	}
	, onTaskStoreClear: function () {
		this['eventStore']['removeAll']()
	}
	, onTaskRemoved: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx1) {
		if (!_0x9f6cx1) {
			this['eventStore']['remove'](_0x9f6cx5);
			Ext['Array']['each'](_0x9f6cx5['childNodes'] || [], function (_0x9f6cx3) {
				this['onTaskRemoved'](_0x9f6cx2, _0x9f6cx3)
			}, this)
		}
	}
	, onTaskAdded: function (_0x9f6cx2, _0x9f6cx1) {
		if (!this['taskStore']['isSettingRoot']) {
			if (_0x9f6cx1['getShowInTimeline']()) {
				this['eventStore']['add'](_0x9f6cx1)
			}
		}
	}
	, onTaskUpdated: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1, _0x9f6cx3) {
		if (_0x9f6cx3) {
			if (Ext['Array']['contains'](_0x9f6cx3, _0x9f6cx2['showInTimelineField'])) {
				if (_0x9f6cx2['getShowInTimeline']()) {
					this['eventStore']['add'](_0x9f6cx2)
				}
				else {
					this['eventStore']['remove'](_0x9f6cx2)
				}
			}
		}
	}
	, onEventAdd: function () {
		if (!this['needToZoom']) {
			var _0x9f6cx1 = this['eventStore']['getTotalTimeSpan']();
			this['needToZoom'] = _0x9f6cx1['start'] < this['getStart']() || _0x9f6cx1['end'] > this['getEnd']()
		};
		this['refreshMainRow']()
	}
	, onEventRemove: function (_0x9f6cx2, _0x9f6cx4) {
		if (!this['needToZoom']) {
			var _0x9f6cx3 = this['eventStore']['getTotalTimeSpan']();
			for (var _0x9f6cx5 = 0; _0x9f6cx5 < _0x9f6cx4['length']; _0x9f6cx5++) {
				var _0x9f6cx1 = _0x9f6cx4[_0x9f6cx5];
				if (_0x9f6cx3['start'] > _0x9f6cx1['getStartDate']() || _0x9f6cx3['end'] < _0x9f6cx1['getEndDate']()) {
					this['needToZoom'] = true;
					break
				}
			}
		};
		this['refreshMainRow']()
	}
	, onEventUpdate: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx4 = _0x9f6cx2['previous']
			, _0x9f6cx7 = this['eventStore']['lastTotalTimeSpan'];
		if (_0x9f6cx3) {
			if (!this['needToZoom'] && _0x9f6cx4 && _0x9f6cx7 && (_0x9f6cx2['startDateField'] in _0x9f6cx4 || _0x9f6cx2['endDateField'] in _0x9f6cx4)) {
				this['needToZoom'] = (_0x9f6cx2['startDateField'] in _0x9f6cx4 && _0x9f6cx7['start'] - _0x9f6cx4[_0x9f6cx2['startDateField']] === 0) || (_0x9f6cx2['endDateField'] in _0x9f6cx4 && _0x9f6cx7['end'] - _0x9f6cx4[_0x9f6cx2['endDateField']] === 0) || (_0x9f6cx2['startDateField'] in _0x9f6cx4 && _0x9f6cx7['start'] > _0x9f6cx2['getStartDate']()) || (_0x9f6cx2['endDateField'] in _0x9f6cx4 && _0x9f6cx7['end'] < _0x9f6cx2['getEndDate']())
			};
			this['refreshMainRow']()
		}
	}
	, fillStoreFromTaskStore: function () {
		var _0x9f6cx2 = []
			, _0x9f6cx5 = [];
		this['taskStore']['forEachTaskUnordered'](function (_0x9f6cx3) {
			if (_0x9f6cx3['getShowInTimeline']()) {
				if (_0x9f6cx3['isMilestone']()) {
					_0x9f6cx5['push'](_0x9f6cx3)
				}
				else {
					_0x9f6cx2['push'](_0x9f6cx3)
				}
			}
		});
		_0x9f6cx2 = _0x9f6cx2['concat'](_0x9f6cx5);
		this['eventStore']['removeAll'](true);
		if (_0x9f6cx2['length'] || this['eventStore']['getCount']()) {
			var _0x9f6cx1 = this['getSchedulingView']();
			_0x9f6cx1['blockRefresh'] = true;
			this['eventStore']['loadData'](_0x9f6cx2);
			_0x9f6cx1['blockRefresh'] = false;
			this['zoomToFit']()
		}
	}
	, zoomToFit: function () {
		this['suspendLayouts']();
		this['needToZoom'] = false;
		this['callParent']([{
			leftMargin: this['leftTimespanMargin']
			, rightMargin: this['rightTimespanMargin']
		}]);
		this['fitEvents']();
		this['resumeLayouts']()
	}
	, onSchedResize: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx1, _0x9f6cx2, _0x9f6cx4) {
		if (_0x9f6cx1 !== _0x9f6cx4) {
			this['fitEvents']()
		}
	}
	, fitEvents: function (_0x9f6cx4, _0x9f6cx3, _0x9f6cx1, _0x9f6cx2, _0x9f6cx7) {
		if (this['eventStore']['getCount']() > 0) {
			var _0x9f6cx5 = this['getSchedulingView']()['eventLayout']['horizontal']['nbrOfBandsByResource'][this['resourceRecord']['internalId']] || 1;
			this['setRowHeight'](Math['ceil'](this['getAvailableRowHeight']() / _0x9f6cx5))
		}
	}
	, getAvailableRowHeight: function () {
		var _0x9f6cx1 = this['normalGrid']['body'];
		return Ext['fly'](_0x9f6cx1)['getHeight']() - this['milestoneBottomPadding']
	}
});
Ext.define('Ext.ux.Gantt.panel.Timeline', {
	extend: 'Ext.Panel'
	, requires: ['Ext.form.field.Display', 'Ext.ux.Gantt.panel.TimelineScheduler']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.gantt_timeline'
	, layout: {
		type: 'hbox'
		, align: 'stretch'
	}
	, bodyPadding: '10 0 20 0'
	, height: 190
	, labelWidth: 100
	, taskStore: null
	, scheduler: null
	, readOnly: true
	, schedulerClass: 'Ext.ux.Gantt.panel.TimelineScheduler'
	, initComponent: function () {
		this['addCls']('sch-gantt-timeline');
		this['scheduler'] = Ext['create'](this['schedulerClass'], {
			taskStore: this['taskStore']
			, readOnly: this['readOnly']
			, flex: 1
		});
		this['scheduler']['on']('viewchange', this['onTimespanChange'], this);
		this['items'] = this['buildItems']();
		this['callParent'](arguments)
	}
	, buildItems: function () {
		return [{
			xtype: 'displayfield'
			, fieldLabel: this.L('start')
			, labelAlign: 'top'
			, itemId: 'startlabel'
			, cls: 'sch-gantt-timeline-label sch-gantt-timeline-left-label'
			, width: this['labelWidth']
		}, this['scheduler'], {
			xtype: 'displayfield'
			, fieldLabel: this.L('end')
			, labelAlign: 'top'
			, itemId: 'endlabel'
			, cls: 'sch-gantt-timeline-label sch-gantt-timeline-right-label'
			, width: this['labelWidth']
		}]
	}
	, getStartLabel: function () {
		return this['startLabel'] || (this['startLabel'] = this['down']('#startlabel'))
	}
	, getEndLabel: function () {
		return this['endLabel'] || (this['endLabel'] = this['down']('#endlabel'))
	}
	, onTimespanChange: function () {
		var _0x9f6cx2 = this['scheduler']['getStart']();
		var _0x9f6cx1 = this['scheduler']['getEnd']();
		this['getStartLabel']()['setValue'](Ext['Date']['format'](_0x9f6cx2, this.L('format')));
		this['getEndLabel']()['setValue'](Ext['Date']['format'](_0x9f6cx1, this.L('format')))
	}
});
Ext.define('Ext.ux.Gantt.patches.AbstractClipboard', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.plugin.AbstractClipboard'
	, minVersion: '6.0.0'
	, overrides: {
		privates: {
			getData: function (_0x9f6cx3, _0x9f6cx8) {
				var _0x9f6cx4 = this
					, _0x9f6cx1 = _0x9f6cx4['getFormats']()
					, _0x9f6cx7, _0x9f6cx5, _0x9f6cx2, _0x9f6cx6;
				if (Ext['isString'](_0x9f6cx8)) {
					if (!_0x9f6cx1[_0x9f6cx8]) {
						Ext['raise']('Invalid clipboard format "' + _0x9f6cx8 + '"')
					};
					_0x9f6cx7 = _0x9f6cx4[_0x9f6cx1[_0x9f6cx8]['get']](_0x9f6cx8, _0x9f6cx3)
				}
				else {
					_0x9f6cx7 = {};
					_0x9f6cx6 = [];
					if (_0x9f6cx8) {
						for (_0x9f6cx2 in _0x9f6cx8) {
							if (!_0x9f6cx1[_0x9f6cx2]) {
								Ext['raise']('Invalid clipboard format "' + _0x9f6cx2 + '"')
							};
							_0x9f6cx6['push'](_0x9f6cx2)
						}
					}
					else {
						_0x9f6cx6 = Ext['Object']['getAllKeys'](_0x9f6cx1)
					};
					for (_0x9f6cx5 = _0x9f6cx6['length']; _0x9f6cx5-- > 0;) {
						_0x9f6cx2 = _0x9f6cx6[_0x9f6cx5];
						_0x9f6cx7[_0x9f6cx2] = _0x9f6cx4[_0x9f6cx1[_0x9f6cx2]['get']](_0x9f6cx2, _0x9f6cx3 && !_0x9f6cx5)
					}
				};
				return _0x9f6cx7
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.CheckColumn', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.column.Check'
	, minVersion: '6.2.0'
	, overrides: {
		constructor: function (_0x9f6cx1) {
			this['callParent']([_0x9f6cx1 || {}])
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.ComponentManager', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.ComponentManager'
	, minVersion: '6.0.0'
	, maxVersion: '6.2.0'
	, applyFn: function () {
		Ext['ComponentManager']['onGlobalFocus'] = function (_0x9f6cx7) {
			var _0x9f6cx8 = this
				, _0x9f6cx3 = _0x9f6cx7['toElement']
				, _0x9f6cx6 = _0x9f6cx7['fromElement']
				, _0x9f6cx5 = Ext['Component']['fromElement'](_0x9f6cx3)
				, _0x9f6cx9 = Ext['Component']['fromElement'](_0x9f6cx6)
				, _0x9f6cxc = _0x9f6cx8['getCommonAncestor'](_0x9f6cx9, _0x9f6cx5)
				, _0x9f6cx1, _0x9f6cx2;
			if (_0x9f6cx9 && !(_0x9f6cx9['destroyed'] || _0x9f6cx9['destroying'])) {
				if (_0x9f6cx9['handleBlurEvent']) {
					_0x9f6cx9['handleBlurEvent'](_0x9f6cx7)
				};
				for (_0x9f6cx2 = _0x9f6cx9; _0x9f6cx2 && _0x9f6cx2 !== _0x9f6cxc; _0x9f6cx2 = _0x9f6cx2['getRefOwner']()) {
					if (_0x9f6cx2 instanceof Ext.ux.Gantt['widget']['AssignmentGrid'] && _0x9f6cx2['view']['refreshing'] && _0x9f6cx2['getRefOwner']() instanceof Ext.ux.Gantt['field']['Assignment']) {
						break
					};
					if (!(_0x9f6cx2['destroyed'] || _0x9f6cx2['destroying'])) {
						_0x9f6cx2['onFocusLeave']({
							event: _0x9f6cx7['event']
							, type: 'focusleave'
							, target: _0x9f6cx6
							, relatedTarget: _0x9f6cx3
							, fromComponent: _0x9f6cx9
							, toComponent: _0x9f6cx5
						})
					}
				}
			};
			if (_0x9f6cx5 && !_0x9f6cx5['destroyed']) {
				if (_0x9f6cx5['handleFocusEvent']) {
					_0x9f6cx5['handleFocusEvent'](_0x9f6cx7)
				};
				for (_0x9f6cx2 = _0x9f6cx5; _0x9f6cx2 && _0x9f6cx2 !== _0x9f6cxc; _0x9f6cx2 = _0x9f6cx2['getRefOwner']()) {
					_0x9f6cx2['onFocusEnter']({
						event: _0x9f6cx7['event']
						, type: 'focusenter'
						, relatedTarget: _0x9f6cx6
						, target: _0x9f6cx3
						, fromComponent: _0x9f6cx9
						, toComponent: _0x9f6cx5
					})
				}
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.DelimitedValue', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.util.DelimitedValue'
	, minVersion: '6.0.0'
	, overrides: {
		decode: function (_0x9f6cx1) {
			if (_0x9f6cx1 === '') {
				return []
			};
			return this['callParent'](arguments)
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.GanttPanel', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, minVersion: '6.0.2'
	, maxVersion: '6.2.1'
	, target: 'Ext.ux.Gantt.panel.Gantt'
	, overrides: {
		onBeforeBatchStoreUpdate: function () {
			this['callParent']();
			var _0x9f6cx2 = this['getSelectionModel']()
				, _0x9f6cx5 = _0x9f6cx2['getSelected']();
			if (_0x9f6cx5 && _0x9f6cx5['isCells'] && this['keepSelection']) {
				this['_lastCellSelectedRange'] = _0x9f6cx2['getSelected']()['getRange']();
				var _0x9f6cx1 = [];
				_0x9f6cx5['eachRow'](function (_0x9f6cx3) {
					_0x9f6cx1['push'](_0x9f6cx3)
				});
				this['_lastCellSelectedRecords'] = _0x9f6cx1
			}
		}
		, onBatchStoreUpdate: function () {
			this['callParent']();
			var _0x9f6cx7 = this['_lastCellSelectedRecords'];
			if (_0x9f6cx7 && _0x9f6cx7['length']) {
				var _0x9f6cx3 = this['lockedGrid']['view'];
				var _0x9f6cx8 = -1
					, _0x9f6cx5, _0x9f6cx2;
				for (var _0x9f6cx6 = 0, _0x9f6cx1 = _0x9f6cx7['length']; _0x9f6cx6 < _0x9f6cx1; _0x9f6cx6++) {
					_0x9f6cx2 = _0x9f6cx3['indexOf'](_0x9f6cx7[_0x9f6cx6]);
					if (_0x9f6cx2 !== -1) {
						if (_0x9f6cx8 === -1) {
							_0x9f6cx8 = _0x9f6cx5 = _0x9f6cx2
						}
						else {
							if (_0x9f6cx2 - _0x9f6cx8 > 1) {
								break
							}
							else {
								_0x9f6cx8 = _0x9f6cx2
							}
						}
					}
					else {
						if (_0x9f6cx8 !== -1) {
							break
						}
					}
				};
				if (_0x9f6cx8 !== -1) {
					_0x9f6cx8 = Math['min'](_0x9f6cx3['getNodes']()['length'] - 1, _0x9f6cx8);
					var _0x9f6cx4 = this['_lastCellSelectedRange'];
					this['getSelectionModel']()['selectCells']([_0x9f6cx4[0][0], _0x9f6cx5], [_0x9f6cx4[1][0], _0x9f6cx8])
				};
				this['_lastCellSelectedRecords'] = null;
				this['_lastCellSelectedRange'] = null
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.LabelEditor', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.ux.Gantt.feature.LabelEditor'
	, minVersion: '6.0.0'
	, maxVersion: '6.0.1'
	, ieOnly: true
	, overrides: {
		constructor: function () {
			this['callParent'](arguments);
			if (this['rendered']) {
				this['getEl']()['setVisibilityMode'](Ext['dom']['Element'].OFFSETS)
			}
			else {
				this['on']('render', function () {
					this['getEl']()['setVisibilityMode'](Ext['dom']['Element'].OFFSETS)
				}, this, {
					single: true
				})
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.SelectionExtender', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.selection.SelectionExtender'
	, minVersion: '6.0.0'
	, overrides: {
		onDrag: function (_0x9f6cx1) {
			if (!Ext['fly'](_0x9f6cx1['getTarget']())['up']('.sch-ganttview')) {
				this['callParent'](arguments)
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.patches.Tooltip', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.tip.ToolTip'
	, minVersion: '5.1.0'
	, overrides: {
		onDocMouseDown: function () {
			if (this['isDisabled']()) {
				return
			};
			this['callParent'](arguments)
		}
	}
});
Ext.define('Ext.ux.Gantt.plugin.Clipboard', {
	extend: 'Ext.grid.plugin.Clipboard'
	, alias: 'plugin.gantt_clipboard'
	, requires: ['Ext.ux.Gantt.patches.DelimitedValue', 'Ext.ux.Gantt.patches.AbstractClipboard']
	, memory: 'raw'
	, formats: {
		raw: {
			get: 'getRawData'
			, put: 'putRawData'
		}
	}
	, putTextData: function (_0x9f6cx1, _0x9f6cx2) {
		return
	}
	, getRawData: function (_0x9f6cx8, _0x9f6cx2) {
		var _0x9f6cx7 = this
			, _0x9f6cx3 = _0x9f6cx7['getCmp']()['getSelectionModel']()
			, _0x9f6cx4 = []
			, _0x9f6cx6 = _0x9f6cx8 === 'raw'
			, _0x9f6cx5 = _0x9f6cx8 === 'text'
			, _0x9f6cx1, _0x9f6cx9;
		_0x9f6cx4['schedulingFields'] = {};
		_0x9f6cx3['getSelected']()['eachCell'](function (_0x9f6cxe) {
			var _0x9f6cxf = _0x9f6cxe['column']
				, _0x9f6cxb = _0x9f6cxe['column']['getView']()
				, _0x9f6cx13 = _0x9f6cxe['record']
				, _0x9f6cxd = _0x9f6cxf['dataIndex']
				, _0x9f6cx12;
			if (!_0x9f6cx7['isColumnCopyPasteable'](_0x9f6cxf, _0x9f6cx8)) {
				return
			};
			if (_0x9f6cx1 !== _0x9f6cx13) {
				_0x9f6cx1 = _0x9f6cx13;
				_0x9f6cx4['push'](_0x9f6cx9 = [])
			};
			if (_0x9f6cx4['length'] < 2) {
				if (_0x9f6cxf['isStartDateColumn']) {
					_0x9f6cx4['schedulingFields']['startDate'] = 1
				}
				else {
					if (_0x9f6cxf['isEndDateColumn']) {
						_0x9f6cx4['schedulingFields']['endDate'] = 1
					}
					else {
						if (_0x9f6cxf['isDurationColumn'] && !_0x9f6cxf['isEffortColumn']) {
							_0x9f6cx4['schedulingFields']['duration'] = 1
						}
					}
				}
			};
			if (_0x9f6cx6) {
				if (_0x9f6cxf['getRawData']) {
					_0x9f6cx12 = _0x9f6cxf['getRawData'](_0x9f6cx13)
				}
				else {
					if (_0x9f6cxd) {
						_0x9f6cx12 = _0x9f6cx13['data'][_0x9f6cxd]
					}
				}
			}
			else {
				var _0x9f6cxa = _0x9f6cxb['all']['item'](_0x9f6cxe['rowIdx']);
				if (!_0x9f6cxa) {
					_0x9f6cxa = Ext['fly'](_0x9f6cxb['createRowElement'](_0x9f6cx13, _0x9f6cxe['rowIdx']))
				};
				var _0x9f6cxc = _0x9f6cxa['down'](_0x9f6cxf['getCellInnerSelector']());
				_0x9f6cx12 = _0x9f6cxc['dom']['innerHTML'];
				if (_0x9f6cx5) {
					_0x9f6cx12 = Ext['util']['Format']['stripTags'](_0x9f6cx12)
				}
			};
			_0x9f6cx9['push'](_0x9f6cx12);
			if (_0x9f6cx2 && _0x9f6cxd) {
				_0x9f6cx13['set'](_0x9f6cxd, _0x9f6cx13['getField'](_0x9f6cxd)['getDefaultValue']())
			}
		});
		return _0x9f6cx4
	}
	, getCellData: function (_0x9f6cx2, _0x9f6cx1) {
		return Ext['util']['TSV']['encode'](this['getRawData'](_0x9f6cx2, _0x9f6cx1))
	}
	, isColumnCopyPasteable: function (_0x9f6cx1, _0x9f6cx2) {
		return !_0x9f6cx1['ignoreExport'] && (_0x9f6cx2 != 'raw' || _0x9f6cx1['dataIndex'] || _0x9f6cx1['getRawData'])
	}
	, putRawData: function (_0x9f6cx16, _0x9f6cx10) {
		var _0x9f6cx14 = this
			, _0x9f6cx1 = _0x9f6cx16['length']
			, _0x9f6cxb = this['getCmp']()['getView']()
			, _0x9f6cx7 = _0x9f6cxb['dataSource']['getCount']() - 1
			, _0x9f6cxe = _0x9f6cxb['getVisibleColumnManager']()['getColumns']()['length'] - 1
			, _0x9f6cx4 = _0x9f6cxb['getNavigationModel']()
			, _0x9f6cx12 = _0x9f6cx4['getPosition']()
			, _0x9f6cx5, _0x9f6cx17, _0x9f6cx13, _0x9f6cx11, _0x9f6cxa, _0x9f6cx3, _0x9f6cx2, _0x9f6cx8, _0x9f6cx6;
		if (!_0x9f6cx12 || this['getCmp']()['isReadOnly']()) {
			return
		};
		_0x9f6cx12 = new Ext['grid'].CellContext(_0x9f6cxb)['setPosition'](_0x9f6cx12['record'], _0x9f6cx12['column']);
		_0x9f6cx13 = _0x9f6cx12['colIdx'];
		for (var _0x9f6cxd = 0; _0x9f6cxd < _0x9f6cx1; _0x9f6cxd++) {
			var _0x9f6cx9 = _0x9f6cx16[_0x9f6cxd];
			var _0x9f6cxc = _0x9f6cx12['record'];
			_0x9f6cx3 = {};
			if (_0x9f6cxc['isReadOnly']()) {
				continue
			};
			for (_0x9f6cx5 = 0; _0x9f6cx12['colIdx'] < _0x9f6cxe && _0x9f6cx5 < _0x9f6cx9['length'];) {
				_0x9f6cx11 = _0x9f6cx12['column'];
				_0x9f6cxa = _0x9f6cx9[_0x9f6cx5];
				if (_0x9f6cx14['isColumnCopyPasteable'](_0x9f6cx11, _0x9f6cx10)) {
					var _0x9f6cxf;
					if (_0x9f6cx16['schedulingFields']['startDate'] && _0x9f6cx16['schedulingFields']['endDate']) {
						_0x9f6cxf = _0x9f6cx11['fieldProperty'] === 'durationField' || _0x9f6cx11['fieldProperty'] === 'startDateField' || _0x9f6cx11['fieldProperty'] === 'endDateField';
						if (_0x9f6cx11['fieldProperty'] === 'startDateField') {
							_0x9f6cx8 = _0x9f6cxa
						};
						if (_0x9f6cx11['isEndDateColumn']) {
							_0x9f6cx6 = _0x9f6cx11['prepareNewEndDate'](_0x9f6cxa, _0x9f6cx12['record'])
						}
					};
					_0x9f6cx17 = _0x9f6cx11['dataIndex'];
					if (!_0x9f6cxf) {
						if (_0x9f6cx11['putRawData']) {
							_0x9f6cx11['putRawData'](_0x9f6cxa, _0x9f6cx12['record'])
						}
						else {
							if (_0x9f6cx17 && _0x9f6cx17 !== 'index') {
								_0x9f6cx2 = _0x9f6cx11['field'];
								if (_0x9f6cx2) {
									if (!_0x9f6cx2['getErrors'](_0x9f6cxa)['length']) {
										_0x9f6cx3[_0x9f6cx17] = _0x9f6cxa
									}
								}
								else {
									_0x9f6cx3[_0x9f6cx17] = _0x9f6cxa
								}
							}
						}
					};
					_0x9f6cx5++
				};
				if (_0x9f6cx12['colIdx'] === _0x9f6cxe) {
					break
				};
				_0x9f6cx12['setColumn'](_0x9f6cx12['colIdx'] + 1)
			};
			_0x9f6cxc['beginEdit']();
			_0x9f6cxc['set'](_0x9f6cx3);
			if (_0x9f6cx8 !== undefined && _0x9f6cx6 !== undefined) {
				_0x9f6cxc['setStartEndDate'](_0x9f6cx8, _0x9f6cx6)
			};
			_0x9f6cxc['endEdit']();
			if (_0x9f6cx12['rowIdx'] === _0x9f6cx7) {
				break
			};
			_0x9f6cx12['setPosition'](_0x9f6cx12['rowIdx'] + 1, _0x9f6cx13)
		}
	}
});
Ext.define('Ext.ux.Gantt.plugin.DependencyEditor', {
	extend: 'Ext.form.Panel'
	, alias: 'plugin.gantt_dependencyeditor'
	, ptype: 'gantt_dependencyeditor'
	, mixins: ['Ext.AbstractPlugin', 'Ext.ux.Gantt.mixin.Localizable']
	, requires: ['Ext.util.Filter', 'Ext.form.field.Display', 'Ext.form.field.ComboBox', 'Ext.form.field.Number', 'Ext.ux.Gantt.model.Dependency', 'Ext.data.ArrayStore']
	, hideOnBlur: true
	, showLag: false
	, triggerEvent: 'dependencydblclick'
	, constrain: true
	, lockableScope: 'top'
	, header: false
	, border: false
	, frame: true
	, labelWidth: 60
	, floating: true
	, hideMode: 'offsets'
	, bodyPadding: 10
	, initComponent: function () {
		this['buttons'] = this['hasOwnProperty']('buttons') ? this['buttons'] : (this['buttons'] || [{
			text: this.L('okButtonText')
			, itemId: 'okbutton'
			, scope: this
			, handler: function () {
				this['getForm']()['updateRecord'](this['dependencyRecord']);
				this['collapse']()
			}
		}, {
			text: this.L('cancelButtonText')
			, itemId: 'cancelbutton'
			, scope: this
			, handler: function () {
				this['collapse']()
			}
		}, {
			text: this.L('deleteButtonText')
			, itemId: 'deletebutton'
			, scope: this
			, handler: function () {
				var _0x9f6cx1 = this['taskStore'] && this['taskStore']['getDependencyStore']();
				_0x9f6cx1['remove'](this['dependencyRecord']);
				this['collapse']()
			}
		}]);
		this['callParent'](arguments);
		this['saveButton'] = this['down']('#okbutton');
		this['deleteButton'] = this['down']('#deletebutton');
		this['addCls']('sch-gantt-dependencyeditor')
	}
	, getState: function () {
		if (this['rendered']) {
			return this['callParent'](arguments)
		}
	}
	, init: function (_0x9f6cx1) {
		_0x9f6cx1['on'](this['triggerEvent'], this['onTriggerEvent'], this);
		this['gantt'] = _0x9f6cx1;
		this['taskStore'] = _0x9f6cx1['getTaskStore']();
		this['add'](this['buildFields']())
	}
	, renderAndCollapse: function () {
		this['render'](Ext['getBody']());
		this['collapse'](Ext['Component'].DIRECTION_TOP, false);
		this['hide']();
		if (this['hideOnBlur']) {
			this['on']({
				show: function () {
					this['mon'](Ext['getBody'](), {
						click: this['onMouseClick']
						, scope: this
					})
				}
				, hide: function () {
					this['mun'](Ext['getBody'](), {
						click: this['onMouseClick']
						, scope: this
					})
				}
				, delay: 50
			})
		}
	}
	, show: function (_0x9f6cx2, _0x9f6cx5) {
		this['dependencyRecord'] = _0x9f6cx2;
		this['getForm']()['loadRecord'](_0x9f6cx2);
		this['fromLabel']['setValue'](Ext['String']['htmlEncode'](this['dependencyRecord']['getSourceTask']()['getName']()));
		this['toLabel']['setValue'](Ext['String']['htmlEncode'](this['dependencyRecord']['getTargetTask']()['getName']()));
		if (this['typeField']) {
			var _0x9f6cx1 = this['taskStore'] && this['taskStore']['getDependencyStore']()
				, _0x9f6cx3 = _0x9f6cx1 && _0x9f6cx1['allowedDependencyTypes'];
			this['typeField']['store']['filter']();
			this['typeField']['setReadOnly'](_0x9f6cx3 && _0x9f6cx3['length'] < 2)
		};
		this['callParent']([]);
		this['el']['setXY'](_0x9f6cx5);
		this['expand'](!this['constrain']);
		if (this['constrain']) {
			this['doConstrain'](Ext['util']['Region']['getRegion'](Ext['getBody']()))
		};
		this['saveButton'] && this['saveButton']['setVisible'](!this['gantt']['isReadOnly']());
		this['deleteButton'] && this['deleteButton']['setVisible'](!this['gantt']['isReadOnly']())
	}
	, buildFields: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['taskStore'] && _0x9f6cx5['taskStore']['getDependencyStore']();
		var _0x9f6cx1 = [_0x9f6cx5['fromLabel'] = new Ext['form'].TextField({
			readOnly: true
			, border: false
			, fieldLabel: _0x9f6cx5.L('fromText')
			, cls: 'sch-gantt-dependencyeditor-readonly'
		}), _0x9f6cx5['toLabel'] = new Ext['form'].TextField({
			readOnly: true
			, border: false
			, fieldLabel: _0x9f6cx5.L('toText')
			, cls: 'sch-gantt-dependencyeditor-readonly'
		}), _0x9f6cx5['typeField'] = _0x9f6cx5['buildTypeField']()];
		if (_0x9f6cx5['showLag']) {
			_0x9f6cx1['push'](_0x9f6cx5['lagField'] = new Ext['form'].NumberField({
				name: _0x9f6cx2 ? _0x9f6cx2['model']['prototype']['lagField'] : Ext.ux.Gantt['model']['Dependency']['prototype']['lagField']
				, fieldLabel: _0x9f6cx5.L('lagText')
			}))
		};
		return _0x9f6cx1
	}
	, onTriggerEvent: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx3, _0x9f6cx2) {
		if (!this['rendered']) {
			this['renderAndCollapse']()
		};
		if (_0x9f6cx1 !== this['dependencyRecord']) {
			this['show'](_0x9f6cx1, _0x9f6cx3['getXY']())
		}
	}
	, filterAllowedTypes: function (_0x9f6cx2) {
		var _0x9f6cx5 = this['taskStore'] && this['taskStore']['getDependencyStore']();
		if (!_0x9f6cx5 || !_0x9f6cx5['allowedDependencyTypes']) {
			return true
		};
		var _0x9f6cx7 = _0x9f6cx5['allowedDependencyTypes'];
		var _0x9f6cx6 = _0x9f6cx5['model']['Type'];
		for (var _0x9f6cx3 = 0, _0x9f6cx1 = _0x9f6cx7['length']; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
			var _0x9f6cx4 = _0x9f6cx6[_0x9f6cx7[_0x9f6cx3]];
			if (_0x9f6cx2['getId']() == _0x9f6cx4) {
				return true
			}
		};
		return false
	}
	, buildTypeField: function () {
		var _0x9f6cx2 = this['taskStore'] ? this['taskStore']['getDependencyStore']()['model'] : Ext.ux.Gantt['model']['Dependency'];
		var _0x9f6cx5 = _0x9f6cx2['Type'];
		this['typesFilter'] = new Ext['util'].Filter({
			filterFn: this['filterAllowedTypes']
			, scope: this
		});
		var _0x9f6cx1 = new Ext['data'].ArrayStore({
			fields: [{
				name: 'id'
				, type: 'int'
			}, 'text']
			, data: [[_0x9f6cx5['EndToStart'], this.L('endToStartText')], [_0x9f6cx5['StartToStart'], this.L('startToStartText')], [_0x9f6cx5['EndToEnd'], this.L('endToEndText')], [_0x9f6cx5['StartToEnd'], this.L('startToEndText')]]
		});
		_0x9f6cx1['filter'](this['typesFilter']);
		return new Ext['form']['field'].ComboBox({
			name: _0x9f6cx2['prototype']['typeField']
			, fieldLabel: this.L('typeText')
			, triggerAction: 'all'
			, queryMode: 'local'
			, editable: false
			, valueField: 'id'
			, displayField: 'text'
			, store: _0x9f6cx1
		})
	}
	, onMouseClick: function (_0x9f6cx1) {
		if (this['collapsed'] || _0x9f6cx1['within'](this['getEl']()) || _0x9f6cx1['getTarget']('.' + Ext['baseCSSPrefix'] + 'layer') || _0x9f6cx1['getTarget']('.sch-ignore-click')) {
			return
		};
		this['collapse']()
	}
	, afterCollapse: function () {
		delete this['dependencyRecord'];
		this['hide']();
		this['callParent'](arguments);
		if (this['hideOnBlur']) {
			this['mun'](Ext['getBody'](), 'click', this['onMouseClick'], this)
		}
	}
});
Ext.define('Ext.ux.Scheduler.plugin.exporter.AbstractExporter', {
	extend: 'Ext.util.Observable'
	, requires: ['Ext.XTemplate']
	, mixins: ['Ext.ux.Scheduler.mixin.Localizable']
	, pageHeaderHeight: 41
	, pageFooterHeight: 41
	, bufferedHeightMargin: 25
	, isExporter: true
	, paperWidth: 0
	, paperHeight: 0
	, printHeight: 0
	, lockedRowsHeight: 0
	, normalRowsHeight: 0
	, iterateTimeout: 10
	, tableSelector: undefined
	, currentPage: undefined
	, headerTplDataFn: null
	, footerTplDataFn: null
	, headerTplDataFnScope: null
	, footerTplDataFnScope: null
	, config: {
		exporterId: 'abstractexporter'
		, name: ''
		, translateURLsToAbsolute: true
		, expandAllBeforeExport: false
		, headerTpl: '<div class="sch-export-header" style="height:{height}px; width:{width}px"><h2>{pageNo}/{totalPages}</h2></div>'
		, tpl: '<!DOCTYPE html><html class="' + Ext['baseCSSPrefix'] + 'border-box {htmlClasses}"><head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type" /><title>{title}</title>{styles}</head><body class="' + Ext['baseCSSPrefix'] + 'webkit sch-export {bodyClasses}">{header}<div id="{id}" class="{componentClasses}" style="height:{bodyHeight}px; width:{totalWidth}px; position: relative !important">{HTML}</div>{footer}</body></html>'
		, footerTpl: '<div class="sch-export-header" style="height:{height}px; width:{width}px"><h2>{pageNo}/{totalPages}</h2></div>'
		, rowVisibilityThreshold: 0.6
	}
	, callbacks: undefined
	, error: undefined
	, extractedPages: undefined
	, numberOfPages: 0
	, firstExportedRowOffset: 0
	, secondaryCanvasOffset: 0
	, eventBoxes: null
	, dependencyPainter: null
	, dependenciesHtml: ''
	, depViewBeforeRefreshDetacher: null
	, depView: null
	, collectRowsTimer: null
	, collectRowsTimerTimeout: 1
	, collectRowsStepTimer: null
	, scrollToTimer: null
	, timer1: null
	, timer2: null
	, stylesheets: null
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx1 = _0x9f6cx1 || {};
		_0x9f6cx2['callParent'](arguments);
		delete _0x9f6cx1['getUserHeaderTplData'];
		delete _0x9f6cx1['getUserFooterTplData'];
		_0x9f6cx2['initConfig'](_0x9f6cx1);
		if (!_0x9f6cx1['tableSelector']) {
			_0x9f6cx2['tableSelector'] = '.' + Ext['baseCSSPrefix'] + 'grid-item-container'
		};
		if (!_0x9f6cx1['name']) {
			_0x9f6cx2['setName'](_0x9f6cx2.L('name'))
		}
	}
	, destroy: function () {
		clearTimeout(this['collectRowsStepTimer']);
		clearTimeout(this['collectRowsTimer']);
		clearTimeout(this['scrollToTimer']);
		clearTimeout(this['timer1']);
		clearTimeout(this['timer2']);
		this['callParent'](arguments)
	}
	, setHeaderTpl: function (_0x9f6cx1) {
		this['headerTpl'] = this['getTplInstance'](_0x9f6cx1)
	}
	, getHeaderTpl: function () {
		return this['headerTpl']
	}
	, setTpl: function (_0x9f6cx1) {
		this['tpl'] = this['getTplInstance'](_0x9f6cx1)
	}
	, getTpl: function () {
		return this['tpl']
	}
	, setFooterTpl: function (_0x9f6cx1) {
		this['footerTpl'] = this['getTplInstance'](_0x9f6cx1)
	}
	, getFooterTpl: function () {
		return this['footerTpl']
	}
	, getTplInstance: function (_0x9f6cx1) {
		return (_0x9f6cx1 && !_0x9f6cx1['isTemplate']) ? new Ext.XTemplate(_0x9f6cx1, {
			disableFormats: true
		}) : _0x9f6cx1
	}
	, getBodyClasses: function () {
		var _0x9f6cx2 = new RegExp(Ext['baseCSSPrefix'] + 'ie\d?|' + Ext['baseCSSPrefix'] + 'gecko', 'g')
			, _0x9f6cx1 = document['body']['className']['replace'](_0x9f6cx2, '');
		if (Ext['isIE']) {
			_0x9f6cx1 += ' sch-ie-export'
		};
		return _0x9f6cx1
	}
	, getComponentClasses: function () {
		return this['getComponent']()['el']['dom']['className']
	}
	, setComponent: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['component'] = _0x9f6cx1;
		_0x9f6cx2['view'] = _0x9f6cx1['getSchedulingView']();
		_0x9f6cx2['normalGrid'] = _0x9f6cx1['normalGrid'];
		_0x9f6cx2['lockedGrid'] = _0x9f6cx1['lockedGrid'];
		_0x9f6cx2['normalView'] = _0x9f6cx1['normalGrid']['getView']();
		_0x9f6cx2['lockedView'] = _0x9f6cx1['lockedGrid']['getView']();
		_0x9f6cx2['lockedBodySelector'] = '#' + _0x9f6cx2['lockedView']['getId']();
		_0x9f6cx2['normalBodySelector'] = '#' + _0x9f6cx2['normalView']['getId']();
		_0x9f6cx2['lockedHeader'] = _0x9f6cx2['lockedGrid']['headerCt'];
		_0x9f6cx2['normalHeader'] = _0x9f6cx2['normalGrid']['headerCt'];
		_0x9f6cx2['headerHeight'] = _0x9f6cx2['normalHeader']['getHeight']();
		_0x9f6cx2['printHeight'] = Math['floor'](_0x9f6cx2['paperHeight']) - _0x9f6cx2['headerHeight'] - (_0x9f6cx2['exportConfig']['showHeader'] ? _0x9f6cx2['pageHeaderHeight'] : 0) - (_0x9f6cx2['exportConfig']['showFooter'] ? _0x9f6cx2['pageFooterHeight'] : 0);
		_0x9f6cx2['saveComponentState'](_0x9f6cx1);
		_0x9f6cx2['initDependencyPainter'](_0x9f6cx1)
	}
	, getComponent: function () {
		return this['component']
	}
	, setPaperSize: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = this;
		if (_0x9f6cx2 === 'landscape') {
			_0x9f6cx5['paperWidth'] = _0x9f6cx1['height'];
			_0x9f6cx5['paperHeight'] = _0x9f6cx1['width']
		}
		else {
			_0x9f6cx5['paperWidth'] = _0x9f6cx1['width'];
			_0x9f6cx5['paperHeight'] = _0x9f6cx1['height']
		}
	}
	, getPaperFormat: function () {
		return this['exportConfig']['format']
	}
	, isBuffered: function () {
		return !!this['getBufferedRenderer']()
	}
	, getBufferedRenderer: function () {
		return this['view']['bufferedRenderer']
	}
	, setComponentRange: function (_0x9f6cx3) {
		var _0x9f6cx6 = this
			, _0x9f6cx5 = _0x9f6cx6['getComponent']();
		if (_0x9f6cx3['range'] !== 'complete') {
			var _0x9f6cx2 = _0x9f6cx6['view']
				, _0x9f6cx1, _0x9f6cx7;
			switch (_0x9f6cx3['range']) {
			case 'date':
				_0x9f6cx1 = new Date(_0x9f6cx3['dateFrom']);
				_0x9f6cx7 = new Date(_0x9f6cx3['dateTo']);
				if (Ext.ux.Scheduler['util']['Date']['getDurationInDays'](_0x9f6cx1, _0x9f6cx7) < 1) {
					_0x9f6cx7 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx7, Ext.ux.Scheduler['util']['Date'].DAY, 1)
				};
				break;
			case 'current':
				var _0x9f6cx8 = _0x9f6cx2['getVisibleDateRange']();
				_0x9f6cx1 = _0x9f6cx8['startDate'];
				_0x9f6cx7 = _0x9f6cx8['endDate'] || _0x9f6cx2['timeAxis']['getEnd']();
				break;
			case 'completedata':
				var _0x9f6cx4 = _0x9f6cx5['getEventStore']()['getTotalTimeSpan']();
				_0x9f6cx1 = _0x9f6cx4['start'];
				_0x9f6cx7 = _0x9f6cx4['end'];
				break
			};
			if (_0x9f6cx1 && _0x9f6cx7) {
				_0x9f6cx5['setTimeSpan'](_0x9f6cx1, _0x9f6cx7)
			}
		};
		_0x9f6cx6['ticks'] = _0x9f6cx5['timeAxis']['getTicks']();
		if (_0x9f6cx3['rowsRange'] == 'visible') {
			_0x9f6cx3['rowsRange'] = _0x9f6cx6['findVisibleRowsRange']()
		}
		else {
			_0x9f6cx3['rowsRange'] = null
		}
	}
	, getStylesheets: function () {
		var _0x9f6cx5 = this['getTranslateURLsToAbsolute']()
			, _0x9f6cx1 = Ext['getHead']()['select']('link[rel="stylesheet"], style', true)
			, _0x9f6cx2 = '';
		_0x9f6cx1['each'](function (_0x9f6cx4) {
			var _0x9f6cx3 = _0x9f6cx4['dom']['cloneNode'](true);
			if (_0x9f6cx5 && _0x9f6cx3['href']) {
				_0x9f6cx3['setAttribute']('href', _0x9f6cx3['href'])
			};
			_0x9f6cx2 += _0x9f6cx3['outerHTML'];
			if (Ext['isIE'] && _0x9f6cx3['styleSheet'] && /style/i ['test'](_0x9f6cx3['tagName'])) {
				_0x9f6cx2 += '<style type="text/css">' + _0x9f6cx4['dom']['styleSheet']['cssText'] + '</style>'
			}
		});
		return _0x9f6cx2
	}
	, forEachTimeSpanPlugin: function (_0x9f6cx5, _0x9f6cx7, _0x9f6cx4) {
		if (Ext.ux.Scheduler['feature'] && Ext.ux.Scheduler['feature']['AbstractTimeSpan']) {
			var _0x9f6cx8 = this;
			var _0x9f6cx2 = []['concat'](_0x9f6cx5['plugins'], _0x9f6cx5['normalGrid']['plugins'], _0x9f6cx5['columnLinesFeature']);
			for (var _0x9f6cx3 = 0, _0x9f6cx1 = _0x9f6cx2['length']; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
				var _0x9f6cx6 = _0x9f6cx2[_0x9f6cx3];
				if (_0x9f6cx6 instanceof Ext.ux.Scheduler['feature']['AbstractTimeSpan']) {
					_0x9f6cx7['call'](_0x9f6cx4 || _0x9f6cx8, _0x9f6cx6)
				}
			}
		}
	}
	, setCellSize: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['timeColumnWidth'] = _0x9f6cx2[0];
		if (_0x9f6cx1['timeColumnWidth']) {
			this['getComponent']()['setTimeColumnWidth'](_0x9f6cx1['timeColumnWidth'])
		};
		if (_0x9f6cx2['length'] > 1) {
			_0x9f6cx1['view']['setRowHeight'](_0x9f6cx2[1])
		}
	}
	, findVisibleRowsRange: function () {
		var _0x9f6cx7 = this
			, _0x9f6cx8 = _0x9f6cx7['lockedView']['all']
			, _0x9f6cxc = _0x9f6cx8['startIndex']
			, _0x9f6cx4 = _0x9f6cx8['endIndex'];
		var _0x9f6cx6 = false
			, _0x9f6cx5 = -1
			, _0x9f6cx1 = -1;
		for (var _0x9f6cx3 = _0x9f6cxc; _0x9f6cx3 <= _0x9f6cx4; _0x9f6cx3++) {
			var _0x9f6cx2 = _0x9f6cx8['item'](_0x9f6cx3, true);
			if (_0x9f6cx7['isRowVisible'](_0x9f6cx2, _0x9f6cx7['lockedBox'])) {
				if (!_0x9f6cx6) {
					_0x9f6cx5 = _0x9f6cx3;
					_0x9f6cx6 = true
				};
				_0x9f6cx1 = _0x9f6cx3
			}
			else {
				if (_0x9f6cx6) {
					break
				}
			}
		};
		return [_0x9f6cx5, _0x9f6cx1]
	}
	, prepareComponent: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		_0x9f6cx2 = _0x9f6cx2 || _0x9f6cx5['getComponent']();
		_0x9f6cx5['suspendInfiniteScroll'](_0x9f6cx2);
		_0x9f6cx5['forEachTimeSpanPlugin'](_0x9f6cx2, function (_0x9f6cx3) {
			_0x9f6cx3['_renderDelay'] = _0x9f6cx3['renderDelay'];
			_0x9f6cx3['renderDelay'] = 0
		});
		_0x9f6cx2['getSchedulingView']()['timeAxisViewModel']['suppressFit'] = true;
		_0x9f6cx2['timeAxis']['autoAdjust'] = false;
		_0x9f6cx2['normalGrid']['expand']();
		_0x9f6cx2['lockedGrid']['expand']();
		if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
			_0x9f6cx5['lockedBox'] = _0x9f6cx5['lockedGrid']['body']['getBox']();
			_0x9f6cx5['normalBox'] = _0x9f6cx5['normalGrid']['body']['getBox']()
		}
		else {
			_0x9f6cx5['lockedBox'] = _0x9f6cx5['lockedView']['getBox']();
			_0x9f6cx5['normalBox'] = _0x9f6cx5['normalView']['getBox']()
		};
		_0x9f6cx5['setComponentRange'](_0x9f6cx1);
		_0x9f6cx1['cellSize'] && _0x9f6cx5['setCellSize'](_0x9f6cx1['cellSize']);
		_0x9f6cx1['beforeExport'] && _0x9f6cx1['beforeExport'](_0x9f6cx2, _0x9f6cx5['ticks']);
		_0x9f6cx5['prepareColumns'](_0x9f6cx1['columns']);
		if (_0x9f6cx5['expandAllBeforeExport'] && _0x9f6cx2['expandAll']) {
			_0x9f6cx2['expandAll']()
		};
		_0x9f6cx5['fitComponentIntoPage'](_0x9f6cx1);
		_0x9f6cx5['view']['timeAxisViewModel']['setTickWidth'](_0x9f6cx5['view']['timeAxisViewModel']['getTickWidth']());
		if (_0x9f6cx5['isBuffered']() && Ext['isIE8']) {
			_0x9f6cx5['normalView']['bufferedRenderer']['variableRowHeight'] = false;
			_0x9f6cx5['lockedView']['bufferedRenderer']['variableRowHeight'] = false
		};
		_0x9f6cx5['stylesheets'] = _0x9f6cx5['getStylesheets']()
	}
	, prepareColumns: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx1 && _0x9f6cx1['length']) {
			_0x9f6cx2['lockedGrid']['headerCt']['items']['each'](function (_0x9f6cx5) {
				if (Ext['Array']['contains'](_0x9f6cx1, _0x9f6cx5)) {
					_0x9f6cx5['show']()
				}
				else {
					_0x9f6cx5['hide']()
				}
			})
		}
	}
	, restoreComponent: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx1 = _0x9f6cx1 || _0x9f6cx2['getComponent']();
		_0x9f6cx2['forEachTimeSpanPlugin'](_0x9f6cx1, function (_0x9f6cx5) {
			_0x9f6cx5['renderDelay'] = _0x9f6cx5['_renderDelay'];
			delete _0x9f6cx5['_renderDelay']
		});
		if (_0x9f6cx2['depViewBeforeRefreshDetacher']) {
			_0x9f6cx2['depViewBeforeRefreshDetacher']['destroy']();
			_0x9f6cx2['depViewBeforeRefreshDetacher'] = null;
			_0x9f6cx2['depView']['updateCanvasLayer']()
		};
		_0x9f6cx2['restoreComponentState'](_0x9f6cx1);
		_0x9f6cx2['restoreInfiniteScroll'](_0x9f6cx1);
		_0x9f6cx2['exportConfig']['afterExport'] && _0x9f6cx2['exportConfig']['afterExport'](_0x9f6cx1)
	}
	, saveComponentState: function (_0x9f6cx6) {
		_0x9f6cx6 = _0x9f6cx6 || this['getComponent']();
		var _0x9f6cx4 = this
			, _0x9f6cx7 = _0x9f6cx6['getSchedulingView']()
			, _0x9f6cx3 = _0x9f6cx6['normalGrid']
			, _0x9f6cx1 = _0x9f6cx6['lockedGrid'];
		var _0x9f6cx2 = [];
		_0x9f6cx1['headerCt']['items']['each'](function (_0x9f6cxc) {
			_0x9f6cx2['push']({
				column: _0x9f6cxc
				, visible: !_0x9f6cxc['isHidden']()
			})
		});
		var _0x9f6cx8 = _0x9f6cx7['timeAxisViewModel'];
		var _0x9f6cx9 = _0x9f6cx8['originalTickWidth'];
		var _0x9f6cx5 = _0x9f6cx8['getTickWidth']();
		_0x9f6cx8['setTickWidth'](_0x9f6cx5, true);
		_0x9f6cx4['restoreSettings'] = {
			width: _0x9f6cx6['getWidth']()
			, height: _0x9f6cx6['getHeight']()
			, rowHeight: _0x9f6cx8['getViewRowHeight']()
			, originalTickWidth: _0x9f6cx9
			, columnWidth: _0x9f6cx5
			, startDate: _0x9f6cx6['getStart']()
			, endDate: _0x9f6cx6['getEnd']()
			, normalWidth: _0x9f6cx3['getWidth']()
			, normalLeft: _0x9f6cx3['getEl']()['getStyle']('left')
			, lockedWidth: _0x9f6cx1['getWidth']()
			, lockedCollapse: _0x9f6cx1['collapsed']
			, normalCollapse: _0x9f6cx3['collapsed']
			, columns: _0x9f6cx2
			, autoAdjust: _0x9f6cx6['timeAxis']['autoAdjust']
			, suppressFit: _0x9f6cx8['suppressFit']
			, startIndex: _0x9f6cx7['all']['startIndex']
			, lockedScrollX: _0x9f6cx4['lockedView']['getScrollX']()
			, normalScrollX: _0x9f6cx7['getScrollX']()
			, scrollY: _0x9f6cx7['getVerticalScroll']()
		}
	}
	, restoreComponentState: function (_0x9f6cx5) {
		var _0x9f6cx3 = this;
		_0x9f6cx5 = _0x9f6cx5 || _0x9f6cx3['getComponent']();
		var _0x9f6cx2 = _0x9f6cx3['restoreSettings']
			, _0x9f6cx1 = _0x9f6cx5['getSchedulingView']();
		_0x9f6cx5['timeAxis']['autoAdjust'] = _0x9f6cx2['autoAdjust'];
		_0x9f6cx5['normalGrid']['show']();
		_0x9f6cx5['setWidth'](_0x9f6cx2['width']);
		_0x9f6cx5['setHeight'](_0x9f6cx2['height']);
		_0x9f6cx5['setTimeSpan'](_0x9f6cx2['startDate'], _0x9f6cx2['endDate']);
		_0x9f6cx5['setTimeColumnWidth'](_0x9f6cx2['columnWidth'], true);
		_0x9f6cx5['setRowHeight'](_0x9f6cx2['rowHeight']);
		Ext['Array']['each'](_0x9f6cx2['columns'], function (_0x9f6cx4) {
			_0x9f6cx4['column']['setVisible'](_0x9f6cx4['visible'])
		});
		_0x9f6cx5['lockedGrid']['show']();
		_0x9f6cx5['normalGrid']['setWidth'](_0x9f6cx2['normalWidth']);
		_0x9f6cx5['normalGrid']['getEl']()['setStyle']('left', _0x9f6cx2['normalLeft']);
		_0x9f6cx5['lockedGrid']['setWidth'](_0x9f6cx2['lockedWidth']);
		_0x9f6cx1['timeAxisViewModel']['suppressFit'] = _0x9f6cx2['suppressFit'];
		_0x9f6cx1['timeAxisViewModel']['setTickWidth'](_0x9f6cx2['columnWidth']);
		_0x9f6cx1['timeAxisViewModel']['originalTickWidth'] = _0x9f6cx2['originalTickWidth'];
		if (_0x9f6cx2['lockedCollapse']) {
			_0x9f6cx5['lockedGrid']['collapse']()
		};
		if (_0x9f6cx2['normalCollapse']) {
			_0x9f6cx5['normalGrid']['collapse']()
		};
		_0x9f6cx3['restoreComponentScroll'](_0x9f6cx2);
		if (_0x9f6cx3['getBufferedRenderer']()) {
			if (Ext['isIE8']) {
				_0x9f6cx3['normalView']['bufferedRenderer']['variableRowHeight'] = true;
				_0x9f6cx3['lockedView']['bufferedRenderer']['variableRowHeight'] = true
			}
		}
	}
	, restoreComponentScroll: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['lockedView']['setScrollX'](_0x9f6cx1['lockedScrollX']);
		_0x9f6cx2['normalView']['scrollTo'](_0x9f6cx1['normalScrollX'], _0x9f6cx1['scrollY'])
	}
	, extractPages: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx4, _0x9f6cx5) {
		var _0x9f6cx3 = this;
		if (!_0x9f6cx4) {
			throw 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter: [extractPages] "callback" has to be provided.'
		};
		_0x9f6cx3['enableGarbageCollector'] = Ext['enableGarbageCollector'];
		Ext['enableGarbageCollector'] = false;
		Ext['dom']['GarbageCollector']['pause']();
		_0x9f6cx3['exportConfig'] = _0x9f6cx1;
		_0x9f6cx3['normalRows'] = [];
		_0x9f6cx3['lockedRows'] = [];
		_0x9f6cx3['extractedPages'] = [];
		_0x9f6cx3['numberOfPages'] = 0;
		_0x9f6cx3['lockedRowsHeight'] = 0;
		_0x9f6cx3['normalRowsHeight'] = 0;
		_0x9f6cx3['firstExportedRowOffset'] = 0;
		_0x9f6cx3['secondaryCanvasOffset'] = 0;
		_0x9f6cx3['_abort'] = false;
		_0x9f6cx3['stylesheets'] = null;
		_0x9f6cx3['setPaperSize'](_0x9f6cx1['pageSize'], _0x9f6cx1['orientation']);
		_0x9f6cx3['setComponent'](_0x9f6cx2, _0x9f6cx1);
		_0x9f6cx3['prepareComponent'](_0x9f6cx2, _0x9f6cx1);
		_0x9f6cx3['callbacks'] = {
			success: _0x9f6cx4
			, scope: _0x9f6cx5 || _0x9f6cx3
		};
		_0x9f6cx3['collectRowsTimer'] = setTimeout(function () {
			_0x9f6cx3['collectRows'](_0x9f6cx3._onRowsCollected, _0x9f6cx3, _0x9f6cx1)
		}, _0x9f6cx3['collectRowsTimerTimeout'])
	}
	, onPagesExtracted: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx1 = _0x9f6cx2['renderPages'](_0x9f6cx1);
		_0x9f6cx2['restoreComponent']();
		_0x9f6cx2['submitPages'](_0x9f6cx1)
	}
	, submitPages: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['callbacks'];
		_0x9f6cx2['success']['call'](_0x9f6cx2['scope'], _0x9f6cx1);
		Ext['enableGarbageCollector'] = _0x9f6cx5['enableGarbageCollector'];
		Ext['dom']['GarbageCollector']['resume']()
	}
	, getCurrentPage: function () {
		return this['currentPage']
	}
	, setCurrentPage: function (_0x9f6cx1) {
		this['currentPage'] = _0x9f6cx1
	}
	, getExpectedNumberOfPages: function () {
		throw 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter: [getExpectedNumberOfPages] Abstract method called.'
	}
	, commitPage: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['numberOfPages']++;
		var _0x9f6cx3 = _0x9f6cx2['preparePageToCommit'](_0x9f6cx1);
		_0x9f6cx2['fireEvent']('beforecommitpage', _0x9f6cx2, _0x9f6cx3, _0x9f6cx2['numberOfPages'], _0x9f6cx2['getExpectedNumberOfPages']());
		var _0x9f6cx5 = Ext['apply']({
			html: _0x9f6cx3['dom']['outerHTML']
			, number: _0x9f6cx2['numberOfPages']
		}, _0x9f6cx1);
		_0x9f6cx2['extractedPages']['push'](_0x9f6cx5);
		_0x9f6cx2['fireEvent']('commitpage', _0x9f6cx2, _0x9f6cx5, _0x9f6cx2['numberOfPages'], _0x9f6cx2['getExpectedNumberOfPages']())
	}
	, collectLockedRow: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx7) {
		var _0x9f6cx3 = Ext['get'](_0x9f6cx4)
			, _0x9f6cx2 = _0x9f6cx3['getHeight']() - (_0x9f6cx7 ? _0x9f6cx3['getBorderWidth']('b') : 0);
		this['lockedRowsHeight'] += _0x9f6cx2;
		var _0x9f6cx1 = {
			height: _0x9f6cx2
			, row: _0x9f6cx4['cloneNode'](true)
			, record: this['lockedView']['getRecord'](_0x9f6cx5)
		};
		this['lockedRows']['push'](_0x9f6cx1);
		return _0x9f6cx1
	}
	, collectNormalRow: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx7) {
		var _0x9f6cx3 = Ext['get'](_0x9f6cx4)
			, _0x9f6cx2 = _0x9f6cx3['getHeight']() - (_0x9f6cx7 ? _0x9f6cx3['getBorderWidth']('b') : 0);
		this['normalRowsHeight'] += _0x9f6cx2;
		var _0x9f6cx1 = {
			height: _0x9f6cx2
			, row: _0x9f6cx4['cloneNode'](true)
			, record: this['normalView']['getRecord'](_0x9f6cx5)
		};
		this['normalRows']['push'](_0x9f6cx1);
		if (this['depView'] && this['depView']['getDependencyStore']()) {
			this['fillRecordRelatedBoxes'](_0x9f6cx1['record'])
		};
		return _0x9f6cx1
	}
	, _onRowsCollected: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['depView'];
		if (_0x9f6cx1 && _0x9f6cx1['getDependencyStore']()) {
			_0x9f6cx2['renderDependencies']()
		};
		_0x9f6cx2['onRowsCollected']['apply'](_0x9f6cx2, arguments)
	}
	, onRowsCollected: function () {
		throw 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter: [onRowsCollected] Abstract method called.'
	}
	, _abort: false
	, abort: function () {
		this['_abort'] = function () {
			this['restoreComponent']()
		}
	}
	, iterateAsync: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx3 = this;
		_0x9f6cx2 = _0x9f6cx2 || _0x9f6cx3;
		var _0x9f6cx1 = function () {
			var _0x9f6cx4 = arguments;
			_0x9f6cx3['timer2'] = setTimeout(function () {
				!_0x9f6cx3['_abort'] ? _0x9f6cx5['apply'](_0x9f6cx2, []['concat']['apply']([_0x9f6cx1], _0x9f6cx4)) : _0x9f6cx3._abort()
			}, _0x9f6cx3['iterateTimeout'])
		};
		_0x9f6cx1['apply'](_0x9f6cx3, Ext['Array']['slice'](arguments, 2))
	}
	, callAsync: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this;
		this['timer1'] = setTimeout(function () {
			_0x9f6cx2['apply'](_0x9f6cx1, Ext['Array']['slice'](arguments, 2))
		}, this['iterateTimeout'])
	}
	, canStartRowsCollecting: function () {
		var _0x9f6cx2 = this['getComponent']()
			, _0x9f6cx1 = _0x9f6cx2['getDependencyView']();
		return !_0x9f6cx1 || _0x9f6cx1['getDependencyCanvas']()
	}
	, depViewRefreshBlocker: function () {
		return false
	}
	, collectRows: function (_0x9f6cx8, _0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx7 = this
			, _0x9f6cx6 = 0;
		if (!_0x9f6cx7['canStartRowsCollecting']()) {
			var _0x9f6cx1 = Ext['Array']['slice'](arguments, 0);
			_0x9f6cx7['collectRowsTimer'] = setTimeout(function () {
				_0x9f6cx7['collectRows']['apply'](_0x9f6cx7, _0x9f6cx1)
			}, _0x9f6cx7['collectRowsTimerTimeout']);
			return
		};
		var _0x9f6cx4 = _0x9f6cx7['getComponent']()['getDependencyView']();
		if (_0x9f6cx7['depView']) {
			_0x9f6cx7['depViewBeforeRefreshDetacher'] = _0x9f6cx4['on']({
				beforerefresh: _0x9f6cx7['depViewRefreshBlocker']
				, destroyable: true
			})
		};
		var _0x9f6cx5 = _0x9f6cx7['isBuffered']();
		if (_0x9f6cx2['rowsRange']) {
			_0x9f6cx6 = _0x9f6cx2['rowsRange'][0];
			_0x9f6cx5 = !(_0x9f6cx2['rowsRange'][0] >= _0x9f6cx7['view']['all']['startIndex'] && _0x9f6cx2['rowsRange'][1] <= _0x9f6cx7['view']['all']['endIndex'])
		};
		if (_0x9f6cx5) {
			_0x9f6cx7['scrollToTimer'] = setTimeout(function () {
				_0x9f6cx7['scrollTo'](_0x9f6cx6, function () {
					_0x9f6cx6 && _0x9f6cx7['initFirstExportedRowOffset'](_0x9f6cx6);
					_0x9f6cx7['iterateAsync'](_0x9f6cx7['collectRowsStep'], _0x9f6cx7, _0x9f6cx6, _0x9f6cx8, _0x9f6cx3, _0x9f6cx2)
				})
			}, 1)
		}
		else {
			_0x9f6cx6 && _0x9f6cx7['initFirstExportedRowOffset'](_0x9f6cx6);
			_0x9f6cx7['collectRowsStepTimer'] = setTimeout(function () {
				_0x9f6cx7['collectRowsStep'](null, _0x9f6cx6, _0x9f6cx8, _0x9f6cx3, _0x9f6cx2)
			}, 1)
		}
	}
	, initFirstExportedRowOffset: function (_0x9f6cx1) {
		this['firstExportedRowOffset'] = this['view']['el']['getScrollTop']() - this['view']['el']['getTop']() + Ext['fly'](this['view']['getNode'](_0x9f6cx1))['getTop']()
	}
	, isRowVisible: function (_0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = Ext['fly'](_0x9f6cx3)
			, _0x9f6cx7 = _0x9f6cx2['getTop']()
			, _0x9f6cx4 = _0x9f6cx2['getHeight']()
			, _0x9f6cx6 = _0x9f6cx7 + _0x9f6cx4
			, _0x9f6cx5 = (1 - this['getRowVisibilityThreshold']()) * _0x9f6cx4;
		return _0x9f6cx7 + _0x9f6cx5 > _0x9f6cx1['top'] && _0x9f6cx6 - _0x9f6cx5 < _0x9f6cx1['bottom']
	}
	, collectRowsStep: function (_0x9f6cx6, _0x9f6cxf, _0x9f6cx12, _0x9f6cx11, _0x9f6cx1) {
		var _0x9f6cxd = this
			, _0x9f6cx7 = _0x9f6cxd['normalView']['all']['endIndex']
			, _0x9f6cxa = _0x9f6cxd['component']['store']['getCount']()
			, _0x9f6cx3 = _0x9f6cx1['rowsRange']
			, _0x9f6cxb = _0x9f6cxd['normalView']['all']['slice'](_0x9f6cxf)
			, _0x9f6cx2 = _0x9f6cxd['lockedView']['all']['slice'](_0x9f6cxf)
			, _0x9f6cx4 = 0;
		var _0x9f6cx8;
		if (_0x9f6cx3) {
			_0x9f6cx8 = _0x9f6cx3[1]
		};
		var _0x9f6cxe = false;
		for (var _0x9f6cxc = _0x9f6cxf, _0x9f6cx5 = _0x9f6cxb['length']; _0x9f6cx4 < _0x9f6cx5; _0x9f6cx4++) {
			if (_0x9f6cxc > _0x9f6cx8) {
				_0x9f6cxe = true;
				break
			};
			_0x9f6cx2[_0x9f6cx4] && _0x9f6cxd['collectLockedRow'](_0x9f6cx2[_0x9f6cx4], _0x9f6cxc, _0x9f6cx4 + 1 === _0x9f6cx5);
			_0x9f6cxd['collectNormalRow'](_0x9f6cxb[_0x9f6cx4], _0x9f6cxc, _0x9f6cx4 + 1 === _0x9f6cx5);
			_0x9f6cxc++
		};
		_0x9f6cxd['fireEvent']('collectrows', _0x9f6cxd, _0x9f6cxf, _0x9f6cxc, _0x9f6cxa);
		if (!_0x9f6cxe && _0x9f6cxd['isBuffered']()) {
			if (_0x9f6cx7 + 1 < _0x9f6cxa) {
				_0x9f6cxd['callAsync'](function () {
					_0x9f6cxd['scrollTo'](_0x9f6cx7 + 1, function () {
						_0x9f6cx6(_0x9f6cx7 + 1, _0x9f6cx12, _0x9f6cx11, _0x9f6cx1)
					})
				})
			}
			else {
				_0x9f6cxd['callAsync'](function () {
					_0x9f6cxd['scrollTo'](0, function () {
						_0x9f6cx12['call'](_0x9f6cx11 || _0x9f6cxd, _0x9f6cxd['lockedRows'], _0x9f6cxd['normalRows'])
					})
				})
			}
		}
		else {
			_0x9f6cx12['call'](_0x9f6cx11 || _0x9f6cxd, _0x9f6cxd['lockedRows'], _0x9f6cxd['normalRows'])
		}
	}
	, renderPages: function (_0x9f6cx1) {
		var _0x9f6cx3 = this;
		_0x9f6cx1 = _0x9f6cx1 || _0x9f6cx3['extractedPages'];
		for (var _0x9f6cx5 = 0, _0x9f6cx2 = _0x9f6cx1['length']; _0x9f6cx5 < _0x9f6cx2; _0x9f6cx5++) {
			var _0x9f6cx4 = _0x9f6cx1[_0x9f6cx5];
			_0x9f6cx4['html'] = _0x9f6cx3['applyPageTpl'](_0x9f6cx4)
		};
		return _0x9f6cx1
	}
	, applyPageTpl: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return _0x9f6cx2['getTpl']()['apply'](_0x9f6cx2['getPageTplData'](_0x9f6cx1))
	}
	, applyHeaderTpl: function (_0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx4 = _0x9f6cx5['getHeaderTpl']();
		if (_0x9f6cx5['exportConfig']['showHeader'] && _0x9f6cx4) {
			var _0x9f6cx1 = _0x9f6cx5['headerTplDataFn'];
			var _0x9f6cx3 = _0x9f6cx1 && _0x9f6cx1['call'](_0x9f6cx5['headerTplDataFnScope'] || _0x9f6cx5, _0x9f6cx2);
			return _0x9f6cx4['apply'](Ext['apply'](_0x9f6cx5['getHeaderTplData'](_0x9f6cx2), _0x9f6cx3))
		};
		return ''
	}
	, applyFooterTpl: function (_0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx4 = _0x9f6cx5['getFooterTpl']();
		if (_0x9f6cx5['exportConfig']['showFooter'] && _0x9f6cx4) {
			var _0x9f6cx1 = _0x9f6cx5['footerTplDataFn'];
			var _0x9f6cx3 = _0x9f6cx1 && _0x9f6cx1['call'](_0x9f6cx5['footerTplDataFnScope'] || _0x9f6cx5, _0x9f6cx2);
			return _0x9f6cx4['apply'](Ext['apply'](_0x9f6cx5['getFooterTplData'](_0x9f6cx2), _0x9f6cx3))
		};
		return ''
	}
	, getHeaderTplData: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return {
			width: _0x9f6cx2['paperWidth']
			, height: _0x9f6cx2['pageHeaderHeight']
			, totalPages: _0x9f6cx2['numberOfPages']
			, pageNo: _0x9f6cx1['number']
		}
	}
	, getFooterTplData: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return {
			width: _0x9f6cx2['paperWidth']
			, height: _0x9f6cx2['pageFooterHeight']
			, totalPages: _0x9f6cx2['numberOfPages']
			, pageNo: _0x9f6cx1['number']
		}
	}
	, getPageTplData: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return {
			id: _0x9f6cx2['getComponent']()['id']
			, bodyClasses: _0x9f6cx2['getBodyClasses']()
			, bodyHeight: _0x9f6cx2['printHeight'] + _0x9f6cx2['headerHeight']
			, componentClasses: _0x9f6cx2['getComponentClasses']()
			, styles: _0x9f6cx2['stylesheets']
			, showHeader: _0x9f6cx2['exportConfig']['showHeader']
			, showFooter: _0x9f6cx2['exportConfig']['showFooter']
			, header: _0x9f6cx2['applyHeaderTpl'](_0x9f6cx1)
			, HTML: _0x9f6cx1['html']
			, footer: _0x9f6cx2['applyFooterTpl'](_0x9f6cx1)
			, totalWidth: _0x9f6cx2['paperWidth']
			, pageNo: _0x9f6cx1['number']
			, totalPages: _0x9f6cx2['numberOfPages']
			, title: _0x9f6cx1['number'] + ' of ' + _0x9f6cx2['numberOfPages']
		}
	}
	, fitComponentIntoPage: Ext['emptyFn']
	, getLockedGridBody: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['getCurrentPage']();
		return _0x9f6cx1['down'](this['lockedBodySelector'] + ' ' + this['tableSelector'], true)
	}
	, getNormalGridBody: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['getCurrentPage']();
		return _0x9f6cx1['down'](this['normalBodySelector'] + ' ' + this['tableSelector'], true)
	}
	, emptyLockedGrid: function (_0x9f6cx1) {
		Ext['fly'](this['getLockedGridBody'](_0x9f6cx1))['select'](this['lockedView']['getItemSelector']())['remove']()
	}
	, fillGrids: function (_0x9f6cx5, _0x9f6cx2, _0x9f6cx4, _0x9f6cx1) {
		var _0x9f6cx3 = this;
		_0x9f6cx3['fillLockedGrid'](_0x9f6cx5, _0x9f6cx4, _0x9f6cx1);
		_0x9f6cx3['fillNormalGrid'](_0x9f6cx2, _0x9f6cx4, _0x9f6cx1)
	}
	, fillLockedGrid: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (!_0x9f6cx1) {
			_0x9f6cx2['emptyLockedGrid']()
		};
		_0x9f6cx2['appendRows'](_0x9f6cx2['getLockedGridBody'](), _0x9f6cx5 || _0x9f6cx2['lockedRows'], _0x9f6cx3)
	}
	, fillNormalGrid: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (!_0x9f6cx1) {
			_0x9f6cx2['emptyNormalGrid']()
		};
		_0x9f6cx2['appendRows'](_0x9f6cx2['getNormalGridBody'](), _0x9f6cx5 || _0x9f6cx2['normalRows'], _0x9f6cx3)
	}
	, appendRows: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx4) {
		for (var _0x9f6cx2 = 0, _0x9f6cx1 = _0x9f6cx5['length']; _0x9f6cx2 < _0x9f6cx1; _0x9f6cx2++) {
			_0x9f6cx3['appendChild'](_0x9f6cx4 ? _0x9f6cx5[_0x9f6cx2]['row']['cloneNode'](true) : _0x9f6cx5[_0x9f6cx2]['row'])
		}
	}
	, emptyNormalGrid: function (_0x9f6cx1) {
		Ext['fly'](this['getNormalGridBody'](_0x9f6cx1))['select'](this['normalView']['getItemSelector']())['remove']()
	}
	, getRowHeight: function () {
		return this['view']['timeAxisViewModel']['getViewRowHeight']()
	}
	, getTotalSize: function () {
		return {
			width: this['getTotalWidth']()
			, height: this['getTotalHeight']()
		}
	}
	, getTotalHeight: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1;
		if (_0x9f6cx2['isBuffered']()) {
			_0x9f6cx1 = _0x9f6cx2['bufferedHeightMargin'] + _0x9f6cx2['normalRowsHeight']
		}
		else {
			_0x9f6cx1 = _0x9f6cx2['lockedView']['getEl']()['down'](_0x9f6cx2['tableSelector'])['getHeight']()
		};
		return _0x9f6cx2['headerHeight'] + _0x9f6cx1
	}
	, getTotalWidth: function () {
		var _0x9f6cx1;
		if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
			_0x9f6cx1 = this['component']['lockedGrid']['split'] ? this['component']['down']('splitter')['getWidth']() : 0
		}
		else {
			_0x9f6cx1 = this['component']['split'] ? this['component']['down']('splitter')['getWidth']() : 0
		};
		return this['getLockedGridWidth']() + _0x9f6cx1 + this['normalView']['getEl']()['down'](this['tableSelector'])['getWidth']()
	}
	, getLockedGridWidth: function () {
		return this['lockedHeader']['getEl']()['down']('.' + Ext['baseCSSPrefix'] + 'box-inner')['getWidth']()
	}
	, getNormalGridWidth: function () {
		return this['normalHeader']['getEl']()['down']('.' + Ext['baseCSSPrefix'] + 'box-inner')['getWidth']()
	}
	, preparePageToCommit: function (_0x9f6cx12) {
		var _0x9f6cx5 = this['getCurrentPage']()
			, _0x9f6cx6 = this['component']
			, _0x9f6cxe = _0x9f6cx6['lockedGrid']
			, _0x9f6cx9 = _0x9f6cx6['normalGrid']
			, _0x9f6cxd = _0x9f6cx5['down']('.sch-secondary-canvas', true);
		_0x9f6cx5['select']('.sch-remove')['remove']();
		var _0x9f6cxb = function (_0x9f6cx14) {
				return _0x9f6cx5['down']('#' + _0x9f6cx14, true)
			}
			, _0x9f6cx2 = function (_0x9f6cx14) {
				if (_0x9f6cx14) {
					_0x9f6cx14['style']['width'] = '100%'
				}
			}
			, _0x9f6cxc = function (_0x9f6cx14) {
				if (_0x9f6cx14) {
					_0x9f6cx14['style']['height'] = '100%'
				}
			};
		var _0x9f6cx11 = _0x9f6cx5['down'](this['normalBodySelector'], true);
		_0x9f6cx11['style']['top'] = '0px';
		var _0x9f6cx7 = _0x9f6cx5['down'](this['lockedBodySelector'], true);
		_0x9f6cx7['style']['top'] = '0px';
		var _0x9f6cx13;
		if (_0x9f6cx13 = this['getLockedGridBody']()) {
			if (Ext['isIE9m']) {
				_0x9f6cx13['style']['top'] = ''
			}
			else {
				_0x9f6cx13['style']['transform'] = ''
			}
		};
		var _0x9f6cx8;
		if (_0x9f6cx8 = this['getNormalGridBody']()) {
			if (Ext['isIE9m']) {
				_0x9f6cx8['style']['top'] = ''
			}
			else {
				_0x9f6cx8['style']['transform'] = ''
			}
		};
		if (_0x9f6cxd) {
			_0x9f6cxd['style']['top'] = this['secondaryCanvasOffset'] + 'px';
			Ext['fly'](_0x9f6cxd)['select']('.sch-column-line')['setHeight'](this['normalRowsHeight'])
		};
		var _0x9f6cxf = [_0x9f6cxb(_0x9f6cx6['id'] + '-targetEl'), _0x9f6cxb(_0x9f6cx6['id'] + '-innerCt'), _0x9f6cxb(_0x9f6cxe['id']), _0x9f6cxb(_0x9f6cxe['body']['id']), _0x9f6cxb(_0x9f6cxe['view']['el']['id'])];
		if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
			var _0x9f6cx4 = '.' + Ext['baseCSSPrefix'];
			var _0x9f6cxa = _0x9f6cx5['down'](_0x9f6cx4 + 'grid-scroll-container', true);
			_0x9f6cxa['style']['top'] = this['headerHeight'] + 1 + 'px';
			_0x9f6cxa['style']['left'] = 0;
			_0x9f6cxc(_0x9f6cxa);
			_0x9f6cx2(_0x9f6cxa);
			var _0x9f6cx10 = _0x9f6cx5['down'](_0x9f6cx4 + 'grid-scroll-body', true);
			_0x9f6cxc(_0x9f6cx10);
			_0x9f6cx10['style']['overflow-y'] = 'hidden';
			Ext['Array']['each'](_0x9f6cx5['query'](_0x9f6cx4 + 'grid-view', true), function (_0x9f6cx14) {
				_0x9f6cxc(_0x9f6cx14)
			});
			_0x9f6cx7['style']['margin'] = _0x9f6cx11['style']['margin'] = 0;
			Ext['Array']['each'](_0x9f6cx5['query'](_0x9f6cx4 + 'grid-scroll-container ' + _0x9f6cx4 + 'scroller-spacer', true), function (_0x9f6cx14) {
				_0x9f6cx14['parentNode']['removeChild'](_0x9f6cx14)
			});
			var _0x9f6cx3 = _0x9f6cx5['down']('.' + Ext['baseCSSPrefix'] + 'splitter', true);
			if (_0x9f6cx3) {
				Ext['fly'](_0x9f6cx3)['setZIndex'](2)
			}
		};
		Ext['Array']['each'](_0x9f6cxf, _0x9f6cxc);
		_0x9f6cx2(_0x9f6cxf[0]);
		_0x9f6cx2(_0x9f6cxf[1]);
		if (!Ext['isIE']) {
			_0x9f6cx2(_0x9f6cxb(_0x9f6cx9['headerCt']['id']))
		}
		else {
			var _0x9f6cx1 = _0x9f6cxb(_0x9f6cx9['headerCt']['id']);
			if (_0x9f6cx1) {
				_0x9f6cx1['style']['width'] = ''
			}
		};
		Ext['Array']['each']([_0x9f6cxb(_0x9f6cx9['id']), _0x9f6cxb(_0x9f6cx9['body']['id']), _0x9f6cxb(_0x9f6cx9['getView']()['id'])], function (_0x9f6cx14) {
			if (_0x9f6cx14) {
				_0x9f6cx14['style']['height'] = _0x9f6cx14['style']['width'] = '100%'
			}
		});
		_0x9f6cx5['dom']['style']['height'] = '100%';
		_0x9f6cx5['dom']['style']['width'] = '';
		_0x9f6cx5['dom']['style']['top'] = '';
		return _0x9f6cx5
	}
	, startPage: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		var _0x9f6cx5 = (_0x9f6cx2 || _0x9f6cx1['getComponent']()['body'])['dom']['cloneNode'](true);
		_0x9f6cx5['id'] = '';
		_0x9f6cx1['setCurrentPage'](Ext['get'](_0x9f6cx5))
	}
	, scrollTo: function (_0x9f6cx1, _0x9f6cx4, _0x9f6cx5) {
		var _0x9f6cx3 = this;
		if (_0x9f6cx3['component']['ensureVisible']) {
			var _0x9f6cx2 = _0x9f6cx3['component']['store']['getAt'](_0x9f6cx1);
			if (_0x9f6cx2) {
				_0x9f6cx3['component']['ensureVisible'](_0x9f6cx2, {
					callback: function () {
						if (_0x9f6cx4 && (this['isLocked'] === false || Ext['versions']['extjs']['isGreaterThanOrEqual']('6.5.0'))) {
							_0x9f6cx4['apply'](_0x9f6cx5 || _0x9f6cx3)
						}
					}
					, select: false
					, focus: false
					, animate: false
				})
			}
			else {
				_0x9f6cx4['apply'](_0x9f6cx5 || _0x9f6cx3)
			}
		}
		else {
			_0x9f6cx3['lockedView']['bufferedRenderer']['scrollTo'](_0x9f6cx1, false, function () {
				_0x9f6cx3['normalView']['bufferedRenderer']['scrollTo'](_0x9f6cx1, false, _0x9f6cx4, _0x9f6cx5 || _0x9f6cx3)
			})
		}
	}
	, removeNode: function (_0x9f6cx2) {
		if (_0x9f6cx2 && _0x9f6cx2['parentNode']) {
			_0x9f6cx2['parentNode']['removeChild'](_0x9f6cx2)
		}
		else {
			if (_0x9f6cx2['elements']) {
				for (var _0x9f6cx1 = 0; _0x9f6cx1 < _0x9f6cx2['elements']['length']; _0x9f6cx1++) {
					var _0x9f6cx5 = _0x9f6cx2['elements'][_0x9f6cx1];
					_0x9f6cx5['parentNode']['removeChild'](_0x9f6cx5)
				}
			}
		}
	}
	, restoreInfiniteScroll: function (_0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx2['getSchedulingView']();
		if (_0x9f6cx2['infiniteScroll'] && _0x9f6cx1['rendered']) {
			_0x9f6cx2['timeAxis']['setTimeSpan'](this._oldStart, this._oldEnd);
			_0x9f6cx1['setScrollX'](this._oldScrollX);
			_0x9f6cx1['bindInfiniteScrollListeners']()
		}
	}
	, suspendInfiniteScroll: function (_0x9f6cx2) {
		var _0x9f6cx1 = _0x9f6cx2['getSchedulingView']();
		if (_0x9f6cx2['infiniteScroll'] && _0x9f6cx1['rendered']) {
			_0x9f6cx1['unbindInfiniteScrollListeners']();
			this['_oldStart'] = _0x9f6cx2['timeAxis']['getStart']();
			this['_oldEnd'] = _0x9f6cx2['timeAxis']['getEnd']();
			this['_oldScrollX'] = _0x9f6cx1['getScrollX']();
			var _0x9f6cx5 = _0x9f6cx2['getEventStore']()['getTotalTimeSpan']();
			_0x9f6cx2['setTimeSpan'](_0x9f6cx5['start'], _0x9f6cx5['end'])
		}
	}
	, dependencyPainterMembers: {
		getItemBox: function (_0x9f6cx3, _0x9f6cx1) {
			var _0x9f6cx5 = this
				, _0x9f6cx2 = _0x9f6cx5['exporter']['eventBoxes'][_0x9f6cx1['internalId']];
			return _0x9f6cx2 || this['callParent'](arguments)
		}
	}
	, initDependencyPainter: function (_0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx1['getDependencyView']();
		if (_0x9f6cx2) {
			_0x9f6cx5['dependencyPainter'] = _0x9f6cx2['clonePainter']();
			Ext['override'](_0x9f6cx5['dependencyPainter'], Ext['apply']({}, {
				exporter: _0x9f6cx5
			}, _0x9f6cx5['dependencyPainterMembers']))
		};
		_0x9f6cx5['depView'] = _0x9f6cx2;
		_0x9f6cx5['eventBoxes'] = {}
	}
	, fillRecordRelatedBoxes: function (_0x9f6cx7) {
		var _0x9f6cx6 = this
			, _0x9f6cx8 = _0x9f6cx6['normalView']
			, _0x9f6cxa = _0x9f6cx6['depView']['painter']
			, _0x9f6cx1 = _0x9f6cx6['depView']['getDependencyStore']();
		var _0x9f6cx13 = _0x9f6cx7['getEvents']();
		for (var _0x9f6cx5 = 0; _0x9f6cx5 < _0x9f6cx13['length']; _0x9f6cx5++) {
			var _0x9f6cx2 = _0x9f6cx13[_0x9f6cx5];
			if (_0x9f6cx8['timeAxis']['isRangeInAxis'](_0x9f6cx2) && _0x9f6cx1['getEventDependencies'](_0x9f6cx2)['length']) {
				var _0x9f6cx4 = _0x9f6cxa['getItemBox'](_0x9f6cx8, _0x9f6cx2);
				for (var _0x9f6cx3 = 0; _0x9f6cx3 < _0x9f6cx4['length']; _0x9f6cx3++) {
					if (_0x9f6cx8['bufferedRenderer']) {
						_0x9f6cx4[_0x9f6cx3]['top'] += _0x9f6cx8['bufferedRenderer']['bodyTop'];
						_0x9f6cx4[_0x9f6cx3]['bottom'] += _0x9f6cx8['bufferedRenderer']['bodyTop']
					};
					_0x9f6cx4[_0x9f6cx3]['rendered'] = true
				};
				_0x9f6cx6['eventBoxes'][_0x9f6cx2['internalId']] = _0x9f6cx4
			}
		}
	}
	, renderDependencies: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['depView'];
		if (_0x9f6cx1['getDrawDependencies']()) {
			_0x9f6cx2['dependenciesHtml'] = _0x9f6cx2['dependencyPainter']['generatePaintMarkup'](_0x9f6cx1['getPrimaryView'](), _0x9f6cx1['getDependencyStore']()['getRange']())
		}
		else {
			_0x9f6cx2['dependenciesHtml'] = ''
		}
	}
});
Ext.define('Ext.ux.Scheduler.plugin.exporter.SinglePage', {
	extend: 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter'
	, config: {
		exporterId: 'singlepage'
	}
	, getExpectedNumberOfPages: function () {
		return 1
	}
	, getPaperFormat: function () {
		var _0x9f6cx4 = this
			, _0x9f6cx5 = _0x9f6cx4['getTotalSize']()
			, _0x9f6cx2 = _0x9f6cx4['exportConfig']['DPI']
			, _0x9f6cx3 = Ext['Number']['toFixed'](_0x9f6cx5['width'] / _0x9f6cx2, 1)
			, _0x9f6cx1 = Ext['Number']['toFixed'](_0x9f6cx5['height'] / _0x9f6cx2, 1);
		return _0x9f6cx3 + 'in*' + _0x9f6cx1 + 'in'
	}
	, onRowsCollected: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['startPage']();
		_0x9f6cx1['fillGrids']();
		_0x9f6cx1['commitPage']();
		_0x9f6cx1['onPagesExtracted']()
	}
	, getPageTplData: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getTotalSize']();
		return Ext['apply'](_0x9f6cx2['callParent'](arguments), {
			bodyHeight: _0x9f6cx1['height']
			, totalWidth: _0x9f6cx1['width']
		})
	}
	, getHeaderTplData: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return Ext['apply'](_0x9f6cx2['callParent'](arguments), {
			width: _0x9f6cx2['getTotalWidth']()
			, height: _0x9f6cx2['pageHeaderHeight']
		})
	}
	, getFooterTplData: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return Ext['apply'](_0x9f6cx2['callParent'](arguments), {
			width: _0x9f6cx2['getTotalWidth']()
			, height: _0x9f6cx2['pageHeaderHeight']
		})
	}
	, fitComponentIntoPage: function (_0x9f6cx1) {
		var _0x9f6cx2 = this
			, _0x9f6cx5 = _0x9f6cx2['lockedGrid'];
		if (_0x9f6cx1['columns'] && !_0x9f6cx1['columns']['length']) {
			_0x9f6cx5['setWidth'](0)
		}
		else {
			_0x9f6cx5['setWidth'](Ext['fly'](_0x9f6cx5['getView']()['getNodeContainer']())['getWidth']())
		}
	}
	, preparePageToCommit: function () {
		var _0x9f6cxc = this
			, _0x9f6cx13 = _0x9f6cxc['callParent'](arguments)
			, _0x9f6cx9 = _0x9f6cx13['select']('.sch-secondary-canvas')['first']()
			, _0x9f6cx3 = _0x9f6cx9['select']('.sch-zone')
			, _0x9f6cxb = _0x9f6cx9['select']('.sch-column-line')
			, _0x9f6cxa = _0x9f6cxc['getTotalHeight']();
		_0x9f6cx9['setTop'](-this['firstExportedRowOffset']);
		_0x9f6cx3['setHeight'](_0x9f6cxa);
		_0x9f6cxb['setHeight'](_0x9f6cxa);
		var _0x9f6cx7 = _0x9f6cx13['selectNode']('.sch-dependencyview-ct');
		if (_0x9f6cx7) {
			_0x9f6cx7['innerHTML'] = _0x9f6cxc['dependenciesHtml'];
			_0x9f6cx7['style']['top'] = -this['firstExportedRowOffset'] + 'px';
			_0x9f6cx7['style']['left'] = '0px';
			_0x9f6cx7['style']['visibility'] = 'visible'
		};
		var _0x9f6cx4 = _0x9f6cxc['normalView']
			, _0x9f6cx6 = _0x9f6cx4['getEl']()['down'](_0x9f6cxc['tableSelector'])['getWidth']()
			, _0x9f6cx2 = _0x9f6cx4['id']
			, _0x9f6cx5 = _0x9f6cx13['select']('#' + _0x9f6cx2)['first']()['dom'];
		_0x9f6cx5['style']['width'] = _0x9f6cx6 + 'px';
		var _0x9f6cx8 = _0x9f6cx13['selectNode']('#' + _0x9f6cxc['normalView']['id']);
		_0x9f6cx8['style']['overflow'] = 'hidden';
		var _0x9f6cx1 = _0x9f6cx13['selectNode']('.' + Ext['baseCSSPrefix'] + 'splitter');
		if (_0x9f6cx1) {
			_0x9f6cx1['style']['height'] = '100%'
		};
		return _0x9f6cx13
	}
});
Ext.define('Ext.ux.Scheduler.plugin.exporter.MultiPage', {
	extend: 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter'
	, config: {
		exporterId: 'multipage'
	}
	, rowPageIndex: 0
	, columnPageIndex: 0
	, pagesPerColumn: 0
	, depsTopOffset: 0
	, onRowsCollected: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		_0x9f6cx5['depsTopOffset'] = -_0x9f6cx5['firstExportedRowOffset'];
		_0x9f6cx5['rowPageIndex'] = 0;
		_0x9f6cx5['columnPageIndex'] = 0;
		_0x9f6cx5['pagesPerColumn'] = 0;
		_0x9f6cx5['buildPageFrames'](function () {
			_0x9f6cx5['buildPages'](_0x9f6cx5['onPagesExtracted'], _0x9f6cx5, _0x9f6cx2, _0x9f6cx1)
		})
	}
	, buildPages: function (_0x9f6cx7, _0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx3 = this
			, _0x9f6cx4 = _0x9f6cx3['pageFrames'][0];
		_0x9f6cx3['startPage'](_0x9f6cx4, true);
		this['iterateAsync'](_0x9f6cx3['rowIteratorStep'], _0x9f6cx3, {
			rowIndex: 0
			, pageFrame: _0x9f6cx4
			, rowsHeight: 0
			, leftHeight: this['printHeight']
			, lockeds: []
			, normals: []
			, lockedRows: _0x9f6cx2
			, normalRows: _0x9f6cx1
			, callback: _0x9f6cx7
			, scope: _0x9f6cx5 || _0x9f6cx3
		})
	}
	, rowIteratorStep: function (_0x9f6cx6, _0x9f6cx1) {
		var _0x9f6cxc = this
			, _0x9f6cxa = _0x9f6cx1['rowIndex']
			, _0x9f6cx2 = _0x9f6cx1['lockedRows']
			, _0x9f6cx8 = _0x9f6cx1['normalRows']
			, _0x9f6cx9 = _0x9f6cx1['leftHeight']
			, _0x9f6cx3 = _0x9f6cx1['lockeds']
			, _0x9f6cx13 = _0x9f6cx1['normals']
			, _0x9f6cx5 = true;
		if (_0x9f6cxa < _0x9f6cx8['length']) {
			var _0x9f6cx7 = _0x9f6cx2[_0x9f6cxa]
				, _0x9f6cx4 = _0x9f6cx8[_0x9f6cxa];
			if (_0x9f6cx4['height'] <= _0x9f6cx9) {
				_0x9f6cx3['push'](_0x9f6cx7);
				_0x9f6cx13['push'](_0x9f6cx4);
				_0x9f6cx1['leftHeight'] -= _0x9f6cx4['height'];
				_0x9f6cx1['rowsHeight'] += _0x9f6cx4['height'];
				_0x9f6cx5 = false
			}
			else {
				_0x9f6cxc['fillGrids'](_0x9f6cx3, _0x9f6cx13, _0x9f6cx1['pageFrame']);
				_0x9f6cxc['commitPage']({
					rowsHeight: _0x9f6cx1['rowsHeight']
				});
				_0x9f6cxc['startPage'](_0x9f6cx1['pageFrame']);
				_0x9f6cx1['lockeds'] = [_0x9f6cx7];
				_0x9f6cx1['normals'] = [_0x9f6cx4];
				_0x9f6cx1['leftHeight'] = _0x9f6cxc['printHeight'] - _0x9f6cx4['height'];
				_0x9f6cx1['rowsHeight'] = _0x9f6cx4['height']
			};
			_0x9f6cx1['rowIndex']++
		}
		else {
			if (_0x9f6cxc['columnPageIndex'] < _0x9f6cxc['pageFrames']['length']) {
				_0x9f6cxc['fillGrids'](_0x9f6cx3, _0x9f6cx13, _0x9f6cx1['pageFrame']);
				_0x9f6cxc['commitPage']({
					rowsHeight: _0x9f6cx1['rowsHeight']
				});
				_0x9f6cx1['pageFrame'] = _0x9f6cxc['pageFrames'][_0x9f6cxc['columnPageIndex']];
				_0x9f6cxc['startPage'](_0x9f6cx1['pageFrame'], true);
				_0x9f6cx1['leftHeight'] = _0x9f6cxc['printHeight'];
				_0x9f6cx1['rowsHeight'] = 0;
				_0x9f6cx1['lockeds'] = [];
				_0x9f6cx1['normals'] = [];
				_0x9f6cx1['rowIndex'] = 0
			}
			else {
				_0x9f6cxc['fillGrids'](_0x9f6cx3, _0x9f6cx13, _0x9f6cx1['pageFrame']);
				_0x9f6cxc['commitPage']({
					rowsHeight: _0x9f6cx1['rowsHeight']
				});
				_0x9f6cx1['callback']['call'](_0x9f6cx1['scope']);
				return
			}
		};
		if (_0x9f6cx5) {
			_0x9f6cx6(_0x9f6cx1)
		}
		else {
			_0x9f6cxc['rowIteratorStep'](_0x9f6cx6, _0x9f6cx1)
		}
	}
	, fillGrids: function (_0x9f6cx4, _0x9f6cx3, _0x9f6cx7) {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['lockedColumnPages'][_0x9f6cx5['columnPageIndex'] - 1]
			, _0x9f6cx1 = !_0x9f6cx2 || (_0x9f6cx2 && _0x9f6cx2['leftWidth']);
		if (_0x9f6cx2) {
			_0x9f6cx5['fillLockedGrid'](_0x9f6cx4, true);
			_0x9f6cx5['removeHiddenLockedColumns'](_0x9f6cx2)
		};
		if (_0x9f6cx1) {
			_0x9f6cx5['fillNormalGrid'](_0x9f6cx3, true);
			_0x9f6cx5['removeInvisibleEvents'](-_0x9f6cx7['normalGridOffset'], -_0x9f6cx7['normalGridOffset'] + _0x9f6cx7['normalGridWidth'])
		}
	}
	, buildPageFrame: function (_0x9f6cx9, _0x9f6cx2) {
		var _0x9f6cx6 = this
			, _0x9f6cxa = _0x9f6cx6['lockedColumnPages'][_0x9f6cx9];
		if (_0x9f6cxa) {
			_0x9f6cx6['lockedGrid']['setWidth'](_0x9f6cx6['showLockedColumns'](_0x9f6cxa['start'], _0x9f6cxa['end']) + (_0x9f6cxa['startOffset'] || 0));
			if (_0x9f6cxa['leftWidth']) {
				_0x9f6cx6['normalGrid']['show']()
			}
			else {
				var _0x9f6cx5 = _0x9f6cx6['lockedGrid']['headerCt']['getHeight']();
				_0x9f6cx6['lockedGrid']['getVisibleColumns']()[0]['setHeight'](_0x9f6cx5);
				_0x9f6cx6['normalGrid']['hide']()
			}
		}
		else {
			_0x9f6cx6['lockedGrid']['setWidth'](0);
			_0x9f6cx6['lockedGrid']['hide']();
			_0x9f6cx6['normalGrid']['show']()
		};
		var _0x9f6cx1 = _0x9f6cx6['getComponent']()['body']['dom']['cloneNode'](true);
		_0x9f6cx1['id'] = '';
		_0x9f6cx1 = Ext['get'](_0x9f6cx1);
		_0x9f6cx1['normalGridOffset'] = _0x9f6cx2;
		_0x9f6cx1['lockedGridOffset'] = _0x9f6cxa && _0x9f6cxa['startOffset'] || 0;
		_0x9f6cx1['normalGridWidth'] = _0x9f6cx6['normalGrid']['getWidth']();
		_0x9f6cx1['lockedGridWidth'] = _0x9f6cx6['lockedGrid']['getWidth']();
		_0x9f6cx1['down'](_0x9f6cx6['lockedBodySelector'], true)['style']['position'] = '';
		_0x9f6cx1['down']('#' + _0x9f6cx6['lockedView']['id'], true)['style']['overflow'] = 'visible';
		if (!_0x9f6cx6['normalGrid']['hidden']) {
			var _0x9f6cxc = _0x9f6cx1['select'](_0x9f6cx6['normalBodySelector'])['first']();
			_0x9f6cxc['dom']['style']['position'] = '';
			_0x9f6cxc['dom']['style']['top'] = '0px';
			var _0x9f6cx4 = _0x9f6cx6['getNormalGridBody'](_0x9f6cx1);
			var _0x9f6cx3 = _0x9f6cx1['down']('#' + _0x9f6cx6['normalView']['headerCt']['id'], true);
			var _0x9f6cx7 = _0x9f6cx1['down']('.sch-secondary-canvas', true);
			var _0x9f6cx8 = _0x9f6cx1['down']('#' + _0x9f6cx6['normalView']['id'], true);
			_0x9f6cx4['style']['left'] = _0x9f6cx2 + 'px';
			_0x9f6cx3['style']['left'] = _0x9f6cx2 + 'px';
			_0x9f6cx3['style']['overflow'] = 'visible';
			_0x9f6cx7['style']['left'] = _0x9f6cx2 + 'px';
			_0x9f6cx8['style']['overflow'] = 'visible'
		};
		return _0x9f6cx1
	}
	, buildPageFrames: function (_0x9f6cx4, _0x9f6cx5) {
		var _0x9f6cx3 = this;
		_0x9f6cx5 = _0x9f6cx5 || _0x9f6cx3;
		_0x9f6cx3['lockedColumnPages'] = _0x9f6cx3['calculateLockedColumnPages']();
		var _0x9f6cx1 = Math['ceil'](_0x9f6cx3['getTotalWidth']() / _0x9f6cx3['paperWidth'])
			, _0x9f6cx2 = _0x9f6cx3['pageFrames'] = [];
		_0x9f6cx3['iterateAsync'](function (_0x9f6cx8, _0x9f6cx6, _0x9f6cx9) {
			if (_0x9f6cx6 >= _0x9f6cx1) {
				_0x9f6cx4['call'](_0x9f6cx5, _0x9f6cx2);
				return
			};
			_0x9f6cx2['push'](_0x9f6cx3['buildPageFrame'](_0x9f6cx6, _0x9f6cx9));
			var _0x9f6cx7 = _0x9f6cx3['lockedColumnPages'][_0x9f6cx6];
			if (_0x9f6cx7) {
				_0x9f6cx9 -= _0x9f6cx7['leftWidth'] || 0
			}
			else {
				_0x9f6cx9 -= _0x9f6cx3['paperWidth']
			};
			_0x9f6cx8(_0x9f6cx6 + 1, _0x9f6cx9)
		}, _0x9f6cx3, 0, 0)
	}
	, startPage: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx1) {
			_0x9f6cx2['depsTopOffset'] = -_0x9f6cx2['firstExportedRowOffset'];
			if (_0x9f6cx2['columnPageIndex'] == 1) {
				_0x9f6cx2['pagesPerColumn'] = _0x9f6cx2['extractedPages']['length']
			};
			_0x9f6cx2['rowPageIndex'] = 0;
			_0x9f6cx2['columnPageIndex']++;
			_0x9f6cx2['secondaryCanvasOffset'] = _0x9f6cx2['firstExportedRowOffset']
		};
		_0x9f6cx2['rowPageIndex']++;
		_0x9f6cx2['callParent'](arguments);
		_0x9f6cx2['emptyNormalGrid']();
		_0x9f6cx2['emptyLockedGrid']()
	}
	, commitPage: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['callParent']([Ext['apply']({
			row: _0x9f6cx2['rowPageIndex']
			, column: _0x9f6cx2['columnPageIndex']
		}, _0x9f6cx1)]);
		_0x9f6cx2['secondaryCanvasOffset'] -= _0x9f6cx1['rowsHeight'];
		_0x9f6cx2['depsTopOffset'] -= _0x9f6cx1['rowsHeight']
	}
	, getExpectedPagesPerColumn: function () {
		return this['pagesPerColumn'] || Math['ceil']((this['normalRowsHeight'] || this['component']['store']['count']() * this['component']['getRowHeight']()) / this['printHeight'])
	}
	, getExpectedColumnsNumber: function () {
		return this['pageFrames'] ? this['pageFrames']['length'] : Math['ceil']((this['lockedGrid']['getWidth']() + this['ticks']['length'] * this['view']['timeAxisViewModel']['getTickWidth']()) / this['paperWidth'])
	}
	, getExpectedNumberOfPages: function () {
		return this['getExpectedColumnsNumber']() * this['getExpectedPagesPerColumn']()
	}
	, calculateLockedColumnPages: function () {
		var _0x9f6cx8 = this
			, _0x9f6cxc = []
			, _0x9f6cx5 = _0x9f6cx8['lockedColumns']
			, _0x9f6cx4 = _0x9f6cx8['paperWidth']
			, _0x9f6cx6;
		for (var _0x9f6cx7 = 0, _0x9f6cx3 = _0x9f6cx5['length']; _0x9f6cx7 < _0x9f6cx3; _0x9f6cx7++) {
			var _0x9f6cx2 = _0x9f6cx5[_0x9f6cx7]
				, _0x9f6cx1 = _0x9f6cx2['width'];
			_0x9f6cx6 = _0x9f6cx6 || {
				start: _0x9f6cx7
				, end: _0x9f6cx7
			};
			_0x9f6cx4 -= _0x9f6cx1;
			if (_0x9f6cx4 < 0) {
				_0x9f6cxc['push'](_0x9f6cx6);
				if (_0x9f6cx4) {
					_0x9f6cx6 = {
						start: _0x9f6cx7
						, end: _0x9f6cx7
					}
				};
				_0x9f6cx4 = _0x9f6cx8['paperWidth'] - _0x9f6cx1 + _0x9f6cx4
			}
			else {
				_0x9f6cx6['end'] = _0x9f6cx7
			}
		};
		if (_0x9f6cx6) {
			_0x9f6cx6['leftWidth'] = _0x9f6cx4;
			_0x9f6cxc['push'](_0x9f6cx6)
		};
		return _0x9f6cxc
	}
	, getPageTplData: function (_0x9f6cx1) {
		return Ext['apply'](this['callParent'](arguments), {
			title: _0x9f6cx1['number'] + ' of ' + this['numberOfPages'] + ' (column: ' + _0x9f6cx1['column'] + ', row: ' + _0x9f6cx1['row'] + ')'
		})
	}
	, showLockedColumns: function (_0x9f6cx4, _0x9f6cx6) {
		var _0x9f6cx7 = this
			, _0x9f6cx2 = _0x9f6cx7['lockedColumns']
			, _0x9f6cx3 = 0;
		_0x9f6cx4 = _0x9f6cx4 || 0;
		_0x9f6cx6 = _0x9f6cx6 || _0x9f6cx2['length'] - 1;
		for (var _0x9f6cx1 = 0; _0x9f6cx1 < _0x9f6cx2['length']; _0x9f6cx1++) {
			var _0x9f6cx5 = _0x9f6cx2[_0x9f6cx1];
			if (_0x9f6cx1 >= _0x9f6cx4 && _0x9f6cx1 <= _0x9f6cx6) {
				_0x9f6cx5['column']['show']();
				_0x9f6cx3 += _0x9f6cx5['width']
			}
			else {
				_0x9f6cx5['column']['hide']()
			}
		};
		return _0x9f6cx3
	}
	, removeInvisibleEvents: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx4 = this
			, _0x9f6cx5 = _0x9f6cx4['getNormalGridBody']()
			, _0x9f6cx3 = _0x9f6cx4['normalView']['eventSelector'];
		Ext['Array']['each'](Ext['fly'](_0x9f6cx5)['select'](_0x9f6cx3)['elements'], function (_0x9f6cx6) {
			var _0x9f6cx8 = parseInt(_0x9f6cx6['style']['left'], 10)
				, _0x9f6cx7 = _0x9f6cx8 + parseInt(_0x9f6cx6['style']['width'], 10);
			if (_0x9f6cx7 < _0x9f6cx1 || _0x9f6cx8 > _0x9f6cx2) {
				_0x9f6cx4['removeNode'](_0x9f6cx6)
			}
		})
	}
	, removeHiddenLockedColumns: function (_0x9f6cx2) {
		var _0x9f6cxc = this
			, _0x9f6cx8 = _0x9f6cxc['getCurrentPage']()
			, _0x9f6cx1 = _0x9f6cxc['getLockedGridBody']();
		for (var _0x9f6cx7 = 0; _0x9f6cx7 < _0x9f6cxc['lockedColumns']['length']; _0x9f6cx7++) {
			var _0x9f6cx5 = _0x9f6cxc['lockedColumns'][_0x9f6cx7]['column'];
			if (_0x9f6cx7 < _0x9f6cx2['start'] || _0x9f6cx7 > _0x9f6cx2['end']) {
				var _0x9f6cx3 = '#' + _0x9f6cx5['getId']();
				var _0x9f6cx6 = _0x9f6cx8['select'](_0x9f6cx3);
				_0x9f6cxc['removeNode'](_0x9f6cx6);
				var _0x9f6cx4 = _0x9f6cx5['getCellSelector']();
				var _0x9f6cxa = Ext['fly'](_0x9f6cx1)['select'](_0x9f6cx4);
				_0x9f6cxc['removeNode'](_0x9f6cxa)
			}
		}
	}
	, fitComponentIntoPage: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getComponent']();
		_0x9f6cx1['setWidth'](_0x9f6cx2['paperWidth'])
	}
	, prepareComponent: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx3 = this
			, _0x9f6cx5 = _0x9f6cx3['lockedColumns'] = [];
		_0x9f6cx3['callParent'](arguments);
		if (!(_0x9f6cx1['columns'] && _0x9f6cx1['columns']['length'] === 0)) {
			_0x9f6cx3['lockedGrid']['headerCt']['items']['each'](function (_0x9f6cx4) {
				if (!_0x9f6cx4['hidden']) {
					_0x9f6cx5['push']({
						column: _0x9f6cx4
						, width: _0x9f6cx4['getWidth']()
					})
				}
			})
		}
	}
	, restoreComponentState: function () {
		this['callParent'](arguments);
		this['showLockedColumns']()
	}
	, preparePageToCommit: function (_0x9f6cx2) {
		var _0x9f6cx7 = this
			, _0x9f6cx8 = _0x9f6cx7['callParent'](arguments)
			, _0x9f6cx1 = _0x9f6cx8['down']('.' + Ext['baseCSSPrefix'] + 'splitter', true)
			, _0x9f6cx3 = _0x9f6cx8['selectNode']('.sch-dependencyview-ct')
			, _0x9f6cx6 = _0x9f6cx7['pageFrames'][_0x9f6cx7['columnPageIndex'] - 1];
		if (_0x9f6cx1) {
			if (_0x9f6cx6['lockedHidden']) {
				_0x9f6cx1['style']['display'] = 'none';
				_0x9f6cx8['down']('.' + Ext['baseCSSPrefix'] + 'grid-inner-normal', true)['style']['left'] = 0
			}
			else {
				Ext['fly'](_0x9f6cx1)['setHeight']('100%')
			}
		};
		if (!_0x9f6cx6['normalHidden']) {
			if (_0x9f6cx3) {
				_0x9f6cx3['innerHTML'] = _0x9f6cx7['dependenciesHtml'];
				_0x9f6cx3['style']['top'] = _0x9f6cx7['depsTopOffset'] + 'px';
				_0x9f6cx3['style']['visibility'] = 'visible'
			};
			var _0x9f6cx5 = _0x9f6cx8['selectNode']('#' + _0x9f6cx7['normalView']['id']);
			if (_0x9f6cx5) {
				var _0x9f6cx4 = _0x9f6cx7['normalView']['getEl']()['down'](_0x9f6cx7['tableSelector'])['getWidth']();
				_0x9f6cx5['style']['width'] = _0x9f6cx4 + 'px';
				_0x9f6cx5['style']['overflow'] = 'hidden'
			}
		};
		if (!_0x9f6cx6['lockedHidden']) {
			var _0x9f6cx9 = _0x9f6cx8['selectNode']('#' + _0x9f6cx7['lockedView']['id']);
			if (_0x9f6cx9) {
				_0x9f6cx9['style']['overflow'] = 'hidden'
			}
		};
		return _0x9f6cx8
	}
});
Ext.define('Ext.ux.Scheduler.plugin.exporter.MultiPageVertical', {
	extend: 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter'
	, config: {
		exporterId: 'multipagevertical'
	}
	, minRowHeight: 20
	, minAverageColumnWidth: 100
	, visibleColumns: null
	, visibleColumnsWidth: 0
	, depsTopOffset: 0
	, onRowsCollected: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		_0x9f6cx5['depsTopOffset'] = -_0x9f6cx5['firstExportedRowOffset'];
		_0x9f6cx5['iterateAsync'](function (_0x9f6cx8, _0x9f6cxa) {
			if (_0x9f6cxa === _0x9f6cx1['length']) {
				_0x9f6cx5['onPagesExtracted']();
				return
			};
			var _0x9f6cx9 = _0x9f6cxa
				, _0x9f6cx6 = _0x9f6cx5['printHeight']
				, _0x9f6cxb = 0
				, _0x9f6cx4 = []
				, _0x9f6cx13 = []
				, _0x9f6cx3 = false
				, _0x9f6cxc, _0x9f6cx7;
			_0x9f6cx5['startPage']();
			while (!_0x9f6cx3 && _0x9f6cx9 < _0x9f6cx1['length']) {
				_0x9f6cxc = _0x9f6cx1[_0x9f6cx9];
				_0x9f6cx7 = _0x9f6cx2[_0x9f6cx9];
				_0x9f6cx6 -= _0x9f6cxc['height'];
				if (_0x9f6cx6 > 0) {
					_0x9f6cxb += _0x9f6cxc['height'];
					_0x9f6cx7 && _0x9f6cx4['push'](_0x9f6cx7);
					_0x9f6cx13['push'](_0x9f6cxc);
					_0x9f6cx9++
				}
				else {
					_0x9f6cx3 = true
				}
			};
			_0x9f6cx5['fillGrids'](_0x9f6cx4, _0x9f6cx13);
			_0x9f6cx5['commitPage']({
				rowIndex: _0x9f6cx9
				, rowsHeight: _0x9f6cxb
			});
			_0x9f6cx5['secondaryCanvasOffset'] -= _0x9f6cxb;
			_0x9f6cx8(_0x9f6cx9)
		}, _0x9f6cx5, 0)
	}
	, startPage: function () {
		var _0x9f6cx2 = this;
		_0x9f6cx2['callParent'](arguments);
		var _0x9f6cx1 = _0x9f6cx2['getCurrentPage']()['select']('#' + _0x9f6cx2['lockedView']['id'])['first']();
		_0x9f6cx1['dom']['style']['overflow'] = 'visible'
	}
	, commitPage: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['callParent'](arguments);
		if (_0x9f6cx2['depView'] && _0x9f6cx2['depView']['getDependencyStore']()) {
			_0x9f6cx2['depsTopOffset'] -= _0x9f6cx1['rowsHeight']
		}
	}
	, getExpectedNumberOfPages: function () {
		return Math['ceil'](this['normalRowsHeight'] / this['printHeight'])
	}
	, prepareColumns: function (_0x9f6cx2) {
		this['callParent'](arguments);
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['visibleColumns'] = [];
		_0x9f6cx5['visibleColumnsWidth'] = 0;
		if (_0x9f6cx2 && _0x9f6cx2['length'] === 0) {
			return
		};
		_0x9f6cx5['lockedGrid']['headerCt']['items']['each'](function (_0x9f6cx3) {
			if (!_0x9f6cx3['hidden']) {
				_0x9f6cx1['push']({
					column: _0x9f6cx3
					, width: _0x9f6cx3['getWidth']()
				});
				_0x9f6cx5['visibleColumnsWidth'] += _0x9f6cx3['getWidth']()
			}
		})
	}
	, fitComponentIntoPage: function () {
		var _0x9f6cxc = this
			, _0x9f6cxa = _0x9f6cxc['getComponent']()
			, _0x9f6cx13 = _0x9f6cxa['getSchedulingView']()
			, _0x9f6cx9 = _0x9f6cxa['normalGrid']
			, _0x9f6cx3 = _0x9f6cxa['lockedGrid']
			, _0x9f6cx6 = _0x9f6cxc['getTotalWidth']()
			, _0x9f6cxb = _0x9f6cxc['ticks']
			, _0x9f6cx7 = _0x9f6cxc['timeColumnWidth'] || _0x9f6cx13['timeAxisViewModel']['getTickWidth']();
		var _0x9f6cx4 = Math['floor']((_0x9f6cxc['visibleColumnsWidth'] / _0x9f6cx6) * _0x9f6cxc['paperWidth']);
		var _0x9f6cx5 = _0x9f6cxc['visibleColumns']['length']
			, _0x9f6cx2 = _0x9f6cx5 * _0x9f6cxc['minAverageColumnWidth'];
		_0x9f6cx2 = _0x9f6cx2 > _0x9f6cxc['paperWidth'] / 2 ? Math['floor'](_0x9f6cxc['paperWidth'] / 2) : _0x9f6cx2;
		_0x9f6cx4 = _0x9f6cx2 > _0x9f6cx4 ? _0x9f6cx2 : _0x9f6cx4;
		var _0x9f6cx1 = _0x9f6cxc['paperWidth'] - _0x9f6cx4;
		var _0x9f6cx8 = _0x9f6cx1 / _0x9f6cxb['length'];
		_0x9f6cxc['setRowHeight']((_0x9f6cx8 / _0x9f6cx7) * _0x9f6cxc['getRowHeight']());
		_0x9f6cxa['setWidth'](_0x9f6cxc['paperWidth']);
		_0x9f6cx9['setWidth'](_0x9f6cx1);
		_0x9f6cx3['setWidth'](_0x9f6cx4);
		_0x9f6cxc['fitLockedColumnWidth'](_0x9f6cx4);
		_0x9f6cxa['setTimeColumnWidth'](_0x9f6cx8)
	}
	, setRowHeight: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['component']['setRowHeight'](_0x9f6cx2 < _0x9f6cx1['minRowHeight'] ? _0x9f6cx1['minRowHeight'] : _0x9f6cx2)
	}
	, fitLockedColumnWidth: function (_0x9f6cx1) {
		var _0x9f6cx8 = this
			, _0x9f6cx5 = this['visibleColumns'];
		var _0x9f6cx6 = _0x9f6cx1 / _0x9f6cx8['visibleColumnsWidth'];
		if (_0x9f6cx5['length']) {
			for (var _0x9f6cx3 = 0; _0x9f6cx3 < _0x9f6cx5['length']; _0x9f6cx3++) {
				var _0x9f6cx7 = _0x9f6cx5[_0x9f6cx3]
					, _0x9f6cx2 = _0x9f6cx7['width']
					, _0x9f6cx4 = Math['floor'](_0x9f6cx2 * _0x9f6cx6);
				_0x9f6cx7['column']['setWidth'](_0x9f6cx4)
			};
			this['_restoreColumnWidth'] = true
		}
	}
	, restoreComponentState: function (_0x9f6cx5) {
		var _0x9f6cx4 = this;
		_0x9f6cx5 = _0x9f6cx5 || _0x9f6cx4['getComponent']();
		if (this['_restoreColumnWidth']) {
			var _0x9f6cx2 = this['visibleColumns'];
			for (var _0x9f6cx3 = 0; _0x9f6cx3 < _0x9f6cx2['length']; _0x9f6cx3++) {
				var _0x9f6cx1 = _0x9f6cx2[_0x9f6cx3];
				_0x9f6cx1['column']['setWidth'](_0x9f6cx1['width'])
			}
		};
		this['callParent'](arguments)
	}
	, preparePageToCommit: function () {
		var _0x9f6cx4 = this
			, _0x9f6cx6 = _0x9f6cx4['callParent'](arguments)
			, _0x9f6cx2 = _0x9f6cx6['selectNode']('.sch-dependencyview-ct');
		if (_0x9f6cx2) {
			_0x9f6cx2['innerHTML'] = _0x9f6cx4['dependenciesHtml'];
			_0x9f6cx2['style']['top'] = _0x9f6cx4['depsTopOffset'] + 'px';
			_0x9f6cx2['style']['left'] = '0px';
			_0x9f6cx2['style']['visibility'] = 'visible'
		};
		var _0x9f6cx1 = _0x9f6cx4['normalView']['getEl']()['down'](_0x9f6cx4['tableSelector'])['getWidth']();
		var _0x9f6cx5 = _0x9f6cx6['selectNode']('#' + _0x9f6cx4['normalView']['id']);
		_0x9f6cx5['style']['width'] = _0x9f6cx1 + 'px';
		_0x9f6cx5['style']['overflow'] = 'hidden';
		var _0x9f6cx3 = _0x9f6cx6['selectNode']('#' + _0x9f6cx4['lockedView']['id']);
		_0x9f6cx3['style']['overflow'] = 'hidden';
		var _0x9f6cx7 = _0x9f6cx6['selectNode']('.' + Ext['baseCSSPrefix'] + 'splitter');
		if (_0x9f6cx7) {
			_0x9f6cx7['style']['height'] = '100%'
		};
		return _0x9f6cx6
	}
});
Ext.define('Ext.ux.Scheduler.widget.ResizePicker', {
	extend: 'Ext.Panel'
	, alias: 'widget.dualrangepicker'
	, width: 200
	, height: 200
	, border: true
	, collapsible: false
	, bodyStyle: 'position:absolute; margin:5px'
	, verticalCfg: {
		height: 120
		, value: 24
		, increment: 2
		, minValue: 20
		, maxValue: 80
		, reverse: true
		, disabled: true
	}
	, horizontalCfg: {
		width: 120
		, value: 100
		, minValue: 25
		, increment: 5
		, maxValue: 200
		, disable: true
	}
	, initComponent: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['horizontalCfg']['value'] = _0x9f6cx1['dialogConfig']['columnWidth'];
		_0x9f6cx1['verticalCfg']['value'] = _0x9f6cx1['dialogConfig']['rowHeight'];
		_0x9f6cx1['verticalCfg']['disabled'] = _0x9f6cx1['dialogConfig']['scrollerDisabled'] || false;
		_0x9f6cx1['dockedItems'] = [_0x9f6cx1['vertical'] = new Ext['slider'].Single(Ext['apply']({
			dock: 'left'
			, style: 'margin-top:10px'
			, vertical: true
			, stateful: _0x9f6cx1['dialogConfig']['stateful']
			, stateId: 'exporter_resize_vertical'
			, stateEvents: ['change']
			, listeners: {
				change: _0x9f6cx1['onSliderChange']
				, changecomplete: _0x9f6cx1['onSliderChangeComplete']
				, scope: _0x9f6cx1
			}
		}, _0x9f6cx1['verticalCfg'])), _0x9f6cx1['horizontal'] = new Ext['slider'].Single(Ext['apply']({
			dock: 'top'
			, style: 'margin-left:28px'
			, stateful: _0x9f6cx1['dialogConfig']['stateful']
			, stateId: 'exporter_resize_horizontal'
			, stateEvents: ['change']
			, listeners: {
				change: _0x9f6cx1['onSliderChange']
				, changecomplete: _0x9f6cx1['onSliderChangeComplete']
				, scope: _0x9f6cx1
			}
		}, _0x9f6cx1['horizontalCfg']))];
		_0x9f6cx1['callParent'](arguments)
	}
	, afterRender: function () {
		var _0x9f6cx2 = this;
		_0x9f6cx2['addCls']('sch-ux-range-picker');
		_0x9f6cx2['valueHandle'] = _0x9f6cx2['body']['createChild']({
			cls: 'sch-ux-range-value'
			, cn: {
				tag: 'span'
			}
		});
		_0x9f6cx2['valueSpan'] = _0x9f6cx2['valueHandle']['down']('span');
		var _0x9f6cx1 = new Ext['dd'].DD(_0x9f6cx2['valueHandle']);
		Ext['apply'](_0x9f6cx1, {
			startDrag: function () {
				_0x9f6cx2['dragging'] = true;
				this['constrainTo'](_0x9f6cx2['body'])
			}
			, onDrag: function () {
				_0x9f6cx2['updateValuesFromHandles']()
			}
			, endDrag: function () {
				_0x9f6cx2['updateValuesFromHandles']();
				_0x9f6cx2['dragging'] = false
			}
		});
		_0x9f6cx2['setValues'](_0x9f6cx2['getValues']());
		_0x9f6cx2['callParent'](arguments);
		_0x9f6cx2['body']['on']('click', _0x9f6cx2['onBodyClick'], _0x9f6cx2)
	}
	, onBodyClick: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = [_0x9f6cx5['getXY']()[0] - 8 - this['body']['getX'](), _0x9f6cx5['getXY']()[1] - 8 - this['body']['getY']()];
		this['valueHandle']['setLeft'](Ext['Number']['constrain'](_0x9f6cx2[0], 0, this['getAvailableWidth']()));
		this['valueHandle']['setTop'](Ext['Number']['constrain'](_0x9f6cx2[1], 0, this['getAvailableHeight']()));
		this['updateValuesFromHandles']();
		this['onSliderChangeComplete']()
	}
	, updateValuesFromHandles: function () {
		this['setValues'](this['getValuesFromXY']())
	}
	, getAvailableWidth: function () {
		return this['body']['getWidth']() - 18
	}
	, getAvailableHeight: function () {
		return this['body']['getHeight']() - 18
	}
	, getValuesFromXY: function (_0x9f6cx3) {
		_0x9f6cx3 = _0x9f6cx3 || [this['valueHandle']['getLeft'](true), this['valueHandle']['getTop'](true)];
		var _0x9f6cx5 = _0x9f6cx3[0] / this['getAvailableWidth']();
		var _0x9f6cx1 = _0x9f6cx3[1] / this['getAvailableHeight']();
		var _0x9f6cx4 = Math['round']((this['horizontalCfg']['maxValue'] - this['horizontalCfg']['minValue']) * _0x9f6cx5);
		var _0x9f6cx2 = Math['round']((this['verticalCfg']['maxValue'] - this['verticalCfg']['minValue']) * _0x9f6cx1) + this['verticalCfg']['minValue'];
		return [_0x9f6cx4 + this['horizontalCfg']['minValue'], _0x9f6cx2]
	}
	, getXYFromValues: function (_0x9f6cx3) {
		var _0x9f6cx2 = this['horizontalCfg']['maxValue'] - this['horizontalCfg']['minValue'];
		var _0x9f6cx7 = this['verticalCfg']['maxValue'] - this['verticalCfg']['minValue'];
		var _0x9f6cx1 = Math['round']((_0x9f6cx3[0] - this['horizontalCfg']['minValue']) * this['getAvailableWidth']() / _0x9f6cx2);
		var _0x9f6cx5 = _0x9f6cx3[1] - this['verticalCfg']['minValue'];
		var _0x9f6cx4 = Math['round'](_0x9f6cx5 * this['getAvailableHeight']() / _0x9f6cx7);
		return [_0x9f6cx1, _0x9f6cx4]
	}
	, updatePosition: function () {
		var _0x9f6cx1 = this['getValues']();
		var _0x9f6cx2 = this['getXYFromValues'](_0x9f6cx1);
		this['valueHandle']['setLeft'](Ext['Number']['constrain'](_0x9f6cx2[0], 0, this['getAvailableWidth']()));
		if (this['verticalCfg']['disabled']) {
			this['valueHandle']['setTop'](this['dialogConfig']['rowHeight'])
		}
		else {
			this['valueHandle']['setTop'](Ext['Number']['constrain'](_0x9f6cx2[1], 0, this['getAvailableHeight']()))
		};
		this['positionValueText']();
		this['setValueText'](_0x9f6cx1)
	}
	, positionValueText: function () {
		var _0x9f6cx1 = this['valueHandle']['getTop'](true);
		var _0x9f6cx2 = this['valueHandle']['getLeft'](true);
		this['valueSpan']['setLeft'](_0x9f6cx2 > 30 ? -30 : 10);
		this['valueSpan']['setTop'](_0x9f6cx1 > 10 ? -20 : 20)
	}
	, setValueText: function (_0x9f6cx1) {
		if (this['verticalCfg']['disabled']) {
			_0x9f6cx1[1] = this['dialogConfig']['rowHeight']
		};
		this['valueSpan']['update']('[' + _0x9f6cx1.toString() + ']')
	}
	, setValues: function (_0x9f6cx1) {
		this['horizontal']['setValue'](_0x9f6cx1[0]);
		if (this['verticalCfg']['reverse']) {
			if (!this['verticalCfg']['disabled']) {
				this['vertical']['setValue'](this['verticalCfg']['maxValue'] + this['verticalCfg']['minValue'] - _0x9f6cx1[1])
			}
		}
		else {
			if (!this['verticalCfg']['disabled']) {
				this['vertical']['setValue'](_0x9f6cx1[1])
			}
		};
		if (!this['dragging']) {
			this['updatePosition']()
		};
		this['positionValueText']();
		this['setValueText'](_0x9f6cx1)
	}
	, getValues: function () {
		if (!this['verticalCfg']['disabled']) {
			var _0x9f6cx1 = this['vertical']['getValue']();
			if (this['verticalCfg']['reverse']) {
				_0x9f6cx1 = this['verticalCfg']['maxValue'] - _0x9f6cx1 + this['verticalCfg']['minValue']
			};
			return [this['horizontal']['getValue'](), _0x9f6cx1]
		};
		return [this['horizontal']['getValue']()]
	}
	, onSliderChange: function () {
		if (!this['rendered']) {
			return
		};
		this['fireEvent']('change', this, this['getValues']());
		if (!this['dragging']) {
			this['updatePosition']()
		}
	}
	, onSliderChangeComplete: function () {
		this['fireEvent']('changecomplete', this, this['getValues']())
	}
	, afterLayout: function () {
		this['callParent'](arguments);
		this['updatePosition']()
	}
});
Ext.define('Ext.ux.Scheduler.widget.ColumnPicker', {
	extend: 'Ext.form.field.ComboBox'
	, requires: ['Ext.data.Store']
	, multiSelect: true
	, valueField: 'id'
	, displayField: 'name'
	, forceSelection: true
	, editable: false
	, listConfig: {
		cls: 'sch-columnpicker-list'
		, selectedItemCls: Ext['baseCSSPrefix'] + 'fa fa-check'
	}
	, columns: null
	, columnEmptyText: null
	, columnEmptyRegExp: /^(\s*|&(nbsp|#160);)$/
	, initComponent: function () {
		this['store'] = new Ext['data'].Store({
			proxy: 'memory'
			, fields: ['id', 'name', 'column']
			, data: this['processColumns'](this['columns'])
		});
		this['callParent'](arguments)
	}
	, processColumns: function (_0x9f6cx1) {
		var _0x9f6cx2 = this
			, _0x9f6cx3 = []
			, _0x9f6cx5 = Ext['Array']['map'](_0x9f6cx1 || [], function (_0x9f6cx4) {
				if (!_0x9f6cx4['isHidden']()) {
					_0x9f6cx3['push'](_0x9f6cx4['id'])
				};
				return {
					id: _0x9f6cx4['id']
					, name: _0x9f6cx2['getColumnTitle'](_0x9f6cx4)
					, column: _0x9f6cx4
				}
			});
		this['value'] = this['value'] || _0x9f6cx3;
		return _0x9f6cx5
	}
	, getColumnTitle: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		return (!Ext['String']['trim'](_0x9f6cx1['text']) || _0x9f6cx1['text']['match'](_0x9f6cx2['columnEmptyRegExp'])) ? _0x9f6cx2['columnEmptyText'] : _0x9f6cx1['text']
	}
	, getPicker: function () {
		var _0x9f6cx1 = this['callParent'](arguments);
		_0x9f6cx1['selectedItemCls'] += ' ' + Ext['baseCSSPrefix'] + 'fa fa-check';
		return _0x9f6cx1
	}
	, getSelectedColumns: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['getValue']();
		if (!Ext['isArray'](_0x9f6cx2)) {
			_0x9f6cx2 = [_0x9f6cx2]
		};
		return Ext['Array']['map'](_0x9f6cx2, function (_0x9f6cx5) {
			return _0x9f6cx1['store']['getById'](_0x9f6cx5)['get']('column')
		})
	}
});
Ext.define('Ext.ux.Scheduler.widget.ExportDialogForm', {
	extend: 'Ext.form.Panel'
	, requires: ['Ext.data.Store', 'Ext.XTemplate', 'Ext.form.field.Number', 'Ext.form.field.ComboBox', 'Ext.form.field.Date', 'Ext.form.FieldContainer', 'Ext.form.field.Checkbox', 'Ext.ux.Scheduler.widget.ResizePicker', 'Ext.ux.Scheduler.widget.ColumnPicker']
	, mixins: ['Ext.ux.Scheduler.mixin.Localizable']
	, alias: 'widget.export_dialog_form'
	, border: false
	, bodyPadding: '10 10 0 10'
	, autoHeight: true
	, stateful: true
	, rangeField: null
	, resizerHolder: null
	, resizePicker: null
	, dateFromField: null
	, dateToField: null
	, datesHolder: null
	, columnPicker: null
	, rowsRangeField: null
	, exportersField: null
	, formatField: null
	, orientationField: null
	, dpiField: null
	, showHeaderField: null
	, showFooterField: null
	, dateRangeFormat: ''
	, columnPickerConfig: null
	, dpiFieldConfig: null
	, dateRangeRestriction: true
	, rangeFieldConfig: null
	, rowsRangeFieldConfig: null
	, formatFieldConfig: null
	, orientationFieldConfig: null
	, exportersFieldConfig: null
	, showHeaderFieldConfig: null
	, showFooterFieldConfig: null
	, dateFromFieldConfig: null
	, dateToFieldConfig: null
	, showResizePicker: false
	, showColumnPicker: true
	, showDPIField: true
	, showShowHeaderField: true
	, showShowFooterField: false
	, showRowsRangeField: true
	, initComponent: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['fieldDefaults'] = Ext['apply']({
			labelAlign: 'left'
			, labelWidth: 120
			, anchor: '99%'
		}, _0x9f6cx1['fieldDefaults']);
		_0x9f6cx1['items'] = _0x9f6cx1['createFields']();
		_0x9f6cx1['callParent'](arguments);
		_0x9f6cx1['onRangeChange'](_0x9f6cx1['rangeField'], _0x9f6cx1['rangeField']['getValue']());
		_0x9f6cx1['onExporterChange'](_0x9f6cx1['exportersField'], _0x9f6cx1['exportersField']['getValue']())
	}
	, isValid: function () {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['rangeField']['getValue']() == 'date') {
			return _0x9f6cx1['dateFromField']['isValid']() && _0x9f6cx1['dateToField']['isValid']()
		};
		return true
	}
	, getValues: function (_0x9f6cx4, _0x9f6cx5, _0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx1 = this['callParent'](arguments);
		_0x9f6cx1['showHeader'] = !!_0x9f6cx1['showHeader'];
		_0x9f6cx1['showFooter'] = !!_0x9f6cx1['showFooter'];
		_0x9f6cx1['onlyVisibleRows'] = !!_0x9f6cx1['onlyVisibleRows'];
		if (this['resizePicker'] && this['rangeField']['getValue']() == 'current') {
			var _0x9f6cx7 = this['resizePicker']['getValues']();
			if (_0x9f6cx4) {
				_0x9f6cx1 += '&cellSize[0]=' + _0x9f6cx7[0] + '&cellSize[1]=' + _0x9f6cx7[1]
			}
			else {
				_0x9f6cx1['cellSize'] = _0x9f6cx7
			}
		};
		if (this['columnPicker']) {
			_0x9f6cx1['columns'] = this['columnPicker']['getSelectedColumns']()
		};
		return _0x9f6cx1
	}
	, createFields: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx3 = '<table class="sch-fieldcontainer-label-wrap"><td width="1" class="sch-fieldcontainer-label">'
			, _0x9f6cx5 = '<td><div class="sch-fieldcontainer-separator"></div></table>';
		if (_0x9f6cx2['showResizePicker']) {
			_0x9f6cx2['resizePicker'] = new Ext.ux.Scheduler['widget'].ResizePicker({
				dialogConfig: _0x9f6cx2
				, margin: '10 20'
			});
			_0x9f6cx2['resizerHolder'] = new Ext['form'].FieldContainer({
				fieldLabel: _0x9f6cx2['scrollerDisabled'] ? _0x9f6cx2.L('adjustCols') : _0x9f6cx2.L('adjustColsAndRows')
				, labelAlign: 'top'
				, hidden: true
				, labelSeparator: ''
				, beforeLabelTextTpl: _0x9f6cx3
				, afterLabelTextTpl: _0x9f6cx5
				, layout: 'vbox'
				, defaults: {
					flex: 1
					, allowBlank: false
				}
				, items: [_0x9f6cx2['resizePicker']]
			})
		};
		_0x9f6cx2['dateFromField'] = Ext['ComponentManager']['create'](Ext['apply'](_0x9f6cx2['applyStateful']({
			xtype: 'datefield'
			, fieldLabel: _0x9f6cx2.L('dateRangeFromText')
			, baseBodyCls: 'sch-exportdialogform-date'
			, name: 'dateFrom'
			, format: _0x9f6cx2['dateRangeFormat'] || Ext['Date']['defaultFormat']
			, allowBlank: false
			, maxValue: _0x9f6cx2['dateRangeRestriction'] && _0x9f6cx2['endDate'] || null
			, minValue: _0x9f6cx2['dateRangeRestriction'] && _0x9f6cx2['startDate'] || null
			, value: _0x9f6cx2['startDate']
		}), _0x9f6cx2['dateFromFieldConfig']));
		_0x9f6cx2['dateToField'] = Ext['ComponentManager']['create'](Ext['apply'](_0x9f6cx2['applyStateful']({
			xtype: 'datefield'
			, fieldLabel: _0x9f6cx2.L('dateRangeToText')
			, name: 'dateTo'
			, format: _0x9f6cx2['dateRangeFormat'] || Ext['Date']['defaultFormat']
			, baseBodyCls: 'sch-exportdialogform-date'
			, allowBlank: false
			, maxValue: _0x9f6cx2['dateRangeRestriction'] && _0x9f6cx2['endDate'] || null
			, minValue: _0x9f6cx2['dateRangeRestriction'] && _0x9f6cx2['startDate'] || null
			, value: _0x9f6cx2['endDate']
		}), _0x9f6cx2['dateToFieldConfig']));
		_0x9f6cx2['datesHolder'] = new Ext['form'].FieldContainer({
			fieldLabel: _0x9f6cx2.L('specifyDateRange')
			, labelAlign: 'top'
			, hidden: true
			, labelSeparator: ''
			, beforeLabelTextTpl: _0x9f6cx3
			, afterLabelTextTpl: _0x9f6cx5
			, layout: 'vbox'
			, defaults: {
				flex: 1
				, allowBlank: false
			}
			, items: [_0x9f6cx2['dateFromField'], _0x9f6cx2['dateToField']]
		});
		if (_0x9f6cx2['showColumnPicker']) {
			_0x9f6cx2['columnPicker'] = new Ext.ux.Scheduler['widget'].ColumnPicker(_0x9f6cx2['applyStateful'](Ext['apply']({
				fieldLabel: _0x9f6cx2.L('columnPickerLabel')
				, columnEmptyText: _0x9f6cx2.L('columnEmptyText')
				, cls: 'sch-export-dialog-columns'
			}, _0x9f6cx2['columnPickerConfig'])))
		};
		if (_0x9f6cx2['showDPIField']) {
			_0x9f6cx2['dpiField'] = Ext['ComponentManager']['create'](Ext['apply'](_0x9f6cx2['applyStateful']({
				xtype: 'numberfield'
				, fieldLabel: _0x9f6cx2.L('dpiFieldLabel')
				, cls: 'sch-export-dialog-dpi'
				, minValue: 65
				, name: 'DPI'
				, value: _0x9f6cx2['exportConfig']['DPI']
				, maxValue: 200
			}), _0x9f6cx2['dpiFieldConfig']))
		};
		if (_0x9f6cx2['showShowHeaderField']) {
			_0x9f6cx2['showHeaderField'] = Ext['ComponentManager']['create'](Ext['apply'](_0x9f6cx2['applyStatefulFull']({
				xtype: 'checkbox'
				, fieldLabel: _0x9f6cx2.L('showHeaderLabel')
				, cls: 'sch-export-dialog-header'
				, name: 'showHeader'
				, checked: !!_0x9f6cx2['exportConfig']['showHeader']
				, checkedValue: true
				, uncheckedValue: false
			}), _0x9f6cx2['showHeaderFieldConfig']))
		};
		if (_0x9f6cx2['showShowFooterField']) {
			_0x9f6cx2['showFooterField'] = Ext['ComponentManager']['create'](Ext['apply'](_0x9f6cx2['applyStatefulFull']({
				xtype: 'checkbox'
				, fieldLabel: _0x9f6cx2.L('showFooterLabel')
				, cls: 'sch-export-dialog-footer'
				, name: 'showFooter'
				, checked: !!_0x9f6cx2['exportConfig']['showFooter']
				, checkedValue: true
				, uncheckedValue: false
			}), _0x9f6cx2['showFooterFieldConfig']))
		};
		_0x9f6cx2['formatField'] = Ext['ComponentManager']['create'](Ext['apply'](_0x9f6cx2['applyStateful']({
			xtype: 'combobox'
			, fieldLabel: _0x9f6cx2.L('formatFieldLabel')
			, value: _0x9f6cx2['exportConfig']['format']
			, triggerAction: 'all'
			, forceSelection: true
			, editable: false
			, name: 'format'
			, queryMode: 'local'
			, store: _0x9f6cx2['pageFormats'] || ['A5', 'A4', 'A3', 'Letter', 'Legal']
		}), _0x9f6cx2['formatFieldConfig']));
		_0x9f6cx2['orientationField'] = Ext['ComponentManager']['create'](Ext['apply'](_0x9f6cx2['applyStateful']({
			xtype: 'combobox'
			, fieldLabel: _0x9f6cx2.L('orientationFieldLabel')
			, value: _0x9f6cx2['exportConfig']['orientation']
			, triggerAction: 'all'
			, forceSelection: true
			, editable: false
			, name: 'orientation'
			, displayField: 'name'
			, valueField: 'value'
			, queryMode: 'local'
			, store: {
				fields: ['name', 'value']
				, data: [{
					name: _0x9f6cx2.L('orientationPortraitText')
					, value: 'portrait'
				}, {
					name: _0x9f6cx2.L('orientationLandscapeText')
					, value: 'landscape'
				}]
			}
		}), _0x9f6cx2['orientationFieldConfig']));
		_0x9f6cx2['rangeField'] = Ext['ComponentManager']['create'](Ext['apply'](_0x9f6cx2['applyStateful']({
			xtype: 'combobox'
			, fieldLabel: _0x9f6cx2.L('rangeFieldLabel')
			, value: _0x9f6cx2['exportConfig']['range']
			, triggerAction: 'all'
			, cls: 'sch-export-dialog-range'
			, forceSelection: true
			, editable: false
			, name: 'range'
			, queryMode: 'local'
			, displayField: 'name'
			, valueField: 'value'
			, store: {
				fields: ['name', 'value']
				, data: [{
					name: _0x9f6cx2.L('completeViewText')
					, value: 'complete'
				}, {
					name: _0x9f6cx2.L('completeDataText')
					, value: 'completedata'
				}, {
					name: _0x9f6cx2.L('dateRangeText')
					, value: 'date'
				}, {
					name: _0x9f6cx2.L('currentViewText')
					, value: 'current'
				}]
			}
		}), _0x9f6cx2['rangeFieldConfig']));
		_0x9f6cx2['mon'](_0x9f6cx2['rangeField'], 'change', _0x9f6cx2['onRangeChange'], _0x9f6cx2);
		_0x9f6cx2['exportersField'] = Ext['ComponentManager']['create'](Ext['apply'](_0x9f6cx2['applyStateful']({
			xtype: 'combobox'
			, fieldLabel: _0x9f6cx2.L('exportersFieldLabel')
			, value: _0x9f6cx2['defaultExporter']
			, triggerAction: 'all'
			, cls: 'sch-export-dialog-exporter'
			, forceSelection: true
			, editable: false
			, name: 'exporterId'
			, queryMode: 'local'
			, displayField: 'name'
			, valueField: 'value'
			, store: {
				fields: ['name', 'value']
				, data: Ext['Array']['map'](_0x9f6cx2['exporters'], function (_0x9f6cx4) {
					return {
						name: _0x9f6cx4['getName']()
						, value: _0x9f6cx4['getExporterId']()
					}
				})
			}
		}), _0x9f6cx2['exportersFieldConfig']));
		_0x9f6cx2['mon'](_0x9f6cx2['exportersField'], 'change', _0x9f6cx2['onExporterChange'], _0x9f6cx2);
		if (_0x9f6cx2['showRowsRangeField']) {
			_0x9f6cx2['rowsRangeField'] = Ext['ComponentManager']['create'](Ext['apply'](_0x9f6cx2['applyStateful']({
				xtype: 'combobox'
				, fieldLabel: _0x9f6cx2.L('rowsRangeLabel')
				, value: _0x9f6cx2['exportConfig']['rowsRange']
				, triggerAction: 'all'
				, cls: 'sch-export-dialog-rowsrange'
				, forceSelection: true
				, editable: false
				, name: 'rowsRange'
				, queryMode: 'local'
				, displayField: 'name'
				, valueField: 'value'
				, store: {
					fields: ['name', 'value']
					, data: [{
						name: _0x9f6cx2.L('allRowsLabel')
						, value: 'all'
					}, {
						name: _0x9f6cx2.L('visibleRowsLabel')
						, value: 'visible'
					}]
				}
			}), _0x9f6cx2['rowsRangeFieldConfig']))
		};
		var _0x9f6cx1 = [];
		_0x9f6cx1['push'](_0x9f6cx2['rangeField']);
		if (_0x9f6cx2['resizerHolder']) {
			_0x9f6cx1['push'](_0x9f6cx2['resizerHolder'])
		};
		_0x9f6cx1['push'](_0x9f6cx2['datesHolder']);
		if (_0x9f6cx2['columnPicker']) {
			_0x9f6cx1['push'](_0x9f6cx2['columnPicker'])
		};
		if (_0x9f6cx2['rowsRangeField']) {
			_0x9f6cx1['push'](_0x9f6cx2['rowsRangeField'])
		};
		_0x9f6cx1['push'](_0x9f6cx2['exportersField'], _0x9f6cx2['formatField'], _0x9f6cx2['orientationField']);
		if (_0x9f6cx2['dpiField']) {
			_0x9f6cx1['push'](_0x9f6cx2['dpiField'])
		};
		if (_0x9f6cx2['showHeaderField']) {
			_0x9f6cx1['push'](_0x9f6cx2['showHeaderField'])
		};
		if (_0x9f6cx2['showFooterField']) {
			_0x9f6cx1['push'](_0x9f6cx2['showFooterField'])
		};
		return _0x9f6cx1
	}
	, applyStateful: function (_0x9f6cx1) {
		if (!this['stateful']) {
			return _0x9f6cx1
		};
		var _0x9f6cx2 = this
			, _0x9f6cx5 = _0x9f6cx2['stateId'] || 'exporter';
		return Ext['applyIf'](_0x9f6cx1, {
			stateful: true
			, stateId: _0x9f6cx5 + '_' + _0x9f6cx1['name']
		})
	}
	, applyStatefulFull: function (_0x9f6cx1) {
		if (!this['stateful']) {
			return _0x9f6cx1
		};
		var _0x9f6cx2 = this;
		return Ext['apply'](_0x9f6cx2['applyStateful'](_0x9f6cx1), {
			stateEvents: ['change']
			, applyState: _0x9f6cx2['applyFieldState']
			, getState: _0x9f6cx2['getFieldState']
		})
	}
	, getFieldState: function () {
		return {
			value: this['getValue']()
		}
	}
	, applyFieldState: function (_0x9f6cx1) {
		if ('value' in _0x9f6cx1) {
			this['setValue'](_0x9f6cx1['value'])
		}
	}
	, onRangeChange: function (_0x9f6cx2, _0x9f6cx1) {
		switch (_0x9f6cx1) {
		case 'complete':
			;
		case 'completedata':
			this['datesHolder']['hide']();
			this['resizerHolder'] && this['resizerHolder']['hide']();
			break;
		case 'date':
			this['datesHolder']['show']();
			this['resizerHolder'] && this['resizerHolder']['hide']();
			break;
		case 'current':
			this['datesHolder']['hide']();
			if (this['resizerHolder']) {
				this['resizerHolder']['show']();
				this['resizePicker']['expand'](true)
			};
			break
		}
	}
	, onExporterChange: function (_0x9f6cx2, _0x9f6cx1) {
		switch (_0x9f6cx1) {
		case 'singlepage':
			this['disableFields'](true);
			break;
		default:
			this['disableFields'](false)
		}
	}
	, disableFields: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['formatField']['setDisabled'](_0x9f6cx2);
		_0x9f6cx1['orientationField']['setDisabled'](_0x9f6cx2)
	}
});
Ext.define('Ext.ux.Scheduler.widget.ExportDialog', {
	alternateClassName: 'Ext.ux.Scheduler.widget.PdfExportDialog'
	, extend: 'Ext.window.Window'
	, requires: ['Ext.ProgressBar', 'Ext.ux.Scheduler.widget.ExportDialogForm']
	, mixins: ['Ext.ux.Scheduler.mixin.Localizable']
	, alias: 'widget.exportdialog'
	, width: 450
	, cls: 'sch-exportdialog'
	, frame: false
	, layout: 'fit'
	, draggable: true
	, constrain: true
	, progressBar: null
	, buttonsPanel: null
	, buttonsPanelScope: null
	, doExportFnScope: null
	, doExportFn: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx2) {
		throw 'Ext.ux.Scheduler.widget.ExportDialog: doExportFn needs to be set in the config'
	}
	, form: null
	, defaultFormXType: 'export_dialog_form'
	, exportButtonConfig: null
	, cancelButtonConfig: null
	, formConfigs: 'pageFormats,startDate,endDate,rowHeight,columnWidth,defaultExporter,exporters,dateRangeFormat,exportConfig,showColumnPicker,columnPickerConfig,showDPIField,dpiFieldConfig,showShowHeaderField,showShowFooterField,showResizePicker,stateful,stateId,dateRangeRestriction,showRowsRangeField,rowsRangeFieldConfig,rangeFieldConfig,formatFieldConfig,orientationFieldConfig,exportersFieldConfig'
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1);
		this['title'] = this['title'] || this.L('title');
		this['callParent'](arguments)
	}
	, mapFormConfigs: function () {
		this['form'] = this['form'] || {};
		var _0x9f6cx5 = this['form'];
		var _0x9f6cx3 = this['formConfigs']['split'](',');
		for (var _0x9f6cx2 = 0, _0x9f6cx4 = _0x9f6cx3['length']; _0x9f6cx2 < _0x9f6cx4; _0x9f6cx2++) {
			var _0x9f6cx1 = _0x9f6cx3[_0x9f6cx2];
			if (this['hasOwnProperty'](_0x9f6cx1) && !_0x9f6cx5['hasOwnProperty'](_0x9f6cx1)) {
				_0x9f6cx5[_0x9f6cx1] = this[_0x9f6cx1]
			}
		};
		if (this['hasOwnProperty']('showFooterField') && !_0x9f6cx5['hasOwnProperty']('showShowFooterField')) {
			_0x9f6cx5['showShowFooterField'] = this['showFooterField']
		};
		if (this['hasOwnProperty']('showHeaderField') && !_0x9f6cx5['hasOwnProperty']('showShowHeaderField')) {
			_0x9f6cx5['showShowHeaderField'] = this['showHeaderField']
		};
		if (_0x9f6cx5['stateId']) {
			_0x9f6cx5['stateId'] = 'form_' + _0x9f6cx5['stateId']
		}
	}
	, initComponent: function () {
		var _0x9f6cx1 = this;
		if (!_0x9f6cx1['form'] || !_0x9f6cx1['form']['isForm']) {
			_0x9f6cx1['mapFormConfigs']();
			_0x9f6cx1['form'] = _0x9f6cx1['buildForm']()
		};
		Ext['apply'](_0x9f6cx1, {
			items: {
				items: [_0x9f6cx1['form'], _0x9f6cx1['progressBar'] || _0x9f6cx1['buildProgressBar']()]
			}
			, fbar: _0x9f6cx1['buildButtons'](_0x9f6cx1['buttonsPanelScope'] || _0x9f6cx1)
		});
		_0x9f6cx1['callParent'](arguments)
	}
	, afterRender: function () {
		var _0x9f6cx1 = this;
		if (_0x9f6cx1['form']['resizePicker']) {
			_0x9f6cx1['relayEvents'](_0x9f6cx1['form']['resizePicker'], ['change', 'changecomplete', 'select'])
		};
		_0x9f6cx1['callParent'](arguments)
	}
	, buildButtons: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		return [Ext['apply']({
			xtype: 'button'
			, scale: 'medium'
			, itemId: 'export'
			, text: _0x9f6cx1.L('exportButtonText')
			, handler: _0x9f6cx1['onExportButtonPress']
			, scope: _0x9f6cx2 || _0x9f6cx1
		}, _0x9f6cx1['exportButtonConfig']), Ext['apply']({
			xtype: 'button'
			, scale: 'medium'
			, itemId: 'cancel'
			, text: _0x9f6cx1.L('cancelButtonText')
			, handler: _0x9f6cx1['onCancelButtonPress']
			, scope: _0x9f6cx2 || _0x9f6cx1
		}, _0x9f6cx1['cancelButtonConfig'])]
	}
	, onExportButtonPress: function () {
		if (this['form']['isValid']()) {
			var _0x9f6cx2 = this['form']['getValues']();
			this['beforeExport']();
			var _0x9f6cx1 = this['dateRangeFormat'] || Ext['Date']['defaultFormat'];
			if (_0x9f6cx2['dateFrom'] && !Ext['isDate'](_0x9f6cx2['dateFrom'])) {
				_0x9f6cx2['dateFrom'] = Ext['Date']['parse'](_0x9f6cx2['dateFrom'], _0x9f6cx1)
			};
			if (_0x9f6cx2['dateTo'] && !Ext['isDate'](_0x9f6cx2['dateTo'])) {
				_0x9f6cx2['dateTo'] = Ext['Date']['parse'](_0x9f6cx2['dateTo'], _0x9f6cx1)
			};
			this['doExportFn']['call'](this['doExportFnScope'] || this, _0x9f6cx2, this['onExportSuccess'], this['onExportFailure'])
		}
	}
	, afterExport: function () {
		var _0x9f6cx1 = this['down']('#export');
		_0x9f6cx1 && _0x9f6cx1['enable']();
		this['progressBar'] && this['progressBar']['hide']()
	}
	, beforeExport: function () {
		var _0x9f6cx1 = this['down']('#export');
		_0x9f6cx1 && _0x9f6cx1['disable']();
		this['progressBar'] && this['progressBar']['show']()
	}
	, onExportSuccess: function () {
		this['afterExport']()
	}
	, onExportFailure: function () {
		this['afterExport']()
	}
	, onCancelButtonPress: function () {
		this['destroy']()
	}
	, buildForm: function (_0x9f6cx1) {
		this['form'] = Ext['apply'](this['form'] || {}, _0x9f6cx1);
		return Ext['ComponentManager']['create'](this['form'], this['defaultFormXType'])
	}
	, buildProgressBar: function () {
		return this['progressBar'] = new Ext.ProgressBar({
			text: this.L('progressBarText')
			, animate: true
			, hidden: true
			, margin: '4px 10px 10px 10px'
		})
	}
});
Ext.define('Ext.ux.Scheduler.plugin.Export', {
	extend: 'Ext.util.Observable'
	, alternateClassName: 'Ext.ux.Scheduler.plugin.PdfExport'
	, alias: 'plugin.scheduler_export'
	, mixins: ['Ext.AbstractPlugin', 'Ext.ux.Scheduler.mixin.Localizable']
	, requires: ['Ext.XTemplate', 'Ext.ux.Scheduler.plugin.exporter.SinglePage', 'Ext.ux.Scheduler.plugin.exporter.MultiPage', 'Ext.ux.Scheduler.plugin.exporter.MultiPageVertical', 'Ext.ux.Scheduler.widget.ExportDialog']
	, lockableScope: 'top'
	, pageSizes: {
		A5: {
			width: 5.8
			, height: 8.3
		}
		, A4: {
			width: 8.3
			, height: 11.7
		}
		, A3: {
			width: 11.7
			, height: 16.5
		}
		, Letter: {
			width: 8.5
			, height: 11
		}
		, Legal: {
			width: 8.5
			, height: 14
		}
	}
	, DPI: 72
	, printServer: undefined
	, timeout: 60000
	, headerTpl: null
	, headerTplDataFn: null
	, headerTplDataFnScope: null
	, tpl: null
	, footerTpl: null
	, footerTplDataFn: null
	, footerTplDataFnScope: null
	, exportDialogClassName: 'Ext.ux.Scheduler.widget.ExportDialog'
	, exportDialogConfig: {}
	, exporterConfig: null
	, exportConfig: {
		format: 'A4'
		, orientation: 'portrait'
		, range: 'complete'
		, rowsRange: 'all'
		, showHeader: true
		, showFooter: false
	}
	, expandAllBeforeExport: false
	, translateURLsToAbsolute: true
	, openAfterExport: true
	, beforeExport: Ext['emptyFn']
	, afterExport: Ext['emptyFn']
	, fileFormat: 'pdf'
	, defaultExporter: 'multipage'
	, exporters: undefined
	, callbacks: undefined
	, currentAjaxRequest: undefined
	, hideExportDialogTimeout: 1000
	, constructor: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx1 = _0x9f6cx1 || {};
		_0x9f6cx2['exportersIndex'] = {};
		if (_0x9f6cx1['exportDialogConfig']) {
			Ext['Object']['each'](this['exportConfig'], function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx7) {
				var _0x9f6cx4 = _0x9f6cx1['exportDialogConfig'][_0x9f6cx3];
				if (_0x9f6cx4) {
					_0x9f6cx7[_0x9f6cx3] = _0x9f6cx4
				}
			})
		};
		_0x9f6cx2['callParent']([_0x9f6cx1]);
		_0x9f6cx2['setFileFormat'](_0x9f6cx2['fileFormat']);
		if (!_0x9f6cx2['exporters']) {
			_0x9f6cx2['exporters'] = _0x9f6cx2['buildExporters']()
		};
		_0x9f6cx2['initExporters']();
		_0x9f6cx2['bindExporters']()
	}
	, init: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx1['showExportDialog'] = Ext['Function']['bind'](_0x9f6cx2['showExportDialog'], _0x9f6cx2);
		_0x9f6cx1['doExport'] = Ext['Function']['bind'](_0x9f6cx2['doExport'], _0x9f6cx2);
		_0x9f6cx2['scheduler'] = _0x9f6cx1
	}
	, initExporters: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['exporters'];
		for (var _0x9f6cx1 = 0; _0x9f6cx1 < _0x9f6cx2['length']; _0x9f6cx1++) {
			if (!_0x9f6cx2[_0x9f6cx1]['isExporter']) {
				_0x9f6cx2[_0x9f6cx1] = _0x9f6cx5['createExporter'](_0x9f6cx2[_0x9f6cx1])
			}
		}
	}
	, bindExporters: function () {
		var _0x9f6cx2 = this['exporters'];
		for (var _0x9f6cx1 = 0; _0x9f6cx1 < _0x9f6cx2['length']; _0x9f6cx1++) {
			this['bindExporter'](_0x9f6cx2[_0x9f6cx1])
		}
	}
	, bindExporter: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['mon'](_0x9f6cx2, {
			commitpage: _0x9f6cx1['onPageCommit']
			, collectrows: _0x9f6cx1['onRowCollected']
			, scope: _0x9f6cx1
		})
	}
	, unbindExporter: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['mun'](_0x9f6cx2, {
			commitpage: _0x9f6cx1['onPageCommit']
			, collectrows: _0x9f6cx1['onRowCollected']
			, scope: _0x9f6cx1
		})
	}
	, buildExporters: function () {
		return ['Ext.ux.Scheduler.plugin.exporter.SinglePage', 'Ext.ux.Scheduler.plugin.exporter.MultiPage', 'Ext.ux.Scheduler.plugin.exporter.MultiPageVertical']
	}
	, getExporterConfig: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx3 = this;
		var _0x9f6cx1 = Ext['apply']({
			translateURLsToAbsolute: _0x9f6cx3['translateURLsToAbsolute']
			, expandAllBeforeExport: _0x9f6cx3['expandAllBeforeExport']
			, DPI: _0x9f6cx3['DPI']
		}, _0x9f6cx3['exporterConfig']);
		if (_0x9f6cx3['headerTpl']) {
			_0x9f6cx1['headerTpl'] = _0x9f6cx3['headerTpl']
		};
		if (_0x9f6cx3['headerTplDataFn']) {
			_0x9f6cx1['headerTplDataFn'] = _0x9f6cx3['headerTplDataFn'];
			_0x9f6cx1['headerTplDataFnScope'] = _0x9f6cx3['headerTplDataFnScope']
		};
		if (_0x9f6cx3['tpl']) {
			_0x9f6cx1['tpl'] = _0x9f6cx3['tpl']
		};
		if (_0x9f6cx3['footerTpl']) {
			_0x9f6cx1['footerTpl'] = _0x9f6cx3['footerTpl']
		};
		if (_0x9f6cx3['footerTplDataFn']) {
			_0x9f6cx1['footerTplDataFn'] = _0x9f6cx3['footerTplDataFn'];
			_0x9f6cx1['footerTplDataFnScope'] = _0x9f6cx3['footerTplDataFnScope']
		};
		return _0x9f6cx1
	}
	, createExporter: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this
			, _0x9f6cx3 = _0x9f6cx5['getExporterConfig'](_0x9f6cx2, _0x9f6cx1);
		if (Ext['isObject'](_0x9f6cx2)) {
			return Ext['create'](Ext['apply'](_0x9f6cx3, _0x9f6cx2))
		}
		else {
			return Ext['create'](_0x9f6cx2, Ext['apply'](_0x9f6cx3, _0x9f6cx1))
		}
	}
	, registerExporter: function (_0x9f6cx2, _0x9f6cx1) {
		if (!(_0x9f6cx2 instanceof Ext.ux.Scheduler['plugin']['exporter']['AbstractExporter'])) {
			_0x9f6cx2 = this['createExporter']['apply'](this, arguments)
		};
		this['exporters']['push'](_0x9f6cx2);
		this['bindExporter'](_0x9f6cx2)
	}
	, getExporter: function (_0x9f6cx2) {
		if (!_0x9f6cx2) {
			return
		};
		var _0x9f6cx1 = this['exportersIndex'][_0x9f6cx2];
		if (_0x9f6cx1) {
			return _0x9f6cx1
		};
		_0x9f6cx1 = this['exportersIndex'][_0x9f6cx2] = Ext['Array']['findBy'](this['exporters'], function (_0x9f6cx5) {
			return _0x9f6cx5['getExporterId']() == _0x9f6cx2
		});
		return _0x9f6cx1
	}
	, getExporters: function () {
		return this['exporters']
	}
	, setFileFormat: function (_0x9f6cx1) {
		this['fileFormat'] = _0x9f6cx1
	}
	, showExportDialog: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getActiveExportDialog']();
		if (_0x9f6cx1) {
			_0x9f6cx1['destroy']()
		};
		_0x9f6cx2['setActiveExportDialog'](_0x9f6cx2['buildExportDialog']());
		_0x9f6cx1 = _0x9f6cx2['getActiveExportDialog']();
		_0x9f6cx1['on']('destroy', _0x9f6cx2['onExportDialogDestroy'], _0x9f6cx2);
		if (_0x9f6cx1['progressBar']) {
			_0x9f6cx1['mon'](_0x9f6cx2, {
				progressupdate: _0x9f6cx2['onExportProgress']
				, scope: _0x9f6cx2
			})
		};
		_0x9f6cx1['show']()
	}
	, buildExportDialog: function () {
		return Ext['create'](this['exportDialogClassName'], this['buildExportDialogConfig']())
	}
	, buildExportDialogConfig: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['scheduler']['getSchedulingView']();
		return Ext['apply']({
			doExportFn: _0x9f6cx2['doExport']
			, doExportFnScope: _0x9f6cx2
			, startDate: _0x9f6cx2['scheduler']['getStart']()
			, endDate: _0x9f6cx2['scheduler']['getEnd']()
			, rowHeight: _0x9f6cx1['timeAxisViewModel']['getViewRowHeight']()
			, columnWidth: _0x9f6cx1['timeAxisViewModel']['getTickWidth']()
			, defaultExporter: _0x9f6cx2['defaultExporter']
			, exportConfig: Ext['apply'](_0x9f6cx2['exportConfig'], {
				DPI: _0x9f6cx2['DPI']
			})
			, exporters: _0x9f6cx2['exporters']
			, pageFormats: _0x9f6cx2['getPageFormats']()
			, columnPickerConfig: {
				columns: _0x9f6cx2['scheduler']['lockedGrid']['query']('gridcolumn[ignoreInExport!=true]')
			}
		}, _0x9f6cx2['exportDialogConfig'])
	}
	, onExportDialogDestroy: function () {
		this['cancelExport']();
		this['setActiveExportDialog'](null)
	}
	, onExportProgress: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this['getActiveExportDialog']()
			, _0x9f6cx3 = _0x9f6cx1 && _0x9f6cx1['progressBar'];
		if (_0x9f6cx3) {
			_0x9f6cx3['updateProgress'](_0x9f6cx5);
			if (typeof _0x9f6cx2 == 'string') {
				_0x9f6cx3['updateText'](_0x9f6cx2)
			}
		}
	}
	, showError: function (_0x9f6cx1) {
		Ext['Msg']['alert']('', _0x9f6cx1 || this.L('generalError'))
	}
	, getPageFormats: function () {
		var _0x9f6cx1 = this['pageSizes']
			, _0x9f6cx2 = [];
		Ext['Object']['each'](_0x9f6cx1, function (_0x9f6cx5, _0x9f6cx3) {
			_0x9f6cx2['push']({
				width: _0x9f6cx3['width']
				, height: _0x9f6cx3['height']
				, name: _0x9f6cx5
			})
		});
		return Ext['Array']['map'](_0x9f6cx2['sort'](function (_0x9f6cx3, _0x9f6cx5) {
			return _0x9f6cx3['width'] - _0x9f6cx5['width']
		}), function (_0x9f6cx5) {
			return _0x9f6cx5['name']
		})
	}
	, getExportConfig: function (_0x9f6cx2) {
		var _0x9f6cx5 = this;
		var _0x9f6cx1 = Ext['apply']({
			fileFormat: _0x9f6cx5['fileFormat']
			, exporterId: _0x9f6cx5['defaultExporter']
			, beforeExport: Ext['Function']['bind'](_0x9f6cx5['beforeExport'], _0x9f6cx5)
			, afterExport: Ext['Function']['bind'](_0x9f6cx5['afterExport'], _0x9f6cx5)
		}, _0x9f6cx2, _0x9f6cx5['exportConfig']);
		_0x9f6cx1['DPI'] = _0x9f6cx1['DPI'] || _0x9f6cx5['DPI'];
		_0x9f6cx1['pageSize'] = Ext['apply']({}, _0x9f6cx5['pageSizes'][_0x9f6cx1['format']]);
		_0x9f6cx1['pageSize']['width'] *= _0x9f6cx1['DPI'];
		_0x9f6cx1['pageSize']['height'] *= _0x9f6cx1['DPI'];
		return _0x9f6cx1
	}
	, doExport: function (_0x9f6cx3, _0x9f6cx8, _0x9f6cx1, _0x9f6cx4) {
		var _0x9f6cx7 = this
			, _0x9f6cx5 = _0x9f6cx7['scheduler']
			, _0x9f6cx2 = _0x9f6cx7['getExportConfig'](_0x9f6cx3);
		_0x9f6cx7['callbacks'] = {
			success: _0x9f6cx8
			, failure: _0x9f6cx1
			, scope: _0x9f6cx4 || _0x9f6cx7
		};
		var _0x9f6cx6 = _0x9f6cx7['exporter'] = _0x9f6cx7['getExporter'](_0x9f6cx2['exporterId']);
		if (_0x9f6cx7['fireEvent']('beforeexport', _0x9f6cx5, _0x9f6cx6, _0x9f6cx2) !== false) {
			_0x9f6cx7['myBeforeExport']();
			_0x9f6cx7['exporter']['extractPages'](_0x9f6cx5, _0x9f6cx2, function (_0x9f6cx9) {
				_0x9f6cx7['onPagesExtracted'](_0x9f6cx9, _0x9f6cx5, _0x9f6cx6, _0x9f6cx2)
			}, _0x9f6cx7)
		}
	}
	, cancelExport: function () {
		if (this['currentAjaxRequest']) {
			Ext['Ajax']['abort'](this['currentAjaxRequest']);
			this['currentAjaxRequest'] = null
		}
		else {
			if (this['exporter']) {
				this['exporter']['abort']()
			}
		};
		this['scheduler']['getEl']()['unmask']()
	}
	, onPagesExtracted: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx3, _0x9f6cx2) {
		this['fireEvent']('progressupdate', 0.8, this.L('requestingPrintServer'));
		this['doRequest'](_0x9f6cx1, _0x9f6cx2)
	}
	, onRowCollected: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx2, _0x9f6cx1) {
		this['fireEvent']('progressupdate', 0.2 * (_0x9f6cx2 + 1) / _0x9f6cx1, Ext['String']['format'](this.L('fetchingRows'), _0x9f6cx2 + 1, _0x9f6cx1))
	}
	, onPageCommit: function (_0x9f6cx3, _0x9f6cx5, _0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx1 = Math['max'](_0x9f6cx2, _0x9f6cx1);
		this['fireEvent']('progressupdate', 0.2 + 0.6 * _0x9f6cx2 / _0x9f6cx1, Ext['String']['format'](this.L('builtPage'), _0x9f6cx2, _0x9f6cx1))
	}
	, onExportSuccess: function (_0x9f6cx1) {
		var _0x9f6cx7 = this
			, _0x9f6cx3 = _0x9f6cx7['getActiveExportDialog']()
			, _0x9f6cx4 = _0x9f6cx7['callbacks']
			, _0x9f6cx5 = _0x9f6cx4 && _0x9f6cx4['success']
			, _0x9f6cx2 = _0x9f6cx4 && _0x9f6cx4['scope'] || _0x9f6cx7;
		_0x9f6cx7['fireEvent']('progressupdate', 1);
		_0x9f6cx7['myAfterExport'](true, _0x9f6cx1['url']);
		_0x9f6cx5 && _0x9f6cx5['apply'](_0x9f6cx2, arguments);
		_0x9f6cx7['hideExportDialogTimer'] = setTimeout(function () {
			_0x9f6cx3 && _0x9f6cx3['destroy']()
		}, _0x9f6cx7['hideExportDialogTimeout']);
		if (_0x9f6cx7['openAfterExport']) {
			_0x9f6cx7['openAfterExportTimer'] = setTimeout(function () {
				window['open'](_0x9f6cx1['url'], 'ExportedPanel')
			}, 0)
		}
	}
	, onExportFailure: function (_0x9f6cx6, _0x9f6cx1) {
		var _0x9f6cx7 = this
			, _0x9f6cx2 = this['getActiveExportDialog']()
			, _0x9f6cx4 = _0x9f6cx7['callbacks']
			, _0x9f6cx3 = _0x9f6cx4 && _0x9f6cx4['failure']
			, _0x9f6cx5 = _0x9f6cx4 && _0x9f6cx4['scope'] || _0x9f6cx7;
		_0x9f6cx3 && _0x9f6cx3['call'](_0x9f6cx5, _0x9f6cx6);
		_0x9f6cx7['fireEvent']('error', _0x9f6cx2, _0x9f6cx6, _0x9f6cx1);
		_0x9f6cx7['showError'](_0x9f6cx6);
		_0x9f6cx7['myAfterExport'](false, null)
	}
	, doRequest: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx7 = this
			, _0x9f6cx6 = _0x9f6cx7['scheduler'];
		if (!_0x9f6cx7['test'] && !_0x9f6cx7['debug']) {
			if (_0x9f6cx7['printServer']) {
				var _0x9f6cxc = {
					method: 'POST'
					, url: _0x9f6cx7['printServer']
					, timeout: _0x9f6cx7['timeout']
					, params: Ext['apply']({
						html: {
							array: Ext['JSON']['encode'](_0x9f6cx1)
						}
						, startDate: _0x9f6cx6['getStartDate']()
						, endDate: _0x9f6cx6['getEndDate']()
						, format: _0x9f6cx7['exporter']['getPaperFormat']()
						, orientation: _0x9f6cx2['orientation']
						, range: _0x9f6cx2['range']
						, fileFormat: _0x9f6cx7['fileFormat']
					}, this['getParameters']())
					, success: _0x9f6cx7['onRequestSuccess']
					, failure: _0x9f6cx7['onRequestFailure']
					, scope: _0x9f6cx7
				};
				Ext['apply'](_0x9f6cxc, this['getAjaxConfig'](_0x9f6cxc));
				this['currentAjaxRequest'] = Ext['Ajax']['request'](_0x9f6cxc)
			}
			else {
				_0x9f6cx7['onExportFailure']('Print server URL is not defined, please specify printServer config')
			}
		}
		else {
			if (_0x9f6cx7['debug']) {
				var _0x9f6cx5 = _0x9f6cx1 || [];
				for (var _0x9f6cx4 = 0, _0x9f6cx3 = _0x9f6cx5['length']; _0x9f6cx4 < _0x9f6cx3; _0x9f6cx4++) {
					var _0x9f6cx8 = window['open']();
					_0x9f6cx8['document']['write'](_0x9f6cx5[_0x9f6cx4]['html']);
					_0x9f6cx8['document']['close']()
				}
			};
			_0x9f6cx7['onExportSuccess'](_0x9f6cx7['testResponse'] || {
				success: true
				, url: 'foo'
				, htmlArray: _0x9f6cx1
			})
		}
	}
	, onRequestSuccess: function (_0x9f6cx2) {
		this['currentAjaxRequest'] = null;
		var _0x9f6cx5 = this
			, _0x9f6cx1;
		try {
			_0x9f6cx1 = Ext['JSON']['decode'](_0x9f6cx2['responseText'])
		}
		catch (d) {
			_0x9f6cx5['onExportFailure']('Wrong server response received');
			return
		};
		if (_0x9f6cx1['success']) {
			_0x9f6cx5['onExportSuccess'](_0x9f6cx1)
		}
		else {
			_0x9f6cx5['onExportFailure'](_0x9f6cx1['msg'], _0x9f6cx1)
		}
	}
	, onRequestFailure: function (_0x9f6cx1) {
		this['currentAjaxRequest'] = null;
		var _0x9f6cx2 = this
			, _0x9f6cx5 = _0x9f6cx1['status'] === 200 ? _0x9f6cx1['responseText'] : _0x9f6cx1['statusText'];
		_0x9f6cx2['onExportFailure'](_0x9f6cx5, _0x9f6cx1)
	}
	, getParameters: function () {
		return {}
	}
	, getAjaxConfig: function (_0x9f6cx1) {
		return {}
	}
	, getActiveExportDialog: function () {
		return this['win']
	}
	, setActiveExportDialog: function (_0x9f6cx1) {
		this['win'] = _0x9f6cx1
	}
	, myBeforeExport: function () {
		this['fireEvent']('exportstart', this);
		var _0x9f6cx1 = this['scheduler']['getEl']()['mask']();
		_0x9f6cx1['addCls']('sch-export-mask');
		var _0x9f6cx2 = this['getActiveExportDialog']()
			, _0x9f6cx5 = _0x9f6cx2 && _0x9f6cx2['progressBar'];
		if (_0x9f6cx5) {
			_0x9f6cx5['show']()
		}
	}
	, myAfterExport: function (_0x9f6cx2, _0x9f6cx1) {
		this['fireEvent']('afterexport', this, _0x9f6cx2, _0x9f6cx1);
		this['scheduler']['getEl']()['unmask']()
	}
	, destroy: function () {
		var _0x9f6cx1 = this['getActiveExportDialog']();
		_0x9f6cx1 && _0x9f6cx1['destroy']();
		this['callParent'](arguments);
		clearTimeout(this['openAfterExportTimer']);
		clearTimeout(this['hideExportDialogTimer']);
		if (this['getActiveExportDialog']()) {
			this['getActiveExportDialog']()['destroy']()
		}
	}
});
Ext.define('Ext.ux.Gantt.plugin.exporter.mixin.DependencyPainter', {
	fillRecordRelatedBoxes: function (_0x9f6cx5) {
		if (_0x9f6cx5['hasDependencies']()) {
			var _0x9f6cx4 = this
				, _0x9f6cx2 = _0x9f6cx4['normalView']
				, _0x9f6cx1 = _0x9f6cx4['component']['getDependencyView']()['painter'];
			var _0x9f6cx3 = _0x9f6cx1['getItemBox'](_0x9f6cx4['normalView'], _0x9f6cx5);
			if (_0x9f6cx3) {
				if (_0x9f6cx2['bufferedRenderer']) {
					_0x9f6cx3['top'] += _0x9f6cx2['bufferedRenderer']['bodyTop'];
					_0x9f6cx3['bottom'] += _0x9f6cx2['bufferedRenderer']['bodyTop']
				};
				_0x9f6cx3['rendered'] = true;
				_0x9f6cx4['eventBoxes'][_0x9f6cx5['internalId']] = _0x9f6cx3
			}
		}
	}
	, onClassMixedIn: function (_0x9f6cx1) {
		_0x9f6cx1['addMember']('fillRecordRelatedBoxes', this['prototype']['fillRecordRelatedBoxes'])
	}
});
Ext.define('Ext.ux.Gantt.plugin.exporter.SinglePage', {
	extend: 'Ext.ux.Scheduler.plugin.exporter.SinglePage'
	, mixins: ['Ext.ux.Gantt.plugin.exporter.mixin.DependencyPainter']
});
Ext.define('Ext.ux.Gantt.plugin.exporter.MultiPage', {
	extend: 'Ext.ux.Scheduler.plugin.exporter.MultiPage'
	, mixins: ['Ext.ux.Gantt.plugin.exporter.mixin.DependencyPainter']
	, normalGridOffset: 0
	, onRowsCollected: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['normalGridOffset'] = 0;
		_0x9f6cx1['callParent'](arguments)
	}
	, startPage: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['normalGridOffset'] = _0x9f6cx5['normalGridOffset'];
		_0x9f6cx2['callParent'](arguments)
	}
	, buildPageFrame: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		var _0x9f6cx3 = _0x9f6cx2['callParent'](arguments);
		_0x9f6cx3['normalHidden'] = _0x9f6cx2['normalGrid']['hidden'];
		_0x9f6cx3['lockedHidden'] = _0x9f6cx2['lockedGrid']['hidden'];
		return _0x9f6cx3
	}
});
Ext.define('Ext.ux.Gantt.plugin.exporter.MultiPageVertical', {
	extend: 'Ext.ux.Scheduler.plugin.exporter.MultiPageVertical'
	, mixins: ['Ext.ux.Gantt.plugin.exporter.mixin.DependencyPainter']
});
Ext.define('Ext.ux.Gantt.plugin.Export', {
	extend: 'Ext.ux.Scheduler.plugin.Export'
	, alias: 'plugin.gantt_export'
	, alternateClassName: 'Ext.ux.Gantt.plugin.PdfExport'
	, requires: ['Ext.ux.Gantt.plugin.exporter.SinglePage', 'Ext.ux.Gantt.plugin.exporter.MultiPage', 'Ext.ux.Gantt.plugin.exporter.MultiPageVertical']
	, buildExporters: function () {
		return ['Ext.ux.Gantt.plugin.exporter.SinglePage', 'Ext.ux.Gantt.plugin.exporter.MultiPage', 'Ext.ux.Gantt.plugin.exporter.MultiPageVertical']
	}
	, showExportDialog: function () {
		this['exportDialogConfig']['scrollerDisabled'] = true;
		this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Scheduler.plugin.Printable', {
	extend: 'Ext.ux.Scheduler.plugin.Export'
	, requires: ['Ext.XTemplate']
	, alternateClassName: ['Ext.ux.Scheduler.plugin.Print']
	, alias: ['plugin.scheduler_printable', 'plugin.scheduler_print']
	, docType: '<!DOCTYPE HTML>'
	, beforePrint: function () {}
	, afterPrint: function () {}
	, exportDialogConfig: {
		showDPIField: true
	}
	, removeSecondaryCanvas: false
	, wrapHeaders: false
	, autoPrintAndClose: true
	, mainTpl: '{docType}<html class="' + Ext['baseCSSPrefix'] + 'border-box {htmlClasses}"><head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type" /><title>{title}</title>{styles}</head><body class="sch-print-body {bodyClasses}"><div class="sch-print-ct" style="width:{totalWidth}px"><tpl for="pages">{html}</tpl></div><script type="text/javascript">{setupScript}</script></body></html>'
	, pageTpl: '{header}<div id="{id}" class="{componentClasses}" style="height:{bodyHeight}px; width:{totalWidth}px; position: relative !important">{HTML}</div>{footer}<div style="page-break-after:always;"></div>'
	, setupScriptTpl: 'window.onload = function(){ document._loaded  = true;if ({autoPrintAndClose}) {window.print();if (!{isChrome}) window.close();}}'
	, openAfterExport: false
	, DPI: 72
	, fakeBackgroundColor: false
	, doRequest: function () {}
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1);
		if (!this['mainTpl']['isTemplate']) {
			this['mainTpl'] = new Ext.XTemplate(this['mainTpl'])
		};
		this['callParent'](arguments);
		this['exportDialogConfig'] = Ext['applyIf']({
			l10n: {
				title: this.L('dialogTitle')
				, exportButtonText: this.L('exportButtonText')
			}
		}, this['exportDialogConfig'])
	}
	, init: function (_0x9f6cx1) {
		this['callParent'](arguments);
		_0x9f6cx1['print'] = Ext['Function']['bind'](this['print'], this)
	}
	, getExporterConfig: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx3 = this
			, _0x9f6cx1 = _0x9f6cx3['callParent'](arguments);
		return Ext['apply'](_0x9f6cx1, {
			tpl: _0x9f6cx3['pageTpl']
		})
	}
	, getExportConfig: function (_0x9f6cx2) {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['callParent'](arguments);
		return Ext['apply'](_0x9f6cx1, {
			beforeExport: Ext['Function']['bind'](_0x9f6cx5['beforePrint'], _0x9f6cx5)
			, afterExport: Ext['Function']['bind'](_0x9f6cx5['afterPrint'], _0x9f6cx5)
		})
	}
	, buildExporters: function () {
		return ['Ext.ux.Scheduler.plugin.exporter.MultiPage', 'Ext.ux.Scheduler.plugin.exporter.MultiPageVertical']
	}
	, onPagesExtracted: function (_0x9f6cx1, _0x9f6cx5, _0x9f6cx3, _0x9f6cx2) {
		this['fireEvent']('progressupdate', 0.8, this.L('requestingPrintServer'));
		this['printPages'](_0x9f6cx1, _0x9f6cx5, _0x9f6cx3, _0x9f6cx2)
	}
	, print: function () {
		this['showExportDialog']()
	}
	, onBeforePageCommit: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cxc, _0x9f6cxa) {
		var _0x9f6cx8 = this['scheduler']
			, _0x9f6cx7 = _0x9f6cx8['lockedGrid']
			, _0x9f6cx6 = _0x9f6cx8['normalGrid']
			, _0x9f6cx4 = function (_0x9f6cxd) {
				return _0x9f6cx3['select']('#' + _0x9f6cxd)['first']()
			};
		var _0x9f6cx1 = _0x9f6cx3['select'](_0x9f6cx5['normalBodySelector'])['first']()
			, _0x9f6cxe = _0x9f6cx4(_0x9f6cx6['headerCt']['id'])
			, _0x9f6cx9 = _0x9f6cx3['select'](_0x9f6cx5['lockedBodySelector'])['first']()
			, _0x9f6cx2 = _0x9f6cx4(_0x9f6cx7['headerCt']['id']);
		_0x9f6cx1['addCls'](['sch-print-normal-rows-ct', this['fakeBackgroundColor'] ? ' sch-print-fake-background' : '']);
		_0x9f6cx9['addCls']('sch-print-locked-rows-ct');
		if (this['removeSecondaryCanvas']) {
			_0x9f6cx3['select']('.sch-secondary-canvas')['remove']()
		};
		if (this['fakeBackgroundColor']) {
			var _0x9f6cxb = _0x9f6cx1['select']('.sch-event');
			_0x9f6cxb['each'](function (_0x9f6cxd) {
				_0x9f6cxd['setStyle']('border-right-width', _0x9f6cxd['dom']['style']['width'])
			})
		};
		_0x9f6cxe['addCls']('sch-print-normalheader');
		_0x9f6cx2['addCls']('sch-print-lockedheader');
		if (this['wrapHeaders']) {
			_0x9f6cxe['wrap']('<div class="sch-print-header-wrap"></div>');
			_0x9f6cx2['wrap']('<div class="sch-print-header-wrap"></div>')
		};
		if (Ext['isIE'] && _0x9f6cx6['bodyWrap']) {
			var _0x9f6cx13 = _0x9f6cx6['bodyWrap']['getHeight']();
			Ext['fly'](_0x9f6cx2['el']['dom']['parentNode'])['setStyle']({
				position: 'absolute'
				, height: _0x9f6cx13 + 'px'
			});
			Ext['fly'](_0x9f6cxe['el']['dom']['parentNode'])['setStyle']({
				position: 'absolute'
				, height: _0x9f6cx13 + 'px'
			})
		}
	}
	, prepareMainTplData: function (_0x9f6cx1) {
		return _0x9f6cx1
	}
	, printPages: function (_0x9f6cx2, _0x9f6cx3, _0x9f6cx6, _0x9f6cx5) {
		if (!this['mainTpl'] || !this['mainTpl']['isTemplate']) {
			this['mainTpl'] = new Ext.XTemplate(this['mainTpl'], {
				compiled: true
				, disableFormats: true
			})
		};
		var _0x9f6cx7 = _0x9f6cx6['stylesheets']
			, _0x9f6cx1 = document['body'];
		var _0x9f6cx4 = this['mainTpl']['apply'](this['prepareMainTplData']({
			docType: this['docType']
			, htmlClasses: _0x9f6cx1['parentNode']['className']
			, bodyClasses: _0x9f6cx1['className']
			, title: _0x9f6cx3['title'] || ''
			, styles: _0x9f6cx7
			, totalWidth: _0x9f6cx6['paperWidth']
			, setupScript: this['setupScriptTpl']['replace']('{autoPrintAndClose}', this['autoPrintAndClose'])['replace']('{isChrome}', Ext['isChrome'])
			, pages: _0x9f6cx2
		}));
		var _0x9f6cx8 = window['open']('', 'printgrid');
		if (!_0x9f6cx8 || !_0x9f6cx8['document']) {
			return false
		};
		this['printWindow'] = _0x9f6cx8;
		_0x9f6cx8['document']['write'](_0x9f6cx4);
		_0x9f6cx8['document']['close']();
		this['onExportSuccess']({
			success: true
			, url: 'foo'
			, htmlArray: [_0x9f6cx4]
		})
	}
	, bindExporter: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['callParent'](arguments);
		_0x9f6cx1['mon'](_0x9f6cx2, {
			beforecommitpage: _0x9f6cx1['onBeforePageCommit']
			, scope: _0x9f6cx1
		})
	}
	, unbindExporter: function (_0x9f6cx2) {
		var _0x9f6cx1 = this;
		_0x9f6cx1['callParent'](arguments);
		_0x9f6cx1['mun'](_0x9f6cx2, {
			beforecommitpage: _0x9f6cx1['onBeforePageCommit']
			, scope: _0x9f6cx1
		})
	}
});
Ext.define('Ext.ux.Gantt.plugin.Printable', {
	extend: 'Ext.ux.Scheduler.plugin.Printable'
	, alias: 'plugin.gantt_printable'
	, requires: ['Ext.ux.Gantt.plugin.exporter.MultiPage', 'Ext.ux.Gantt.plugin.exporter.MultiPageVertical']
	, buildExporters: function () {
		return ['Ext.ux.Gantt.plugin.exporter.MultiPage', 'Ext.ux.Gantt.plugin.exporter.MultiPageVertical']
	}
	, showExportDialog: function () {
		this['exportDialogConfig']['scrollerDisabled'] = true;
		this['callParent'](arguments)
	}
});
Ext.define('Ext.ux.Gantt.plugin.ProgressLine', {
	extend: 'Ext.AbstractPlugin'
	, alias: 'plugin.gantt_progressline'
	, config: {
		statusDate: null
	}
	, drawLineOnlyWhenStatusDateVisible: false
	, tpl: '<tpl for="."><line x1="{x1}" y1="{y1}" x2="{x2}" y2="{y2}" class="sch-gantt-progress-line"></line></tpl>'
	, constructor: function (_0x9f6cx1) {
		if (typeof this['tpl'] === 'string') {
			this['tpl'] = new Ext.XTemplate(this['tpl'])
		};
		this['callParent']([_0x9f6cx1]);
		if (!this['getStatusDate']()) {
			this['setStatusDate'](new Date())
		}
	}
	, init: function (_0x9f6cx1) {
		this['schedulerView'] = _0x9f6cx1['getSchedulingView']();
		this['callParent'](arguments);
		this['schedulerView']['on']('viewready', this['onViewReady'], this)
	}
	, enable: function () {
		this['callParent'](arguments);
		this['drawProgressLine']()
	}
	, disable: function () {
		this['callParent'](arguments);
		this['drawProgressLine']()
	}
	, setStatusDate: function (_0x9f6cx1) {
		this['callParent'](arguments);
		this['drawProgressLine']()
	}
	, onViewReady: function () {
		this['viewListeners'] = this['getViewListeners']();
		this['schedulerView']['on'](this['viewListeners']);
		this['drawProgressLine']()
	}
	, getViewListeners: function () {
		return {
			refresh: this['drawProgressLine']
			, itemupdate: this['drawProgressLine']
			, itemadd: this['drawProgressLine']
			, itemremove: this['drawProgressLine']
			, scope: this
		}
	}
	, calculateCoordinateForTask: function (_0x9f6cx1, _0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx4 = _0x9f6cx1['isSegmented']() ? Ext['fly'](_0x9f6cx3)['down']('.sch-segment-in-progress .sch-gantt-progress-bar') : Ext['fly'](_0x9f6cx3)['down']('.sch-gantt-progress-bar');
		if (_0x9f6cx4) {
			var _0x9f6cx5 = _0x9f6cx4['getBox']();
			return {
				x: _0x9f6cx5['right'] + _0x9f6cx2[0]
				, y: _0x9f6cx5['top'] + _0x9f6cx5['height'] / 2 + _0x9f6cx2[1]
			}
		}
	}
	, shouldDrawProgressLine: function () {
		return !this['disabled'] && (!this['drawLineOnlyWhenStatusDateVisible'] || this['schedulerView']['timeAxis']['dateInAxis'](this['getStatusDate']()))
	}
	, drawProgressLine: function () {
		var _0x9f6cx7 = this['schedulerView'];
		if (!_0x9f6cx7 || !_0x9f6cx7['rendered']) {
			return
		};
		var _0x9f6cx3 = this['getStatusDate']()
			, _0x9f6cx5 = _0x9f6cx7['timeAxis']['dateInAxis'](_0x9f6cx3)
			, _0x9f6cx2;
		if (_0x9f6cx5 && _0x9f6cx3 < _0x9f6cx7['timeAxis']['getEnd']()) {
			_0x9f6cx2 = _0x9f6cx7['getCoordinateFromDate'](_0x9f6cx3)
		}
		else {
			if (_0x9f6cx7['timeAxis']['getEnd']() < _0x9f6cx3) {
				_0x9f6cx2 = _0x9f6cx7['timeAxisViewModel']['getAvailableWidth']()
			}
		};
		var _0x9f6cx4 = this['shouldDrawProgressLine']() ? this['getProgressLineRenderData'](_0x9f6cx2) : [];
		var _0x9f6cx1 = _0x9f6cx7['getEl']()['down']('.sch-svg-canvas');
		_0x9f6cx1 && _0x9f6cx1['remove']();
		_0x9f6cx7['getItemCanvasEl'](11, {
			tag: 'svg'
			, role: 'presentation'
			, cls: 'sch-svg-canvas'
			, html: this['tpl']['apply'](_0x9f6cx4)
		})
	}
	, getProgressLineRenderData: function (_0x9f6cx4) {
		var _0x9f6cx7 = this
			, _0x9f6cx5 = _0x9f6cx7['schedulerView']
			, _0x9f6cx6 = Ext['getVersion']()['isGreaterThan']('6.2.0') ? [_0x9f6cx5['getX'](), _0x9f6cx5['el']['up']('.' + Ext['baseCSSPrefix'] + 'scroller')['getY']()] : _0x9f6cx5['getXY']()
			, _0x9f6cx1 = _0x9f6cx5['getScroll']()
			, _0x9f6cx2 = []
			, _0x9f6cx3 = this['getStatusDate']();
		_0x9f6cx6 = [_0x9f6cx1['left'] - _0x9f6cx6[0], _0x9f6cx1['top'] - _0x9f6cx6[1]];
		Ext['Array']['each'](_0x9f6cx5['getNodes'](), function (_0x9f6cxa) {
			var _0x9f6cxc = _0x9f6cx5['getRecord'](_0x9f6cxa)
				, _0x9f6cx9 = Ext['fly'](_0x9f6cxa)['getBox']()
				, _0x9f6cx8;
			if (_0x9f6cxc && _0x9f6cx5['timeAxis']['isRangeInAxis'](_0x9f6cxc) && !_0x9f6cxc['isMilestone']() && (_0x9f6cxc['isInProgress']() || (!_0x9f6cxc['isStarted']() && _0x9f6cxc['getStartDate']() < _0x9f6cx3) || (_0x9f6cxc['isCompleted']() && _0x9f6cxc['getStartDate']() > _0x9f6cx3))) {
				_0x9f6cx8 = _0x9f6cx7['calculateCoordinateForTask'](_0x9f6cxc, _0x9f6cxa, _0x9f6cx6);
				_0x9f6cx8 && _0x9f6cx2['push']({
					x1: _0x9f6cx4
					, y1: _0x9f6cx6[1] + _0x9f6cx9['top']
					, x2: _0x9f6cx8['x']
					, y2: _0x9f6cx8['y']
				}, {
					x1: _0x9f6cx8['x']
					, y1: _0x9f6cx8['y']
					, x2: _0x9f6cx4
					, y2: _0x9f6cx6[1] + _0x9f6cx9['bottom']
				})
			};
			if (!_0x9f6cx8) {
				_0x9f6cx2['push']({
					x1: _0x9f6cx4
					, y1: _0x9f6cx6[1] + _0x9f6cx9['top']
					, x2: _0x9f6cx4
					, y2: _0x9f6cx6[1] + _0x9f6cx9['bottom']
				})
			}
		});
		return _0x9f6cx2
	}
});
Ext.define('Ext.ux.Gantt.plugin.TaskContextMenu', {
	extend: 'Ext.menu.Menu'
	, requires: ['Ext.ux.Scheduler.util.Date', 'Ext.ux.Gantt.model.Task']
	, mixins: ['Ext.AbstractPlugin', 'Ext.ux.Gantt.mixin.Localizable']
	, alias: 'plugin.gantt_taskcontextmenu'
	, xtype: 'gantt_taskcontextmenu'
	, ptype: 'gantt_taskcontextmenu'
	, lockableScope: 'top'
	, plain: true
	, triggerEvent: ['rowcontextmenu', 'containercontextmenu', 'rowlongpress', 'containerlongpress']
	, hideEvent: null
	, grid: null
	, rec: null
	, triggerEventXY: null
	, lastHighlightedItem: null
	, taskEditorInjected: false
	, config: {
		splitDuration: 0
		, splitDurationUnit: 'd'
		, maxSplitDuration: 1
		, maxSplitDurationUnit: 'd'
		, minSplitDuration: 1
		, minSplitDurationUnit: 'h'
	}
	, initComponent: function () {
		var _0x9f6cx1 = this['hideEvent'];
		this['defaults'] = this['defaults'] || {};
		this['defaults']['scope'] = this;
		this['triggerEvent'] = []['concat'](this['triggerEvent']);
		if (_0x9f6cx1) {
			if (!Ext['isArray'](_0x9f6cx1)) {
				_0x9f6cx1 = [_0x9f6cx1]
			}
		};
		if (Ext['isIE']) {
			_0x9f6cx1 = _0x9f6cx1 || [];
			_0x9f6cx1['push']('itemclick')
		};
		this['hideEvent'] = _0x9f6cx1;
		this['items'] = this['createMenuItems']();
		this['callParent'](arguments)
	}
	, init: function (_0x9f6cx1) {
		this['grid'] = _0x9f6cx1;
		this['bindTriggerEvent']();
		this['bindHideEvent']()
	}
	, getState: function () {
		if (this['rendered']) {
			return this['callParent'](arguments)
		}
	}
	, isNotProject: function (_0x9f6cx1) {
		return !_0x9f6cx1 || !_0x9f6cx1['isProject']
	}
	, isReadOnly: function (_0x9f6cx1) {
		return this['getCmp']()['isReadOnly']() || (_0x9f6cx1 && _0x9f6cx1['isReadOnly']())
	}
	, createMenuItems: function () {
		var _0x9f6cx1 = this;
		return [{
			handler: this['deleteTask']
			, requiresTask: true
			, itemId: 'deleteTask'
			, text: this.L('deleteTask')
			, isValidAction: function (_0x9f6cx2) {
				return !_0x9f6cx1['isReadOnly'](_0x9f6cx2)
			}
		}, {
			handler: this['editLeftLabel']
			, requiresTask: true
			, itemId: 'editLeftLabel'
			, text: this.L('editLeftLabel')
			, isValidAction: function (_0x9f6cx2) {
				return _0x9f6cx1['grid']['getSchedulingView']()['getLeftEditor']() && !_0x9f6cx1['isReadOnly'](_0x9f6cx2)
			}
		}, {
			handler: this['editRightLabel']
			, requiresTask: true
			, itemId: 'editRightLabel'
			, text: this.L('editRightLabel')
			, isValidAction: function (_0x9f6cx2) {
				return _0x9f6cx1['grid']['getSchedulingView']()['getRightEditor']() && !_0x9f6cx1['isReadOnly'](_0x9f6cx2)
			}
		}, {
			handler: this['toggleMilestone']
			, requiresTask: true
			, itemId: 'toggleMilestone'
			, text: this.L('convertToMilestone')
			, isValidAction: function (_0x9f6cx2) {
				return this['isNotProject'](_0x9f6cx2) && !_0x9f6cx1['isReadOnly'](_0x9f6cx2)
			}
		}, {
			handler: this['splitTask']
			, requiresTask: true
			, itemId: 'splitTask'
			, isValidAction: function (_0x9f6cx5, _0x9f6cx2) {
				return _0x9f6cx5 && !_0x9f6cx1['isReadOnly'](_0x9f6cx5) && _0x9f6cx5['getStartDate']() && _0x9f6cx5['getEndDate']() && !_0x9f6cx5['isMilestone']() && _0x9f6cx5['isLeaf']() && _0x9f6cx2 && _0x9f6cx2['getTarget']('.sch-gantt-task-bar')
			}
			, text: this.L('splitTask')
		}, {
			text: this.L('add')
			, itemId: 'addTaskMenu'
			, menu: {
				plain: true
				, defaults: {
					scope: this
				}
				, items: [{
					handler: this['addTaskAboveAction']
					, requiresTask: true
					, itemId: 'addTaskAbove'
					, text: this.L('addTaskAbove')
					, isValidAction: function (_0x9f6cx2) {
						return _0x9f6cx1['isNotProject'](_0x9f6cx2) && !_0x9f6cx1['isReadOnly'](_0x9f6cx2['parentNode'])
					}
				}, {
					handler: this['addTaskBelowAction']
					, itemId: 'addTaskBelow'
					, text: this.L('addTaskBelow')
					, isValidAction: function (_0x9f6cx2) {
						return (_0x9f6cx2 && _0x9f6cx1['isNotProject'](_0x9f6cx2) && !_0x9f6cx1['isReadOnly'](_0x9f6cx2['parentNode'])) || (!_0x9f6cx2 && !_0x9f6cx1['isReadOnly']())
					}
				}, {
					handler: this['addMilestone']
					, itemId: 'addMilestone'
					, requiresTask: true
					, text: this.L('addMilestone')
					, isValidAction: function (_0x9f6cx2) {
						return _0x9f6cx1['isNotProject'](_0x9f6cx2) && !_0x9f6cx1['isReadOnly'](_0x9f6cx2['parentNode'])
					}
				}, {
					handler: this['addSubtask']
					, requiresTask: true
					, itemId: 'addSubtask'
					, text: this.L('addSubtask')
					, isValidAction: function (_0x9f6cx2) {
						return !_0x9f6cx1['isReadOnly'](_0x9f6cx2)
					}
				}, {
					handler: this['addSuccessor']
					, requiresTask: true
					, itemId: 'addSuccessor'
					, text: this.L('addSuccessor')
					, isValidAction: function (_0x9f6cx2) {
						return _0x9f6cx1['isNotProject'](_0x9f6cx2) && !_0x9f6cx1['isReadOnly'](_0x9f6cx2['parentNode'])
					}
				}, {
					handler: this['addPredecessor']
					, requiresTask: true
					, itemId: 'addPredecessor'
					, text: this.L('addPredecessor')
					, isValidAction: function (_0x9f6cx2) {
						return _0x9f6cx1['isNotProject'](_0x9f6cx2) && !_0x9f6cx1['isReadOnly'](_0x9f6cx2['parentNode'])
					}
				}]
			}
		}, {
			text: this.L('deleteDependency')
			, requiresTask: true
			, itemId: 'deleteDependencyMenu'
			, isValidAction: function (_0x9f6cx2) {
				return _0x9f6cx2 && !_0x9f6cx1['isReadOnly'](_0x9f6cx2) && _0x9f6cx2['getAllDependencies']()['length'] > 0
			}
			, menu: {
				plain: true
				, listeners: {
					beforeshow: this['populateDependencyMenu']
					, mouseover: this['onDependencyMouseOver']
					, mouseleave: this['onDependencyMouseOut']
					, scope: this
				}
			}
		}]
	}
	, bindGridEvents: function (_0x9f6cx5, _0x9f6cx4, _0x9f6cx3) {
		_0x9f6cx3 = _0x9f6cx3 || this;
		var _0x9f6cx2 = this['getCmp']();
		if (_0x9f6cx5) {
			for (var _0x9f6cx1 = _0x9f6cx5['length'] - 1; _0x9f6cx1 >= 0; _0x9f6cx1--) {
				_0x9f6cx2['on'](_0x9f6cx5[_0x9f6cx1], _0x9f6cx4, _0x9f6cx3)
			}
		}
	}
	, isMenuOptionEnabled: null
	, bindTriggerEvent: function () {
		this['bindGridEvents'](this['triggerEvent'], this['onTriggerEvent'])
	}
	, bindHideEvent: function () {
		this['bindGridEvents'](this['hideEvent'], this['onHideEvent'])
	}
	, onHideEvent: function () {
		this['hide']()
	}
	, swallowNextClickEvent: function () {
		Ext['getBody']()['on']('click', function (_0x9f6cx1) {
			_0x9f6cx1['stopPropagation']()
		}, null, {
			single: true
			, capture: true
		})
	}
	, populateDependencyMenu: function (_0x9f6cx7) {
		if (_0x9f6cx7['up']('menuitem')['isDisabled']()) {
			return false
		};
		var _0x9f6cx3 = this['getCmp']()
			, _0x9f6cx2 = _0x9f6cx3['getTaskStore']()
			, _0x9f6cx4 = this['rec']['getAllDependencies']()
			, _0x9f6cx1 = _0x9f6cx3['dependencyStore'];
		_0x9f6cx7['removeAll']();
		if (!_0x9f6cx4['length']) {
			return false
		};
		var _0x9f6cx5 = this['rec']['getId']() || this['rec']['internalId'];
		Ext['Array']['each'](_0x9f6cx4, function (_0x9f6cx9) {
			var _0x9f6cx8 = _0x9f6cx9['getSourceId']()
				, _0x9f6cx6 = _0x9f6cx2['getModelById'](_0x9f6cx8 == _0x9f6cx5 ? _0x9f6cx9['getTargetId']() : _0x9f6cx8);
			if (_0x9f6cx6) {
				_0x9f6cx7['add']({
					dependency: _0x9f6cx9
					, text: Ext['String']['htmlEncode'](Ext['util']['Format']['ellipsis'](_0x9f6cx6['getName'](), 30))
					, scope: this
					, handler: function (_0x9f6cxc) {
						_0x9f6cx1['remove'](_0x9f6cxc['dependency'])
					}
					, disabled: this['isReadOnly'](this['rec'])
				})
			}
		}, this)
	}
	, onDependencyMouseOver: function (_0x9f6cx3, _0x9f6cx1, _0x9f6cx2) {
		if (_0x9f6cx1) {
			var _0x9f6cx5 = this['getCmp']()['getSchedulingView']();
			if (this['lastHighlightedItem']) {
				_0x9f6cx5['unhighlightDependency'](this['lastHighlightedItem']['dependency'])
			};
			this['lastHighlightedItem'] = _0x9f6cx1;
			_0x9f6cx5['highlightDependency'](_0x9f6cx1['dependency'])
		}
	}
	, onDependencyMouseOut: function (_0x9f6cx2, _0x9f6cx1) {
		if (this['lastHighlightedItem']) {
			this['getCmp']()['getSchedulingView']()['unhighlightDependency'](this['lastHighlightedItem']['dependency'])
		}
	}
	, onTriggerEvent: function () {
		var _0x9f6cx1 = this['getTriggerEventContext']['apply'](this, arguments);
		if (!_0x9f6cx1['e']['type']['match']('longpress') || _0x9f6cx1['e']['pointerType'] !== 'mouse') {
			this['activateMenu'](_0x9f6cx1['record'], _0x9f6cx1['e'])
		}
	}
	, getTriggerEventContext: function () {
		var _0x9f6cx1 = {};
		for (var _0x9f6cx5 = 0, _0x9f6cx2 = arguments['length'] - 1; _0x9f6cx5 <= _0x9f6cx2; _0x9f6cx5++) {
			if (arguments[_0x9f6cx5] instanceof Ext.ux.Gantt['model']['Task']) {
				_0x9f6cx1['record'] = arguments[_0x9f6cx5];
				break
			}
		};
		for (_0x9f6cx5 = arguments['length'] - 1; _0x9f6cx5 >= 0; _0x9f6cx5--) {
			if (arguments[_0x9f6cx5] instanceof Ext['EventObjectImpl']) {
				_0x9f6cx1['e'] = arguments[_0x9f6cx5];
				break
			}
		};
		return _0x9f6cx1
	}
	, activateMenu: function (_0x9f6cx2, _0x9f6cx1) {
		if (this['getCmp']()['taskStore']['getRootNode']() === _0x9f6cx2) {
			return
		};
		if (_0x9f6cx1['type']['match']('longpress')) {
			this['swallowNextClickEvent']()
		};
		_0x9f6cx1['stopEvent']();
		this['rec'] = _0x9f6cx2;
		this['triggerEventXY'] = _0x9f6cx1['getXY']();
		this['configureMenuItems'](_0x9f6cx1);
		this['showAt'](_0x9f6cx1['getXY']())
	}
	, addTaskEditorEntry: function () {
		this['insert'](0, {
			text: this.L('taskInformation')
			, itemId: 'taskEditor'
			, requiresTask: true
			, handler: function () {
				this['getCmp']()['getTaskEditor'](this['rec'])['showTask'](this['rec'])
			}
			, isValidAction: function (_0x9f6cx1) {
				return this['getCmp']()['getTaskEditor'](_0x9f6cx1)
			}
			, scope: this
		});
		this['taskEditorInjected'] = true
	}
	, setTaskEditorEntryLabel: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['down']('#taskEditor');
		if (_0x9f6cx1 && _0x9f6cx2) {
			_0x9f6cx2['setText'](_0x9f6cx1['isProject'] ? this.L('projectInformation') : this.L('taskInformation'))
		}
	}
	, configureMenuItems: function (_0x9f6cx2) {
		var _0x9f6cx5 = this['rec'];
		var _0x9f6cx1 = this;
		if (this['getCmp']()['getTaskEditor']()) {
			if (!this['taskEditorInjected']) {
				this['addTaskEditorEntry']()
			};
			this['setTaskEditorEntryLabel'](_0x9f6cx5)
		};
		Ext['Array']['each'](this['query']('menuitem'), function (_0x9f6cx4) {
			_0x9f6cx4['setDisabled'](!_0x9f6cx1['isMenuItemEnabled'](_0x9f6cx4, _0x9f6cx5, _0x9f6cx2))
		});
		var _0x9f6cx3 = this['down']('#toggleMilestone');
		if (_0x9f6cx5 && _0x9f6cx3) {
			_0x9f6cx3['setText'](_0x9f6cx5['isMilestone']() ? this.L('convertToRegular') : this.L('convertToMilestone'))
		}
	}
	, isMenuItemEnabled: function (_0x9f6cx5, _0x9f6cx1, _0x9f6cx3) {
		var _0x9f6cx2 = (_0x9f6cx5['requiresTask'] && !_0x9f6cx1) || (_0x9f6cx5['isValidAction'] && !_0x9f6cx5['isValidAction']['call'](_0x9f6cx5['scope'] || _0x9f6cx5, _0x9f6cx1, _0x9f6cx3));
		return !_0x9f6cx2 && (!this['isMenuOptionEnabled'] || this['isMenuOptionEnabled'](_0x9f6cx5, _0x9f6cx1) !== false)
	}
	, copyTask: function (_0x9f6cx5) {
		var _0x9f6cx2 = _0x9f6cx5 && _0x9f6cx5['self'] || this['getCmp']()['getTaskStore']()['getModel']();
		var _0x9f6cx1 = new _0x9f6cx2({
			leaf: true
		});
		_0x9f6cx1['setPercentDoneWithoutPropagation'](0);
		_0x9f6cx1['setName'](this.L('newTaskText', this['texts']));
		_0x9f6cx1['set'](_0x9f6cx1['startDateField'], (_0x9f6cx5 && _0x9f6cx5['getStartDate']()) || null);
		_0x9f6cx1['set'](_0x9f6cx1['endDateField'], (_0x9f6cx5 && _0x9f6cx5['getEndDate']()) || null);
		_0x9f6cx1['set'](_0x9f6cx1['durationField'], (_0x9f6cx5 && _0x9f6cx5['getDuration']()) || null);
		_0x9f6cx1['set'](_0x9f6cx1['durationUnitField'], (_0x9f6cx5 && _0x9f6cx5['getDurationUnit']()) || Ext.ux.Scheduler['util']['Date']['DAY']);
		return _0x9f6cx1
	}
	, addTaskAbove: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['rec'];
		if (_0x9f6cx2) {
			_0x9f6cx2['addTaskAbove'](_0x9f6cx1)
		}
		else {
			this['getCmp']()['taskStore']['getRootNode']()['appendChild'](_0x9f6cx1)
		}
	}
	, addTaskBelow: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['rec'];
		if (_0x9f6cx2) {
			_0x9f6cx2['addTaskBelow'](_0x9f6cx1)
		}
		else {
			this['getCmp']()['taskStore']['getRootNode']()['appendChild'](_0x9f6cx1)
		}
	}
	, deleteTask: function () {
		var _0x9f6cx1 = this['getCmp']()['getSelectedRows']()['slice']();
		if (this['rec'] && !Ext['Array']['contains'](_0x9f6cx1, this['rec'])) {
			_0x9f6cx1['push'](this['rec'])
		};
		this['getCmp']()['getTaskStore']()['removeTasks'](_0x9f6cx1)
	}
	, editLeftLabel: function () {
		this['getCmp']()['getSchedulingView']()['editLeftLabel'](this['rec'])
	}
	, editRightLabel: function () {
		this['getCmp']()['getSchedulingView']()['editRightLabel'](this['rec'])
	}
	, addTaskAboveAction: function () {
		this['addTaskAbove'](this['copyTask'](this['rec']))
	}
	, addTaskBelowAction: function () {
		this['addTaskBelow'](this['copyTask'](this['rec']))
	}
	, addSubtask: function () {
		var _0x9f6cx1 = this['rec'];
		var _0x9f6cx2 = this['copyTask'](this['isNotProject'](_0x9f6cx1) && _0x9f6cx1);
		_0x9f6cx1['addSubtask'](_0x9f6cx2)
	}
	, addSuccessor: function () {
		var _0x9f6cx1 = this['rec'];
		_0x9f6cx1['addSuccessor'](this['copyTask'](_0x9f6cx1))
	}
	, addPredecessor: function () {
		var _0x9f6cx1 = this['rec'];
		_0x9f6cx1['addPredecessor'](this['copyTask'](_0x9f6cx1))
	}
	, addMilestone: function () {
		var _0x9f6cx2 = this['rec']
			, _0x9f6cx1 = this['copyTask'](_0x9f6cx2);
		_0x9f6cx2['addTaskBelow'](_0x9f6cx1);
		_0x9f6cx1['setStartEndDate'](_0x9f6cx2['getEndDate'](), _0x9f6cx2['getEndDate']())
	}
	, toggleMilestone: function () {
		if (this['rec']['isMilestone']()) {
			this['rec']['convertToRegular']()
		}
		else {
			this['rec']['convertToMilestone']()
		}
	}
	, getSplitDate: function (_0x9f6cx4) {
		var _0x9f6cx2 = _0x9f6cx4['task']
			, _0x9f6cx5 = _0x9f6cx4['date']
			, _0x9f6cx3 = _0x9f6cx4['tick']
			, _0x9f6cx6 = _0x9f6cx4['timeAxis']
			, _0x9f6cx7 = this['getMaxSplitDuration']()
			, _0x9f6cx1;
		if (_0x9f6cx3) {
			_0x9f6cx1 = _0x9f6cx3['getStartDate']();
			if (_0x9f6cx7) {
				_0x9f6cx7 = _0x9f6cx2['getUnitConverter']()['convertDurationToMs'](_0x9f6cx7, this['getMaxSplitDurationUnit']());
				if (_0x9f6cx7 < _0x9f6cx3['getEndDate']() - _0x9f6cx3['getStartDate']()) {
					_0x9f6cx1 = null
				}
			}
		};
		return _0x9f6cx1 || _0x9f6cx6['roundDate'](_0x9f6cx5, _0x9f6cx2['getStartDate']())
	}
	, getSplitDuration: function (_0x9f6cx2) {
		if (this['splitDuration']) {
			return this['splitDuration']
		};
		var _0x9f6cx5 = _0x9f6cx2['task']
			, _0x9f6cx8 = _0x9f6cx2['pos']
			, _0x9f6cx3 = _0x9f6cx2['date']
			, _0x9f6cx6 = _0x9f6cx2['tick'];
		if (_0x9f6cx6) {
			var _0x9f6cx9 = _0x9f6cx5['calculateDuration'](_0x9f6cx6['getStartDate'](), _0x9f6cx6['getEndDate'](), Ext.ux.Scheduler['util']['Date'].MILLI)
				, _0x9f6cx4 = _0x9f6cx5['getUnitConverter']()
				, _0x9f6cx1 = this['getMinSplitDuration']()
				, _0x9f6cx7 = this['getMaxSplitDuration']();
			if (_0x9f6cx1 || _0x9f6cx7) {
				if (_0x9f6cx7) {
					_0x9f6cx9 = Math['min'](_0x9f6cx9, _0x9f6cx4['convertDurationToMs'](_0x9f6cx7, this['getMaxSplitDurationUnit']()))
				};
				if (_0x9f6cx1) {
					_0x9f6cx9 = Math['max'](_0x9f6cx9, _0x9f6cx4['convertDurationToMs'](_0x9f6cx1, this['getMinSplitDurationUnit']()))
				}
			};
			return _0x9f6cx4['convertMSDurationToUnit'](_0x9f6cx9, this['getSplitDurationUnit'](_0x9f6cx5, _0x9f6cx8, _0x9f6cx3, _0x9f6cx6))
		}
	}
	, getSplitDurationUnit: function (_0x9f6cx1) {
		return this['splitDuration'] ? this['splitDurationUnit'] : Ext.ux.Scheduler['util']['Date']['MILLI']
	}
	, splitTask: function () {
		var _0x9f6cx3 = this
			, _0x9f6cx2 = _0x9f6cx3['grid']['getSchedulingView']()
			, _0x9f6cx1 = _0x9f6cx2['getDateFromX'](_0x9f6cx3['triggerEventXY'][0])
			, _0x9f6cx4 = _0x9f6cx2['timeAxis'];
		var _0x9f6cx5 = {
			task: _0x9f6cx3['rec']
			, pos: _0x9f6cx3['triggerEventXY']
			, date: _0x9f6cx1
			, timeAxis: _0x9f6cx4
			, tick: _0x9f6cx4['getAt'](Math['floor'](_0x9f6cx4['getTickFromDate'](_0x9f6cx1)))
		};
		_0x9f6cx5['task']['split'](_0x9f6cx3['getSplitDate'](_0x9f6cx5), _0x9f6cx3['getSplitDuration'](_0x9f6cx5), _0x9f6cx3['getSplitDurationUnit'](_0x9f6cx5))
	}
});
Ext.define('Ext.ux.Gantt.plugin.taskeditor.BaseEditor', {
	extend: 'Ext.window.Window'
	, requires: ['Ext.window.MessageBox']
	, mixins: ['Ext.AbstractPlugin', 'Ext.ux.Gantt.mixin.Localizable']
	, lockableScope: 'top'
	, closeOnBlur: true
	, taskEditorCls: 'Ext.ux.Gantt.widget.taskeditor.TaskEditor'
	, isTaskEditor: true
	, taskEditor: null
	, panelConfig: null
	, height: 340
	, width: 600
	, layout: 'card'
	, constrain: true
	, triggerEvent: 'taskdblclick'
	, closeAction: 'hide'
	, modal: true
	, gantt: null
	, assignmentStore: null
	, resourceStore: null
	, taskStore: null
	, monitorDataUpdates: false
	, monitorDataUpdatesInterval: 500
	, taskEditorConfigs: 'l10n,task,taskStore,assignmentStore,resourceStore'
	, taskFilters: null
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		this['taskFilters'] = [];
		Ext['apply'](this, _0x9f6cx1);
		this['title'] = this.L('title');
		if (!_0x9f6cx1['buttons']) {
			this['buttons'] = ['->', {
				itemId: 'teOkBtn'
				, text: this.L('okText')
				, handler: this['onOkClick']
				, scope: this
			}, {
				text: this.L('cancelText')
				, handler: this['close']
				, scope: this
			}]
		};
		this['callParent']([_0x9f6cx1]);
		this['addCls']('gnt-taskeditor-window');
		if (this['closeOnBlur']) {
			this['on']('show', this['onFirstShow'], this, {
				single: true
			})
		}
	}
	, showErrorMessage: function () {
		!Ext['Msg']['isVisible']() && Ext['Msg']['alert'](this.L('alertCaption'), this.L('alertText'))
	}
	, onOkClick: function () {
		!this['completeEditing']() && this['showErrorMessage']()
	}
	, getState: function () {
		if (this['rendered']) {
			return this['callParent'](arguments)
		}
	}
	, init: function (_0x9f6cx1) {
		this['assignmentStore'] = this['assignmentStore'] || _0x9f6cx1['getAssignmentStore']();
		this['resourceStore'] = this['resourceStore'] || _0x9f6cx1['getResourceStore']();
		this['taskStore'] = this['taskStore'] || _0x9f6cx1['getTaskStore']();
		this['buildTaskEditor'](Ext['apply'](this['buildTaskEditorConfig'](_0x9f6cx1), this['panelConfig']));
		this['add'](this['taskEditor']);
		this['mon'](_0x9f6cx1, this['triggerEvent'], this['onTriggerEvent'], this);
		this['gantt'] = _0x9f6cx1
	}
	, buildTaskEditorConfig: function (_0x9f6cx3) {
		var _0x9f6cx1 = {
			width: null
			, height: null
			, border: false
			, showBaseline: _0x9f6cx3['enableBaseline']
			, showRollup: _0x9f6cx3['showRollupTasks']
			, allowParentTaskDependencies: _0x9f6cx3['allowParentTaskDependencies']
		};
		var _0x9f6cx4 = this['taskEditorConfigs']['split'](',');
		for (var _0x9f6cx5 = 0; _0x9f6cx5 < _0x9f6cx4['length']; _0x9f6cx5++) {
			var _0x9f6cx2 = _0x9f6cx4[_0x9f6cx5];
			if (typeof this[_0x9f6cx2] !== 'undefined') {
				_0x9f6cx1[_0x9f6cx2] = this[_0x9f6cx2]
			}
		};
		return _0x9f6cx1
	}
	, buildTaskEditor: function (_0x9f6cx2) {
		this['taskEditor'] = Ext['create'](this['taskEditorCls'], _0x9f6cx2);
		var _0x9f6cx1 = this['taskEditor']['eventIndicator'];
		this['relayEvents'](this['taskEditor'], ['load' + _0x9f6cx1, 'validate', 'beforeupdate' + _0x9f6cx1, 'afterupdate' + _0x9f6cx1])
	}
	, onTriggerEvent: function (_0x9f6cx2, _0x9f6cx1) {
		this['showTask'](_0x9f6cx1)
	}
	, showTask: function (_0x9f6cx1) {
		if (this['taskEditor'] && _0x9f6cx1 && this['matchFilters'](_0x9f6cx1)) {
			this['taskEditor']['loadTask'](_0x9f6cx1);
			var _0x9f6cx5 = this['gantt']['isReadOnly']();
			if (_0x9f6cx5 != this['taskEditor']['setReadOnly']()) {
				this['taskEditor']['setReadOnly'](_0x9f6cx5)
			};
			var _0x9f6cx2 = this['down']('#teOkBtn');
			if (_0x9f6cx2) {
				_0x9f6cx2['setVisible'](!_0x9f6cx5)
			};
			this['show']()
		}
	}
	, matchFilters: function (_0x9f6cx1) {
		if (!_0x9f6cx1) {
			return
		};
		for (var _0x9f6cx2 = 0; _0x9f6cx2 < this['taskFilters']['length']; _0x9f6cx2++) {
			var _0x9f6cx5 = this['taskFilters'][_0x9f6cx2];
			if (!_0x9f6cx5['fn']['call'](_0x9f6cx5['scope'], _0x9f6cx1)) {
				return false
			}
		};
		return true
	}
	, addFilter: function (_0x9f6cx2, _0x9f6cx1) {
		this['taskFilters']['push']({
			fn: _0x9f6cx2
			, scope: _0x9f6cx1 || this
		})
	}
	, validate: function () {
		if (this['taskEditor']) {
			return this['taskEditor']['validate']()
		}
	}
	, completeEditing: function () {
		if (this['taskEditor']) {
			var _0x9f6cx1 = this['taskEditor']['getActiveTab']();
			if (_0x9f6cx1['editingPlugin'] && _0x9f6cx1['editingPlugin']['completeEdit']) {
				_0x9f6cx1['editingPlugin']['completeEdit']()
			};
			if (!this['taskEditor']['validate']()) {
				return false
			};
			if (this['taskEditor']['updateTask']()) {
				this['hide']();
				return true
			};
			return false
		}
	}
	, updateTask: function () {
		if (this['taskEditor']) {
			return this['taskEditor']['updateTask']()
		}
	}
	, afterRender: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['callParent'](arguments);
		_0x9f6cx1['startDataUpdatesMonitoring']()
	}
	, onFirstShow: function () {
		if (this['zIndexManager']['mask']) {
			this['mon'](this['zIndexManager']['mask'], 'click', function () {
				if (this['isVisible']()) {
					this['hide']()
				}
			}, this)
		}
	}
	, startDataUpdatesMonitoring: function () {
		var _0x9f6cx4 = this
			, _0x9f6cx3 = _0x9f6cx4['down']('#teOkBtn')
			, _0x9f6cx5 = true;

		function _0x9f6cx2() {
			if (_0x9f6cx5 && _0x9f6cx3 && _0x9f6cx4['taskEditor']) {
				_0x9f6cx3['setDisabled'](!_0x9f6cx4['taskEditor']['isDataChanged']() || !_0x9f6cx4['taskEditor']['isDataValid']());
				_0x9f6cx5 = Ext['Function']['defer'](_0x9f6cx2, _0x9f6cx4['monitorDataUpdatesInterval'])
			}
		}

		function _0x9f6cx1() {
			_0x9f6cx5 !== true && clearTimeout(_0x9f6cx5);
			_0x9f6cx5 = true
		}
		if (_0x9f6cx4['monitorDataUpdates'] && _0x9f6cx3) {
			_0x9f6cx4['on']({
				show: _0x9f6cx2
				, hide: _0x9f6cx1
				, destroy: _0x9f6cx1
			})
		}
	}
});
Ext.define('Ext.ux.Gantt.util.Data', {
	singleton: true
	, cloneModelSet: function (_0x9f6cx2, _0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx4 = []
			, _0x9f6cx1;
		var _0x9f6cx7 = function (_0x9f6cx6) {
			_0x9f6cx1 = _0x9f6cx6['copy']();
			_0x9f6cx1['phantom'] = false;
			_0x9f6cx1['originalRecord'] = _0x9f6cx6;
			if (_0x9f6cx3) {
				if (_0x9f6cx3['call'](_0x9f6cx5 || _0x9f6cx2, _0x9f6cx1, _0x9f6cx6) === false) {
					return
				}
			};
			_0x9f6cx4['push'](_0x9f6cx1)
		};
		if (_0x9f6cx2['each']) {
			_0x9f6cx2['each'](_0x9f6cx7)
		}
		else {
			Ext['Array']['each'](_0x9f6cx2, _0x9f6cx7)
		};
		return _0x9f6cx4
	}
	, applyCloneChanges: function (_0x9f6cx6, _0x9f6cxb, _0x9f6cxc, _0x9f6cxd) {
		var _0x9f6cx1 = [];
		var _0x9f6cx5 = _0x9f6cxb['autoSyncSuspended'];
		if (_0x9f6cxb['autoSync'] && !_0x9f6cx5) {
			_0x9f6cxb['suspendAutoSync']()
		};
		var _0x9f6cx7 = _0x9f6cx6['getRemovedRecords']();
		for (var _0x9f6cx4 = 0, _0x9f6cx2 = _0x9f6cx7['length']; _0x9f6cx4 < _0x9f6cx2; _0x9f6cx4++) {
			if (_0x9f6cx7[_0x9f6cx4]['originalRecord']) {
				_0x9f6cx1['push'](_0x9f6cx7[_0x9f6cx4]['originalRecord'])
			}
		};
		if (_0x9f6cx1['length']) {
			_0x9f6cxb['remove'](_0x9f6cx1);
			_0x9f6cx6['removed']['length'] = 0
		};
		var _0x9f6cxe = _0x9f6cx6['getModifiedRecords']()
			, _0x9f6cxf, _0x9f6cx3, _0x9f6cx8;
		for (_0x9f6cx4 = 0, _0x9f6cx2 = _0x9f6cxe['length']; _0x9f6cx4 < _0x9f6cx2; _0x9f6cx4++) {
			_0x9f6cxf = _0x9f6cxe[_0x9f6cx4]['originalRecord'];
			_0x9f6cx3 = _0x9f6cxe[_0x9f6cx4]['getData']();
			delete _0x9f6cx3[_0x9f6cxe[_0x9f6cx4]['idProperty']];
			if (_0x9f6cxf) {
				_0x9f6cxf['beginEdit']();
				for (var _0x9f6cxa in _0x9f6cx3) {
					_0x9f6cxf['set'](_0x9f6cxa, _0x9f6cx3[_0x9f6cxa])
				};
				if (_0x9f6cxc) {
					_0x9f6cxc['call'](_0x9f6cxd || _0x9f6cxe[_0x9f6cx4], _0x9f6cx3, _0x9f6cxe[_0x9f6cx4])
				};
				_0x9f6cxf['endEdit']()
			}
			else {
				if (_0x9f6cxc) {
					_0x9f6cxc['call'](_0x9f6cxd || _0x9f6cxe[_0x9f6cx4], _0x9f6cx3, _0x9f6cxe[_0x9f6cx4])
				};
				_0x9f6cx8 = _0x9f6cxb['add'](_0x9f6cx3);
				_0x9f6cxe[_0x9f6cx4]['originalRecord'] = _0x9f6cx8 && _0x9f6cx8[0]
			};
			_0x9f6cxe[_0x9f6cx4]['commit'](true)
		};
		if (_0x9f6cxb['autoSync'] && !_0x9f6cx5) {
			_0x9f6cxb['resumeAutoSync']();
			_0x9f6cxb['sync']()
		}
	}
});
Ext.define('Ext.ux.Gantt.widget.taskeditor.BaseEditor', {
	extend: 'Ext.tab.Panel'
	, requires: ['Ext.ux.Gantt.util.Data']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, margin: '5 0 0 0'
	, height: 340
	, width: 600
	, layout: 'fit'
	, border: false
	, plain: false
	, defaults: {
		margin: 5
		, border: false
	}
	, eventIndicator: 'task'
	, task: null
	, taskBuffer: null
	, taskStore: null
	, assignmentStore: null
	, resourceStore: null
	, tabBar: {
		cls: 'gnt-taskeditor-header'
	}
	, clonedStores: null
	, taskStoreConfigsToClone: 'calendarManager,model,weekendsAreWorkdays,cascadeChanges,skipWeekendsDuringDragDrop,moveParentAsGroup,enableDependenciesForParentTasks,availabilitySearchLimit,dependenciesCalendar,scheduleByConstraints,projectStartDate'
	, constructor: function (_0x9f6cx2) {
		var _0x9f6cx3 = this;
		_0x9f6cx2 = _0x9f6cx2 || {};
		Ext['apply'](_0x9f6cx3, _0x9f6cx2);
		if (!_0x9f6cx3['clonedStores']) {
			_0x9f6cx3['clonedStores'] = (_0x9f6cx3['task'] || _0x9f6cx3['taskStore']) ? _0x9f6cx3['cloneStores']() : {}
		};
		var _0x9f6cx1 = _0x9f6cx3['buildItems'](_0x9f6cx2);
		var _0x9f6cx5 = _0x9f6cx3['items'];
		if (_0x9f6cx5) {
			_0x9f6cx1['push']['apply'](_0x9f6cx1, Ext['isArray'](_0x9f6cx5) ? _0x9f6cx5 : [_0x9f6cx5]);
			delete _0x9f6cx2['items']
		};
		_0x9f6cx3['items'] = _0x9f6cx1;
		if (_0x9f6cx3['items']['length'] <= 1) {
			_0x9f6cx2['tabBar'] = _0x9f6cx2['tabBar'] || {};
			Ext['applyIf'](_0x9f6cx2['tabBar'], {
				hidden: true
			})
		};
		this['callParent']([_0x9f6cx2]);
		if (this['task']) {
			this['loadTask'](this['task'])
		}
		else {
			_0x9f6cx3['setReadOnly'](true)
		}
	}
	, buildItems: function () {
		return []
	}
	, cloneTaskBranch: function (_0x9f6cx2, _0x9f6cx1, _0x9f6cx7) {
		_0x9f6cx2 = _0x9f6cx2 || this['task'];
		var _0x9f6cx3 = this
			, _0x9f6cx4 = _0x9f6cx3['getTaskStore']()
			, _0x9f6cx6 = _0x9f6cx4 && _0x9f6cx4['getRoot']()
			, _0x9f6cx8 = _0x9f6cx3['clonedStores']
			, _0x9f6cx5, _0x9f6cx9;
		_0x9f6cx2['bubble'](function (_0x9f6cxc) {
			if (_0x9f6cxc !== _0x9f6cx6) {
				var _0x9f6cxa = _0x9f6cx1[_0x9f6cxc['getId']()];
				if (_0x9f6cxa) {
					if (_0x9f6cx9) {
						_0x9f6cxa['appendChild'](_0x9f6cx9)
					};
					_0x9f6cx9 = null;
					return false
				}
				else {
					_0x9f6cxa = _0x9f6cx3['cloneTask'](_0x9f6cxc);
					_0x9f6cx1[_0x9f6cxc['getId']()] = _0x9f6cxa;
					_0x9f6cxa['taskStore'] = _0x9f6cx8['taskStore']
				};
				if (_0x9f6cx9) {
					_0x9f6cxa['appendChild'](_0x9f6cx9)
				}
				else {
					_0x9f6cx5 = _0x9f6cxa
				};
				_0x9f6cx9 = _0x9f6cxa;
				_0x9f6cx7 && _0x9f6cx7(_0x9f6cxa, _0x9f6cxc)
			}
		});
		return {
			branch: _0x9f6cx9
			, task: _0x9f6cx5
		}
	}
	, cloneRelevantTasks: function (_0x9f6cx5) {
		_0x9f6cx5 = _0x9f6cx5 || this['task'];
		var _0x9f6cx4 = this
			, _0x9f6cx7 = {};
		var _0x9f6cx1 = _0x9f6cx4['cloneTaskBranch'](_0x9f6cx5, _0x9f6cx7)
			, _0x9f6cx2 = _0x9f6cx1['task']
			, _0x9f6cx6 = [_0x9f6cx1['branch']]
			, _0x9f6cx3 = _0x9f6cx4['getTaskStore']();
		Ext['Array']['each'](_0x9f6cx5['predecessors'], function (_0x9f6cx9) {
			var _0x9f6cx8 = _0x9f6cx4['cloneTaskBranch'](_0x9f6cx9['getSourceTask'](), _0x9f6cx7, _0x9f6cx3 && _0x9f6cx3['scheduleByConstraints'] && function (_0x9f6cxc) {
				_0x9f6cxc['pinWithoutPropagation']()
			});
			if (_0x9f6cx8['branch']) {
				_0x9f6cx6['push'](_0x9f6cx8['branch'])
			}
		});
		Ext['Array']['each'](_0x9f6cx5['successors'], function (_0x9f6cx9) {
			var _0x9f6cx8 = _0x9f6cx4['cloneTaskBranch'](_0x9f6cx9['getTargetTask'](), _0x9f6cx7);
			if (_0x9f6cx8['branch']) {
				_0x9f6cx6['push'](_0x9f6cx8['branch'])
			}
		});
		return {
			task: _0x9f6cx2
			, tasks: _0x9f6cx6
		}
	}
	, loadTask: function (_0x9f6cx1) {
		if (!_0x9f6cx1) {
			return
		};
		this['clonedStores'] = this['cloneStores']({
			task: _0x9f6cx1
		});
		this['loadClonedStores'](this['clonedStores'], _0x9f6cx1)
	}
	, buildTaskStoreCloneConfig: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = Ext['apply']({
			isCloned: true
			, storeId: null
			, calendar: _0x9f6cx1['getCalendar']()
			, batchSync: false
			, recalculateParents: false
			, autoNormalizeNodes: false
			, autoSync: false
			, autoLoad: false
			, proxy: {
				type: 'memory'
				, reader: {
					type: 'json'
				}
			}
		}, _0x9f6cx5);
		return Ext['copyIf'](_0x9f6cx2, _0x9f6cx1, this['taskStoreConfigsToClone'])
	}
	, cloneTaskStore: function (_0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx2 = this['getTaskStore']()
			, _0x9f6cx1;
		if (_0x9f6cx2) {
			_0x9f6cx1 = new _0x9f6cx2['self'](this['buildTaskStoreCloneConfig'](_0x9f6cx2, _0x9f6cx3));
			this['mon'](_0x9f6cx2, {
				calendarset: function (_0x9f6cx4, _0x9f6cx7) {
					_0x9f6cx1['setCalendar'](_0x9f6cx7)
				}
			})
		};
		return _0x9f6cx1
	}
	, cloneDependencyStore: function (_0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx5 = this['getTaskStore']();
		var _0x9f6cx1 = this['dependencyStore'] || _0x9f6cx5 && _0x9f6cx5['getDependencyStore']();
		if (!_0x9f6cx1) {
			return null
		};
		return new _0x9f6cx1['self'](Ext['apply']({
			isCloned: true
			, model: _0x9f6cx1['model']
			, strictDependencyValidation: _0x9f6cx1['strictDependencyValidation']
			, allowedDependencyTypes: _0x9f6cx1['allowedDependencyTypes']
			, storeId: null
			, autoSync: false
			, autoLoad: false
			, proxy: {
				type: 'memory'
				, reader: {
					type: 'json'
				}
			}
		}, _0x9f6cx3))
	}
	, cloneAssignmentStore: function (_0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx5 = this['getTaskStore']();
		var _0x9f6cx1 = this['assignmentStore'] || _0x9f6cx5 && _0x9f6cx5['getAssignmentStore']();
		if (!_0x9f6cx1) {
			return null
		};
		return new _0x9f6cx1['self'](Ext['apply']({
			isCloned: true
			, model: _0x9f6cx1['model']
			, storeId: null
			, autoSync: false
			, autoLoad: false
			, proxy: {
				type: 'memory'
				, reader: {
					type: 'json'
				}
			}
		}, _0x9f6cx3))
	}
	, cloneResourceStore: function (_0x9f6cx2, _0x9f6cx3) {
		var _0x9f6cx5 = this['getTaskStore']();
		var _0x9f6cx1 = this['resourceStore'] || _0x9f6cx5 && _0x9f6cx5['getResourceStore']();
		if (!_0x9f6cx1) {
			return null
		};
		return new _0x9f6cx1['self'](Ext['apply']({
			isCloned: true
			, model: _0x9f6cx1['model']
			, storeId: null
			, autoSync: false
			, autoLoad: false
			, proxy: {
				type: 'memory'
				, reader: {
					type: 'json'
				}
			}
		}, _0x9f6cx3))
	}
	, cloneStores: function (_0x9f6cx3) {
		_0x9f6cx3 = _0x9f6cx3 || {};
		var _0x9f6cx1 = _0x9f6cx3['task'] || this['task']
			, _0x9f6cx4 = this['clonedStores'] || {}
			, _0x9f6cx7 = _0x9f6cx4['resourceStore'] || this['cloneResourceStore'](_0x9f6cx1, _0x9f6cx3['resourceStore'])
			, _0x9f6cx6 = _0x9f6cx4['assignmentStore'] || this['cloneAssignmentStore'](_0x9f6cx1, _0x9f6cx3['assignmentStore'])
			, _0x9f6cx5 = _0x9f6cx4['dependencyStore'] || this['cloneDependencyStore'](_0x9f6cx1, _0x9f6cx3['dependencyStore']);
		var _0x9f6cx2 = _0x9f6cx4['taskStore'] || this['cloneTaskStore'](_0x9f6cx1, Ext['apply']({
			assignmentStore: _0x9f6cx6
			, resourceStore: _0x9f6cx7
			, dependencyStore: _0x9f6cx5
		}, _0x9f6cx3['taskStore']));
		_0x9f6cx7['taskStore'] = _0x9f6cx2;
		Ext['apply'](_0x9f6cx4, {
			resourceStore: _0x9f6cx7
			, assignmentStore: _0x9f6cx6
			, dependencyStore: _0x9f6cx5
			, taskStore: _0x9f6cx2
		});
		return _0x9f6cx4
	}
	, getTaskStore: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['task'];
		return this['taskStore'] || _0x9f6cx1 && _0x9f6cx1['getTaskStore']()
	}
	, loadClonedStores: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx3 = this
			, _0x9f6cx4 = _0x9f6cx3['cloneRelevantTasks'](_0x9f6cx2)
			, _0x9f6cx7 = _0x9f6cx4['tasks']
			, _0x9f6cx1 = _0x9f6cx4['task'];
		_0x9f6cx3['taskBuffer'] = _0x9f6cx1;
		_0x9f6cx5['taskStore']['setRootNode']({
			expanded: true
			, children: _0x9f6cx7
		});
		_0x9f6cx1['taskStore']['on']({
			update: function (_0x9f6cx9, _0x9f6cx6, _0x9f6cx8) {
				if (_0x9f6cx6 === _0x9f6cx1 && _0x9f6cx8 == Ext['data']['Model']['EDIT']) {
					_0x9f6cx3['onTaskUpdated']['call'](_0x9f6cx3, _0x9f6cx6);
					_0x9f6cx6['fireEvent'](_0x9f6cx3['eventIndicator'] + 'updated', _0x9f6cx6)
				}
			}
		});
		_0x9f6cx3['loadClonedDependencyStore'](_0x9f6cx5, _0x9f6cx2);
		_0x9f6cx3['loadClonedResourceStore'](_0x9f6cx5, _0x9f6cx2);
		_0x9f6cx3['loadClonedAssignmentStore'](_0x9f6cx5, _0x9f6cx2)
	}
	, loadClonedDependencyStore: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx2 = _0x9f6cx2 || this['clonedStores'];
		_0x9f6cx2['dependencyStore'] && _0x9f6cx2['dependencyStore']['loadData'](Ext.ux.Gantt['util']['Data']['cloneModelSet'](_0x9f6cx1['getAllDependencies'](), function (_0x9f6cx3, _0x9f6cx5) {
			_0x9f6cx3['setId'](_0x9f6cx5['getId']())
		}))
	}
	, loadClonedResourceStore: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || this['clonedStores'];
		_0x9f6cx1['resourceStore'] && _0x9f6cx1['resourceStore']['loadData'](Ext.ux.Gantt['util']['Data']['cloneModelSet'](this['resourceStore'] || this['getTaskStore']()['getResourceStore'](), function (_0x9f6cx5, _0x9f6cx2) {
			_0x9f6cx5['setId'](_0x9f6cx2['getId']())
		}))
	}
	, loadClonedAssignmentStore: function (_0x9f6cx2, _0x9f6cx1) {
		_0x9f6cx2 = _0x9f6cx2 || this['clonedStores'];
		_0x9f6cx2['assignmentStore'] && _0x9f6cx2['assignmentStore']['loadData'](Ext.ux.Gantt['util']['Data']['cloneModelSet'](_0x9f6cx1['getAssignments'](), function (_0x9f6cx3, _0x9f6cx5) {
			_0x9f6cx3['setId'](_0x9f6cx5['getId']())
		}))
	}
	, cloneTask: function (_0x9f6cx1) {
		return _0x9f6cx1['copy'](_0x9f6cx1['getId'](), false)
	}
	, getTabByComponent: function (_0x9f6cx2) {
		var _0x9f6cx1;
		this['items']['each'](function (_0x9f6cx5) {
			if (_0x9f6cx2 === _0x9f6cx5 || _0x9f6cx2['isDescendantOf'](_0x9f6cx5)) {
				_0x9f6cx1 = _0x9f6cx5;
				return false
			}
		}, this);
		return _0x9f6cx1
	}
	, validate: function () {
		var _0x9f6cx2, _0x9f6cx1 = this['getActiveTab']()
			, _0x9f6cx5 = []
			, _0x9f6cx3;
		_0x9f6cx2 = this['doValidate'](function (_0x9f6cx4) {
			_0x9f6cx5['push'](_0x9f6cx4)
		});
		if (!_0x9f6cx2 && _0x9f6cx1 && !Ext['Array']['contains'](_0x9f6cx5, _0x9f6cx1)) {
			_0x9f6cx3 = _0x9f6cx5[0];
			this['setActiveTab'](_0x9f6cx3)
		}
		else {
			if (!_0x9f6cx2 && _0x9f6cx1) {
				_0x9f6cx3 = _0x9f6cx1
			}
			else {
				if (!_0x9f6cx2) {
					_0x9f6cx3 = _0x9f6cx5[0]
				}
			}
		};
		return (this['fireEvent']('validate', this, _0x9f6cx3) !== false) && _0x9f6cx2
	}
	, updateTask: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = false;
		if (_0x9f6cx2['fireEvent']('beforeupdate' + _0x9f6cx2['eventIndicator'], _0x9f6cx2, function () {
				_0x9f6cx2['doUpdateTask']()
			}) !== false) {
			_0x9f6cx2['doUpdateTask']();
			_0x9f6cx2['fireEvent']('afterupdate' + _0x9f6cx2['eventIndicator'], _0x9f6cx2);
			_0x9f6cx1 = true
		};
		return _0x9f6cx1
	}
	, onDestroy: function () {
		if (this['clonedStores']['taskStore']) {
			this['clonedStores']['taskStore']['destroy']()
		};
		this['callParent'](arguments)
	}
	, doValidate: function () {
		return true
	}
	, isDataValid: function () {
		return this['doValidate']()
	}
	, isDataChanged: function () {
		return false
	}
	, doUpdateTask: function () {
		throw 'Abstract method called'
	}
	, updateReadOnly: function () {
		throw 'Abstract method called'
	}
	, getReadOnly: function () {
		return !this['task'] || this['readOnly']
	}
	, setReadOnly: function (_0x9f6cx1) {
		this['readOnly'] = _0x9f6cx1;
		this['updateReadOnly']()
	}
	, onTaskUpdated: function () {
		this['updateReadOnly']()
	}
});
Ext.define('Ext.ux.Gantt.widget.taskeditor.BaseForm', {
	extend: 'Ext.form.Panel'
	, highlightTaskUpdates: true
	, task: null
	, taskBuffer: null
	, taskStore: null
	, taskListeners: null
	, autoScroll: true
	, labelWidth: 130
	, padding: 10
	, border: false
	, defaultType: 'textfield'
	, initComponent: function () {
		this['defaults'] = this['defaults'] || {};
		this['defaults']['labelWidth'] = this['defaults']['labelWidth'] || this['labelWidth'];
		if (this['task']) {
			this['fieldNames'] = this['getFieldNames'](this['task'])
		};
		if (!this['items']) {
			this['buildFields']()
		};
		this['callParent'](arguments);
		this['addBodyCls']('gnt-taskeditor-form');
		if (this['task']) {
			this['loadRecord'](this['task'], this['taskBuffer'])
		}
	}
	, getFieldNames: function (_0x9f6cx2) {
		if (!_0x9f6cx2) {
			return
		};
		var _0x9f6cx1 = {};
		for (var _0x9f6cx5 in this['fieldNames']) {
			_0x9f6cx1[_0x9f6cx5] = _0x9f6cx2[_0x9f6cx5]
		};
		return _0x9f6cx1
	}
	, renameFields: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['getFieldNames'](_0x9f6cx2);
		if (!_0x9f6cx1) {
			return
		};
		var _0x9f6cx3 = this['getForm']()
			, _0x9f6cx7 = false
			, _0x9f6cx4;
		for (var _0x9f6cx5 in this['fieldNames']) {
			_0x9f6cx4 = _0x9f6cx3['findField'](this['fieldNames'][_0x9f6cx5]);
			if (_0x9f6cx4 && _0x9f6cx1[_0x9f6cx5] && _0x9f6cx1[_0x9f6cx5] != _0x9f6cx4['name']) {
				_0x9f6cx7 = true;
				_0x9f6cx4['name'] = _0x9f6cx1[_0x9f6cx5]
			}
		};
		if (_0x9f6cx7) {
			this['fieldNames'] = _0x9f6cx1
		}
	}
	, setSuppressTaskUpdate: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['getForm']()['getFields']();
		_0x9f6cx1['each'](function (_0x9f6cx5) {
			_0x9f6cx5['setSuppressTaskUpdate'] && _0x9f6cx5['setSuppressTaskUpdate'](_0x9f6cx2)
		})
	}
	, isDataChanged: function () {
		return this['isDirty']()
	}
	, buildTaskBuffer: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx2['taskBuffer'] = _0x9f6cx1['copy']();
		_0x9f6cx2['taskBuffer']['taskStore'] = _0x9f6cx1['taskStore']
	}
	, loadRecord: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx3 = this;
		if (_0x9f6cx2 && _0x9f6cx2 !== _0x9f6cx3['task']) {
			_0x9f6cx3['renameFields'](_0x9f6cx2)
		};
		_0x9f6cx3['task'] = _0x9f6cx2;
		_0x9f6cx3['taskBuffer'] = _0x9f6cx1;
		if (!_0x9f6cx3['taskBuffer']) {
			_0x9f6cx3['buildTaskBuffer'](_0x9f6cx2)
		};
		_0x9f6cx3['taskListeners'] && _0x9f6cx3['taskListeners']['destroy']();
		_0x9f6cx3['taskListeners'] = _0x9f6cx3['mon'](_0x9f6cx3['taskBuffer'], {
			taskupdated: _0x9f6cx3['onTaskUpdated']
			, destroyable: true
			, scope: _0x9f6cx3
		});
		var _0x9f6cx5 = _0x9f6cx3['getForm']();
		_0x9f6cx5['_record'] = _0x9f6cx2;
		this['suspendLayouts']();
		var _0x9f6cx4 = _0x9f6cx2['getData']();
		_0x9f6cx5['getFields']()['each'](function (_0x9f6cx7) {
			if (_0x9f6cx7['getName']() in _0x9f6cx4) {
				if (_0x9f6cx7['setTask']) {
					_0x9f6cx7['setTask'](_0x9f6cx3['taskBuffer'])
				}
				else {
					_0x9f6cx7['setValue'](_0x9f6cx4[_0x9f6cx7['getName']()])
				};
				_0x9f6cx3['updateFieldReadOnly'](_0x9f6cx7);
				if (_0x9f6cx5['trackResetOnLoad']) {
					_0x9f6cx7['resetOriginalValue']()
				}
			}
		});
		this['resumeLayouts'](true);
		this['fireEvent']('afterloadrecord', this, _0x9f6cx2)
	}
	, updateFieldReadOnly: function (_0x9f6cx3) {
		var _0x9f6cx5 = this;
		if (!_0x9f6cx3['disabled']) {
			if (!_0x9f6cx3['forceReadOnly']) {
				var _0x9f6cx1 = _0x9f6cx3['isTaskField'];
				if (_0x9f6cx5['getReadOnly']()) {
					_0x9f6cx3['setReadOnly'](true);
					_0x9f6cx1 && !_0x9f6cx3['isReadOnlyUpdateSuspended']() && _0x9f6cx3['suspendReadOnlyUpdate']()
				}
				else {
					if (!_0x9f6cx1) {
						var _0x9f6cx2 = _0x9f6cx5['taskBuffer']['isEditable'](_0x9f6cx3['name']);
						if (this['editable'] === false) {
							if (_0x9f6cx2 && _0x9f6cx3['inputEl']) {
								_0x9f6cx3['inputEl']['dom']['readOnly'] = true
							}
						};
						_0x9f6cx3['setReadOnly'](!_0x9f6cx2)
					}
					else {
						_0x9f6cx3['resumeReadOnlyUpdate']();
						_0x9f6cx3['updateReadOnly'](_0x9f6cx5['taskBuffer'])
					}
				}
			}
		}
	}
	, updateReadOnly: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = _0x9f6cx2['getForm']();
		_0x9f6cx1['getFields']()['each'](function (_0x9f6cx5) {
			_0x9f6cx2['updateFieldReadOnly'](_0x9f6cx5)
		})
	}
	, updateRecord: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx1 = _0x9f6cx1 || _0x9f6cx2['task'];
		if (_0x9f6cx1 && _0x9f6cx2['fireEvent']('beforeupdaterecord', _0x9f6cx2, _0x9f6cx1, _0x9f6cx2['updateRecordFn']) !== false) {
			_0x9f6cx2['setSuppressTaskUpdate'](true);
			_0x9f6cx2['updateRecordFn']['call'](_0x9f6cx2, _0x9f6cx1);
			_0x9f6cx2['setSuppressTaskUpdate'](false);
			_0x9f6cx2['fireEvent']('afterupdaterecord', _0x9f6cx2, _0x9f6cx1);
			return true
		};
		return false
	}
	, updateRecordWithFieldValue: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = _0x9f6cx1['getField'](_0x9f6cx5['name']);
		if (_0x9f6cx5['applyChanges']) {
			_0x9f6cx5['applyChanges'](_0x9f6cx1)
		}
		else {
			if (_0x9f6cx2 && _0x9f6cx5['name'] in this['getForm']()['getFieldValues']()) {
				_0x9f6cx1['set'](_0x9f6cx5['name'], _0x9f6cx5['getValue']())
			}
		}
	}
	, updateRecordFn: function (_0x9f6cx1) {
		var _0x9f6cx2 = this;
		_0x9f6cx1['beginEdit']();
		_0x9f6cx2['getForm']()['getFields']()['each'](function (_0x9f6cx5) {
			_0x9f6cx2['updateRecordWithFieldValue'](_0x9f6cx1, _0x9f6cx5)
		});
		_0x9f6cx1['endEdit']()
	}
	, initFieldDefinition: function (_0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		var _0x9f6cx2 = {
			taskStore: _0x9f6cx5['taskStore']
			, task: _0x9f6cx5['task']
			, highlightTaskUpdates: _0x9f6cx5['highlightTaskUpdates']
		};
		if (!_0x9f6cx3['readOnly'] && _0x9f6cx5['task']) {
			_0x9f6cx2['readOnly'] = !_0x9f6cx5['task']['isEditable'](_0x9f6cx3['name'])
		};
		return Ext['apply'](_0x9f6cx3, _0x9f6cx2, _0x9f6cx1)
	}
	, getTaskFieldValue: function (_0x9f6cx5) {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = this['task'];
		return _0x9f6cx1 ? _0x9f6cx1['get'](_0x9f6cx2['fieldNames'][_0x9f6cx5]) : ''
	}
	, onTaskUpdated: function (_0x9f6cx1, _0x9f6cx2) {
		this['updateReadOnly']()
	}
	, getReadOnly: function () {
		return this['readOnly']
	}
	, setReadOnly: function (_0x9f6cx1) {
		this['readOnly'] = _0x9f6cx1;
		this['updateReadOnly']()
	}
});
Ext.define('Ext.ux.Gantt.widget.taskeditor.ProjectForm', {
	extend: 'Ext.ux.Gantt.widget.taskeditor.BaseForm'
	, alias: 'widget.projectform'
	, requires: ['Ext.ux.Gantt.model.Project', 'Ext.Date', 'Ext.form.FieldSet', 'Ext.form.FieldContainer', 'Ext.form.field.Text', 'Ext.ux.Gantt.field.Calendar', 'Ext.ux.Gantt.field.StartDate', 'Ext.ux.Gantt.field.EndDate', 'Ext.ux.Gantt.field.ReadOnly', 'Ext.form.field.Checkbox']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alternateClassName: ['Ext.ux.Gantt.widget.ProjectForm']
	, showCalendar: false
	, nameConfig: null
	, readOnlyConfig: null
	, allowDependenciesConfig: null
	, startConfig: null
	, finishConfig: null
	, calendarConfig: null
	, defaults: {
		anchor: '100%'
		, labelWidth: 110
	}
	, constructor: function (_0x9f6cx2) {
		_0x9f6cx2 = _0x9f6cx2 || {};
		var _0x9f6cx1 = _0x9f6cx2['taskStore'] && _0x9f6cx2['taskStore']['projectModel'] && _0x9f6cx2['taskStore']['projectModel']['prototype'] || Ext.ux.Gantt['model']['Project']['prototype'];
		this['fieldNames'] = {
			calendarIdField: _0x9f6cx1['calendarIdField']
			, readOnlyField: _0x9f6cx1['readOnlyField']
			, allowDependenciesField: _0x9f6cx1['allowDependenciesField']
			, startDateField: _0x9f6cx1['startDateField']
			, endDateField: _0x9f6cx1['endDateField']
			, nameField: _0x9f6cx1['nameField']
			, descriptionField: _0x9f6cx1['descriptionField']
		};
		this['callParent'](arguments);
		this['addBodyCls']('gnt-projecteditor-projectform')
	}
	, buildFields: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['fieldNames'];
		_0x9f6cx1['items'] = _0x9f6cx1['items'] || [];
		_0x9f6cx1['items']['push'](_0x9f6cx1['initFieldDefinition']({
			xtype: 'textfield'
			, fieldLabel: _0x9f6cx1.L('nameText')
			, name: _0x9f6cx2['nameField']
			, allowBlank: false
			, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['nameField'])
		}, _0x9f6cx1['nameConfig']), {
			xtype: 'container'
			, layout: 'hbox'
			, defaults: {
				flex: 1
				, labelWidth: 110
				, margin: '5 5 5 0'
			}
			, items: [_0x9f6cx1['initFieldDefinition']({
				allowBlank: false
				, xtype: 'startdatefield'
				, fieldLabel: _0x9f6cx1.L('startText')
				, format: Ext['Date']['defaultFormat']
				, name: _0x9f6cx2['startDateField']
				, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['startDateField'])
			}, _0x9f6cx1['startConfig']), _0x9f6cx1['initFieldDefinition']({
				allowBlank: false
				, margin: '5 0'
				, xtype: 'enddatefield'
				, format: Ext['Date']['defaultFormat']
				, fieldLabel: _0x9f6cx1.L('finishText')
				, name: _0x9f6cx2['endDateField']
				, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['endDateField'])
			}, _0x9f6cx1['finishConfig'])]
		}, {
			xtype: 'container'
			, layout: 'hbox'
			, padding: '0 0 0 110'
			, defaults: {
				flex: 1
				, margin: '5 5 5 0'
			}
			, items: [_0x9f6cx1['initFieldDefinition']({
				xtype: 'readonlyfield'
				, boxLabel: _0x9f6cx1.L('readOnlyText')
				, allowBlank: false
				, name: _0x9f6cx2['readOnlyField']
				, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['readOnlyField'])
			}, _0x9f6cx1['readOnlyConfig']), _0x9f6cx1['initFieldDefinition']({
				xtype: 'checkboxfield'
				, boxLabel: _0x9f6cx1.L('allowDependenciesText')
				, allowBlank: false
				, name: _0x9f6cx2['allowDependenciesField']
				, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['allowDependenciesField'])
			}, _0x9f6cx1['allowDependenciesConfig'])]
		});
		if (_0x9f6cx1['showCalendar']) {
			_0x9f6cx1['items']['push'](_0x9f6cx1['initFieldDefinition']({
				allowBlank: false
				, flex: 1
				, margin: '5 0 5 0'
				, xtype: 'calendarfield'
				, fieldLabel: this.L('calendarText')
				, name: _0x9f6cx2['calendarIdField']
				, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['calendarIdField'])
			}, _0x9f6cx1['calendarConfig']))
		}
	}
});
Ext.define('Ext.ux.Gantt.widget.taskeditor.ProjectEditor', {
	extend: 'Ext.ux.Gantt.widget.taskeditor.BaseEditor'
	, alias: 'widget.projecteditor'
	, requires: ['Ext.ux.Gantt.widget.taskeditor.ProjectForm', 'Ext.form.field.HtmlEditor']
	, alternateClassName: ['Ext.ux.Gantt.widget.ProjectEditor']
	, eventIndicator: 'project'
	, projectFormClass: 'Ext.ux.Gantt.widget.taskeditor.ProjectForm'
	, showDescription: true
	, projectFormConfig: null
	, descriptionConfig: null
	, descriptionPanel: null
	, descriptionEditor: null
	, projectForm: null
	, buildItems: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx1 = []
			, _0x9f6cx5 = this['task'];
		_0x9f6cx2['projectForm'] = Ext['create'](_0x9f6cx2['projectFormClass'], Ext['applyIf'](_0x9f6cx2['projectFormConfig'] || {}, {
			task: _0x9f6cx5
			, border: false
			, taskStore: _0x9f6cx2['taskStore']
		}));
		_0x9f6cx1['push'](_0x9f6cx2['projectForm']);
		if (_0x9f6cx2['showDescription']) {
			_0x9f6cx2['descriptionEditor'] = Ext['create']('Ext.form.field.HtmlEditor', Ext['apply']({
				listeners: {
					afterrender: function (_0x9f6cx3) {
						_0x9f6cx2['descriptionEditor']['setValue'](_0x9f6cx2['task']['get'](_0x9f6cx2['task']['descriptionField']))
					}
				}
				, readOnly: _0x9f6cx5 && !_0x9f6cx5['isEditable'](_0x9f6cx5['descriptionField'])
				, isDataChanged: function () {
					return this['isDirty']()
				}
			}, _0x9f6cx2['descriptionConfig']));
			_0x9f6cx2['descriptionPanel'] = Ext['create']('Ext.panel.Panel', {
				border: false
				, layout: 'fit'
				, items: _0x9f6cx2['descriptionEditor']
			});
			_0x9f6cx1['push'](_0x9f6cx2['descriptionPanel'])
		};
		if (!_0x9f6cx2['projectForm']['title']) {
			_0x9f6cx2['projectForm']['title'] = _0x9f6cx2.L('generalText')
		};
		if (_0x9f6cx2['descriptionPanel'] && !_0x9f6cx2['descriptionPanel']['title']) {
			_0x9f6cx2['descriptionPanel']['title'] = this.L('descriptionText')
		};
		return _0x9f6cx1
	}
	, loadProject: function (_0x9f6cx1) {
		this['loadTask']['apply'](this, arguments)
	}
	, loadTask: function (_0x9f6cx2) {
		if (!_0x9f6cx2) {
			return
		};
		this['task'] = _0x9f6cx2;
		var _0x9f6cx1 = this['projectForm'];
		_0x9f6cx1['setSuppressTaskUpdate'](true);
		_0x9f6cx1['getForm']()['reset']();
		this['callParent'](arguments);
		_0x9f6cx1['loadRecord'](_0x9f6cx2, this['taskBuffer']);
		if (this['descriptionEditor']) {
			this['descriptionEditor']['setValue'](_0x9f6cx2['getDescription']())
		};
		this['setReadOnly'](_0x9f6cx2['isReadOnly']());
		_0x9f6cx1['setSuppressTaskUpdate'](false);
		this['fireEvent']('loadproject', this, _0x9f6cx2)
	}
	, setReadOnly: function (_0x9f6cx5) {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['task'];
		this['callParent'](arguments);
		if (_0x9f6cx2) {
			if (_0x9f6cx1['descriptionEditor']) {
				_0x9f6cx1['descriptionEditor']['setReadOnly'](_0x9f6cx5 || !_0x9f6cx2['isEditable'](_0x9f6cx2['descriptionField']))
			}
		}
	}
	, onTaskUpdated: function (_0x9f6cx1) {
		this['setReadOnly'](_0x9f6cx1['isReadOnly']())
	}
	, updateProject: function () {
		this['updateTask']()
	}
	, loadClonedDependencyStore: Ext['emptyFn']
	, loadClonedResourceStore: Ext['emptyFn']
	, loadClonedAssignmentStore: Ext['emptyFn']
	, doValidate: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['callParent'](arguments);
		if (this['projectForm'] && !this['projectForm']['isValid']()) {
			_0x9f6cx1 = false;
			_0x9f6cx2 && _0x9f6cx2(this['getTabByComponent'](this['projectForm']))
		};
		return _0x9f6cx1
	}
	, doUpdateTask: function () {
		var _0x9f6cx1 = this['task'];
		this['projectForm'] && this['projectForm']['updateRecord']();
		this['descriptionEditor'] && _0x9f6cx1['set'](_0x9f6cx1['descriptionField'], this['descriptionEditor']['getValue']())
	}
	, isDataChanged: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['callParent'](arguments);
		if (this['projectForm'] && this['projectForm']['isDataChanged']()) {
			_0x9f6cx1 = true;
			_0x9f6cx2 && _0x9f6cx2(this['getTabByComponent'](this['projectForm']))
		};
		if (this['descriptionEditor'] && this['descriptionEditor']['isDataChanged']()) {
			_0x9f6cx1 = true;
			_0x9f6cx2 && _0x9f6cx2(this['getTabByComponent'](this['descriptionEditor']))
		};
		return _0x9f6cx1
	}
	, updateReadOnly: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['taskBuffer']
			, _0x9f6cx1 = _0x9f6cx5['getReadOnly']()
			, _0x9f6cx3 = _0x9f6cx1 || _0x9f6cx2['isReadOnly']();
		_0x9f6cx5['projectForm'] && _0x9f6cx5['projectForm']['setReadOnly'](_0x9f6cx1)
	}
});
Ext.define('Ext.ux.Gantt.plugin.taskeditor.ProjectEditor', {
	extend: 'Ext.ux.Gantt.plugin.taskeditor.BaseEditor'
	, alternateClassName: ['Ext.ux.Gantt.plugin.ProjectEditor']
	, requires: ['Ext.ux.Gantt.widget.taskeditor.ProjectEditor']
	, alias: 'plugin.gantt_projecteditor'
	, ptype: 'gantt_projecteditor'
	, taskEditorCls: 'Ext.ux.Gantt.widget.taskeditor.ProjectEditor'
	, taskEditorConfigs: 'l10n,task,taskStore,assignmentStore,resourceStore,projectFormClass,showDescription,projectFormConfig,descriptionConfig'
	, constructor: function (_0x9f6cx1) {
		this['callParent'](arguments);
		this['addCls']('gnt-projecteditor-window');
		this['addFilter'](function (_0x9f6cx2) {
			return _0x9f6cx2 && _0x9f6cx2['isProject']
		})
	}
	, init: function (_0x9f6cx1) {
		this['callParent'](arguments);
		_0x9f6cx1['projectEditor'] = this
	}
});
Ext.define('Ext.ux.Gantt.widget.taskeditor.TaskForm', {
	extend: 'Ext.ux.Gantt.widget.taskeditor.BaseForm'
	, alias: 'widget.taskform'
	, requires: ['Ext.ux.Gantt.model.Task', 'Ext.Date', 'Ext.form.FieldSet', 'Ext.form.FieldContainer', 'Ext.form.field.Text', 'Ext.form.field.Date', 'Ext.form.field.Checkbox', 'Ext.ux.Gantt.field.Percent', 'Ext.ux.Gantt.field.StartDate', 'Ext.ux.Gantt.field.EndDate', 'Ext.ux.Gantt.field.Duration', 'Ext.ux.Gantt.field.Effort', 'Ext.ux.Gantt.field.BaselineStartDate', 'Ext.ux.Gantt.field.BaselineEndDate', 'Ext.ux.Gantt.field.BaselineEffort']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alternateClassName: ['Ext.ux.Gantt.widget.TaskForm']
	, showGeneral: true
	, showBaseline: true
	, editBaseline: false
	, nameConfig: null
	, durationConfig: null
	, startConfig: null
	, finishConfig: null
	, percentDoneConfig: null
	, baselineStartConfig: null
	, baselineFinishConfig: null
	, baselinePercentDoneConfig: null
	, baselineEffortConfig: null
	, effortConfig: null
	, constructor: function (_0x9f6cx2) {
		_0x9f6cx2 = _0x9f6cx2 || {};
		this['showBaseline'] = _0x9f6cx2['showBaseline'];
		this['editBaseline'] = _0x9f6cx2['editBaseline'];
		var _0x9f6cx1 = _0x9f6cx2['taskStore'] ? _0x9f6cx2['taskStore']['model']['prototype'] : Ext.ux.Gantt['model']['Task']['prototype'];
		this['fieldNames'] = {
			baselineEndDateField: _0x9f6cx1['baselineEndDateField']
			, baselinePercentDoneField: _0x9f6cx1['baselinePercentDoneField']
			, baselineStartDateField: _0x9f6cx1['baselineStartDateField']
			, baselineEffortField: _0x9f6cx1['baselineEffortField']
			, calendarIdField: _0x9f6cx1['calendarIdField']
			, readOnlyField: _0x9f6cx1['readOnlyField']
			, clsField: _0x9f6cx1['clsField']
			, draggableField: _0x9f6cx1['draggableField']
			, durationField: _0x9f6cx1['durationField']
			, durationUnitField: _0x9f6cx1['durationUnitField']
			, effortField: _0x9f6cx1['effortField']
			, effortUnitField: _0x9f6cx1['effortUnitField']
			, endDateField: _0x9f6cx1['endDateField']
			, manuallyScheduledField: _0x9f6cx1['manuallyScheduledField']
			, nameField: _0x9f6cx1['nameField']
			, percentDoneField: _0x9f6cx1['percentDoneField']
			, resizableField: _0x9f6cx1['resizableField']
			, rollupField: _0x9f6cx1['rollupField']
			, schedulingModeField: _0x9f6cx1['schedulingModeField']
			, startDateField: _0x9f6cx1['startDateField']
			, noteField: _0x9f6cx1['noteField']
			, constraintTypeField: _0x9f6cx1['constraintTypeField']
			, constraintDateField: _0x9f6cx1['constraintDateField']
		};
		this['callParent'](arguments);
		this['addBodyCls']('gnt-taskeditor-taskform')
	}
	, buildFields: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['fieldNames'];
		_0x9f6cx1['items'] = _0x9f6cx1['items'] || [];
		if (_0x9f6cx1['showGeneral']) {
			_0x9f6cx1['items']['push'](_0x9f6cx1['initFieldDefinition']({
				xtype: 'textfield'
				, fieldLabel: _0x9f6cx1.L('taskNameText')
				, name: _0x9f6cx2['nameField']
				, labelWidth: this['labelWidth']
				, allowBlank: false
				, width: '100%'
				, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['nameField'])
			}, _0x9f6cx1['nameConfig']), {
				xtype: 'fieldcontainer'
				, layout: 'hbox'
				, defaults: {
					labelWidth: this['labelWidth']
					, allowBlank: false
				}
				, items: [_0x9f6cx1['initFieldDefinition']({
					xtype: 'percentfield'
					, fieldLabel: _0x9f6cx1.L('percentDoneText')
					, name: _0x9f6cx2['percentDoneField']
					, margin: '0 8 0 0'
					, flex: 1
					, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['percentDoneField'])
				}, _0x9f6cx1['percentDoneConfig']), _0x9f6cx1['initFieldDefinition']({
					xtype: 'durationfield'
					, fieldLabel: _0x9f6cx1.L('durationText')
					, name: _0x9f6cx2['durationField']
					, flex: 1
					, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['durationField'])
				}, _0x9f6cx1['durationConfig'])]
			}, {
				xtype: 'fieldset'
				, title: _0x9f6cx1.L('datesText')
				, layout: 'hbox'
				, items: [{
					xtype: 'container'
					, layout: 'anchor'
					, flex: 1
					, margin: '0 8 0 0'
					, defaults: {
						labelWidth: this['labelWidth']
					}
					, items: [_0x9f6cx1['initFieldDefinition']({
						xtype: 'startdatefield'
						, fieldLabel: _0x9f6cx1.L('startText')
						, width: '100%'
						, allowBlank: true
						, format: Ext['Date']['defaultFormat']
						, name: _0x9f6cx2['startDateField']
						, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['startDateField'])
					}, _0x9f6cx1['startConfig']), _0x9f6cx1['initFieldDefinition']({
						xtype: 'effortfield'
						, fieldLabel: _0x9f6cx1.L('effortText')
						, name: _0x9f6cx2['effortField']
						, invalidText: _0x9f6cx1.L('invalidEffortText')
						, width: '100%'
						, allowBlank: true
						, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['effortField'])
					}, _0x9f6cx1['effortConfig'])]
				}, _0x9f6cx1['initFieldDefinition']({
					xtype: 'enddatefield'
					, fieldLabel: _0x9f6cx1.L('finishText')
					, flex: 1
					, format: Ext['Date']['defaultFormat']
					, labelWidth: this['labelWidth']
					, allowBlank: true
					, name: _0x9f6cx2['endDateField']
					, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['endDateField'])
				}, _0x9f6cx1['finishConfig'])]
			})
		};
		if (_0x9f6cx1['showBaseline']) {
			_0x9f6cx1['items']['push']({
				xtype: 'fieldset'
				, title: _0x9f6cx1.L('baselineText')
				, layout: 'hbox'
				, items: [{
					xtype: 'container'
					, layout: 'anchor'
					, flex: 1
					, margin: '0 8 0 0'
					, defaults: {
						labelWidth: this['labelWidth']
						, cls: 'gnt-baselinefield'
					}
					, items: [_0x9f6cx1['initFieldDefinition']({
						xtype: 'baselinestartdatefield'
						, fieldLabel: _0x9f6cx1.L('baselineStartText')
						, name: _0x9f6cx2['baselineStartDateField']
						, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['baselineStartDateField'])
						, width: '100%'
						, readOnly: !_0x9f6cx1['editBaseline']
						, forceReadOnly: !_0x9f6cx1['editBaseline']
					}, _0x9f6cx1['baselineStartConfig']), _0x9f6cx1['initFieldDefinition']({
						xtype: 'percentfield'
						, fieldLabel: _0x9f6cx1.L('baselinePercentDoneText')
						, width: '100%'
						, name: _0x9f6cx2['baselinePercentDoneField']
						, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['baselinePercentDoneField'])
						, readOnly: !_0x9f6cx1['editBaseline']
						, forceReadOnly: !_0x9f6cx1['editBaseline']
					}, _0x9f6cx1['baselinePercentDoneConfig'])]
				}, {
					xtype: 'container'
					, layout: 'anchor'
					, flex: 1
					, margin: '0 8 0 0'
					, defaults: {
						labelWidth: this['labelWidth']
						, cls: 'gnt-baselinefield'
					}
					, items: [_0x9f6cx1['initFieldDefinition']({
						xtype: 'baselineenddatefield'
						, fieldLabel: _0x9f6cx1.L('baselineFinishText')
						, name: _0x9f6cx2['baselineEndDateField']
						, cls: 'gnt-baselinefield'
						, flex: 1
						, labelWidth: this['labelWidth']
						, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['baselineEndDateField'])
						, readOnly: !_0x9f6cx1['editBaseline']
						, forceReadOnly: !_0x9f6cx1['editBaseline']
					}, _0x9f6cx1['baselineFinishConfig']), _0x9f6cx1['initFieldDefinition']({
						xtype: 'baselineeffortfield'
						, fieldLabel: _0x9f6cx1.L('baselineEffortText')
						, name: _0x9f6cx2['baselineEffortField']
						, cls: 'gnt-baselinefield'
						, flex: 1
						, labelWidth: this['labelWidth']
						, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['baselineEffortField'])
						, readOnly: !_0x9f6cx1['editBaseline']
						, forceReadOnly: !_0x9f6cx1['editBaseline']
					}, _0x9f6cx1['baselineEffortConfig'])]
				}]
			})
		}
	}
	, updateRecordWithFieldValue: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this;
		if (_0x9f6cx5['name'] != _0x9f6cx2['fieldNames']['constraintTypeField'] && _0x9f6cx5['name'] != _0x9f6cx2['fieldNames']['constraintDateField']) {
			return this['callParent'](arguments)
		}
	}
	, updateRecordFn: function (_0x9f6cx2) {
		var _0x9f6cx4 = this
			, _0x9f6cx7 = _0x9f6cx4['fieldNames']
			, _0x9f6cx3 = _0x9f6cx4['getForm']()
			, _0x9f6cx5 = _0x9f6cx3['findField'](_0x9f6cx7['constraintTypeField'])
			, _0x9f6cx1 = _0x9f6cx3['findField'](_0x9f6cx7['constraintDateField']);
		_0x9f6cx2['beginEdit']();
		this['callParent'](arguments);
		if (_0x9f6cx5 && _0x9f6cx1 && _0x9f6cx2['setConstraint']) {
			_0x9f6cx2['setConstraint'](_0x9f6cx5['getValue'](), _0x9f6cx1['getValue']())
		};
		_0x9f6cx2['endEdit']()
	}
	, buildTaskBuffer: function (_0x9f6cx1) {
		this['callParent'](arguments);
		if (!_0x9f6cx1['getReadOnly']() && _0x9f6cx1['isReadOnly']()) {
			this['taskBuffer']['isReadOnly'] = function () {
				return true
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.widget.taskeditor.AdvancedForm', {
	extend: 'Ext.ux.Gantt.widget.taskeditor.TaskForm'
	, alias: 'widget.advanced_taskform'
	, requires: ['Ext.ux.Gantt.model.Task', 'Ext.form.FieldSet', 'Ext.form.FieldContainer', 'Ext.form.field.Text', 'Ext.form.field.Date', 'Ext.ux.Gantt.field.SchedulingMode', 'Ext.ux.Gantt.field.ManuallyScheduled', 'Ext.ux.Gantt.field.Calendar', 'Ext.ux.Gantt.field.ConstraintType', 'Ext.ux.Gantt.field.ConstraintDate', 'Ext.ux.Gantt.field.ReadOnly']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alternateClassName: ['Ext.ux.Gantt.widget.AdvancedForm']
	, border: false
	, margin: 0
	, layout: {
		type: 'table'
		, columns: 2
	}
	, defaults: {
		width: '97%'
	}
	, showGeneral: false
	, showBaseline: false
	, editBaseline: false
	, showCalendar: true
	, showManuallyScheduled: true
	, showSchedulingMode: true
	, showWbsCode: true
	, showRollup: false
	, showConstraint: true
	, showReadOnly: false
	, calendarConfig: null
	, manuallyScheduledConfig: null
	, schedulingModeConfig: null
	, wbsCodeConfig: null
	, rollupConfig: null
	, constraintTypeConfig: null
	, constraintDateConfig: null
	, readOnlyConfig: null
	, constructor: function (_0x9f6cx1) {
		this['callParent'](arguments);
		this['addBodyCls']('gnt-taskeditor-advancedtaskform')
	}
	, buildFields: function () {
		var _0x9f6cx1 = this
			, _0x9f6cx2 = _0x9f6cx1['fieldNames'];
		_0x9f6cx1['items'] = _0x9f6cx1['items'] || [];
		if (_0x9f6cx1['showCalendar']) {
			_0x9f6cx1['items']['push'](_0x9f6cx1['initFieldDefinition']({
				xtype: 'calendarfield'
				, fieldLabel: this.L('calendarText')
				, name: _0x9f6cx2['calendarIdField']
				, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['calendarIdField'])
			}, _0x9f6cx1['calendarConfig']))
		};
		if (_0x9f6cx1['showManuallyScheduled']) {
			_0x9f6cx1['items']['push'](_0x9f6cx1['initFieldDefinition']({
				xtype: 'manuallyscheduledfield'
				, fieldLabel: _0x9f6cx1.L('manuallyScheduledText')
				, name: _0x9f6cx2['manuallyScheduledField']
				, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['manuallyScheduledField'])
			}, _0x9f6cx1['manuallyScheduledConfig']))
		};
		if (_0x9f6cx1['showSchedulingMode']) {
			_0x9f6cx1['items']['push'](_0x9f6cx1['initFieldDefinition']({
				xtype: 'schedulingmodefield'
				, fieldLabel: _0x9f6cx1.L('schedulingModeText')
				, name: _0x9f6cx2['schedulingModeField']
				, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['schedulingModeField'])
				, allowBlank: false
			}, _0x9f6cx1['schedulingModeConfig']))
		};
		if (_0x9f6cx1['showWbsCode']) {
			_0x9f6cx1['items']['push'](_0x9f6cx1['initFieldDefinition']({
				xtype: 'textfield'
				, fieldLabel: _0x9f6cx1.L('wbsCodeText')
				, name: 'wbsCode'
				, forceReadOnly: true
				, readOnly: true
				, value: _0x9f6cx1['task'] && _0x9f6cx1['task']['getWBSCode']()
			}, _0x9f6cx1['wbsCodeConfig']))
		};
		if (_0x9f6cx1['showRollup']) {
			this['items']['push'](_0x9f6cx1['initFieldDefinition']({
				xtype: 'checkboxfield'
				, fieldLabel: this.L('rollupText')
				, name: _0x9f6cx2['rollupField']
				, uncheckedValue: false
				, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['rollupField'])
			}, _0x9f6cx1['rollupConfig']))
		};
		if (_0x9f6cx1['showReadOnly']) {
			this['items']['push'](_0x9f6cx1['initFieldDefinition']({
				xtype: 'readonlyfield'
				, fieldLabel: _0x9f6cx1.L('readOnlyText')
				, name: _0x9f6cx2['readOnlyField']
				, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['readOnlyField'])
			}, _0x9f6cx1['readOnlyConfig']))
		};
		if (_0x9f6cx1['showConstraint']) {
			_0x9f6cx1['items']['push'](_0x9f6cx1['initFieldDefinition']({
				xtype: 'constrainttypefield'
				, fieldLabel: _0x9f6cx1.L('Constraint Type')
				, name: _0x9f6cx2['constraintTypeField']
				, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['constraintTypeField'])
			}, _0x9f6cx1['constraintTypeConfig']), _0x9f6cx1['initFieldDefinition']({
				xtype: 'constraintdatefield'
				, fieldLabel: _0x9f6cx1.L('Constraint Date')
				, name: _0x9f6cx2['constraintDateField']
				, value: _0x9f6cx1['getTaskFieldValue'](_0x9f6cx2['constraintDateField'])
			}, _0x9f6cx1['constraintDateConfig']))
		}
	}
});
Ext.define('Ext.ux.Gantt.widget.AssignmentEditGrid', {
	extend: 'Ext.grid.Panel'
	, alias: 'widget.assignmenteditgrid'
	, requires: ['Ext.util.Filter', 'Ext.data.JsonStore', 'Ext.window.MessageBox', 'Ext.form.field.ComboBox', 'Ext.grid.plugin.CellEditing', 'Ext.ux.Gantt.util.Data', 'Ext.ux.Gantt.data.AssignmentStore', 'Ext.ux.Gantt.data.ResourceStore', 'Ext.ux.Gantt.column.ResourceName', 'Ext.ux.Gantt.column.AssignmentUnits']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, assignmentStore: null
	, resourceStore: null
	, readOnly: false
	, cls: 'gnt-assignmentgrid'
	, defaultAssignedUnits: 100
	, confirmAddResource: true
	, addResources: true
	, taskId: null
	, refreshTimeout: 100
	, resourceDupStore: null
	, resourceComboStore: null
	, assignmentUnitsEditor: null
	, initComponent: function () {
		var _0x9f6cx3 = this;
		var _0x9f6cx7 = this['assignmentStore'];
		var _0x9f6cx2 = this['taskStore'] || _0x9f6cx7['getTaskStore']();
		this['store'] = this['store'] || new _0x9f6cx7['self']({
			model: _0x9f6cx7['model']
			, taskStore: _0x9f6cx2
		});
		var _0x9f6cx5 = _0x9f6cx2['getResourceStore']();
		this['resourceDupStore'] = this['resourceDupStore'] || new _0x9f6cx5['self']({
			model: _0x9f6cx5['model']
			, taskStore: _0x9f6cx2
		});
		this['resourceComboStore'] = new Ext['data'].JsonStore({
			autoDestroy: true
			, model: this['resourceDupStore']['model']
		});
		if (this['addResources'] !== undefined) {
			this['addResources'] = this['addResources']
		};
		this['columns'] = this['buildColumns']();
		if (!this['readOnly']) {
			this['plugins'] = this['buildPlugins']()
		};
		_0x9f6cx3['loadResources']();
		var _0x9f6cx1 = Ext['Function']['createBuffered'](_0x9f6cx3['refreshResources'], _0x9f6cx3['refreshTimeout'], _0x9f6cx3, []);
		_0x9f6cx3['mon'](_0x9f6cx3['resourceStore'], {
			add: _0x9f6cx1
			, remove: _0x9f6cx1
			, load: _0x9f6cx1
			, clear: _0x9f6cx1
		});
		_0x9f6cx3['tbar'] = _0x9f6cx3['tbar'] || [{
			xtype: 'button'
			, iconCls: 'x-fa fa-plus'
			, text: _0x9f6cx3.L('addAssignmentText')
			, itemId: 'add-assignment-btn'
			, handler: function () {
				_0x9f6cx3['insertAssignment']()
			}
		}, {
			xtype: 'button'
			, iconCls: 'x-fa fa-trash'
			, text: _0x9f6cx3.L('dropAssignmentText')
			, itemId: 'drop-assignment-btn'
			, disabled: true
			, handler: function () {
				_0x9f6cx3['setActionableMode'](false);
				var _0x9f6cx8 = _0x9f6cx3['getSelectionModel']()['getSelection']();
				if (_0x9f6cx8 && _0x9f6cx8['length']) {
					var _0x9f6cx6 = _0x9f6cx3['store']['indexOf'](_0x9f6cx8[0]);
					_0x9f6cx3['store']['remove'](_0x9f6cx8);
					if (_0x9f6cx3['store']['getCount']() > 0) {
						_0x9f6cx3['getSelectionModel']()['select']((_0x9f6cx6 === _0x9f6cx3['store']['getCount']()) ? _0x9f6cx6 - 1 : _0x9f6cx6)
					}
				}
			}
		}];
		_0x9f6cx3['loadTaskAssignments']();
		var _0x9f6cx4 = Ext['Function']['createBuffered'](_0x9f6cx3['refreshAssignments'], _0x9f6cx3['refreshTimeout'], _0x9f6cx3, []);
		_0x9f6cx3['mon'](_0x9f6cx3['assignmentStore'], {
			add: _0x9f6cx4
			, remove: _0x9f6cx4
			, load: _0x9f6cx4
			, clear: _0x9f6cx4
		});
		_0x9f6cx3['callParent'](arguments);
		_0x9f6cx3['on']({
			selectionchange: function (_0x9f6cx8, _0x9f6cx6) {
				if (!_0x9f6cx3['dropBtn']) {
					_0x9f6cx3['dropBtn'] = _0x9f6cx3['down']('#drop-assignment-btn')
				};
				_0x9f6cx3['dropBtn'] && _0x9f6cx3['dropBtn']['setDisabled'](!_0x9f6cx6['length'])
			}
		})
	}
	, suspendRefreshResources: function () {
		this['refreshResourcesSuspended']++
	}
	, resumeRefreshResources: function () {
		this['refreshResourcesSuspended']--
	}
	, refreshResources: function () {
		if (!this['refreshResourcesSuspended'] && !this['isDestroyed']) {
			this['loadResources']()
		}
	}
	, suspendRefreshAssignments: function () {
		this['refreshAssignmentsSuspended']++
	}
	, resumeRefreshAssignments: function () {
		this['refreshAssignmentsSuspended']--
	}
	, refreshAssignments: function () {
		if (!this['refreshAssignmentsSuspended'] && !this['isDestroyed']) {
			this['loadTaskAssignments']()
		}
	}
	, loadResources: function (_0x9f6cx2) {
		if (!this['resourceStore']) {
			return false
		};
		var _0x9f6cx1 = Ext.ux.Gantt['util']['Data']['cloneModelSet'](this['resourceStore']);
		this['resourceDupStore']['loadData'](_0x9f6cx1);
		this['resourceComboStore']['loadData'](_0x9f6cx1);
		if (!_0x9f6cx2) {
			this['loadTaskAssignments']()
		};
		return true
	}
	, afterRender: function () {
		var _0x9f6cx1;
		this['callParent'](arguments);
		if (this['taskId']) {
			var _0x9f6cx2 = this['taskStore'] || this['assignmentStore']['getTaskStore']();
			_0x9f6cx1 = _0x9f6cx2 && _0x9f6cx2['getModelById'](this['taskId'])
		};
		if (_0x9f6cx1) {
			this['setEditableFields'](_0x9f6cx1)
		}
	}
	, getUnitsEditor: function () {
		if (!this['readOnly']) {
			if (!this['assignmentUnitsEditor']) {
				this['assignmentUnitsEditor'] = this['down']('assignmentunitscolumn')['getEditor']()
			}
		};
		return this['assignmentUnitsEditor']
	}
	, setEditableFields: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['getUnitsEditor']();
		if (_0x9f6cx2) {
			switch (_0x9f6cx1['getSchedulingMode']()) {
			case 'DynamicAssignment':
				_0x9f6cx2['setReadOnly'](true);
				break;
			default:
				_0x9f6cx2['setReadOnly'](false)
			}
		}
	}
	, setReadOnly: function (_0x9f6cx1) {
		if (this['cellEditing']) {
			if (_0x9f6cx1) {
				this['cellEditing']['disable']()
			}
			else {
				this['cellEditing']['enable']()
			}
		}
	}
	, loadTaskAssignments: function (_0x9f6cx3) {
		_0x9f6cx3 = _0x9f6cx3 || this['taskId'];
		if (!_0x9f6cx3) {
			return false
		};
		var _0x9f6cx5 = this['taskStore'] || this['assignmentStore']['getTaskStore']()
			, _0x9f6cx2 = _0x9f6cx5 && _0x9f6cx5['getModelById'](_0x9f6cx3)
			, _0x9f6cx6;
		if (_0x9f6cx2) {
			_0x9f6cx6 = _0x9f6cx2['getAssignments']()
		}
		else {
			if (!this['assignmentStore']) {
				return false
			};
			_0x9f6cx6 = this['assignmentStore']['queryBy'](function (_0x9f6cx8) {
				return _0x9f6cx8['getTaskId']() == _0x9f6cx3
			})
		};
		this['taskId'] = _0x9f6cx3;
		var _0x9f6cx1 = this['store']
			, _0x9f6cx4 = this['resourceDupStore']
			, _0x9f6cx7 = Ext.ux.Gantt['util']['Data']['cloneModelSet'](_0x9f6cx6, function (_0x9f6cx9, _0x9f6cx8) {
				var _0x9f6cxa = _0x9f6cx8['getResourceId']();
				var _0x9f6cxc = _0x9f6cx4['queryBy'](function (_0x9f6cxb) {
					var _0x9f6cx13 = _0x9f6cxb['originalRecord'];
					return (_0x9f6cx13['getId']() || _0x9f6cx13['internalId']) == _0x9f6cxa
				});
				if (_0x9f6cxc['getCount']()) {
					_0x9f6cxc = _0x9f6cxc['first']();
					_0x9f6cx9['setResourceId'](_0x9f6cxc['getId']() || _0x9f6cxc['internalId'])
				}
			});
		_0x9f6cx1['loadData'](_0x9f6cx7);
		if (_0x9f6cx2 && this['rendered']) {
			this['setEditableFields'](_0x9f6cx2)
		};
		return true
	}
	, insertAssignment: function (_0x9f6cx2, _0x9f6cx3) {
		if (!_0x9f6cx2 || !_0x9f6cx2['isModel']) {
			_0x9f6cx2 = new this['store']['model'](_0x9f6cx2);
			if (!_0x9f6cx2) {
				_0x9f6cx2['setUnits'](this['defaultAssignedUnits'])
			}
		};
		if (_0x9f6cx2['getResourceId']() === undefined) {
			_0x9f6cx2['setResourceId'](null)
		};
		_0x9f6cx2['setTaskId'](this['taskId']);
		this['store']['insert'](0, _0x9f6cx2);
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx2['isValid'];
		_0x9f6cx2['isValid'] = function () {
			return _0x9f6cx1['apply'](this, arguments) && _0x9f6cx5['isValidAssignment'](this)
		};
		if (!_0x9f6cx3 && this['cellEditing']) {
			this['cellEditing']['startEditByPosition']({
				row: 0
				, column: 0
			})
		};
		return _0x9f6cx2
	}
	, isValid: function () {
		var _0x9f6cx1 = true;
		this['store']['each'](function (_0x9f6cx2) {
			if (!_0x9f6cx2['isValid']()) {
				_0x9f6cx1 = false;
				return false
			}
		});
		return _0x9f6cx1
	}
	, getAssignmentErrors: function (_0x9f6cx2) {
		var _0x9f6cx1 = this
			, _0x9f6cx3 = []
			, _0x9f6cx5 = _0x9f6cx2['getResourceId']();
		if (!_0x9f6cx5) {
			_0x9f6cx3['push'](_0x9f6cx1.L('noValueText'))
		}
		else {
			if (!_0x9f6cx1['resourceDupStore']['getModelById'](_0x9f6cx5)) {
				_0x9f6cx3['push'](Ext['String']['format'](_0x9f6cx1.L('noResourceText'), _0x9f6cx5))
			}
			else {
				_0x9f6cx1['store']['each'](function (_0x9f6cx4) {
					if (_0x9f6cx4['getResourceId']() == _0x9f6cx5 && _0x9f6cx4 !== _0x9f6cx2) {
						_0x9f6cx3['push'](_0x9f6cx1.L('Resource is already assigned'));
						return false
					}
				})
			}
		};
		return _0x9f6cx3
	}
	, isValidAssignment: function (_0x9f6cx1) {
		return !this['getAssignmentErrors'](_0x9f6cx1)['length']
	}
	, buildPlugins: function () {
		var _0x9f6cx1 = this['cellEditing'] = new Ext['grid']['plugin'].CellEditing({
			clicksToEdit: 1
		});
		var _0x9f6cx2 = _0x9f6cx1['startEdit'];
		_0x9f6cx1['startEdit'] = function () {
			this['completeEdit']();
			return _0x9f6cx2['apply'](this, arguments)
		};
		_0x9f6cx1['on']({
			beforeedit: this['onEditingStart']
			, scope: this
		});
		return [_0x9f6cx1]
	}
	, hide: function () {
		this['cellEditing']['cancelEdit']();
		return this['callParent'](arguments)
	}
	, onEditingStart: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this['store']['model']['prototype'];
		if (_0x9f6cx5['field'] == _0x9f6cx2['resourceIdField']) {
			this['assignment'] = _0x9f6cx5['record'];
			this['resourceId'] = _0x9f6cx5['record']['getResourceId']();
			this['resourceComboStore']['loadData'](this['resourceDupStore']['getRange']());
			this['resourceComboStore']['filter'](this['resourcesFilter'])
		}
	}
	, resourceRender: function (_0x9f6cx2, _0x9f6cx5, _0x9f6cx3) {
		var _0x9f6cx4 = this['getAssignmentErrors'](_0x9f6cx3);
		if (_0x9f6cx4 && _0x9f6cx4['length']) {
			_0x9f6cx5['tdCls'] = 'gnt-cell-invalid';
			_0x9f6cx5['tdAttr'] = 'data-errorqtip="' + _0x9f6cx4.join('<br>') + '"'
		}
		else {
			_0x9f6cx5['tdCls'] = '';
			_0x9f6cx5['tdAttr'] = 'data-errorqtip=""'
		};
		var _0x9f6cx1 = this['resourceDupStore']['getModelById'](_0x9f6cx2);
		return Ext['String']['htmlEncode']((_0x9f6cx1 && _0x9f6cx1['getName']()) || _0x9f6cx2)
	}
	, filterResources: function (_0x9f6cx5) {
		var _0x9f6cx3 = _0x9f6cx5['getId']()
			, _0x9f6cx2 = this['store']['model']['prototype']['resourceIdField']
			, _0x9f6cx1 = true;
		if (_0x9f6cx3 !== this['resourceId']) {
			this['store']['each'](function (_0x9f6cx4) {
				if (_0x9f6cx3 == _0x9f6cx4['get'](_0x9f6cx2)) {
					_0x9f6cx1 = false;
					return false
				}
			})
		};
		return _0x9f6cx1
	}
	, onResourceComboAssert: function (_0x9f6cx5) {
		var _0x9f6cx4 = _0x9f6cx5['getRawValue']();
		if (_0x9f6cx4) {
			var _0x9f6cx8 = this['resourceDupStore']['findExact'](_0x9f6cx5['displayField'], _0x9f6cx4);
			var _0x9f6cx7 = _0x9f6cx8 !== -1 ? this['resourceDupStore']['getAt'](_0x9f6cx8) : false;
			if (!_0x9f6cx7) {
				var _0x9f6cx2 = this['assignment'];
				var _0x9f6cx6 = this;
				var _0x9f6cx1 = function (_0x9f6cxa) {
					var _0x9f6cx13 = _0x9f6cx6['resourceStore']['model']
						, _0x9f6cxc = {};
					_0x9f6cxc[_0x9f6cx13['prototype']['nameField']] = _0x9f6cx4;
					_0x9f6cxc = new _0x9f6cx13(_0x9f6cxc);
					_0x9f6cxc['setId'](_0x9f6cxc['internalId']);
					var _0x9f6cxb = _0x9f6cx6['resourceDupStore']['add'](_0x9f6cxc);
					if (_0x9f6cxb && _0x9f6cxb['length']) {
						if (!_0x9f6cxa) {
							_0x9f6cx5['getStore']()['add'](_0x9f6cxc);
							_0x9f6cx5['setValue'](_0x9f6cxb[0]['getId']())
						}
						else {
							_0x9f6cx2['setResourceId'](_0x9f6cxb[0]['getId']())
						}
					}
				};
				if (this['confirmAddResource']) {
					var _0x9f6cx9 = Ext['String']['format'](this.L('confirmAddResourceText'), Ext['String']['htmlEncode'](_0x9f6cx4));
					var _0x9f6cx3 = Ext['Msg']['confirm'](this.L('confirmAddResourceTitle'), _0x9f6cx9, function (_0x9f6cxc) {
						if (_0x9f6cxc == 'yes') {
							_0x9f6cx1(true)
						}
					});
					setTimeout(function () {
						_0x9f6cx3['toFront']()
					}, 1)
				}
				else {
					_0x9f6cx1()
				}
			}
			else {
				_0x9f6cx5['select'](_0x9f6cx7, true)
			}
		}
	}
	, buildColumns: function () {
		var _0x9f6cx1 = this;
		this['resourceCombo'] = new Ext['form']['field'].ComboBox({
			queryMode: 'local'
			, store: this['resourceComboStore']
			, allowBlank: false
			, editing: this['addResources']
			, validateOnChange: false
			, autoSelect: false
			, forceSelection: !this['addResources']
			, valueField: this['resourceComboStore']['model']['prototype']['idProperty']
			, displayField: this['resourceComboStore']['model']['prototype']['nameField']
			, queryCaching: false
			, listConfig: {
				getInnerTpl: function () {
					return '{' + this['displayField'] + ':htmlEncode}'
				}
			}
		});
		this['resourcesFilter'] = new Ext['util'].Filter({
			filterFn: this['filterResources']
			, scope: this
		});
		if (this['addResources']) {
			Ext['Function']['interceptBefore'](this['resourceCombo'], 'assertValue', function () {
				_0x9f6cx1['onResourceComboAssert'](this)
			})
		};
		return [{
			xtype: 'resourcenamecolumn'
			, editor: this['resourceCombo']
			, dataIndex: this['assignmentStore']['model']['prototype']['resourceIdField']
			, renderer: this['resourceRender']
			, scope: this
		}, {
			xtype: 'assignmentunitscolumn'
			, assignmentStore: this['assignmentStore']
			, dataIndex: this['assignmentStore']['model']['prototype']['unitsField']
		}]
	}
	, saveResources: function () {
		Ext.ux.Gantt['util']['Data']['applyCloneChanges'](this['resourceDupStore'], this['resourceStore'])
	}
	, saveTaskAssignments: function () {
		this['suspendRefreshAssignments']();
		this['suspendRefreshResources']();
		this['saveResources']();
		var _0x9f6cx2 = this['store']['model']
			, _0x9f6cx5 = this['resourceDupStore']
			, _0x9f6cx1 = true;
		Ext.ux.Gantt['util']['Data']['applyCloneChanges'](this['store'], this['assignmentStore'], function (_0x9f6cx7) {
			var _0x9f6cx4 = _0x9f6cx5['getById'](this['getResourceId']());
			if (!_0x9f6cx4 || !_0x9f6cx4['originalRecord']) {
				_0x9f6cx1 = false;
				return
			};
			var _0x9f6cx3 = _0x9f6cx4['originalRecord'];
			_0x9f6cx7[_0x9f6cx2['prototype']['resourceIdField']] = _0x9f6cx3['getId']() || _0x9f6cx3['internalId']
		});
		this['resumeRefreshAssignments']();
		this['resumeRefreshResources']();
		return _0x9f6cx1
	}
	, isDataChanged: function () {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['store'] && _0x9f6cx1['store']['getUpdatedRecords']()['length'] > 0 || _0x9f6cx1['store']['getNewRecords']()['length'] > 0 || _0x9f6cx1['store']['getRemovedRecords']()['length'] > 0
	}
	, isDataValid: function () {
		var _0x9f6cx1 = true;
		this['store']['each'](function (_0x9f6cx2) {
			if (!_0x9f6cx2['isValid']()) {
				_0x9f6cx1 = false;
				return false
			}
		});
		return _0x9f6cx1
	}
});
Ext.define('Ext.ux.Gantt.widget.DependencyGrid', {
	extend: 'Ext.grid.Panel'
	, alias: 'widget.dependencygrid'
	, requires: ['Ext.data.JsonStore', 'Ext.grid.plugin.CellEditing', 'Ext.form.field.ComboBox', 'Ext.util.Filter', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Gantt.model.Dependency', 'Ext.ux.Gantt.util.Data', 'Ext.ux.Gantt.field.Duration']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, readOnly: false
	, showCls: false
	, cls: 'gnt-dependencygrid'
	, task: null
	, dependencyStore: null
	, taskModel: null
	, direction: 'predecessors'
	, oppositeStore: null
	, taskStoreListeners: null
	, refreshTimeout: 100
	, dependencyModel: 'Ext.ux.Gantt.model.Dependency'
	, allowParentTaskDependencies: false
	, useSequenceNumber: false
	, lagEditor: null
	, typesCombo: null
	, margin: 0
	, border: false
	, initComponent: function () {
		var _0x9f6cx2 = this;
		if (!_0x9f6cx2['readOnly']) {
			_0x9f6cx2['plugins'] = _0x9f6cx2['buildPlugins']()
		};
		if (!_0x9f6cx2['taskModel']) {
			if (_0x9f6cx2['dependencyStore']) {
				var _0x9f6cx1 = _0x9f6cx2['dependencyStore']['getTaskStore']();
				if (_0x9f6cx1) {
					_0x9f6cx2['taskModel'] = _0x9f6cx1['getModel']()
				}
				else {
					_0x9f6cx2['taskModel'] = Ext.ux.Gantt['model']['Task']
				}
			}
			else {
				_0x9f6cx2['taskModel'] = Ext.ux.Gantt['model']['Task']
			}
		};
		if (_0x9f6cx2['oppositeStore']) {
			_0x9f6cx2['setOppositeStore'](_0x9f6cx2['oppositeStore'])
		};
		_0x9f6cx2['store'] = _0x9f6cx2['store'] || new Ext['data'].JsonStore({
			autoDestroy: true
			, model: _0x9f6cx2['dependencyModel']
		});
		if (_0x9f6cx2['task']) {
			_0x9f6cx2['setTask'](_0x9f6cx2['task']);
			_0x9f6cx2['loadDependencies'](_0x9f6cx2['task'])
		};
		if (!_0x9f6cx2['title']) {
			_0x9f6cx2['title'] = _0x9f6cx2['direction'] === 'predecessors' ? _0x9f6cx2.L('predecessorsText') : _0x9f6cx2.L('successorsText')
		};
		_0x9f6cx2['columns'] = _0x9f6cx2['buildColumns']();
		_0x9f6cx2['tbar'] = _0x9f6cx2['tbar'] || [{
			iconCls: 'x-fa fa-plus'
			, text: _0x9f6cx2.L('addDependencyText')
			, itemId: 'add-dependency-btn'
			, handler: function () {
				_0x9f6cx2['insertDependency']()
			}
		}, {
			iconCls: 'x-fa fa-trash'
			, text: _0x9f6cx2.L('dropDependencyText')
			, itemId: 'drop-dependency-btn'
			, disabled: true
			, handler: function () {
				var _0x9f6cx4 = _0x9f6cx2['getSelectionModel']()['getSelection']();
				if (_0x9f6cx4 && _0x9f6cx4['length']) {
					var _0x9f6cx5 = _0x9f6cx2['store'];
					var _0x9f6cx3 = _0x9f6cx5['indexOf'](_0x9f6cx4[0]);
					_0x9f6cx2['cancelEdit']();
					_0x9f6cx5['remove'](_0x9f6cx4);
					if (_0x9f6cx5['getCount']() > 0) {
						_0x9f6cx2['getSelectionModel']()['select']((_0x9f6cx3 === _0x9f6cx5['getCount']()) ? _0x9f6cx3 - 1 : _0x9f6cx3)
					}
				}
			}
		}];
		_0x9f6cx2['callParent'](arguments);
		_0x9f6cx2['on']({
			selectionchange: function (_0x9f6cx3, _0x9f6cx5) {
				if (!_0x9f6cx2['dropDepBtn']) {
					_0x9f6cx2['dropDepBtn'] = _0x9f6cx2['down']('#drop-dependency-btn')
				};
				_0x9f6cx2['dropDepBtn'] && _0x9f6cx2['dropDepBtn']['setDisabled'](!_0x9f6cx5['length'])
			}
			, scope: _0x9f6cx2
		})
	}
	, destroy: function () {
		if (this['deferredStoreBind']) {
			this['tasksCombo']['un']('render', this['bindTaskStore'], this)
		};
		this['cellEditing']['destroy']();
		this['tasksCombo']['destroy']();
		this['typesCombo']['destroy']();
		this['lagEditor']['destroy']();
		this['callParent'](arguments)
	}
	, setTask: function (_0x9f6cx1) {
		if (!_0x9f6cx1) {
			return
		};
		this['task'] = _0x9f6cx1;
		var _0x9f6cx2 = _0x9f6cx1['dependencyStore'] || _0x9f6cx1['getTaskStore']()['dependencyStore'];
		if (_0x9f6cx2 && _0x9f6cx2 !== this['dependencyStore']) {
			if (this['dependencyStore']) {
				this['mun'](this['dependencyStore'], this['onDependencyStoreDataChanged'], this)
			};
			this['dependencyStore'] = _0x9f6cx2;
			if (this['typesCombo']) {
				this['typesCombo']['store']['filter'](this['typesFilter'])
			};
			this['mon'](this['dependencyStore'], this['onDependencyStoreDataChanged'], this)
		};
		this['setReadOnly'](_0x9f6cx1['isReadOnly']())
	}
	, setReadOnly: function (_0x9f6cx1) {
		if (this['cellEditing']) {
			if (_0x9f6cx1) {
				this['cellEditing']['disable']()
			}
			else {
				this['cellEditing']['enable']()
			}
		};
		if (this['items']) {
			this['down']('toolbar')['setVisible'](!_0x9f6cx1)
		}
	}
	, onDependencyStoreDataChanged: function () {
		this['loadDependencies']()
	}
	, buildPlugins: function () {
		var _0x9f6cx1 = this['cellEditing'] = new Ext['grid']['plugin'].CellEditing({
			clicksToEdit: 1
		});
		_0x9f6cx1['on']({
			beforeedit: this['onEditingStart']
			, edit: this['onEditingDone']
			, scope: this
		});
		return [_0x9f6cx1]
	}
	, hide: function () {
		this['cancelEdit']();
		this['callParent'](arguments)
	}
	, cancelEdit: function () {
		this['cellEditing']['cancelEdit']()
	}
	, onEditingStart: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this['store']['model']['prototype'];
		switch (_0x9f6cx5['field']) {
		case _0x9f6cx2['lagField']:
			this['lagEditor']['durationUnit'] = _0x9f6cx5['record']['getLagUnit']();
			break;
		case _0x9f6cx2['typeField']:
			this['typesCombo']['store']['filter'](this['typesFilter']);
			if (this['typesCombo']['store']['count']() < 2) {
				return false
			};
			break;
		case _0x9f6cx2['fromField']:
			if (this['direction'] == 'predecessors') {
				this['activeDependency'] = _0x9f6cx5['record'];
				this['refilterTasksCombo']()
			};
			break;
		case _0x9f6cx2['toField']:
			if (this['direction'] != 'predecessors') {
				this['activeDependency'] = _0x9f6cx5['record'];
				this['refilterTasksCombo']()
			};
			break
		}
	}
	, onEditingDone: function (_0x9f6cx1, _0x9f6cx5) {
		var _0x9f6cx2 = this['store']['model']['prototype'];
		if (_0x9f6cx5['field'] == _0x9f6cx2['lagField']) {
			_0x9f6cx5['record']['setLagUnit'](this['lagEditor']['durationUnit'])
		};
		this['getView']()['refreshView']()
	}
	, dependencyTypeRender: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['store']['model']['Type'];
		switch (_0x9f6cx2) {
		case _0x9f6cx1['EndToStart']:
			return this.L('endToStartText');
		case _0x9f6cx1['StartToStart']:
			return this.L('startToStartText');
		case _0x9f6cx1['EndToEnd']:
			return this.L('endToEndText');
		case _0x9f6cx1['StartToEnd']:
			return this.L('startToEndText')
		};
		return _0x9f6cx2
	}
	, taskValidate: function (_0x9f6cx2, _0x9f6cx1) {
		if (!_0x9f6cx2) {
			return [this.L('blankTaskText')]
		};
		if (!_0x9f6cx1['isValid']()) {
			var _0x9f6cx5 = this['getDependencyErrors'](_0x9f6cx1);
			if (_0x9f6cx5 && _0x9f6cx5['length']) {
				return _0x9f6cx5
			};
			return [this.L('invalidDependencyText')]
		}
	}
	, taskRender: function (_0x9f6cx3, _0x9f6cx4, _0x9f6cx2) {
		var _0x9f6cx7 = this['taskValidate'](_0x9f6cx3, _0x9f6cx2)
			, _0x9f6cx1;
		if (_0x9f6cx7 && _0x9f6cx7['length']) {
			_0x9f6cx4['tdCls'] = 'gnt-cell-invalid';
			_0x9f6cx4['tdAttr'] = 'data-errorqtip="' + _0x9f6cx7.join('<br>') + '"'
		}
		else {
			_0x9f6cx4['tdCls'] = '';
			_0x9f6cx4['tdAttr'] = 'data-errorqtip=""'
		};
		var _0x9f6cx5 = this['dependencyStore'] && this['dependencyStore']['getTaskStore']();
		if (_0x9f6cx5) {
			_0x9f6cx1 = _0x9f6cx5['getModelById'](_0x9f6cx3);
			return (_0x9f6cx1 && Ext['String']['htmlEncode'](_0x9f6cx1['getName']())) || ''
		};
		return ''
	}
	, filterTasks: function (_0x9f6cx5) {
		var _0x9f6cx4 = _0x9f6cx5['getId']()
			, _0x9f6cx2, _0x9f6cx3, _0x9f6cx1;
		if (this['direction'] === 'predecessors') {
			_0x9f6cx3 = _0x9f6cx4;
			_0x9f6cx1 = this['task']['getId']();
			_0x9f6cx2 = this['activeDependency'] && this['activeDependency']['getSourceId']()
		}
		else {
			_0x9f6cx1 = _0x9f6cx4;
			_0x9f6cx3 = this['task']['getId']();
			_0x9f6cx2 = this['activeDependency'] && this['activeDependency']['getTargetId']()
		};
		return !this['activeDependency'] || _0x9f6cx4 == _0x9f6cx2 || this['isValidDependency'](_0x9f6cx3, _0x9f6cx1)
	}
	, refilterTasksCombo: function () {
		this['tasksCombo']['getStore']()['addFilter'](this['tasksFilter'])
	}
	, bindTaskStore: function () {
		var _0x9f6cx5 = this['dependencyStore'] && this['dependencyStore']['getTaskStore']();
		if (_0x9f6cx5) {
			if (!this['taskStoreListeners']) {
				var _0x9f6cx3 = Ext['Function']['createBuffered'](this['bindTaskStore'], this['refreshTimeout'], this, []);
				this['taskStoreListeners'] = this['mon'](_0x9f6cx5, {
					nodeappend: _0x9f6cx3
					, nodeinsert: _0x9f6cx3
					, noderemove: _0x9f6cx3
					, update: _0x9f6cx3
					, refresh: _0x9f6cx3
					, clear: _0x9f6cx3
					, "nodestore-datachange-end": _0x9f6cx3
					, scope: this
					, destroyable: true
				})
			};
			var _0x9f6cx2 = new Ext['data'].JsonStore({
				autoDestroy: true
				, model: _0x9f6cx5['model']
				, sorters: _0x9f6cx5['model']['prototype']['nameField']
			});
			var _0x9f6cx1 = _0x9f6cx5['getRoot']();
			_0x9f6cx2['loadData'](Ext.ux.Gantt['util']['Data']['cloneModelSet'](_0x9f6cx5['toArray'](), function (_0x9f6cx7, _0x9f6cx4) {
				if (_0x9f6cx4 === _0x9f6cx1 || _0x9f6cx4['hidden'] || _0x9f6cx4['isReadOnly']()) {
					return false
				};
				if (!_0x9f6cx4['getId']()) {
					_0x9f6cx7['setId'](_0x9f6cx4['getId']())
				}
			}));
			this['tasksFilter'] = new Ext['util'].Filter({
				id: 'dependencygrid-tasksfilter'
				, filterFn: this['filterTasks']
				, scope: this
			});
			_0x9f6cx2['filter'](this['tasksFilter']);
			this['tasksCombo']['bindStore'](_0x9f6cx2)
		}
	}
	, buildTasksCombo: function () {
		var _0x9f6cx1 = this;
		return new Ext['form']['field'].ComboBox({
			queryMode: 'local'
			, allowBlank: false
			, editing: false
			, forceSelection: true
			, valueField: this['taskModel']['prototype']['idProperty']
			, displayField: this['taskModel']['prototype']['nameField']
			, queryCaching: false
			, listConfig: {
				getInnerTpl: function () {
					return '{' + this['displayField'] + ':htmlEncode}'
				}
			}
			, validator: function (_0x9f6cx2) {
				if (!_0x9f6cx2) {
					return _0x9f6cx1.L('blankTaskText')
				};
				return true
			}
		})
	}
	, filterAllowedTypes: function (_0x9f6cx2) {
		if (!this['dependencyStore'] || !this['dependencyStore']['allowedDependencyTypes']) {
			return true
		};
		var _0x9f6cx4 = this['dependencyStore']['allowedDependencyTypes'];
		var _0x9f6cx7 = this['store']['model']['Type'];
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx4['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			var _0x9f6cx3 = _0x9f6cx7[_0x9f6cx4[_0x9f6cx5]];
			if (_0x9f6cx2['getId']() == _0x9f6cx3) {
				return true
			}
		};
		return false
	}
	, buildTypesCombo: function () {
		var _0x9f6cx2 = this['store']['model']['Type'];
		this['typesFilter'] = new Ext['util'].Filter({
			id: 'typesfilter'
			, filterFn: this['filterAllowedTypes']
			, scope: this
		});
		var _0x9f6cx1 = new Ext['data'].ArrayStore({
			fields: [{
				name: 'id'
				, type: 'int'
			}, 'text']
			, data: [[_0x9f6cx2['EndToStart'], this.L('endToStartText')], [_0x9f6cx2['StartToStart'], this.L('startToStartText')], [_0x9f6cx2['EndToEnd'], this.L('endToEndText')], [_0x9f6cx2['StartToEnd'], this.L('startToEndText')]]
		});
		_0x9f6cx1['filter'](this['typesFilter']);
		return new Ext['form']['field'].ComboBox({
			triggerAction: 'all'
			, queryMode: 'local'
			, editable: false
			, valueField: 'id'
			, displayField: 'text'
			, store: _0x9f6cx1
		})
	}
	, buildLagEditor: function () {
		return new Ext.ux.Gantt['field'].Duration({
			minValue: Number['NEGATIVE_INFINITY']
		})
	}
	, buildColumns: function () {
		var _0x9f6cx3 = this
			, _0x9f6cx5 = this['store']['model']['prototype']
			, _0x9f6cx1 = []
			, _0x9f6cx2 = this['dependencyStore'] && this['dependencyStore']['getTaskStore']();
		this['tasksCombo'] = this['buildTasksCombo']();
		if (!_0x9f6cx2) {
			this['deferredStoreBind'] = true;
			this['tasksCombo']['on']('afterrender', this['bindTaskStore'], this)
		}
		else {
			this['bindTaskStore']()
		};
		var _0x9f6cx4 = _0x9f6cx5[this['direction'] === 'predecessors' ? 'fromField' : 'toField'];
		if (this['useSequenceNumber']) {
			_0x9f6cx1['push']({
				text: this.L('snText')
				, dataIndex: _0x9f6cx4
				, renderer: function (_0x9f6cx9, _0x9f6cxc, _0x9f6cx7) {
					var _0x9f6cx6 = _0x9f6cx3['dependencyStore'] && _0x9f6cx3['dependencyStore']['getTaskStore']()
						, _0x9f6cx8 = _0x9f6cx6 && _0x9f6cx6['getModelById'](_0x9f6cx7['get']('From'));
					return _0x9f6cx8 ? _0x9f6cx8['getSequenceNumber']() : ''
				}
				, width: 50
			})
		}
		else {
			_0x9f6cx1['push']({
				text: this.L('idText')
				, dataIndex: _0x9f6cx4
				, width: 50
			})
		};
		_0x9f6cx1['push']({
			text: this.L('taskText')
			, dataIndex: _0x9f6cx4
			, flex: 1
			, editor: this['tasksCombo']
			, renderer: function (_0x9f6cx6, _0x9f6cx8, _0x9f6cx7) {
				return _0x9f6cx3['taskRender'](_0x9f6cx6, _0x9f6cx8, _0x9f6cx7)
			}
		});
		this['lagEditor'] = this['buildLagEditor']();
		this['typesCombo'] = this['buildTypesCombo']();
		_0x9f6cx1['push']({
			text: this.L('typeText')
			, dataIndex: _0x9f6cx5['typeField']
			, width: 120
			, renderer: this['dependencyTypeRender']
			, scope: this
			, editor: this['typesCombo']
		}, {
			text: this.L('lagText')
			, dataIndex: _0x9f6cx5['lagField']
			, width: 100
			, editor: this['lagEditor']
			, renderer: function (_0x9f6cx6, _0x9f6cx8, _0x9f6cx7) {
				return _0x9f6cx3['lagEditor']['valueToVisible'](_0x9f6cx6, _0x9f6cx7['get'](_0x9f6cx5['lagUnitField']), 2)
			}
		}, {
			text: this.L('clsText')
			, dataIndex: _0x9f6cx5['clsField']
			, hidden: !this['showCls']
			, width: 100
		});
		return _0x9f6cx1
	}
	, insertDependency: function (_0x9f6cx2, _0x9f6cx8) {
		if (!this['dependencyStore']) {
			return
		};
		var _0x9f6cx4 = this['task']['getId']()
			, _0x9f6cx3 = this['store']['model']['prototype']
			, _0x9f6cx5 = {}
			, _0x9f6cx6 = this;
		if (_0x9f6cx2) {
			_0x9f6cx5 = _0x9f6cx2
		}
		else {
			_0x9f6cx5[_0x9f6cx3['typeField']] = this['typesCombo']['store']['getAt'](0)['getId']();
			_0x9f6cx5[_0x9f6cx3['lagField']] = 0;
			_0x9f6cx5[_0x9f6cx3['lagUnitField']] = Ext.ux.Scheduler['util']['Date']['DAY']
		};
		if (this['direction'] === 'predecessors') {
			_0x9f6cx5[_0x9f6cx3['toField']] = _0x9f6cx4
		}
		else {
			_0x9f6cx5[_0x9f6cx3['fromField']] = _0x9f6cx4
		};
		var _0x9f6cx7 = this['store']['insert'](0, _0x9f6cx5);
		if (_0x9f6cx7['length']) {
			var _0x9f6cx1 = _0x9f6cx7[0]['isValid'];
			_0x9f6cx7[0]['isValid'] = function () {
				return _0x9f6cx1['call'](this, false) && _0x9f6cx6['isValidDependency'](this)
			}
		};
		if (!_0x9f6cx8) {
			this['cellEditing']['startEditByPosition']({
				row: 0
				, column: 1
			})
		};
		return _0x9f6cx7
	}
	, onOppositeStoreChange: function () {
		this['getView']()['refreshView']()
	}
	, setOppositeStore: function (_0x9f6cx1) {
		var _0x9f6cx2 = {
			update: this['onOppositeStoreChange']
			, datachanged: this['onOppositeStoreChange']
			, scope: this
		};
		if (this['oppositeStore']) {
			this['mun'](this['oppositeStore'], _0x9f6cx2)
		};
		this['oppositeStore'] = _0x9f6cx1;
		this['mon'](this['oppositeStore'], _0x9f6cx2)
	}
	, loadDependencies: function (_0x9f6cx2) {
		var _0x9f6cx5 = this;
		_0x9f6cx2 = _0x9f6cx2 || this['task'];
		if (!_0x9f6cx2) {
			return
		};
		if (this['task'] !== _0x9f6cx2) {
			this['setTask'](_0x9f6cx2)
		};
		var _0x9f6cx3;
		if (this['direction'] === 'predecessors') {
			_0x9f6cx3 = _0x9f6cx2['getIncomingDependencies'](true);
			if (!this['oppositeStore']) {
				this['oppositeData'] = _0x9f6cx2['getOutgoingDependencies'](true)
			}
		}
		else {
			_0x9f6cx3 = _0x9f6cx2['getOutgoingDependencies'](true);
			if (!this['oppositeStore']) {
				this['oppositeData'] = _0x9f6cx2['getIncomingDependencies'](true)
			}
		};
		var _0x9f6cx1 = Ext.ux.Gantt['util']['Data']['cloneModelSet'](_0x9f6cx3, function (_0x9f6cx7) {
			var _0x9f6cx4 = _0x9f6cx7['isValid'];
			_0x9f6cx7['isValid'] = function () {
				return _0x9f6cx4['call'](this, false) && _0x9f6cx5['isValidDependency'](this)
			}
		});
		this['store']['loadData'](_0x9f6cx1);
		this['fireEvent']('loaddependencies', this, this['store'], _0x9f6cx1, _0x9f6cx2)
	}
	, getDependencyErrors: function (_0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx7 = this
			, _0x9f6cx9 = _0x9f6cx7['dependencyStore']
			, _0x9f6cx8 = []
			, _0x9f6cx5, _0x9f6cx6;
		if (_0x9f6cx3 instanceof Ext.ux.Gantt['model']['Dependency']) {
			_0x9f6cx5 = _0x9f6cx3;
			_0x9f6cx3 = _0x9f6cx7['task']['getId']();
			_0x9f6cx2 = _0x9f6cx3;
			_0x9f6cx6 = _0x9f6cx5['getType']();
			if (_0x9f6cx7['direction'] === 'predecessors') {
				_0x9f6cx3 = _0x9f6cx5['getSourceId']()
			}
			else {
				_0x9f6cx2 = _0x9f6cx5['getTargetId']()
			}
		};
		if (_0x9f6cx5) {
			_0x9f6cx7['store']['each'](function (_0x9f6cxa) {
				if ((_0x9f6cx3 == _0x9f6cxa['getSourceId']()) && (_0x9f6cx2 == _0x9f6cxa['getTargetId']()) && (_0x9f6cxa !== _0x9f6cx5)) {
					_0x9f6cx8['push'](_0x9f6cx7.L('duplicatingDependencyText'));
					return false
				}
			});
			if (_0x9f6cx8['length']) {
				return _0x9f6cx8
			}
		};
		var _0x9f6cxc = _0x9f6cx7['store']['getRange']();
		_0x9f6cx5 && _0x9f6cxc['splice'](Ext['Array']['indexOf'](_0x9f6cxc, _0x9f6cx5), 1);
		var _0x9f6cx1 = _0x9f6cx7['task'][_0x9f6cx7['direction']];
		var _0x9f6cx4 = _0x9f6cx9['getDependencyError'](_0x9f6cx3, _0x9f6cx2, _0x9f6cx6, _0x9f6cxc, _0x9f6cx1);
		if (_0x9f6cx4) {
			switch (_0x9f6cx4) {
			case -3:
				;
			case -8:
				;
			case -5:
				;
			case -6:
				return [_0x9f6cx7.L('transitiveDependencyText')];
			case -4:
				;
			case -7:
				return [_0x9f6cx7.L('cyclicDependencyText')];
			case -9:
				return [_0x9f6cx7.L('parentChildDependencyText')]
			};
			return [this.L('invalidDependencyText')]
		};
		return _0x9f6cx8
	}
	, isValidDependency: function () {
		return !this['getDependencyErrors']['apply'](this, arguments)['length']
	}
	, isValid: function () {
		var _0x9f6cx1 = true;
		this['store']['each'](function (_0x9f6cx2) {
			if (!_0x9f6cx2['isValid']()) {
				_0x9f6cx1 = false;
				return false
			}
		});
		return _0x9f6cx1
	}
	, saveDependencies: function () {
		if (!this['dependencyStore'] || !this['isValid']()) {
			return
		};
		Ext.ux.Gantt['util']['Data']['applyCloneChanges'](this['store'], this['dependencyStore'])
	}
	, isDataChanged: function () {
		var _0x9f6cx1 = this;
		return _0x9f6cx1['store'] && _0x9f6cx1['store']['getUpdatedRecords']()['length'] > 0 || _0x9f6cx1['store']['getNewRecords']()['length'] > 0 || _0x9f6cx1['store']['getRemovedRecords']()['length'] > 0
	}
	, isDataValid: function () {
		return this['isValid']()
	}
});
Ext.define('Ext.ux.Gantt.widget.taskeditor.TaskEditor', {
	extend: 'Ext.ux.Gantt.widget.taskeditor.BaseEditor'
	, alias: 'widget.taskeditor'
	, requires: ['Ext.form.field.HtmlEditor', 'Ext.layout.container.Table', 'Ext.ux.Gantt.widget.taskeditor.TaskForm', 'Ext.ux.Gantt.widget.taskeditor.AdvancedForm', 'Ext.ux.Gantt.widget.AssignmentEditGrid', 'Ext.ux.Gantt.widget.DependencyGrid']
	, alternateClassName: ['Ext.ux.Gantt.widget.TaskEditor']
	, taskFormClass: 'Ext.ux.Gantt.widget.taskeditor.TaskForm'
	, advancedFormClass: 'Ext.ux.Gantt.widget.taskeditor.AdvancedForm'
	, showAssignmentGrid: true
	, showDependencyGrid: true
	, allowParentTaskDependencies: true
	, showNotes: true
	, showAdvancedForm: true
	, showRollup: false
	, showReadOnly: true
	, showBaseline: true
	, taskFormConfig: null
	, dependencyGridClass: 'Ext.ux.Gantt.widget.DependencyGrid'
	, dependencyGridConfig: null
	, assignmentGridClass: 'Ext.ux.Gantt.widget.AssignmentEditGrid'
	, assignmentGridConfig: null
	, advancedFormConfig: null
	, notesConfig: null
	, notesPanel: null
	, notesEditor: null
	, taskForm: null
	, assignmentGrid: null
	, dependencyGrid: null
	, advancedForm: null
	, margin: 0
	, buildItems: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = [];
		var _0x9f6cx2 = _0x9f6cx5['clonedStores'] || {};
		_0x9f6cx5['taskFormConfig'] = _0x9f6cx5['taskFormConfig'] || {};
		Ext['applyIf'](_0x9f6cx5['taskFormConfig'], {
			showBaseline: _0x9f6cx5['showBaseline']
			, showRollup: false
		});
		_0x9f6cx5['taskForm'] = Ext['create'](_0x9f6cx5['taskFormClass'], Ext['apply']({
			task: _0x9f6cx5['task']
			, border: false
			, taskStore: _0x9f6cx5['taskStore']
		}, _0x9f6cx5['taskFormConfig']));
		if (!_0x9f6cx5['taskForm']['title']) {
			_0x9f6cx5['taskForm']['title'] = _0x9f6cx5.L('generalText')
		};
		_0x9f6cx1['push'](_0x9f6cx5['taskForm']);
		if (_0x9f6cx5['showDependencyGrid']) {
			_0x9f6cx5['dependencyGrid'] = Ext['create'](_0x9f6cx5['dependencyGridClass'], Ext['apply']({
				allowParentTaskDependencies: _0x9f6cx5['allowParentTaskDependencies']
				, taskModel: _0x9f6cx5['taskStore']['model']
				, dependencyModel: _0x9f6cx5['taskStore']['getDependencyStore']()['getModel']()
				, task: _0x9f6cx5['task']
				, margin: 0
				, border: false
			}, _0x9f6cx5['dependencyGridConfig']));
			_0x9f6cx1['push'](_0x9f6cx5['dependencyGrid'])
		};
		if (_0x9f6cx5['showAssignmentGrid'] && _0x9f6cx5['assignmentStore'] && _0x9f6cx5['resourceStore']) {
			if (!_0x9f6cx2['assignmentStore']) {
				_0x9f6cx2['assignmentStore'] = _0x9f6cx5['cloneAssignmentStore'](_0x9f6cx5['task'])
			};
			if (!_0x9f6cx2['resourceStore']) {
				_0x9f6cx2['resourceStore'] = _0x9f6cx5['cloneResourceStore'](_0x9f6cx5['task'])
			};
			_0x9f6cx5['assignmentGrid'] = Ext['create'](_0x9f6cx5['assignmentGridClass'], Ext['apply']({
				assignmentStore: _0x9f6cx5['assignmentStore']
				, resourceStore: _0x9f6cx5['resourceStore']
				, border: false
				, margin: 0
				, store: _0x9f6cx2['assignmentStore']
				, resourceDupStore: _0x9f6cx2['resourceStore']
				, listeners: {
					afterrender: {
						fn: function (_0x9f6cx3) {
							_0x9f6cx5['task'] && _0x9f6cx3['loadTaskAssignments'](_0x9f6cx5['task']['get'](_0x9f6cx5['task']['idProperty']))
						}
						, single: true
					}
				}
			}, _0x9f6cx5['assignmentGridConfig']));
			if (!_0x9f6cx5['assignmentGrid']['title']) {
				_0x9f6cx5['assignmentGrid']['title'] = _0x9f6cx5.L('resourcesText')
			};
			_0x9f6cx1['push'](_0x9f6cx5['assignmentGrid'])
		};
		if (_0x9f6cx5['showAdvancedForm']) {
			_0x9f6cx5['advancedFormConfig'] = _0x9f6cx5['advancedFormConfig'] || {};
			_0x9f6cx5['advancedForm'] = Ext['create'](_0x9f6cx5['advancedFormClass'], Ext['applyIf'](_0x9f6cx5['advancedFormConfig'], {
				showRollup: _0x9f6cx5['showRollup']
				, showReadOnly: _0x9f6cx5['showReadOnly']
				, border: false
				, task: _0x9f6cx5['task']
				, taskStore: _0x9f6cx5['taskStore']
			}));
			if (!_0x9f6cx5['advancedForm']['title']) {
				_0x9f6cx5['advancedForm']['title'] = _0x9f6cx5.L('advancedText')
			};
			_0x9f6cx1['push'](_0x9f6cx5['advancedForm'])
		};
		if (_0x9f6cx5['showNotes']) {
			_0x9f6cx5['notesEditor'] = Ext['create']('Ext.form.field.HtmlEditor', Ext['apply']({
				listeners: {
					afterrender: function (_0x9f6cx3) {
						_0x9f6cx5['task'] && _0x9f6cx5['notesEditor']['setValue'](_0x9f6cx5['task']['get'](_0x9f6cx5['task']['noteField']))
					}
				}
				, readOnly: _0x9f6cx5['task'] && !_0x9f6cx5['task']['isEditable'](_0x9f6cx5['task']['noteField'])
				, isDataChanged: function () {
					return this['isDirty']()
				}
			}, _0x9f6cx5['notesConfig']));
			_0x9f6cx5['notesPanel'] = Ext['create']('Ext.Container', {
				border: false
				, margin: 0
				, layout: 'fit'
				, items: _0x9f6cx5['notesEditor']
			});
			if (!_0x9f6cx5['notesPanel']['title']) {
				_0x9f6cx5['notesPanel']['title'] = _0x9f6cx5.L('notesText')
			};
			_0x9f6cx1['push'](_0x9f6cx5['notesPanel'])
		};
		return _0x9f6cx1
	}
	, bindDependencyGrid: function () {
		var _0x9f6cx1 = this['clonedStores']['dependencyStore'];
		var _0x9f6cx2 = this['dependencyGrid'];
		_0x9f6cx2['store']['taskStore'] = this['clonedStores']['taskStore'];
		if (_0x9f6cx1) {
			this['mon'](_0x9f6cx2, {
				loaddependencies: function (_0x9f6cx3, _0x9f6cx5) {
					_0x9f6cx1['loadData'](_0x9f6cx5['getRange']()['concat'](Ext.ux.Gantt['util']['Data']['cloneModelSet'](_0x9f6cx3['oppositeData'])))
				}
			});
			this['mon'](_0x9f6cx2['store'], {
				add: function (_0x9f6cx3, _0x9f6cx5) {
					_0x9f6cx1['add'](_0x9f6cx5)
				}
				, remove: function (_0x9f6cx3, _0x9f6cx5) {
					_0x9f6cx1['remove'](_0x9f6cx5)
				}
			});
			this['dependencyGridBound'] = true
		}
	}
	, loadTask: function (_0x9f6cx5) {
		if (!_0x9f6cx5) {
			return
		};
		this['task'] = _0x9f6cx5;
		var _0x9f6cx7 = this
			, _0x9f6cx2 = _0x9f6cx7['taskForm']
			, _0x9f6cx9 = _0x9f6cx7['dependencyGrid']
			, _0x9f6cx3 = _0x9f6cx7['assignmentGrid']
			, _0x9f6cxc = _0x9f6cx5['isReadOnly']();
		_0x9f6cx2['setSuppressTaskUpdate'](true);
		_0x9f6cx2['getForm']()['reset']();
		_0x9f6cx7['callParent'](arguments);
		var _0x9f6cx8 = _0x9f6cx7['clonedStores']
			, _0x9f6cx4 = _0x9f6cx7['taskBuffer'];
		if (_0x9f6cx9) {
			if (!_0x9f6cx7['dependencyGridBound']) {
				_0x9f6cx7['bindDependencyGrid']()
			};
			_0x9f6cx9['loadDependencies'](_0x9f6cx5);
			_0x9f6cx9['tab']['setVisible'](_0x9f6cx7['allowParentTaskDependencies'] || _0x9f6cx5['isLeaf']())
		};
		if (_0x9f6cx3) {
			if (_0x9f6cx8['assignmentStore'] !== _0x9f6cx3['getStore']()) {
				_0x9f6cx3['reconfigure'](_0x9f6cx8['assignmentStore'])
			};
			if (_0x9f6cx3['resourceDupStore'] !== _0x9f6cx8['resourceStore']) {
				_0x9f6cx3['resourceDupStore'] = _0x9f6cx8['resourceStore']
			};
			_0x9f6cx3['loadResources'](true);
			_0x9f6cx3['loadTaskAssignments'](_0x9f6cx5['getId']() || _0x9f6cx5['getPhantomId']());
			_0x9f6cx3['task'] = _0x9f6cx4
		};
		_0x9f6cx2['loadRecord'](_0x9f6cx5, _0x9f6cx4);
		if (_0x9f6cx7['advancedForm']) {
			_0x9f6cx7['advancedForm']['setSuppressTaskUpdate'](true);
			var _0x9f6cx1 = _0x9f6cx7['advancedForm']['getForm']();
			_0x9f6cx1['reset']();
			_0x9f6cx7['advancedForm']['loadRecord'](_0x9f6cx5, _0x9f6cx2['taskBuffer']);
			var _0x9f6cx6 = _0x9f6cx1['findField']('wbsCode');
			if (_0x9f6cx6) {
				_0x9f6cx6['setValue'](_0x9f6cx5['getWBSCode']())
			};
			_0x9f6cx7['advancedForm']['setSuppressTaskUpdate'](false)
		};
		_0x9f6cx2['setSuppressTaskUpdate'](false);
		if (_0x9f6cx7['notesEditor']) {
			_0x9f6cx7['notesEditor']['setValue'](_0x9f6cx5['getNote']())
		};
		_0x9f6cx7['setReadOnly'](_0x9f6cxc);
		_0x9f6cx7['fireEvent']('loadtask', _0x9f6cx7, _0x9f6cx5)
	}
	, updateReadOnly: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx2 = _0x9f6cx5['taskBuffer']
			, _0x9f6cx1 = _0x9f6cx5['getReadOnly']()
			, _0x9f6cx3 = _0x9f6cx1 || _0x9f6cx2['isReadOnly']();
		if (_0x9f6cx5['taskForm']) {
			if (_0x9f6cx1 != _0x9f6cx5['taskForm']['getReadOnly']()) {
				_0x9f6cx5['taskForm']['setReadOnly'](_0x9f6cx1)
			}
			else {
				_0x9f6cx5['taskForm']['updateReadOnly']()
			}
		};
		if (_0x9f6cx5['assignmentGrid']) {
			_0x9f6cx5['assignmentGrid']['setReadOnly'](_0x9f6cx3);
			_0x9f6cx5['assignmentGrid']['down']('toolbar')['setVisible'](!_0x9f6cx3)
		};
		if (_0x9f6cx5['dependencyGrid']) {
			_0x9f6cx5['dependencyGrid']['setReadOnly'](_0x9f6cx3)
		};
		if (_0x9f6cx5['notesEditor']) {
			_0x9f6cx5['notesEditor']['setReadOnly'](_0x9f6cx3 || !_0x9f6cx2['isEditable'](_0x9f6cx2['noteField']))
		};
		if (_0x9f6cx5['advancedForm']) {
			if (_0x9f6cx1 != _0x9f6cx5['advancedForm']['getReadOnly']()) {
				_0x9f6cx5['advancedForm']['setReadOnly'](_0x9f6cx1)
			}
			else {
				_0x9f6cx5['advancedForm']['updateReadOnly']()
			}
		}
	}
	, doValidate: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['callParent'](arguments);
		if (this['taskForm'] && !this['taskForm']['isValid']()) {
			_0x9f6cx1 = false;
			_0x9f6cx2 && _0x9f6cx2(this['getTabByComponent'](this['taskForm']), this['taskForm'])
		};
		if (this['dependencyGrid'] && !this['dependencyGrid']['isValid']()) {
			_0x9f6cx1 = false;
			_0x9f6cx2 && _0x9f6cx2(this['getTabByComponent'](this['dependencyGrid']), this['dependencyGrid'])
		};
		if (this['assignmentGrid'] && !this['assignmentGrid']['isValid']()) {
			_0x9f6cx1 = false;
			_0x9f6cx2 && _0x9f6cx2(this['getTabByComponent'](this['assignmentGrid']), this['assignmentGrid'])
		};
		if (this['advancedForm'] && !this['advancedForm']['isValid']()) {
			_0x9f6cx1 = false;
			_0x9f6cx2 && _0x9f6cx2(this['getTabByComponent'](this['advancedForm']), this['advancedForm'])
		};
		return _0x9f6cx1
	}
	, doUpdateTask: function () {
		this['dependencyGrid'] && this['dependencyGrid']['saveDependencies']();
		this['taskForm'] && this['taskForm']['updateRecord']();
		this['advancedForm'] && this['advancedForm']['updateRecord']();
		this['notesEditor'] && this['task']['set'](this['task']['noteField'], this['notesEditor']['getValue']());
		this['assignmentGrid'] && this['assignmentGrid']['saveTaskAssignments']()
	}
	, isDataChanged: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['callParent'](arguments);
		if (this['taskForm'] && this['taskForm']['isDataChanged']()) {
			_0x9f6cx1 = true;
			_0x9f6cx2 && _0x9f6cx2(this['getTabByComponent'](this['taskForm']))
		};
		if (this['dependencyGrid'] && this['dependencyGrid']['isDataChanged']()) {
			_0x9f6cx1 = true;
			_0x9f6cx2 && _0x9f6cx2(this['getTabByComponent'](this['dependencyGrid']))
		};
		if (this['assignmentGrid'] && this['assignmentGrid']['isDataChanged']()) {
			_0x9f6cx1 = true;
			_0x9f6cx2 && _0x9f6cx2(this['getTabByComponent'](this['assignmentGrid']))
		};
		if (this['advancedForm'] && this['advancedForm']['isDataChanged']()) {
			_0x9f6cx1 = true;
			_0x9f6cx2 && _0x9f6cx2(this['getTabByComponent'](this['advancedForm']))
		};
		if (this['notesEditor'] && this['notesEditor']['isDataChanged']()) {
			_0x9f6cx1 = true;
			_0x9f6cx2 && _0x9f6cx2(this['getTabByComponent'](this['notesEditor']))
		};
		return _0x9f6cx1
	}
});
Ext.define('Ext.ux.Gantt.plugin.taskeditor.TaskEditor', {
	extend: 'Ext.ux.Gantt.plugin.taskeditor.BaseEditor'
	, alternateClassName: ['Ext.ux.Gantt.plugin.TaskEditor']
	, requires: ['Ext.ux.Gantt.widget.taskeditor.TaskEditor']
	, alias: 'plugin.gantt_taskeditor'
	, ptype: 'gantt_taskeditor'
	, taskEditorCls: 'Ext.ux.Gantt.widget.taskeditor.TaskEditor'
	, height: 390
	, width: 600
	, taskEditorConfigs: 'l10n,task,taskStore,assignmentStore,resourceStore,generalText,resourcesText,dependencyText,addDependencyText,dropDependencyText,notesText,advancedText,wbsCodeText,addAssignmentText,dropAssignmentText,showAssignmentGrid,showDependencyGrid,allowParentTaskDependencies,showNotes,showStyle,showAdvancedForm,taskFormClass,advancedFormClass,taskFormConfig,dependencyGridConfig,assignmentGridConfig,advancedFormConfig,styleFormConfig,dependencyGridClass,assignmentGridClass'
	, constructor: function (_0x9f6cx1) {
		this['callParent'](arguments);
		this['addFilter'](function (_0x9f6cx2) {
			return _0x9f6cx2 && !_0x9f6cx2['isProject']
		})
	}
	, init: function (_0x9f6cx1) {
		this['callParent'](arguments);
		_0x9f6cx1['taskEditor'] = this
	}
});
Ext.define('Ext.ux.Gantt.selection.SpreadsheetModel', {
	extend: 'Ext.grid.selection.SpreadsheetModel'
	, uses: ['Ext.ux.Gantt.column.WBS']
	, alias: 'selection.gantt_spreadsheet'
	, privates: {
		getNumbererColumnConfig: function () {
			var _0x9f6cx1 = this;
			return {
				xtype: 'wbscolumn'
				, text: '&nbsp;'
				, width: _0x9f6cx1['rowNumbererHeaderWidth']
				, editRenderer: '&#160;'
				, tdCls: _0x9f6cx1['rowNumbererTdCls']
				, cls: _0x9f6cx1['rowNumbererHeaderCls']
				, sortable: false
				, draggable: false
				, hideable: false
				, menuDisabled: true
				, lockable: false
				, ignoreExport: true
				, locked: true
			}
		}
	}
});
Ext.define('Ext.ux.Gantt.template.CalendarDateInfo', {
	extend: 'Ext.XTemplate'
	, disableFormats: true
	, workingHoursText: null
	, nonWorkingText: null
	, basedOnText: null
	, overrideText: null
	, inCalendarText: null
	, dayInCalendarText: null
	, markup: '<div class="gnt-calendar-overridedate"><tpl if="isWorkingDay">__WORKINGHOURS__ {date}:<tpl else>{date} __NONWORKING__</tpl></div><ul class="gnt-calendar-availabilities"><tpl for="availability"><li>{.}</li></tpl></ul><span class="gnt-calendar-overridesource"> __BASEDON__: <tpl if="override">__OVERRIDE__ "{name}" __INCALENDAR__ "{calendarName}"<tpl else>__DAYINCALENDAR__ "{calendarName}"</tpl></span>'
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1);
		this['markup'] = this['markup']['replace']('__WORKINGHOURS__', this['workingHoursText'])['replace']('__NONWORKING__', this['nonWorkingText'])['replace']('__BASEDON__', this['basedOnText'])['replace']('__OVERRIDE__', this['overrideText'])['replace']('__INCALENDAR__', this['inCalendarText'])['replace']('__DAYINCALENDAR__', this['dayInCalendarText']);
		this['callParent']([this['markup']])
	}
});
Ext.define('Ext.ux.Gantt.template.CalendarLegend', {
	extend: 'Ext.Template'
	, disableFormats: true
	, markup: '<ul class="gnt-calendar-legend"><li class="gnt-calendar-legend-item"><div class="gnt-calendar-legend-itemstyle {workingDayCls}"></div><span class="gnt-calendar-legend-itemname">{workingDayText}</span><div style="clear: both"></div></li><li><div class="gnt-calendar-legend-itemstyle {nonWorkingDayCls}"></div><span class="gnt-calendar-legend-itemname">{weekendsText}</span><div style="clear: both"></div></li><li class="gnt-calendar-legend-override"><div class="gnt-calendar-legend-itemstyle {overriddenDayCls}">31</div><span class="gnt-calendar-legend-itemname">{overriddenDayText}</span><div style="clear: both"></div></li><li class="gnt-calendar-legend-override"><div class="gnt-calendar-legend-itemstyle {overriddenWeekDayCls}">31</div><span class="gnt-calendar-legend-itemname">{overriddenWeekText}</span><div style="clear: both"></div></li></ul>'
	, constructor: function () {
		this['callParent']([this['markup']])
	}
});
Ext.define('Ext.ux.Gantt.widget.Calendar', {
	extend: 'Ext.picker.Date'
	, alias: 'widget.ganttcalendar'
	, requires: ['Ext.ux.Gantt.data.Calendar', 'Ext.ux.Scheduler.util.Date']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, calendar: null
	, startDate: null
	, endDate: null
	, initComponent: function () {
		if (!this['calendar']) {
			Ext['Error']['raise']('Required attribute "calendar" missing during initialization of `Ext.ux.Gantt.widget.Calendar`')
		};
		if (!this['startDate']) {
			Ext['Error']['raise']('Required attribute "startDate" missing during initialization of `Ext.ux.Gantt.widget.Calendar`')
		};
		if (!this['endDate']) {
			this['endDate'] = Ext.ux.Scheduler['util']['Date']['add'](this['startDate'], Ext.ux.Scheduler['util']['Date'].MONTH, 1)
		};
		this['setCalendar'](this['calendar']);
		this['minDate'] = this['value'] = this['startDate'];
		this['callParent'](arguments);
		this['injectDates']()
	}
	, injectDates: function () {
		var _0x9f6cx1 = this;
		var _0x9f6cx2 = _0x9f6cx1['disabledDates'] = [];
		Ext['Array']['each'](_0x9f6cx1['calendar']['getHolidaysRanges'](_0x9f6cx1['startDate'], _0x9f6cx1['endDate']), function (_0x9f6cx5) {
			_0x9f6cx5['forEachDate'](function (_0x9f6cx3) {
				_0x9f6cx2['push'](Ext['Date']['format'](_0x9f6cx3, _0x9f6cx1['format']))
			})
		});
		_0x9f6cx1['setDisabledDates'](_0x9f6cx2)
	}
	, setCalendar: function (_0x9f6cx2) {
		var _0x9f6cx1 = {
			update: this['injectDates']
			, remove: this['injectDates']
			, add: this['injectDates']
			, load: this['injectDates']
			, clear: this['injectDates']
			, scope: this
		};
		if (this['calendar']) {
			this['mun'](_0x9f6cx2, _0x9f6cx1)
		};
		this['calendar'] = _0x9f6cx2;
		if (_0x9f6cx2) {
			this['mon'](_0x9f6cx2, _0x9f6cx1)
		}
	}
});
Ext.define('Ext.ux.Gantt.widget.calendar.AvailabilityGrid', {
	extend: 'Ext.grid.Panel'
	, requires: ['Ext.Button', 'Ext.data.Store', 'Ext.grid.column.Date', 'Ext.grid.plugin.CellEditing', 'Ext.window.MessageBox']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.calendaravailabilitygrid'
	, calendarDay: null
	, minHeight: 160
	, addButton: null
	, removeButton: null
	, maxIntervalsNum: 5
	, initComponent: function () {
		if (!this['tbar']) {
			this['tbar'] = this['buildToolbar']()
		};
		Ext['applyIf'](this, {
			store: new Ext['data'].Store({
				fields: ['startTime', 'endTime']
				, autoDestroy: true
				, data: this['calendarDay']['getAvailability']()
			})
			, plugins: [new Ext['grid']['plugin'].CellEditing({
				clicksToEdit: 2
			})]
			, columns: [{
				xtype: 'datecolumn'
				, header: this.L('startText')
				, format: 'g:i a'
				, dataIndex: 'startTime'
				, flex: 1
				, editor: {
					xtype: 'timefield'
					, allowBlank: false
					, initDate: '31/12/1899'
				}
			}, {
				xtype: 'datecolumn'
				, header: this.L('endText')
				, format: 'g:i a'
				, dataIndex: 'endTime'
				, flex: 1
				, editor: {
					xtype: 'timefield'
					, allowBlank: false
					, initDate: '31/12/1899'
				}
			}]
			, listeners: {
				selectionchange: this['onAvailabilityGridSelectionChange']
				, scope: this
			}
		});
		this['callParent'](arguments)
	}
	, buildToolbar: function () {
		this['addButton'] = new Ext.Button({
			text: this.L('addText')
			, iconCls: 'x-fa fa-plus'
			, handler: this['addAvailability']
			, scope: this
		});
		this['removeButton'] = new Ext.Button({
			text: this.L('removeText')
			, iconCls: 'x-fa fa-trash'
			, handler: this['removeAvailability']
			, scope: this
			, disabled: true
		});
		return {
			padding: '0 0 5 0'
			, items: [this['addButton'], this['removeButton']]
		}
	}
	, onAvailabilityGridSelectionChange: function (_0x9f6cx1, _0x9f6cx2) {
		this['removeButton']['setDisabled'](!_0x9f6cx2['length'])
	}
	, setAvailability: function (_0x9f6cx1) {
		this['store']['loadData'](_0x9f6cx1);
		this['addButton']['setDisabled'](this['store']['getCount']() >= this['maxIntervalsNum'])
	}
	, addAvailability: function () {
		var _0x9f6cx1 = this['getStore']()
			, _0x9f6cx2 = _0x9f6cx1['count']();
		if (_0x9f6cx2 >= this['maxIntervalsNum']) {
			return
		};
		_0x9f6cx1['add']({
			startTime: new Date(0, 0, 0, 12, 0)
			, endTime: new Date(0, 0, 0, 13, 0)
		});
		if (_0x9f6cx2 + 1 >= this['maxIntervalsNum'] && this['addButton']) {
			this['addButton']['disable']()
		}
	}
	, removeAvailability: function () {
		var _0x9f6cx1 = this['getStore']()
			, _0x9f6cx5 = _0x9f6cx1['getCount']()
			, _0x9f6cx2 = this['getSelection']();
		if (!_0x9f6cx2['length']) {
			return
		};
		_0x9f6cx1['remove'](_0x9f6cx2[0]);
		if (_0x9f6cx5 < this['maxIntervalsNum'] && this['addButton']) {
			this['addButton']['enable']()
		}
	}
	, isValid: function (_0x9f6cx2) {
		try {
			this['calendarDay']['verifyAvailability'](this['getIntervals']())
		}
		catch (a) {
			if (!_0x9f6cx2) {
				Ext['MessageBox']['show']({
					title: this.L('error')
					, msg: a
					, modal: true
					, icon: Ext['MessageBox']['ERROR']
					, buttons: Ext['MessageBox']['OK']
				})
			};
			return false
		};
		return true
	}
	, extractTimeFromDate: function (_0x9f6cx1) {
		return new Date(0, 0, 0, _0x9f6cx1['getHours'](), _0x9f6cx1['getMinutes'](), _0x9f6cx1['getSeconds']())
	}
	, getIntervals: function () {
		var _0x9f6cx1 = [];
		var _0x9f6cx2 = this;
		this['getStore']()['each'](function (_0x9f6cx3) {
			var _0x9f6cx5 = _0x9f6cx2['extractTimeFromDate'](_0x9f6cx3['get']('endTime'));
			if (_0x9f6cx5 - new Date(0, 0, 0, 0, 0, 0) === 0) {
				_0x9f6cx5 = new Date(0, 0, 1, 0, 0)
			};
			_0x9f6cx1['push']({
				startTime: _0x9f6cx2['extractTimeFromDate'](_0x9f6cx3['get']('startTime'))
				, endTime: _0x9f6cx5
			})
		});
		return _0x9f6cx1
	}
});
Ext.define('Ext.ux.Gantt.widget.calendar.DayEditor', {
	extend: 'Ext.ux.Gantt.widget.calendar.AvailabilityGrid'
	, requires: ['Ext.grid.plugin.CellEditing', 'Ext.ux.Gantt.data.Calendar', 'Ext.ux.Scheduler.util.Date']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.calendardayeditor'
	, height: 160
	, initComponent: function () {
		var _0x9f6cx1 = this['calendarDay']['getIsWorkingDay']();
		this['dockedItems'] = this['dockedItems'] || [{
			xtype: 'radiogroup'
			, dock: 'top'
			, name: 'dayType'
			, padding: '0 5px'
			, margin: 0
			, items: [{
				boxLabel: this.L('workingTimeText')
				, name: 'IsWorkingDay'
				, inputValue: true
				, checked: _0x9f6cx1
			}, {
				boxLabel: this.L('nonworkingTimeText')
				, name: 'IsWorkingDay'
				, inputValue: false
				, checked: !_0x9f6cx1
			}]
			, listeners: {
				change: this['onDayTypeChanged']
				, scope: this
			}
		}];
		this['on']('afterrender', this['myApplyState'], this);
		this['callParent'](arguments)
	}
	, getDayTypeRadioGroup: function () {
		return this['down']('radiogroup[name="dayType"]')
	}
	, myApplyState: function () {
		if (!this['isWorkingDay']()) {
			this['viewSetDisabled'](true);
			this['addButton']['disable']()
		}
	}
	, viewSetDisabled: function (_0x9f6cx1) {
		if (_0x9f6cx1) {
			this['getView']()['getEl']()['mask']();
			this['getHeaderContainer']()['getEl']()['mask']()
		}
		else {
			this['getView']()['getEl']()['unmask']();
			this['getHeaderContainer']()['getEl']()['unmask']()
		}
	}
	, onDayTypeChanged: function (_0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx1['getValue']();
		if (Ext['isArray'](_0x9f6cx2.IsWorkingDay)) {
			return
		};
		this['viewSetDisabled'](!_0x9f6cx2['IsWorkingDay']);
		this['addButton']['setDisabled'](!_0x9f6cx2['IsWorkingDay'] || this['getStore']()['getCount']() >= this['maxIntervalsNum'])
	}
	, isWorkingDay: function () {
		return this['getDayTypeRadioGroup']()['getValue']()['IsWorkingDay']
	}
	, isValid: function () {
		if (this['isWorkingDay']()) {
			return this['callParent']()
		};
		return true
	}
	, getIntervals: function () {
		if (!this['isWorkingDay']()) {
			return []
		};
		return this['callParent']()
	}
});
Ext.define('Ext.ux.Gantt.widget.calendar.WeekEditor', {
	extend: 'Ext.form.Panel'
	, requires: ['Ext.grid.Panel', 'Ext.ux.Gantt.data.Calendar', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Gantt.widget.calendar.AvailabilityGrid']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.calendarweekeditor'
	, weekName: null
	, startDate: null
	, endDate: null
	, weekAvailability: null
	, calendarWeekAvailability: null
	, defaultWeekAvailability: null
	, backupWeekAvailability: null
	, layout: 'anchor'
	, defaults: {
		border: false
		, anchor: '100%'
	}
	, calendarDayModel: null
	, currentDayIndex: null
	, _weekDaysGrid: null
	, _availabilityGrid: null
	, initComponent: function () {
		this['backupWeekAvailability'] = [];
		this['items'] = [{
			xtype: 'radiogroup'
			, padding: '0 5px'
			, name: 'dayType'
			, items: [{
				boxLabel: this.L('defaultTimeText')
				, name: 'IsWorkingDay'
				, inputValue: 0
			}, {
				boxLabel: this.L('workingTimeText')
				, name: 'IsWorkingDay'
				, inputValue: 1
			}, {
				boxLabel: this.L('nonworkingTimeText')
				, name: 'IsWorkingDay'
				, inputValue: 2
			}]
			, listeners: {
				change: this['onDayTypeChanged']
				, scope: this
			}
		}, {
			layout: {
				type: 'hbox'
				, align: 'stretch'
			}
			, padding: '0 0 5px 0'
			, items: [{
				margin: '0 10px 0 5px'
				, flex: 1
				, items: this['getWeekDaysGrid']()
			}, {
				flex: 1
				, margin: '0 5px 0 0'
				, items: this['getAvailabilityGrid']()
			}]
		}];
		this['callParent'](arguments)
	}
	, getWeekDaysGrid: function () {
		if (this['_weekDaysGrid'] != null) {
			return this['_weekDaysGrid']
		};
		var _0x9f6cx1 = Ext['Date']['dayNames'];
		return this['_weekDaysGrid'] = new Ext['grid'].Panel({
			hideHeaders: true
			, minHeight: 160
			, columns: [{
				dataIndex: 'name'
				, flex: 1
			}]
			, store: new Ext['data'].Store({
				autoDestroy: true
				, fields: ['id', 'name']
				, idProperty: 'id'
				, data: [{
					id: 1
					, name: _0x9f6cx1[1]
				}, {
					id: 2
					, name: _0x9f6cx1[2]
				}, {
					id: 3
					, name: _0x9f6cx1[3]
				}, {
					id: 4
					, name: _0x9f6cx1[4]
				}, {
					id: 5
					, name: _0x9f6cx1[5]
				}, {
					id: 6
					, name: _0x9f6cx1[6]
				}, {
					id: 0
					, name: _0x9f6cx1[0]
				}]
			})
			, listeners: {
				viewready: this['onWeekDaysListViewReady']
				, selectionchange: this['onWeekDaysListSelectionChange']
				, beforeselect: this['onWeekDaysListBeforeSelect']
				, scope: this
			}
		})
	}
	, getAvailabilityGrid: function () {
		if (!this['_availabilityGrid']) {
			this['_availabilityGrid'] = new Ext.ux.Gantt['widget']['calendar'].AvailabilityGrid({
				calendarDay: new this['calendarDayModel']()
			})
		};
		return this['_availabilityGrid']
	}
	, getDayTypeRadioGroup: function () {
		if (!this['dayTypeRadioGroup']) {
			this['dayTypeRadioGroup'] = this['down']('radiogroup[name="dayType"]')
		};
		return this['dayTypeRadioGroup']
	}
	, getWeekAvailability: function () {
		return this['weekAvailability']
	}
	, onWeekDaysListViewReady: function () {
		var _0x9f6cx2 = this['getWeekDaysGrid']()
			, _0x9f6cx1 = _0x9f6cx2['getStore']()['getAt'](0);
		this['currentDayIndex'] = _0x9f6cx1['getId']();
		this['readFromData']();
		_0x9f6cx2['getSelectionModel']()['select'](_0x9f6cx1, false, true)
	}
	, onWeekDaysListBeforeSelect: function () {
		if (!this['saveToData']()) {
			return false
		}
	}
	, applyChanges: function (_0x9f6cx4) {
		if (!this['saveToData']()) {
			return false
		};
		var _0x9f6cx2 = this['weekAvailability'];
		var _0x9f6cx3 = false;
		for (var _0x9f6cx5 = 0; _0x9f6cx5 < 7; _0x9f6cx5++) {
			var _0x9f6cx1 = _0x9f6cx2[_0x9f6cx5];
			if (_0x9f6cx1) {
				_0x9f6cx3 = true;
				if (!_0x9f6cx4[_0x9f6cx5]) {
					_0x9f6cx4[_0x9f6cx5] = _0x9f6cx1
				};
				_0x9f6cx4[_0x9f6cx5]['setIsWorkingDay'](_0x9f6cx1['getIsWorkingDay']());
				_0x9f6cx4[_0x9f6cx5]['setAvailability'](_0x9f6cx1['getAvailability']())
			}
			else {
				_0x9f6cx4[_0x9f6cx5] = null
			}
		};
		if (!_0x9f6cx3) {
			Ext['MessageBox']['show']({
				title: this.L('error')
				, msg: this.L('noOverrideError')
				, modal: true
				, icon: Ext['MessageBox']['ERROR']
				, buttons: Ext['MessageBox']['OK']
			});
			return false
		};
		return true
	}
	, onWeekDaysListSelectionChange: function (_0x9f6cx1, _0x9f6cx2) {
		this['currentDayIndex'] = _0x9f6cx2[0]['getId']();
		this['readFromData']()
	}
	, getCurrentTypeOfWeekDay: function (_0x9f6cx1) {
		return this['weekAvailability'][_0x9f6cx1] ? (this['weekAvailability'][_0x9f6cx1]['getIsWorkingDay']() ? 1 : 2) : 0
	}
	, getCurrentWeekDay: function (_0x9f6cx1) {
		return this['weekAvailability'][_0x9f6cx1] || this['calendarWeekAvailability'][_0x9f6cx1] || this['defaultWeekAvailability'][_0x9f6cx1]
	}
	, saveToData: function () {
		var _0x9f6cx5 = this['currentDayIndex'];
		var _0x9f6cx3 = this['getDayTypeRadioGroup']()['getValue']()['IsWorkingDay'];
		var _0x9f6cx1 = this['weekAvailability'];
		if (_0x9f6cx3 === 0) {
			_0x9f6cx1[_0x9f6cx5] = null;
			return true
		};
		var _0x9f6cx2 = this['getAvailabilityGrid']();
		if (_0x9f6cx3 == 1) {
			if (!_0x9f6cx2['isValid']()) {
				return false
			};
			if (!_0x9f6cx1[_0x9f6cx5]) {
				_0x9f6cx1[_0x9f6cx5] = this['copyDefaultWeekDay'](_0x9f6cx5)
			};
			_0x9f6cx1[_0x9f6cx5]['setIsWorkingDay'](true);
			_0x9f6cx1[_0x9f6cx5]['setAvailability'](_0x9f6cx2['getIntervals']());
			this['backupWeekAvailability'][_0x9f6cx5] = null;
			return true
		};
		if (!_0x9f6cx1[_0x9f6cx5]) {
			_0x9f6cx1[_0x9f6cx5] = this['copyDefaultWeekDay'](_0x9f6cx5)
		};
		_0x9f6cx1[_0x9f6cx5]['setIsWorkingDay'](false);
		_0x9f6cx1[_0x9f6cx5]['setAvailability']([]);
		return true
	}
	, copyDefaultWeekDay: function (_0x9f6cx1) {
		var _0x9f6cx2 = (this['calendarWeekAvailability'][_0x9f6cx1] || this['defaultWeekAvailability'][_0x9f6cx1])['copy']();
		_0x9f6cx2['phantom'] = true;
		_0x9f6cx2['beginEdit']();
		_0x9f6cx2['setType']('WEEKDAYOVERRIDE');
		_0x9f6cx2['setOverrideStartDate'](this['startDate']);
		_0x9f6cx2['setOverrideEndDate'](this['endDate']);
		_0x9f6cx2['setName'](this['weekName']);
		_0x9f6cx2['endEdit']();
		return _0x9f6cx2
	}
	, readFromData: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['getCurrentWeekDay'](this['currentDayIndex']);
		var _0x9f6cx3 = this['getCurrentTypeOfWeekDay'](this['currentDayIndex']);
		var _0x9f6cx5 = this['getAvailabilityGrid']();
		_0x9f6cx5['setAvailability'](_0x9f6cx2 || _0x9f6cx1['getAvailability']());
		var _0x9f6cx4 = this['getDayTypeRadioGroup']();
		_0x9f6cx4['suspendEvents']();
		_0x9f6cx4['setValue']({
			IsWorkingDay: [_0x9f6cx3]
		});
		_0x9f6cx4['resumeEvents']();
		_0x9f6cx5['setDisabled'](_0x9f6cx3 != 1)
	}
	, onDayTypeChanged: function (_0x9f6cx3, _0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx6 = _0x9f6cx3['getValue']();
		if (_0x9f6cx6['IsWorkingDay'] == null || Ext['isArray'](_0x9f6cx6.IsWorkingDay)) {
			return
		};
		var _0x9f6cx4 = this['weekAvailability'];
		var _0x9f6cx7 = this['backupWeekAvailability'];
		var _0x9f6cx8 = this['currentDayIndex'];
		var _0x9f6cx5 = this['getAvailabilityGrid']();
		var _0x9f6cx9;
		if (_0x9f6cx1['IsWorkingDay'] == 1) {
			_0x9f6cx7[_0x9f6cx8] = _0x9f6cx5['getIntervals']()
		};
		switch (_0x9f6cx6['IsWorkingDay']) {
		case 0:
			_0x9f6cx4[_0x9f6cx8] = null;
			break;
		case 1:
			if (!_0x9f6cx4[_0x9f6cx8]) {
				_0x9f6cx4[_0x9f6cx8] = this['copyDefaultWeekDay'](_0x9f6cx8)
			};
			_0x9f6cx9 = _0x9f6cx7[_0x9f6cx8];
			_0x9f6cx4[_0x9f6cx8]['setIsWorkingDay'](true);
			break;
		case 2:
			if (!_0x9f6cx4[_0x9f6cx8]) {
				_0x9f6cx4[_0x9f6cx8] = this['copyDefaultWeekDay'](_0x9f6cx8)
			};
			_0x9f6cx4[_0x9f6cx8]['setAvailability']([]);
			_0x9f6cx4[_0x9f6cx8]['setIsWorkingDay'](false);
			break;
		default:
			throw 'Unrecognized day type'
		};
		this['readFromData'](_0x9f6cx9)
	}
});
Ext.define('Ext.ux.Gantt.widget.calendar.DatePicker', {
	extend: 'Ext.picker.Date'
	, alias: 'widget.gntdatepicker'
	, workingDayCls: 'gnt-datepicker-workingday'
	, nonWorkingDayCls: 'gnt-datepicker-nonworkingday'
	, overriddenDayCls: 'gnt-datepicker-overriddenday'
	, overriddenWeekDayCls: 'gnt-datepicker-overriddenweekday'
	, weekOverridesStore: null
	, dayOverridesCalendar: null
	, update: function () {
		this['callParent'](arguments);
		this['refreshCssClasses']()
	}
	, refreshCssClasses: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx1 = _0x9f6cx5['cells']['elements'];
		this['removeCustomCls']();
		for (var _0x9f6cx2 = 0; _0x9f6cx2 < _0x9f6cx5['numDays']; _0x9f6cx2++) {
			var _0x9f6cx3 = _0x9f6cx1[_0x9f6cx2]['firstChild']['dateValue'];
			_0x9f6cx1[_0x9f6cx2]['className'] += ' ' + this['getDateCls'](new Date(_0x9f6cx3))
		}
	}
	, getDateCls: function (_0x9f6cx4) {
		var _0x9f6cx2 = '';
		if (_0x9f6cx4['getMonth']() !== this['getActive']()['getMonth']()) {
			return
		};
		var _0x9f6cx5 = this['dayOverridesCalendar'];
		if (_0x9f6cx5['getOwnCalendarDay'](_0x9f6cx4)) {
			_0x9f6cx2 += ' ' + this['overriddenDayCls'];
			if (!_0x9f6cx5['isWorkingDay'](_0x9f6cx4)) {
				_0x9f6cx2 += ' ' + this['nonWorkingDayCls']
			}
		}
		else {
			var _0x9f6cx7 = null;
			this['weekOverridesStore']['each'](function (_0x9f6cx8) {
				var _0x9f6cx6 = _0x9f6cx8['get']('startDate')
					, _0x9f6cx9 = _0x9f6cx8['get']('endDate');
				if (_0x9f6cx6 != null && _0x9f6cx9 != null && Ext['Date']['between'](_0x9f6cx4, _0x9f6cx6, _0x9f6cx9)) {
					_0x9f6cx7 = _0x9f6cx8;
					return false
				}
			});
			if (_0x9f6cx7) {
				_0x9f6cx2 += ' ' + this['overriddenWeekDayCls'];
				var _0x9f6cx3 = _0x9f6cx4['getDay']()
					, _0x9f6cx1 = _0x9f6cx7['get']('weekAvailability');
				if (_0x9f6cx1 && _0x9f6cx1[_0x9f6cx3] && !_0x9f6cx1[_0x9f6cx3]['getIsWorkingDay']()) {
					_0x9f6cx2 += ' ' + this['nonWorkingDayCls']
				}
			}
			else {
				if (!_0x9f6cx5['isWorkingDay'](_0x9f6cx4)) {
					_0x9f6cx2 += ' ' + this['nonWorkingDayCls']
				}
			}
		};
		return _0x9f6cx2 || this['workingDayCls']
	}
	, removeCustomCls: function () {
		this['cells']['removeCls']([this['overriddenDayCls'], this['nonWorkingDayCls'], this['workingDayCls'], this['overriddenWeekDayCls']])
	}
});
Ext.define('Ext.ux.Gantt.widget.calendar.Calendar', {
	extend: 'Ext.form.Panel'
	, requires: ['Ext.XTemplate', 'Ext.data.Store', 'Ext.grid.Panel', 'Ext.grid.plugin.CellEditing', 'Ext.layout.container.HBox', 'Ext.layout.container.Column', 'Ext.layout.container.Fit', 'Ext.layout.container.Anchor', 'Ext.form.FieldContainer', 'Ext.form.field.Checkbox', 'Ext.form.field.ComboBox', 'Ext.form.field.Text', 'Ext.tab.Panel', 'Ext.ux.Gantt.data.Calendar', 'Ext.ux.Gantt.model.Week', 'Ext.ux.Gantt.widget.calendar.DayEditor', 'Ext.ux.Gantt.widget.calendar.WeekEditor', 'Ext.ux.Gantt.widget.calendar.DatePicker', 'Ext.ux.Gantt.template.CalendarLegend', 'Ext.ux.Gantt.template.CalendarDateInfo', 'Ext.ux.Gantt.patches.CellEditor_2']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.calendar'
	, defaults: {
		border: false
	}
	, workingDayCls: 'gnt-datepicker-workingday'
	, nonWorkingDayCls: 'gnt-datepicker-nonworkingday'
	, overriddenDayCls: 'gnt-datepicker-overriddenday'
	, overriddenWeekDayCls: 'gnt-datepicker-overriddenweekday'
	, calendar: null
	, calendarManager: null
	, dayGridConfig: null
	, weekGridConfig: null
	, datePickerConfig: null
	, readOnly: false
	, dayGrid: null
	, weekGrid: null
	, datePicker: null
	, legendTpl: null
	, dateInfoTpl: null
	, dayOverridesCalendar: null
	, weekOverridesStore: null
	, currentDayOverrideEditor: null
	, calendarDayModel: null
	, scrollable: true
	, layout: {
		type: 'vbox'
		, align: 'stretch'
	}
	, initComponent: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['setupTemplates']();
		var _0x9f6cx2 = _0x9f6cx1['calendar'];
		if (!_0x9f6cx2 && _0x9f6cx1['calendarManager']) {
			_0x9f6cx2 = _0x9f6cx1['calendarManager']['getProjectCalendar']() || _0x9f6cx1['calendarManager']['getRoot']()['firstChild']
		};
		if (!_0x9f6cx1['calendarDayModel']) {
			_0x9f6cx1['calendarDayModel'] = _0x9f6cx2 && _0x9f6cx2['getModel'] && _0x9f6cx2['getModel']() || _0x9f6cx2['model']
		};
		_0x9f6cx1['buildItems']();
		_0x9f6cx1['bindListeners']();
		_0x9f6cx1['callParent'](arguments);
		_0x9f6cx1['projectCalendarCheckbox'] = _0x9f6cx1['down']('#projectCalendarCheckbox');
		_0x9f6cx1['projectCalendarCheckbox']['setVisible'](_0x9f6cx1['calendarManager']);
		_0x9f6cx1['setReadOnly'](_0x9f6cx1['readOnly']);
		_0x9f6cx2 && _0x9f6cx1['setCalendar'](_0x9f6cx2)
	}
	, setReadOnly: function (_0x9f6cx1) {
		this['readOnly'] = _0x9f6cx1;
		this['cmbParentCalendar']['setDisabled'](_0x9f6cx1);
		this['down']('#calendarName')['setDisabled'](_0x9f6cx1);
		if (this['calendarManager'] && this['calendarManager']['getProjectCalendar']() !== this['calendar']) {
			this['projectCalendarCheckbox']['setDisabled'](_0x9f6cx1)
		};
		this['setGridReadOnly'](this['dayGrid'], _0x9f6cx1);
		this['setGridReadOnly'](this['weekGrid'], _0x9f6cx1)
	}
	, getReadOnly: function () {
		return this['readOnly']
	}
	, isReadOnly: function () {
		return this['getReadOnly']()
	}
	, setGridReadOnly: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = _0x9f6cx2['getPlugin']('editingPlugin');
		_0x9f6cx1 && _0x9f6cx1[_0x9f6cx5 ? 'disable' : 'enable']();
		_0x9f6cx2['down']('#btnAdd')['setDisabled'](_0x9f6cx5);
		_0x9f6cx2['down']('#btnEdit')['setDisabled'](_0x9f6cx5);
		_0x9f6cx2['down']('#btnRemove')['setDisabled'](_0x9f6cx5)
	}
	, bindListeners: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['on']('calendarset', _0x9f6cx1['onCalendarSet']);
		_0x9f6cx1['on']('afterrender', _0x9f6cx1['onCalendarSet']);
		_0x9f6cx1['dayGrid']['on']({
			selectionchange: _0x9f6cx1['onDayGridSelectionChange']
			, validateedit: _0x9f6cx1['onDayGridValidateEdit']
			, edit: _0x9f6cx1['onDayGridEdit']
			, scope: _0x9f6cx1
		});
		_0x9f6cx1['dayGrid']['store']['on']({
			update: _0x9f6cx1['refreshView']
			, remove: _0x9f6cx1['refreshView']
			, add: _0x9f6cx1['refreshView']
			, scope: _0x9f6cx1
		});
		_0x9f6cx1['weekGrid']['on']({
			selectionchange: _0x9f6cx1['onWeekGridSelectionChange']
			, validateedit: _0x9f6cx1['onWeekGridValidateEdit']
			, edit: _0x9f6cx1['onWeekGridEdit']
			, scope: _0x9f6cx1
		});
		_0x9f6cx1['weekGrid']['store']['on']({
			update: _0x9f6cx1['refreshView']
			, remove: _0x9f6cx1['refreshView']
			, add: _0x9f6cx1['refreshView']
			, scope: _0x9f6cx1
		});
		_0x9f6cx1['datePicker']['on']({
			select: _0x9f6cx1['onDateSelect']
			, scope: _0x9f6cx1
		})
	}
	, buildItems: function () {
		this['dateInfoPanel'] = new Ext.Component({
			cls: 'gnt-calendar-dateinfo'
			, margin: '20 10'
			, flex: 1
			, border: false
		});
		this['cmbParentCalendar'] = new Ext['form']['field'].ComboBox({
			name: 'cmb_parentCalendar'
			, fieldLabel: this.L('parentCalendarText')
			, labelAlign: 'top'
			, store: {
				autoDestroy: true
				, fields: ['Id', 'Name']
			}
			, queryMode: 'local'
			, displayField: 'Name'
			, valueField: 'Id'
			, anchor: '100%'
			, editable: false
			, emptyText: this.L('selectParentText')
		});
		this['buildWeekGrid']();
		this['buildDayGrid']();
		this['buildDatePicker']();
		this['items'] = [{
			xtype: 'container'
			, layout: 'hbox'
			, items: [{
				xtype: 'container'
				, flex: 1
				, margin: '15 5 15 15'
				, layout: 'anchor'
				, items: [{
					xtype: 'fieldcontainer'
					, defaults: {
						width: '100%'
					}
					, layout: 'vbox'
					, items: [{
						xtype: 'textfield'
						, itemId: 'calendarName'
						, labelAlign: 'top'
						, fieldLabel: this.L('calendarNameText')
					}, {
						xtype: 'checkbox'
						, itemId: 'projectCalendarCheckbox'
						, fieldLabel: this.L('isProjectCalendarText')
					}, this['cmbParentCalendar']]
				}, {
					xtype: 'component'
					, padding: '10 0 0 0'
					, renderTpl: this['legendTpl']
					, anchor: '100%'
					, renderData: {
						workingDayText: this.L('workingDayText')
						, weekendsText: this.L('weekendsText')
						, overriddenDayText: this.L('overriddenDayText')
						, overriddenWeekText: this.L('overriddenWeekText')
						, workingDayCls: this['workingDayCls']
						, nonWorkingDayCls: this['nonWorkingDayCls']
						, overriddenDayCls: this['overriddenDayCls']
						, overriddenWeekDayCls: this['overriddenWeekDayCls']
					}
				}]
			}, this['datePicker'], this['dateInfoPanel']]
		}, {
			xtype: 'tabpanel'
			, minHeight: 200
			, flex: 1
			, items: [this['dayGrid'], this['weekGrid']]
		}]
	}
	, buildDayGrid: function () {
		var _0x9f6cx1 = this['calendarDayModel']['prototype'];
		this['dayGrid'] = new Ext['grid'].Panel(Ext['apply']({
			title: this.L('dayOverridesText')
			, itemId: 'dayGrid'
			, tbar: [{
				text: this.L('addText')
				, itemId: 'btnAdd'
				, action: 'add'
				, iconCls: 'x-fa fa-plus'
				, handler: this['addDay']
				, scope: this
			}, {
				text: this.L('editText')
				, itemId: 'btnEdit'
				, action: 'edit'
				, iconCls: 'x-fa fa-edit'
				, handler: this['editDay']
				, scope: this
			}, {
				text: this.L('removeText')
				, itemId: 'btnRemove'
				, action: 'remove'
				, iconCls: 'x-fa fa-trash'
				, handler: this['removeDay']
				, scope: this
			}]
			, store: new Ext.ux.Gantt['data'].Calendar()
			, plugins: [new Ext['grid']['plugin'].CellEditing({
				clicksToEdit: 2
				, pluginId: 'editingPlugin'
			})]
			, columns: [{
				header: this.L('dayOverrideNameHeaderText')
				, dataIndex: _0x9f6cx1['nameField']
				, flex: 1
				, editor: {
					allowBlank: false
				}
			}, {
				header: this.L('dateText')
				, dataIndex: _0x9f6cx1['dateField']
				, width: 100
				, xtype: 'datecolumn'
				, editor: {
					xtype: 'datefield'
				}
			}]
		}, this['dayGridConfig'] || {}));
		this['dayOverridesCalendar'] = this['dayGrid']['store']
	}
	, updateGrids: function () {
		this['dayGrid'] && this['fillDaysStore']();
		this['weekGrid'] && this['fillWeeksStore']()
	}
	, buildWeekGrid: function () {
		this['weekGrid'] = new Ext['grid'].Panel(Ext['apply']({
			title: this.L('weekOverridesText')
			, itemId: 'weekGrid'
			, plugins: [new Ext['grid']['plugin'].CellEditing({
				clicksToEdit: 2
				, pluginId: 'editingPlugin'
			})]
			, store: new Ext['data'].Store({
				autoDestroy: true
				, model: 'Ext.ux.Gantt.model.Week'
			})
			, tbar: [{
				text: this.L('addText')
				, itemId: 'btnAdd'
				, action: 'add'
				, iconCls: 'x-fa fa-plus'
				, handler: this['addWeek']
				, scope: this
			}, {
				text: this.L('editText')
				, itemId: 'btnEdit'
				, action: 'edit'
				, iconCls: 'x-fa fa-edit'
				, handler: this['editWeek']
				, scope: this
			}, {
				text: this.L('removeText')
				, itemId: 'btnRemove'
				, action: 'remove'
				, iconCls: 'x-fa fa-trash'
				, handler: this['removeWeek']
				, scope: this
			}]
			, columns: [{
				header: this.L('overrideName')
				, dataIndex: 'name'
				, flex: 1
				, editor: {
					allowBlank: false
				}
			}, {
				xtype: 'datecolumn'
				, header: this.L('startDate')
				, dataIndex: 'startDate'
				, width: 100
				, editor: {
					xtype: 'datefield'
					, allowBlank: false
				}
			}, {
				xtype: 'datecolumn'
				, header: this.L('endDate')
				, dataIndex: 'endDate'
				, width: 100
				, editor: {
					xtype: 'datefield'
					, allowBlank: false
				}
			}]
		}, this['weekGridConfig'] || {}));
		this['weekOverridesStore'] = this['weekGrid']['store']
	}
	, buildDatePicker: function () {
		this['datePicker'] = new Ext.ux.Gantt['widget']['calendar'].DatePicker(Ext['apply']({
			dayOverridesCalendar: this['dayGrid']['store']
			, weekOverridesStore: this['weekGrid']['store']
			, margin: '15 10 0 10'
			, showToday: false
		}, this['datePickerConfig']))
	}
	, onCalendarSet: function () {
		this['weekOverridesStore']['commitChanges']()
	}
	, setCalendar: function (_0x9f6cx1) {
		if (this['calendar']) {
			this['mun'](this['calendar'], {
				load: this['onCalendarChange']
				, add: this['onCalendarChange']
				, remove: this['onCalendarChange']
				, update: this['onCalendarChange']
				, parentchange: this['onParentChange']
				, scope: this
			})
		};
		this['calendar'] = _0x9f6cx1;
		if (_0x9f6cx1) {
			this['mon'](this['calendar'], {
				load: this['onCalendarChange']
				, add: this['onCalendarChange']
				, remove: this['onCalendarChange']
				, update: this['onCalendarChange']
				, parentchange: this['onParentChange']
				, scope: this
			})
		};
		this['onCalendarChange']();
		this['fireEvent']('calendarset', _0x9f6cx1)
	}
	, onParentChange: function () {
		this['updateComboBox']()
	}
	, updateComboBox: function () {
		var _0x9f6cx5 = this
			, _0x9f6cx7 = [];
		if (_0x9f6cx5['calendarManager']) {
			var _0x9f6cx1 = _0x9f6cx5['calendarManager']['getRoot']();
			var _0x9f6cx3 = _0x9f6cx5['calendarManager']['getNodeByCalendar'](_0x9f6cx5['calendar']);
			_0x9f6cx1['cascadeBy'](function (_0x9f6cx6) {
				var _0x9f6cx8 = _0x9f6cx6['getCalendar']();
				if (_0x9f6cx6 !== _0x9f6cx1 && _0x9f6cx6 !== _0x9f6cx3 && !_0x9f6cx3['contains'](_0x9f6cx6)) {
					_0x9f6cx7['push']({
						Id: _0x9f6cx8['calendarId']
						, Name: _0x9f6cx6['getName']() || _0x9f6cx8['calendarId']
					})
				}
			})
		}
		else {
			_0x9f6cx7 = _0x9f6cx5['calendar']['getParentableCalendars']()
		};
		this['cmbParentCalendar']['store']['loadData']([{
			Id: -1
			, Name: this.L('noParentText')
		}]['concat'](_0x9f6cx7));
		var _0x9f6cx2 = this['calendar'] && this['calendar']['parent']
			, _0x9f6cx4 = _0x9f6cx2 && _0x9f6cx2['calendarId'];
		this['cmbParentCalendar']['setValue'](_0x9f6cx4 || -1)
	}
	, onCalendarChange: function () {
		this['updateComboBox']();
		if (this['calendarManager']) {
			var _0x9f6cx1 = this['calendar'] === this['calendarManager']['getProjectCalendar']();
			this['projectCalendarCheckbox']['setDisabled'](_0x9f6cx1);
			this['projectCalendarCheckbox']['setValue'](_0x9f6cx1)
		};
		this['fillDaysStore']();
		this['fillWeeksStore']();
		this['refreshView']()
	}
	, setupTemplates: function () {
		var _0x9f6cx1 = this.L('tplTexts');
		if (!(this['dateInfoTpl'] instanceof Ext['Template'])) {
			this['dateInfoTpl'] = new Ext.ux.Gantt['template'].CalendarDateInfo({
				workingHoursText: _0x9f6cx1['tplWorkingHours']
				, nonWorkingText: _0x9f6cx1['tplIsNonWorking']
				, basedOnText: _0x9f6cx1['tplBasedOn']
				, overrideText: _0x9f6cx1['tplOverride']
				, inCalendarText: _0x9f6cx1['tplInCalendar']
				, dayInCalendarText: _0x9f6cx1['tplDayInCalendar']
			})
		};
		if (!(this['legendTpl'] instanceof Ext['Template'])) {
			this['legendTpl'] = new Ext.ux.Gantt['template'].CalendarLegend()
		}
	}
	, afterRender: function () {
		this['callParent'](arguments);
		this['onDateSelect'](this['datePicker'], new Date())
	}
	, fillDaysStore: function () {
		var _0x9f6cx1 = Ext.ux.Gantt['util']['Data']['cloneModelSet'](this['calendar'], function (_0x9f6cx2) {
			return (_0x9f6cx2['getType']() == 'DAY' && _0x9f6cx2['getDate']())
		});
		this['dayOverridesCalendar']['loadData'](_0x9f6cx1)
	}
	, copyCalendarDay: function (_0x9f6cx1) {
		var _0x9f6cx2 = _0x9f6cx1['copy'](null);
		_0x9f6cx2['__COPYOF__'] = _0x9f6cx1['getId']();
		return _0x9f6cx2
	}
	, fillWeeksStore: function () {
		var _0x9f6cx1 = this;
		var _0x9f6cx2 = [];
		this['calendar']['forEachNonStandardWeek'](function (_0x9f6cx5) {
			var _0x9f6cx3 = Ext['apply']({}, _0x9f6cx5);
			_0x9f6cx3['weekAvailability'] = Ext['Array']['map'](_0x9f6cx3['weekAvailability'], function (_0x9f6cx4) {
				return _0x9f6cx4 && _0x9f6cx1['copyCalendarDay'](_0x9f6cx4) || null
			});
			_0x9f6cx3['mainDay'] = _0x9f6cx1['copyCalendarDay'](_0x9f6cx3['mainDay']);
			_0x9f6cx2['push'](_0x9f6cx3)
		});
		this['weekOverridesStore']['loadData'](_0x9f6cx2)
	}
	, addDay: function () {
		var _0x9f6cx1 = this['datePicker']['getValue']();
		if (this['dayOverridesCalendar']['getOwnCalendarDay'](_0x9f6cx1)) {
			this['alert']({
				msg: this.L('overrideErrorText')
			});
			return
		};
		var _0x9f6cx2 = this['calendar']['model'];
		var _0x9f6cx3 = _0x9f6cx2['prototype'];
		var _0x9f6cx5 = {};
		_0x9f6cx5[_0x9f6cx3['nameField']] = this.L('newDayName');
		_0x9f6cx5[_0x9f6cx3['typeField']] = 'DAY';
		_0x9f6cx5[_0x9f6cx3['dateField']] = _0x9f6cx1;
		_0x9f6cx5 = new _0x9f6cx2(_0x9f6cx5);
		this['dayGrid']['getStore']()['insert'](0, _0x9f6cx5);
		this['dayGrid']['getSelectionModel']()['select']([_0x9f6cx5], false, false)
	}
	, editDay: function () {
		var _0x9f6cx4 = this
			, _0x9f6cx5 = this['dayGrid']['getSelection']()
			, _0x9f6cx1 = _0x9f6cx5[0];
		if (_0x9f6cx1) {
			var _0x9f6cx2 = this['currentDayOverrideEditor'] = new Ext.ux.Gantt['widget']['calendar'].DayEditor({
				addText: this.L('addText')
				, removeText: this.L('removeText')
				, workingTimeText: this.L('workingTimeText')
				, nonworkingTimeText: this.L('nonworkingTimeText')
				, calendarDay: _0x9f6cx1
			});
			var _0x9f6cx3 = Ext['create']('Ext.window.Window', {
				title: this.L('dayOverridesText')
				, modal: true
				, width: 280
				, height: 260
				, layout: 'fit'
				, items: _0x9f6cx2
				, buttons: [{
					text: this.L('okText')
					, handler: function () {
						if (_0x9f6cx2['isValid']()) {
							var _0x9f6cx7 = _0x9f6cx2['calendarDay'];
							_0x9f6cx7['setIsWorkingDay'](_0x9f6cx2['isWorkingDay']());
							_0x9f6cx7['setAvailability'](_0x9f6cx2['getIntervals']());
							_0x9f6cx4['applyCalendarDay'](_0x9f6cx7, _0x9f6cx1);
							_0x9f6cx4['refreshView']();
							_0x9f6cx3['close']()
						}
					}
				}, {
					text: this.L('cancelText')
					, handler: function () {
						_0x9f6cx3['close']()
					}
				}]
			});
			_0x9f6cx3['show']()
		}
	}
	, removeDay: function () {
		var _0x9f6cx1 = this['dayGrid']
			, _0x9f6cx2 = _0x9f6cx1['getSelection']();
		if (!_0x9f6cx2[0]) {
			return
		};
		_0x9f6cx1['getStore']()['remove'](_0x9f6cx2[0]);
		this['refreshView']()
	}
	, refreshView: function () {
		var _0x9f6cx7 = this['datePicker']['getValue']()
			, _0x9f6cx2 = this['getCalendarDay'](_0x9f6cx7)
			, _0x9f6cx4 = this['weekGrid']
			, _0x9f6cx1 = this['dayGrid']
			, _0x9f6cx3 = this['dayOverridesCalendar']['getOwnCalendarDay'](_0x9f6cx7)
			, _0x9f6cx8;
		var _0x9f6cx5;
		if (_0x9f6cx3) {
			_0x9f6cx1['getSelectionModel']()['select']([_0x9f6cx3], false, true);
			_0x9f6cx5 = _0x9f6cx3['getName']()
		}
		else {
			_0x9f6cx8 = this['getWeekOverrideByDate'](_0x9f6cx7);
			if (_0x9f6cx8) {
				_0x9f6cx4['getSelectionModel']()['select']([_0x9f6cx8], false, true);
				_0x9f6cx5 = _0x9f6cx8['get']('name')
			}
		};
		var _0x9f6cx6 = {
			name: _0x9f6cx5 || _0x9f6cx2['getName']()
			, date: Ext['Date']['format'](_0x9f6cx7, 'M j, Y')
			, calendarName: this['calendar']['name'] || this['calendar']['calendarId']
			, availability: _0x9f6cx2['getAvailability'](true)
			, override: Boolean(_0x9f6cx3 || _0x9f6cx8)
			, isWorkingDay: _0x9f6cx2['getIsWorkingDay']()
		};
		this['dateInfoPanel']['update'](this['dateInfoTpl']['apply'](_0x9f6cx6));
		this['down']('#calendarName')['setValue'](this['calendar']['name']);
		this['datePicker']['rendered'] && this['datePicker']['refreshCssClasses']()
	}
	, onDayGridSelectionChange: function (_0x9f6cx1, _0x9f6cx2) {
		if (_0x9f6cx2[0]) {
			this['datePicker']['setValue'](_0x9f6cx2[0]['getDate']());
			this['refreshView']()
		}
	}
	, onDayGridEdit: function (_0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx1['field'] === 'Date') {
			_0x9f6cx1['grid']['getStore']()['clearCache']();
			this['datePicker']['setValue'](_0x9f6cx1['value'])
		};
		this['refreshView']()
	}
	, onDayGridValidateEdit: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = this['dayGrid']['store'];
		if (_0x9f6cx1['value'] && _0x9f6cx1['field'] === _0x9f6cx5['model']['prototype']['dateField'] && _0x9f6cx5['getOwnCalendarDay'](_0x9f6cx1['value']) && _0x9f6cx1['value'] !== _0x9f6cx1['originalValue']) {
			this['alert']({
				msg: this.L('overrideErrorText')
			});
			return false
		}
	}
	, onDateSelect: function () {
		this['refreshView']()
	}
	, getCalendarDay: function (_0x9f6cx2) {
		var _0x9f6cx1 = this['dayOverridesCalendar']['getOwnCalendarDay'](_0x9f6cx2);
		if (_0x9f6cx1) {
			return _0x9f6cx1
		};
		_0x9f6cx1 = this['getWeekOverrideDay'](_0x9f6cx2);
		if (_0x9f6cx1) {
			return _0x9f6cx1
		};
		return this['calendar']['weekAvailability'][_0x9f6cx2['getDay']()] || this['calendar']['defaultWeekAvailability'][_0x9f6cx2['getDay']()]
	}
	, getWeekOverrideDay: function (_0x9f6cx3) {
		var _0x9f6cx2 = this['getWeekOverrideByDate'](_0x9f6cx3)
			, _0x9f6cx5 = _0x9f6cx3['getDay']();
		if (_0x9f6cx2 == null) {
			return null
		};
		var _0x9f6cx1 = _0x9f6cx2['get']('weekAvailability');
		if (!_0x9f6cx1) {
			return null
		};
		return _0x9f6cx1[_0x9f6cx5]
	}
	, getWeekOverrideByDate: function (_0x9f6cx1) {
		var _0x9f6cx2 = null;
		this['weekOverridesStore']['each'](function (_0x9f6cx5) {
			if (Ext['Date']['between'](_0x9f6cx1, _0x9f6cx5['get']('startDate'), _0x9f6cx5['get']('endDate'))) {
				_0x9f6cx2 = _0x9f6cx5;
				return false
			}
		});
		return _0x9f6cx2
	}
	, intersectsWithCurrentWeeks: function (_0x9f6cx2, _0x9f6cx3, _0x9f6cx5) {
		var _0x9f6cx1 = false;
		this['weekOverridesStore']['each'](function (_0x9f6cx7) {
			if (_0x9f6cx7 == _0x9f6cx5) {
				return
			};
			var _0x9f6cx4 = _0x9f6cx7['get']('startDate');
			var _0x9f6cx6 = _0x9f6cx7['get']('endDate');
			if (_0x9f6cx4 <= _0x9f6cx2 && _0x9f6cx2 < _0x9f6cx6 || _0x9f6cx4 < _0x9f6cx3 && _0x9f6cx3 <= _0x9f6cx6) {
				_0x9f6cx1 = true;
				return false
			}
		});
		return _0x9f6cx1
	}
	, addWeek: function () {
		var _0x9f6cx5 = this['weekOverridesStore'];
		var _0x9f6cx1 = this['datePicker']['getValue']();
		var _0x9f6cx7;
		for (var _0x9f6cx4 = 7; _0x9f6cx4 > 0; _0x9f6cx4--) {
			_0x9f6cx7 = Ext.ux.Scheduler['util']['Date']['add'](_0x9f6cx1, Ext.ux.Scheduler['util']['Date'].DAY, _0x9f6cx4);
			if (!this['intersectsWithCurrentWeeks'](_0x9f6cx1, _0x9f6cx7)) {
				break
			}
		};
		if (!_0x9f6cx4) {
			this['alert']({
				msg: Ext['String']['format'](this.L('overrideDateError'), Ext['Date']['format'](_0x9f6cx1, 'Y/m/d'))
			});
			return
		};
		var _0x9f6cx3 = new this['calendar']['model']();
		_0x9f6cx3['setType']('WEEKDAYOVERRIDE');
		_0x9f6cx3['setName'](this.L('newDayName'));
		_0x9f6cx3['setOverrideStartDate'](_0x9f6cx1);
		_0x9f6cx3['setOverrideEndDate'](_0x9f6cx7);
		_0x9f6cx3['setWeekday'](-1);
		var _0x9f6cx2 = _0x9f6cx5['insert'](0, {
			name: this.L('newDayName')
			, startDate: _0x9f6cx1
			, endDate: _0x9f6cx7
			, weekAvailability: []
			, mainDay: _0x9f6cx3
		})[0];
		this['weekGrid']['getSelectionModel']()['select']([_0x9f6cx2], false, false)
	}
	, editWeek: function () {
		var _0x9f6cx5 = this['weekGrid']['getSelection']()
			, _0x9f6cx4 = this;
		if (_0x9f6cx5['length'] === 0) {
			return
		};
		var _0x9f6cx2 = _0x9f6cx5[0];
		var _0x9f6cx1 = new Ext.ux.Gantt['widget']['calendar'].WeekEditor({
			startDate: _0x9f6cx2['get']('startDate')
			, endDate: _0x9f6cx2['get']('endDate')
			, weekName: _0x9f6cx2['get']('name')
			, calendarDayModel: this['calendar']['model']
			, weekAvailability: _0x9f6cx2['get']('weekAvailability')
			, calendarWeekAvailability: this['calendar']['weekAvailability']
			, defaultWeekAvailability: this['calendar']['defaultWeekAvailability']
		});
		var _0x9f6cx3 = Ext['create']('Ext.window.Window', {
			title: this.L('weekOverridesText')
			, modal: true
			, width: 370
			, defaults: {
				border: false
			}
			, layout: 'fit'
			, items: _0x9f6cx1
			, buttons: [{
				action: 'ok'
				, text: this.L('okText')
				, handler: function () {
					if (_0x9f6cx1['applyChanges'](_0x9f6cx2['get']('weekAvailability'))) {
						_0x9f6cx4['refreshView']();
						_0x9f6cx3['close']()
					}
				}
			}, {
				text: this.L('cancelText')
				, handler: function () {
					_0x9f6cx3['close']()
				}
			}]
		});
		_0x9f6cx3['show']()
	}
	, removeWeek: function () {
		var _0x9f6cx1 = this['weekGrid']['getSelection']();
		if (_0x9f6cx1[0]) {
			this['weekOverridesStore']['remove'](_0x9f6cx1[0]);
			this['refreshView']()
		}
	}
	, onWeekGridSelectionChange: function (_0x9f6cx1, _0x9f6cx2) {
		if (_0x9f6cx2[0]) {
			this['datePicker']['setValue'](_0x9f6cx2[0]['get']('startDate'))
		}
	}
	, onWeekGridEdit: function (_0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx5 = _0x9f6cx2['record']
			, _0x9f6cx1 = _0x9f6cx5['get']('startDate')
			, _0x9f6cx4 = _0x9f6cx5['get']('endDate');
		if (_0x9f6cx2['field'] == 'startDate' || _0x9f6cx2['field'] == 'endDate') {
			Ext['Array']['each'](_0x9f6cx5['get']('weekAvailability')['concat'](_0x9f6cx5['get']('mainDay')), function (_0x9f6cx7) {
				if (_0x9f6cx7) {
					_0x9f6cx7['setOverrideStartDate'](_0x9f6cx1);
					_0x9f6cx7['setOverrideEndDate'](_0x9f6cx4)
				}
			});
			this['datePicker']['setValue'](_0x9f6cx1)
		};
		this['refreshView']()
	}
	, alert: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		Ext['MessageBox']['show'](Ext['applyIf'](_0x9f6cx1, {
			title: this.L('error')
			, icon: Ext['MessageBox']['WARNING']
			, buttons: Ext['MessageBox']['OK']
		}))
	}
	, onWeekGridValidateEdit: function (_0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx5 = _0x9f6cx2['record']
			, _0x9f6cx1 = _0x9f6cx2['field'] == 'startDate' ? _0x9f6cx2['value'] : _0x9f6cx5['get']('startDate')
			, _0x9f6cx4 = _0x9f6cx2['field'] == 'endDate' ? _0x9f6cx2['value'] : _0x9f6cx5['get']('endDate');
		if (_0x9f6cx1 > _0x9f6cx4) {
			this['alert']({
				msg: this.L('startAfterEndError')
			});
			_0x9f6cx2['cancel'] = true;
			return false
		};
		if (this['intersectsWithCurrentWeeks'](_0x9f6cx1, _0x9f6cx4, _0x9f6cx5)) {
			this['alert']({
				msg: this.L('weeksIntersectError')
			});
			_0x9f6cx2['cancel'] = true;
			return false
		}
	}
	, applyCalendarDay: function (_0x9f6cx3, _0x9f6cx5) {
		_0x9f6cx5['beginEdit']();
		_0x9f6cx5['setName'](_0x9f6cx3['getName']());
		_0x9f6cx5['setIsWorkingDay'](_0x9f6cx3['getIsWorkingDay']());
		_0x9f6cx5['setDate'](_0x9f6cx3['getDate']());
		_0x9f6cx5['setOverrideStartDate'](_0x9f6cx3['getOverrideStartDate']());
		_0x9f6cx5['setOverrideEndDate'](_0x9f6cx3['getOverrideEndDate']());
		var _0x9f6cx2 = _0x9f6cx3['getAvailability'](true);
		var _0x9f6cx1 = _0x9f6cx5['getAvailability'](true);
		if (_0x9f6cx2 + '' != _0x9f6cx1 + '') {
			_0x9f6cx5['setAvailability'](_0x9f6cx3['getAvailability']())
		};
		_0x9f6cx5['endEdit']()
	}
	, applySingleDay: function (_0x9f6cx2, _0x9f6cx1) {
		if (_0x9f6cx2['__COPYOF__']) {
			this['applyCalendarDay'](_0x9f6cx2, this['calendar']['getModelById'](_0x9f6cx2.__COPYOF__))
		}
		else {
			if (_0x9f6cx2['store']) {
				_0x9f6cx2['unjoin'](_0x9f6cx2['store'])
			};
			_0x9f6cx2['setId'](null);
			_0x9f6cx1['push'](_0x9f6cx2['getData']())
		}
	}
	, applyChanges: function () {
		var _0x9f6cx8 = this;
		var _0x9f6cx2 = this['calendar'];
		var _0x9f6cx9 = this['down']('combobox[name="cmb_parentCalendar"]')['getValue']()
			, _0x9f6cx7 = this['down']('#calendarName')['getValue']()
			, _0x9f6cx3 = this['projectCalendarCheckbox']['getValue']();
		if (this['calendarManager']) {
			var _0x9f6cx1 = this['calendarManager']['getModelById'](_0x9f6cx2['calendarId']);
			if (_0x9f6cx1) {
				_0x9f6cx1['setName'](_0x9f6cx7)
			};
			if (this['calendarManager']['getProjectCalendar']() !== _0x9f6cx2 && _0x9f6cx3) {
				this['projectCalendarCheckbox']['setDisabled'](true);
				this['calendarManager']['setProjectCalendar'](_0x9f6cx2)
			}
		};
		_0x9f6cx2['suspendEvents'](true);
		_0x9f6cx2['suspendCacheUpdate']++;
		_0x9f6cx2['name'] = _0x9f6cx7;
		_0x9f6cx2['setParent'](_0x9f6cx9 ? Ext.ux.Gantt['data']['Calendar']['getCalendar'](_0x9f6cx9) : null);
		if (_0x9f6cx2['getProxy']() && _0x9f6cx2['getProxy']()['extraParams']) {
			_0x9f6cx2['getProxy']()['extraParams']['calendarId'] = _0x9f6cx2['calendarId']
		};
		Ext.ux.Gantt['util']['Data']['applyCloneChanges'](this['dayOverridesCalendar'], _0x9f6cx2, function (_0x9f6cxa, _0x9f6cxc) {
			_0x9f6cxc['originalRecord'] && _0x9f6cxc['originalRecord']['setAvailability'](_0x9f6cxc['getAvailability'](true))
		});
		var _0x9f6cx4 = [];
		var _0x9f6cx5 = [];
		var _0x9f6cx6 = {};
		this['weekOverridesStore']['each'](function (_0x9f6cxc) {
			Ext['Array']['each'](_0x9f6cxc['get']('weekAvailability')['concat'](_0x9f6cxc['get']('mainDay')), function (_0x9f6cxa) {
				if (_0x9f6cxa) {
					if (_0x9f6cxa['__COPYOF__']) {
						_0x9f6cx6[_0x9f6cxa['__COPYOF__']] = true
					};
					_0x9f6cx8['applySingleDay'](_0x9f6cxa, _0x9f6cx4)
				}
			})
		});
		_0x9f6cx2['forEachNonStandardWeek'](function (_0x9f6cxc) {
			Ext['Array']['each'](_0x9f6cxc['weekAvailability']['concat'](_0x9f6cxc['mainDay']), function (_0x9f6cxa) {
				if (_0x9f6cxa && !_0x9f6cx6[_0x9f6cxa['getId']()]) {
					_0x9f6cx5['push'](_0x9f6cxa)
				}
			})
		});
		_0x9f6cx2['add'](_0x9f6cx4);
		_0x9f6cx2['remove'](_0x9f6cx5);
		_0x9f6cx2['suspendCacheUpdate']--;
		_0x9f6cx2['clearCache']();
		_0x9f6cx2['resumeEvents']();
		this['fireEvent']('calendarset', _0x9f6cx2)
	}
	, hasChanges: function () {
		if (!this['calendar']) {
			return false
		};
		var _0x9f6cx2 = this['dayOverridesCalendar']['getModifiedRecords']()['length'] || this['dayOverridesCalendar']['getRemovedRecords']()['length']
			, _0x9f6cx4 = this['weekOverridesStore']['getModifiedRecords']()['length'] || this['weekOverridesStore']['getRemovedRecords']()['length']
			, _0x9f6cx3 = this['down']('#calendarName')['getValue']() != this['calendar']['name']
			, _0x9f6cx7 = this['calendar']['parent'] && this['calendar']['parent']['calendarId'] || -1
			, _0x9f6cx5 = this['cmbParentCalendar']['getValue']() != _0x9f6cx7
			, _0x9f6cx1 = false;
		if (this['calendarManager']) {
			_0x9f6cx1 = this['projectCalendarCheckbox']['getValue']() && (this['calendarManager']['getProjectCalendar']() !== this['calendar'])
		};
		return _0x9f6cx2 || _0x9f6cx4 || _0x9f6cx3 || _0x9f6cx5 || _0x9f6cx1
	}
});
Ext.define('Ext.ux.Gantt.widget.calendar.CalendarManager', {
	extend: 'Ext.Container'
	, requires: ['Ext.tree.Panel', 'Ext.menu.Menu', 'Ext.tree.plugin.TreeViewDragDrop', 'Ext.ux.Gantt.patches.TreeViewDragDrop', 'Ext.ux.Gantt.widget.calendar.Calendar', 'Ext.ux.Gantt.data.calendar.BusinessTime']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.calendarmanager'
	, treePanelConfig: null
	, treePanel: null
	, calendarPanelConfig: null
	, calendarManager: null
	, readOnly: false
	, calendarPanel: null
	, layout: 'border'
	, width: 800
	, height: 600
	, initComponent: function () {
		var _0x9f6cx2 = this;
		_0x9f6cx2['cls'] = _0x9f6cx2['cls'] + ' gnt-calendarmanager';
		_0x9f6cx2['treePanel'] = _0x9f6cx2['buildTreePanel']();
		_0x9f6cx2['calendarPanel'] = new Ext.ux.Gantt['widget']['calendar'].Calendar(Ext['apply']({
			region: 'center'
			, calendar: _0x9f6cx2['calendar']
			, split: true
			, scrollable: true
			, calendarManager: _0x9f6cx2['calendarManager']
			, readOnly: _0x9f6cx2['readOnly']
		}, _0x9f6cx2['calendarPanelConfig']));
		_0x9f6cx2['items'] = [_0x9f6cx2['treePanel'], _0x9f6cx2['calendarPanel']];
		_0x9f6cx2['callParent'](arguments);
		_0x9f6cx2['contextMenu'] = _0x9f6cx2['buildContextMenu']();
		_0x9f6cx2['setReadOnly'](_0x9f6cx2['readOnly']);
		var _0x9f6cx1 = _0x9f6cx2['calendarManager'];
		_0x9f6cx2['setCalendar'](_0x9f6cx2['calendar'] || _0x9f6cx1['getProjectCalendar']() || _0x9f6cx1['getRoot']()['firstChild']);
		_0x9f6cx2['counter'] = 1
	}
	, setReadOnly: function (_0x9f6cx3) {
		this['readOnly'] = _0x9f6cx3;
		var _0x9f6cx2 = this['treePanel'];
		_0x9f6cx2['down']('#btnAdd')['setDisabled'](_0x9f6cx3);
		_0x9f6cx2['down']('#btnRemove')['setDisabled'](_0x9f6cx3);
		var _0x9f6cx1 = _0x9f6cx2['getView']()
			, _0x9f6cx5 = _0x9f6cx3 ? 'disable' : 'enable';
		if (_0x9f6cx1['rendered']) {
			_0x9f6cx1['getPlugin']('treeDragDrop')[_0x9f6cx5]()
		}
		else {
			_0x9f6cx1['on']('render', function () {
				_0x9f6cx1['getPlugin']('treeDragDrop')[_0x9f6cx5]()
			}, this, {
				single: true
			})
		};
		this['contextMenu']['setDisabled'](_0x9f6cx3);
		this['calendarPanel']['setReadOnly'](_0x9f6cx3)
	}
	, getReadOnly: function () {
		return this['readOnly']
	}
	, isReadOnly: function () {
		return this['getReadOnly']()
	}
	, buildTreePanel: function () {
		var _0x9f6cx1 = this;
		return new Ext['tree'].Panel(Ext['apply']({
			split: true
			, region: 'west'
			, width: 200
			, store: _0x9f6cx1['calendarManager']
			, displayField: _0x9f6cx1['calendarManager']['model']['prototype']['nameField']
			, rootVisible: false
			, tbar: [{
				itemId: 'btnAdd'
				, text: _0x9f6cx1.L('addText')
				, action: 'add'
				, iconCls: 'x-fa fa-plus'
				, handler: _0x9f6cx1['doAddRootNode']
				, scope: _0x9f6cx1
			}, {
				itemId: 'btnRemove'
				, text: _0x9f6cx1.L('removeText')
				, action: 'remove'
				, iconCls: 'x-fa fa-trash'
				, handler: _0x9f6cx1['doRemoveCalendar']
				, scope: _0x9f6cx1
			}]
			, viewConfig: {
				plugins: {
					ptype: 'treeviewdragdrop'
					, pluginId: 'treeDragDrop'
					, allowContainerDrops: true
					, dropZone: {
						onNodeDrop: function (_0x9f6cx7, _0x9f6cx5, _0x9f6cx4, _0x9f6cx2) {
							var _0x9f6cx3 = this['valid'];
							this['overRecord'] = this['view']['getRecord'](_0x9f6cx7);
							this['currentPosition'] = 'append';
							Ext['Array']['each'](_0x9f6cx2['records'], function (_0x9f6cx6) {
								if (_0x9f6cx6['contains'](this['overRecord'])) {
									_0x9f6cx3 = false;
									return false
								}
							}, this);
							this['valid'] = _0x9f6cx3;
							if (this['overRecord']['isLeaf']()) {
								this['overRecord']['set']('expanded', true);
								this['overRecord']['childNodes'] = []
							};
							return this['self']['prototype']['onNodeDrop']['apply'](this, arguments)
						}
					}
				}
				, getRowClass: function (_0x9f6cx2) {
					if (_0x9f6cx1['calendarManager']['getProjectCalendar']() == _0x9f6cx2['calendar']) {
						return 'gnt-project-calendar-row'
					}
				}
				, listeners: {
					drop: _0x9f6cx1['onDrop']
					, scope: _0x9f6cx1
				}
			}
			, listeners: {
				containercontextmenu: _0x9f6cx1['onContainerContextMenu']
				, itemcontextmenu: _0x9f6cx1['onItemContextMenu']
				, selectionchange: _0x9f6cx1['onSelectionChange']
				, scope: _0x9f6cx1
			}
		}, _0x9f6cx1['treePanelConfig']))
	}
	, buildContextMenu: function () {
		return new Ext['menu'].Menu({
			margin: '0 0 10 0'
			, items: [{
				text: this.L('add_node')
				, handler: this['doAddRootNode']
				, itemId: 'add-node'
				, scope: this
			}, {
				text: this.L('add_child')
				, handler: this['doAddChildNode']
				, scope: this
			}, {
				text: this.L('add_sibling')
				, handler: this['doAddSiblingCalendar']
				, scope: this
			}, {
				text: this.L('remove')
				, handler: this['doRemoveCalendar']
				, itemId: 'remove-node'
				, scope: this
			}]
		})
	}
	, showContextMenu: function (_0x9f6cx5, _0x9f6cx2) {
		var _0x9f6cx1 = this['contextMenu']['query']('menuitem');
		Ext['Array']['each'](_0x9f6cx1, function (_0x9f6cx3) {
			_0x9f6cx3['setVisible'](!!_0x9f6cx2)
		});
		this['contextMenu']['down']('#add-node')['setVisible'](!_0x9f6cx2);
		_0x9f6cx5['stopEvent']();
		this['contextMenu']['showAt'](_0x9f6cx5['getXY']())
	}
	, onContainerContextMenu: function (_0x9f6cx1, _0x9f6cx2) {
		this['showContextMenu'](_0x9f6cx2)
	}
	, onItemContextMenu: function (_0x9f6cx1, _0x9f6cx7, _0x9f6cx5, _0x9f6cx2, _0x9f6cx3) {
		this['showContextMenu'](_0x9f6cx3, _0x9f6cx7)
	}
	, hasChanges: function () {
		return this['calendarPanel']['hasChanges']()
	}
	, onSelectionChange: function (_0x9f6cx9, _0x9f6cx5, _0x9f6cx4) {
		var _0x9f6cx7 = this
			, _0x9f6cx2 = _0x9f6cx7['calendarManager']
			, _0x9f6cxc = _0x9f6cx7['calendarPanel'];
		if (_0x9f6cx5['length'] > 0) {
			var _0x9f6cx3 = _0x9f6cx5[0];
			var _0x9f6cx6 = _0x9f6cx3['getCalendar']();
			var _0x9f6cx8 = _0x9f6cx2['getProjectCalendar']();
			var _0x9f6cx1 = _0x9f6cx6 === _0x9f6cx8 || _0x9f6cx8 && Boolean(_0x9f6cx3['findChild'](_0x9f6cx3['idProperty'], _0x9f6cx8['calendarId']));
			if (!_0x9f6cx7['isReadOnly']()) {
				_0x9f6cx7['treePanel']['down']('#btnRemove')['setDisabled'](_0x9f6cx1);
				_0x9f6cx7['contextMenu']['down']('#remove-node')['setDisabled'](_0x9f6cx1)
			};
			if (_0x9f6cxc['calendar'] && _0x9f6cxc['hasChanges']()) {
				Ext['Msg']['show']({
					title: _0x9f6cx7.L('confirm_action')
					, msg: _0x9f6cx7.L('confirm_message')
					, buttons: Ext['Msg']['YESNOCANCEL']
					, icon: Ext['Msg']['QUESTION']
					, fn: function (_0x9f6cxa) {
						if (_0x9f6cxa == 'yes') {
							_0x9f6cx7['applyChanges']();
							_0x9f6cxc['setCalendar'](_0x9f6cx6)
						}
						else {
							if (_0x9f6cxa == 'no') {
								_0x9f6cxc['setCalendar'](_0x9f6cx6)
							}
							else {
								_0x9f6cx9['suspendEvents']();
								_0x9f6cx9['select'](_0x9f6cx2['getNodeByCalendar'](_0x9f6cxc['calendar']));
								_0x9f6cx9['resumeEvents']()
							}
						}
					}
				})
			}
			else {
				_0x9f6cxc['setCalendar'](_0x9f6cx6)
			}
		}
	}
	, onDrop: function (_0x9f6cx2, _0x9f6cx3, _0x9f6cx5, _0x9f6cx1) {
		_0x9f6cx5 = _0x9f6cx5 || this['calendarManager']['getRootNode']();
		_0x9f6cx5['expand']()
	}
	, onDestroy: function () {
		this['contextMenu']['destroy']();
		this['callParent'](arguments)
	}
	, applyChanges: function () {
		this['calendarPanel']['applyChanges']()
	}
	, doAddRootNode: function () {
		this['addCalendar']()
	}
	, doAddChildNode: function () {
		var _0x9f6cx1 = this['treePanel']['getSelectionModel']()['getSelection']();
		this['addCalendar'](_0x9f6cx1[0])
	}
	, doAddSiblingCalendar: function () {
		var _0x9f6cx1 = this['treePanel']['getSelectionModel']()['getSelection']();
		this['addCalendar'](_0x9f6cx1[0] && _0x9f6cx1[0]['parentNode'])
	}
	, doRemoveCalendar: function () {
		var _0x9f6cx1 = this['treePanel']['getSelectionModel']()['getSelection']();
		this['removeCalendar'](_0x9f6cx1[0])
	}
	, addCalendar: function (_0x9f6cx5) {
		var _0x9f6cx3 = Ext['ClassManager']['get'](this['calendarManager']['calendarClass'])['prototype'];
		var _0x9f6cx1 = this['calendarManager']['model']['prototype'];
		var _0x9f6cx2 = _0x9f6cx1['getModelConfig'](_0x9f6cx3);
		_0x9f6cx2[_0x9f6cx1['nameField']] = this.L('calendarName') + this['counter']++;
		_0x9f6cx2['expanded'] = true;
		_0x9f6cx2['leaf'] = true;
		_0x9f6cx5 = _0x9f6cx5 || this['treePanel']['getRootNode']();
		_0x9f6cx5['data']['expanded'] = true;
		_0x9f6cx5['appendChild'](_0x9f6cx2)
	}
	, removeCalendar: function (_0x9f6cx5) {
		var _0x9f6cx1 = this['treePanel']['getRootNode']();
		if (_0x9f6cx5) {
			var _0x9f6cx2 = _0x9f6cx5['nextSibling'] || _0x9f6cx5['previousSibling'] || (_0x9f6cx5['parentNode'] == _0x9f6cx1 ? _0x9f6cx1['firstChild'] : _0x9f6cx5['parentNode']);
			if (_0x9f6cx2) {
				this['treePanel']['getSelectionModel']()['select'](_0x9f6cx2)
			};
			_0x9f6cx5['remove']()
		}
	}
	, setCalendar: function (_0x9f6cx1) {
		if (_0x9f6cx1 instanceof Ext.ux.Gantt['model']['Calendar']) {
			this['treePanel']['setSelection'](_0x9f6cx1)
		}
		else {
			this['treePanel']['setSelection'](this['calendarManager']['getNodeByCalendar'](_0x9f6cx1))
		}
	}
});
Ext.define('Ext.ux.Gantt.widget.calendar.CalendarManagerWindow', {
	extend: 'Ext.window.Window'
	, requires: ['Ext.ux.Gantt.widget.calendar.CalendarManager']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.calendarmanagerwindow'
	, layout: 'fit'
	, border: false
	, constrain: true
	, defaultFocus: 'btnCancel'
	, calendarConfig: null
	, calendarManager: null
	, panel: null
	, closing: false
	, initComponent: function () {
		this['panel'] = new Ext.ux.Gantt['widget']['calendar'].CalendarManager({
			calendarManager: this['calendarManager']
			, calendarPanelConfig: this['calendarConfig']
		});
		Ext['applyIf'](this, {
			width: Math['min'](Ext['getBody']()['getWidth']() - 100, 1050)
			, height: Math['min'](Ext['getBody']()['getHeight']() - 100, 700)
		});
		Ext['apply'](this, {
			title: this['title'] || this.L('title')
			, items: [this['panel']]
			, buttons: [{
				text: this.L('ok')
				, handler: function () {
					this['applyChanges']()
				}
				, scope: this
			}, {
				text: this.L('cancel')
				, itemId: 'btnCancel'
				, handler: function () {
					this['close']()
				}
				, scope: this
			}]
			, listeners: {
				beforeclose: this['onBeforeClose']
				, close: this['onAfterClose']
				, show: this['onAfterShow']
			}
		});
		this['callParent'](arguments)
	}
	, applyChanges: function () {
		this['panel']['applyChanges']()
	}
	, onBeforeClose: function () {
		var _0x9f6cx2 = this;
		var _0x9f6cx1 = this['panel'];
		if (!_0x9f6cx2['closing'] && _0x9f6cx1['hasChanges']()) {
			Ext['Msg']['show']({
				title: _0x9f6cx2.L('confirm_action')
				, msg: _0x9f6cx2.L('confirm_message')
				, buttons: Ext['Msg']['YESNOCANCEL']
				, icon: Ext['Msg']['QUESTION']
				, fn: function (_0x9f6cx5) {
					switch (_0x9f6cx5) {
					case 'yes':
						_0x9f6cx1['applyChanges']();
						_0x9f6cx2['close']();
						break;
					case 'no':
						_0x9f6cx2['closing'] = true;
						_0x9f6cx2['close']();
						break
					}
				}
			});
			return false
		}
	}
	, onAfterClose: function () {
		this['closing'] = false
	}
	, onAfterShow: function () {
		this['focus']()
	}
});
Ext.define('Ext.ux.Gantt.widget.calendar.CalendarWindow', {
	extend: 'Ext.window.Window'
	, requires: ['Ext.ux.Gantt.widget.calendar.Calendar']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.calendarwindow'
	, calendarConfig: null
	, calendar: null
	, calendarWidget: null
	, initComponent: function () {
		Ext['applyIf'](this, {
			width: Math['min'](Ext['getBody']()['getWidth']() - 100, 800)
			, height: Math['min'](Ext['getBody']()['getHeight']() - 100, 650)
		});
		Ext['apply'](this, {
			layout: 'fit'
			, title: this['title'] || this.L('title')
			, items: this['calendarWidget'] = new Ext.ux.Gantt['widget']['calendar'].Calendar(Ext['apply']({
				calendar: this['calendar']
			}, this['calendarConfig']))
			, buttons: [{
				text: this.L('ok')
				, handler: function () {
					this['applyChanges']();
					this['close']()
				}
				, scope: this
			}, {
				text: this.L('cancel')
				, handler: this['close']
				, scope: this
			}]
		});
		this['callParent'](arguments)
	}
	, applyChanges: function () {
		this['calendarWidget']['applyChanges']()
	}
	, setCalendar: function (_0x9f6cx1) {
		this['calendarWidget']['setCalendar'](_0x9f6cx1)
	}
});
Ext.define('Ext.ux.Gantt.widget.calendar.ResourceCalendarGrid', {
	extend: 'Ext.grid.Panel'
	, requires: ['Ext.data.Store', 'Ext.grid.plugin.CellEditing', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Gantt.model.Calendar', 'Ext.ux.Gantt.data.Calendar']
	, mixins: ['Ext.ux.Gantt.mixin.Localizable']
	, alias: 'widget.resourcecalendargrid'
	, resourceStore: null
	, calendarStore: null
	, cellEditingConfig: null
	, initComponent: function () {
		var _0x9f6cx2 = this;
		this['calendarStore'] = this['calendarStore'] || {
			xclass: 'Ext.data.Store'
			, model: 'Ext.ux.Gantt.model.Calendar'
		};
		if (!(this['calendarStore'] instanceof Ext['data']['Store'])) {
			this['calendarStore'] = Ext['create'](this['calendarStore'])
		};
		var _0x9f6cx1 = Ext['create']('Ext.grid.plugin.CellEditing', Ext['apply']({
			clicksToEdit: 2
		}, this['cellEditingConfig']));
		this['mon'](_0x9f6cx1, {
			edit: function (_0x9f6cx5, _0x9f6cx3) {
				this['onCalendarChange'](_0x9f6cx3['record'], _0x9f6cx3['value'])
			}
			, scope: this
		});
		Ext['apply'](_0x9f6cx2, {
			store: _0x9f6cx2['resourceStore']
			, columns: [{
				header: this.L('name')
				, dataIndex: 'Name'
				, flex: 1
			}, {
				header: this.L('calendar')
				, flex: 1
				, renderer: function (_0x9f6cx4, _0x9f6cx6, _0x9f6cx5) {
					var _0x9f6cx7 = _0x9f6cx5['getCalendar']();
					var _0x9f6cx3 = _0x9f6cx2['calendarStore']['getModelById'] ? 'getModelById' : 'getById';
					var _0x9f6cx8 = _0x9f6cx2['calendarStore'][_0x9f6cx3](_0x9f6cx7 && _0x9f6cx7['calendarId']);
					return _0x9f6cx8 && _0x9f6cx8['getName']() || _0x9f6cx4
				}
				, editor: {
					xtype: 'combobox'
					, store: _0x9f6cx2['calendarStore']
					, queryMode: 'local'
					, displayField: 'Name'
					, valueField: 'Id'
					, editable: false
					, allowBlank: false
				}
			}]
			, border: true
			, height: 180
			, plugins: _0x9f6cx1
		});
		this['calendarStore']['loadData'](this['getCalendarData']());
		this['callParent'](arguments)
	}
	, getCalendarData: function () {
		return Ext['Array']['map'](Ext.ux.Gantt['data']['Calendar']['getAllCalendars'](), function (_0x9f6cx1) {
			return {
				Id: _0x9f6cx1['calendarId']
				, Name: _0x9f6cx1['name'] || _0x9f6cx1['calendarId']
			}
		})
	}
	, onCalendarChange: function (_0x9f6cx1, _0x9f6cx2) {
		_0x9f6cx1['setCalendarId'](_0x9f6cx2)
	}
	, destroy: function () {
		this['calendarStore']['destroy']();
		this['callParent'](arguments)
	}
});
Ext.define('Robo.widget.UndoButton', {
	extend: 'Ext.button.Split'
	, alias: 'widget.roboundobutton'
	, glyph: 'xf0e2@FontAwesome'
	, robo: null
	, transactionList: null
	, type: 'undo'
	, text: 'Undo'
	, disabled: true
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		Ext['apply'](this, _0x9f6cx1);
		if (!this['robo']) {
			throw new Error('`robo` is a required config for the ' + this['$className'])
		};
		this['callParent'](_0x9f6cx1)
	}
	, initComponent: function () {
		var _0x9f6cx1 = this;
		Ext['apply'](this, {
			menu: new Ext['menu'].Menu({
				cls: 'robo-transaction-list'
				, items: this['getTransactionItems']()
				, listeners: {
					click: this['onTransactionClick']
					, scope: this
				}
			})
		});
		this['on']('click', function () {
			_0x9f6cx1['robo'][_0x9f6cx1['type']]()
		});
		this['mon'](_0x9f6cx1['robo'], _0x9f6cx1['type'] + 'queuechange', this['onTransactionQueueChange'], this);
		this['callParent']()
	}
	, onTransactionQueueChange: function (_0x9f6cx2, _0x9f6cx1) {
		this['setDisabled'](_0x9f6cx1['length'] === 0);
		var _0x9f6cx5 = this['menu'];
		_0x9f6cx5['removeAll']();
		_0x9f6cx5['add'](this['getTransactionItems']());
		if (!_0x9f6cx1['length']) {
			_0x9f6cx5['hide']()
		}
	}
	, getTransactionItems: function () {
		var _0x9f6cx2 = this;
		var _0x9f6cx1 = Ext['Array']['map'](this['robo'][this['type'] + 'Queue'], function (_0x9f6cx5) {
			return new Ext['menu'].Item({
				text: _0x9f6cx5['getTitle']()
				, transaction: _0x9f6cx5
				, listeners: {
					activate: _0x9f6cx2['onTransactionItemActivated']
					, deactivate: _0x9f6cx2['onTransactionItemDeActivated']
					, scope: _0x9f6cx2
				}
			})
		});
		if (this['type'] == 'undo') {
			_0x9f6cx1['reverse']()
		};
		return _0x9f6cx1
	}
	, onTransactionClick: function (_0x9f6cx2, _0x9f6cx1) {
		if (!_0x9f6cx1) {
			return
		};
		this['robo'][this['type']](_0x9f6cx1['transaction'])
	}
	, onTransactionItemActivated: function (_0x9f6cx1) {
		this['menu']['items']['each'](function (_0x9f6cx2) {
			if (_0x9f6cx2 == _0x9f6cx1) {
				return false
			};
			if (_0x9f6cx2['rendered']) {
				_0x9f6cx2['el']['addCls'](_0x9f6cx2['activeCls'])
			}
		})
	}
	, onTransactionItemDeActivated: function (_0x9f6cx1) {
		this['menu']['items']['each'](function (_0x9f6cx2) {
			if (_0x9f6cx2 == _0x9f6cx1) {
				return false
			};
			if (_0x9f6cx2['rendered']) {
				_0x9f6cx2['el']['removeCls'](_0x9f6cx2['activeCls'])
			}
		})
	}
});
Ext.define('Robo.widget.RedoButton', {
	extend: 'Robo.widget.UndoButton'
	, alias: 'widget.roboredobutton'
	, glyph: 'xf01e@FontAwesome'
	, type: 'redo'
	, text: 'Redo'
});
Ext.define('Robo.widget.StatusPanel', {
	extend: 'Ext.tree.Panel'
	, alias: 'widget.robostatuspanel'
	, robo: null
	, type: 'undo'
	, constructor: function (_0x9f6cx1) {
		_0x9f6cx1 = _0x9f6cx1 || {};
		Ext['apply'](this, _0x9f6cx1);
		if (!this['robo']) {
			throw new Error('`robo` is a required config for the ' + this['$className'])
		};
		this['callParent'](_0x9f6cx1)
	}
	, initComponent: function () {
		var _0x9f6cx1 = this;
		Ext['apply'](this, {
			rootVisible: false
			, columns: [{
				xtype: 'treecolumn'
				, text: 'Title'
				, dataIndex: 'title'
				, width: 250
			}, {
				text: 'Changed fields'
				, dataIndex: 'fieldNames'
				, flex: 1
				, tdCls: 'fieldnames'
			}]
			, store: {
				fields: ['title', 'fieldNames', 'isActive']
			}
			, viewConfig: {
				getRowClass: Ext['Function']['bind'](this['getActiveRowClass'], this)
			}
		});
		this['mon'](_0x9f6cx1['robo'], _0x9f6cx1['type'] + 'queuechange', this['onTransactionQueueChange'], this);
		this['callParent']()
	}
	, getActiveRowClass: function (_0x9f6cx1, _0x9f6cx3, _0x9f6cx5, _0x9f6cx2) {
		return _0x9f6cx1['get']('isActive') ? 'robo-status-active' : ''
	}
	, onTransactionQueueChange: function (_0x9f6cx5, _0x9f6cx1) {
		var _0x9f6cx3 = this['type'];
		var _0x9f6cx2 = Ext['Array']['map'](_0x9f6cx1, function (_0x9f6cx6, _0x9f6cx4) {
			var _0x9f6cx7 = _0x9f6cx3 == 'undo' ? _0x9f6cx4 == _0x9f6cx1['length'] - 1 : _0x9f6cx4 === 0;
			return {
				leaf: false
				, expanded: true
				, title: _0x9f6cx6['getTitle']()
				, isActive: _0x9f6cx7
				, children: Ext['Array']['map'](_0x9f6cx6['getActions'](), function (_0x9f6cx9) {
					var _0x9f6cx8 = _0x9f6cx9['getRecord']();
					return {
						leaf: true
						, title: _0x9f6cx9['getTitle']()
						, fieldNames: _0x9f6cx9 instanceof Robo['action']['flat']['Update'] ? _0x9f6cx9['fieldNames'].join(', ') : ''
						, isActive: _0x9f6cx7
					}
				})
			}
		});
		this['store']['setRootNode']({
			expanded: true
			, children: _0x9f6cx2
		});
		this['getView']()['scrollTo'](0, Infinity)
	}
});
Ext.define('Ext.ux.Scheduler.app.CrudManagerDomain', {
	extend: 'Ext.app.EventDomain'
	, singleton: true
	, requires: ['Ext.ux.Scheduler.crud.AbstractManager']
	, type: 'crudmanager'
	, prefix: 'crudmanager.'
	, constructor: function () {
		var _0x9f6cx1 = this;
		_0x9f6cx1['callParent']();
		_0x9f6cx1['monitor'](Ext.ux.Scheduler['crud'].AbstractManager)
	}
	, match: function (_0x9f6cx3, _0x9f6cx2) {
		var _0x9f6cx1 = false
			, _0x9f6cx5 = _0x9f6cx3['alias'];
		if (_0x9f6cx2 === '*') {
			_0x9f6cx1 = true
		}
		else {
			if (_0x9f6cx5) {
				_0x9f6cx1 = Ext['Array']['indexOf'](_0x9f6cx5, this['prefix'] + _0x9f6cx2) > -1
			}
		};
		return _0x9f6cx1
	}
});
Ext.define('Ext.ux.Scheduler.crud.encoder.Xml', {
	requires: ['Ext.XTemplate']
	, format: 'xml'
	, stringReplaces: [[/&/g, '&amp;'], [/</g, '&lt;'], [/>/g, '&gt;'], [/"/g, '&quot;']]
	, encodeString: function (_0x9f6cx4) {
		if (!_0x9f6cx4) {
			return _0x9f6cx4
		};
		var _0x9f6cx1 = _0x9f6cx4.toString()
			, _0x9f6cx5 = this['stringReplaces'];
		for (var _0x9f6cx3 = 0, _0x9f6cx2 = _0x9f6cx5['length']; _0x9f6cx3 < _0x9f6cx2; _0x9f6cx3++) {
			_0x9f6cx1 = _0x9f6cx1['replace'](_0x9f6cx5[_0x9f6cx3][0], _0x9f6cx5[_0x9f6cx3][1])
		};
		return _0x9f6cx1
	}
	, encodeRecords: function (_0x9f6cx5) {
		var _0x9f6cx1 = '';
		for (var _0x9f6cx3 = 0, _0x9f6cx2 = _0x9f6cx5['length']; _0x9f6cx3 < _0x9f6cx2; _0x9f6cx3++) {
			_0x9f6cx1 += this['encodeRecord'](_0x9f6cx5[_0x9f6cx3])
		};
		return _0x9f6cx1
	}
	, encodeRecord: function (_0x9f6cx2) {
		var _0x9f6cx1 = '<record>';
		for (var _0x9f6cx5 in _0x9f6cx2) {
			var _0x9f6cx3 = _0x9f6cx2[_0x9f6cx5];
			_0x9f6cx1 += '<field id="' + this['encodeString'](_0x9f6cx5) + '">' + (_0x9f6cx3 && _0x9f6cx3['$store'] ? this['encodeStoreChanges']({
				storeId: _0x9f6cx5
			}, _0x9f6cx3) : this['encodeString'](_0x9f6cx3)) + '</field>'
		};
		_0x9f6cx1 += '</record>';
		return _0x9f6cx1
	}
	, encodeStoreChanges: function (_0x9f6cx2, _0x9f6cx5) {
		var _0x9f6cx1 = '<store id="' + this['encodeString'](_0x9f6cx2['storeId']) + '">';
		if (_0x9f6cx5['added']) {
			_0x9f6cx1 += '<added>' + this['encodeRecords'](_0x9f6cx5['added']) + '</added>'
		};
		if (_0x9f6cx5['updated']) {
			_0x9f6cx1 += '<updated>' + this['encodeRecords'](_0x9f6cx5['updated']) + '</updated>'
		};
		if (_0x9f6cx5['removed']) {
			_0x9f6cx1 += '<removed>' + this['encodeRecords'](_0x9f6cx5['removed']) + '</removed>'
		};
		_0x9f6cx1 += '</store>';
		return _0x9f6cx1
	}
	, encode: function (_0x9f6cx4) {
		var _0x9f6cx1, _0x9f6cx3, _0x9f6cx2, _0x9f6cx5;
		switch (_0x9f6cx4['type']) {
		case 'load':
			_0x9f6cx1 = '<load requestId="' + this['encodeString'](_0x9f6cx4['requestId']) + '">';
			for (_0x9f6cx3 = 0, _0x9f6cx2 = _0x9f6cx4['stores']['length']; _0x9f6cx3 < _0x9f6cx2; _0x9f6cx3++) {
				_0x9f6cx5 = _0x9f6cx4['stores'][_0x9f6cx3];
				if (typeof _0x9f6cx5 === 'string') {
					_0x9f6cx1 += '<store id="' + this['encodeString'](_0x9f6cx5) + '"/>'
				}
				else {
					_0x9f6cx1 += '<store id="' + this['encodeString'](_0x9f6cx5['storeId']) + '" page="' + this['encodeString'](_0x9f6cx5['page']) + '" pageSize="' + this['encodeString'](_0x9f6cx5['pageSize']) + '"/>'
				}
			};
			_0x9f6cx1 += '</load>';
			return _0x9f6cx1;
		case 'sync':
			_0x9f6cx1 = '<sync requestId="' + this['encodeString'](_0x9f6cx4['requestId']) + '" revision="' + this['encodeString'](_0x9f6cx4['revision']) + '">';
			for (_0x9f6cx3 in _0x9f6cx4) {
				if (_0x9f6cx4['hasOwnProperty'](_0x9f6cx3)) {
					_0x9f6cx5 = this['getStore'](_0x9f6cx3);
					if (_0x9f6cx5) {
						_0x9f6cx1 += this['encodeStoreChanges'](_0x9f6cx5, _0x9f6cx4[_0x9f6cx3])
					}
				}
			};
			_0x9f6cx1 += '</sync>';
			break
		};
		return _0x9f6cx1
	}
	, stringToXML: function (_0x9f6cx2) {
		if (!_0x9f6cx2) {
			return
		};
		var _0x9f6cx1;
		if (window['DOMParser']) {
			_0x9f6cx1 = (new DOMParser())['parseFromString'](_0x9f6cx2, 'text/xml')
		}
		else {
			if (window['ActiveXObject']) {
				_0x9f6cx1 = new ActiveXObject('Microsoft.XMLDOM');
				_0x9f6cx1['async'] = false;
				_0x9f6cx1['loadXML'](_0x9f6cx2)
			}
		};
		return _0x9f6cx1
	}
	, decodeRecords: function (_0x9f6cx3) {
		var _0x9f6cx2 = [];
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx3['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			_0x9f6cx2['push'](this['decodeRecord'](_0x9f6cx3[_0x9f6cx5]))
		};
		return _0x9f6cx2
	}
	, decodeRecord: function (_0x9f6cx7) {
		var _0x9f6cx2 = _0x9f6cx7['childNodes']
			, _0x9f6cx1 = {}
			, _0x9f6cx6;
		for (var _0x9f6cx4 = 0, _0x9f6cx5 = _0x9f6cx2['length']; _0x9f6cx4 < _0x9f6cx5; _0x9f6cx4++) {
			var _0x9f6cx8 = _0x9f6cx2[_0x9f6cx4];
			if (_0x9f6cx8['nodeName'] == 'field') {
				_0x9f6cx6 = '';
				if (_0x9f6cx8['firstChild']) {
					var _0x9f6cx3 = this['getElementByTagName'](_0x9f6cx8, 'store');
					_0x9f6cx6 = _0x9f6cx3 ? this['decodeStore'](_0x9f6cx3) : _0x9f6cx8['firstChild']['nodeValue']
				};
				_0x9f6cx1[_0x9f6cx8['getAttribute']('id')] = _0x9f6cx6
			}
		};
		return _0x9f6cx1
	}
	, getElementsByTagName: function (_0x9f6cx7, _0x9f6cx5) {
		var _0x9f6cx4 = _0x9f6cx7['childNodes']
			, _0x9f6cx2 = [];
		for (var _0x9f6cx3 = 0, _0x9f6cx1 = _0x9f6cx4['length']; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
			if (_0x9f6cx4[_0x9f6cx3]['nodeName'] == _0x9f6cx5) {
				_0x9f6cx2['push'](_0x9f6cx4[_0x9f6cx3])
			}
		};
		return _0x9f6cx2
	}
	, getElementByTagName: function (_0x9f6cx4, _0x9f6cx2) {
		var _0x9f6cx3 = _0x9f6cx4['childNodes'];
		for (var _0x9f6cx5 = 0, _0x9f6cx1 = _0x9f6cx3['length']; _0x9f6cx5 < _0x9f6cx1; _0x9f6cx5++) {
			if (_0x9f6cx3[_0x9f6cx5]['nodeName'] == _0x9f6cx2) {
				return _0x9f6cx3[_0x9f6cx5]
			}
		}
	}
	, decodeStore: function (_0x9f6cx1) {
		var _0x9f6cx3 = {}
			, _0x9f6cx5 = this['getElementsByTagName'](_0x9f6cx1, 'rows');
		if (_0x9f6cx5['length']) {
			_0x9f6cx3['rows'] = this['decodeRecords'](this['getElementsByTagName'](_0x9f6cx5[0], 'record'));
			var _0x9f6cx2 = parseInt(_0x9f6cx5[0]['getAttribute']('total'), 10);
			if (isNaN(_0x9f6cx2) || _0x9f6cx2 < _0x9f6cx3['rows']['length']) {
				_0x9f6cx2 = _0x9f6cx3['rows']['length']
			};
			_0x9f6cx3['total'] = _0x9f6cx2
		};
		var _0x9f6cx4 = this['getElementByTagName'](_0x9f6cx1, 'removed');
		if (_0x9f6cx4) {
			_0x9f6cx3['removed'] = this['decodeRecords'](this['getElementsByTagName'](_0x9f6cx4, 'record'))
		};
		return _0x9f6cx3
	}
	, decode: function (_0x9f6cx1) {
		var _0x9f6cx3 = typeof _0x9f6cx1 == 'string' ? this['stringToXML'](_0x9f6cx1) : _0x9f6cx1;
		if (!_0x9f6cx3) {
			return
		};
		var _0x9f6cxa = {}
			, _0x9f6cx4 = _0x9f6cx3['documentElement']
			, _0x9f6cx6 = _0x9f6cx4['getElementsByTagName']('store')
			, _0x9f6cx7, _0x9f6cx8;
		_0x9f6cxa['requestId'] = _0x9f6cx4['getAttribute']('requestId');
		_0x9f6cxa['revision'] = _0x9f6cx4['getAttribute']('revision');
		_0x9f6cxa['success'] = _0x9f6cx4['getAttribute']('success') || 'false';
		_0x9f6cxa['success'] = _0x9f6cxa['success']['toLowerCase']() == 'true';
		if (!_0x9f6cxa['success']) {
			_0x9f6cxa['code'] = _0x9f6cx4['getAttribute']('code');
			var _0x9f6cxc = _0x9f6cx4['getElementsByTagName']('message')[0];
			_0x9f6cxa['message'] = _0x9f6cxc && _0x9f6cxc['firstChild'] && _0x9f6cxc['firstChild']['nodeValue']
		};
		for (var _0x9f6cx5 = 0, _0x9f6cx2 = _0x9f6cx6['length']; _0x9f6cx5 < _0x9f6cx2; _0x9f6cx5++) {
			_0x9f6cx7 = _0x9f6cx6[_0x9f6cx5];
			_0x9f6cx8 = _0x9f6cx7['getAttribute']('id');
			if (this['getStore'](_0x9f6cx8)) {
				_0x9f6cxa[_0x9f6cx8] = this['decodeStore'](_0x9f6cx7)
			}
		};
		return _0x9f6cxa
	}
});
Ext.define('Ext.ux.Scheduler.data.util.AssignmentStoreEventResourcesCache', {
	extend: 'Ext.ux.Scheduler.util.Cache'
	, requires: ['Ext.data.Model']
	, assignmentStore: null
	, assignmentStoreDetacher: null
	, eventStoreDetacher: null
	, resourceStoreDetacher: null
	, constructor: function (_0x9f6cxc) {
		var _0x9f6cxa = this
			, _0x9f6cx7 = _0x9f6cxc['getEventStore']()
			, _0x9f6cxd = _0x9f6cx7 && _0x9f6cx7['getResourceStore']();
		_0x9f6cxa['callParent']();

		function _0x9f6cxb(_0x9f6cx10, _0x9f6cx11) {
			var _0x9f6cx14 = _0x9f6cxa['assignmentStore']['getEventStore']()
				, _0x9f6cx17 = _0x9f6cx14 && _0x9f6cx14['getResourceStore']();
			Ext['Array']['each'](_0x9f6cx11, function (_0x9f6cx15) {
				var _0x9f6cx16 = _0x9f6cx17 && _0x9f6cx17['getModelById'](_0x9f6cx15['getResourceId']());
				if (_0x9f6cx16) {
					_0x9f6cxa['add'](_0x9f6cx15['getEventId'](), _0x9f6cx16)
				}
				else {
					_0x9f6cxa['clear'](_0x9f6cx15['getEventId']())
				}
			})
		}

		function _0x9f6cx2(_0x9f6cx10, _0x9f6cx11) {
			var _0x9f6cx14 = _0x9f6cxa['assignmentStore']['getEventStore']()
				, _0x9f6cx17 = _0x9f6cx14 && _0x9f6cx14['getResourceStore']();
			Ext['Array']['each'](_0x9f6cx11, function (_0x9f6cx15) {
				var _0x9f6cx16 = _0x9f6cx17['getModelById'](_0x9f6cx15['getResourceId']());
				if (_0x9f6cx16) {
					_0x9f6cxa['remove'](_0x9f6cx15['getEventId'](), _0x9f6cx16)
				}
				else {
					_0x9f6cxa['clear'](_0x9f6cx15['getEventId']())
				}
			})
		}

		function _0x9f6cx12(_0x9f6cx1d, _0x9f6cx10, _0x9f6cx18) {
			var _0x9f6cx1b = _0x9f6cx10['resourceIdField']
				, _0x9f6cx19 = _0x9f6cx10['previous'] && _0x9f6cx1b in _0x9f6cx10['previous']
				, _0x9f6cx17 = _0x9f6cx19 && _0x9f6cx10['previous'][_0x9f6cx1b]
				, _0x9f6cx1e = _0x9f6cx10['eventIdField']
				, _0x9f6cx11 = _0x9f6cx10['previous'] && _0x9f6cx1e in _0x9f6cx10['previous']
				, _0x9f6cx14 = _0x9f6cx11 && _0x9f6cx10['previous'][_0x9f6cx1e]
				, _0x9f6cx15 = _0x9f6cxa['assignmentStore']['getEventStore']()
				, _0x9f6cx1c = _0x9f6cx15 && _0x9f6cx15['getResourceStore']()
				, _0x9f6cx16;
			if (_0x9f6cx19 || _0x9f6cx11) {
				_0x9f6cx17 = _0x9f6cx19 ? _0x9f6cx17 : _0x9f6cx10['getResourceId']();
				_0x9f6cx14 = _0x9f6cx11 ? _0x9f6cx14 : _0x9f6cx10['getEventId']();
				_0x9f6cx16 = _0x9f6cx1c['getModelById'](_0x9f6cx17);
				if (_0x9f6cx16) {
					_0x9f6cxa['remove'](_0x9f6cx14, _0x9f6cx16)
				}
				else {
					_0x9f6cxa['clear'](_0x9f6cx14)
				};
				_0x9f6cx16 = _0x9f6cx1c['getModelById'](_0x9f6cx10['getResourceId']());
				if (_0x9f6cx16) {
					_0x9f6cxa['add'](_0x9f6cx10['getEventId'](), _0x9f6cx16)
				}
				else {
					_0x9f6cxa['clear'](_0x9f6cx10['getEventId']())
				}
			}
		}

		function _0x9f6cxe(_0x9f6cx11) {
			_0x9f6cxa['clear']()
		}

		function _0x9f6cx5(_0x9f6cx11, _0x9f6cx10) {
			_0x9f6cxa['clear']();
			_0x9f6cx1(_0x9f6cx10);
			_0x9f6cx3(_0x9f6cx10 && _0x9f6cx10['getResourceStore']())
		}

		function _0x9f6cx13(_0x9f6cx10, _0x9f6cx14, _0x9f6cx17, _0x9f6cx11) {
			_0x9f6cxa['move'](_0x9f6cx17, _0x9f6cx11)
		}

		function _0x9f6cx6(_0x9f6cx10, _0x9f6cx11) {
			Ext['Array']['each'](_0x9f6cx11, function (_0x9f6cx14) {
				_0x9f6cxa['clear'](_0x9f6cx14)
			})
		}

		function _0x9f6cx9() {
			_0x9f6cxa['clear']()
		}

		function _0x9f6cxf(_0x9f6cx11, _0x9f6cx10) {
			_0x9f6cxa['clear']();
			_0x9f6cx3(_0x9f6cx10)
		}

		function _0x9f6cx8(_0x9f6cx11, _0x9f6cx10) {
			Ext['Array']['each'](_0x9f6cx10, function (_0x9f6cx14) {
				_0x9f6cxa['uncache'](_0x9f6cx14)
			})
		}

		function _0x9f6cx4() {
			_0x9f6cxa['clear']()
		}

		function _0x9f6cx1(_0x9f6cx11) {
			Ext['destroy'](_0x9f6cxa['eventStoreDetacher']);
			_0x9f6cxa['eventStoreDetacher'] = _0x9f6cx11 && _0x9f6cx11['on']({
				idchanged: _0x9f6cx13
				, remove: _0x9f6cx6
				, clear: _0x9f6cx9
				, cacheresethint: _0x9f6cx9
				, rootchange: _0x9f6cx9
				, resourcestorechange: _0x9f6cxf
				, priority: 100
				, destroyable: true
			})
		}

		function _0x9f6cx3(_0x9f6cx11) {
			Ext['destory'](_0x9f6cxa['resourceStoreDetacher']);
			_0x9f6cxa['resourceStoreDetacher'] = _0x9f6cx11 && _0x9f6cx11['on']({
				remove: _0x9f6cx8
				, clear: _0x9f6cx4
				, cacheresethint: _0x9f6cx4
				, rootchange: _0x9f6cx4
				, priority: 100
				, destroyable: true
			})
		}
		_0x9f6cxa['assignmentStoreDetacher'] = _0x9f6cxc['on']({
			add: _0x9f6cxb
			, remove: _0x9f6cx2
			, update: _0x9f6cx12
			, clear: _0x9f6cxe
			, cacheresethint: _0x9f6cxe
			, priority: 100
			, destroyable: true
		});
		_0x9f6cxa['assignmentStore'] = _0x9f6cxc
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		Ext['destroyMembers'](_0x9f6cx1, 'assignmentStoreDetacher', 'eventStoreDetacher', 'resourceStoreDetacher');
		_0x9f6cx1['assignmentStore'] = null
	}
	, get: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = this;
		_0x9f6cx2 = _0x9f6cx2 || function () {
			return _0x9f6cx5['assignmentStore']['mapAssignmentsForEvent'](_0x9f6cx1, function _0x9f6cx4(_0x9f6cx7) {
				return _0x9f6cx7['getResource']()
			}, function _0x9f6cx3(_0x9f6cx7) {
				return !!_0x9f6cx7
			})
		};
		return _0x9f6cx5['callParent']([_0x9f6cx1, _0x9f6cx2])
	}
});
Ext.define('Ext.ux.Scheduler.data.util.AssignmentStoreResourceEventsCache', {
	extend: 'Ext.ux.Scheduler.util.Cache'
	, requires: ['Ext.data.Model']
	, assignmentStore: null
	, assignmentStoreDetacher: null
	, eventStoreDetacher: null
	, resourceStoreDetacher: null
	, constructor: function (_0x9f6cxc) {
		var _0x9f6cx13 = this
			, _0x9f6cx7 = _0x9f6cxc['getEventStore']()
			, _0x9f6cxd = _0x9f6cx7 && _0x9f6cx7['getResourceStore']();
		_0x9f6cx13['callParent']();

		function _0x9f6cxb(_0x9f6cx10, _0x9f6cx11) {
			var _0x9f6cx14 = _0x9f6cx13['assignmentStore']['getEventStore']();
			Ext['Array']['each'](_0x9f6cx11, function (_0x9f6cx16) {
				var _0x9f6cx17 = _0x9f6cx14 && _0x9f6cx14['getModelById'](_0x9f6cx16['getEventId']());
				if (_0x9f6cx17) {
					_0x9f6cx13['add'](_0x9f6cx16['getResourceId'](), _0x9f6cx17)
				}
				else {
					_0x9f6cx13['clear'](_0x9f6cx16['getResourceId']())
				}
			})
		}

		function _0x9f6cx2(_0x9f6cx10, _0x9f6cx11) {
			var _0x9f6cx14 = _0x9f6cx13['assignmentStore']['getEventStore']();
			Ext['Array']['each'](_0x9f6cx11, function (_0x9f6cx16) {
				var _0x9f6cx17 = _0x9f6cx14 && _0x9f6cx14['getModelById'](_0x9f6cx16['getEventId']());
				if (_0x9f6cx17) {
					_0x9f6cx13['remove'](_0x9f6cx16['getResourceId'](), _0x9f6cx17)
				}
				else {
					_0x9f6cx13['clear'](_0x9f6cx16['getResourceId']())
				}
			})
		}

		function _0x9f6cx12(_0x9f6cx1c, _0x9f6cx14, _0x9f6cx18) {
			var _0x9f6cx1b = _0x9f6cx14['resourceIdField']
				, _0x9f6cx1d = _0x9f6cx14['previous'] && _0x9f6cx1b in _0x9f6cx14['previous']
				, _0x9f6cx16 = _0x9f6cx1d && _0x9f6cx14['previous'][_0x9f6cx1b]
				, _0x9f6cx1e = _0x9f6cx14['eventIdField']
				, _0x9f6cx11 = _0x9f6cx14['previous'] && _0x9f6cx1e in _0x9f6cx14['previous']
				, _0x9f6cx17 = _0x9f6cx11 && _0x9f6cx14['previous'][_0x9f6cx1e]
				, _0x9f6cx15 = _0x9f6cx13['assignmentStore']['getEventStore']()
				, _0x9f6cx10;
			if (_0x9f6cx1d || _0x9f6cx11) {
				_0x9f6cx16 = _0x9f6cx1d ? _0x9f6cx16 : _0x9f6cx14['getResourceId']();
				_0x9f6cx17 = _0x9f6cx11 ? _0x9f6cx17 : _0x9f6cx14['getEventId']();
				_0x9f6cx10 = _0x9f6cx15 && _0x9f6cx15['getModelById'](_0x9f6cx17);
				if (_0x9f6cx10) {
					_0x9f6cx13['remove'](_0x9f6cx16, _0x9f6cx10)
				}
				else {
					_0x9f6cx13['clear'](_0x9f6cx16)
				};
				_0x9f6cx10 = _0x9f6cx15 && _0x9f6cx15['getModelById'](_0x9f6cx14['getEventId']());
				if (_0x9f6cx10) {
					_0x9f6cx13['add'](_0x9f6cx14['getResourceId'](), _0x9f6cx10)
				}
				else {
					_0x9f6cx13['clear'](_0x9f6cx14['getResourceId']())
				}
			}
		}

		function _0x9f6cxe(_0x9f6cx11) {
			_0x9f6cx13['clear']()
		}

		function _0x9f6cx5(_0x9f6cx11, _0x9f6cx10) {
			_0x9f6cx13['clear']();
			_0x9f6cx1(_0x9f6cx10);
			_0x9f6cx3(_0x9f6cx10 && _0x9f6cx10['getResourceStore']())
		}

		function _0x9f6cx6(_0x9f6cx10, _0x9f6cx11) {
			Ext['Array']['each'](_0x9f6cx11, function (_0x9f6cx14) {
				_0x9f6cx13['uncache'](_0x9f6cx14)
			})
		}

		function _0x9f6cx9() {
			_0x9f6cx13['clear']()
		}

		function _0x9f6cxf(_0x9f6cx11, _0x9f6cx10) {
			_0x9f6cx13['clear']();
			_0x9f6cx3(_0x9f6cx10)
		}

		function _0x9f6cxa(_0x9f6cx10, _0x9f6cx14, _0x9f6cx17, _0x9f6cx11) {
			_0x9f6cx13['move'](_0x9f6cx17, _0x9f6cx11)
		}

		function _0x9f6cx8(_0x9f6cx11, _0x9f6cx10) {
			Ext['Array']['each'](_0x9f6cx10, function (_0x9f6cx14) {
				_0x9f6cx13['clear'](_0x9f6cx14)
			})
		}

		function _0x9f6cx4() {
			_0x9f6cx13['clear']()
		}

		function _0x9f6cx1(_0x9f6cx11) {
			Ext['destroy'](_0x9f6cx13['eventStoreDetacher']);
			_0x9f6cx13['eventStoreDetacher'] = _0x9f6cx11 && _0x9f6cx11['on']({
				remove: _0x9f6cx6
				, cacheresethint: _0x9f6cx9
				, clear: _0x9f6cx9
				, rootchange: _0x9f6cx9
				, resourcestorechange: _0x9f6cxf
				, priority: 100
				, destroyable: true
			})
		}

		function _0x9f6cx3(_0x9f6cx11) {
			Ext['destroy'](_0x9f6cx13['resourceStoreDetacher']);
			_0x9f6cx13['resourceStoreDetacher'] = _0x9f6cx11 && _0x9f6cx11['on']({
				idchanged: _0x9f6cxa
				, remove: _0x9f6cx8
				, cacheresethint: _0x9f6cx4
				, clear: _0x9f6cx4
				, rootchange: _0x9f6cx4
				, priority: 100
				, destroyable: true
			})
		}
		_0x9f6cx13['assignmentStoreDetacher'] = _0x9f6cxc['on']({
			add: _0x9f6cxb
			, remove: _0x9f6cx2
			, update: _0x9f6cx12
			, cacheresethint: _0x9f6cxe
			, clear: _0x9f6cxe
			, eventstorechange: _0x9f6cx5
			, priority: 100
			, destroyable: true
		});
		_0x9f6cx1(_0x9f6cx7);
		_0x9f6cx3(_0x9f6cxd);
		_0x9f6cx13['assignmentStore'] = _0x9f6cxc
	}
	, destroy: function () {
		var _0x9f6cx1 = this;
		Ext['destroyMembers'](_0x9f6cx1, 'assignmentStoreDetacher', 'eventStoreDetacher', 'resourceStoreDetacher');
		_0x9f6cx1['assignmentStore'] = null
	}
	, get: function (_0x9f6cx1, _0x9f6cx2) {
		var _0x9f6cx5 = this;
		_0x9f6cx2 = _0x9f6cx2 || function () {
			return _0x9f6cx5['assignmentStore']['mapAssignmentsForResource'](_0x9f6cx1, function _0x9f6cx4(_0x9f6cx7) {
				return _0x9f6cx7['getEvent']()
			}, function _0x9f6cx3(_0x9f6cx7) {
				return !!_0x9f6cx7
			})
		};
		return _0x9f6cx5['callParent']([_0x9f6cx1, _0x9f6cx2])
	}
});
Ext.define('Ext.ux.Scheduler.patches.BufferedRenderer', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.plugin.BufferedRenderer'
	, minVersion: '6.0.2'
	, overrides: {
		onRangeFetched: function (_0x9f6cx4, _0x9f6cx6, _0x9f6cx5, _0x9f6cx7, _0x9f6cx3) {
			if (this['view']['all']['endIndex'] < this['view']['all']['startIndex']) {
				return
			};
			var _0x9f6cx2 = this['view']['onFocusLeave'];
			this['view']['onFocusLeave'] = function () {
				_0x9f6cx2['call'](this, {
					isScroll: true
				})
			};
			var _0x9f6cx1 = this['callParent'](arguments);
			this['view']['onFocusLeave'] = _0x9f6cx2;
			return _0x9f6cx1
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.BufferedRenderer_6_2_1', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.plugin.BufferedRenderer'
	, minVersion: '6.2.1'
	, applyFn: function () {
		if (Ext['isIE11']) {
			Ext.define(null, {
				override: 'Ext.grid.plugin.BufferedRenderer'
				, getFirstVisibleRowIndex: function (_0x9f6cxa, _0x9f6cx5, _0x9f6cx2, _0x9f6cx6) {
					var _0x9f6cx8 = this
						, _0x9f6cx9 = _0x9f6cx8['view']
						, _0x9f6cxb = _0x9f6cx9['all']
						, _0x9f6cx1 = _0x9f6cxb['elements']
						, _0x9f6cx3 = _0x9f6cx8['viewClientHeight']
						, _0x9f6cx7, _0x9f6cx13, _0x9f6cxc = _0x9f6cx8['bodyTop'];
					if (_0x9f6cxb['getCount']() && _0x9f6cx8['variableRowHeight']) {
						if (!arguments['length']) {
							_0x9f6cxa = _0x9f6cxb['startIndex'];
							_0x9f6cx5 = _0x9f6cxb['endIndex'];
							_0x9f6cx2 = _0x9f6cx8['scrollTop'];
							_0x9f6cx6 = _0x9f6cx2 + _0x9f6cx3;
							if (_0x9f6cxc > _0x9f6cx6 || _0x9f6cxc + _0x9f6cx8['bodyHeight'] < _0x9f6cx2) {
								_0x9f6cx8['teleported'] = true;
								return Math['floor'](_0x9f6cx8['scrollTop'] / _0x9f6cx8['rowHeight'])
							};
							_0x9f6cx7 = _0x9f6cxa + Math['min'](_0x9f6cx8['numFromEdge'] + ((_0x9f6cx8['lastScrollDirection'] === -1) ? _0x9f6cx8['leadingBufferZone'] : _0x9f6cx8['trailingBufferZone']), Math['floor']((_0x9f6cx5 - _0x9f6cxa) / 2))
						}
						else {
							if (_0x9f6cxa === _0x9f6cx5) {
								return _0x9f6cx5
							};
							_0x9f6cx7 = _0x9f6cxa + Math['floor']((_0x9f6cx5 - _0x9f6cxa) / 2)
						};
						var _0x9f6cx4 = _0x9f6cx1[_0x9f6cx7];
						_0x9f6cx13 = _0x9f6cxc + _0x9f6cx4['offsetTop'];
						if (_0x9f6cx13 + _0x9f6cx4['offsetHeight'] <= _0x9f6cx2 && _0x9f6cx4['offsetHeight']) {
							return _0x9f6cx8['getFirstVisibleRowIndex'](_0x9f6cx7 + 1, _0x9f6cx5, _0x9f6cx2, _0x9f6cx6)
						};
						if (_0x9f6cx13 <= _0x9f6cx2) {
							return _0x9f6cx7
						}
						else {
							if (_0x9f6cx7 !== _0x9f6cxa) {
								return _0x9f6cx8['getFirstVisibleRowIndex'](_0x9f6cxa, _0x9f6cx7 - 1, _0x9f6cx2, _0x9f6cx6)
							}
						}
					};
					return Math['floor'](_0x9f6cx8['scrollTop'] / _0x9f6cx8['rowHeight'])
				}
			})
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.CellContext', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.CellContext'
	, minVersion: '6.0.0'
	, maxVersion: '6.2.0'
	, applyFn: function () {
		var _0x9f6cx1 = {
			setAll: function (_0x9f6cx5, _0x9f6cx3, _0x9f6cx4, _0x9f6cx2, _0x9f6cx6) {
				var _0x9f6cx7 = this;
				if (_0x9f6cx6 && _0x9f6cx4 == -1 && _0x9f6cx5 !== _0x9f6cx7['view']) {
					_0x9f6cx5 = _0x9f6cx7['view'];
					_0x9f6cx4 = _0x9f6cx5['getVisibleColumnManager']()['indexOf'](_0x9f6cx6)
				};
				return this['callParent'](arguments)
			}
		};
		if (Ext['getVersion']()['isGreaterThanOrEqual']('6.0.1')) {
			_0x9f6cx1['setPosition'] = function (_0x9f6cx5, _0x9f6cx2) {
				_0x9f6cx5 = _0x9f6cx5 || 0;
				_0x9f6cx2 = _0x9f6cx2 || 0;
				return this['callParent'](arguments)
			}
		};
		Ext['override'](Ext['grid'].CellContext, _0x9f6cx1)
	}
});
Ext.define('Ext.ux.Scheduler.patches.CellContext_6_2_0', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, minVersion: '6.2.0'
	, maxVersion: '6.2.1'
	, target: 'Ext.grid.CellContext'
	, overrides: {
		setView: function (_0x9f6cx1) {
			this['view'] = _0x9f6cx1;
			this['refresh']()
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.CellEditing', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.plugin.CellEditing'
	, maxVersion: '6.0.2'
	, overrides: {
		activateCell: function (_0x9f6cx1) {
			var _0x9f6cx5 = this['callParent'](arguments);
			if (!!_0x9f6cx5) {
				var _0x9f6cx2 = this['getEditor'](_0x9f6cx1['record'], _0x9f6cx1['column']);
				if (_0x9f6cx2) {
					_0x9f6cx2['el']['skipGarbageCollection'] = true;
					_0x9f6cx2['el']['select']('*')['each'](function (_0x9f6cx3) {
						Ext['get'](_0x9f6cx3)['skipGarbageCollection'] = true
					})
				}
			};
			return _0x9f6cx5
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.CellEditor', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.CellEditor'
	, minVersion: '6.0.2'
	, maxVersion: '6.2.1'
	, overrides: {
		onEditComplete: function (_0x9f6cx2, _0x9f6cx1) {
			var _0x9f6cx3 = this
				, _0x9f6cx5 = Ext['Element']['getActiveElement']();
			_0x9f6cx3['editing'] = false;
			_0x9f6cx3['boundEl'] = _0x9f6cx3['context']['getCell']();
			if (_0x9f6cx3['boundEl']) {
				_0x9f6cx3['restoreCell']();
				if (_0x9f6cx3['boundEl']['contains'](_0x9f6cx5) && _0x9f6cx3['boundEl']['dom'] !== _0x9f6cx5) {
					_0x9f6cx3['boundEl']['focus']()
				}
			};
			if (!_0x9f6cx2) {
				_0x9f6cx3['cacheElement']()
			};
			_0x9f6cx3['superclass']['onEditComplete']['apply'](_0x9f6cx3, arguments);
			if (_0x9f6cx1) {
				_0x9f6cx3['editingPlugin']['cancelEdit'](_0x9f6cx3)
			}
			else {
				_0x9f6cx3['editingPlugin']['onEditComplete'](_0x9f6cx3, _0x9f6cx3['getValue'](), _0x9f6cx3['startValue'])
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.DomScroller', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.scroll.DomScroller'
	, maxVersion: '6.2.0'
	, overrides: {
		privates: {
			convertX: function (_0x9f6cx1) {
				if (_0x9f6cx1 == null) {
					return null
				};
				return this['callParent'](arguments)
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.DragZone', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.dd.DragZone'
	, minVersion: '6.2.0'
	, overrides: {
		unreg: function () {
			try {
				this['callParent'](arguments)
			}
			catch (a) {}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.Element_6_5', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: ['Ext.dom.Element']
	, minVersion: '6.5.0'
	, maxVersion: '6.5.1'
	, applyFn: function () {
		if (Ext['isIE10p']) {
			Ext['override'](Ext['dom'].Element, {
				selectText: function () {
					try {
						this['callParent'](arguments)
					}
					catch (a) {}
				}
			})
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.Explorer', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: ['Ext.util.CSS']
	, minVersion: '6.0.0'
	, maxVersion: '6.0.1'
	, applyFn: function () {
		if (Ext['isIE9m']) {
			Ext['util']['CSS']['createStyleSheet']('.' + Ext['baseCSSPrefix'] + 'column-header-trigger { z-index: 10; }')
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.LockableGridEmptyText', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.locking.Lockable'
	, minVersion: '6.2.0'
	, maxVersion: '6.4.9'
	, reportUrl: 'https://www.sencha.com/forum/showthread.php?338759-Lockable-grid-empty-text-is-not-visible-due-to-lockable-sync-skipping&p=1177730'
	, obsoleteTestName: 'patches/006_lockable_grid_empty_text.t.js'
	, description: ['Lockable grid skips locked/normal grid layout synchronization in case there\'re no rows rendered', 'This breaks empty text display, the element is attached to corresponding grid view but it\'s occluded', 'and thus isn\'t visible, due to layout synchronization syncking skip.'].join(' ')
	, overrides: {
		syncLockableLayout: function () {
			var _0x9f6cx1 = this;
			_0x9f6cx1['callParent']();
			if (!_0x9f6cx1['store']['getCount']() && (_0x9f6cx1['lockedGrid']['getEmptyText']() || _0x9f6cx1['normalGrid']['getEmptyText']()) && !_0x9f6cx1['afterLayoutListener']) {
				_0x9f6cx1['afterLayoutListener'] = Ext['on']({
					afterlayout: _0x9f6cx1['doSyncLockableLayout']
					, scope: _0x9f6cx1
					, single: true
				})
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.RowSynchronizer', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.grid.locking.RowSynchronizer'
	, minVersion: '6.0.0'
	, maxVersion: '6.0.1'
	, overrides: {
		finish: function (_0x9f6cx1) {
			if (!_0x9f6cx1) {
				return
			};
			return this['callParent'](arguments)
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.TablePanel_6_2_1', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.panel.Table'
	, minVersion: '6.2.1'
	, overrides: {
		privates: {
			initFocusableElement: function () {}
			, doEnsureVisible: function (_0x9f6cx7, _0x9f6cxf) {
				if (this['lockable']) {
					return this['ensureLockedVisible'](_0x9f6cx7, _0x9f6cxf)
				};
				if (typeof _0x9f6cx7 !== 'number' && !_0x9f6cx7['isEntity']) {
					_0x9f6cx7 = this['store']['getById'](_0x9f6cx7)
				};
				var _0x9f6cx9 = this
					, _0x9f6cxc = _0x9f6cx9['getView']()
					, _0x9f6cx3 = _0x9f6cxc['getNode'](_0x9f6cx7)
					, _0x9f6cx6 = _0x9f6cx9['ownerGrid']['lockable']
					, _0x9f6cxb, _0x9f6cxe, _0x9f6cx1, _0x9f6cx2, _0x9f6cxa, _0x9f6cxd, _0x9f6cx8, _0x9f6cx4, _0x9f6cx5, _0x9f6cx13;
				if (_0x9f6cxf) {
					_0x9f6cxb = _0x9f6cxf['callback'];
					_0x9f6cxe = _0x9f6cxf['scope'];
					_0x9f6cx1 = _0x9f6cxf['animate'];
					_0x9f6cx2 = _0x9f6cxf['highlight'];
					_0x9f6cxa = _0x9f6cxf['select'];
					_0x9f6cxd = _0x9f6cxf['focus'];
					_0x9f6cx5 = _0x9f6cxf['column']
				};
				if (_0x9f6cx9['deferredEnsureVisible']) {
					_0x9f6cx9['deferredEnsureVisible']['destroy']()
				};
				if (!_0x9f6cxc['componentLayoutCounter']) {
					_0x9f6cx9['deferredEnsureVisible'] = _0x9f6cxc['on']({
						resize: _0x9f6cx9['doEnsureVisible']
						, args: Ext['Array']['slice'](arguments)
						, scope: _0x9f6cx9
						, single: true
						, destroyable: true
					});
					return
				};
				if (typeof _0x9f6cx5 === 'number') {
					_0x9f6cx5 = _0x9f6cx9['ownerGrid']['getVisibleColumnManager']()['getColumns']()[_0x9f6cx5]
				};
				if (_0x9f6cx3) {
					_0x9f6cx8 = _0x9f6cx6 ? _0x9f6cx9['ownerGrid']['getScrollable']() : _0x9f6cxc['getScrollable']();
					if (_0x9f6cx8) {
						if (_0x9f6cx5) {
							_0x9f6cx13 = Ext['fly'](_0x9f6cx3)['selectNode'](_0x9f6cx5['getCellSelector']())
						};
						if (_0x9f6cx6 && _0x9f6cx5) {
							_0x9f6cx8['scrollIntoView'](_0x9f6cx3, false);
							_0x9f6cxc['getScrollable']()['scrollIntoView'](_0x9f6cx13 || _0x9f6cx3, true, _0x9f6cx1, _0x9f6cx2)
						}
						else {
							_0x9f6cx8['scrollIntoView'](_0x9f6cx13 || _0x9f6cx3, !!_0x9f6cx5, _0x9f6cx1, _0x9f6cx2)
						}
					};
					if (!_0x9f6cx7['isEntity']) {
						_0x9f6cx7 = _0x9f6cxc['getRecord'](_0x9f6cx3)
					};
					if (_0x9f6cxa) {
						_0x9f6cxc['getSelectionModel']()['select'](_0x9f6cx7)
					};
					if (_0x9f6cxd) {
						_0x9f6cxc['getNavigationModel']()['setPosition'](_0x9f6cx7, 0)
					};
					Ext['callback'](_0x9f6cxb, _0x9f6cxe || _0x9f6cx9, [true, _0x9f6cx7, _0x9f6cx3])
				}
				else {
					if (_0x9f6cxc['bufferedRenderer']) {
						_0x9f6cxc['bufferedRenderer']['scrollTo'](_0x9f6cx7, {
							animate: _0x9f6cx1
							, highlight: _0x9f6cx2
							, select: _0x9f6cxa
							, focus: _0x9f6cxd
							, column: _0x9f6cx5
							, callback: function (_0x9f6cx10, _0x9f6cx12, _0x9f6cx11) {
								Ext['callback'](_0x9f6cxb, _0x9f6cxe || _0x9f6cx9, [true, _0x9f6cx12, _0x9f6cx11])
							}
						})
					}
					else {
						Ext['callback'](_0x9f6cxb, _0x9f6cxe || _0x9f6cx9, [false, null])
					}
				}
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.TableView', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.view.Table'
	, minVersion: '6.0.1'
	, maxVersion: '6.0.1.9999'
	, overrides: {
		suspendCellEditing: function (_0x9f6cx1) {
			var _0x9f6cx5 = _0x9f6cx1
				, _0x9f6cx2 = _0x9f6cx5['activeEditor'];
			if (_0x9f6cx2 && _0x9f6cx2['editing']) {
				_0x9f6cx5['suspendedEditor'] = _0x9f6cx2;
				_0x9f6cx5['suspendEvents']();
				_0x9f6cx2['suspendEvents']();
				_0x9f6cx2['cancelEdit'](true);
				_0x9f6cx2['resumeEvents']();
				_0x9f6cx5['resumeEvents']()
			}
		}
		, resumeCellEditing: function (_0x9f6cx5, _0x9f6cx2) {
			var _0x9f6cx4 = _0x9f6cx5
				, _0x9f6cx3 = _0x9f6cx4['activeEditor'] = _0x9f6cx4['suspendedEditor']
				, _0x9f6cx1;
			if (_0x9f6cx3) {
				_0x9f6cx4['suspendEvents']();
				_0x9f6cx3['suspendEvents']();
				_0x9f6cx1 = _0x9f6cx4['activateCell'](_0x9f6cx2, true, true);
				_0x9f6cx3['field'] && _0x9f6cx3['field']['focus'](false, true);
				_0x9f6cx3['resumeEvents']();
				_0x9f6cx4['resumeEvents']()
			};
			return _0x9f6cx1
		}
		, suspendActionableMode: function () {
			var _0x9f6cx4 = this
				, _0x9f6cx2 = _0x9f6cx4['grid']['actionables']
				, _0x9f6cx1 = _0x9f6cx2['length']
				, _0x9f6cx3;
			for (_0x9f6cx3 = 0; _0x9f6cx3 < _0x9f6cx1; _0x9f6cx3++) {
				var _0x9f6cx5 = _0x9f6cx2[_0x9f6cx3];
				if (Ext['grid']['plugin']['CellEditing'] && _0x9f6cx5 instanceof Ext['grid']['plugin']['CellEditing']) {
					_0x9f6cx4['suspendCellEditing'](_0x9f6cx5)
				}
			}
		}
		, resumeActionableMode: function (_0x9f6cx5) {
			var _0x9f6cx6 = this
				, _0x9f6cx3 = _0x9f6cx6['grid']['actionables']
				, _0x9f6cx2 = _0x9f6cx3['length']
				, _0x9f6cx7, _0x9f6cx1;
			_0x9f6cx6['toggleChildrenTabbability'](false);
			for (_0x9f6cx7 = 0; _0x9f6cx7 < _0x9f6cx2; _0x9f6cx7++) {
				var _0x9f6cx4 = _0x9f6cx3[_0x9f6cx7];
				if (!_0x9f6cx1 && Ext['grid']['plugin']['CellEditing'] && _0x9f6cx4 instanceof Ext['grid']['plugin']['CellEditing']) {
					_0x9f6cx1 = _0x9f6cx6['resumeCellEditing'](_0x9f6cx4, _0x9f6cx5)
				}
			};
			if (!_0x9f6cx1) {
				_0x9f6cx6['activateCell'](_0x9f6cx5)
			}
		}
		, saveFocusState: function () {
			var _0x9f6cx7 = this
				, _0x9f6cx6 = _0x9f6cx7['dataSource']
				, _0x9f6cx1 = _0x9f6cx7['actionableMode']
				, _0x9f6cx5 = _0x9f6cx7['getNavigationModel']()
				, _0x9f6cx3 = _0x9f6cx1 ? _0x9f6cx7['actionPosition'] : _0x9f6cx5['getPosition'](true)
				, _0x9f6cx2 = Ext['Element']['getActiveElement'](true)
				, _0x9f6cx9 = _0x9f6cx3 && _0x9f6cx3['view'] === _0x9f6cx7 && _0x9f6cx3['getCell']()
				, _0x9f6cx4, _0x9f6cx8;
			if (_0x9f6cx9 && _0x9f6cx9['contains'](_0x9f6cx2)) {
				_0x9f6cx3 = _0x9f6cx3['clone']();
				_0x9f6cx2['suspendFocusEvents']();
				if (_0x9f6cx1) {
					_0x9f6cx7['suspendActionableMode']()
				}
				else {
					_0x9f6cx5['setPosition']()
				};
				_0x9f6cx2['resumeFocusEvents']();
				return function () {
					if (_0x9f6cx6['getCount']()) {
						_0x9f6cx4 = Math['min'](_0x9f6cx3['rowIdx'], _0x9f6cx7['all']['getCount']() - 1);
						_0x9f6cx8 = Math['min'](_0x9f6cx3['colIdx'], _0x9f6cx7['getVisibleColumnManager']()['getColumns']()['length'] - 1);
						_0x9f6cx3 = new Ext['grid'].CellContext(_0x9f6cx7)['setPosition'](_0x9f6cx6['contains'](_0x9f6cx3['record']) ? _0x9f6cx3['record'] : _0x9f6cx4, _0x9f6cx8);
						if (_0x9f6cx1) {
							_0x9f6cx7['resumeActionableMode'](_0x9f6cx3)
						}
						else {
							_0x9f6cx5['setPosition'](_0x9f6cx3, null, null, null, true)
						}
					}
					else {
						_0x9f6cx3['column']['focus']()
					}
				}
			};
			return Ext['emptyFn']
		}
		, activateCell: function () {
			return true
		}
		, onFocusEnter: function (_0x9f6cx1) {
			if (!Ext['fly'](_0x9f6cx1['target'])['hasCls']('sch-event')) {
				this['callParent'](arguments)
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.TableView2', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.view.Table'
	, minVersion: '6.0.2'
	, maxVersion: '6.2.0'
	, overrides: {
		privates: {
			setActionableMode: function (_0x9f6cx8, _0x9f6cx7) {
				var _0x9f6cxa = this
					, _0x9f6cx1 = _0x9f6cxa['getNavigationModel']()
					, _0x9f6cx5, _0x9f6cx13 = _0x9f6cxa['grid']['actionables']
					, _0x9f6cx6 = _0x9f6cx13['length']
					, _0x9f6cx3, _0x9f6cx4, _0x9f6cx2, _0x9f6cxb = false
					, _0x9f6cxc;
				if (_0x9f6cxa['actionableMode'] === _0x9f6cx8) {
					if (!_0x9f6cx8 || _0x9f6cx7['isEqual'](_0x9f6cxa['actionPosition'])) {
						return false
					}
				};
				if (_0x9f6cx8) {
					if (_0x9f6cx7 && (_0x9f6cx7['view'] === _0x9f6cxa || (_0x9f6cx7['view'] === (_0x9f6cxc = _0x9f6cxa['lockingPartner']) && _0x9f6cxc['actionableMode']))) {
						_0x9f6cxb = _0x9f6cxa['activateCell'](_0x9f6cx7)
					};
					return _0x9f6cxb
				}
				else {
					_0x9f6cx5 = Ext['fly'](Ext['Element']['getActiveElement']());
					if (_0x9f6cxa['el']['contains'](_0x9f6cx5)) {
						_0x9f6cx4 = (_0x9f6cxa['actionPosition'] && _0x9f6cxa['actionPosition']['record']) || _0x9f6cxa['getRecord'](_0x9f6cx5);
						_0x9f6cx2 = _0x9f6cxa['getHeaderByCell'](_0x9f6cx5['findParent'](_0x9f6cxa['getCellSelector']()));
						if (!_0x9f6cx7) {
							_0x9f6cx7 = new Ext['grid'].CellContext(_0x9f6cxa)['setPosition'](_0x9f6cx4 || 0, _0x9f6cx2 || 0)
						};
						_0x9f6cxa['_leavingActionableMode'] = true;
						_0x9f6cx7['getCell']()['focus']();
						_0x9f6cxa['_leavingActionableMode'] = false;
						_0x9f6cx5 = Ext['fly'](Ext['Element']['getActiveElement']());
						if (!(_0x9f6cxa['el']['contains'](_0x9f6cx5) && _0x9f6cx5['is'](_0x9f6cxa['getCellSelector']()))) {
							_0x9f6cx7 = null
						}
					};
					for (_0x9f6cx3 = 0; _0x9f6cx3 < _0x9f6cx6; _0x9f6cx3++) {
						if (_0x9f6cx13[_0x9f6cx3]['deactivate']) {
							_0x9f6cx13[_0x9f6cx3]['deactivate']()
						}
					};
					if (_0x9f6cxa['actionRow']) {
						_0x9f6cxa['actionRow']['saveTabbableState']({
							skipSelf: true
							, includeSaved: false
						})
					};
					if (_0x9f6cxa['destroyed']) {
						return false
					};
					_0x9f6cxa['actionableMode'] = _0x9f6cxa['ownerGrid']['actionableMode'] = false;
					_0x9f6cxa['actionPosition'] = _0x9f6cx1['actionPosition'] = _0x9f6cxa['actionRow'] = null;
					if (_0x9f6cx7) {
						_0x9f6cx1['setPosition'](_0x9f6cx7)
					}
				}
			}
		}
		, saveFocusState: function () {
			var _0x9f6cx7 = this
				, _0x9f6cx6 = _0x9f6cx7['dataSource']
				, _0x9f6cx1 = _0x9f6cx7['actionableMode']
				, _0x9f6cx5 = _0x9f6cx7['getNavigationModel']()
				, _0x9f6cx3 = _0x9f6cx1 ? _0x9f6cx7['actionPosition'] : _0x9f6cx5['getPosition'](true)
				, _0x9f6cx2 = Ext['Element']['getActiveElement'](true)
				, _0x9f6cx9 = _0x9f6cx3 && _0x9f6cx3['view'] === _0x9f6cx7 && _0x9f6cx3['getCell']()
				, _0x9f6cx4, _0x9f6cx8;
			if (_0x9f6cx9 && _0x9f6cx9['contains'](_0x9f6cx2)) {
				_0x9f6cx3 = _0x9f6cx3['clone']();
				_0x9f6cx2['suspendFocusEvents']();
				if (_0x9f6cx1) {
					_0x9f6cx7['suspendActionableMode']()
				}
				else {
					_0x9f6cx5['setPosition']()
				};
				_0x9f6cx2['resumeFocusEvents']();
				return function () {
					if (_0x9f6cx6['getCount']()) {
						_0x9f6cx4 = Math['min'](_0x9f6cx3['rowIdx'], _0x9f6cx7['all']['getCount']() - 1);
						_0x9f6cx8 = Math['min'](_0x9f6cx3['colIdx'], _0x9f6cx7['getVisibleColumnManager']()['getColumns']()['length'] - 1);
						_0x9f6cx3 = new Ext['grid'].CellContext(_0x9f6cx7)['setPosition'](_0x9f6cx6['contains'](_0x9f6cx3['record']) ? _0x9f6cx3['record'] : _0x9f6cx4, _0x9f6cx8);
						if (_0x9f6cx1 && !_0x9f6cx7['_leavingActionableMode']) {
							_0x9f6cx7['resumeActionableMode'](_0x9f6cx3)
						}
						else {
							_0x9f6cx5['setPosition'](_0x9f6cx3, null, null, null, true)
						}
					}
					else {
						_0x9f6cx3['column']['focus']()
					}
				}
			};
			return Ext['emptyFn']
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.TableView_6_0_2', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.view.Table'
	, minVersion: '6.0.2'
	, maxVersion: '6.0.3'
	, overrides: {
		handleUpdate: function (_0x9f6cx5, _0x9f6cx1c, _0x9f6cx16, _0x9f6cx11, _0x9f6cx26, _0x9f6cx21) {
			_0x9f6cx16 = _0x9f6cx16 || Ext['data']['Model']['EDIT'];
			var _0x9f6cx8 = this
				, _0x9f6cx25 = _0x9f6cx8['store']['indexOf'](_0x9f6cx1c)
				, _0x9f6cx22 = _0x9f6cx8['rowTpl']
				, _0x9f6cx18 = _0x9f6cx8['markDirty']
				, _0x9f6cx14 = _0x9f6cx8['dirtyCls']
				, _0x9f6cx1e = _0x9f6cx16 !== Ext['data']['Model']['EDIT']
				, _0x9f6cx17 = []
				, _0x9f6cxe = _0x9f6cx8['variableRowHeight']
				, _0x9f6cx2 = 0
				, _0x9f6cx1d = _0x9f6cx8['ownerCt']
				, _0x9f6cx12 = _0x9f6cx8['cellFly'] || (_0x9f6cx8['self']['prototype']['cellFly'] = new Ext['dom'].Fly())
				, _0x9f6cx1f, _0x9f6cx4, _0x9f6cx3, _0x9f6cx7, _0x9f6cx1, _0x9f6cxf, _0x9f6cx24, _0x9f6cx20, _0x9f6cx6, _0x9f6cx1a, _0x9f6cxa, _0x9f6cx23, _0x9f6cxd, _0x9f6cx10, _0x9f6cxb, _0x9f6cx19, _0x9f6cx15, _0x9f6cx1b, _0x9f6cxc, _0x9f6cx13;
			if (_0x9f6cx8['viewReady']) {
				_0x9f6cx1f = _0x9f6cx8['getNodeByRecord'](_0x9f6cx1c);
				if (_0x9f6cx1f) {
					if (_0x9f6cx1c['isCollapsedPlaceholder']) {
						Ext['fly'](_0x9f6cx1f)['syncContent'](_0x9f6cx8['createRowElement'](_0x9f6cx1c, _0x9f6cx8['indexOfRow'](_0x9f6cx1c)));
						return
					};
					_0x9f6cx20 = _0x9f6cx8['overItemCls'];
					_0x9f6cx6 = _0x9f6cx8['ownerCt']['getVisibleColumnManager']()['getColumns']();
					if (_0x9f6cx21) {
						_0x9f6cx17 = _0x9f6cx6;
						_0x9f6cx2 = 1
					}
					else {
						for (_0x9f6cx23 = 0, _0x9f6cxa = _0x9f6cx6['length']; _0x9f6cx23 < _0x9f6cxa; _0x9f6cx23++) {
							_0x9f6cx1a = _0x9f6cx6[_0x9f6cx23];
							if (_0x9f6cx1a['preventUpdate']) {
								_0x9f6cx10 = Ext['fly'](_0x9f6cx1f)['down'](_0x9f6cx1a['getCellSelector'](), true);
								if (_0x9f6cx10 && !_0x9f6cx1e && _0x9f6cx18) {
									_0x9f6cx12['attach'](_0x9f6cx10);
									if (_0x9f6cx1c['isModified'](_0x9f6cx1a['dataIndex'])) {
										_0x9f6cx12['addCls'](_0x9f6cx14)
									}
									else {
										_0x9f6cx12['removeCls'](_0x9f6cx14)
									}
								}
							}
							else {
								_0x9f6cxd = _0x9f6cx8['shouldUpdateCell'](_0x9f6cx1c, _0x9f6cx1a, _0x9f6cx11);
								if (_0x9f6cxd) {
									_0x9f6cx2 = _0x9f6cx2 | _0x9f6cxd;
									_0x9f6cx17[_0x9f6cx17['length']] = _0x9f6cx1a;
									_0x9f6cxe = _0x9f6cxe || _0x9f6cx1a['variableRowHeight']
								}
							}
						}
					};
					_0x9f6cx8['fireEvent']('beforeitemupdate', _0x9f6cx1c, _0x9f6cx25, _0x9f6cx1f, _0x9f6cx17);
					if (_0x9f6cx8['getRowClass'] || !_0x9f6cx8['getRowFromItem'](_0x9f6cx1f) || (_0x9f6cx2 & 1) || (_0x9f6cx1f['tBodies'][0]['childNodes']['length'] > 1)) {
						_0x9f6cxc = _0x9f6cx1f['_extData'];
						_0x9f6cx3 = _0x9f6cx8['createRowElement'](_0x9f6cx1c, _0x9f6cx8['indexOfRow'](_0x9f6cx1c), _0x9f6cx17);
						if (Ext['fly'](_0x9f6cx1f, '_internal')['hasCls'](_0x9f6cx20)) {
							Ext['fly'](_0x9f6cx3)['addCls'](_0x9f6cx20)
						};
						if (Ext['isIE9m'] && _0x9f6cx1f['mergeAttributes']) {
							_0x9f6cx1f['mergeAttributes'](_0x9f6cx3, true)
						}
						else {
							_0x9f6cx7 = _0x9f6cx3['attributes'];
							_0x9f6cx1 = _0x9f6cx7['length'];
							for (_0x9f6cx24 = 0; _0x9f6cx24 < _0x9f6cx1; _0x9f6cx24++) {
								_0x9f6cxf = _0x9f6cx7[_0x9f6cx24]['name'];
								if (_0x9f6cxf !== 'id') {
									_0x9f6cx1f['setAttribute'](_0x9f6cxf, _0x9f6cx7[_0x9f6cx24]['value'])
								}
							}
						};
						if (_0x9f6cxc) {
							_0x9f6cxc['isSynchronized'] = false
						};
						if (_0x9f6cx6['length'] && (_0x9f6cx4 = _0x9f6cx8['getRow'](_0x9f6cx1f))) {
							_0x9f6cx8['updateColumns'](_0x9f6cx4, Ext['fly'](_0x9f6cx3)['down'](_0x9f6cx8['rowSelector'], true), _0x9f6cx17)
						};
						while (_0x9f6cx22) {
							if (_0x9f6cx22['syncContent']) {
								if (_0x9f6cx22['syncContent'](_0x9f6cx1f, _0x9f6cx3, _0x9f6cx11 ? _0x9f6cx17 : null) === false) {
									break
								}
							};
							_0x9f6cx22 = _0x9f6cx22['nextTpl']
						}
					}
					else {
						for (_0x9f6cx23 = 0, _0x9f6cxa = _0x9f6cx17['length']; _0x9f6cx23 < _0x9f6cxa; _0x9f6cx23++) {
							_0x9f6cx1a = _0x9f6cx17[_0x9f6cx23];
							_0x9f6cxb = _0x9f6cx1a['dataIndex'];
							_0x9f6cx19 = _0x9f6cx1c['get'](_0x9f6cxb);
							_0x9f6cx10 = Ext['fly'](_0x9f6cx1f)['down'](_0x9f6cx1a['getCellSelector'](), true);
							_0x9f6cx12['attach'](_0x9f6cx10);
							if (!_0x9f6cx1e && _0x9f6cx18) {
								if (_0x9f6cx1c['isModified'](_0x9f6cx1a['dataIndex'])) {
									_0x9f6cx12['addCls'](_0x9f6cx14)
								}
								else {
									_0x9f6cx12['removeCls'](_0x9f6cx14)
								}
							};
							_0x9f6cx15 = _0x9f6cx1a['usingDefaultRenderer'];
							_0x9f6cx1b = _0x9f6cx15 ? _0x9f6cx1a : _0x9f6cx1a['scope'];
							if (_0x9f6cx1a['updater']) {
								Ext['callback'](_0x9f6cx1a['updater'], _0x9f6cx1b, [_0x9f6cx10, _0x9f6cx19, _0x9f6cx1c, _0x9f6cx8, _0x9f6cx8['dataSource']], 0, _0x9f6cx1a, _0x9f6cx1d)
							}
							else {
								if (_0x9f6cx1a['renderer']) {
									_0x9f6cx19 = Ext['callback'](_0x9f6cx1a['renderer'], _0x9f6cx1b, [_0x9f6cx19, null, _0x9f6cx1c, 0, 0, _0x9f6cx8['dataSource'], _0x9f6cx8], 0, _0x9f6cx1a, _0x9f6cx1d)
								};
								_0x9f6cx13 = _0x9f6cx19 == null || _0x9f6cx19 === '';
								_0x9f6cx19 = _0x9f6cx13 ? _0x9f6cx1a['emptyCellText'] : _0x9f6cx19;
								if (_0x9f6cx1a['producesHTML'] || _0x9f6cx13) {
									_0x9f6cx12['down'](_0x9f6cx8['innerSelector'], true)['innerHTML'] = _0x9f6cx19
								}
								else {
									_0x9f6cx12['down'](_0x9f6cx8['innerSelector'], true)['childNodes'][0]['data'] = _0x9f6cx19
								}
							};
							if (_0x9f6cx8['highlightClass']) {
								Ext['fly'](_0x9f6cx10)['addCls'](_0x9f6cx8['highlightClass']);
								if (!_0x9f6cx8['changedCells']) {
									_0x9f6cx8['self']['prototype']['changedCells'] = [];
									_0x9f6cx8['prototype']['clearChangedTask'] = new Ext['util'].DelayedTask(_0x9f6cx8['clearChangedCells'], _0x9f6cx8['prototype']);
									_0x9f6cx8['clearChangedTask']['delay'](_0x9f6cx8['unhighlightDelay'])
								};
								_0x9f6cx8['changedCells']['push']({
									cell: _0x9f6cx10
									, cls: _0x9f6cx8['highlightClass']
									, expires: Ext['Date']['now']() + 1000
								})
							}
						}
					};
					if (_0x9f6cx1e && _0x9f6cx18 && !_0x9f6cx1c['dirty']) {
						Ext['fly'](_0x9f6cx1f, '_internal')['select']('.' + _0x9f6cx14)['removeCls'](_0x9f6cx14)
					};
					if (_0x9f6cxe) {
						Ext['suspendLayouts']()
					};
					_0x9f6cx8['fireEvent']('itemupdate', _0x9f6cx1c, _0x9f6cx25, _0x9f6cx1f);
					if (_0x9f6cxe) {
						_0x9f6cx8['ownerGrid']['updateLayout']();
						Ext['resumeLayouts'](true)
					}
				}
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.TableView_6_2_0', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, minVersion: '6.2.0'
	, maxVersion: '6.2.1'
	, target: 'Ext.view.Table'
	, overrides: {
		getDefaultFocusPosition: function (_0x9f6cx2) {
			var _0x9f6cx6 = this
				, _0x9f6cx3 = _0x9f6cx6['dataSource']
				, _0x9f6cx7 = _0x9f6cx6['lastFocused']
				, _0x9f6cx4 = new Ext['grid'].CellContext(_0x9f6cx6)['setPosition'](0, 0)
				, _0x9f6cx5, _0x9f6cx1;
			if (_0x9f6cx2) {
				if (_0x9f6cx2['isColumn'] && _0x9f6cx2['cellFocusable'] !== false) {
					if (!_0x9f6cx7) {
						_0x9f6cx7 = _0x9f6cx4
					};
					_0x9f6cx7['setColumn'](_0x9f6cx2);
					_0x9f6cx7['setView'](_0x9f6cx2['getView']())
				}
				else {
					if (_0x9f6cx2['isTableView'] && _0x9f6cx2['lastFocused']) {
						_0x9f6cx7 = new Ext['grid'].CellContext(_0x9f6cx6)['setPosition'](_0x9f6cx2['lastFocused']['record'], 0)
					}
				}
			};
			if (_0x9f6cx7) {
				_0x9f6cx1 = _0x9f6cx6['getScrollable']();
				if (!_0x9f6cx3['contains'](_0x9f6cx7['record']) || (_0x9f6cx1 && !_0x9f6cx1['isInView'](_0x9f6cx7['getRow']())['y'])) {
					_0x9f6cx7['setRow'](_0x9f6cx3['getAt'](Math['min'](_0x9f6cx7['rowIdx'], _0x9f6cx3['getCount']() - 1)))
				}
			}
			else {
				_0x9f6cx7 = _0x9f6cx4;
				_0x9f6cx5 = _0x9f6cx6['el']['down'](_0x9f6cx6['getCellSelector']() + '[tabIndex="-1"]');
				if (_0x9f6cx5) {
					_0x9f6cx7['setPosition'](_0x9f6cx6['getRecord'](_0x9f6cx5), _0x9f6cx6['getHeaderByCell'](_0x9f6cx5))
				}
				else {
					_0x9f6cx7 = null
				}
			};
			return _0x9f6cx7
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.TimelineGridView', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.ux.Scheduler.view.TimelineGridView'
	, minVersion: '6.0.1'
	, overrides: {
		initComponent: function () {
			this['callParent'](arguments);
			if (this['rtl']) {
				this['headerCt']['on']('afterlayout', function (_0x9f6cx1) {
					_0x9f6cx1['scrollTo'](this['getScrollX']())
				}, this)
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.TimelineGridViewScroll6_2', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.ux.Scheduler.view.TimelineGridView'
	, minVersion: '6.2.0'
	, overrides: {
		scrollVerticallyTo: function (_0x9f6cx2, _0x9f6cx1) {
			this['up']('timelinegrid,timelinetree')['getScrollable']()['scrollTo'](null, _0x9f6cx2, _0x9f6cx1)
		}
		, getVerticalScroll: function () {
			var _0x9f6cx1 = this['up']('timelinegrid,timelinetree')['getScrollable']();
			if (_0x9f6cx1['getNormalScroller']) {
				if (_0x9f6cx1['getNormalScroller']()) {
					return _0x9f6cx1['getPosition']()['y']
				}
				else {
					return 0
				}
			}
			else {
				return _0x9f6cx1['getPosition']()['y']
			}
		}
	}
});
Ext.define('Ext.ux.Scheduler.patches.TimelinePanel', {
	extend: 'Ext.ux.Scheduler.util.Patch'
	, target: 'Ext.ux.Scheduler.mixin.TimelinePanel'
	, minVersion: '6.2.0'
	, applyFn: function () {
		Ext.ux.Scheduler['panel']['TimelineGridPanel'] && Ext.ux.Scheduler['panel']['TimelineGridPanel']['override']({
			hideHeaders: false
		});
		Ext.ux.Scheduler['panel']['TimelineTreePanel'] && Ext.ux.Scheduler['panel']['TimelineTreePanel']['override']({
			hideHeaders: false
		})
	}
});
Ext.define('Ext.ux.Scheduler.plugin.Pan', {
	extend: 'Ext.AbstractPlugin'
	, alias: 'plugin.scheduler_pan'
	, lockableScope: 'top'
	, enableVerticalPan: true
	, statics: {
		KEY_SHIFT: 1
		, KEY_CTRL: 2
		, KEY_ALT: 4
		, KEY_ALL: 7
	}
	, disableOnKey: 0
	, constructor: function (_0x9f6cx1) {
		Ext['apply'](this, _0x9f6cx1)
	}
	, init: function (_0x9f6cx1) {
		this['view'] = _0x9f6cx1['getSchedulingView']();
		this['view']['on']('afterrender', this['onRender'], this)
	}
	, onRender: function (_0x9f6cx1) {
		this['view']['el']['on']('mousedown', this['onMouseDown'], this)
	}
	, onMouseDown: function (_0x9f6cx3, _0x9f6cx5) {
		if ((_0x9f6cx3['event']['touches'] && _0x9f6cx3['event']['touches']['length'] > 0) || (!_0x9f6cx3['event']['touches'] && _0x9f6cx3['button'] !== 0)) {
			return
		};
		var _0x9f6cx2 = this['self']
			, _0x9f6cx1 = this['disableOnKey'];
		if ((_0x9f6cx3['shiftKey'] && (_0x9f6cx1 & _0x9f6cx2['KEY_SHIFT'])) || (_0x9f6cx3['ctrlKey'] && (_0x9f6cx1 & _0x9f6cx2['KEY_CTRL'])) || (_0x9f6cx3['altKey'] && (_0x9f6cx1 & _0x9f6cx2['KEY_ALT']))) {
			return
		};
		if (_0x9f6cx3['getTarget'](this['view']['timeCellSelector'], 10) && !_0x9f6cx3['getTarget'](this['view']['timeCellSelector'] + ' > div > *')) {
			this['mouseX'] = _0x9f6cx3['getX']();
			this['mouseY'] = _0x9f6cx3['getY']();
			Ext['getBody']()['on']('mousemove', this['onMouseMove'], this);
			Ext['getDoc']()['on']('mouseup', this['onMouseUp'], this);
			if (Ext['isIE'] || Ext['isGecko']) {
				Ext['getBody']()['on']('mouseenter', this['onMouseUp'], this)
			};
			_0x9f6cx3['stopEvent']()
		}
	}
	, onMouseMove: function (_0x9f6cx7) {
		if (this['disabled']) {
			return
		};
		_0x9f6cx7['stopEvent']();
		var _0x9f6cx1 = _0x9f6cx7['getX']();
		var _0x9f6cx8 = _0x9f6cx7['getY']();
		var _0x9f6cx5 = 0
			, _0x9f6cx3 = this['mouseX'] - _0x9f6cx1;
		if (this['enableVerticalPan']) {
			_0x9f6cx5 = this['mouseY'] - _0x9f6cx8
		};
		this['mouseX'] = _0x9f6cx1;
		this['mouseY'] = _0x9f6cx8;
		var _0x9f6cx6 = this['view']['getScroll']();
		_0x9f6cx5 && this['view']['scrollVerticallyTo'](Math['max'](0, _0x9f6cx5 + _0x9f6cx6['top']), false);
		_0x9f6cx3 && this['view']['scrollHorizontallyTo'](Math['max'](0, _0x9f6cx3 + _0x9f6cx6['left']), false);
		var _0x9f6cx2 = this['view']['headerCt']['getScrollable']();
		_0x9f6cx2 && _0x9f6cx2['scrollBy'](_0x9f6cx3, 0, false)
	}
	, onMouseUp: function (_0x9f6cx1) {
		Ext['getBody']()['un']('mousemove', this['onMouseMove'], this);
		Ext['getDoc']()['un']('mouseup', this['onMouseUp'], this);
		if (Ext['isIE'] || Ext['isGecko']) {
			Ext['getBody']()['un']('mouseenter', this['onMouseUp'], this)
		}
	}
});
Ext.define('Ext.ux.Scheduler.plugin.TreeCellEditing', {
	extend: 'Ext.grid.plugin.CellEditing'
	, alias: 'plugin.scheduler_treecellediting'
	, requires: ['Ext.ux.Scheduler.patches.CellEditing', 'Ext.ux.Scheduler.patches.CellEditor', 'Ext.ux.Scheduler.patches.Element_6_5']
	, lockableScope: 'locked'
	, editorsStarted: 0
	, init: function () {
		this['on']('beforeedit', this['onMyBeforeEdit'], this);
		this['callParent'](arguments)
	}
	, activateCell: function (_0x9f6cx1) {
		var _0x9f6cx2 = this['callParent'](arguments);
		if (_0x9f6cx2) {
			var _0x9f6cx5 = this['getEditor'](_0x9f6cx1['record'], _0x9f6cx1['column']);
			if (!_0x9f6cx5['_cancelEdit']) {
				_0x9f6cx5['_cancelEdit'] = _0x9f6cx5['cancelEdit'];
				_0x9f6cx5['cancelEdit'] = this['myCancelEdit']
			};
			this['fireEvent']('editingstart', this, _0x9f6cx5)
		};
		return _0x9f6cx2
	}
	, checkReadOnly: function () {
		var _0x9f6cx1 = this['getCmp']();
		if (_0x9f6cx1) {
			if (!_0x9f6cx1['isTimelineTreePanel'] && !_0x9f6cx1['isTimelineGridPanel']) {
				_0x9f6cx1 = _0x9f6cx1['up']('tablepanel')
			};
			return !_0x9f6cx1['isReadOnly']()
		}
	}
	, onEditComplete: function (_0x9f6cx2, _0x9f6cx3, _0x9f6cx1) {
		var _0x9f6cx5 = this;
		if (_0x9f6cx2['field']['applyChanges']) {
			if ((_0x9f6cx3 instanceof Date && (_0x9f6cx3 - _0x9f6cx1)) || !(_0x9f6cx3 instanceof Date) && _0x9f6cx3 !== _0x9f6cx1) {
				_0x9f6cx2['field']['applyChanges'](_0x9f6cx2['field']['task'] || _0x9f6cx5['context']['record'])
			};
			return _0x9f6cx5['callParent']([_0x9f6cx2, _0x9f6cx3, _0x9f6cx3])
		}
		else {
			return _0x9f6cx5['callParent']([_0x9f6cx2, _0x9f6cx3, _0x9f6cx1])
		}
	}
	, myCancelEdit: function () {
		var _0x9f6cx2 = this
			, _0x9f6cx3 = _0x9f6cx2['field'];
		if (_0x9f6cx3 && _0x9f6cx3['applyChanges']) {
			var _0x9f6cx5 = _0x9f6cx3['instantUpdate'];
			_0x9f6cx3['instantUpdate'] = true;
			var _0x9f6cx1 = _0x9f6cx2['_cancelEdit']['apply'](this, arguments);
			_0x9f6cx3['instantUpdate'] = _0x9f6cx5;
			return _0x9f6cx1
		}
		else {
			return _0x9f6cx2['_cancelEdit']['apply'](this, arguments)
		}
	}
	, onMyBeforeEdit: function (_0x9f6cx2, _0x9f6cx1) {
		var _0x9f6cx5 = _0x9f6cx1['column']['getEditor']();
		if (_0x9f6cx5 && _0x9f6cx5['setTask']) {
			_0x9f6cx5['setTask'](_0x9f6cx1['record']);
			_0x9f6cx1['_valueFromTaskField'] = _0x9f6cx5['getValue']()
		};
		return this['checkReadOnly']()
	}
	, setEditingContext: function (_0x9f6cx1) {
		if (_0x9f6cx1['hasOwnProperty']('_valueFromTaskField')) {
			_0x9f6cx1['value'] = _0x9f6cx1['originalValue'] = _0x9f6cx1['_valueFromTaskField'];
			delete _0x9f6cx1['_valueFromTaskField']
		};
		this['callParent'](arguments)
	}
})
