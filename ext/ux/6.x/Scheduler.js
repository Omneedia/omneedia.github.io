/*

Ext Scheduler 5.1.3
Copyright(c) 2009-2017 Bryntum AB
https://bryntum.com/contact
https://bryntum.com/license

*/

Ext.define('Ext.ux.Scheduler.util.Patch', {
    target: null,
    minVersion: null,
    maxVersion: null,
    reportUrl: null,
    obsoleteTestName: null,
    description: null,
    applyFn: null,
    ieOnly: false,
    macOnly: false,
    overrides: null,
    onClassExtended: function(_0xecbcx1, _0xecbcx2) {
        if (Ext.ux.Scheduler['disableOverrides']) {
            return
        };
        if (_0xecbcx2['ieOnly'] && !Ext['isIE']) {
            return
        };
        if (_0xecbcx2['macOnly'] && !Ext['isMac']) {
            return
        };
        if ((!_0xecbcx2['minVersion'] || Ext['versions']['extjs']['equals'](_0xecbcx2['minVersion']) || Ext['versions']['extjs']['isGreaterThan'](_0xecbcx2['minVersion'])) && (!_0xecbcx2['maxVersion'] || Ext['versions']['extjs']['equals'](_0xecbcx2['maxVersion']) || Ext['versions']['extjs']['isLessThan'](_0xecbcx2['maxVersion']))) {
            Ext['require'](_0xecbcx2['target'], function() {
                if (_0xecbcx2['applyFn']) {
                    _0xecbcx2['applyFn']()
                } else {
                    if (_0xecbcx2['overrides']) {
                        Ext['ClassManager']['get'](_0xecbcx2['target'])['override'](_0xecbcx2['overrides'])
                    }
                }
            })
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.EXTJS_23846', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    requires: ['Ext.dom.Element', 'Ext.event.publisher.Gesture'],
    target: ['Ext.dom.Element', 'Ext.event.publisher.Gesture'],
    maxVersion: '6.2.2',
    applyFn: function() {
        if (Ext['firefoxVersion'] < 51) {
            return
        };
        Ext.define('EXTJS_23846.Element', {
            override: 'Ext.dom.Element'
        }, function(_0xecbcx2) {
            var _0xecbcx1 = Ext['supports'],
                _0xecbcx3 = _0xecbcx2['prototype'],
                _0xecbcx4 = _0xecbcx3['eventMap'],
                _0xecbcx5 = _0xecbcx3['additiveEvents'];
            if (Ext['os']['is']['Desktop'] && _0xecbcx1['TouchEvents'] && !_0xecbcx1['PointerEvents']) {
                _0xecbcx4['touchstart'] = 'mousedown';
                _0xecbcx4['touchmove'] = 'mousemove';
                _0xecbcx4['touchend'] = 'mouseup';
                _0xecbcx4['touchcancel'] = 'mouseup';
                _0xecbcx5['mousedown'] = 'mousedown';
                _0xecbcx5['mousemove'] = 'mousemove';
                _0xecbcx5['mouseup'] = 'mouseup';
                _0xecbcx5['touchstart'] = 'touchstart';
                _0xecbcx5['touchmove'] = 'touchmove';
                _0xecbcx5['touchend'] = 'touchend';
                _0xecbcx5['touchcancel'] = 'touchcancel';
                _0xecbcx5['pointerdown'] = 'mousedown';
                _0xecbcx5['pointermove'] = 'mousemove';
                _0xecbcx5['pointerup'] = 'mouseup';
                _0xecbcx5['pointercancel'] = 'mouseup'
            }
        });
        Ext.define('EXTJS_23846.Gesture', {
            override: 'Ext.event.publisher.Gesture'
        }, function(_0xecbcx1) {
            var _0xecbcx2 = _0xecbcx1['instance'];
            if (Ext['supports']['TouchEvents'] && !Ext['isWebKit'] && Ext['os']['is']['Desktop']) {
                _0xecbcx2['handledDomEvents']['push']('mousedown', 'mousemove', 'mouseup');
                _0xecbcx2['registerEvents']()
            }
        })
    }
});
Ext.define('Robo.util.Array', {
    singleton: true,
    reduce: function(_0xecbcx6, _0xecbcx4, _0xecbcx1) {
        _0xecbcx6 = Object(_0xecbcx6);
        if (!Ext['isFunction'](_0xecbcx4)) {
            Ext['raise']('Invalid parameter: expected a function.')
        };
        var _0xecbcx5 = 0,
            _0xecbcx3 = _0xecbcx6['length'] >>> 0,
            _0xecbcx2 = _0xecbcx1;
        if (arguments['length'] < 3) {
            while (true) {
                if (_0xecbcx5 in _0xecbcx6) {
                    _0xecbcx2 = _0xecbcx6[_0xecbcx5++];
                    break
                };
                if (++_0xecbcx5 >= _0xecbcx3) {
                    throw new TypeError('Reduce of empty array with no initial value')
                }
            }
        };
        for (; _0xecbcx5 < _0xecbcx3; ++_0xecbcx5) {
            if (_0xecbcx5 in _0xecbcx6) {
                _0xecbcx2 = _0xecbcx4(_0xecbcx2, _0xecbcx6[_0xecbcx5], _0xecbcx5, _0xecbcx6)
            }
        };
        return _0xecbcx2
    }
});
Ext.define('Robo.Transaction', {
    actions: null,
    title: null,
    constructor: function(_0xecbcx1) {
        _0xecbcx1 = _0xecbcx1 || {};
        Ext.apply(this, _0xecbcx1);
        this['callParent']([_0xecbcx1]);
        this['actions'] = []
    },
    hasActions: function() {
        return this['actions']['length'] > 0
    },
    addAction: function(_0xecbcx1) {
        this['actions']['push'](_0xecbcx1)
    },
    getActions: function() {
        return this['actions']
    },
    undo: function() {
        for (var _0xecbcx1 = this['actions']['length'] - 1; _0xecbcx1 >= 0; _0xecbcx1--) {
            this['actions'][_0xecbcx1]['undo']()
        }
    },
    redo: function() {
        for (var _0xecbcx1 = 0; _0xecbcx1 < this['actions']['length']; _0xecbcx1++) {
            this['actions'][_0xecbcx1]['redo']()
        }
    },
    getTitle: function() {
        if (this['title']) {
            return this['title']
        };
        var _0xecbcx1 = this['actions'][0];
        return _0xecbcx1 ? _0xecbcx1['getTitle']() : null
    }
});
Ext.define('Robo.data.Model', {
    extend: 'Ext.Mixin',
    modelName: null,
    editMementoFix: null,
    mixinConfig: {
        before: {
            endEdit: 'onBeforeEndEdit'
        },
        after: {
            endEdit: 'onAfterEndEdit'
        }
    },
    onBeforeEndEdit: function(_0xecbcx2, _0xecbcx5) {
        var _0xecbcx1 = this['editMemento'];
        if (_0xecbcx1) {
            this['editMementoFix'] = _0xecbcx1;
            if (!_0xecbcx5) {
                _0xecbcx5 = this['getModifiedFieldNames'](_0xecbcx1['data'])
            };
            if (!_0xecbcx1['previousValues']) {
                _0xecbcx1['previousValues'] = {}
            };
            Ext['Array']['each'](_0xecbcx5, function(_0xecbcx3) {
                _0xecbcx1['previousValues'][_0xecbcx3] = _0xecbcx1['data'][_0xecbcx3]
            })
        }
    },
    onAfterEndEdit: function(_0xecbcx1, _0xecbcx2) {
        delete this['editMementoFix']
    },
    getTitle: function() {
        return ''
    }
});
Ext.define('Robo.action.Base', {
    constructor: function(_0xecbcx1) {
        Ext.apply(this, _0xecbcx1)
    },
    undo: function() {
        throw new Error('Abstract method call')
    },
    redo: function() {
        throw new Error('Abstract method call')
    },
    getTitle: function() {
        return ''
    }
});
Ext.define('Robo.action.flat.Update', {
    extend: 'Robo.action.Base',
    requires: ['Ext.Array'],
    inheritableStatics: {
        CUSTOMLY_PROCESSED: {}
    },
    config: {
        record: null,
        fieldNames: null
    },
    oldValues: null,
    newValues: null,
    constructor: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['callParent']([_0xecbcx1]);
        _0xecbcx2['initConfig'](_0xecbcx1);
        _0xecbcx2['saveValues']()
    },
    saveValues: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getRecord'](),
            _0xecbcx5 = _0xecbcx2['getFieldNames']();
        if (_0xecbcx5) {
            _0xecbcx2['oldValues'] = Ext['Array']['map'](_0xecbcx5, function(_0xecbcx3) {
                return _0xecbcx2['processSavingOldValue'](_0xecbcx3, _0xecbcx1)
            });
            _0xecbcx2['newValues'] = Ext['Array']['map'](_0xecbcx5, function(_0xecbcx3) {
                return _0xecbcx2['processSavingNewValue'](_0xecbcx3, _0xecbcx1)
            })
        }
    },
    undo: function() {
        var _0xecbcx2, _0xecbcx3 = this,
            _0xecbcx1 = _0xecbcx3['getRecord'](),
            _0xecbcx4 = _0xecbcx3['getFieldNames'](),
            _0xecbcx5;
        if (_0xecbcx4) {
            _0xecbcx2 = _0xecbcx3['self']['CUSTOMLY_PROCESSED'];
            _0xecbcx1['beginEdit']();
            _0xecbcx5 = Robo['util']['Array']['reduce'](_0xecbcx4, function(_0xecbcx7, _0xecbcx8, _0xecbcx6) {
                var _0xecbcx9;
                if (_0xecbcx8) {
                    _0xecbcx9 = _0xecbcx3['processRestoringValue'](_0xecbcx3['oldValues'][_0xecbcx6], _0xecbcx8, _0xecbcx1, 'undo');
                    if (_0xecbcx9 !== _0xecbcx2) {
                        _0xecbcx7[_0xecbcx8] = _0xecbcx9
                    }
                };
                return _0xecbcx7
            }, {});
            _0xecbcx1['set'](_0xecbcx5);
            _0xecbcx1['endEdit']()
        }
    },
    redo: function() {
        var _0xecbcx2, _0xecbcx3 = this,
            _0xecbcx1 = _0xecbcx3['getRecord'](),
            _0xecbcx4 = _0xecbcx3['getFieldNames'](),
            _0xecbcx5;
        if (_0xecbcx4) {
            _0xecbcx2 = _0xecbcx3['self']['CUSTOMLY_PROCESSED'];
            _0xecbcx1['beginEdit']();
            _0xecbcx5 = Robo['util']['Array']['reduce'](_0xecbcx4, function(_0xecbcx7, _0xecbcx8, _0xecbcx6) {
                var _0xecbcx9;
                if (_0xecbcx8) {
                    _0xecbcx9 = _0xecbcx3['processRestoringValue'](_0xecbcx3['newValues'][_0xecbcx6], _0xecbcx8, _0xecbcx1, 'redo');
                    if (_0xecbcx9 !== _0xecbcx2) {
                        _0xecbcx7[_0xecbcx8] = _0xecbcx9
                    }
                };
                return _0xecbcx7
            }, {});
            _0xecbcx1['set'](_0xecbcx5);
            _0xecbcx1['endEdit']()
        }
    },
    processSavingOldValue: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = (_0xecbcx2['previous'] && _0xecbcx2['previous'].hasOwnProperty(_0xecbcx5) && _0xecbcx2['previous'] || _0xecbcx2['previousValues'] && _0xecbcx2['previousValues'].hasOwnProperty(_0xecbcx5) && _0xecbcx2['previousValues'] || _0xecbcx2['editMementoFix'] && _0xecbcx2['editMementoFix']['previousValues'] && _0xecbcx2['editMementoFix']['previousValues'].hasOwnProperty(_0xecbcx5) && _0xecbcx2['editMementoFix']['previousValues'] || _0xecbcx2['editMementoFix'] && _0xecbcx2['editMementoFix']['data'] && _0xecbcx2['editMementoFix']['data'].hasOwnProperty(_0xecbcx5) && _0xecbcx2['editMementoFix']['data']);
        if (!_0xecbcx1) {
            throw 'Can not get previous value'
        };
        return _0xecbcx1[_0xecbcx5]
    },
    processSavingNewValue: function(_0xecbcx2, _0xecbcx1) {
        return _0xecbcx1['get'](_0xecbcx2)
    },
    processRestoringValue: Ext['identityFn'],
    getTitle: function() {
        var _0xecbcx1 = this['getRecord']();
        var _0xecbcx2 = this['getFieldNames']();
        if (_0xecbcx1['getTitle']) {
            return 'Edit of ' + _0xecbcx2[0] + ' for ' + _0xecbcx1['getTitle'](this)
        };
        if (_0xecbcx1['modelName']) {
            return 'Edit of ' + _0xecbcx1['modelName'] + ' ' + _0xecbcx1['getId']()
        };
        return ''
    }
});
Ext.define('Robo.action.flat.Add', {
    extend: 'Robo.action.Base',
    store: null,
    records: null,
    index: null,
    undo: function() {
        var _0xecbcx1 = this['records'];
        this['store']['remove'](_0xecbcx1);
        for (var _0xecbcx2 = 0; _0xecbcx2 < _0xecbcx1['length']; _0xecbcx2++) {
            this['store']['removeFromRemoved'](_0xecbcx1[_0xecbcx2])
        }
    },
    redo: function() {
        this['store']['insert'](this['index'], this['records'])
    },
    getRecord: function() {
        return this['records'][0]
    },
    getTitle: function() {
        var _0xecbcx1 = this;
        var _0xecbcx2 = Ext['Array']['map'](this['records'], function(_0xecbcx5) {
            if (_0xecbcx5['getTitle']) {
                return _0xecbcx5['getTitle'](_0xecbcx1)
            };
            if (_0xecbcx5['modelName']) {
                return _0xecbcx5['modelName'] + ' ' + _0xecbcx5['getId']()
            };
            return 'unknown'
        });
        return 'Addition of ' + _0xecbcx2.join(',')
    }
});
Ext.define('Robo.action.flat.Remove', {
    extend: 'Robo.action.Base',
    store: null,
    records: null,
    index: null,
    undo: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['store']['insert'](_0xecbcx1['index'], _0xecbcx1['records'])
    },
    redo: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['store']['remove'](_0xecbcx1['records'])
    },
    getRecord: function() {
        return this['records'][0]
    },
    getTitle: function() {
        var _0xecbcx1 = this;
        var _0xecbcx2 = Ext['Array']['map'](this['records'], function(_0xecbcx5) {
            if (_0xecbcx5['getTitle']) {
                return _0xecbcx5['getTitle'](_0xecbcx1)
            };
            if (_0xecbcx5['modelName']) {
                return _0xecbcx5['modelName'] + ' ' + _0xecbcx5['getId']()
            };
            return 'unknown'
        });
        return 'Removal of ' + _0xecbcx2.join(',')
    }
});
Ext.define('Robo.action.tree.Append', {
    extend: 'Robo.action.Base',
    parent: null,
    newChild: null,
    undo: function() {
        var _0xecbcx1 = this['newChild'];
        this['parent']['removeChild'](_0xecbcx1);
        delete _0xecbcx1['data']['lastParentId'];
        var _0xecbcx2 = this['parent']['getTreeStore']();
        Ext['Array']['remove'](_0xecbcx2['removedNodes'], _0xecbcx1)
    },
    redo: function() {
        this['parent']['appendChild'](this['newChild'])
    },
    getRecord: function() {
        return this['newChild']
    },
    getTitle: function() {
        var _0xecbcx1 = this['newChild'];
        var _0xecbcx2;
        if (_0xecbcx1['getTitle']) {
            _0xecbcx2 = _0xecbcx1['getTitle'](this)
        } else {
            if (_0xecbcx1['modelName']) {
                return _0xecbcx1['modelName'] + ' ' + _0xecbcx1['getId']()
            }
        };
        return 'Append of ' + _0xecbcx2
    }
});
Ext.define('Robo.action.tree.Insert', {
    extend: 'Robo.action.Base',
    parent: null,
    newChild: null,
    insertedBefore: null,
    undo: function() {
        var _0xecbcx1 = this['newChild'];
        this['parent']['removeChild'](_0xecbcx1);
        delete _0xecbcx1['data']['lastParentId'];
        var _0xecbcx2 = this['parent']['getTreeStore']();
        Ext['Array']['remove'](_0xecbcx2['removedNodes'], _0xecbcx1)
    },
    redo: function() {
        var _0xecbcx2 = this['insertedBefore'];
        var _0xecbcx1 = _0xecbcx2 && _0xecbcx2['isFirst']();
        this['parent']['insertBefore'](this['newChild'], _0xecbcx2);
        if (_0xecbcx1) {
            _0xecbcx2['updateInfo'](false, {
                isFirst: false
            })
        }
    },
    getRecord: function() {
        return this['newChild']
    },
    getTitle: function() {
        var _0xecbcx1 = this['newChild'];
        var _0xecbcx2;
        if (_0xecbcx1['getTitle']) {
            _0xecbcx2 = _0xecbcx1['getTitle'](this)
        } else {
            if (_0xecbcx1['modelName']) {
                return _0xecbcx1['modelName'] + ' ' + _0xecbcx1['getId']()
            }
        };
        return 'Insertion of ' + _0xecbcx2
    }
});
Ext.define('Robo.action.tree.Remove', {
    extend: 'Robo.action.Base',
    parent: null,
    removedChild: null,
    nextSibling: null,
    newParent: null,
    newNextSibling: null,
    dirty: false,
    isMove: false,
    constructor: function(_0xecbcx1) {
        this['callParent'](arguments);
        this['dirty'] = this['removedChild']['dirty']
    },
    undo: function() {
        if (this['isMove']) {
            this['newParent'] = this['removedChild']['parentNode'];
            this['newNextSibling'] = this['removedChild']['nextSibling']
        };
        var _0xecbcx5 = this['nextSibling'];
        var _0xecbcx2 = _0xecbcx5 && _0xecbcx5['isFirst']();
        var _0xecbcx3 = this['removedChild'];
        this['parent']['insertBefore'](_0xecbcx3, _0xecbcx5);
        _0xecbcx3['dirty'] = this['dirty'];
        if (!this['isMove']) {
            var _0xecbcx1 = _0xecbcx3['getTreeStore']();
            _0xecbcx3['cascadeBy'](function(_0xecbcx4) {
                Ext['Array']['remove'](_0xecbcx1['removedNodes'], _0xecbcx4)
            })
        };
        if (_0xecbcx2) {
            _0xecbcx5['updateInfo'](false, {
                isFirst: false
            })
        }
    },
    redo: function() {
        if (this['isMove']) {
            var _0xecbcx2 = this['newNextSibling'];
            var _0xecbcx1 = _0xecbcx2 && _0xecbcx2['isFirst']();
            this['newParent']['insertBefore'](this['removedChild'], _0xecbcx2);
            if (_0xecbcx1) {
                _0xecbcx2['updateInfo'](false, {
                    isFirst: false
                })
            }
        } else {
            this['parent']['removeChild'](this['removedChild']);
            delete this['removedChild']['data']['lastParentId']
        }
    },
    getRecord: function() {
        return this['removedChild']
    },
    getTitle: function() {
        var _0xecbcx1 = this['removedChild'];
        var _0xecbcx2;
        if (_0xecbcx1['getTitle']) {
            _0xecbcx2 = _0xecbcx1['getTitle'](this)
        } else {
            if (_0xecbcx1['modelName']) {
                return _0xecbcx1['modelName'] + ' ' + _0xecbcx1['getId']()
            }
        };
        return this['isMove'] ? 'Move of ' + _0xecbcx2 : 'Removal of ' + _0xecbcx2
    }
});
Ext.define('Robo.action.tree.Update', {
    extend: 'Robo.action.flat.Update',
    processRestoringValue: function(_0xecbcx5, _0xecbcx4, _0xecbcx1, _0xecbcx3) {
        var _0xecbcx2 = this;
        if (_0xecbcx4 === 'expanded') {
            if (_0xecbcx5) {
                _0xecbcx1['expand']()
            } else {
                _0xecbcx1['collapse']()
            };
            _0xecbcx5 = _0xecbcx2['self']['CUSTOMLY_PROCESSED']
        } else {
            if (_0xecbcx4 == 'leaf') {
                _0xecbcx5 = _0xecbcx2['callParent'](arguments);
                if (_0xecbcx5 === true && _0xecbcx3 == 'undo') {
                    _0xecbcx1['data']['loaded'] = false
                }
            } else {
                _0xecbcx5 = _0xecbcx2['callParent'](arguments)
            }
        };
        return _0xecbcx5
    }
});
Ext.define('Robo.Manager', {
    extend: 'Ext.util.Observable',
    requires: ['Robo.util.Array', 'Robo.Transaction', 'Robo.data.Model', 'Robo.action.flat.Update', 'Robo.action.flat.Add', 'Robo.action.flat.Remove', 'Robo.action.tree.Append', 'Robo.action.tree.Insert', 'Robo.action.tree.Remove', 'Robo.action.tree.Update', 'Ext.data.Store', 'Ext.data.StoreManager'],
    stores: null,
    storesById: null,
    treeStoreListeners: null,
    flatStoreListeners: null,
    stub: function() {},
    undoQueue: null,
    redoQueue: null,
    ignoredFieldNames: {
        expanded: 1
    },
    state: 'created',
    transactionBoundary: 'timeout',
    transactionMaxDuration: 100,
    clearQueuesOnLoad: false,
    transactionTimeout: null,
    currentTransaction: null,
    constructor: function(_0xecbcx2) {
        var _0xecbcx5 = this;
        _0xecbcx2 = _0xecbcx2 || {};
        Ext.apply(_0xecbcx5, _0xecbcx2);
        _0xecbcx5['treeStoreListeners'] = {
            nodeappend: _0xecbcx5['onTreeStoreAppend'],
            nodeinsert: _0xecbcx5['onTreeStoreInsert'],
            noderemove: _0xecbcx5['onTreeStoreRemove'],
            update: _0xecbcx5['onTreeStoreUpdate'],
            scope: _0xecbcx5
        };
        _0xecbcx5['flatStoreListeners'] = {
            add: _0xecbcx5['onFlatStoreAdd'],
            remove: _0xecbcx5['onFlatStoreRemove'],
            update: _0xecbcx5['onFlatStoreUpdate'],
            scope: _0xecbcx5
        };
        if (_0xecbcx5['clearQueuesOnLoad']) {
            Ext.apply(_0xecbcx5['treeStoreListeners'], {
                load: _0xecbcx5['clearQueues'],
                clear: _0xecbcx5['clearQueues']
            });
            Ext.apply(_0xecbcx5['flatStoreListeners'], {
                load: _0xecbcx5['clearQueues'],
                clear: _0xecbcx5['clearQueues']
            })
        };
        _0xecbcx5['callParent']([_0xecbcx2]);
        var _0xecbcx1 = _0xecbcx5['stores'] || [];
        _0xecbcx5['stores'] = [];
        _0xecbcx5['storesById'] = {};
        _0xecbcx5['undoQueue'] = [];
        _0xecbcx5['redoQueue'] = [];
        Ext['Array']['forEach'](_0xecbcx1, function(_0xecbcx3) {
            _0xecbcx5['addStore'](_0xecbcx3)
        })
    },
    addStore: function(_0xecbcx5, _0xecbcx7) {
        _0xecbcx5 = Ext['data']['StoreManager']['lookup'](_0xecbcx5);
        Ext['Assert'] && Ext['Assert']['isObject'](_0xecbcx5, 'Must provide a store or a valid store id');
        this['stores']['push'](_0xecbcx5);
        if (_0xecbcx7) {
            _0xecbcx5['setStoreId'](_0xecbcx7)
        };
        var _0xecbcx3 = _0xecbcx5['getModel']();
        var _0xecbcx4 = _0xecbcx3['prototype']['associations'] || {};
        for (var _0xecbcx1 in _0xecbcx4) {
            var _0xecbcx9 = _0xecbcx4[_0xecbcx1];
            var _0xecbcx2 = _0xecbcx9['getAssociatedStore'];
            if (_0xecbcx2 && !_0xecbcx2['ROBO_MANAGED']) {
                var _0xecbcx6 = this;
                _0xecbcx9['getAssociatedStore'] = function() {
                    var _0xecbcxa = _0xecbcx2['apply'](this, arguments);
                    if (!_0xecbcx6['hasStore'](_0xecbcxa)) {
                        _0xecbcx6['addStore'](_0xecbcxa);
                        if (_0xecbcx6['state'] !== 'disabled' && _0xecbcx6['state'] !== 'created') {
                            _0xecbcx6['bindStore'](_0xecbcxa)
                        }
                    };
                    return _0xecbcxa
                };
                _0xecbcx9['getAssociatedStore']['ROBO_MANAGED'] = true
            }
        };
        if (_0xecbcx5['storeId']) {
            this['storesById'][_0xecbcx5['storeId']] = _0xecbcx5
        }
    },
    getStoreById: function(_0xecbcx1) {
        return this['storesById'][_0xecbcx1]
    },
    hasStore: function(_0xecbcx1) {
        return Ext['Array']['indexOf'](this['stores'], _0xecbcx1) != -1
    },
    bindStore: function(_0xecbcx1) {
        (_0xecbcx1['undoRedoEventBus'] || _0xecbcx1)['on'](this['getStoreTypeListeners'](_0xecbcx1));
        if (_0xecbcx1['undoRedoEventBus']) {
            _0xecbcx1['on'](this['getStoreTypeListenerStubs'](_0xecbcx1))
        }
    },
    unbindStore: function(_0xecbcx1) {
        (_0xecbcx1['undoRedoEventBus'] || _0xecbcx1)['un'](this['getStoreTypeListeners'](_0xecbcx1));
        if (_0xecbcx1['undoRedoEventBus']) {
            _0xecbcx1['un'](this['getStoreTypeListenerStubs'](_0xecbcx1))
        }
    },
    getStoreTypeListenerStubs: function(_0xecbcx1) {
        var _0xecbcx5 = this;
        var _0xecbcx2 = this['getStoreTypeListeners'](_0xecbcx1);
        _0xecbcx2 = Ext.apply({}, _0xecbcx2);
        Ext['Object']['each'](_0xecbcx2, function(_0xecbcx3, _0xecbcx4) {
            _0xecbcx2[_0xecbcx3] = _0xecbcx5['stub']
        });
        return _0xecbcx2
    },
    getStoreTypeListeners: function(_0xecbcx1) {
        var _0xecbcx2;
        if (Ext['data']['TreeStore'] && _0xecbcx1 instanceof Ext['data']['TreeStore']) {
            _0xecbcx2 = this['treeStoreListeners']
        } else {
            _0xecbcx2 = this['flatStoreListeners']
        };
        return _0xecbcx2
    },
    removeStore: function(_0xecbcx1) {
        Ext['Array']['remove'](this['stores'], _0xecbcx1);
        this['storesById'][_0xecbcx1['storeId']] = null;
        this['unbindStore'](_0xecbcx1)
    },
    forEachStore: function(_0xecbcx1) {
        Ext['Array']['forEach'](this['stores'], _0xecbcx1, this)
    },
    onAnyChangeInAnyStore: function(_0xecbcx1) {
        if (this['state'] === 'paused' || (_0xecbcx1['isRootSettingOrLoading'] && _0xecbcx1['isRootSettingOrLoading']())) {
            return false
        };
        if (!this['currentTransaction']) {
            this['startTransaction']()
        };
        return true
    },
    hasPersistableChanges: function(_0xecbcx1, _0xecbcx5) {
        var _0xecbcx2 = this['ignoredFieldNames'];
        return Robo['util']['Array']['reduce'](_0xecbcx5, function(_0xecbcx3, _0xecbcx6) {
            var _0xecbcx4 = _0xecbcx1['getField'](_0xecbcx6);
            return _0xecbcx3 || !_0xecbcx4 || (_0xecbcx4['persist'] && (!_0xecbcx1['isNode'] || !_0xecbcx2.hasOwnProperty(_0xecbcx6)))
        }, false)
    },
    onFlatStoreUpdate: function(_0xecbcx5, _0xecbcx1, _0xecbcx2, _0xecbcx3) {
        if (!this['onAnyChangeInAnyStore'](_0xecbcx5) || _0xecbcx2 != 'edit' || !_0xecbcx3 || !_0xecbcx3['length'] || !this['hasPersistableChanges'](_0xecbcx1, _0xecbcx3)) {
            return
        };
        this['currentTransaction']['addAction'](new Robo['action']['flat'].Update({
            record: _0xecbcx1,
            fieldNames: _0xecbcx3
        }))
    },
    onFlatStoreAdd: function(_0xecbcx2, _0xecbcx1, _0xecbcx5) {
        if (!this['onAnyChangeInAnyStore'](_0xecbcx2)) {
            return
        };
        this['currentTransaction']['addAction'](new Robo['action']['flat'].Add({
            store: _0xecbcx2,
            records: _0xecbcx1,
            index: _0xecbcx5
        }))
    },
    onFlatStoreRemove: function(_0xecbcx5, _0xecbcx2, _0xecbcx3, _0xecbcx1) {
        if (!this['onAnyChangeInAnyStore'](_0xecbcx5)) {
            return
        };
        this['currentTransaction']['addAction'](new Robo['action']['flat'].Remove({
            store: _0xecbcx5,
            records: _0xecbcx2,
            index: _0xecbcx3,
            isMove: _0xecbcx1
        }))
    },
    onTreeStoreUpdate: function(_0xecbcx5, _0xecbcx1, _0xecbcx2, _0xecbcx3) {
        if (!this['onAnyChangeInAnyStore'](_0xecbcx5) || _0xecbcx2 != 'edit' || !_0xecbcx3 || !_0xecbcx3['length'] || !this['hasPersistableChanges'](_0xecbcx1, _0xecbcx3)) {
            return
        };
        this['currentTransaction']['addAction'](new Robo['action']['tree'].Update({
            record: _0xecbcx1,
            fieldNames: _0xecbcx3
        }))
    },
    onTreeStoreAppend: function(_0xecbcx5, _0xecbcx1, _0xecbcx2) {
        if (!_0xecbcx5 || !this['onAnyChangeInAnyStore'](_0xecbcx5['getTreeStore']())) {
            return
        };
        if (_0xecbcx1['$undoRedoMoving']) {
            delete _0xecbcx1['$undoRedoMoving']
        } else {
            this['currentTransaction']['addAction'](new Robo['action']['tree'].Append({
                parent: _0xecbcx5,
                newChild: _0xecbcx1
            }))
        }
    },
    onTreeStoreInsert: function(_0xecbcx5, _0xecbcx1, _0xecbcx2) {
        if (!_0xecbcx5 || !this['onAnyChangeInAnyStore'](_0xecbcx5['getTreeStore']())) {
            return
        };
        if (_0xecbcx1['$undoRedoMoving']) {
            delete _0xecbcx1['$undoRedoMoving']
        } else {
            this['currentTransaction']['addAction'](new Robo['action']['tree'].Insert({
                parent: _0xecbcx5,
                newChild: _0xecbcx1,
                insertedBefore: _0xecbcx2
            }))
        }
    },
    onTreeStoreRemove: function(_0xecbcx5, _0xecbcx3, _0xecbcx1, _0xecbcx2) {
        if (!_0xecbcx5 || !this['onAnyChangeInAnyStore'](_0xecbcx5['getTreeStore']())) {
            return
        };
        if (_0xecbcx1) {
            _0xecbcx3['$undoRedoMoving'] = true
        };
        this['currentTransaction']['addAction'](new Robo['action']['tree'].Remove({
            parent: _0xecbcx5,
            removedChild: _0xecbcx3,
            nextSibling: _0xecbcx2['nextSibling'],
            isMove: _0xecbcx1
        }))
    },
    start: function() {
        if (this['state'] == 'created' || this['state'] == 'disabled') {
            this['fireEvent']('start', this);
            this['fireEvent']('undoqueuechange', this, this['undoQueue']);
            this['fireEvent']('redoqueuechange', this, this['redoQueue'])
        };
        if (this['state'] !== 'hold') {
            this['forEachStore'](this['bindStore']);
            this['state'] = 'enabled'
        }
    },
    stop: function() {
        this['endTransaction']();
        this['forEachStore'](this['unbindStore']);
        this['state'] = 'disabled';
        this['clearQueues']();
        this['fireEvent']('stop', this)
    },
    clearQueues: function() {
        this['clearUndoQueue']();
        this['clearRedoQueue']()
    },
    pause: function() {
        this['state'] = 'paused'
    },
    resume: function() {
        this['state'] = 'enabled'
    },
    hold: function() {
        Ext['Assert'] && Ext['Assert']['isObject'](this['currentTransaction'], 'Can\'t hold, no transaction is currently in progress ');
        this['state'] = 'hold'
    },
    release: function() {
        Ext['Assert'] && Ext['Assert']['isObject'](this['currentTransaction'], 'Can\'t release, no transaction is currently in progress ');
        this['state'] = 'enabled'
    },
    getUndoQueue: function() {
        return this['undoQueue']['slice']()
    },
    getRedoQueue: function() {
        return this['redoQueue']['slice']()
    },
    clearUndoQueue: function() {
        if (this['undoQueue']['length']) {
            this['undoQueue'] = [];
            this['fireEvent']('undoqueuechange', this, this['undoQueue']['slice']())
        }
    },
    clearRedoQueue: function() {
        if (this['redoQueue']['length']) {
            this['redoQueue'] = [];
            this['fireEvent']('redoqueuechange', this, this['redoQueue']['slice']())
        }
    },
    startTransaction: function(_0xecbcx5) {
        var _0xecbcx1 = this,
            _0xecbcx2;
        if (_0xecbcx1['state'] == 'disabled') {
            return
        };
        if (_0xecbcx1['currentTransaction']) {
            _0xecbcx1['endTransaction']()
        };
        _0xecbcx2 = new Robo.Transaction({
            title: _0xecbcx5
        });
        _0xecbcx1['currentTransaction'] = _0xecbcx2;
        _0xecbcx1['notifyStoresAboutTransactionStart'](_0xecbcx2);
        if (_0xecbcx1['transactionBoundary'] == 'timeout') {
            _0xecbcx1['scheduleEndTransaction']()
        }
    },
    scheduleEndTransaction: function() {
        var _0xecbcx1 = this;
        if (_0xecbcx1['transactionTimeout']) {
            clearTimeout(_0xecbcx1['transactionTimeout'])
        };
        _0xecbcx1['transactionTimeout'] = setTimeout(function() {
            if (_0xecbcx1['state'] !== 'hold') {
                _0xecbcx1['endTransaction']();
                _0xecbcx1['transactionTimeout'] = null
            } else {
                _0xecbcx1['scheduleEndTransaction']()
            }
        }, _0xecbcx1['transactionMaxDuration'])
    },
    endTransaction: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['currentTransaction'];
        if (!_0xecbcx1) {
            return false
        };
        _0xecbcx2['currentTransaction'] = null;
        if (_0xecbcx2['transactionBoundary'] == 'timeout') {
            clearTimeout(_0xecbcx2['transactionTimeout']);
            _0xecbcx2['transactionTimeout'] = null
        };
        if (_0xecbcx1['hasActions']()) {
            _0xecbcx2['addTransaction'](_0xecbcx1)
        };
        _0xecbcx2['notifyStoresAboutTransactionEnd'](_0xecbcx1);
        return _0xecbcx1['hasActions']()
    },
    addTransaction: function(_0xecbcx1) {
        this['undoQueue']['push'](_0xecbcx1);
        this['fireEvent']('undoqueuechange', this, this['undoQueue']['slice']());
        if (this['redoQueue']['length']) {
            this['redoQueue']['length'] = 0;
            this['fireEvent']('redoqueuechange', this, this['redoQueue']['slice']())
        };
        this['fireEvent']('transactionadd', this, _0xecbcx1)
    },
    undo: function(_0xecbcx4) {
        var _0xecbcx5 = this['undoQueue'],
            _0xecbcx2, _0xecbcx6, _0xecbcx3, _0xecbcx1 = _0xecbcx5['length'];
        if (this['state'] == 'disabled' || _0xecbcx4 === 0 || !_0xecbcx5['length']) {
            return
        };
        if (_0xecbcx4 instanceof Robo['Transaction']) {
            _0xecbcx2 = Ext['Array']['indexOf'](_0xecbcx5, _0xecbcx4);
            if (_0xecbcx2 == -1) {
                return
            };
            _0xecbcx4 = _0xecbcx5['length'] - _0xecbcx2
        };
        _0xecbcx4 = _0xecbcx4 || 1;
        this['fireEvent']('beforeundo', this);
        this['pause']();
        this['notifyStoresAboutUndoRedoStart']();
        for (_0xecbcx3 = 0; _0xecbcx3 < Math['min'](_0xecbcx4, _0xecbcx1); _0xecbcx3++) {
            _0xecbcx6 = _0xecbcx5['pop']();
            _0xecbcx6['undo']();
            this['redoQueue']['unshift'](_0xecbcx6)
        };
        this['notifyStoresAboutUndoRedoComplete']();
        this['fireEvent']('undoqueuechange', this, _0xecbcx5['slice']());
        this['fireEvent']('redoqueuechange', this, this['redoQueue']['slice']());
        this['resume']();
        this['fireEvent']('afterundo', this)
    },
    redo: function(_0xecbcx3) {
        var _0xecbcx4 = this['redoQueue'],
            _0xecbcx6, _0xecbcx2, _0xecbcx5, _0xecbcx1 = _0xecbcx4['length'];
        if (this['state'] == 'disabled' || _0xecbcx3 === 0 || !_0xecbcx4['length']) {
            return
        };
        if (_0xecbcx3 instanceof Robo['Transaction']) {
            _0xecbcx2 = Ext['Array']['indexOf'](_0xecbcx4, _0xecbcx3);
            if (_0xecbcx2 == -1) {
                return
            };
            _0xecbcx3 = _0xecbcx2 + 1
        };
        _0xecbcx3 = _0xecbcx3 || 1;
        this['fireEvent']('beforeredo', this);
        this['pause']();
        this['notifyStoresAboutUndoRedoStart']();
        for (_0xecbcx5 = 0; _0xecbcx5 < Math['min'](_0xecbcx3, _0xecbcx1); _0xecbcx5++) {
            _0xecbcx6 = this['redoQueue']['shift']();
            _0xecbcx6['redo']();
            this['undoQueue']['push'](_0xecbcx6)
        };
        this['notifyStoresAboutUndoRedoComplete']();
        this['fireEvent']('redoqueuechange', this, this['redoQueue']['slice']());
        this['fireEvent']('undoqueuechange', this, this['undoQueue']['slice']());
        this['resume']();
        this['fireEvent']('afterredo', this)
    },
    undoAll: function() {
        this['undo'](this['undoQueue']['length'])
    },
    notifyStoresAboutTransactionStart: function(_0xecbcx1) {
        this['forEachStore'](function(_0xecbcx2) {
            _0xecbcx2['onUndoRedoTransactionStart'] && _0xecbcx2['onUndoRedoTransactionStart'](this, _0xecbcx1)
        })
    },
    notifyStoresAboutTransactionEnd: function(_0xecbcx1) {
        this['forEachStore'](function(_0xecbcx2) {
            _0xecbcx2['onUndoRedoTransactionEnd'] && _0xecbcx2['onUndoRedoTransactionEnd'](this, _0xecbcx1)
        })
    },
    notifyStoresAboutUndoRedoStart: function() {
        this['forEachStore'](function(_0xecbcx1) {
            _0xecbcx1['beforeUndoRedo'] && _0xecbcx1['beforeUndoRedo'](this)
        })
    },
    notifyStoresAboutUndoRedoComplete: function() {
        this['forEachStore'](function(_0xecbcx1) {
            _0xecbcx1['afterUndoRedo'] && _0xecbcx1['afterUndoRedo'](this)
        })
    }
}, function() {
    Ext.apply(Robo, {
        VERSION: '5.1.3'
    })
});
Ext.define('Robo.data.Store', {
    extend: 'Ext.Mixin',
    requires: ['Ext.util.Observable'],
    undoRedoPostponed: null,
    inUndoRedoTransaction: false,
    undoRedoEventBus: null,
    mixinConfig: {
        before: {
            constructor: 'constructor',
            destroy: 'destroy',
            fireEventArgs: 'fireEventArgs',
            setRoot: 'beforeSetRoot',
            fillNode: 'beforeFillNode'
        },
        after: {
            setRoot: 'afterSetRoot',
            fillNode: 'afterFillNode'
        }
    },
    constructor: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['undoRedoEventBus'] = new Ext['util'].Observable()
    },
    destroy: function() {
        Ext['destroy'](this['undoRedoEventBus'])
    },
    fireEventArgs: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx5 = this;
        if (!_0xecbcx2.hasOwnProperty('$undoRedoEventBusFired')) {
            _0xecbcx2['$undoRedoEventBusFired'] = {}
        };
        if (!_0xecbcx2['$undoRedoEventBusFired'][_0xecbcx1]) {
            _0xecbcx2['$undoRedoEventBusFired'][_0xecbcx1] = true;
            _0xecbcx5['undoRedoEventBus']['hasListener'](_0xecbcx1) && _0xecbcx5['undoRedoEventBus']['fireEventArgs'](_0xecbcx1, _0xecbcx2)
        }
    },
    isInUndoRedoTransaction: function() {
        return this['inUndoRedoTransaction']
    },
    onUndoRedoTransactionStart: function(_0xecbcx1, _0xecbcx2) {
        this['inUndoRedoTransaction'] = true
    },
    onUndoRedoTransactionEnd: function(_0xecbcx1, _0xecbcx2) {
        this['inUndoRedoTransaction'] = false
    },
    isUndoingOrRedoing: function() {
        return !!this['undoRedoPostponed']
    },
    beforeUndoRedo: function(_0xecbcx1) {
        this['undoRedoPostponed'] = []
    },
    afterUndoRedo: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        Ext['Array']['forEach'](_0xecbcx2['undoRedoPostponed'], function(_0xecbcx5) {
            _0xecbcx5()
        });
        _0xecbcx2['undoRedoPostponed'] = null
    },
    postponeAfterUndoRedo: function(_0xecbcx1) {
        Ext['Assert'] && Ext['Assert']['isFunction'](_0xecbcx1, 'Parameter must be a function');
        this['undoRedoPostponed']['push'](_0xecbcx1)
    },
    beforeSetRoot: function() {
        this['__isSettingRoot'] = true
    },
    afterSetRoot: function() {
        this['__isSettingRoot'] = false;
        if (!this['getRoot']()) {
            this['fireEvent']('clear', this)
        }
    },
    beforeFillNode: function(_0xecbcx1) {
        if (_0xecbcx1['isRoot']()) {
            this['beforeSetRoot']()
        }
    },
    afterFillNode: function(_0xecbcx1) {
        if (_0xecbcx1['isRoot']()) {
            this['afterSetRoot']()
        }
    },
    isRootSettingOrLoading: function() {
        return this['isLoading']() || (this['isTreeStore'] && this['__isSettingRoot'])
    }
});
Ext.define('Robo.widget.UndoButton', {
    extend: 'Ext.button.Split',
    alias: 'widget.roboundobutton',
    glyph: 'xf0e2@FontAwesome',
    robo: null,
    transactionList: null,
    type: 'undo',
    text: 'Undo',
    disabled: true,
    constructor: function(_0xecbcx1) {
        _0xecbcx1 = _0xecbcx1 || {};
        Ext.apply(this, _0xecbcx1);
        if (!this['robo']) {
            throw new Error('`robo` is a required config for the ' + this['$className'])
        };
        this['callParent'](_0xecbcx1)
    },
    initComponent: function() {
        var _0xecbcx1 = this;
        Ext.apply(this, {
            menu: new Ext['menu'].Menu({
                cls: 'robo-transaction-list',
                items: this['getTransactionItems'](),
                listeners: {
                    click: this['onTransactionClick'],
                    scope: this
                }
            })
        });
        this['on']('click', function() {
            _0xecbcx1['robo'][_0xecbcx1['type']]()
        });
        this['mon'](_0xecbcx1['robo'], _0xecbcx1['type'] + 'queuechange', this['onTransactionQueueChange'], this);
        this['callParent']()
    },
    onTransactionQueueChange: function(_0xecbcx2, _0xecbcx1) {
        this['setDisabled'](_0xecbcx1['length'] === 0);
        var _0xecbcx5 = this['menu'];
        _0xecbcx5['removeAll']();
        _0xecbcx5['add'](this['getTransactionItems']());
        if (!_0xecbcx1['length']) {
            _0xecbcx5['hide']()
        }
    },
    getTransactionItems: function() {
        var _0xecbcx2 = this;
        var _0xecbcx1 = Ext['Array']['map'](this['robo'][this['type'] + 'Queue'], function(_0xecbcx5) {
            return new Ext['menu'].Item({
                text: _0xecbcx5['getTitle'](),
                transaction: _0xecbcx5,
                listeners: {
                    activate: _0xecbcx2['onTransactionItemActivated'],
                    deactivate: _0xecbcx2['onTransactionItemDeActivated'],
                    scope: _0xecbcx2
                }
            })
        });
        if (this['type'] == 'undo') {
            _0xecbcx1['reverse']()
        };
        return _0xecbcx1
    },
    onTransactionClick: function(_0xecbcx2, _0xecbcx1) {
        if (!_0xecbcx1) {
            return
        };
        this['robo'][this['type']](_0xecbcx1['transaction'])
    },
    onTransactionItemActivated: function(_0xecbcx1) {
        this['menu']['items']['each'](function(_0xecbcx2) {
            if (_0xecbcx2 == _0xecbcx1) {
                return false
            };
            if (_0xecbcx2['rendered']) {
                _0xecbcx2['el']['addCls'](_0xecbcx2['activeCls'])
            }
        })
    },
    onTransactionItemDeActivated: function(_0xecbcx1) {
        this['menu']['items']['each'](function(_0xecbcx2) {
            if (_0xecbcx2 == _0xecbcx1) {
                return false
            };
            if (_0xecbcx2['rendered']) {
                _0xecbcx2['el']['removeCls'](_0xecbcx2['activeCls'])
            }
        })
    }
});
Ext.define('Robo.widget.RedoButton', {
    extend: 'Robo.widget.UndoButton',
    alias: 'widget.roboredobutton',
    glyph: 'xf01e@FontAwesome',
    type: 'redo',
    text: 'Redo'
});
Ext.define('Robo.widget.StatusPanel', {
    extend: 'Ext.tree.Panel',
    alias: 'widget.robostatuspanel',
    robo: null,
    type: 'undo',
    constructor: function(_0xecbcx1) {
        _0xecbcx1 = _0xecbcx1 || {};
        Ext.apply(this, _0xecbcx1);
        if (!this['robo']) {
            throw new Error('`robo` is a required config for the ' + this['$className'])
        };
        this['callParent'](_0xecbcx1)
    },
    initComponent: function() {
        var _0xecbcx1 = this;
        Ext.apply(this, {
            rootVisible: false,
            columns: [{
                xtype: 'treecolumn',
                text: 'Title',
                dataIndex: 'title',
                width: 250
            }, {
                text: 'Changed fields',
                dataIndex: 'fieldNames',
                flex: 1,
                tdCls: 'fieldnames'
            }],
            store: {
                fields: ['title', 'fieldNames', 'isActive']
            },
            viewConfig: {
                getRowClass: Ext['Function']['bind'](this['getActiveRowClass'], this)
            }
        });
        this['mon'](_0xecbcx1['robo'], _0xecbcx1['type'] + 'queuechange', this['onTransactionQueueChange'], this);
        this['callParent']()
    },
    getActiveRowClass: function(_0xecbcx1, _0xecbcx3, _0xecbcx5, _0xecbcx2) {
        return _0xecbcx1['get']('isActive') ? 'robo-status-active' : ''
    },
    onTransactionQueueChange: function(_0xecbcx5, _0xecbcx1) {
        var _0xecbcx3 = this['type'];
        var _0xecbcx2 = Ext['Array']['map'](_0xecbcx1, function(_0xecbcx9, _0xecbcx4) {
            var _0xecbcx6 = _0xecbcx3 == 'undo' ? _0xecbcx4 == _0xecbcx1['length'] - 1 : _0xecbcx4 === 0;
            return {
                leaf: false,
                expanded: true,
                title: _0xecbcx9['getTitle'](),
                isActive: _0xecbcx6,
                children: Ext['Array']['map'](_0xecbcx9['getActions'](), function(_0xecbcxa) {
                    var _0xecbcx7 = _0xecbcxa['getRecord']();
                    return {
                        leaf: true,
                        title: _0xecbcxa['getTitle'](),
                        fieldNames: _0xecbcxa instanceof Robo['action']['flat']['Update'] ? _0xecbcxa['fieldNames'].join(', ') : '',
                        isActive: _0xecbcx6
                    }
                })
            }
        });
        this['store']['setRootNode']({
            expanded: true,
            children: _0xecbcx2
        });
        this['getView']()['scrollTo'](0, Infinity)
    }
});
Ext.define('Ext.ux.Scheduler.crud.AbstractManager', {
    requires: ['Ext.data.StoreManager'],
    mixins: {
        observable: 'Ext.util.Observable'
    },
    revision: null,
    stores: null,
    storeIdProperty: 'storeId',
    filterParam: 'filter',
    storesIndex: null,
    activeRequests: null,
    delayedSyncs: null,
    transport: null,
    trackResponseType: false,
    phantomIdField: '$PhantomId',
    autoLoad: false,
    autoSyncTimeout: 100,
    autoSync: false,
    resetIdsBeforeSync: true,
    syncApplySequence: null,
    writeAllFields: false,
    destroyed: false,
    ignoreUpdates: 0,
    loaded: false,
    createMissingRecords: false,
    autoSyncTimerId: null,
    applyingLoadResponse: false,
    applyingSyncResponse: false,
    constructor: function(_0xecbcx2) {
        _0xecbcx2 = _0xecbcx2 || {};
        this['mixins']['observable']['constructor']['call'](this, _0xecbcx2);
        this['activeRequests'] = {};
        this['delayedSyncs'] = [];
        this['transport'] = _0xecbcx2['transport'] || this['transport'] || {};
        var _0xecbcx1 = _0xecbcx2['stores'] || this['stores'];
        this['stores'] = [];
        this['addStore'](_0xecbcx1);
        var _0xecbcx5 = _0xecbcx2['syncApplySequence'] || this['syncApplySequence'];
        if (_0xecbcx5) {
            this['syncApplySequence'] = null;
            this['addStoreToApplySequence'](_0xecbcx5)
        };
        if (this['autoLoad']) {
            this['load']()
        }
    },
    updateStoreIndex: function() {
        var _0xecbcx2 = {};
        for (var _0xecbcx3 = 0, _0xecbcx1 = this['stores']['length']; _0xecbcx3 < _0xecbcx1; _0xecbcx3++) {
            var _0xecbcx5 = this['stores'][_0xecbcx3];
            if (_0xecbcx5['storeId']) {
                _0xecbcx2[_0xecbcx5['storeId']] = this['stores'][_0xecbcx3]
            }
        };
        this['storesIndex'] = _0xecbcx2
    },
    getStoreDescriptor: function(_0xecbcx2) {
        if (!_0xecbcx2) {
            return
        };
        if (_0xecbcx2['isStore']) {
            for (var _0xecbcx5 = 0, _0xecbcx1 = this['stores']['length']; _0xecbcx5 < _0xecbcx1; _0xecbcx5++) {
                if (this['stores'][_0xecbcx5]['store'] === _0xecbcx2) {
                    return this['stores'][_0xecbcx5]
                }
            }
        } else {
            if (typeof _0xecbcx2 == 'object') {
                return this['storesIndex'][_0xecbcx2['storeId']]
            } else {
                return this['storesIndex'][_0xecbcx2] || this['getStoreDescriptor'](Ext['data']['StoreManager']['get'](_0xecbcx2))
            }
        }
    },
    getStore: function(_0xecbcx1) {
        var _0xecbcx2 = this['getStoreDescriptor'](_0xecbcx1);
        return _0xecbcx2 && _0xecbcx2['store']
    },
    forEachStore: function(_0xecbcx4, _0xecbcx3) {
        if (!_0xecbcx4) {
            return
        };
        var _0xecbcx2 = this['stores'];
        for (var _0xecbcx5 = 0, _0xecbcx1 = _0xecbcx2['length']; _0xecbcx5 < _0xecbcx1; _0xecbcx5++) {
            if (_0xecbcx4['call'](_0xecbcx3 || this, _0xecbcx2[_0xecbcx5]['store'], _0xecbcx2[_0xecbcx5]['storeId'], _0xecbcx2[_0xecbcx5]) === false) {
                break
            }
        }
    },
    addStore: function(_0xecbcxb, _0xecbcx7, _0xecbcx1) {
        if (!_0xecbcxb) {
            return
        };
        if (!Ext['isArray'](_0xecbcxb)) {
            _0xecbcxb = [_0xecbcxb]
        };
        var _0xecbcx6 = [];
        for (var _0xecbcx9 = 0, _0xecbcx5 = _0xecbcxb['length']; _0xecbcx9 < _0xecbcx5; _0xecbcx9++) {
            var _0xecbcxc = _0xecbcxb[_0xecbcx9];
            if (_0xecbcxc['isStore']) {
                _0xecbcxc = {
                    store: _0xecbcxc
                }
            } else {
                if (typeof _0xecbcxc == 'object') {
                    if (_0xecbcxc['stores']) {
                        if (!Ext['isArray'](_0xecbcxc['stores'])) {
                            _0xecbcxc['stores'] = [_0xecbcxc['stores']]
                        };
                        for (var _0xecbcx3 = 0, _0xecbcx2 = _0xecbcxc['stores']['length']; _0xecbcx3 < _0xecbcx2; _0xecbcx3++) {
                            var _0xecbcxd = _0xecbcxc['stores'][_0xecbcx3],
                                _0xecbcx4 = _0xecbcxd;
                            if ('string' === typeof _0xecbcxd) {
                                _0xecbcx4 = {
                                    storeId: _0xecbcxd
                                }
                            };
                            _0xecbcx4['masterStoreInfo'] = _0xecbcxc;
                            _0xecbcxc['stores'][_0xecbcx3] = _0xecbcx4
                        }
                    }
                } else {
                    _0xecbcxc = {
                        store: Ext['data']['StoreManager']['get'](_0xecbcxc)
                    }
                }
            };
            _0xecbcx6['push'](this['fillStoreDescriptor'](_0xecbcxc));
            if (_0xecbcxc['store']['setCrudManager']) {
                _0xecbcxc['store']['setCrudManager'](this)
            } else {
                _0xecbcxc['store']['crudManager'] = this
            };
            if (_0xecbcxc['store']['isTreeStore']) {
                _0xecbcxc['store']['setProxy']({
                    type: 'memory'
                })
            };
            _0xecbcxc['store']['setAsynchronousLoad'](false);
            this['bindStoreListeners'](_0xecbcxc['store'])
        };
        if (typeof _0xecbcx7 === 'undefined') {
            this['stores']['push']['apply'](this['stores'], _0xecbcx6)
        } else {
            var _0xecbcxe = _0xecbcx7;
            if (_0xecbcx1) {
                if (_0xecbcx1['isStore'] || typeof _0xecbcx1 !== 'object') {
                    _0xecbcx1 = this['getStoreDescriptor'](_0xecbcx1)
                };
                _0xecbcxe += Ext['Array']['indexOf'](this['stores'], _0xecbcx1)
            };
            this['stores']['splice']['apply'](this['stores'], []['concat']([_0xecbcxe, 0], _0xecbcx6))
        };
        this['updateStoreIndex']()
    },
    bindStoreListeners: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = {
            update: this['onStoreUpdate'],
            clear: this['onStoreChange'],
            scope: this
        };
        if (_0xecbcx2['isTreeStore']) {
            Ext.apply(_0xecbcx5, {
                nodeappend: this['onTreeStoreInsertOrAppend'],
                nodeinsert: this['onTreeStoreInsertOrAppend'],
                noderemove: this['onNodeRemove']
            })
        } else {
            Ext.apply(_0xecbcx5, {
                add: this['onStoreChange'],
                remove: this['onStoreChange']
            })
        };
        if (_0xecbcx1) {
            this['mun'](_0xecbcx2, _0xecbcx5)
        } else {
            this['mon'](_0xecbcx2, _0xecbcx5)
        }
    },
    unbindStoreListeners: function(_0xecbcx1) {
        this['bindStoreListeners'](_0xecbcx1, true)
    },
    fillStoreDescriptor: function(_0xecbcx3) {
        var _0xecbcx1 = _0xecbcx3['store'],
            _0xecbcx5 = _0xecbcx1['storeIdProperty'] || this['storeIdProperty'],
            _0xecbcx2 = _0xecbcx1['getModel'] && _0xecbcx1['getModel']() || _0xecbcx1['model'];
        _0xecbcx2 = _0xecbcx2 && _0xecbcx2['prototype'];
        Ext['applyIf'](_0xecbcx3, {
            storeId: _0xecbcx1[_0xecbcx5],
            phantomIdField: _0xecbcx2 && _0xecbcx2['phantomIdField'],
            idProperty: _0xecbcx2 && _0xecbcx2['idProperty'],
            writeAllFields: _0xecbcx1['writeAllFields']
        });
        return _0xecbcx3
    },
    removeStore: function(_0xecbcx2) {
        for (var _0xecbcx5 = 0, _0xecbcx1 = this['stores']['length']; _0xecbcx5 < _0xecbcx1; _0xecbcx5++) {
            var _0xecbcx3 = this['stores'][_0xecbcx5];
            if (_0xecbcx3 === _0xecbcx2 || _0xecbcx3['store'] === _0xecbcx2 || _0xecbcx3['storeId'] === _0xecbcx2) {
                this['unbindStoreListeners'](_0xecbcx3['store']);
                delete this['storesIndex'][_0xecbcx3['storeId']];
                this['stores']['splice'](_0xecbcx5, 1);
                if (this['syncApplySequence']) {
                    this['removeStoreFromApplySequence'](_0xecbcx2)
                };
                break
            }
        }
    },
    addStoreToApplySequence: function(_0xecbcx5, _0xecbcx1, _0xecbcx4) {
        if (!_0xecbcx5) {
            return
        };
        if (!Ext['isArray'](_0xecbcx5)) {
            _0xecbcx5 = [_0xecbcx5]
        };
        var _0xecbcx9 = [];
        for (var _0xecbcx3 = 0, _0xecbcx2 = _0xecbcx5['length']; _0xecbcx3 < _0xecbcx2; _0xecbcx3++) {
            var _0xecbcx6 = this['getStoreDescriptor'](_0xecbcx5[_0xecbcx3]);
            if (_0xecbcx6) {
                _0xecbcx9['push'](_0xecbcx6)
            }
        };
        if (!this['syncApplySequence']) {
            this['syncApplySequence'] = []
        };
        if (typeof _0xecbcx1 === 'undefined') {
            this['syncApplySequence']['push']['apply'](this['syncApplySequence'], _0xecbcx9)
        } else {
            var _0xecbcx7 = _0xecbcx1;
            if (_0xecbcx4) {
                if (_0xecbcx4['isStore'] || typeof _0xecbcx4 !== 'object') {
                    _0xecbcx4 = this['getStoreDescriptor'](_0xecbcx4)
                };
                _0xecbcx7 += Ext['Array']['indexOf'](this['syncApplySequence'], _0xecbcx4)
            };
            this['syncApplySequence']['splice']['apply'](this['syncApplySequence'], []['concat']([_0xecbcx7, 0], _0xecbcx9))
        }
    },
    removeStoreFromApplySequence: function(_0xecbcx2) {
        for (var _0xecbcx5 = 0, _0xecbcx1 = this['syncApplySequence']['length']; _0xecbcx5 < _0xecbcx1; _0xecbcx5++) {
            var _0xecbcx3 = this['syncApplySequence'][_0xecbcx5];
            if (_0xecbcx3 === _0xecbcx2 || _0xecbcx3['store'] === _0xecbcx2 || _0xecbcx3['storeId'] === _0xecbcx2) {
                this['syncApplySequence']['splice'](_0xecbcx5, 1);
                break
            }
        }
    },
    onNodeRemove: function(_0xecbcx1) {
        var _0xecbcx2 = _0xecbcx1 && _0xecbcx1['getTreeStore']();
        _0xecbcx2 && _0xecbcx2['on']('endupdate', this['onStoreChange'], this, {
            single: true
        })
    },
    onStoreUpdate: function(_0xecbcx4, _0xecbcx5, _0xecbcx3, _0xecbcx2) {
        if ((!_0xecbcx4['isTreeStore'] || _0xecbcx5 !== _0xecbcx4['getRoot']())) {
            var _0xecbcx1 = _0xecbcx2 && _0xecbcx2['length'] === 1 && _0xecbcx5['getField'](_0xecbcx2[0]) && !_0xecbcx5['getField'](_0xecbcx2[0])['persist'];
            if (!_0xecbcx1) {
                this['onStoreChange']()
            }
        }
    },
    onTreeStoreInsertOrAppend: function(_0xecbcx1, _0xecbcx2) {
        if (!_0xecbcx2['isRoot']()) {
            this['onStoreChange']()
        }
    },
    suspendChangesTracking: function() {
        this['ignoreUpdates']++
    },
    resumeChangesTracking: function(_0xecbcx1) {
        this['ignoreUpdates']--;
        _0xecbcx1 && this['onStoreChange']()
    },
    onStoreChange: function() {
        if (this['ignoreUpdates']) {
            return
        };
        var _0xecbcx1 = this;
        if (this['hasChanges']()) {
            this['fireEvent']('haschanges', this);
            if (this['autoSync']) {
                if (!this['autoSyncTimerId']) {
                    this['autoSyncTimerId'] = setTimeout(function() {
                        _0xecbcx1['autoSyncTimerId'] = null;
                        _0xecbcx1['sync']()
                    }, this['autoSyncTimeout'])
                }
            }
        } else {
            this['fireEvent']('nochanges', this)
        }
    },
    hasChanges: function(_0xecbcx2) {
        var _0xecbcx5;
        if (_0xecbcx2) {
            _0xecbcx5 = this['getStore'](_0xecbcx2);
            if (!_0xecbcx5) {
                return false
            };
            return this['isStoreDirty'](_0xecbcx5)
        };
        for (var _0xecbcx3 = 0, _0xecbcx1 = this['stores']['length']; _0xecbcx3 < _0xecbcx1; _0xecbcx3++) {
            if (this['isStoreDirty'](this['stores'][_0xecbcx3]['store'])) {
                return true
            }
        };
        return false
    },
    isStoreDirty: function(_0xecbcx3) {
        if (_0xecbcx3['getRemovedRecords']()['length']) {
            return true
        };
        if (_0xecbcx3['isTreeStore']) {
            for (var _0xecbcx6 in _0xecbcx3['byIdMap']) {
                var _0xecbcx2 = _0xecbcx3['byIdMap'][_0xecbcx6];
                if (_0xecbcx2['dirty'] === true && (!_0xecbcx2['get']('root') || Ext['Object']['getKeys'](_0xecbcx2['modified'])['length'] !== 1 || !('expanded' in _0xecbcx2['modified']))) {
                    return true
                } else {
                    if (!_0xecbcx2['get']('root') && _0xecbcx2['phantom'] && _0xecbcx2['isValid']()) {
                        return true
                    }
                }
            }
        } else {
            var _0xecbcx5 = _0xecbcx3['getData']()['items'];
            for (var _0xecbcx4 = 0, _0xecbcx1 = _0xecbcx5['length']; _0xecbcx4 < _0xecbcx1; _0xecbcx4++) {
                if (_0xecbcx5[_0xecbcx4]['dirty'] || _0xecbcx5[_0xecbcx4]['phantom']) {
                    return true
                }
            }
        };
        return false
    },
    getLoadPackage: function(_0xecbcxf) {
        var _0xecbcx8 = {
            type: 'load',
            requestId: this['getRequestId'](),
            stores: []
        };
        var _0xecbcxe = this['stores'],
            _0xecbcx3 = _0xecbcx8['stores'];
        for (var _0xecbcx9 = 0, _0xecbcx4 = _0xecbcxe['length']; _0xecbcx9 < _0xecbcx4; _0xecbcx9++) {
            var _0xecbcxd = _0xecbcxe[_0xecbcx9],
                _0xecbcx2 = _0xecbcxd['filterParam'] || _0xecbcxd['store']['filterParam'] || this['filterParam'],
                _0xecbcx1 = _0xecbcxf && _0xecbcxf[_0xecbcxd['storeId']],
                _0xecbcx7 = _0xecbcxd['pageSize'] || _0xecbcxd['store']['pageSize'];
            if (_0xecbcxd['store']['remoteFilter'] && _0xecbcx2) {
                _0xecbcx1 = _0xecbcx1 || {};
                var _0xecbcx5 = [];
                _0xecbcxd['store']['getFilters']()['each'](function(_0xecbcxa) {
                    _0xecbcx5['push'](_0xecbcxa['serialize']())
                });
                _0xecbcx1[_0xecbcx2] = _0xecbcx5
            };
            if (_0xecbcx1 || _0xecbcx7) {
                var _0xecbcx6 = Ext.apply({
                    storeId: _0xecbcxd['storeId'],
                    page: 1,
                    pageSize: _0xecbcx7
                }, _0xecbcx1);
                _0xecbcxe[_0xecbcx9]['currentPage'] = _0xecbcx6['page'];
                _0xecbcx3['push'](_0xecbcx6)
            } else {
                _0xecbcx3['push'](_0xecbcxd['storeId'])
            }
        };
        return _0xecbcx8
    },
    prepareAdded: function(_0xecbcx7, _0xecbcxe, _0xecbcxd) {
        var _0xecbcxc = [];
        for (var _0xecbcx5 = 0, _0xecbcx1 = _0xecbcx7['length']; _0xecbcx5 < _0xecbcx1; _0xecbcx5++) {
            var _0xecbcx3 = _0xecbcx7[_0xecbcx5],
                _0xecbcx2 = {},
                _0xecbcx4 = _0xecbcx3['getFields']();
            if (!_0xecbcx2.hasOwnProperty(_0xecbcxe)) {
                _0xecbcx2[_0xecbcxe] = _0xecbcx3['getId']()
            };
            for (var _0xecbcx9 = 0, _0xecbcxf = _0xecbcx4['length']; _0xecbcx9 < _0xecbcxf; _0xecbcx9++) {
                var _0xecbcx8 = _0xecbcx4[_0xecbcx9];
                if (_0xecbcx8) {
                    if (_0xecbcx8['persist'] && (_0xecbcx3['data'].hasOwnProperty(_0xecbcx8['name']) || _0xecbcx8['critical'])) {
                        if (_0xecbcx8['serialize']) {
                            _0xecbcx2[_0xecbcx8['name']] = _0xecbcx8['serialize'](_0xecbcx3['data'][_0xecbcx8['name']], _0xecbcx3)
                        } else {
                            _0xecbcx2[_0xecbcx8['name']] = _0xecbcx3['data'][_0xecbcx8['name']]
                        }
                    }
                }
            };
            if (this['resetIdsBeforeSync']) {
                delete _0xecbcx2[_0xecbcx3['idProperty']]
            };
            if (_0xecbcxd) {
                this['processSubStores'](_0xecbcx3, _0xecbcx2, _0xecbcxd)
            };
            _0xecbcxc['push'](_0xecbcx2)
        };
        return _0xecbcxc
    },
    prepareUpdated: function(_0xecbcxe, _0xecbcxb, _0xecbcxc) {
        var _0xecbcx10 = [],
            _0xecbcx2 = _0xecbcxc['writeAllFields'] || (_0xecbcxc['writeAllFields'] !== false && this['writeAllFields']),
            _0xecbcx4, _0xecbcxf;
        for (var _0xecbcx9 = 0, _0xecbcx5 = _0xecbcxe['length']; _0xecbcx9 < _0xecbcx5; _0xecbcx9++) {
            var _0xecbcx7 = _0xecbcxe[_0xecbcx9],
                _0xecbcxd;
            if (_0xecbcx2) {
                _0xecbcx4 = _0xecbcx7['getData']();
                _0xecbcx4[_0xecbcx7['idProperty']] = _0xecbcx7['getId']();
                for (_0xecbcxd in _0xecbcx4) {
                    _0xecbcxf = _0xecbcx7['getField'](_0xecbcxd);
                    if (!_0xecbcxf || !_0xecbcxf['persist'] && !_0xecbcxf['critical']) {
                        delete _0xecbcx4[_0xecbcxd]
                    } else {
                        if (_0xecbcxf['serialize']) {
                            _0xecbcx4[_0xecbcxd] = _0xecbcxf['serialize'](_0xecbcx4[_0xecbcxd], _0xecbcx7)
                        } else {
                            _0xecbcx4[_0xecbcxd] = _0xecbcx7['get'](_0xecbcxd)
                        }
                    }
                }
            } else {
                _0xecbcx4 = _0xecbcx7['getChanges']();
                _0xecbcx4[_0xecbcx7['idProperty']] = _0xecbcx7['getId']();
                for (_0xecbcxd in _0xecbcx4) {
                    _0xecbcxf = _0xecbcx7['getField'](_0xecbcxd);
                    if (!_0xecbcxf || !_0xecbcxf['persist']) {
                        delete _0xecbcx4[_0xecbcxd]
                    } else {
                        if (_0xecbcxf['serialize']) {
                            _0xecbcx4[_0xecbcxd] = _0xecbcxf['serialize'](_0xecbcx4[_0xecbcxd], _0xecbcx7)
                        } else {
                            _0xecbcx4[_0xecbcxd] = _0xecbcx7['get'](_0xecbcxd)
                        }
                    }
                };
                var _0xecbcx1 = _0xecbcx7['getCriticalFields']();
                for (var _0xecbcx3 = 0; _0xecbcx3 < _0xecbcx1['length']; _0xecbcx3++) {
                    _0xecbcxf = _0xecbcx1[_0xecbcx3];
                    if (_0xecbcxf['serialize']) {
                        _0xecbcx4[_0xecbcxf['getName']()] = _0xecbcxf['serialize'](_0xecbcx7['get'](_0xecbcxf['getName']()), _0xecbcx7)
                    } else {
                        _0xecbcx4[_0xecbcxf['getName']()] = _0xecbcx7['get'](_0xecbcxf['getName']())
                    }
                }
            };
            if (_0xecbcxb) {
                this['processSubStores'](_0xecbcx7, _0xecbcx4, _0xecbcxb)
            };
            _0xecbcx10['push'](_0xecbcx4)
        };
        return _0xecbcx10
    },
    prepareRemoved: function(_0xecbcx4) {
        var _0xecbcx1 = [],
            _0xecbcx3;
        for (var _0xecbcx5 = 0, _0xecbcx2 = _0xecbcx4['length']; _0xecbcx5 < _0xecbcx2; _0xecbcx5++) {
            _0xecbcx3 = {};
            _0xecbcx3[_0xecbcx4[_0xecbcx5]['idProperty']] = _0xecbcx4[_0xecbcx5]['getId']();
            _0xecbcx1['push'](_0xecbcx3)
        };
        return _0xecbcx1
    },
    processSubStores: function(_0xecbcx2, _0xecbcx6, _0xecbcx1) {
        for (var _0xecbcx3 = 0, _0xecbcx7 = _0xecbcx1['length']; _0xecbcx3 < _0xecbcx7; _0xecbcx3++) {
            var _0xecbcx9 = _0xecbcx1[_0xecbcx3]['storeId'],
                _0xecbcx5 = _0xecbcx2['get'](_0xecbcx9);
            if (_0xecbcx5) {
                var _0xecbcx4 = this['getStoreChanges'](Ext.apply({
                    store: _0xecbcx5
                }, _0xecbcx1[_0xecbcx3]));
                if (_0xecbcx4) {
                    _0xecbcx6[_0xecbcx9] = Ext.apply(_0xecbcx4, {
                        $store: true
                    })
                } else {
                    delete _0xecbcx6[_0xecbcx9]
                }
            } else {
                delete _0xecbcx6[_0xecbcx9]
            }
        }
    },
    getStoreChanges: function(_0xecbcx3, _0xecbcx9) {
        _0xecbcx9 = _0xecbcx9 || _0xecbcx3['phantomIdField'] || this['phantomIdField'];
        var _0xecbcx6 = _0xecbcx3['store'],
            _0xecbcx4 = _0xecbcx6['getNewRecords'](),
            _0xecbcx5 = _0xecbcx6['getUpdatedRecords'](),
            _0xecbcx7 = _0xecbcx6['getRemovedRecords'](),
            _0xecbcx2 = _0xecbcx3['stores'];
        var _0xecbcx1;
        if (_0xecbcx4['length']) {
            _0xecbcx4 = this['prepareAdded'](_0xecbcx4, _0xecbcx9, _0xecbcx2)
        };
        if (_0xecbcx5['length']) {
            _0xecbcx5 = this['prepareUpdated'](_0xecbcx5, _0xecbcx2, _0xecbcx3)
        };
        if (_0xecbcx7['length']) {
            _0xecbcx7 = this['prepareRemoved'](_0xecbcx7)
        };
        if (_0xecbcx4['length'] || _0xecbcx5['length'] || _0xecbcx7['length']) {
            _0xecbcx1 = {};
            if (_0xecbcx4['length']) {
                _0xecbcx1['added'] = _0xecbcx4
            };
            if (_0xecbcx5['length']) {
                _0xecbcx1['updated'] = _0xecbcx5
            };
            if (_0xecbcx7['length']) {
                _0xecbcx1['removed'] = _0xecbcx7
            }
        };
        return _0xecbcx1
    },
    getChangeSetPackage: function() {
        var _0xecbcx3 = {
            type: 'sync',
            requestId: this['getRequestId'](),
            revision: this['revision']
        };
        var _0xecbcx6 = this['stores'],
            _0xecbcx8 = 0;
        for (var _0xecbcx2 = 0, _0xecbcx1 = _0xecbcx6['length']; _0xecbcx2 < _0xecbcx1; _0xecbcx2++) {
            var _0xecbcx4 = _0xecbcx6[_0xecbcx2],
                _0xecbcx9 = _0xecbcx4['phantomIdField'] || this['phantomIdField'],
                _0xecbcx7 = _0xecbcx4['storeId'];
            var _0xecbcx5 = this['getStoreChanges'](_0xecbcx4, _0xecbcx9);
            if (_0xecbcx5) {
                _0xecbcx8++;
                _0xecbcx3[_0xecbcx7] = _0xecbcx5
            }
        };
        return _0xecbcx8 ? _0xecbcx3 : null
    },
    getSubStoresData: function(_0xecbcx7, _0xecbcx6, _0xecbcx9, _0xecbcx4) {
        if (!_0xecbcx7) {
            return
        };
        var _0xecbcx8 = [];
        var _0xecbcx1 = function(_0xecbcxf, _0xecbcxc) {
            for (var _0xecbcx11 = 0, _0xecbcxa = _0xecbcxc['length']; _0xecbcx11 < _0xecbcxa; _0xecbcx11++) {
                var _0xecbcxd = _0xecbcxc[_0xecbcx11]['storeId'];
                if (_0xecbcxf[_0xecbcxd]) {
                    _0xecbcx8['push']({
                        id: _0xecbcxf[_0xecbcx9],
                        storeDesc: _0xecbcxc[_0xecbcx11],
                        data: _0xecbcxf[_0xecbcxd]
                    });
                    delete _0xecbcxf[_0xecbcxd]
                }
            }
        };
        var _0xecbcx3 = 0,
            _0xecbcx5 = _0xecbcx7['length'];
        if (_0xecbcx4) {
            for (; _0xecbcx3 < _0xecbcx5; _0xecbcx3++) {
                _0xecbcx1(_0xecbcx7[_0xecbcx3], _0xecbcx6);
                var _0xecbcx2 = this['getSubStoresData'](_0xecbcx7[_0xecbcx3]['children'], _0xecbcx6, _0xecbcx9, true);
                if (_0xecbcx2) {
                    _0xecbcx8 = _0xecbcx8['concat'](_0xecbcx2)
                }
            }
        } else {
            for (; _0xecbcx3 < _0xecbcx5; _0xecbcx3++) {
                _0xecbcx1(_0xecbcx7[_0xecbcx3], _0xecbcx6)
            }
        };
        return _0xecbcx8
    },
    loadDataToTreeStore: function(_0xecbcx2, _0xecbcx4, _0xecbcx5, _0xecbcx6) {
        var _0xecbcx3 = _0xecbcx4 && _0xecbcx4['rows'];
        var _0xecbcx1 = _0xecbcx2['getRoot']();
        if (_0xecbcx1) {
            _0xecbcx1['modified'] = null;
            _0xecbcx1['reject']()
        };
        _0xecbcx2['proxy']['data'] = _0xecbcx3;
        _0xecbcx2['load']()
    },
    loadDataToFlatStore: function(_0xecbcx2, _0xecbcx4, _0xecbcx5, _0xecbcx6) {
        var _0xecbcx3 = _0xecbcx4 && _0xecbcx4['rows'];
        _0xecbcx2['totalCount'] = _0xecbcx4['total'];
        _0xecbcx2['currentPage'] = _0xecbcx6['currentPage'];
        var _0xecbcx1 = Ext['Array']['map'](_0xecbcx3, function(_0xecbcx9) {
            return new _0xecbcx2['model'](_0xecbcx9)
        });
        _0xecbcx2['loadData'](_0xecbcx1, _0xecbcx5 && _0xecbcx5['append'] || _0xecbcx4['append']);
        _0xecbcx2['fireEvent']('load', _0xecbcx2, _0xecbcx1, true)
    },
    loadDataToStore: function(_0xecbcx2, _0xecbcx6, _0xecbcx10) {
        var _0xecbcxe = _0xecbcx2['store'],
            _0xecbcx9 = _0xecbcxe['getModel'](),
            _0xecbcxf = _0xecbcx2['stores'],
            _0xecbcxc = _0xecbcx2['idProperty'] || _0xecbcx9 && _0xecbcx9['prototype'] && _0xecbcx9['prototype']['idProperty'] || 'id',
            _0xecbcx8 = _0xecbcxe['isTreeStore'],
            _0xecbcxd;
        _0xecbcxe['__loading'] = true;
        var _0xecbcxb = _0xecbcx6 && _0xecbcx6['rows'],
            _0xecbcx1 = _0xecbcx6 && _0xecbcx6['metaData'];
        if (_0xecbcx1) {
            if (_0xecbcxe['applyMetaData']) {
                _0xecbcxe['applyMetaData'](_0xecbcx1)
            } else {
                _0xecbcxe['metaData'] = _0xecbcx1
            }
        };
        if (_0xecbcxb) {
            if (_0xecbcxf) {
                _0xecbcxd = this['getSubStoresData'](_0xecbcxb, _0xecbcxf, _0xecbcxc, _0xecbcx8)
            };
            var _0xecbcx3 = _0xecbcx8 ? this['loadDataToTreeStore'] : this['loadDataToFlatStore'];
            _0xecbcx3['call'](this, _0xecbcxe, _0xecbcx6, _0xecbcx10, _0xecbcx2);
            if (_0xecbcxd) {
                for (var _0xecbcx4 = 0, _0xecbcx5 = _0xecbcxd['length']; _0xecbcx4 < _0xecbcx5; _0xecbcx4++) {
                    var _0xecbcx7 = _0xecbcxd[_0xecbcx4];
                    this['loadDataToStore'](Ext.apply({
                        store: _0xecbcxe[_0xecbcx8 ? 'getNodeById' : 'getById'](_0xecbcx7['id'])['get'](_0xecbcx7['storeDesc']['storeId'])
                    }, _0xecbcx7['storeDesc']), _0xecbcx7['data'])
                }
            }
        };
        _0xecbcxe['__loading'] = false
    },
    loadData: function(_0xecbcx5, _0xecbcx3) {
        _0xecbcx3 = _0xecbcx3 || {};
        this['suspendChangesTracking']();
        for (var _0xecbcx4 = 0, _0xecbcx2 = this['stores']['length']; _0xecbcx4 < _0xecbcx2; _0xecbcx4++) {
            var _0xecbcx9 = this['stores'][_0xecbcx4],
                _0xecbcx1 = _0xecbcx9['storeId'],
                _0xecbcx6 = _0xecbcx5[_0xecbcx1];
            if (_0xecbcx6) {
                this['loadDataToStore'](_0xecbcx9, _0xecbcx6, _0xecbcx3[_0xecbcx1])
            }
        };
        this['resumeChangesTracking']()
    },
    applyChangesToRecord: function(_0xecbcx9, _0xecbcxa, _0xecbcxc, _0xecbcxe) {
        var _0xecbcx6 = _0xecbcx9['data'],
            _0xecbcx4 = {},
            _0xecbcx5 = false,
            _0xecbcx1;
        if (_0xecbcxc) {
            for (var _0xecbcx3 = 0, _0xecbcx2 = _0xecbcxc['length']; _0xecbcx3 < _0xecbcx2; _0xecbcx3++) {
                _0xecbcx1 = _0xecbcxc[_0xecbcx3]['storeId'];
                if (_0xecbcxa.hasOwnProperty(_0xecbcx1)) {
                    _0xecbcx4[_0xecbcx1] = true;
                    var _0xecbcx7 = _0xecbcx9['get'](_0xecbcx1);
                    if (_0xecbcx7) {
                        this['applyChangesToStore'](Ext.apply({
                            store: _0xecbcx7
                        }, _0xecbcxc[_0xecbcx3]), _0xecbcxa[_0xecbcx1])
                    } else {
                        Ext['log']('Can\'t find store for the response sub - package')
                    }
                }
            }
        };
        for (_0xecbcx1 in _0xecbcxa) {
            if (_0xecbcxa.hasOwnProperty(_0xecbcx1) && !_0xecbcx4[_0xecbcx1]) {
                var _0xecbcx11 = _0xecbcxa[_0xecbcx1];
                if (!_0xecbcx9['isEqual'](_0xecbcx6[_0xecbcx1], _0xecbcx11)) {
                    if (!_0xecbcx5) {
                        _0xecbcx5 = true;
                        _0xecbcx9['beginEdit']()
                    };
                    if (_0xecbcx1 === _0xecbcx9['idProperty']) {
                        _0xecbcx9['setId'](_0xecbcx11)
                    } else {
                        if (_0xecbcx1 == 'parentId' && _0xecbcxe['isTreeStore']) {
                            var _0xecbcxd = (_0xecbcx11 && _0xecbcxe['getNodeById'](_0xecbcx11)) || _0xecbcxe['getRoot']();
                            _0xecbcxd['appendChild'](_0xecbcx9)
                        } else {
                            _0xecbcx9['set'](_0xecbcx1, _0xecbcx11)
                        }
                    }
                }
            }
        };
        this['suspendChangesTracking']();
        if (_0xecbcx5) {
            _0xecbcx9['endEdit']()
        };
        this['resumeChangesTracking']();
        _0xecbcx9['commit']()
    },
    applyRemovals: function(_0xecbcxc, _0xecbcxe, _0xecbcx3) {
        var _0xecbcxb = _0xecbcx3['idProperty'],
            _0xecbcxf = _0xecbcxc['isTreeStore'] ? _0xecbcxc['removedNodes'] : _0xecbcxc['removed'],
            _0xecbcx10 = _0xecbcx3['findByIdFn'],
            _0xecbcx1 = _0xecbcx3['removeRecordFn'],
            _0xecbcx7 = 0;
        for (var _0xecbcx9 = 0, _0xecbcx4 = _0xecbcxe['length']; _0xecbcx9 < _0xecbcx4; _0xecbcx9++) {
            var _0xecbcx6 = false;
            var _0xecbcx5 = _0xecbcxe[_0xecbcx9][_0xecbcxb];
            for (var _0xecbcx11 = 0, _0xecbcx2 = _0xecbcxf['length']; _0xecbcx11 < _0xecbcx2; _0xecbcx11++) {
                if (_0xecbcxf[_0xecbcx11]['getId']() == _0xecbcx5) {
                    _0xecbcxf['splice'](_0xecbcx11, 1);
                    _0xecbcx6 = true;
                    _0xecbcx7++;
                    break
                }
            };
            if (!_0xecbcx6) {
                var _0xecbcxa = _0xecbcx10(_0xecbcx5);
                if (_0xecbcxa) {
                    this['suspendChangesTracking']();
                    _0xecbcx1(_0xecbcxa);
                    Ext['Array']['remove'](_0xecbcxf, _0xecbcxa);
                    _0xecbcx7++;
                    this['resumeChangesTracking']()
                } else {
                    Ext['log']('Can\'t find record to remove from the response package ')
                }
            }
        };
        return _0xecbcx7
    },
    getApplyChangesToStoreHelpers: function(_0xecbcx1) {
        if (_0xecbcx1['isTreeStore']) {
            var _0xecbcx2 = function(_0xecbcx5) {
                return _0xecbcx1['getNodeById'](_0xecbcx5)
            };
            return {
                findByPhantomFn: _0xecbcx2,
                findByIdFn: _0xecbcx2,
                addRecordFn: function(_0xecbcx3) {
                    var _0xecbcx5 = (_0xecbcx3['parentId'] && _0xecbcx1['getNodeById'](_0xecbcx3['parentId'])) || _0xecbcx1['getRoot']();
                    return _0xecbcx5['appendChild'](_0xecbcx3)
                },
                removeRecordFn: function(_0xecbcx5) {
                    return _0xecbcx5['parentNode']['removeChild'](_0xecbcx5)
                }
            }
        } else {
            return {
                findByPhantomFn: function(_0xecbcx5) {
                    return _0xecbcx1['data']['getByKey'](_0xecbcx5)
                },
                findByIdFn: function(_0xecbcx5) {
                    return _0xecbcx1['getById'](_0xecbcx5)
                },
                addRecordFn: function(_0xecbcx5) {
                    return _0xecbcx1['add'](_0xecbcx5)[0]
                },
                removeRecordFn: function(_0xecbcx5) {
                    return _0xecbcx1['remove'](_0xecbcx5)
                }
            }
        }
    },
    applyChangesToStore: function(_0xecbcx11, _0xecbcx12) {
        var _0xecbcx13 = this,
            _0xecbcx2 = _0xecbcx11['phantomIdField'] || _0xecbcx13['phantomIdField'],
            _0xecbcx7 = _0xecbcx11['idProperty'],
            _0xecbcx9 = _0xecbcx11['store'];
        if (!_0xecbcx7) {
            var _0xecbcx4 = _0xecbcx9['getModel'] && _0xecbcx9['getModel']() || _0xecbcx9['model'];
            _0xecbcx4 = _0xecbcx4 && _0xecbcx4['prototype'];
            _0xecbcx7 = _0xecbcx4 && _0xecbcx4['idProperty'] || 'id'
        };
        var _0xecbcxb = _0xecbcx13['getApplyChangesToStoreHelpers'](_0xecbcx9),
            _0xecbcxf = _0xecbcxb['findByPhantomFn'],
            _0xecbcxe = _0xecbcxb['findByIdFn'],
            _0xecbcx1 = _0xecbcxb['addRecordFn'],
            _0xecbcx14 = _0xecbcxb['removeRecordFn'];
        var _0xecbcxa = _0xecbcx12['rows'],
            _0xecbcx15 = _0xecbcx12['removed'],
            _0xecbcx5;
        if (_0xecbcxa) {
            var _0xecbcx16, _0xecbcxc, _0xecbcx3, _0xecbcx6 = _0xecbcx11['stores'];
            for (var _0xecbcx17 = 0, _0xecbcx10 = _0xecbcxa['length']; _0xecbcx17 < _0xecbcx10; _0xecbcx17++) {
                _0xecbcx16 = _0xecbcxa[_0xecbcx17];
                _0xecbcx3 = _0xecbcx16[_0xecbcx2];
                _0xecbcxc = _0xecbcx16[_0xecbcx7];
                _0xecbcx5 = null;
                if (_0xecbcx3 != null) {
                    _0xecbcx5 = _0xecbcxf(_0xecbcx3)
                } else {
                    if (_0xecbcx7) {
                        _0xecbcx5 = _0xecbcxe(_0xecbcxc)
                    }
                };
                if (_0xecbcx5) {
                    _0xecbcx13['applyChangesToRecord'](_0xecbcx5, _0xecbcx16, _0xecbcx6, _0xecbcx9)
                } else {
                    _0xecbcx13['suspendChangesTracking']();
                    _0xecbcx5 = _0xecbcx1(_0xecbcx16);
                    _0xecbcx13['resumeChangesTracking']();
                    _0xecbcx5['commit']()
                }
            }
        };
        if (_0xecbcx15 && _0xecbcx13['applyRemovals'](_0xecbcx9, _0xecbcx15, {
                idProperty: _0xecbcx7,
                findByIdFn: _0xecbcxe,
                removeRecordFn: _0xecbcx14
            })) {
            _0xecbcx9['fireEvent']('datachanged', _0xecbcx9)
        }
    },
    applySyncResponse: function(_0xecbcx5) {
        this['applyingSyncResponse'] = true;
        var _0xecbcx2 = this['syncApplySequence'] || this['stores'];
        for (var _0xecbcx3 = 0, _0xecbcx1 = _0xecbcx2['length']; _0xecbcx3 < _0xecbcx1; _0xecbcx3++) {
            var _0xecbcx4 = _0xecbcx5[_0xecbcx2[_0xecbcx3]['storeId']];
            if (_0xecbcx4) {
                this['applyChangesToStore'](_0xecbcx2[_0xecbcx3], _0xecbcx4)
            }
        };
        this['applyingSyncResponse'] = false
    },
    applyLoadResponse: function(_0xecbcx1, _0xecbcx2) {
        this['applyingLoadResponse'] = true;
        this['loadData'](_0xecbcx1, _0xecbcx2);
        this['applyingLoadResponse'] = false
    },
    applyResponse: function(_0xecbcx1, _0xecbcx2, _0xecbcx5) {
        if (this['trackResponseType']) {
            _0xecbcx1 = _0xecbcx2['type'] || _0xecbcx1
        };
        switch (_0xecbcx1) {
            case 'load':
                this['applyLoadResponse'](_0xecbcx2, _0xecbcx5);
                break;
            case 'sync':
                this['applySyncResponse'](_0xecbcx2);
                break
        }
    },
    getRequestId: function() {
        return Ext['Date']['now']()
    },
    onResponse: function(_0xecbcx1, _0xecbcx3, _0xecbcx4, _0xecbcx5) {
        this['activeRequests'][_0xecbcx1] = null;
        var _0xecbcx2 = this['decode'](_0xecbcx3);
        if (!_0xecbcx2 || !_0xecbcx2['success']) {
            this['fireEvent']('requestfail', this, _0xecbcx1, _0xecbcx2, _0xecbcx4);
            this['fireEvent'](_0xecbcx1 + 'fail', this, _0xecbcx2, _0xecbcx4, _0xecbcx5);
            if ('string' != typeof _0xecbcx3) {
                _0xecbcx3 = '' + _0xecbcx3
            };
            this['warn']('CrudManager: ' + _0xecbcx1 + ' failed, please inspect the server response', _0xecbcx3['length'] < 1024 * 1024 && _0xecbcx3 || '');
            return _0xecbcx2
        };
        if ((this['fireEvent']('beforeresponseapply', this, _0xecbcx1, _0xecbcx2) !== false) && (this['fireEvent']('before' + _0xecbcx1 + 'apply', this, _0xecbcx2, _0xecbcx5) !== false)) {
            this['revision'] = _0xecbcx2['revision'];
            this['applyResponse'](_0xecbcx1, _0xecbcx2, _0xecbcx5);
            this['fireEvent']('requestdone', this, _0xecbcx1, _0xecbcx2, _0xecbcx4);
            this['fireEvent'](_0xecbcx1, this, _0xecbcx2, _0xecbcx4, _0xecbcx5);
            if (_0xecbcx1 === 'load' || !this['hasChanges']()) {
                this['fireEvent']('nochanges', this)
            }
        };
        return _0xecbcx2
    },
    onLoad: function(_0xecbcx2, _0xecbcx5, _0xecbcx1) {
        this['loaded'] = true;
        return this['onResponse']('load', _0xecbcx2, _0xecbcx5, _0xecbcx1)
    },
    onSync: function(_0xecbcx2, _0xecbcx5, _0xecbcx1) {
        return this['onResponse']('sync', _0xecbcx2, _0xecbcx5, _0xecbcx1)
    },
    load: function(_0xecbcx4, _0xecbcx1, _0xecbcx3) {
        var _0xecbcx2;
        if (typeof _0xecbcx4 === 'object') {
            _0xecbcx2 = _0xecbcx4;
            _0xecbcx4 = _0xecbcx1;
            _0xecbcx1 = _0xecbcx3;
            _0xecbcx3 = arguments[3]
        };
        var _0xecbcx5 = this['getLoadPackage'](_0xecbcx2);
        if (this['fireEvent']('beforeload', this, _0xecbcx5) !== false) {
            _0xecbcx3 = _0xecbcx3 || this;
            if (this['activeRequests']['load']) {
                this['cancelRequest'](this['activeRequests']['load']['desc']);
                this['fireEvent']('loadcanceled', this, _0xecbcx5)
            };
            this['activeRequests']['load'] = {
                id: _0xecbcx5['requestId']
            };
            this['activeRequests']['load']['desc'] = this['sendRequest']({
                data: this['encode'](_0xecbcx5),
                type: 'load',
                success: function(_0xecbcx9, _0xecbcx7) {
                    var _0xecbcx6 = this['onLoad'](_0xecbcx9, _0xecbcx7, _0xecbcx2);
                    if (_0xecbcx1 && (!_0xecbcx6 || !_0xecbcx6['success'])) {
                        _0xecbcx1['call'](_0xecbcx3, _0xecbcx6, _0xecbcx9, _0xecbcx2)
                    } else {
                        if (_0xecbcx4) {
                            _0xecbcx4['call'](_0xecbcx3, _0xecbcx6, _0xecbcx9, _0xecbcx2)
                        }
                    }
                },
                failure: function(_0xecbcx6, _0xecbcx9) {
                    this['onLoad'](_0xecbcx6, _0xecbcx9);
                    if (_0xecbcx1) {
                        _0xecbcx1['apply'](_0xecbcx3, arguments)
                    }
                },
                scope: this
            })
        } else {
            this['fireEvent']('loadcanceled', this, _0xecbcx5)
        }
    },
    sync: function(_0xecbcx3, _0xecbcx1, _0xecbcx5) {
        if (this['activeRequests']['sync']) {
            this['delayedSyncs']['push'](arguments);
            this['fireEvent']('syncdelayed', this, arguments);
            return
        };
        var _0xecbcx2 = this['getChangeSetPackage']();
        _0xecbcx5 = _0xecbcx5 || this;
        if (!_0xecbcx2) {
            if (_0xecbcx3) {
                _0xecbcx3['call'](_0xecbcx5, null, null)
            };
            return
        };
        if (this['fireEvent']('beforesync', this, _0xecbcx2) === false) {
            this['fireEvent']('synccanceled', this, _0xecbcx2);
            return
        };
        this['activeRequests']['sync'] = {
            id: _0xecbcx2['requestId']
        };
        this['activeRequests']['sync']['desc'] = this['sendRequest']({
            data: this['encode'](_0xecbcx2),
            type: 'sync',
            success: function(_0xecbcx7, _0xecbcx6) {
                var _0xecbcx9 = this['activeRequests']['sync'];
                var _0xecbcx4 = this['onSync'](_0xecbcx7, _0xecbcx6);
                if (_0xecbcx1 && (!_0xecbcx4 || !_0xecbcx4['success'])) {
                    _0xecbcx1['call'](_0xecbcx5, _0xecbcx4, _0xecbcx7, _0xecbcx9)
                } else {
                    if (_0xecbcx3) {
                        _0xecbcx3['call'](_0xecbcx5, _0xecbcx4, _0xecbcx7, _0xecbcx9)
                    }
                };
                this['runDelayedSync']()
            },
            failure: function(_0xecbcx6, _0xecbcx4) {
                this['onSync'](_0xecbcx6, _0xecbcx4);
                if (_0xecbcx1) {
                    _0xecbcx1['apply'](_0xecbcx5, arguments)
                };
                this['runDelayedSync']()
            },
            scope: this
        })
    },
    runDelayedSync: function() {
        var _0xecbcx1 = this['delayedSyncs']['shift']();
        if (!_0xecbcx1) {
            return
        };
        this['sync']['apply'](this, _0xecbcx1)
    },
    commit: function() {
        for (var _0xecbcx2 = 0, _0xecbcx1 = this['stores']['length']; _0xecbcx2 < _0xecbcx1; _0xecbcx2++) {
            this['stores'][_0xecbcx2]['store']['commitChanges']()
        }
    },
    reject: function() {
        for (var _0xecbcx2 = 0, _0xecbcx1 = this['stores']['length']; _0xecbcx2 < _0xecbcx1; _0xecbcx2++) {
            this['stores'][_0xecbcx2]['store']['rejectChanges']()
        }
    },
    warn: function() {
        if ('console' in window) {
            var _0xecbcx1 = console;
            _0xecbcx1['log'] && _0xecbcx1['log']['apply'] && _0xecbcx1['log']['apply'](_0xecbcx1, arguments)
        }
    },
    isLoading: function() {
        return Boolean(this['activeRequests']['load'] || this['applyingLoadResponse'])
    },
    destroy: function() {
        var _0xecbcx1 = this;
        if (_0xecbcx1['destroyed']) {
            return
        };
        _0xecbcx1['activeRequests']['load'] && _0xecbcx1['cancelRequest'](_0xecbcx1['activeRequests']['load']['desc']);
        _0xecbcx1['activeRequests']['sync'] && _0xecbcx1['cancelRequest'](_0xecbcx1['activeRequests']['sync']['desc']);
        while (_0xecbcx1['stores']['length'] > 0) {
            _0xecbcx1['removeStore'](_0xecbcx1['stores'][0])
        };
        clearTimeout(_0xecbcx1['autoSyncTimerId']);
        _0xecbcx1['destroyed'] = true
    }
});
Ext.define('Ext.ux.Scheduler.app.CrudManagerDomain', {
    extend: 'Ext.app.EventDomain',
    singleton: true,
    requires: ['Ext.ux.Scheduler.crud.AbstractManager'],
    type: 'crudmanager',
    prefix: 'crudmanager.',
    constructor: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['callParent']();
        _0xecbcx1['monitor'](Ext.ux.Scheduler['crud'].AbstractManager)
    },
    match: function(_0xecbcx3, _0xecbcx2) {
        var _0xecbcx1 = false,
            _0xecbcx5 = _0xecbcx3['alias'];
        if (_0xecbcx2 === '*') {
            _0xecbcx1 = true
        } else {
            if (_0xecbcx5) {
                _0xecbcx1 = Ext['Array']['indexOf'](_0xecbcx5, this['prefix'] + _0xecbcx2) > -1
            }
        };
        return _0xecbcx1
    }
});
Ext.define('Ext.ux.Scheduler.column.Day', {
    extend: 'Ext.grid.column.Column',
    alias: 'widget.weekview-day',
    align: 'center',
    start: null,
    end: null,
    draggable: false,
    groupable: false,
    hideable: false,
    sortable: false,
    menuDisabled: true,
    enableLocking: false,
    lockable: false,
    flex: 1,
    resizable: false,
    cellFocusable: false,
    tdCls: 'sch-timetd',
    initComponent: function() {
        var _0xecbcx1 = new Date();
        this['addCls']('sch-daycolumn-header');
        if (this['isWeekend']()) {
            this['addCls']('sch-daycolumn-header-weekend');
            this['tdCls'] = (this['tdCls'] || '') + ' sch-daycolumn-weekend'
        };
        if (this['start']['getDate']() === _0xecbcx1['getDate']() && this['start']['getMonth']() === _0xecbcx1['getMonth']() && this['start']['getYear']() === _0xecbcx1['getYear']()) {
            this['addCls']('sch-daycolumn-header-today');
            this['tdCls'] = (this['tdCls'] || '') + ' sch-daycolumn-today'
        };
        this['callParent'](arguments)
    },
    isWeekend: function() {
        var _0xecbcx1 = this['start']['getDay']();
        return _0xecbcx1 === 6 || _0xecbcx1 === 0
    }
});
Ext.define('Ext.ux.Scheduler.column.Resource', {
    extend: 'Ext.grid.Column',
    alias: 'widget.resourcecolumn',
    align: 'center',
    menuDisabled: true,
    hideable: false,
    sortable: false,
    locked: false,
    lockable: false,
    draggable: false,
    enableLocking: false,
    cellFocusable: false,
    model: null,
    initComponent: function() {
        this['tdCls'] = (this['tdCls'] || '') + ' sch-timetd';
        this['cls'] = (this['cls'] || '') + ' sch-resourcecolumn-header';
        this['callParent'](arguments)
    }
});
Ext.define('Ext.ux.Scheduler.locale.Locale', {
    l10n: null,
    legacyMode: true,
    localeName: null,
    namespaceId: null,
    constructor: function() {
        if (!Ext.ux.Scheduler['locale']['Active']) {
            Ext.ux.Scheduler['locale']['Active'] = {};
            this['bindRequire']()
        };
        var _0xecbcx2 = this['self']['getName']()['split']('.');
        var _0xecbcx1 = this['localeName'] = _0xecbcx2['pop']();
        this['namespaceId'] = _0xecbcx2.join('.');
        var _0xecbcx5 = Ext.ux.Scheduler['locale']['Active'][this['namespaceId']];
        if (!(_0xecbcx1 == 'En' && _0xecbcx5 && _0xecbcx5['localeName'] != 'En')) {
            this['apply']()
        }
    },
    bindRequire: function() {
        var _0xecbcx1 = Ext['ClassManager']['triggerCreated'];
        Ext['ClassManager']['triggerCreated'] = function(_0xecbcx3) {
            _0xecbcx1['apply'](this, arguments);
            if (_0xecbcx3) {
                var _0xecbcx5 = Ext['ClassManager']['get'](_0xecbcx3);
                for (var _0xecbcx2 in Ext.ux.Scheduler['locale']['Active']) {
                    Ext.ux.Scheduler['locale']['Active'][_0xecbcx2]['apply'](_0xecbcx5)
                }
            }
        }
    },
    applyToClass: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx3 = this,
            _0xecbcx9 = _0xecbcx3['self']['getName']();
        _0xecbcx2 = _0xecbcx2 || Ext['ClassManager']['get'](_0xecbcx5);
        if (_0xecbcx2 && (_0xecbcx2['activeLocaleId'] !== _0xecbcx9)) {
            var _0xecbcx1 = _0xecbcx3['l10n'][_0xecbcx5];
            if (typeof _0xecbcx1 === 'function') {
                _0xecbcx1(_0xecbcx5)
            } else {
                if (_0xecbcx2['singleton']) {
                    _0xecbcx2['l10n'] = Ext.apply({}, _0xecbcx1, _0xecbcx2['prototype'] && _0xecbcx2['prototype']['l10n'])
                } else {
                    Ext['override'](_0xecbcx2, {
                        l10n: _0xecbcx1
                    })
                }
            };
            if (_0xecbcx3['legacyMode']) {
                var _0xecbcx6;
                if (_0xecbcx2['prototype']) {
                    _0xecbcx6 = _0xecbcx2['prototype']
                } else {
                    if (_0xecbcx2['singleton']) {
                        _0xecbcx6 = _0xecbcx2
                    }
                };
                if (_0xecbcx6 && _0xecbcx6['legacyMode']) {
                    if (_0xecbcx6['legacyHolderProp']) {
                        if (!_0xecbcx6[_0xecbcx6['legacyHolderProp']]) {
                            _0xecbcx6[_0xecbcx6['legacyHolderProp']] = {}
                        };
                        _0xecbcx6 = _0xecbcx6[_0xecbcx6['legacyHolderProp']]
                    };
                    for (var _0xecbcx4 in _0xecbcx1) {
                        if (typeof _0xecbcx6[_0xecbcx4] !== 'function') {
                            _0xecbcx6[_0xecbcx4] = _0xecbcx1[_0xecbcx4]
                        }
                    }
                }
            };
            _0xecbcx2['activeLocaleId'] = _0xecbcx9;
            if (_0xecbcx2['onLocalized']) {
                _0xecbcx2['onLocalized']()
            }
        }
    },
    apply: function(_0xecbcx9) {
        if (this['l10n']) {
            var _0xecbcx6 = this;
            if (_0xecbcx9) {
                if (!Ext['isArray'](_0xecbcx9)) {
                    _0xecbcx9 = [_0xecbcx9]
                };
                var _0xecbcx5, _0xecbcx2;
                for (var _0xecbcx3 = 0, _0xecbcx1 = _0xecbcx9['length']; _0xecbcx3 < _0xecbcx1; _0xecbcx3++) {
                    if (Ext['isObject'](_0xecbcx9[_0xecbcx3])) {
                        if (_0xecbcx9[_0xecbcx3]['singleton']) {
                            _0xecbcx2 = _0xecbcx9[_0xecbcx3];
                            _0xecbcx5 = Ext['getClassName'](Ext['getClass'](_0xecbcx2))
                        } else {
                            _0xecbcx2 = Ext['getClass'](_0xecbcx9[_0xecbcx3]);
                            _0xecbcx5 = Ext['getClassName'](_0xecbcx2)
                        }
                    } else {
                        _0xecbcx2 = null;
                        _0xecbcx5 = 'string' === typeof _0xecbcx9[_0xecbcx3] ? _0xecbcx9[_0xecbcx3] : Ext['getClassName'](_0xecbcx9[_0xecbcx3])
                    };
                    if (_0xecbcx5) {
                        if (_0xecbcx5 in this['l10n']) {
                            _0xecbcx6['applyToClass'](_0xecbcx5, _0xecbcx2)
                        }
                    }
                }
            } else {
                Ext.ux.Scheduler['locale']['Active'][this['namespaceId']] = this;
                for (var _0xecbcx4 in this['l10n']) {
                    _0xecbcx6['applyToClass'](_0xecbcx4)
                }
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.locale.En', {
    extend: 'Ext.ux.Scheduler.locale.Locale',
    singleton: true,
    l10n: {
        "Ext.ux.Scheduler.util.Date": {
            unitNames: {
                YEAR: {
                    single: 'year',
                    plural: 'years',
                    abbrev: 'yr'
                },
                QUARTER: {
                    single: 'quarter',
                    plural: 'quarters',
                    abbrev: 'q'
                },
                MONTH: {
                    single: 'month',
                    plural: 'months',
                    abbrev: 'mon'
                },
                WEEK: {
                    single: 'week',
                    plural: 'weeks',
                    abbrev: 'w'
                },
                DAY: {
                    single: 'day',
                    plural: 'days',
                    abbrev: 'd'
                },
                HOUR: {
                    single: 'hour',
                    plural: 'hours',
                    abbrev: 'h'
                },
                MINUTE: {
                    single: 'minute',
                    plural: 'minutes',
                    abbrev: 'min'
                },
                SECOND: {
                    single: 'second',
                    plural: 'seconds',
                    abbrev: 's'
                },
                MILLI: {
                    single: 'ms',
                    plural: 'ms',
                    abbrev: 'ms'
                }
            }
        },
        "Ext.ux.Scheduler.panel.TimelineGridPanel": {
            weekStartDay: 1,
            loadingText: 'Loading, please wait...',
            savingText: 'Saving changes, please wait...'
        },
        "Ext.ux.Scheduler.panel.TimelineTreePanel": {
            weekStartDay: 1,
            loadingText: 'Loading, please wait...',
            savingText: 'Saving changes, please wait...'
        },
        "Ext.ux.Scheduler.mixin.SchedulerView": {
            loadingText: 'Loading events...'
        },
        "Ext.ux.Scheduler.plugin.CurrentTimeLine": {
            tooltipText: 'Current time'
        },
        "Ext.ux.Scheduler.widget.EventEditor": {
            saveText: 'Save',
            deleteText: 'Delete',
            cancelText: 'Cancel',
            nameText: 'Name',
            startDateText: 'Start',
            endDateText: 'End',
            resourceText: 'Resource'
        },
        "Ext.ux.Scheduler.plugin.SimpleEditor": {
            newEventText: 'New booking...'
        },
        "Ext.ux.Scheduler.widget.ExportDialogForm": {
            formatFieldLabel: 'Paper format',
            orientationFieldLabel: 'Orientation',
            rangeFieldLabel: 'Schedule range',
            showHeaderLabel: 'Show header',
            showFooterLabel: 'Show footer',
            orientationPortraitText: 'Portrait',
            orientationLandscapeText: 'Landscape',
            completeViewText: 'Complete schedule',
            currentViewText: 'Visible schedule',
            dateRangeText: 'Date range',
            dateRangeFromText: 'Export from',
            dateRangeToText: 'Export to',
            exportersFieldLabel: 'Control pagination',
            adjustCols: 'Adjust column width',
            adjustColsAndRows: 'Adjust column width and row height',
            specifyDateRange: 'Specify date range',
            columnPickerLabel: 'Select columns',
            completeDataText: 'Complete schedule (for all events)',
            dpiFieldLabel: 'DPI (dots per inch)',
            rowsRangeLabel: 'Rows range',
            allRowsLabel: 'All rows',
            visibleRowsLabel: 'Visible rows',
            columnEmptyText: '[no title]'
        },
        "Ext.ux.Scheduler.widget.ExportDialog": {
            title: 'Export Settings',
            exportButtonText: 'Export',
            cancelButtonText: 'Cancel',
            progressBarText: 'Exporting...'
        },
        "Ext.ux.Scheduler.plugin.Export": {
            generalError: 'An error occurred',
            fetchingRows: 'Fetching row {0} of {1}',
            builtPage: 'Built page {0} of {1}',
            requestingPrintServer: 'Please wait...'
        },
        "Ext.ux.Scheduler.plugin.Printable": {
            dialogTitle: 'Print settings',
            exportButtonText: 'Print'
        },
        "Ext.ux.Scheduler.plugin.exporter.AbstractExporter": {
            name: 'Exporter'
        },
        "Ext.ux.Scheduler.plugin.exporter.SinglePage": {
            name: 'Single page'
        },
        "Ext.ux.Scheduler.plugin.exporter.MultiPageVertical": {
            name: 'Multiple pages (vertically)'
        },
        "Ext.ux.Scheduler.plugin.exporter.MultiPage": {
            name: 'Multiple pages'
        },
        "Ext.ux.Scheduler.column.ResourceName": {
            name: 'Name'
        },
        "Ext.ux.Scheduler.template.DependencyInfo": {
            fromText: 'From',
            toText: 'To'
        },
        "Ext.ux.Scheduler.preset.Manager": {
            hourAndDay: {
                displayDateFormat: 'G:i',
                middleDateFormat: 'G:i',
                topDateFormat: 'D d/m'
            },
            secondAndMinute: {
                displayDateFormat: 'g:i:s',
                topDateFormat: 'D, d g:iA'
            },
            dayAndWeek: {
                displayDateFormat: 'm/d h:i A',
                middleDateFormat: 'D d M'
            },
            weekAndDay: {
                displayDateFormat: 'm/d',
                bottomDateFormat: 'd M',
                middleDateFormat: 'Y F d'
            },
            weekAndMonth: {
                displayDateFormat: 'm/d/Y',
                middleDateFormat: 'm/d',
                topDateFormat: 'm/d/Y'
            },
            weekAndDayLetter: {
                displayDateFormat: 'm/d/Y',
                middleDateFormat: 'D d M Y'
            },
            weekDateAndMonth: {
                displayDateFormat: 'm/d/Y',
                middleDateFormat: 'd',
                topDateFormat: 'Y F'
            },
            monthAndYear: {
                displayDateFormat: 'm/d/Y',
                middleDateFormat: 'M Y',
                topDateFormat: 'Y'
            },
            year: {
                displayDateFormat: 'm/d/Y',
                middleDateFormat: 'Y'
            },
            manyYears: {
                displayDateFormat: 'm/d/Y',
                middleDateFormat: 'Y'
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.mixin.Localizable', {
    requires: ['Ext.ux.Scheduler.locale.En'],
    legacyMode: false,
    activeLocaleId: '',
    l10n: null,
    isLocaleApplied: function() {
        var _0xecbcx2 = (this['singleton'] && this['activeLocaleId']) || this['self']['activeLocaleId'];
        if (!_0xecbcx2) {
            return false
        };
        for (var _0xecbcx1 in Ext.ux.Scheduler['locale']['Active']) {
            if (_0xecbcx2 === Ext.ux.Scheduler['locale']['Active'][_0xecbcx1]['self']['getName']()) {
                return true
            }
        };
        return false
    },
    applyLocale: function() {
        for (var _0xecbcx1 in Ext.ux.Scheduler['locale']['Active']) {
            Ext.ux.Scheduler['locale']['Active'][_0xecbcx1]['apply'](this['singleton'] ? this : this['self']['getName']())
        }
    },
    L: function() {
        return this['localize']['apply'](this, arguments)
    },
    localize: function(_0xecbcx3, _0xecbcx2, _0xecbcx5) {
        var _0xecbcx1 = this['getLocale'](_0xecbcx3, _0xecbcx2, _0xecbcx5);
        if (_0xecbcx1 === null || _0xecbcx1 === undefined) {
            throw 'Cannot find locale: ' + _0xecbcx3 + ' [' + this['self']['getName']() + ']'
        };
        return _0xecbcx1
    },
    getLocale: function(_0xecbcx2, _0xecbcx3, _0xecbcx9) {
        if (!this['isLocaleApplied']() && !_0xecbcx9) {
            this['applyLocale']()
        };
        if (this.hasOwnProperty('l10n') && this['l10n'].hasOwnProperty(_0xecbcx2) && 'function' != typeof this['l10n'][_0xecbcx2]) {
            return this['l10n'][_0xecbcx2]
        };
        var _0xecbcx5 = this['self'] && this['self']['prototype'];
        if (this['legacyMode']) {
            var _0xecbcx1 = _0xecbcx3 || this['legacyHolderProp'];
            var _0xecbcx7 = _0xecbcx1 ? this[_0xecbcx1] : this;
            if (_0xecbcx7 && _0xecbcx7.hasOwnProperty(_0xecbcx2) && 'function' != typeof _0xecbcx7[_0xecbcx2]) {
                return _0xecbcx7[_0xecbcx2]
            };
            if (_0xecbcx5) {
                var _0xecbcx4 = _0xecbcx1 ? _0xecbcx5[_0xecbcx1] : _0xecbcx5;
                if (_0xecbcx4 && _0xecbcx4.hasOwnProperty(_0xecbcx2) && 'function' != typeof _0xecbcx4[_0xecbcx2]) {
                    return _0xecbcx4[_0xecbcx2]
                }
            }
        };
        var _0xecbcxa = _0xecbcx5['l10n'] && _0xecbcx5['l10n'][_0xecbcx2];
        if (_0xecbcxa === null || _0xecbcxa === undefined) {
            var _0xecbcx6 = _0xecbcx5 && _0xecbcx5['superclass'];
            if (_0xecbcx6 && _0xecbcx6['localize']) {
                _0xecbcxa = _0xecbcx6['localize'](_0xecbcx2, _0xecbcx3, _0xecbcx9)
            }
        };
        return _0xecbcxa
    }
});
Ext.define('Ext.ux.Scheduler.column.ResourceName', {
    extend: 'Ext.grid.Column',
    alias: 'widget.scheduler_resourcenamecolumn',
    mixins: ['Ext.ux.Scheduler.mixin.Localizable'],
    initComponent: function() {
        Ext.apply(this, {
            text: this.L('name')
        });
        this['callParent'](arguments)
    },
    renderer: function(_0xecbcx2, _0xecbcx5, _0xecbcx1) {
        return _0xecbcx1['getName']()
    }
});
Ext.define('Ext.ux.Scheduler.column.Summary', {
    extend: 'Ext.grid.column.Column',
    alias: ['widget.summarycolumn'],
    lockableScope: 'top',
    showPercent: false,
    nbrDecimals: 1,
    sortable: false,
    fixed: true,
    menuDisabled: true,
    width: 80,
    dataIndex: '_sch_not_used',
    schedulerPanel: null,
    lockable: false,
    init: Ext['emptyFn'],
    constructor: function(_0xecbcx1) {
        this['scope'] = this;
        this['callParent'](arguments);
        this['on']('beforerender', this['onMyBeforeRender'], this)
    },
    onMyBeforeRender: function() {
        this['schedulerPanel'] = this['up']('tablepanel[lockable=true]')
    },
    getTimeAxis: function() {
        return this['schedulerPanel']['getTimeAxis']()
    },
    getEventStore: function() {
        return this['schedulerPanel']['getEventStore']()
    },
    renderer: function(_0xecbcxa, _0xecbcx1, _0xecbcx6) {
        var _0xecbcx9 = this['getTimeAxis'](),
            _0xecbcx3 = this['getEventStore'](),
            _0xecbcx4 = _0xecbcx9['getStart'](),
            _0xecbcx7 = _0xecbcx9['getEnd'](),
            _0xecbcx2 = this['calculate'](_0xecbcx3['getEventsForResource'](_0xecbcx6), _0xecbcx4, _0xecbcx7);
        if (_0xecbcx2 <= 0) {
            return ''
        };
        if (this['showPercent']) {
            var _0xecbcx5 = Ext.ux.Scheduler['util']['Date']['getDurationInMinutes'](_0xecbcx4, _0xecbcx7);
            return (Math['round']((_0xecbcx2 * 100) / _0xecbcx5)) + ' %'
        } else {
            if (_0xecbcx2 > 1440) {
                return (_0xecbcx2 / 1440)['toFixed'](this['nbrDecimals']) + ' ' + Ext.ux.Scheduler['util']['Date']['getShortNameOfUnit']('DAY')
            };
            if (_0xecbcx2 >= 30) {
                return (_0xecbcx2 / 60)['toFixed'](this['nbrDecimals']) + ' ' + Ext.ux.Scheduler['util']['Date']['getShortNameOfUnit']('HOUR')
            };
            return _0xecbcx2 + ' ' + Ext.ux.Scheduler['util']['Date']['getShortNameOfUnit']('MINUTE')
        }
    },
    calculate: function(_0xecbcx5, _0xecbcx9, _0xecbcx3) {
        var _0xecbcx4 = 0,
            _0xecbcx2, _0xecbcx1, _0xecbcx6 = Ext.ux.Scheduler['util']['Date'];
        Ext['Array']['each'](_0xecbcx5, function(_0xecbcx7) {
            _0xecbcx2 = _0xecbcx7['getStartDate']();
            _0xecbcx1 = _0xecbcx7['getEndDate']();
            if (_0xecbcx6['intersectSpans'](_0xecbcx9, _0xecbcx3, _0xecbcx2, _0xecbcx1)) {
                _0xecbcx4 += _0xecbcx6['getDurationInMinutes'](_0xecbcx6['max'](_0xecbcx2, _0xecbcx9), _0xecbcx6['min'](_0xecbcx1, _0xecbcx3))
            }
        });
        return _0xecbcx4
    }
});
Ext.define('Ext.ux.Scheduler.view.HorizontalTimeAxis', {
    extend: 'Ext.util.Observable',
    requires: ['Ext.XTemplate'],
    trackHeaderOver: true,
    compactCellWidthThreshold: 15,
    baseCls: 'sch-column-header',
    tableCls: 'sch-header-row',
    enableTickResizing: false,
    headerHtmlRowTpl: '<table border="0" cellspacing="0" cellpadding="0" style="width: {totalWidth}px; {tstyle}" class="{{tableCls}} sch-header-row-{position} {cls}"><tbody><tr><tpl for="cells"><td class="{{baseCls}} {headerCls} sch-header-cell-{align}" data-date="{[fm.date(values.start,\'Ymd_His \')]}" style="text-align: {align}; width: {width}px; {style}" tabIndex="0"headerPosition="{parent.position}" headerIndex="{[xindex-1]}"><div class="sch-simple-timeheader">{header}</div>{{resizeHandle}}</td></tpl></tr></tbody></table>',
    model: null,
    hoverCls: '',
    containerEl: null,
    height: null,
    constructor: function(_0xecbcx5) {
        var _0xecbcx3 = this;
        var _0xecbcx1 = !!Ext['versions']['touch'];
        Ext.apply(this, _0xecbcx5);
        _0xecbcx3['callParent'](arguments);
        _0xecbcx3['model']['on']('update', _0xecbcx3['onModelUpdate'], this, {
            priority: 5
        });
        _0xecbcx3['containerEl'] = Ext['get'](_0xecbcx3['containerEl']);
        if (!(_0xecbcx3['headerHtmlRowTpl'] instanceof Ext['Template'])) {
            if (Ext['isString'](_0xecbcx3['headerHtmlRowTpl'])) {
                _0xecbcx3['headerHtmlRowTpl'] = _0xecbcx3['headerHtmlRowTpl']['replace']('{{baseCls}}', this['baseCls'])['replace']('{{tableCls}}', this['tableCls'])['replace']('{{resizeHandle}}', this['enableTickResizing'] ? '<div class="sch-header-cell-resizehandle"></div>' : '')
            };
            _0xecbcx3['headerHtmlRowTpl'] = new Ext.XTemplate(_0xecbcx3['headerHtmlRowTpl'])
        };
        if (_0xecbcx3['trackHeaderOver'] && _0xecbcx3['hoverCls']) {
            _0xecbcx3['containerEl']['on']({
                mousemove: _0xecbcx3['highlightCell'],
                delegate: '.' + this['baseCls'],
                scope: _0xecbcx3
            });
            _0xecbcx3['containerEl']['on']({
                mouseleave: _0xecbcx3['clearHighlight'],
                scope: _0xecbcx3
            })
        };
        var _0xecbcx2 = {
            scope: this,
            delegate: '.' + this['baseCls']
        };
        if (_0xecbcx1) {
            _0xecbcx2['tap'] = this['onElClick']('tap');
            _0xecbcx2['doubletap'] = this['onElClick']('doubletap')
        } else {
            _0xecbcx2['click'] = this['onElClick']('click');
            _0xecbcx2['dblclick'] = this['onElClick']('dblclick');
            _0xecbcx2['contextmenu'] = this['onElClick']('contextmenu')
        };
        _0xecbcx3['_listenerCfg'] = _0xecbcx2;
        if (_0xecbcx3['containerEl']) {
            _0xecbcx3['containerEl']['on'](_0xecbcx2)
        }
    },
    destroy: function() {
        var _0xecbcx1 = this;
        if (_0xecbcx1['containerEl']) {
            _0xecbcx1['containerEl']['un'](_0xecbcx1._listenerCfg);
            _0xecbcx1['containerEl']['un']({
                mousemove: _0xecbcx1['highlightCell'],
                delegate: '.sch-simple-timeheader',
                scope: _0xecbcx1
            });
            _0xecbcx1['containerEl']['un']({
                mouseleave: _0xecbcx1['clearHighlight'],
                scope: _0xecbcx1
            })
        };
        _0xecbcx1['model']['un']('update', _0xecbcx1['onModelUpdate'], this, {
            priority: 5
        })
    },
    onModelUpdate: function() {
        this['height'] = null;
        this['render']()
    },
    getHTML: function() {
        var _0xecbcx5 = this['model']['getColumnConfig']();
        var _0xecbcx2 = this['model']['getTotalWidth']();
        var _0xecbcx1 = Ext['Object']['getKeys'](_0xecbcx5)['length'];
        var _0xecbcx3 = '';
        if (_0xecbcx5['top']) {
            this['embedCellWidths'](_0xecbcx5['top']);
            _0xecbcx3 += this['headerHtmlRowTpl']['apply']({
                totalWidth: _0xecbcx2,
                cells: _0xecbcx5['top'],
                position: 'top',
                tstyle: 'border-top : 0;'
            })
        };
        if (_0xecbcx5['middle']) {
            this['embedCellWidths'](_0xecbcx5['middle']);
            _0xecbcx3 += this['headerHtmlRowTpl']['apply']({
                totalWidth: _0xecbcx2,
                cells: _0xecbcx5['middle'],
                position: 'middle',
                tstyle: _0xecbcx5['top'] ? '' : 'border-top : 0;',
                cls: !_0xecbcx5['bottom'] && this['model']['getTickWidth']() <= this['compactCellWidthThreshold'] ? 'sch-header-row-compact' : ''
            })
        };
        if (_0xecbcx5['bottom']) {
            this['embedCellWidths'](_0xecbcx5['bottom']);
            _0xecbcx3 += this['headerHtmlRowTpl']['apply']({
                totalWidth: _0xecbcx2,
                cells: _0xecbcx5['bottom'],
                position: 'bottom',
                cls: this['model']['getTickWidth']() <= this['compactCellWidthThreshold'] ? 'sch-header-row-compact' : ''
            })
        };
        return _0xecbcx3
    },
    deleteTimeAxisRows: function() {
        var _0xecbcx1 = this['containerEl'],
            _0xecbcx2 = _0xecbcx1['dom'];
        Ext['fly'](_0xecbcx2)['select']('table')['remove']()
    },
    render: function() {
        if (!this['containerEl']) {
            return
        };
        var _0xecbcx3 = this['containerEl'],
            _0xecbcx4 = _0xecbcx3['dom'],
            _0xecbcx5 = _0xecbcx4['style']['display'],
            _0xecbcx1 = this['model']['getColumnConfig'](),
            _0xecbcx2 = _0xecbcx4['parentNode'];
        _0xecbcx4['style']['display'] = 'none';
        _0xecbcx2['removeChild'](_0xecbcx4);
        this['deleteTimeAxisRows']();
        _0xecbcx4['insertAdjacentHTML']('afterbegin', this['getHTML']());
        if (!_0xecbcx1['top'] && !_0xecbcx1['middle']) {
            this['containerEl']['addCls']('sch-header-single-row')
        } else {
            this['containerEl']['removeCls']('sch-header-single-row')
        };
        _0xecbcx2 && _0xecbcx2['appendChild'](_0xecbcx4);
        _0xecbcx4['style']['display'] = _0xecbcx5;
        this['fireEvent']('refresh', this)
    },
    embedCellWidths: function(_0xecbcx2, _0xecbcx4) {
        for (var _0xecbcx5 = 0; _0xecbcx5 < _0xecbcx2['length']; _0xecbcx5++) {
            var _0xecbcx1 = _0xecbcx2[_0xecbcx5];
            var _0xecbcx3 = this['model']['getDistanceBetweenDates'](_0xecbcx1['start'], _0xecbcx1['end']);
            if (_0xecbcx3) {
                _0xecbcx1['width'] = _0xecbcx3
            } else {
                _0xecbcx1['width'] = 0;
                _0xecbcx1['style'] = 'display: none'
            }
        }
    },
    onElClick: function(_0xecbcx1) {
        return function(_0xecbcx4, _0xecbcx6) {
            _0xecbcx6 = _0xecbcx4['delegatedTarget'] || _0xecbcx6;
            var _0xecbcx2 = Ext['fly'](_0xecbcx6)['getAttribute']('headerPosition'),
                _0xecbcx5 = Ext['fly'](_0xecbcx6)['getAttribute']('headerIndex'),
                _0xecbcx3 = this['model']['getColumnConfig']()[_0xecbcx2][_0xecbcx5];
            this['fireEvent']('timeheader' + _0xecbcx1, this, _0xecbcx3['start'], _0xecbcx3['end'], _0xecbcx4)
        }
    },
    highlightCell: function(_0xecbcx5, _0xecbcx1) {
        var _0xecbcx2 = this;
        if (_0xecbcx1 !== _0xecbcx2['highlightedCell']) {
            _0xecbcx2['clearHighlight']();
            _0xecbcx2['highlightedCell'] = _0xecbcx1;
            Ext['fly'](_0xecbcx1)['addCls'](_0xecbcx2['hoverCls'])
        }
    },
    clearHighlight: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['highlightedCell'];
        if (_0xecbcx1) {
            Ext['fly'](_0xecbcx1)['removeCls'](_0xecbcx2['hoverCls']);
            delete _0xecbcx2['highlightedCell']
        }
    }
});
Ext.define('Ext.ux.Scheduler.feature.HeaderResize', {
    extend: 'Ext.AbstractPlugin',
    selector: null,
    currentCell: null,
    originalCellWidth: null,
    startClientX: null,
    timeAxisViewModel: null,
    minCellWidth: 15,
    init: function(_0xecbcx1) {
        _0xecbcx1['on']('render', this['onColumnRender'], this)
    },
    onColumnRender: function(_0xecbcx1) {
        _0xecbcx1['getEl']()['on']('mousedown', this['onMouseDown'], this, {
            delegate: this['selector']
        })
    },
    getClientX: function(_0xecbcx1) {
        return Ext['isNumber'](_0xecbcx1['clientX']) ? _0xecbcx1['clientX'] : _0xecbcx1['browserEvent']['clientX']
    },
    onMouseDown: function(_0xecbcx3, _0xecbcx2) {
        var _0xecbcx5 = this,
            _0xecbcx1 = _0xecbcx2['parentElement'];
        _0xecbcx5['originalCellWidth'] = Ext['fly'](_0xecbcx1)['getWidth']();
        _0xecbcx5['startClientX'] = _0xecbcx5['getClientX'](_0xecbcx3);
        _0xecbcx5['currentCell'] = _0xecbcx1;
        _0xecbcx5['getCmp']()['mon'](Ext['getBody'](), 'mousemove', _0xecbcx5['onMouseMove'], _0xecbcx5);
        _0xecbcx5['getCmp']()['mon'](Ext['getBody'](), 'mouseup', _0xecbcx5['onMouseUp'], _0xecbcx5, {
            capture: true,
            single: true
        })
    },
    onMouseMove: function(_0xecbcx6, _0xecbcx8) {
        var _0xecbcx7 = this,
            _0xecbcx5 = _0xecbcx7['currentCell'],
            _0xecbcx9 = _0xecbcx5['nextSibling'],
            _0xecbcxa = _0xecbcx7['startClientX'] - _0xecbcx7['getClientX'](_0xecbcx6),
            _0xecbcx2 = _0xecbcx7['originalCellWidth'],
            _0xecbcx3 = Math['max'](_0xecbcx7['minCellWidth'], _0xecbcx2 - _0xecbcxa);
        if (_0xecbcx9 && _0xecbcx3 < _0xecbcx2) {
            var _0xecbcx1 = Math['min'](_0xecbcx2 * 2 - _0xecbcx7['minCellWidth'], _0xecbcx2 + _0xecbcxa);
            _0xecbcx9['style']['width'] = _0xecbcx1 + 'px'
        };
        _0xecbcx5['style']['width'] = _0xecbcx3 + 'px'
    },
    onMouseUp: function(_0xecbcx3, _0xecbcx8) {
        var _0xecbcx9 = this,
            _0xecbcx7 = _0xecbcx9['getCmp']()['up']('timelinegrid,timelinetree'),
            _0xecbcx1 = _0xecbcx7['getSchedulingView']()['getDateFromCoordinate'](Ext['fly'](_0xecbcx9['currentCell'])['getLeft']()),
            _0xecbcx5 = Ext['fly'](_0xecbcx9['currentCell'])['getX']() - _0xecbcx7['getSchedulingView']()['getX'](),
            _0xecbcx2 = _0xecbcx9['getClientX'](_0xecbcx3) - _0xecbcx9['startClientX'],
            _0xecbcx6 = (_0xecbcx9['originalCellWidth'] / _0xecbcx9['timeAxisViewModel']['getTickWidth']()),
            _0xecbcxa = Math['max'](_0xecbcx9['minCellWidth'], _0xecbcx9['timeAxisViewModel']['getTickWidth']() + (_0xecbcx2 / _0xecbcx6));
        _0xecbcx9['timeAxisViewModel']['setTickWidth'](Math['round'](_0xecbcxa));
        _0xecbcx7['scrollToDate'](_0xecbcx1, false, _0xecbcx5);
        _0xecbcx9['getCmp']()['mun'](Ext['getBody'](), 'mousemove', _0xecbcx9['onMouseMove'], _0xecbcx9);
        this['currentCell'] = this['offset'] = null
    }
});
Ext.define('Ext.ux.Scheduler.column.timeAxis.Horizontal', {
    extend: 'Ext.grid.column.Column',
    alias: 'widget.timeaxiscolumn',
    requires: ['Ext.ux.Scheduler.view.HorizontalTimeAxis', 'Ext.ux.Scheduler.feature.HeaderResize'],
    draggable: false,
    groupable: false,
    hideable: false,
    sortable: false,
    resizable: false,
    menuDisabled: true,
    cls: 'sch-simple-timeaxis',
    tdCls: 'sch-timetd',
    enableLocking: false,
    locked: false,
    lockable: false,
    enableTickResizing: false,
    cellFocusable: false,
    timeAxisViewModel: null,
    headerView: null,
    hoverCls: '',
    ownHoverCls: 'sch-column-header-over',
    trackHeaderOver: true,
    compactCellWidthThreshold: (Ext['theme'] && Ext['theme']['name']['toLowerCase']() === 'classic') ? 15 : 35,
    initComponent: function() {
        if (this['enableTickResizing']) {
            this['addPlugin'](new Ext.ux.Scheduler['feature'].HeaderResize({
                selector: '.sch-header-cell-resizehandle',
                timeAxisViewModel: this['timeAxisViewModel']
            }))
        };
        this['callParent'](arguments)
    },
    afterRender: function() {
        var _0xecbcx2 = this;
        var _0xecbcx1 = _0xecbcx2['titleEl']['createChild']({
            cls: 'sch-horizontaltimeaxis-ct'
        });
        if (!(_0xecbcx2['headerView'] instanceof Ext.ux.Scheduler['view']['HorizontalTimeAxis'])) {
            _0xecbcx2['headerView'] = Ext['create'](Ext['applyIf'](_0xecbcx2['headerView'] || {}, {
                xclass: 'Ext.ux.Scheduler.view.HorizontalTimeAxis',
                model: _0xecbcx2['timeAxisViewModel'],
                containerEl: _0xecbcx1,
                hoverCls: _0xecbcx2['ownHoverCls'],
                trackHeaderOver: _0xecbcx2['trackHeaderOver'],
                enableTickResizing: this['enableTickResizing'],
                compactCellWidthThreshold: _0xecbcx2['compactCellWidthThreshold']
            }))
        };
        _0xecbcx2['headerView']['on']('refresh', _0xecbcx2['onTimeAxisViewRefresh'], _0xecbcx2);
        _0xecbcx2['ownerCt']['on']('afterlayout', function() {
            if (!_0xecbcx2['ownerCt']) {
                return
            };
            _0xecbcx2['mon'](_0xecbcx2['ownerCt'], 'resize', _0xecbcx2['onHeaderContainerResize'], _0xecbcx2);
            if (this['getWidth']() > 0) {
                if (_0xecbcx2['getAvailableWidthForSchedule']() === _0xecbcx2['timeAxisViewModel']['getAvailableWidth']()) {
                    _0xecbcx2['headerView']['render']()
                } else {
                    _0xecbcx2['timeAxisViewModel']['update'](_0xecbcx2['getAvailableWidthForSchedule']())
                };
                _0xecbcx2['setWidth'](_0xecbcx2['timeAxisViewModel']['getTotalWidth']())
            }
        }, null, {
            single: true
        });
        this['enableBubble']('timeheaderclick', 'timeheaderdblclick', 'timeheadercontextmenu', 'horizontaltimeaxiscolumnrender');
        _0xecbcx2['relayEvents'](_0xecbcx2['headerView'], ['timeheaderclick', 'timeheaderdblclick', 'timeheadercontextmenu']);
        _0xecbcx2['callParent'](arguments);
        _0xecbcx2['focusable'] = false;
        this['fireEvent']('horizontaltimeaxiscolumnrender', this)
    },
    initRenderData: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['renderData']['headerCls'] = _0xecbcx1['renderData']['headerCls'] || _0xecbcx1['headerCls'];
        return _0xecbcx1['callParent'](arguments)
    },
    destroy: function() {
        if (this['headerView']) {
            this['headerView']['destroy']();
            this['headerView'] = null
        };
        this['callParent'](arguments)
    },
    onTimeAxisViewRefresh: function() {
        this['headerView']['un']('refresh', this['onTimeAxisViewRefresh'], this);
        var _0xecbcx1 = this['timeAxisViewModel']['getTotalWidth']();
        if (this['getWidth']() !== _0xecbcx1) {
            this['setWidth'](_0xecbcx1)
        } else {
            this['updateLayout']()
        };
        this['ensureSizing']();
        this['headerView']['on']('refresh', this['onTimeAxisViewRefresh'], this)
    },
    getAvailableWidthForSchedule: function() {
        if (!this['ownerCt']) {
            return 0
        };
        var _0xecbcx3 = this['ownerCt']['isVisible'](true) ? this['ownerCt']['getWidth']() : (this['ownerCt']['lastBox'] && this['ownerCt']['lastBox']['width'] || 0),
            _0xecbcx1 = this['ownerCt']['items'],
            _0xecbcx5;
        for (var _0xecbcx2 = 1; _0xecbcx2 < _0xecbcx1['length']; _0xecbcx2++) {
            _0xecbcx5 = _0xecbcx1['get'](_0xecbcx2);
            if (!_0xecbcx5['hidden']) {
                _0xecbcx3 -= _0xecbcx5['isVisible'](true) ? _0xecbcx5['getWidth']() : (_0xecbcx5['lastBox'] && _0xecbcx5['lastBox']['width'] || 0)
            }
        };
        return _0xecbcx3 - Ext['getScrollbarSize']()['width'] - 1
    },
    onResize: function() {
        this['callParent'](arguments);
        this['timeAxisViewModel']['setAvailableWidth'](this['getAvailableWidthForSchedule']())
    },
    onHeaderContainerResize: function(_0xecbcx4, _0xecbcx5, _0xecbcx1, _0xecbcx2, _0xecbcx3) {
        this['timeAxisViewModel']['setAvailableWidth'](this['getAvailableWidthForSchedule']());
        if (_0xecbcx1 !== _0xecbcx3) {
            this['headerView']['render']()
        }
    },
    ensureSizing: function() {
        var _0xecbcx2 = this['headerView']['containerEl'];
        var _0xecbcx4 = this['ownerCt']['getHeight']();
        var _0xecbcx1 = _0xecbcx2['getHeight']();
        var _0xecbcx3 = _0xecbcx4 - _0xecbcx1;
        if (_0xecbcx3 > 0) {
            var _0xecbcx5 = _0xecbcx2['down']('table:last-of-type tr');
            if (_0xecbcx5) {
                _0xecbcx2['select']('table tr')['setHeight'](_0xecbcx4 / this['timeAxisViewModel']['getHeaders']()['length'])
            }
        }
    },
    refresh: function() {
        if (this['rendered']) {
            this['timeAxisViewModel']['update'](null, true);
            this['headerView']['render']()
        }
    }
});
Ext.define('Ext.ux.Scheduler.column.timeAxis.Vertical', {
    extend: 'Ext.grid.column.Column',
    alias: 'widget.verticaltimeaxis',
    align: 'right',
    draggable: false,
    groupable: false,
    hideable: false,
    sortable: false,
    menuDisabled: true,
    timeAxis: null,
    timeAxisViewModel: null,
    cellTopBorderWidth: null,
    cellBottomBorderWidth: null,
    totalBorderWidth: null,
    enableLocking: false,
    locked: true,
    lockable: false,
    dataIndex: 'start',
    initComponent: function() {
        this['callParent'](arguments);
        this['tdCls'] = (this['tdCls'] || '') + ' sch-verticaltimeaxis-cell';
        this['scope'] = this;
        this['addCls']('sch-verticaltimeaxis-header');
        this['totalBorderWidth'] = this['cellTopBorderWidth'] + this['cellBottomBorderWidth']
    },
    renderer: function(_0xecbcx3, _0xecbcx5, _0xecbcx1, _0xecbcx6) {
        var _0xecbcx2 = this['timeAxisViewModel'];
        if (!_0xecbcx2['columnConfig']['middle']) {
            return
        };
        _0xecbcx5['style'] = 'height:' + (_0xecbcx2['getTickWidth']() - this['totalBorderWidth']) + 'px';
        var _0xecbcx4;
        if (!_0xecbcx2['isWeek']() && _0xecbcx3 && _0xecbcx2['isMajorTick'](_0xecbcx3)) {
            _0xecbcx4 = _0xecbcx2['headerConfig'][_0xecbcx2['getMajorHeaderName']()];
            _0xecbcx5['tdCls'] += ' sch-column-line-solid'
        } else {
            _0xecbcx4 = _0xecbcx2['getBottomHeader']()
        };
        if (_0xecbcx4['renderer']) {
            return _0xecbcx4['renderer']['call'](_0xecbcx4['scope'] || this, _0xecbcx1['data']['start'], _0xecbcx1['data']['end'], _0xecbcx5, _0xecbcx6)
        } else {
            return Ext['Date']['format'](_0xecbcx3, _0xecbcx4['dateFormat'])
        }
    }
});
Ext.define('Ext.ux.Scheduler.crud.encoder.Json', {
    format: 'json',
    encode: function(_0xecbcx1) {
        return Ext['JSON']['encode'](_0xecbcx1)
    },
    decode: function(_0xecbcx1) {
        if (typeof _0xecbcx1 == 'object') {
            return _0xecbcx1
        };
        return Ext['JSON']['decode'](_0xecbcx1, true)
    }
});
Ext.define('Ext.ux.Scheduler.crud.encoder.Xml', {
    requires: ['Ext.XTemplate'],
    format: 'xml',
    stringReplaces: [
        [/&/g, '&amp;'],
        [/</g, '&lt;'],
        [/>/g, '&gt;'],
        [/"/g, '&quot;']
    ],
    encodeString: function(_0xecbcx4) {
        if (!_0xecbcx4) {
            return _0xecbcx4
        };
        var _0xecbcx1 = _0xecbcx4.toString(),
            _0xecbcx5 = this['stringReplaces'];
        for (var _0xecbcx3 = 0, _0xecbcx2 = _0xecbcx5['length']; _0xecbcx3 < _0xecbcx2; _0xecbcx3++) {
            _0xecbcx1 = _0xecbcx1['replace'](_0xecbcx5[_0xecbcx3][0], _0xecbcx5[_0xecbcx3][1])
        };
        return _0xecbcx1
    },
    encodeRecords: function(_0xecbcx5) {
        var _0xecbcx1 = '';
        for (var _0xecbcx3 = 0, _0xecbcx2 = _0xecbcx5['length']; _0xecbcx3 < _0xecbcx2; _0xecbcx3++) {
            _0xecbcx1 += this['encodeRecord'](_0xecbcx5[_0xecbcx3])
        };
        return _0xecbcx1
    },
    encodeRecord: function(_0xecbcx2) {
        var _0xecbcx1 = '<record>';
        for (var _0xecbcx5 in _0xecbcx2) {
            var _0xecbcx3 = _0xecbcx2[_0xecbcx5];
            _0xecbcx1 += '<field id="' + this['encodeString'](_0xecbcx5) + '">' + (_0xecbcx3 && _0xecbcx3['$store'] ? this['encodeStoreChanges']({
                storeId: _0xecbcx5
            }, _0xecbcx3) : this['encodeString'](_0xecbcx3)) + '</field>'
        };
        _0xecbcx1 += '</record>';
        return _0xecbcx1
    },
    encodeStoreChanges: function(_0xecbcx2, _0xecbcx5) {
        var _0xecbcx1 = '<store id="' + this['encodeString'](_0xecbcx2['storeId']) + '">';
        if (_0xecbcx5['added']) {
            _0xecbcx1 += '<added>' + this['encodeRecords'](_0xecbcx5['added']) + '</added>'
        };
        if (_0xecbcx5['updated']) {
            _0xecbcx1 += '<updated>' + this['encodeRecords'](_0xecbcx5['updated']) + '</updated>'
        };
        if (_0xecbcx5['removed']) {
            _0xecbcx1 += '<removed>' + this['encodeRecords'](_0xecbcx5['removed']) + '</removed>'
        };
        _0xecbcx1 += '</store>';
        return _0xecbcx1
    },
    encode: function(_0xecbcx4) {
        var _0xecbcx1, _0xecbcx3, _0xecbcx2, _0xecbcx5;
        switch (_0xecbcx4['type']) {
            case 'load':
                _0xecbcx1 = '<load requestId="' + this['encodeString'](_0xecbcx4['requestId']) + '">';
                for (_0xecbcx3 = 0, _0xecbcx2 = _0xecbcx4['stores']['length']; _0xecbcx3 < _0xecbcx2; _0xecbcx3++) {
                    _0xecbcx5 = _0xecbcx4['stores'][_0xecbcx3];
                    if (typeof _0xecbcx5 === 'string') {
                        _0xecbcx1 += '<store id="' + this['encodeString'](_0xecbcx5) + '"/>'
                    } else {
                        _0xecbcx1 += '<store id="' + this['encodeString'](_0xecbcx5['storeId']) + '" page="' + this['encodeString'](_0xecbcx5['page']) + '" pageSize="' + this['encodeString'](_0xecbcx5['pageSize']) + '"/>'
                    }
                };
                _0xecbcx1 += '</load>';
                return _0xecbcx1;
            case 'sync':
                _0xecbcx1 = '<sync requestId="' + this['encodeString'](_0xecbcx4['requestId']) + '" revision="' + this['encodeString'](_0xecbcx4['revision']) + '">';
                for (_0xecbcx3 in _0xecbcx4) {
                    if (_0xecbcx4.hasOwnProperty(_0xecbcx3)) {
                        _0xecbcx5 = this['getStore'](_0xecbcx3);
                        if (_0xecbcx5) {
                            _0xecbcx1 += this['encodeStoreChanges'](_0xecbcx5, _0xecbcx4[_0xecbcx3])
                        }
                    }
                };
                _0xecbcx1 += '</sync>';
                break
        };
        return _0xecbcx1
    },
    stringToXML: function(_0xecbcx2) {
        if (!_0xecbcx2) {
            return
        };
        var _0xecbcx1;
        if (window['DOMParser']) {
            _0xecbcx1 = (new DOMParser())['parseFromString'](_0xecbcx2, 'text/xml')
        } else {
            if (window['ActiveXObject']) {
                _0xecbcx1 = new ActiveXObject('Microsoft.XMLDOM');
                _0xecbcx1['async'] = false;
                _0xecbcx1['loadXML'](_0xecbcx2)
            }
        };
        return _0xecbcx1
    },
    decodeRecords: function(_0xecbcx3) {
        var _0xecbcx2 = [];
        for (var _0xecbcx5 = 0, _0xecbcx1 = _0xecbcx3['length']; _0xecbcx5 < _0xecbcx1; _0xecbcx5++) {
            _0xecbcx2['push'](this['decodeRecord'](_0xecbcx3[_0xecbcx5]))
        };
        return _0xecbcx2
    },
    decodeRecord: function(_0xecbcx6) {
        var _0xecbcx2 = _0xecbcx6['childNodes'],
            _0xecbcx1 = {},
            _0xecbcx9;
        for (var _0xecbcx4 = 0, _0xecbcx5 = _0xecbcx2['length']; _0xecbcx4 < _0xecbcx5; _0xecbcx4++) {
            var _0xecbcx7 = _0xecbcx2[_0xecbcx4];
            if (_0xecbcx7['nodeName'] == 'field') {
                _0xecbcx9 = '';
                if (_0xecbcx7['firstChild']) {
                    var _0xecbcx3 = this['getElementByTagName'](_0xecbcx7, 'store');
                    _0xecbcx9 = _0xecbcx3 ? this['decodeStore'](_0xecbcx3) : _0xecbcx7['firstChild']['nodeValue']
                };
                _0xecbcx1[_0xecbcx7['getAttribute']('id')] = _0xecbcx9
            }
        };
        return _0xecbcx1
    },
    getElementsByTagName: function(_0xecbcx6, _0xecbcx5) {
        var _0xecbcx4 = _0xecbcx6['childNodes'],
            _0xecbcx2 = [];
        for (var _0xecbcx3 = 0, _0xecbcx1 = _0xecbcx4['length']; _0xecbcx3 < _0xecbcx1; _0xecbcx3++) {
            if (_0xecbcx4[_0xecbcx3]['nodeName'] == _0xecbcx5) {
                _0xecbcx2['push'](_0xecbcx4[_0xecbcx3])
            }
        };
        return _0xecbcx2
    },
    getElementByTagName: function(_0xecbcx4, _0xecbcx2) {
        var _0xecbcx3 = _0xecbcx4['childNodes'];
        for (var _0xecbcx5 = 0, _0xecbcx1 = _0xecbcx3['length']; _0xecbcx5 < _0xecbcx1; _0xecbcx5++) {
            if (_0xecbcx3[_0xecbcx5]['nodeName'] == _0xecbcx2) {
                return _0xecbcx3[_0xecbcx5]
            }
        }
    },
    decodeStore: function(_0xecbcx1) {
        var _0xecbcx3 = {},
            _0xecbcx5 = this['getElementsByTagName'](_0xecbcx1, 'rows');
        if (_0xecbcx5['length']) {
            _0xecbcx3['rows'] = this['decodeRecords'](this['getElementsByTagName'](_0xecbcx5[0], 'record'));
            var _0xecbcx2 = parseInt(_0xecbcx5[0]['getAttribute']('total'), 10);
            if (isNaN(_0xecbcx2) || _0xecbcx2 < _0xecbcx3['rows']['length']) {
                _0xecbcx2 = _0xecbcx3['rows']['length']
            };
            _0xecbcx3['total'] = _0xecbcx2
        };
        var _0xecbcx4 = this['getElementByTagName'](_0xecbcx1, 'removed');
        if (_0xecbcx4) {
            _0xecbcx3['removed'] = this['decodeRecords'](this['getElementsByTagName'](_0xecbcx4, 'record'))
        };
        return _0xecbcx3
    },
    decode: function(_0xecbcx1) {
        var _0xecbcx3 = typeof _0xecbcx1 == 'string' ? this['stringToXML'](_0xecbcx1) : _0xecbcx1;
        if (!_0xecbcx3) {
            return
        };
        var _0xecbcxd = {},
            _0xecbcx4 = _0xecbcx3['documentElement'],
            _0xecbcx9 = _0xecbcx4['getElementsByTagName']('store'),
            _0xecbcx6, _0xecbcx7;
        _0xecbcxd['requestId'] = _0xecbcx4['getAttribute']('requestId');
        _0xecbcxd['revision'] = _0xecbcx4['getAttribute']('revision');
        _0xecbcxd['success'] = _0xecbcx4['getAttribute']('success') || 'false';
        _0xecbcxd['success'] = _0xecbcxd['success']['toLowerCase']() == 'true';
        if (!_0xecbcxd['success']) {
            _0xecbcxd['code'] = _0xecbcx4['getAttribute']('code');
            var _0xecbcx8 = _0xecbcx4['getElementsByTagName']('message')[0];
            _0xecbcxd['message'] = _0xecbcx8 && _0xecbcx8['firstChild'] && _0xecbcx8['firstChild']['nodeValue']
        };
        for (var _0xecbcx5 = 0, _0xecbcx2 = _0xecbcx9['length']; _0xecbcx5 < _0xecbcx2; _0xecbcx5++) {
            _0xecbcx6 = _0xecbcx9[_0xecbcx5];
            _0xecbcx7 = _0xecbcx6['getAttribute']('id');
            if (this['getStore'](_0xecbcx7)) {
                _0xecbcxd[_0xecbcx7] = this['decodeStore'](_0xecbcx6)
            }
        };
        return _0xecbcxd
    }
});
Ext.define('Ext.ux.Scheduler.crud.transport.Ajax', {
    defaultMethod: {
        load: 'GET',
        sync: 'POST'
    },
    cancelRequest: function(_0xecbcx1) {
        Ext['Ajax']['abort'](_0xecbcx1)
    },
    sendRequest: function(_0xecbcx2) {
        var _0xecbcx5 = _0xecbcx2['data'],
            _0xecbcx3 = this['transport'][_0xecbcx2['type']],
            _0xecbcx4 = _0xecbcx3['paramName'],
            _0xecbcx6 = Ext.apply({}, _0xecbcx3 && _0xecbcx3['params']),
            _0xecbcx9 = _0xecbcx3['method'] || this['defaultMethod'][_0xecbcx2['type']];
        var _0xecbcx1 = Ext.apply({
            url: _0xecbcx3['url'],
            method: _0xecbcx9,
            params: _0xecbcx6,
            failure: _0xecbcx2['failure'],
            success: function(_0xecbcx7, _0xecbcxa) {
                if (_0xecbcx2['success']) {
                    _0xecbcx2['success']['call'](_0xecbcx2['scope'] || this, _0xecbcx7['responseXml'] || _0xecbcx7['responseText'])
                }
            },
            scope: _0xecbcx2['scope']
        }, _0xecbcx3['requestConfig']);
        if (!_0xecbcx4) {
            if (this['format'] === 'xml') {
                Ext.apply(_0xecbcx1, {
                    xmlData: _0xecbcx5
                })
            } else {
                Ext.apply(_0xecbcx1, {
                    jsonData: _0xecbcx5
                })
            }
        } else {
            _0xecbcx1['params'] = _0xecbcx1['params'] || {};
            _0xecbcx1['params'][_0xecbcx4] = _0xecbcx5
        };
        this['fireEvent']('beforesend', this, _0xecbcx6, _0xecbcx2['type'], _0xecbcx1);
        return Ext['Ajax']['request'](_0xecbcx1)
    }
});
Ext.define('Ext.ux.Scheduler.patches.CollectionKey', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.util.CollectionKey',
    minVersion: '6.0.0',
    maxVersion: '6.5.1',
    reportUrl: 'https://www.sencha.com/forum/showthread.php?310532-Ext.util.Collection-key-configuration-application-and-cloning-is-broken',
    obsoleteTestName: 'patches/001_collection_key.t.js',
    description: ['Ext.util.CollectionKey::clone() is broken due to wrong usage of Ext\'s configuration facility.', 'We relay on the(though) private Ext.data.LocalStore::extraKeys configuration, we use it to define additional ', 'unique but complex keys for Assignment and Dependency stores.Upon store filtering such keys are being cloned ', 'but due to the broken config key \'s clone() method throws an exception'].join(' '),
    applyFn: function() {
        var _0xecbcx1;
        _0xecbcx1 = Ext['util']['CollectionKey']['prototype']['applyKeyFn'];
        Ext['util']['CollectionKey']['prototype']['applyKeyFn'] = Ext['identityFn'];
        Ext['util']['CollectionKey']['prototype']['updateKeyFn'] = _0xecbcx1
    }
});
Ext.define('Ext.ux.Scheduler.util.Cache', {
    cache: null,
    constructor: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['cache'] = {};
        _0xecbcx1['self']['stats'][Ext['getClassName'](_0xecbcx1)] = _0xecbcx1['stats'] = {
            hit: 0,
            miss: 0
        }
    },
    key: function(_0xecbcx2) {
        var _0xecbcx1;
        if (_0xecbcx2 instanceof Ext['data']['Model']) {
            _0xecbcx1 = _0xecbcx2['getId']().toString()
        } else {
            if (_0xecbcx2 === undefined || _0xecbcx2 === null) {
                _0xecbcx1 = '[ undefined / null ]'
            } else {
                _0xecbcx1 = (_0xecbcx2).toString()
            }
        };
        return _0xecbcx1
    },
    has: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx1 = _0xecbcx2['key'](_0xecbcx1);
        return _0xecbcx2['cache'].hasOwnProperty(_0xecbcx1)
    },
    get: function(_0xecbcx2, _0xecbcx5) {
        var _0xecbcx3 = this,
            _0xecbcx1;
        _0xecbcx2 = _0xecbcx3['key'](_0xecbcx2);
        _0xecbcx1 = _0xecbcx3['cache'].hasOwnProperty(_0xecbcx2) && _0xecbcx3['cache'][_0xecbcx2];
        !_0xecbcx1 && _0xecbcx5 ? (++_0xecbcx3['stats']['miss']) : (++_0xecbcx3['stats']['hit']);
        if (!_0xecbcx1 && _0xecbcx5) {
            _0xecbcx1 = _0xecbcx5()
        } else {
            if (!_0xecbcx1) {
                _0xecbcx1 = []
            }
        };
        _0xecbcx3['cache'][_0xecbcx2] = _0xecbcx1;
        return _0xecbcx1
    },
    add: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx3 = this,
            _0xecbcx1 = _0xecbcx3['key'](_0xecbcx5);
        if (!_0xecbcx3['cache'].hasOwnProperty(_0xecbcx1)) {
            _0xecbcx3['cache'][_0xecbcx1] = _0xecbcx3['get'](_0xecbcx5)
        };
        arguments['length'] > 1 && Ext['Array']['include'](_0xecbcx3['cache'][_0xecbcx1], _0xecbcx2);
        return _0xecbcx3
    },
    set: function(_0xecbcx2, _0xecbcx3) {
        var _0xecbcx5 = this,
            _0xecbcx1 = _0xecbcx5['key'](_0xecbcx2);
        _0xecbcx5['cache'][_0xecbcx1] = _0xecbcx3;
        return _0xecbcx5
    },
    remove: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = this;
        _0xecbcx2 = _0xecbcx5['key'](_0xecbcx2);
        if (_0xecbcx5['cache'].hasOwnProperty(_0xecbcx2)) {
            Ext['Array']['remove'](_0xecbcx5['cache'][_0xecbcx2], _0xecbcx1)
        };
        return _0xecbcx5
    },
    move: function(_0xecbcx5, _0xecbcx3, _0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx5 = _0xecbcx2['key'](_0xecbcx5);
        _0xecbcx3 = _0xecbcx2['key'](_0xecbcx3);
        if (_0xecbcx5 != _0xecbcx3 && arguments['length'] >= 3) {
            _0xecbcx2['remove'](_0xecbcx5, _0xecbcx1);
            _0xecbcx2['add'](_0xecbcx3, _0xecbcx1)
        } else {
            if (_0xecbcx5 != _0xecbcx3 && _0xecbcx2['cache'].hasOwnProperty(_0xecbcx5) && _0xecbcx2['cache'].hasOwnProperty(_0xecbcx3)) {
                _0xecbcx2['cache'][_0xecbcx3] = Ext['Array']['union'](_0xecbcx2['cache'][_0xecbcx3], _0xecbcx2['cache'][_0xecbcx5]);
                _0xecbcx2['cache'][_0xecbcx5] = []
            } else {
                if (_0xecbcx5 != _0xecbcx3 && _0xecbcx2['cache'].hasOwnProperty(_0xecbcx5)) {
                    _0xecbcx2['cache'][_0xecbcx3] = _0xecbcx2['cache'][_0xecbcx5];
                    _0xecbcx2['cache'][_0xecbcx5] = []
                }
            }
        };
        return _0xecbcx2
    },
    clear: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        if (!arguments['length']) {
            _0xecbcx2['cache'] = {}
        } else {
            _0xecbcx1 = _0xecbcx2['key'](_0xecbcx1);
            if (_0xecbcx2['cache'].hasOwnProperty(_0xecbcx1)) {
                delete _0xecbcx2['cache'][_0xecbcx1]
            }
        };
        return _0xecbcx2
    },
    uncache: function(_0xecbcx2) {
        var _0xecbcx5 = this,
            _0xecbcx1;
        for (_0xecbcx1 in _0xecbcx5['cache']) {
            if (_0xecbcx5['cache'].hasOwnProperty(_0xecbcx1)) {
                _0xecbcx5['cache'][_0xecbcx1] = Ext['Array']['remove'](_0xecbcx5['cache'][_0xecbcx1], _0xecbcx2)
            }
        };
        return _0xecbcx5
    },
    inheritableStatics: {
        stats: {}
    }
});
Ext.define('Ext.ux.Scheduler.data.util.EventAssignmentsCache', {
    extend: 'Ext.ux.Scheduler.util.Cache',
    requires: ['Ext.data.Model'],
    assignmentStore: null,
    assignmentStoreDetacher: null,
    assignmentStoreFiltersDetacher: null,
    eventStoreDetacher: null,
    constructor: function(_0xecbcx9) {
        var _0xecbcx7 = this,
            _0xecbcx3 = _0xecbcx9['getEventStore']();
        _0xecbcx7['callParent']();

        function _0xecbcx8(_0xecbcxf, _0xecbcxe) {
            Ext['Array']['each'](_0xecbcxe, function(_0xecbcxc) {
                _0xecbcx7['add'](_0xecbcxc['getEventId'](), _0xecbcxc)
            })
        }

        function _0xecbcx2(_0xecbcxf, _0xecbcxe) {
            Ext['Array']['each'](_0xecbcxe, function(_0xecbcxc) {
                _0xecbcx7['remove'](_0xecbcxc['getEventId'](), _0xecbcxc)
            })
        }

        function _0xecbcx11(_0xecbcxc, _0xecbcx17, _0xecbcxf) {
            var _0xecbcxb = _0xecbcx17['eventIdField'],
                _0xecbcxe = _0xecbcx17['previous'] && _0xecbcxb in _0xecbcx17['previous'],
                _0xecbcx10 = _0xecbcxe && _0xecbcx17['previous'][_0xecbcxb];
            if (_0xecbcxe) {
                _0xecbcx7['move'](_0xecbcx10, _0xecbcx17['getEventId'](), _0xecbcx17)
            }
        }

        function _0xecbcxd(_0xecbcxe) {
            _0xecbcx7['clear']()
        }

        function _0xecbcx5(_0xecbcxe, _0xecbcxf) {
            _0xecbcx7['clear']();
            _0xecbcx1(_0xecbcxf)
        }

        function _0xecbcxa(_0xecbcxf, _0xecbcxc, _0xecbcxb, _0xecbcxe) {
            _0xecbcx7['move'](_0xecbcxb, _0xecbcxe)
        }

        function _0xecbcx4(_0xecbcxf, _0xecbcxe) {
            Ext['Array']['each'](_0xecbcxe, function(_0xecbcxc) {
                _0xecbcx7['clear'](_0xecbcxc)
            })
        }

        function _0xecbcx6() {
            _0xecbcx7['clear']()
        }

        function _0xecbcx1(_0xecbcxe) {
            Ext['destroy'](_0xecbcx7['eventStoreDetacher']);
            _0xecbcx7['eventStoreDetacher'] = _0xecbcxe && _0xecbcxe['on']({
                idchanged: _0xecbcxa,
                remove: _0xecbcx4,
                cacheresethint: _0xecbcx6,
                clear: _0xecbcx6,
                rootchange: _0xecbcx6,
                priority: 100,
                destroyable: true
            })
        }
        _0xecbcx7['assignmentStoreDetacher'] = _0xecbcx9['on']({
            add: _0xecbcx8,
            remove: _0xecbcx2,
            update: _0xecbcx11,
            cacheresethint: _0xecbcxd,
            clear: _0xecbcxd,
            eventstorechange: _0xecbcx5,
            priority: 100,
            destroyable: true
        });
        _0xecbcx7['assignmentStoreFiltersDetacher'] = _0xecbcx9['getFilters']()['on']({
            endupdate: _0xecbcxd,
            priority: 1002,
            destroyable: true
        });
        _0xecbcx1(_0xecbcx3);
        _0xecbcx7['assignmentStore'] = _0xecbcx9
    },
    destroy: function() {
        var _0xecbcx1 = this;
        Ext['destroyMembers'](_0xecbcx1, 'assignmentStoreDetacher', 'assignmentStoreFiltersDetacher', 'eventStoreDetacher');
        _0xecbcx1['assignmentStore'] = null
    },
    get: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx5 = this;
        _0xecbcx1 = _0xecbcx5['key'](_0xecbcx1);
        _0xecbcx2 = _0xecbcx2 || function() {
            return Ext['Array']['filter'](_0xecbcx5['assignmentStore']['getRange'](), function(_0xecbcx3) {
                return _0xecbcx3['getEventId']() == _0xecbcx1
            })
        };
        return _0xecbcx5['callParent']([_0xecbcx1, _0xecbcx2])
    }
});
Ext.define('Ext.ux.Scheduler.data.util.ResourceAssignmentsCache', {
    extend: 'Ext.ux.Scheduler.util.Cache',
    requires: ['Ext.data.Model'],
    assignmentStore: null,
    assignmentStoreDetacher: null,
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    constructor: function(_0xecbcx7) {
        var _0xecbcx8 = this,
            _0xecbcx6 = _0xecbcx7['getEventStore'](),
            _0xecbcxe = _0xecbcx6 && _0xecbcx6['getResourceStore']();
        _0xecbcx8['callParent']();

        function _0xecbcxd(_0xecbcx10, _0xecbcxb) {
            Ext['Array']['each'](_0xecbcxb, function(_0xecbcx17) {
                _0xecbcx8['add'](_0xecbcx17['getResourceId'](), _0xecbcx17)
            })
        }

        function _0xecbcx2(_0xecbcx10, _0xecbcxb) {
            Ext['Array']['each'](_0xecbcxb, function(_0xecbcx17) {
                _0xecbcx8['remove'](_0xecbcx17['getResourceId'](), _0xecbcx17)
            })
        }

        function _0xecbcxc(_0xecbcx17, _0xecbcx12, _0xecbcx10) {
            var _0xecbcx14 = _0xecbcx12['resourceIdField'],
                _0xecbcx15 = _0xecbcx12['previous'] && _0xecbcx14 in _0xecbcx12['previous'],
                _0xecbcxb = _0xecbcx15 && _0xecbcx12['previous'][_0xecbcx14];
            if (_0xecbcx15) {
                _0xecbcx8['move'](_0xecbcxb, _0xecbcx12['getResourceId'](), _0xecbcx12)
            }
        }

        function _0xecbcx11(_0xecbcxb) {
            _0xecbcx8['clear']()
        }

        function _0xecbcx5(_0xecbcxb, _0xecbcx10) {
            _0xecbcx1(_0xecbcx10);
            _0xecbcx3(_0xecbcx10 && _0xecbcx10['getResourceStore']())
        }

        function _0xecbcxf(_0xecbcxb, _0xecbcx10) {
            _0xecbcx8['clear']();
            _0xecbcx3(_0xecbcx10)
        }

        function _0xecbcxa(_0xecbcx10, _0xecbcx17, _0xecbcx15, _0xecbcxb) {
            _0xecbcx8['move'](_0xecbcx15, _0xecbcxb)
        }

        function _0xecbcx9(_0xecbcxb, _0xecbcx10) {
            Ext['Array']['each'](_0xecbcx10, function(_0xecbcx17) {
                _0xecbcx8['clear'](_0xecbcx17)
            })
        }

        function _0xecbcx4() {
            _0xecbcx8['clear']()
        }

        function _0xecbcx1(_0xecbcxb) {
            Ext['destroy'](_0xecbcx8['eventStoreDetacher']);
            _0xecbcx8['eventStoreDetacher'] = _0xecbcxb && _0xecbcxb['on']({
                resourcestorechange: _0xecbcxf,
                priority: 100,
                destroyable: true
            })
        }

        function _0xecbcx3(_0xecbcxb) {
            Ext['destroy'](_0xecbcx8['resourceStoreDetacher']);
            _0xecbcx8['resourceStoreDetacher'] = _0xecbcxb && _0xecbcxb['on']({
                idchanged: _0xecbcxa,
                remove: _0xecbcx9,
                clear: _0xecbcx4,
                cacheresethint: _0xecbcx4,
                rootchange: _0xecbcx4,
                priority: 100,
                destroyable: true
            })
        }
        _0xecbcx8['assignmentStoreDetacher'] = _0xecbcx7['on']({
            add: _0xecbcxd,
            remove: _0xecbcx2,
            update: _0xecbcxc,
            clear: _0xecbcx11,
            cacheresethint: _0xecbcx11,
            eventstorechange: _0xecbcx5,
            priority: 100,
            destroyable: true
        });
        _0xecbcx8['assignmentStoreFiltersDetacher'] = _0xecbcx7['getFilters']()['on']('endupdate', _0xecbcx11, _0xecbcx8, {
            priority: 1002,
            destroyable: true
        });
        _0xecbcx1(_0xecbcx6);
        _0xecbcx3(_0xecbcxe);
        _0xecbcx8['assignmentStore'] = _0xecbcx7
    },
    destroy: function() {
        var _0xecbcx1 = this;
        Ext['destroyMembers'](_0xecbcx1, 'assignmentStoreDetacher', 'assignmentStoreFiltersDetacher', 'eventStoreDetacher', 'resourceStoreDetacher');
        _0xecbcx1['assignmentStore'] = null
    },
    get: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx5 = this;
        _0xecbcx1 = _0xecbcx5['key'](_0xecbcx1);
        _0xecbcx2 = _0xecbcx2 || function() {
            return Ext['Array']['filter'](_0xecbcx5['assignmentStore']['getRange'](), function(_0xecbcx3) {
                return _0xecbcx3['getResourceId']() == _0xecbcx1
            })
        };
        return _0xecbcx5['callParent']([_0xecbcx1, _0xecbcx2])
    }
});
Ext.define('Ext.ux.Scheduler.data.mixin.UniversalModelGetter', {
    onClassMixedIn: function(_0xecbcx1) {
        var _0xecbcx2 = {};
        if (_0xecbcx1['prototype']['isTreeStore']) {
            _0xecbcx2['getModelById'] = _0xecbcx1['prototype']['getNodeById']
        } else {
            _0xecbcx2['getModelById'] = _0xecbcx1['prototype']['getById']
        };
        if (_0xecbcx1['prototype']['isTreeStore']) {
            _0xecbcx2['getModelByInternalId'] = function(_0xecbcx5) {
                return this['byInternalIdMap'][_0xecbcx5] || null
            }
        } else {
            _0xecbcx2['getModelByInternalId'] = _0xecbcx1['prototype']['getByInternalId']
        };
        Ext['override'](_0xecbcx1, _0xecbcx2)
    }
});
Ext.define('Ext.ux.Scheduler.data.mixin.CacheHintHelper', {
    extend: 'Ext.Mixin',
    mixinConfig: {
        before: {
            loadRecords: 'loadRecords',
            removeAll: 'removeAll'
        }
    },
    loadRecords: function() {
        this['fireEvent']('cacheresethint', this)
    },
    removeAll: function(_0xecbcx1) {
        if (_0xecbcx1) {
            this['fireEvent']('cacheresethint', this)
        }
    }
});
Ext.define('Ext.ux.Scheduler.model.Customizable', function(_0xecbcx1) {
    return {
        extend: 'Ext.data.Model',
        mixins: {
            robo: 'Robo.data.Model'
        },
        isCustomizableModel: true,
        customizableFields: null,
        previous: null,
        __editing: null,
        __editCounter: 0,
        constructor: function() {
            var _0xecbcx2 = this['callParent'](arguments);
            return _0xecbcx2
        },
        storePreviousFlex: Ext['Function']['flexSetter'](function(_0xecbcx4, _0xecbcx3) {
            var _0xecbcx5 = this,
                _0xecbcx2 = _0xecbcx5['get'](_0xecbcx4);
            if (_0xecbcx2 instanceof Date && !(_0xecbcx3 instanceof Date)) {
                _0xecbcx3 = _0xecbcx5['getField'](_0xecbcx4)['convert'](_0xecbcx3, _0xecbcx5)
            };
            if ((_0xecbcx2 instanceof Date && (_0xecbcx2 - _0xecbcx3)) || !(_0xecbcx2 instanceof Date) && _0xecbcx2 !== _0xecbcx3) {
                _0xecbcx5['previous'][_0xecbcx4] = _0xecbcx2
            }
        }),
        deletePreviousFlex: Ext['Function']['flexSetter'](function(_0xecbcx5, _0xecbcx2) {
            delete this['previous'][_0xecbcx5]
        }),
        set: function(_0xecbcx6, _0xecbcx4) {
            var _0xecbcx3 = this,
                _0xecbcx5 = false,
                _0xecbcx2 = null;
            if (!_0xecbcx3['previous']) {
                _0xecbcx5 = true;
                _0xecbcx3['previous'] = {}
            };
            _0xecbcx3['storePreviousFlex'](_0xecbcx6, _0xecbcx4);
            _0xecbcx2 = _0xecbcx3['callParent'](arguments);
            if (!_0xecbcx3['__editing']) {
                if (_0xecbcx5) {
                    delete _0xecbcx3['previous']
                } else {
                    _0xecbcx3['deletePreviousFlex'](_0xecbcx6, _0xecbcx4)
                }
            };
            return _0xecbcx2
        },
        reject: function() {
            var _0xecbcx5 = this,
                _0xecbcx2 = _0xecbcx5['modified'] || {},
                _0xecbcx3;
            _0xecbcx5['__editing'] = true;
            _0xecbcx5['previous'] = _0xecbcx5['previous'] || {};
            for (_0xecbcx3 in _0xecbcx2) {
                if (_0xecbcx2.hasOwnProperty(_0xecbcx3)) {
                    if (typeof _0xecbcx2[_0xecbcx3] != 'function') {
                        _0xecbcx5['previous'][_0xecbcx3] = _0xecbcx5['get'](_0xecbcx3)
                    }
                }
            };
            _0xecbcx5['callParent'](arguments);
            delete _0xecbcx5['previous'];
            _0xecbcx5['__editing'] = false
        },
        beginEdit: function() {
            this['__editCounter']++;
            this['__editing'] = true;
            this['callParent'](arguments)
        },
        cancelEdit: function() {
            this['__editCounter'] = 0;
            this['__editing'] = false;
            this['callParent'](arguments);
            delete this['previous']
        },
        endEdit: function(_0xecbcx5, _0xecbcx3) {
            if (--this['__editCounter'] === 0) {
                if (!_0xecbcx5 && this['getModifiedFieldNames']) {
                    var _0xecbcx2 = this['editMemento'];
                    if (!_0xecbcx3) {
                        _0xecbcx3 = this['getModifiedFieldNames'](_0xecbcx2['data'])
                    };
                    if (_0xecbcx3 && _0xecbcx3['length'] === 0) {
                        _0xecbcx5 = true
                    }
                };
                this['callParent']([_0xecbcx5]['concat'](Array['prototype']['slice']['call'](arguments, 1)));
                this['__editing'] = false;
                delete this['previous']
            }
        }
    }
}, function(_0xecbcx1) {
    _0xecbcx1['$onExtended']['unshift']({
        fn: function(_0xecbcx2, _0xecbcx5) {
            if (_0xecbcx5) {
                if (Ext['isArray'](_0xecbcx5)) {
                    _0xecbcx2['fieldsInitialValue'] = _0xecbcx5['slice']()
                } else {
                    if (_0xecbcx5['fields']) {
                        if (!Ext['isArray'](_0xecbcx5['fields'])) {
                            _0xecbcx2['fieldsInitialValue'] = [_0xecbcx5['fields']]
                        } else {
                            _0xecbcx2['fieldsInitialValue'] = _0xecbcx5['fields']['slice']()
                        }
                    }
                }
            }
        }
    });
    _0xecbcx1['onExtended'](function(_0xecbcx3, _0xecbcx6, _0xecbcx5) {
        var _0xecbcx2 = Ext['ClassManager'],
            _0xecbcx4 = _0xecbcx2['triggerCreated'];
        _0xecbcx2['triggerCreated'] = function(_0xecbcxd) {
            var _0xecbcxe = _0xecbcx3['prototype'];
            if (_0xecbcx6['customizableFields']) {
                _0xecbcxe['allCustomizableFields'] = (_0xecbcx3['superclass']['allCustomizableFields'] || [])['concat'](_0xecbcx6['customizableFields'])
            } else {
                _0xecbcxe['allCustomizableFields'] = (_0xecbcx3['superclass']['allCustomizableFields'] || [])
            };
            var _0xecbcx8 = {};
            Ext['Array']['each'](_0xecbcxe['allCustomizableFields'], function(_0xecbcxc) {
                if (typeof _0xecbcxc == 'string') {
                    _0xecbcxc = {
                        name: _0xecbcxc
                    }
                };
                _0xecbcx8[_0xecbcxc['name']] = _0xecbcxc
            });
            var _0xecbcx9 = _0xecbcxe['fields'];
            var _0xecbcx7 = [];
            var _0xecbcxa = [];
            Ext['Array']['each'](_0xecbcx9, function(_0xecbcxc) {
                if (_0xecbcxc['isCustomizableField']) {
                    _0xecbcxa['push'](_0xecbcxc['getName']())
                }
            });
            if (_0xecbcxe['idProperty'] !== 'id' && _0xecbcxe['getField']('id')) {
                if (!_0xecbcxe['getField']('id').hasOwnProperty('name')) {
                    _0xecbcxa['push']('id')
                }
            };
            if (_0xecbcxe['idProperty'] !== 'Id' && _0xecbcxe['getField']('Id')) {
                if (!_0xecbcxe['getField']('Id').hasOwnProperty('name')) {
                    _0xecbcxa['push']('Id')
                }
            };
            _0xecbcx3['removeFields'](_0xecbcxa);

            function _0xecbcxf(_0xecbcxb, _0xecbcxc, _0xecbcx15) {
                if (!_0xecbcxc) {
                    return
                };
                if (!Ext['isArray'](_0xecbcxc)) {
                    _0xecbcxc = [_0xecbcxc]
                };
                var _0xecbcx17;
                for (var _0xecbcx10 = _0xecbcxc['length'] - 1; _0xecbcx10 >= 0; _0xecbcx10--) {
                    if (_0xecbcxc[_0xecbcx10]['name'] == _0xecbcx15) {
                        _0xecbcx17 = _0xecbcxc[_0xecbcx10];
                        break
                    }
                };
                Ext['applyIf'](_0xecbcxb, _0xecbcx17)
            }

            function _0xecbcx11(_0xecbcxb) {
                var _0xecbcx14 = _0xecbcx3,
                    _0xecbcx10 = _0xecbcx14['prototype'],
                    _0xecbcx17 = _0xecbcxb === 'Id' ? 'idProperty' : _0xecbcxb['charAt'](0)['toLowerCase']() + _0xecbcxb['substr'](1) + 'Field',
                    _0xecbcxc = {
                        name: _0xecbcx10[_0xecbcx17] || _0xecbcxb,
                        isCustomizableField: true
                    },
                    _0xecbcx15;
                while (_0xecbcx10 && _0xecbcx10['isCustomizableModel']) {
                    _0xecbcx15 = _0xecbcx10[_0xecbcx17] || _0xecbcxb;
                    _0xecbcx10.hasOwnProperty('customizableFields') && _0xecbcxf(_0xecbcxc, _0xecbcx10['customizableFields'], _0xecbcxb);
                    _0xecbcxf(_0xecbcxc, _0xecbcx14['fieldsInitialValue'], _0xecbcx15);
                    _0xecbcx10 = _0xecbcx14['superclass'];
                    _0xecbcx14 = _0xecbcx10 && _0xecbcx10['self']
                };
                return _0xecbcxc
            }
            _0xecbcxa = [];
            Ext['Object']['each'](_0xecbcx8, function(_0xecbcxc, _0xecbcx17) {
                var _0xecbcx15 = _0xecbcx17['name'] || _0xecbcx17['getName']();
                var _0xecbcx16 = _0xecbcx15 === 'Id' ? 'idProperty' : _0xecbcx15['charAt'](0)['toLowerCase']() + _0xecbcx15['substr'](1) + 'Field';
                var _0xecbcx13 = _0xecbcxe[_0xecbcx16] || _0xecbcx15;
                _0xecbcxe['getField'](_0xecbcx13) && _0xecbcxa['push'](_0xecbcx13);
                var _0xecbcx12 = _0xecbcx11(_0xecbcx15);
                _0xecbcx7['push'](Ext['create']('data.field.' + (_0xecbcx12['type'] || 'auto'), _0xecbcx12));
                var _0xecbcx10 = Ext['String']['capitalize'](_0xecbcx15);
                if (_0xecbcx10 != 'Id') {
                    var _0xecbcx14 = 'get' + _0xecbcx10;
                    var _0xecbcxb = 'set' + _0xecbcx10;
                    if (!_0xecbcxe[_0xecbcx14] || _0xecbcxe[_0xecbcx14]['__getterFor__'] && _0xecbcxe[_0xecbcx14]['__getterFor__'] != _0xecbcx13) {
                        _0xecbcxe[_0xecbcx14] = function() {
                            return this['get'](this[_0xecbcx16] || _0xecbcx13)
                        };
                        _0xecbcxe[_0xecbcx14]['__getterFor__'] = _0xecbcx13
                    };
                    if (!_0xecbcxe[_0xecbcxb] || _0xecbcxe[_0xecbcxb]['__setterFor__'] && _0xecbcxe[_0xecbcxb]['__setterFor__'] != _0xecbcx13) {
                        _0xecbcxe[_0xecbcxb] = function(_0xecbcx18) {
                            return this['set'](this[_0xecbcx16] || _0xecbcx13, _0xecbcx18)
                        };
                        _0xecbcxe[_0xecbcxb]['__setterFor__'] = _0xecbcx13
                    }
                }
            });
            _0xecbcx3['replaceFields'](_0xecbcx7, _0xecbcxa);
            _0xecbcx4['apply'](this, arguments);
            _0xecbcx2['triggerCreated'] = _0xecbcx4
        }
    })
});
Ext.define('Ext.ux.Scheduler.model.Assignment', {
    extend: 'Ext.ux.Scheduler.model.Customizable',
    idProperty: 'Id',
    customizableFields: [{
        name: 'ResourceId'
    }, {
        name: 'EventId'
    }],
    resourceIdField: 'ResourceId',
    eventIdField: 'EventId',
    getInternalId: function() {
        return this['internalId']
    },
    getAssignmentStore: function() {
        return this['joined'] && this['joined'][0]
    },
    getEventStore: function() {
        var _0xecbcx1 = this['getAssignmentStore']();
        return _0xecbcx1 && _0xecbcx1['getEventStore']()
    },
    getResourceStore: function() {
        var _0xecbcx1 = this['getEventStore']();
        return _0xecbcx1 && _0xecbcx1['getResourceStore']()
    },
    getEvent: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx1 = _0xecbcx1 || _0xecbcx2['getEventStore']();
        return _0xecbcx1 && _0xecbcx1['getModelById'](_0xecbcx2['getEventId']())
    },
    getResource: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        _0xecbcx2 = _0xecbcx2 || _0xecbcx1['getResourceStore']();
        return _0xecbcx2 && _0xecbcx2['getModelById'](_0xecbcx1['getResourceId']())
    },
    getEventName: function(_0xecbcx1) {
        var _0xecbcx2 = this['getEvent'](_0xecbcx1);
        return _0xecbcx2 && _0xecbcx2['getName']() || ''
    },
    getResourceName: function(_0xecbcx1) {
        var _0xecbcx2 = this['getResource'](_0xecbcx1);
        return _0xecbcx2 && _0xecbcx2['getName']() || ''
    },
    isPersistable: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getEvent'](),
            _0xecbcx5 = _0xecbcx2['getResource']();
        return _0xecbcx1 && !_0xecbcx1['phantom'] && _0xecbcx5 && !_0xecbcx5['phantom']
    },
    fullCopy: function() {
        return this['copy']['apply'](this, arguments)
    },
    getEventResourceCompositeKey: function() {
        var _0xecbcx1 = this;
        return _0xecbcx1['self']['makeAssignmentEventResourceCompositeKey'](_0xecbcx1['getEventId'](), _0xecbcx1['getResourceId']())
    },
    inheritableStatics: {
        makeAssignmentEventResourceCompositeKey: function() {
            var _0xecbcx1 = [];
            return function(_0xecbcx2, _0xecbcx5) {
                _0xecbcx1['length'] = 0;
                _0xecbcx1['push']('event(', _0xecbcx2, ')-resource(', _0xecbcx5, ')');
                return _0xecbcx1.join('')
            }
        }()
    }
});
Ext.define('Ext.ux.Scheduler.data.AssignmentStore', {
    extend: 'Ext.data.Store',
    requires: ['Ext.ux.Scheduler.patches.CollectionKey', 'Ext.ux.Scheduler.data.util.EventAssignmentsCache', 'Ext.ux.Scheduler.data.util.ResourceAssignmentsCache'],
    uses: ['Ext.ux.Scheduler.data.util.EventAssignmentsCache', 'Ext.ux.Scheduler.data.util.ResourceAssignmentsCache', 'Ext.ux.Scheduler.data.util.AssignmentStoreEventResourcesCache', 'Ext.ux.Scheduler.data.util.AssignmentStoreResourceEventsCache'],
    mixins: ['Ext.ux.Scheduler.data.mixin.UniversalModelGetter', 'Ext.ux.Scheduler.data.mixin.CacheHintHelper', 'Robo.data.Store'],
    config: {
        extraKeys: {
            byEventIdResourceId: {
                keyFn: 'getEventResourceCompositeKey'
            }
        }
    },
    model: 'Ext.ux.Scheduler.model.Assignment',
    alias: 'store.assignmentstore',
    storeId: 'assignments',
    eventResourceCache: null,
    resourceEventsCache: null,
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    eventStore: null,
    constructor: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['callParent']([_0xecbcx1]);
        _0xecbcx2['eventAssignmentsCache'] = _0xecbcx2['eventAssignmentsCache'] || _0xecbcx2['createEventAssignmentCache']();
        _0xecbcx2['resourceAssignmentsCache'] = _0xecbcx2['resourceAssignmentsCache'] || _0xecbcx2['createResourceAssignmentCache']()
    },
    destroy: function() {
        var _0xecbcx1 = this;
        Ext['destroyMembers'](_0xecbcx1, 'eventResourceCache', 'resourceEventsCache', 'eventAssignmentsCache', 'resourceEventsCache', 'eventStoreDetacher', 'resourceStoreDetacher');
        _0xecbcx1['callParent']()
    },
    createEventAssignmentCache: function() {
        return new Ext.ux.Scheduler['data']['util'].EventAssignmentsCache(this)
    },
    createResourceAssignmentCache: function() {
        return new Ext.ux.Scheduler['data']['util'].ResourceAssignmentsCache(this)
    },
    createAssignmentStoreEventResourcesCache: function() {
        return new Ext.ux.Scheduler['data']['util'].AssignmentStoreEventResourcesCache(this)
    },
    createAssignmentStoreResourceEventsCache: function() {
        return new Ext.ux.Scheduler['data']['util'].AssignmentStoreResourceEventsCache(this)
    },
    getEventStore: function() {
        return this['eventStore']
    },
    setEventStore: function(_0xecbcx1) {
        var _0xecbcx2 = this,
            _0xecbcx5 = _0xecbcx2['eventStore'];
        _0xecbcx2['eventStore'] = _0xecbcx1 && Ext['StoreMgr']['lookup'](_0xecbcx1) || null;
        _0xecbcx2['attachToEventStore'](_0xecbcx2['eventStore']);
        if ((_0xecbcx5 || _0xecbcx1) && _0xecbcx5 !== _0xecbcx1) {
            _0xecbcx2['fireEvent']('eventstorechange', _0xecbcx2, _0xecbcx1, _0xecbcx5)
        }
    },
    attachToEventStore: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        Ext['destroy'](_0xecbcx2['eventStoreDetacher']);
        if (_0xecbcx1 && _0xecbcx1['isTreeStore']) {
            _0xecbcx2['eventStoreDetacher'] = _0xecbcx1['on']({
                noderemove: _0xecbcx2['onEventNodeRemove'],
                resourcestorechange: _0xecbcx2['onEventStoreResourceStoreChange'],
                scope: _0xecbcx2,
                destroyable: true,
                priority: 200
            })
        } else {
            if (_0xecbcx1) {
                _0xecbcx2['eventStoreDetacher'] = _0xecbcx1['on']({
                    remove: _0xecbcx2['onEventRemove'],
                    resourcestorechange: _0xecbcx2['onEventStoreResourceStoreChange'],
                    scope: _0xecbcx2,
                    destroyable: true,
                    priority: 200
                })
            }
        };
        _0xecbcx2['attachToResourceStore'](_0xecbcx1 && _0xecbcx1['getResourceStore']())
    },
    attachToResourceStore: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        Ext['destroy'](_0xecbcx1['resourceStoreDetacher']);
        if (_0xecbcx2) {
            if (_0xecbcx2['isTreeStore']) {
                _0xecbcx1['resourceStoreDetacher'] = _0xecbcx2['on']({
                    noderemove: _0xecbcx1['onResourceNodeRemove'],
                    scope: _0xecbcx1,
                    destroyable: true,
                    priority: 200
                })
            } else {
                _0xecbcx1['resourceStoreDetacher'] = _0xecbcx2['on']({
                    remove: _0xecbcx1['onResourceRemove'],
                    scope: _0xecbcx1,
                    destroyable: true,
                    priority: 200
                })
            }
        }
    },
    onEventStoreResourceStoreChange: function(_0xecbcx2, _0xecbcx1, _0xecbcx5) {
        this['attachToResourceStore'](_0xecbcx1)
    },
    onEventRemove: function(_0xecbcx4, _0xecbcx3, _0xecbcx5, _0xecbcx2) {
        var _0xecbcx6 = this,
            _0xecbcx1;
        if (!_0xecbcx2) {
            _0xecbcx1 = [];
            Ext['Array']['each'](_0xecbcx3, function(_0xecbcx9) {
                _0xecbcx1 = _0xecbcx1['concat'](_0xecbcx6['getAssignmentsForEvent'](_0xecbcx9))
            });
            _0xecbcx1['length'] && _0xecbcx6['remove'](_0xecbcx1)
        }
    },
    onEventNodeRemove: function(_0xecbcx5, _0xecbcx4, _0xecbcx2) {
        var _0xecbcx3 = this,
            _0xecbcx1;
        if (!_0xecbcx2) {
            _0xecbcx1 = [];
            _0xecbcx4['cascadeBy'](function(_0xecbcx6) {
                _0xecbcx1 = _0xecbcx1['concat'](_0xecbcx3['getAssignmentsForEvent'](_0xecbcx6))
            });
            _0xecbcx1['length'] && _0xecbcx3['remove'](_0xecbcx1)
        }
    },
    onResourceRemove: function(_0xecbcx4, _0xecbcx6, _0xecbcx5, _0xecbcx2) {
        var _0xecbcx3 = this,
            _0xecbcx1;
        if (!_0xecbcx2) {
            _0xecbcx1 = [];
            Ext['Array']['each'](_0xecbcx6, function(_0xecbcx9) {
                _0xecbcx1 = _0xecbcx1['concat'](_0xecbcx3['getAssignmentsForResource'](_0xecbcx9))
            });
            _0xecbcx1['length'] && _0xecbcx3['remove'](_0xecbcx1)
        }
    },
    onResourceNodeRemove: function(_0xecbcx3, _0xecbcx4, _0xecbcx2) {
        var _0xecbcx5 = this,
            _0xecbcx1;
        if (!_0xecbcx2) {
            _0xecbcx1 = [];
            _0xecbcx4['cascadeBy'](function(_0xecbcx6) {
                _0xecbcx1 = _0xecbcx1['concat'](_0xecbcx5['getAssignmentsForResource'](_0xecbcx6))
            });
            _0xecbcx1['length'] && _0xecbcx5['remove'](_0xecbcx1)
        }
    },
    mapAssignmentsForEvent: function(_0xecbcx3, _0xecbcx2, _0xecbcx4) {
        var _0xecbcx5 = this,
            _0xecbcx1 = [];
        _0xecbcx2 = _0xecbcx2 || Ext['identityFn'];
        _0xecbcx4 = _0xecbcx4 || Ext['returnTrue'];
        if (_0xecbcx2 !== Ext['identityFn'] || _0xecbcx4 !== Ext['returnTrue']) {
            Ext['Array']['each'](_0xecbcx5['eventAssignmentsCache']['get'](_0xecbcx3), function(_0xecbcx9) {
                var _0xecbcx6 = _0xecbcx2(_0xecbcx9);
                _0xecbcx4(_0xecbcx6) && _0xecbcx1['push'](_0xecbcx6)
            })
        } else {
            _0xecbcx1 = _0xecbcx1['concat'](_0xecbcx5['eventAssignmentsCache']['get'](_0xecbcx3))
        };
        return _0xecbcx1
    },
    mapAssignmentsForResource: function(_0xecbcx3, _0xecbcx2, _0xecbcx4) {
        var _0xecbcx5 = this,
            _0xecbcx1 = [];
        _0xecbcx2 = _0xecbcx2 || Ext['identityFn'];
        _0xecbcx4 = _0xecbcx4 || Ext['returnTrue'];
        if (_0xecbcx2 !== Ext['identityFn'] || _0xecbcx4 !== Ext['returnTrue']) {
            Ext['Array']['each'](_0xecbcx5['resourceAssignmentsCache']['get'](_0xecbcx3), function(_0xecbcx9) {
                var _0xecbcx6 = _0xecbcx2(_0xecbcx9);
                _0xecbcx4(_0xecbcx6) && _0xecbcx1['push'](_0xecbcx6)
            })
        } else {
            _0xecbcx1 = []['concat'](_0xecbcx5['resourceAssignmentsCache']['get'](_0xecbcx3))
        };
        return _0xecbcx1
    },
    getAssignmentsForEvent: function(_0xecbcx1) {
        return this['mapAssignmentsForEvent'](_0xecbcx1)
    },
    removeAssignmentsForEvent: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        _0xecbcx1['remove'](_0xecbcx1['getAssignmentsForEvent'](_0xecbcx2))
    },
    getAssignmentsForResource: function(_0xecbcx1) {
        return this['mapAssignmentsForResource'](_0xecbcx1)
    },
    removeAssignmentsForResource: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        _0xecbcx1['remove'](_0xecbcx1['getAssignmentsForResource'](_0xecbcx2))
    },
    getResourcesForEvent: function(_0xecbcx3) {
        var _0xecbcx5 = this,
            _0xecbcx1;
        if (_0xecbcx5['eventResourceCache']) {
            _0xecbcx1 = _0xecbcx5['eventResourceCache']['get'](_0xecbcx3)
        } else {
            _0xecbcx1 = _0xecbcx5['mapAssignmentsForEvent'](_0xecbcx3, function _0xecbcx4(_0xecbcx6) {
                return _0xecbcx6['getResource']()
            }, function _0xecbcx2(_0xecbcx6) {
                return !!_0xecbcx6
            })
        };
        return _0xecbcx1
    },
    getEventsForResource: function(_0xecbcx3) {
        var _0xecbcx5 = this,
            _0xecbcx1;
        if (_0xecbcx5['resourceEventsCache']) {
            _0xecbcx1 = _0xecbcx5['resourceEventsCache']['get'](_0xecbcx3)
        } else {
            _0xecbcx1 = _0xecbcx5['mapAssignmentsForResource'](_0xecbcx3, function _0xecbcx4(_0xecbcx6) {
                return _0xecbcx6['getEvent']()
            }, function _0xecbcx2(_0xecbcx6) {
                return !!_0xecbcx6
            })
        };
        return _0xecbcx1
    },
    assignEventToResource: function(_0xecbcx5, _0xecbcx4, _0xecbcx3) {
        var _0xecbcx2 = this,
            _0xecbcx1 = [];
        _0xecbcx3 = _0xecbcx3 || Ext['identityFn'];
        var _0xecbcx6 = Ext['isArray'](_0xecbcx4) ? _0xecbcx4 : [_0xecbcx4];
        Ext['Array']['each'](_0xecbcx6, function(_0xecbcx9) {
            if (!_0xecbcx2['isEventAssignedToResource'](_0xecbcx5, _0xecbcx9)) {
                var _0xecbcx7 = new _0xecbcx2['model']();
                _0xecbcx7['setEventId'](_0xecbcx5 instanceof Ext['data']['Model'] && _0xecbcx5['getId']() || _0xecbcx5);
                _0xecbcx7['setResourceId'](_0xecbcx9 instanceof Ext['data']['Model'] && _0xecbcx9['getId']() || _0xecbcx9);
                _0xecbcx7 = _0xecbcx3(_0xecbcx7);
                _0xecbcx1['push'](_0xecbcx7)
            }
        });
        _0xecbcx2['add'](_0xecbcx1);
        return _0xecbcx1
    },
    unassignEventFromResource: function(_0xecbcx2, _0xecbcx5) {
        var _0xecbcx1 = this,
            _0xecbcx3;
        if (!_0xecbcx5) {
            this['removeAssignmentsForEvent'](_0xecbcx2)
        } else {
            if (_0xecbcx1['isEventAssignedToResource'](_0xecbcx2, _0xecbcx5)) {
                _0xecbcx3 = _0xecbcx1['getAssignmentForEventAndResource'](_0xecbcx2, _0xecbcx5);
                _0xecbcx1['remove'](_0xecbcx3)
            }
        };
        return _0xecbcx3
    },
    isEventAssignedToResource: function(_0xecbcx6, _0xecbcx9) {
        var _0xecbcx4 = this,
            _0xecbcx5 = _0xecbcx4['getResourcesForEvent'](_0xecbcx6),
            _0xecbcx2 = false,
            _0xecbcx3, _0xecbcx1;
        _0xecbcx9 = _0xecbcx9 instanceof Ext['data']['Model'] && _0xecbcx9['getId']() || _0xecbcx9;
        for (_0xecbcx3 = 0, _0xecbcx1 = _0xecbcx5['length']; !_0xecbcx2 && _0xecbcx3 < _0xecbcx1; _0xecbcx3++) {
            _0xecbcx2 = _0xecbcx5[_0xecbcx3];
            _0xecbcx2 = _0xecbcx2['getId']() == _0xecbcx9
        };
        return _0xecbcx2
    },
    getAssignmentForEventAndResource: function(_0xecbcx2, _0xecbcx5) {
        var _0xecbcx1 = this;
        _0xecbcx2 = _0xecbcx2 instanceof Ext['data']['Model'] && _0xecbcx2['getId']() || _0xecbcx2;
        _0xecbcx5 = _0xecbcx5 instanceof Ext['data']['Model'] && _0xecbcx5['getId']() || _0xecbcx5;
        return _0xecbcx1['byEventIdResourceId']['get'](_0xecbcx1['model']['makeAssignmentEventResourceCompositeKey'](_0xecbcx2, _0xecbcx5))
    }
});
Ext.define('Ext.ux.Scheduler.model.CalendarDay', {
    requires: ['Ext.data.Types'],
    extend: 'Ext.ux.Scheduler.model.Customizable',
    idProperty: 'Id',
    customizableFields: [{
        name: 'Date',
        type: 'date',
        dateFormat: 'c',
        persist: true,
        convert: function(_0xecbcx2, _0xecbcx1) {
            if (!_0xecbcx2) {
                return
            };
            var _0xecbcx5 = Ext['data']['Types']['DATE']['convert']['call'](this, _0xecbcx2);
            if (_0xecbcx5) {
                Ext['Date']['clearTime'](_0xecbcx5)
            };
            return _0xecbcx5
        }
    }, {
        name: 'Weekday',
        type: 'int'
    }, {
        name: 'OverrideStartDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'OverrideEndDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'Type',
        defaultValue: 'DAY'
    }, {
        name: 'IsWorkingDay',
        type: 'boolean',
        defaultValue: false
    }, {
        name: 'Cls',
        defaultValue: 'sch-nonworkingtime'
    }, 'Name', {
        name: 'Availability',
        persist: true,
        convert: function(_0xecbcx2, _0xecbcx1) {
            if (_0xecbcx2) {
                return typeof _0xecbcx2 === 'string' ? [_0xecbcx2] : _0xecbcx2
            } else {
                return []
            }
        }
    }],
    availabilityCache: null,
    weekdayField: 'Weekday',
    overrideStartDateField: 'OverrideStartDate',
    overrideEndDateField: 'OverrideEndDate',
    typeField: 'Type',
    dateField: 'Date',
    isWorkingDayField: 'IsWorkingDay',
    clsField: 'Cls',
    nameField: 'Name',
    availabilityField: 'Availability',
    setDate: function(_0xecbcx1) {
        if (_0xecbcx1) {
            _0xecbcx1 = Ext['Date']['clearTime'](_0xecbcx1, true)
        };
        this['set'](this['dateField'], _0xecbcx1)
    },
    clearDate: function() {
        this['set'](this['dateField'], null)
    },
    getAvailability: function(_0xecbcx2) {
        var _0xecbcx5 = this;
        if (_0xecbcx2) {
            return this['get'](this['availabilityField'])
        };
        if (this['availabilityCache']) {
            return this['availabilityCache']
        };
        var _0xecbcx1 = Ext['Array']['map'](this['get'](this['availabilityField']), function(_0xecbcx3) {
            return typeof _0xecbcx3 === 'string' ? _0xecbcx5['parseInterval'](_0xecbcx3) : _0xecbcx3
        });
        this['verifyAvailability'](_0xecbcx1);
        return this['availabilityCache'] = _0xecbcx1
    },
    setAvailability: function(_0xecbcx1) {
        this['availabilityCache'] = null;
        this['set'](this['availabilityField'], this['stringifyIntervals'](_0xecbcx1));
        this['getAvailability']()
    },
    verifyAvailability: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx1['sort'](function(_0xecbcx3, _0xecbcx5) {
            return _0xecbcx3['startTime'] - _0xecbcx5['startTime']
        });
        Ext['Array']['each'](_0xecbcx1, function(_0xecbcx5, _0xecbcx3) {
            if (_0xecbcx5['startTime'] > _0xecbcx5['endTime']) {
                throw new Error('Start time ' + Ext['Date']['format'](_0xecbcx5['startTime'], 'H:i') + ' is greater than end time ' + Ext['Date']['format'](_0xecbcx5['endTime'], 'H:i'))
            };
            if (_0xecbcx3 > 0 && _0xecbcx1[_0xecbcx3 - 1]['endTime'] > _0xecbcx5['startTime']) {
                throw new Error('Availability intervals should not intersect: [' + _0xecbcx2['stringifyInterval'](_0xecbcx1[_0xecbcx3 - 1]) + '] and [' + _0xecbcx2['stringifyInterval'](_0xecbcx5) + ']')
            }
        })
    },
    prependZero: function(_0xecbcx1) {
        return _0xecbcx1 < 10 ? '0' + _0xecbcx1 : _0xecbcx1
    },
    stringifyInterval: function(_0xecbcx2) {
        var _0xecbcx5 = _0xecbcx2['startTime'];
        var _0xecbcx1 = _0xecbcx2['endTime'];
        return this['prependZero'](_0xecbcx5['getHours']()) + ':' + this['prependZero'](_0xecbcx5['getMinutes']()) + '-' + (_0xecbcx1['getDate']() == 1 ? 24 : this['prependZero'](_0xecbcx1['getHours']())) + ':' + this['prependZero'](_0xecbcx1['getMinutes']())
    },
    stringifyIntervals: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        return Ext['Array']['map'](_0xecbcx1, function(_0xecbcx5) {
            if (typeof _0xecbcx5 === 'string') {
                return _0xecbcx5
            };
            return _0xecbcx2['stringifyInterval'](_0xecbcx5)
        })
    },
    parseInterval: function(_0xecbcx2) {
        var _0xecbcx1 = /(\d\d):(\d\d)-(\d\d):(\d\d)/ ['exec'](_0xecbcx2);
        if (!_0xecbcx1) {
            throw new Error('Invalid format for availability string: ' + _0xecbcx2 + '. It should have exact format: hh:mm-hh:mm')
        };
        return {
            startTime: new Date(2016, 11, 0, _0xecbcx1[1], _0xecbcx1[2]),
            endTime: new Date(2016, 11, 0, _0xecbcx1[3], _0xecbcx1[4])
        }
    },
    getTotalHours: function() {
        return this['getTotalMS']() / 1000 / 60 / 60
    },
    getTotalMS: function() {
        var _0xecbcx1 = 0;
        Ext['Array']['each'](this['getAvailability'](), function(_0xecbcx2) {
            _0xecbcx1 += _0xecbcx2['endTime'] - _0xecbcx2['startTime']
        });
        return _0xecbcx1
    },
    addAvailabilityInterval: function(_0xecbcx4, _0xecbcx5) {
        var _0xecbcx2;

        function _0xecbcx1(_0xecbcx6) {
            return new Date(2016, 11, _0xecbcx6['getDate']() == 1 ? 1 : 0, _0xecbcx6['getHours'](), _0xecbcx6['getMinutes']())
        }
        if (_0xecbcx4 instanceof Date) {
            _0xecbcx2 = {
                startTime: _0xecbcx1(_0xecbcx4),
                endTime: _0xecbcx1(_0xecbcx5)
            }
        } else {
            _0xecbcx2 = this['parseInterval'](_0xecbcx4 + (_0xecbcx5 ? '-' + _0xecbcx5 : ''))
        };
        var _0xecbcx3 = this['getAvailability']()['concat'](_0xecbcx2);
        this['verifyAvailability'](_0xecbcx3);
        this['setAvailability'](_0xecbcx3)
    },
    removeAvailabilityInterval: function(_0xecbcx1) {
        var _0xecbcx2 = this['getAvailability']();
        _0xecbcx2['splice'](_0xecbcx1, 1);
        this['setAvailability'](_0xecbcx2)
    },
    getAvailabilityIntervalsFor: function(_0xecbcx5) {
        _0xecbcx5 = typeof _0xecbcx5 == 'number' ? new Date(_0xecbcx5) : _0xecbcx5;
        var _0xecbcx2 = _0xecbcx5['getFullYear']();
        var _0xecbcx3 = _0xecbcx5['getMonth']();
        var _0xecbcx1 = _0xecbcx5['getDate']();
        return Ext['Array']['map'](this['getAvailability'](), function(_0xecbcx4) {
            var _0xecbcx6 = _0xecbcx4['endTime']['getDate']();
            return {
                startDate: new Date(_0xecbcx2, _0xecbcx3, _0xecbcx1, _0xecbcx4['startTime']['getHours'](), _0xecbcx4['startTime']['getMinutes']()),
                endDate: new Date(_0xecbcx2, _0xecbcx3, _0xecbcx1 + (_0xecbcx6 == 1 ? 1 : 0), _0xecbcx4['endTime']['getHours'](), _0xecbcx4['endTime']['getMinutes']())
            }
        })
    },
    getAvailabilityStartFor: function(_0xecbcx2) {
        var _0xecbcx1 = this['getAvailabilityIntervalsFor'](_0xecbcx2);
        if (!_0xecbcx1['length']) {
            return null
        };
        return _0xecbcx1[0]['startDate']
    },
    getAvailabilityEndFor: function(_0xecbcx2) {
        var _0xecbcx1 = this['getAvailabilityIntervalsFor'](_0xecbcx2);
        if (!_0xecbcx1['length']) {
            return null
        };
        return _0xecbcx1[_0xecbcx1['length'] - 1]['endDate']
    }
});
Ext.define('Ext.ux.Scheduler.util.Date', {
    requires: 'Ext.Date',
    mixins: ['Ext.ux.Scheduler.mixin.Localizable'],
    singleton: true,
    stripEscapeRe: /(\\.)/g,
    hourInfoRe: /([gGhHisucUOPZ]|MS)/,
    unitHash: null,
    unitsByName: {},
    MIN_VALUE: new Date(-8640000000000000),
    MAX_VALUE: new Date(8640000000000000),
    constructor: function() {
        var _0xecbcx1 = Ext['Date'];
        var _0xecbcx5 = this['unitHash'] = {
            MILLI: _0xecbcx1['MILLI'],
            SECOND: _0xecbcx1['SECOND'],
            MINUTE: _0xecbcx1['MINUTE'],
            HOUR: _0xecbcx1['HOUR'],
            DAY: _0xecbcx1['DAY'],
            WEEK: 'w',
            MONTH: _0xecbcx1['MONTH'],
            QUARTER: 'q',
            YEAR: _0xecbcx1['YEAR']
        };
        Ext.apply(this, _0xecbcx5);
        var _0xecbcx2 = this;
        this['units'] = [_0xecbcx2['MILLI'], _0xecbcx2['SECOND'], _0xecbcx2['MINUTE'], _0xecbcx2['HOUR'], _0xecbcx2['DAY'], _0xecbcx2['WEEK'], _0xecbcx2['MONTH'], _0xecbcx2['QUARTER'], _0xecbcx2['YEAR']]
    },
    onLocalized: function() {
        this['setUnitNames'](this.L('unitNames'))
    },
    setUnitNames: function(_0xecbcx4) {
        var _0xecbcx3 = this['unitsByName'] = {};
        this['l10n']['unitNames'] = _0xecbcx4;
        this['_unitNames'] = Ext.apply({}, _0xecbcx4);
        var _0xecbcx2 = this['unitHash'];
        for (var _0xecbcx1 in _0xecbcx2) {
            if (_0xecbcx2.hasOwnProperty(_0xecbcx1)) {
                var _0xecbcx5 = _0xecbcx2[_0xecbcx1];
                this['_unitNames'][_0xecbcx5] = this['_unitNames'][_0xecbcx1];
                _0xecbcx3[_0xecbcx1] = _0xecbcx5;
                _0xecbcx3[_0xecbcx5] = _0xecbcx5
            }
        }
    },
    betweenLesser: function(_0xecbcx2, _0xecbcx5, _0xecbcx1) {
        return _0xecbcx5 <= _0xecbcx2 && _0xecbcx2 < _0xecbcx1
    },
    betweenLesserEqual: function(_0xecbcx2, _0xecbcx5, _0xecbcx1) {
        return _0xecbcx5 <= _0xecbcx2 && _0xecbcx2 <= _0xecbcx1
    },
    constrain: function(_0xecbcx2, _0xecbcx5, _0xecbcx1) {
        return this['min'](this['max'](_0xecbcx2, _0xecbcx5), _0xecbcx1)
    },
    compareUnits: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = Ext['Array']['indexOf'](this['units'], _0xecbcx5),
            _0xecbcx3 = Ext['Array']['indexOf'](this['units'], _0xecbcx2);
        return _0xecbcx1 > _0xecbcx3 ? 1 : (_0xecbcx1 < _0xecbcx3 ? -1 : 0)
    },
    isUnitGreater: function(_0xecbcx2, _0xecbcx1) {
        return this['compareUnits'](_0xecbcx2, _0xecbcx1) > 0
    },
    copyTimeValues: function(_0xecbcx2, _0xecbcx1) {
        _0xecbcx2['setHours'](_0xecbcx1['getHours']());
        _0xecbcx2['setMinutes'](_0xecbcx1['getMinutes']());
        _0xecbcx2['setSeconds'](_0xecbcx1['getSeconds']());
        _0xecbcx2['setMilliseconds'](_0xecbcx1['getMilliseconds']())
    },
    add: function(_0xecbcx2, _0xecbcx5, _0xecbcx4) {
        var _0xecbcx6 = Ext['Date']['clone'](_0xecbcx2);
        if (!_0xecbcx5 || _0xecbcx4 === 0) {
            return _0xecbcx6
        };
        switch (_0xecbcx5['toLowerCase']()) {
            case this['MILLI']:
                _0xecbcx6 = new Date(_0xecbcx2['getTime']() + _0xecbcx4);
                break;
            case this['SECOND']:
                _0xecbcx6 = new Date(_0xecbcx2['getTime']() + (_0xecbcx4 * 1000));
                break;
            case this['MINUTE']:
                _0xecbcx6 = new Date(_0xecbcx2['getTime']() + (_0xecbcx4 * 60000));
                break;
            case this['HOUR']:
                _0xecbcx6 = new Date(_0xecbcx2['getTime']() + (_0xecbcx4 * 3600000));
                break;
            case this['DAY']:
                _0xecbcx6['setDate'](_0xecbcx2['getDate']() + _0xecbcx4);
                if (_0xecbcx6['getHours']() === 23 && _0xecbcx2['getHours']() === 0) {
                    _0xecbcx6 = Ext['Date']['add'](_0xecbcx6, Ext['Date'].HOUR, 1)
                };
                break;
            case this['WEEK']:
                _0xecbcx6['setDate'](_0xecbcx2['getDate']() + _0xecbcx4 * 7);
                break;
            case this['MONTH']:
                var _0xecbcx1 = _0xecbcx2['getDate']();
                if (_0xecbcx1 > 28) {
                    _0xecbcx1 = Math['min'](_0xecbcx1, Ext['Date']['getLastDateOfMonth'](this['add'](Ext['Date']['getFirstDateOfMonth'](_0xecbcx2), this.MONTH, _0xecbcx4))['getDate']())
                };
                _0xecbcx6['setDate'](_0xecbcx1);
                _0xecbcx6['setMonth'](_0xecbcx6['getMonth']() + _0xecbcx4);
                break;
            case this['QUARTER']:
                _0xecbcx6 = this['add'](_0xecbcx2, this.MONTH, _0xecbcx4 * 3);
                break;
            case this['YEAR']:
                _0xecbcx6['setFullYear'](_0xecbcx2['getFullYear']() + _0xecbcx4);
                break
        };
        return _0xecbcx6
    },
    getUnitDurationInMs: function(_0xecbcx1) {
        return this['add'](new Date(1, 0, 1), _0xecbcx1, 1) - new Date(1, 0, 1)
    },
    getMeasuringUnit: function(_0xecbcx1) {
        if (_0xecbcx1 === this['WEEK']) {
            return this['DAY']
        };
        return _0xecbcx1
    },
    getDurationInUnit: function(_0xecbcx4, _0xecbcx1, _0xecbcx5, _0xecbcx3) {
        var _0xecbcx2;
        switch (_0xecbcx5) {
            case this['YEAR']:
                _0xecbcx2 = this['getDurationInYears'](_0xecbcx4, _0xecbcx1);
                break;
            case this['QUARTER']:
                _0xecbcx2 = this['getDurationInMonths'](_0xecbcx4, _0xecbcx1) / 3;
                break;
            case this['MONTH']:
                _0xecbcx2 = this['getDurationInMonths'](_0xecbcx4, _0xecbcx1);
                break;
            case this['WEEK']:
                _0xecbcx2 = this['getDurationInDays'](_0xecbcx4, _0xecbcx1) / 7;
                break;
            case this['DAY']:
                _0xecbcx2 = this['getDurationInDays'](_0xecbcx4, _0xecbcx1);
                break;
            case this['HOUR']:
                _0xecbcx2 = this['getDurationInHours'](_0xecbcx4, _0xecbcx1);
                break;
            case this['MINUTE']:
                _0xecbcx2 = this['getDurationInMinutes'](_0xecbcx4, _0xecbcx1);
                break;
            case this['SECOND']:
                _0xecbcx2 = this['getDurationInSeconds'](_0xecbcx4, _0xecbcx1);
                break;
            case this['MILLI']:
                _0xecbcx2 = this['getDurationInMilliseconds'](_0xecbcx4, _0xecbcx1);
                break
        };
        return _0xecbcx3 ? _0xecbcx2 : Math['round'](_0xecbcx2)
    },
    getUnitToBaseUnitRatio: function(_0xecbcx2, _0xecbcx1) {
        if (_0xecbcx2 === _0xecbcx1) {
            return 1
        };
        switch (_0xecbcx2) {
            case this['YEAR']:
                switch (_0xecbcx1) {
                    case this['QUARTER']:
                        return 1 / 4;
                    case this['MONTH']:
                        return 1 / 12
                };
                break;
            case this['QUARTER']:
                switch (_0xecbcx1) {
                    case this['YEAR']:
                        return 4;
                    case this['MONTH']:
                        return 1 / 3
                };
                break;
            case this['MONTH']:
                switch (_0xecbcx1) {
                    case this['YEAR']:
                        return 12;
                    case this['QUARTER']:
                        return 3
                };
                break;
            case this['WEEK']:
                switch (_0xecbcx1) {
                    case this['DAY']:
                        return 1 / 7;
                    case this['HOUR']:
                        return 1 / 168
                };
                break;
            case this['DAY']:
                switch (_0xecbcx1) {
                    case this['WEEK']:
                        return 7;
                    case this['HOUR']:
                        return 1 / 24;
                    case this['MINUTE']:
                        return 1 / 1440
                };
                break;
            case this['HOUR']:
                switch (_0xecbcx1) {
                    case this['DAY']:
                        return 24;
                    case this['MINUTE']:
                        return 1 / 60
                };
                break;
            case this['MINUTE']:
                switch (_0xecbcx1) {
                    case this['HOUR']:
                        return 60;
                    case this['SECOND']:
                        return 1 / 60;
                    case this['MILLI']:
                        return 1 / 60000
                };
                break;
            case this['SECOND']:
                switch (_0xecbcx1) {
                    case this['MILLI']:
                        return 1 / 1000
                };
                break;
            case this['MILLI']:
                switch (_0xecbcx1) {
                    case this['SECOND']:
                        return 1000
                };
                break
        };
        return -1
    },
    isUnitDivisibleIntoSubunit: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = _0xecbcx2 === this['MONTH'] && _0xecbcx1 === this['WEEK'];
        return !_0xecbcx5
    },
    getDurationInMilliseconds: function(_0xecbcx2, _0xecbcx1) {
        return (_0xecbcx1 - _0xecbcx2)
    },
    getDurationInSeconds: function(_0xecbcx2, _0xecbcx1) {
        return (_0xecbcx1 - _0xecbcx2) / 1000
    },
    getDurationInMinutes: function(_0xecbcx2, _0xecbcx1) {
        return (_0xecbcx1 - _0xecbcx2) / 60000
    },
    getDurationInHours: function(_0xecbcx2, _0xecbcx1) {
        return (_0xecbcx1 - _0xecbcx2) / 3600000
    },
    getDurationInDays: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = _0xecbcx5['getTimezoneOffset']() - _0xecbcx2['getTimezoneOffset']();
        return (_0xecbcx2 - _0xecbcx5 + _0xecbcx1 * 60 * 1000) / 86400000
    },
    getDurationInMonths: function(_0xecbcx2, _0xecbcx1) {
        return ((_0xecbcx1['getFullYear']() - _0xecbcx2['getFullYear']()) * 12) + (_0xecbcx1['getMonth']() - _0xecbcx2['getMonth']())
    },
    getDurationInYears: function(_0xecbcx2, _0xecbcx1) {
        return this['getDurationInMonths'](_0xecbcx2, _0xecbcx1) / 12
    },
    min: function(_0xecbcx2, _0xecbcx1) {
        return (_0xecbcx2 && _0xecbcx2.valueOf() || _0xecbcx2) < (_0xecbcx1 && _0xecbcx1.valueOf() || _0xecbcx1) ? _0xecbcx2 : _0xecbcx1
    },
    max: function(_0xecbcx2, _0xecbcx1) {
        return (_0xecbcx2 && _0xecbcx2.valueOf() || _0xecbcx2) > (_0xecbcx1 && _0xecbcx1.valueOf() || _0xecbcx1) ? _0xecbcx2 : _0xecbcx1
    },
    intersectSpans: function(_0xecbcx5, _0xecbcx3, _0xecbcx2, _0xecbcx1) {
        return this['betweenLesser'](_0xecbcx5, _0xecbcx2, _0xecbcx1) || this['betweenLesser'](_0xecbcx2, _0xecbcx5, _0xecbcx3)
    },
    getNameOfUnit: function(_0xecbcx1) {
        _0xecbcx1 = this['getUnitByName'](_0xecbcx1);
        switch (_0xecbcx1['toLowerCase']()) {
            case this['YEAR']:
                return 'YEAR';
            case this['QUARTER']:
                return 'QUARTER';
            case this['MONTH']:
                return 'MONTH';
            case this['WEEK']:
                return 'WEEK';
            case this['DAY']:
                return 'DAY';
            case this['HOUR']:
                return 'HOUR';
            case this['MINUTE']:
                return 'MINUTE';
            case this['SECOND']:
                return 'SECOND';
            case this['MILLI']:
                return 'MILLI'
        };
        throw 'Incorrect UnitName'
    },
    getReadableNameOfUnit: function(_0xecbcx2, _0xecbcx1) {
        if (!this['isLocaleApplied']()) {
            this['applyLocale']()
        };
        return this['_unitNames'][_0xecbcx2][_0xecbcx1 ? 'plural' : 'single']
    },
    getShortNameOfUnit: function(_0xecbcx1) {
        if (!this['isLocaleApplied']()) {
            this['applyLocale']()
        };
        return this['_unitNames'][_0xecbcx1]['abbrev']
    },
    getUnitByName: function(_0xecbcx1) {
        if (!this['isLocaleApplied']()) {
            this['applyLocale']()
        };
        if (!this['unitsByName'][_0xecbcx1]) {
            Ext['Error']['raise']('Unknown unit name: ' + _0xecbcx1)
        };
        return this['unitsByName'][_0xecbcx1]
    },
    getNext: function(_0xecbcx5, _0xecbcx9, _0xecbcx1, _0xecbcx6) {
        var _0xecbcx4 = Ext['Date']['clone'](_0xecbcx5);
        _0xecbcx6 = arguments['length'] < 4 ? 1 : _0xecbcx6;
        _0xecbcx1 = _0xecbcx1 == null ? 1 : _0xecbcx1;
        switch (_0xecbcx9) {
            case this['MILLI']:
                _0xecbcx4 = this['add'](_0xecbcx5, _0xecbcx9, _0xecbcx1);
                break;
            case this['SECOND']:
                _0xecbcx4 = this['add'](_0xecbcx5, _0xecbcx9, _0xecbcx1);
                if (_0xecbcx4['getMilliseconds']() > 0) {
                    _0xecbcx4['setMilliseconds'](0)
                };
                break;
            case this['MINUTE']:
                _0xecbcx4 = this['add'](_0xecbcx5, _0xecbcx9, _0xecbcx1);
                if (_0xecbcx4['getSeconds']() > 0) {
                    _0xecbcx4['setSeconds'](0)
                };
                if (_0xecbcx4['getMilliseconds']() > 0) {
                    _0xecbcx4['setMilliseconds'](0)
                };
                break;
            case this['HOUR']:
                _0xecbcx4 = this['add'](_0xecbcx5, _0xecbcx9, _0xecbcx1);
                if (_0xecbcx4['getMinutes']() > 0) {
                    _0xecbcx4['setMinutes'](0)
                };
                if (_0xecbcx4['getSeconds']() > 0) {
                    _0xecbcx4['setSeconds'](0)
                };
                if (_0xecbcx4['getMilliseconds']() > 0) {
                    _0xecbcx4['setMilliseconds'](0)
                };
                break;
            case this['DAY']:
                var _0xecbcx3 = _0xecbcx5['getHours']() === 23 && this['add'](_0xecbcx4, this.HOUR, 1)['getHours']() === 1;
                if (_0xecbcx3) {
                    _0xecbcx4 = this['add'](_0xecbcx4, this.DAY, 2);
                    this['clearTime'](_0xecbcx4);
                    return _0xecbcx4
                };
                this['clearTime'](_0xecbcx4);
                _0xecbcx4 = this['add'](_0xecbcx4, this.DAY, _0xecbcx1);
                if (_0xecbcx4['getHours']() === 1) {
                    this['clearTime'](_0xecbcx4)
                };
                break;
            case this['WEEK']:
                this['clearTime'](_0xecbcx4);
                var _0xecbcx2 = _0xecbcx4['getDay']();
                _0xecbcx4 = this['add'](_0xecbcx4, this.DAY, _0xecbcx6 - _0xecbcx2 + 7 * (_0xecbcx1 - (_0xecbcx6 <= _0xecbcx2 ? 0 : 1)));
                if (_0xecbcx4['getDay']() !== _0xecbcx6) {
                    _0xecbcx4 = this['add'](_0xecbcx4, this.HOUR, 1)
                } else {
                    this['clearTime'](_0xecbcx4)
                };
                break;
            case this['MONTH']:
                _0xecbcx4 = this['add'](_0xecbcx4, this.MONTH, _0xecbcx1);
                _0xecbcx4['setDate'](1);
                this['clearTime'](_0xecbcx4);
                break;
            case this['QUARTER']:
                _0xecbcx4 = this['add'](_0xecbcx4, this.MONTH, ((_0xecbcx1 - 1) * 3) + (3 - (_0xecbcx4['getMonth']() % 3)));
                this['clearTime'](_0xecbcx4);
                _0xecbcx4['setDate'](1);
                break;
            case this['YEAR']:
                _0xecbcx4 = new Date(_0xecbcx4['getFullYear']() + _0xecbcx1, 0, 1);
                break;
            default:
                throw new Error('Invalid date unit' + _0xecbcx9)
        };
        return _0xecbcx4
    },
    getNumberOfMsFromTheStartOfDay: function(_0xecbcx1) {
        return _0xecbcx1 - this['clearTime'](_0xecbcx1, true) || 86400000
    },
    getNumberOfMsTillTheEndOfDay: function(_0xecbcx1) {
        return this['getStartOfNextDay'](_0xecbcx1, true) - _0xecbcx1
    },
    getStartOfNextDay: function(_0xecbcx2, _0xecbcx6, _0xecbcx4) {
        var _0xecbcx3 = this['add'](_0xecbcx4 ? _0xecbcx2 : this['clearTime'](_0xecbcx2, _0xecbcx6), this.DAY, 1);
        if (_0xecbcx3['getDate']() == _0xecbcx2['getDate']()) {
            var _0xecbcx5 = this['add'](this['clearTime'](_0xecbcx2, _0xecbcx6), this.DAY, 2)['getTimezoneOffset']();
            var _0xecbcx1 = _0xecbcx2['getTimezoneOffset']();
            _0xecbcx3 = this['add'](_0xecbcx3, this.MINUTE, _0xecbcx1 - _0xecbcx5)
        };
        return _0xecbcx3
    },
    getEndOfPreviousDay: function(_0xecbcx2, _0xecbcx5) {
        var _0xecbcx1 = _0xecbcx5 ? _0xecbcx2 : this['clearTime'](_0xecbcx2, true);
        if (_0xecbcx1 - _0xecbcx2) {
            return _0xecbcx1
        } else {
            return this['add'](_0xecbcx1, this.DAY, -1)
        }
    },
    timeSpanContains: function(_0xecbcx5, _0xecbcx2, _0xecbcx3, _0xecbcx1) {
        return (_0xecbcx3 - _0xecbcx5) >= 0 && (_0xecbcx2 - _0xecbcx1) >= 0
    },
    compareWithPrecision: function(_0xecbcx4, _0xecbcx5, _0xecbcx6) {
        var _0xecbcx3 = Ext.ux.Scheduler['util']['Date'],
            _0xecbcx2 = Ext['Date'],
            _0xecbcx1;
        switch (_0xecbcx6) {
            case _0xecbcx3['DAY']:
                _0xecbcx4 = Number(_0xecbcx2['format'](_0xecbcx4, 'Ymd'));
                _0xecbcx5 = Number(_0xecbcx2['format'](_0xecbcx5, 'Ymd'));
                break;
            case _0xecbcx3['WEEK']:
                _0xecbcx4 = Number(_0xecbcx2['format'](_0xecbcx4, 'YmW'));
                _0xecbcx5 = Number(_0xecbcx2['format'](_0xecbcx5, 'YmW'));
                break;
            case _0xecbcx3['MONTH']:
                _0xecbcx4 = Number(_0xecbcx2['format'](_0xecbcx4, 'Ym'));
                _0xecbcx5 = Number(_0xecbcx2['format'](_0xecbcx5, 'Ym'));
                break;
            case _0xecbcx3['QUARTER']:
                _0xecbcx4 = _0xecbcx4['getFullYear']() * 4 + Math['floor'](_0xecbcx4['getMonth']() / 3);
                _0xecbcx5 = _0xecbcx5['getFullYear']() * 4 + Math['floor'](_0xecbcx5['getMonth']() / 3);
                break;
            case _0xecbcx3['YEAR']:
                _0xecbcx4 = _0xecbcx4['getFullYear']();
                _0xecbcx5 = _0xecbcx5['getFullYear']();
                break;
            default:
                ;
            case _0xecbcx3['MILLI']:
                ;
            case _0xecbcx3['SECOND']:
                ;
            case _0xecbcx3['MINUTE']:
                ;
            case _0xecbcx3['HOUR']:
                _0xecbcx6 = _0xecbcx6 && this['getUnitDurationInMs'](_0xecbcx6) || 1;
                _0xecbcx4 = Math['floor'](_0xecbcx4.valueOf() / _0xecbcx6);
                _0xecbcx5 = Math['floor'](_0xecbcx5.valueOf() / _0xecbcx6);
                break
        };
        ((_0xecbcx4 < _0xecbcx5) && (_0xecbcx1 = -1)) || ((_0xecbcx4 > _0xecbcx5) && (_0xecbcx1 = +1)) || (_0xecbcx1 = 0);
        return _0xecbcx1
    },
    getValueInUnits: function(_0xecbcx1, _0xecbcx2) {
        switch (_0xecbcx2) {
            case this['YEAR']:
                return _0xecbcx1['getFullYear']();
            case this['QUARTER']:
                return Math['floor'](_0xecbcx1['getMonth']() / 3) + 1;
            case this['MONTH']:
                return _0xecbcx1['getMonth']();
            case this['WEEK']:
                return Ext['Date']['getWeekOfYear'](_0xecbcx1);
            case this['DAY']:
                return _0xecbcx1['getDate']();
            case this['HOUR']:
                return _0xecbcx1['getHours']();
            case this['MINUTE']:
                return _0xecbcx1['getMinutes']();
            case this['SECOND']:
                return _0xecbcx1['getSeconds']()
        }
    },
    setValueInUnits: function(_0xecbcx2, _0xecbcx5, _0xecbcx4) {
        var _0xecbcx1 = Ext['Date']['clone'](_0xecbcx2),
            _0xecbcx3;
        switch (_0xecbcx5) {
            case this['YEAR']:
                _0xecbcx3 = 'setFullYear';
                break;
            case this['MONTH']:
                _0xecbcx3 = 'setMonth';
                break;
            case this['DAY']:
                _0xecbcx3 = 'setDate';
                break;
            case this['HOUR']:
                _0xecbcx3 = 'setHours';
                break;
            case this['MINUTE']:
                _0xecbcx3 = 'setMinutes';
                break;
            case this['SECOND']:
                _0xecbcx3 = 'setSeconds';
                break;
            case this['MILLI']:
                _0xecbcx3 = 'setMilliseconds';
                break
        };
        _0xecbcx1[_0xecbcx3](_0xecbcx4);
        return _0xecbcx1
    },
    getSubUnit: function(_0xecbcx1) {
        switch (_0xecbcx1) {
            case this['YEAR']:
                return this['MONTH'];
            case this['MONTH']:
                return this['DAY'];
            case this['DAY']:
                return this['HOUR'];
            case this['HOUR']:
                return this['MINUTE'];
            case this['MINUTE']:
                return this['SECOND'];
            case this['SECOND']:
                return this['MILLI']
        }
    },
    setValueInSubUnits: function(_0xecbcx1, _0xecbcx2, _0xecbcx5) {
        _0xecbcx2 = this['getSubUnit'](_0xecbcx2);
        return this['setValueInUnits'](_0xecbcx1, _0xecbcx2, _0xecbcx5)
    },
    mergeDates: function(_0xecbcx5, _0xecbcx2, _0xecbcx1) {
        var _0xecbcx3 = Ext['Date']['clone'](_0xecbcx5);
        switch (_0xecbcx1) {
            case this['YEAR']:
                _0xecbcx3['setFullYear'](_0xecbcx2['getFullYear']());
            case this['MONTH']:
                _0xecbcx3['setMonth'](_0xecbcx2['getMonth']());
            case this['WEEK']:
                ;
            case this['DAY']:
                if (_0xecbcx1 === this['WEEK']) {
                    _0xecbcx3 = this['add'](_0xecbcx3, this.DAY, _0xecbcx2['getDay']() - _0xecbcx3['getDay']())
                } else {
                    _0xecbcx3['setDate'](_0xecbcx2['getDate']())
                };
            case this['HOUR']:
                _0xecbcx3['setHours'](_0xecbcx2['getHours']());
            case this['MINUTE']:
                _0xecbcx3['setMinutes'](_0xecbcx2['getMinutes']());
            case this['SECOND']:
                _0xecbcx3['setSeconds'](_0xecbcx2['getSeconds']());
            case this['MILLI']:
                _0xecbcx3['setMilliseconds'](_0xecbcx2['getMilliseconds']())
        };
        return _0xecbcx3
    },
    splitToSubUnits: function(_0xecbcx3, _0xecbcx5, _0xecbcx1, _0xecbcx2) {
        _0xecbcx1 = _0xecbcx1 || 1;
        _0xecbcx2 = arguments['length'] < 4 ? 1 : _0xecbcx2;
        switch (_0xecbcx5) {
            case this['MONTH']:
                return this['splitMonth'](_0xecbcx3, _0xecbcx1, _0xecbcx2);
            case this['WEEK']:
                ;
            case this['DAY']:
                return this['splitDay'](_0xecbcx3, _0xecbcx1);
            default:
                break
        }
    },
    splitYear: function(_0xecbcx4, _0xecbcx5) {
        var _0xecbcx2 = this['clearTime'](_0xecbcx4, true);
        _0xecbcx2['setMonth'](0);
        _0xecbcx2['setDate'](1);
        var _0xecbcx1 = [];
        for (var _0xecbcx3 = 0; _0xecbcx3 <= 12; _0xecbcx3 = _0xecbcx3 + _0xecbcx5) {
            _0xecbcx1['push'](this['add'](_0xecbcx2, this.MONTH, _0xecbcx3))
        };
        return _0xecbcx1
    },
    splitMonth: function(_0xecbcx7, _0xecbcx5, _0xecbcx9) {
        var _0xecbcx2 = this['clearTime'](_0xecbcx7, true);
        _0xecbcx2['setDate'](1);
        _0xecbcx2 = this['add'](_0xecbcx2, this.DAY, _0xecbcx9 - _0xecbcx2['getDay']());
        var _0xecbcx3 = Ext['Date']['clone'](_0xecbcx2);
        var _0xecbcx6 = this['add'](_0xecbcx2, this.MONTH, 1);
        var _0xecbcx1 = [];
        for (var _0xecbcx4 = 0; _0xecbcx3['getTime']() < _0xecbcx6['getTime'](); _0xecbcx4 = _0xecbcx4 + _0xecbcx5) {
            _0xecbcx3 = this['add'](_0xecbcx2, this.WEEK, _0xecbcx4);
            _0xecbcx1['push'](_0xecbcx3)
        };
        return _0xecbcx1
    },
    splitWeek: function(_0xecbcx6, _0xecbcx5, _0xecbcx4) {
        var _0xecbcx2 = this['add'](_0xecbcx6, this.DAY, _0xecbcx4 - _0xecbcx6['getDay']());
        _0xecbcx2 = this['clearTime'](_0xecbcx2);
        var _0xecbcx1 = [];
        for (var _0xecbcx3 = 0; _0xecbcx3 <= 7; _0xecbcx3 = _0xecbcx3 + _0xecbcx5) {
            _0xecbcx1['push'](this['add'](_0xecbcx2, this.DAY, _0xecbcx3))
        };
        return _0xecbcx1
    },
    splitDay: function(_0xecbcx4, _0xecbcx2) {
        var _0xecbcx3 = this['clearTime'](_0xecbcx4, true);
        var _0xecbcx1 = [];
        for (var _0xecbcx5 = 0; _0xecbcx5 <= 24; _0xecbcx5 = _0xecbcx5 + _0xecbcx2) {
            _0xecbcx1['push'](this['add'](_0xecbcx3, this.HOUR, _0xecbcx5))
        };
        return _0xecbcx1
    },
    splitHour: function(_0xecbcx4, _0xecbcx2) {
        var _0xecbcx3 = new Date(_0xecbcx4['getTime']());
        _0xecbcx3['setMinutes'](0);
        _0xecbcx3['setSeconds'](0);
        _0xecbcx3['setMilliseconds'](0);
        var _0xecbcx1 = [];
        for (var _0xecbcx5 = 0; _0xecbcx5 <= 60; _0xecbcx5 = _0xecbcx5 + _0xecbcx2) {
            _0xecbcx1['push'](this['add'](_0xecbcx3, this.MINUTE, _0xecbcx5))
        };
        return _0xecbcx1
    },
    splitMinute: function(_0xecbcx4, _0xecbcx2) {
        var _0xecbcx3 = Ext['Date']['clone'](_0xecbcx4);
        _0xecbcx3['setSeconds'](0);
        _0xecbcx3['setMilliseconds'](0);
        var _0xecbcx1 = [];
        for (var _0xecbcx5 = 0; _0xecbcx5 <= 60; _0xecbcx5 = _0xecbcx5 + _0xecbcx2) {
            _0xecbcx1['push'](this['add'](_0xecbcx3, this.SECOND, _0xecbcx5))
        };
        return _0xecbcx1
    },
    clearTime: function(_0xecbcx1, _0xecbcx2) {
        if (_0xecbcx1['getHours']() > 0 || _0xecbcx1['getMinutes']() > 0 || _0xecbcx1['getSeconds']() > 0) {
            return Ext['Date']['clearTime'](_0xecbcx1, _0xecbcx2)
        };
        return _0xecbcx2 ? Ext['Date']['clone'](_0xecbcx1) : _0xecbcx1
    },
    getWeekNumber: function(_0xecbcx1) {
        var _0xecbcx2 = new Date(_0xecbcx1.valueOf());
        var _0xecbcx5 = (_0xecbcx1['getDay']() + 6) % 7;
        _0xecbcx2['setDate'](_0xecbcx2['getDate']() - _0xecbcx5 + 3);
        var _0xecbcx3 = _0xecbcx2.valueOf();
        _0xecbcx2['setMonth'](0, 1);
        if (_0xecbcx2['getDay']() != 4) {
            _0xecbcx2['setMonth'](0, 1 + ((4 - _0xecbcx2['getDay']()) + 7) % 7)
        };
        return 1 + Math['ceil']((_0xecbcx3 - _0xecbcx2) / 604800000)
    },
    getWeekStartDate: function(_0xecbcx1, _0xecbcx5) {
        var _0xecbcx2 = this['setDateToMidday'](_0xecbcx1, true);
        _0xecbcx5 = typeof _0xecbcx5 !== 'number' ? 1 : _0xecbcx5;
        while (_0xecbcx2['getDay']() !== _0xecbcx5) {
            _0xecbcx2 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx2, Ext.ux.Scheduler['util']['Date'].DAY, -1)
        };
        return _0xecbcx2
    },
    getWeekEndDate: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = this['setDateToMidday'](_0xecbcx2, true);
        _0xecbcx1 = typeof _0xecbcx1 !== 'number' ? 0 : _0xecbcx1;
        while (_0xecbcx5['getDay']() !== _0xecbcx1) {
            _0xecbcx5 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx5, Ext.ux.Scheduler['util']['Date'].DAY, 1)
        };
        return _0xecbcx5
    },
    setDateToHours: function(_0xecbcx2, _0xecbcx5, _0xecbcx1) {
        if (_0xecbcx5) {
            return new Date(_0xecbcx2['getFullYear'](), _0xecbcx2['getMonth'](), _0xecbcx2['getDate'](), _0xecbcx1)
        };
        _0xecbcx2['setHours'](_0xecbcx1);
        _0xecbcx2['setMinutes'](0);
        _0xecbcx2['setSeconds'](0);
        _0xecbcx2['setMilliseconds'](0);
        return _0xecbcx2
    },
    setDateToMidnight: function(_0xecbcx1, _0xecbcx2) {
        return this['setDateToHours'](_0xecbcx1, _0xecbcx2, 0)
    },
    setDateToMidday: function(_0xecbcx1, _0xecbcx2) {
        return this['setDateToHours'](_0xecbcx1, _0xecbcx2, 12)
    },
    isLaterDate: function(_0xecbcx1, _0xecbcx2) {
        return !this['isSameDate'](_0xecbcx1, _0xecbcx2) && _0xecbcx1 > _0xecbcx2
    },
    isSameDate: function(_0xecbcx1, _0xecbcx2) {
        return _0xecbcx1['getFullYear']() === _0xecbcx2['getFullYear']() && _0xecbcx1['getMonth']() === _0xecbcx2['getMonth']() && _0xecbcx1['getDate']() === _0xecbcx2['getDate']()
    },
    isEarlierDate: function(_0xecbcx1, _0xecbcx2) {
        return !this['isSameDate'](_0xecbcx1, _0xecbcx2) && _0xecbcx1 < _0xecbcx2
    }
});
Ext.define('Ext.ux.Scheduler.model.Range', {
    extend: 'Ext.ux.Scheduler.model.Customizable',
    requires: ['Ext.ux.Scheduler.util.Date'],
    idProperty: 'Id',
    startDateField: 'StartDate',
    endDateField: 'EndDate',
    nameField: 'Name',
    clsField: 'Cls',
    customizableFields: [{
        name: 'StartDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'EndDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'Cls',
        type: 'string'
    }, {
        name: 'Name',
        type: 'string'
    }],
    setStartDate: function(_0xecbcx1, _0xecbcx3) {
        var _0xecbcx5 = this['getEndDate']();
        var _0xecbcx2 = this['getStartDate']();
        this['beginEdit']();
        this['set'](this['startDateField'], _0xecbcx1);
        if (_0xecbcx3 === true && _0xecbcx5 && _0xecbcx2) {
            this['setEndDate'](Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx1, Ext.ux.Scheduler['util']['Date'].MILLI, _0xecbcx5 - _0xecbcx2))
        };
        this['endEdit']()
    },
    setEndDate: function(_0xecbcx2, _0xecbcx3) {
        var _0xecbcx1 = this['getStartDate']();
        var _0xecbcx5 = this['getEndDate']();
        this['beginEdit']();
        this['set'](this['endDateField'], _0xecbcx2);
        if (_0xecbcx3 === true && _0xecbcx1 && _0xecbcx5) {
            this['setStartDate'](Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx2, Ext.ux.Scheduler['util']['Date'].MILLI, -(_0xecbcx5 - _0xecbcx1)))
        };
        this['endEdit']()
    },
    setStartEndDate: function(_0xecbcx2, _0xecbcx1) {
        this['beginEdit']();
        this['set'](this['startDateField'], _0xecbcx2);
        this['set'](this['endDateField'], _0xecbcx1);
        this['endEdit']()
    },
    getDates: function() {
        var _0xecbcx3 = [],
            _0xecbcx5 = this['getEndDate']();
        if (this['isScheduled']()) {
            var _0xecbcx2 = Ext['Date']['clearTime'](this['getStartDate'](), true);
            if (_0xecbcx5 - this['getStartDate']() === 0) {
                _0xecbcx3['push'](_0xecbcx2)
            } else {
                for (var _0xecbcx1 = _0xecbcx2; _0xecbcx1 < _0xecbcx5; _0xecbcx1 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx1, Ext.ux.Scheduler['util']['Date'].DAY, 1)) {
                    _0xecbcx3['push'](_0xecbcx1)
                }
            }
        };
        return _0xecbcx3
    },
    forEachDate: function(_0xecbcx2, _0xecbcx1) {
        return Ext['Array']['each'](this['getDates'](), _0xecbcx2, _0xecbcx1)
    },
    isScheduled: function() {
        var _0xecbcx1 = this;
        return Boolean(_0xecbcx1['getStartDate']() && _0xecbcx1['getEndDate']() && _0xecbcx1['areDatesValid']())
    },
    isValid: function() {
        var _0xecbcx5 = this,
            _0xecbcx1 = _0xecbcx5['callParent'](),
            _0xecbcx3, _0xecbcx2;
        if (_0xecbcx1) {
            _0xecbcx3 = _0xecbcx5['getStartDate'](), _0xecbcx2 = _0xecbcx5['getEndDate']();
            _0xecbcx1 = !_0xecbcx3 || !_0xecbcx2 || (_0xecbcx2 - _0xecbcx3 >= 0)
        };
        return _0xecbcx1
    },
    areDatesValid: function() {
        var _0xecbcx2 = this,
            _0xecbcx5 = _0xecbcx2['getStartDate'](),
            _0xecbcx1 = _0xecbcx2['getEndDate']();
        return !_0xecbcx5 || !_0xecbcx1 || (_0xecbcx1 - _0xecbcx5 >= 0)
    },
    shift: function(_0xecbcx2, _0xecbcx1) {
        this['setStartEndDate'](Ext.ux.Scheduler['util']['Date']['add'](this['getStartDate'](), _0xecbcx2, _0xecbcx1), Ext.ux.Scheduler['util']['Date']['add'](this['getEndDate'](), _0xecbcx2, _0xecbcx1))
    },
    fullCopy: function() {
        return this['copy']['apply'](this, arguments)
    },
    intersectsRange: function(_0xecbcx3, _0xecbcx1) {
        var _0xecbcx5 = this['getStartDate']();
        var _0xecbcx2 = this['getEndDate']();
        return _0xecbcx5 && _0xecbcx2 && Ext.ux.Scheduler['util']['Date']['intersectSpans'](_0xecbcx5, _0xecbcx2, _0xecbcx3, _0xecbcx1)
    }
});
Ext.define('Ext.ux.Scheduler.data.Calendar', {
    extend: 'Ext.data.Store',
    alias: 'store.calendar',
    requires: ['Ext.Date', 'Ext.ux.Scheduler.model.CalendarDay', 'Ext.ux.Scheduler.model.Range', 'Ext.ux.Scheduler.util.Date'],
    mixins: ['Ext.ux.Scheduler.data.mixin.UniversalModelGetter', 'Robo.data.Store'],
    model: 'Ext.ux.Scheduler.model.CalendarDay',
    daysPerMonth: 30,
    daysPerWeek: 7,
    hoursPerDay: 24,
    unitsInMs: null,
    defaultNonWorkingTimeCssCls: 'sch-nonworkingtime',
    weekendsAreWorkdays: false,
    weekendFirstDay: 6,
    weekendSecondDay: 0,
    holidaysCache: null,
    availabilityIntervalsCache: null,
    daysIndex: null,
    weekAvailability: null,
    defaultWeekAvailability: null,
    nonStandardWeeksByStartDate: null,
    nonStandardWeeksStartDates: null,
    calendarId: null,
    parent: null,
    defaultAvailability: ['00:00-24:00'],
    name: null,
    suspendCacheUpdate: 0,
    availabilitySearchLimit: 1825,
    inheritableStatics: {
        getCalendar: function(_0xecbcx1) {
            if (_0xecbcx1 instanceof Ext.ux.Scheduler['data']['Calendar']) {
                return _0xecbcx1
            };
            return Ext['data']['StoreManager']['lookup']('GNT_CALENDAR:' + _0xecbcx1)
        },
        getAllCalendars: function() {
            var _0xecbcx1 = [];
            Ext['data']['StoreManager']['each'](function(_0xecbcx2) {
                if (_0xecbcx2 instanceof Ext.ux.Scheduler['data']['Calendar']) {
                    _0xecbcx1['push'](_0xecbcx2)
                }
            });
            return _0xecbcx1
        },
        removeAll: function() {
            var _0xecbcx1 = Ext['data']['StoreManager'];
            _0xecbcx1['each'](function(_0xecbcx2) {
                if (_0xecbcx2 instanceof Ext.ux.Scheduler['data']['Calendar']) {
                    _0xecbcx1['unregister'](_0xecbcx2);
                    Ext['destroy'](_0xecbcx2)
                }
            })
        }
    },
    constructor: function(_0xecbcx1) {
        _0xecbcx1 = _0xecbcx1 || {};
        var _0xecbcx2 = _0xecbcx1['parent'];
        delete _0xecbcx1['parent'];
        var _0xecbcx5 = _0xecbcx1['calendarId'];
        delete _0xecbcx1['calendarId'];
        this['callParent'](arguments);
        this['setParent'](_0xecbcx2);
        this['setCalendarId'](_0xecbcx5);
        this['unitsInMs'] = {
            MILLI: 1,
            SECOND: 1000,
            MINUTE: 60 * 1000,
            HOUR: 60 * 60 * 1000,
            DAY: this['hoursPerDay'] * 60 * 60 * 1000,
            WEEK: this['daysPerWeek'] * this['hoursPerDay'] * 60 * 60 * 1000,
            MONTH: this['daysPerMonth'] * this['hoursPerDay'] * 60 * 60 * 1000,
            QUARTER: 3 * this['daysPerMonth'] * 24 * 60 * 60 * 1000,
            YEAR: 4 * 3 * this['daysPerMonth'] * 24 * 60 * 60 * 1000
        };
        this['defaultWeekAvailability'] = this['getDefaultWeekAvailability']();
        this['on']({
            update: this['clearCache'],
            add: this['clearCache'],
            remove: this['clearCache'],
            filter: this['clearCache'],
            sort: this['clearCache'],
            clear: this['clearCache'],
            refresh: this['clearCache'],
            write: this['clearCache'],
            scope: this
        });
        this['clearCache']()
    },
    getCalendarId: function() {
        return this['calendarId']
    },
    setCalendarId: function(_0xecbcx2) {
        if (this['calendarId'] != null) {
            Ext['data']['StoreManager']['unregister'](this)
        };
        this['calendarId'] = _0xecbcx2;
        if (_0xecbcx2 != null) {
            this['storeId'] = 'GNT_CALENDAR:' + _0xecbcx2;
            Ext['data']['StoreManager']['register'](this)
        } else {
            this['storeId'] = null
        };
        var _0xecbcx1 = this['proxy'];
        if (_0xecbcx1 && _0xecbcx1['extraParams']) {
            _0xecbcx1['extraParams']['calendarId'] = _0xecbcx2
        }
    },
    getDefaultWeekAvailability: function() {
        var _0xecbcx4 = this['defaultAvailability'];
        var _0xecbcx3 = this['weekendFirstDay'];
        var _0xecbcx1 = this['weekendSecondDay'];
        var _0xecbcx5 = [];
        for (var _0xecbcx2 = 0; _0xecbcx2 < 7; _0xecbcx2++) {
            _0xecbcx5['push'](this['weekendsAreWorkdays'] || _0xecbcx2 != _0xecbcx3 && _0xecbcx2 != _0xecbcx1 ? new this['model']({
                Type: 'WEEKDAY',
                Weekday: _0xecbcx2,
                Availability: _0xecbcx4 && _0xecbcx4['slice']() || [],
                IsWorkingDay: true
            }) : new this['model']({
                Type: 'WEEKDAY',
                Weekday: _0xecbcx2,
                Availability: []
            }))
        };
        return _0xecbcx5
    },
    clearCache: function() {
        if (this['suspendCacheUpdate'] > 0) {
            return
        };
        this['holidaysCache'] = {};
        this['availabilityIntervalsCache'] = {};
        var _0xecbcx5 = this['daysIndex'] = {};
        var _0xecbcx1 = this['weekAvailability'] = [];
        var _0xecbcx3 = this['nonStandardWeeksStartDates'] = [];
        var _0xecbcx2 = this['nonStandardWeeksByStartDate'] = {};
        this['each'](function(_0xecbcxd) {
            var _0xecbcx4 = _0xecbcxd['getId']();
            var _0xecbcxf = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/ ['exec'](_0xecbcx4);
            var _0xecbcx8 = /^WEEKDAY:(\d+)$/ ['exec'](_0xecbcx4);
            var _0xecbcxe = _0xecbcxd['getType']();
            var _0xecbcx11 = _0xecbcxd['getWeekday']();
            if (_0xecbcxe == 'WEEKDAYOVERRIDE' || _0xecbcxf) {
                var _0xecbcx6, _0xecbcxa;
                if (_0xecbcxe == 'WEEKDAYOVERRIDE') {
                    _0xecbcx6 = _0xecbcxd['getOverrideStartDate']();
                    _0xecbcxa = _0xecbcxd['getOverrideEndDate']()
                };
                if (_0xecbcxf) {
                    _0xecbcx6 = Ext['Date']['parse'](_0xecbcxf[2], 'Y/m/d');
                    _0xecbcxa = Ext['Date']['parse'](_0xecbcxf[3], 'Y/m/d');
                    _0xecbcx11 = _0xecbcxf[1]
                };
                if (_0xecbcx6 && _0xecbcxa && _0xecbcx11 != null) {
                    var _0xecbcx7 = _0xecbcx6 - 0;
                    if (!_0xecbcx2[_0xecbcx7]) {
                        _0xecbcx2[_0xecbcx7] = {
                            startDate: new Date(_0xecbcx6),
                            endDate: new Date(_0xecbcxa),
                            name: _0xecbcxd['getName'](),
                            weekAvailability: [],
                            mainDay: null
                        };
                        _0xecbcx3['push'](_0xecbcx7)
                    };
                    if (_0xecbcx11 >= 0) {
                        _0xecbcx2[_0xecbcx7]['weekAvailability'][_0xecbcx11] = _0xecbcxd
                    } else {
                        _0xecbcx2[_0xecbcx7]['mainDay'] = _0xecbcxd
                    }
                }
            } else {
                if (_0xecbcxe == 'WEEKDAY' || _0xecbcx8) {
                    if (_0xecbcx8) {
                        _0xecbcx11 = _0xecbcx8[1]
                    };
                    if (_0xecbcx11 != null) {
                        if (_0xecbcx11 < 0 || _0xecbcx11 > 6) {
                            throw new Error('Incorrect week day index')
                        };
                        _0xecbcx1[_0xecbcx11] = _0xecbcxd
                    }
                } else {
                    var _0xecbcx9 = _0xecbcxd['getDate']();
                    if (_0xecbcx9) {
                        _0xecbcx5[_0xecbcx9 - 0] = _0xecbcxd
                    }
                }
            }
        });
        _0xecbcx3['sort'](function(_0xecbcx6, _0xecbcx4) {
            return _0xecbcx6 - _0xecbcx4
        });
        this['fireEvent']('calendarchange', this)
    },
    intersectsWithCurrentWeeks: function(_0xecbcx2, _0xecbcx5) {
        var _0xecbcx1 = false;
        this['forEachNonStandardWeek'](function(_0xecbcx6) {
            var _0xecbcx3 = _0xecbcx6['startDate'];
            var _0xecbcx4 = _0xecbcx6['endDate'];
            if (_0xecbcx3 <= _0xecbcx2 && _0xecbcx2 < _0xecbcx4 || _0xecbcx3 < _0xecbcx5 && _0xecbcx5 <= _0xecbcx4) {
                _0xecbcx1 = true;
                return false
            }
        });
        return _0xecbcx1
    },
    addNonStandardWeek: function(_0xecbcx2, _0xecbcx6, _0xecbcx1, _0xecbcx5) {
        _0xecbcx2 = Ext['Date']['clearTime'](new Date(_0xecbcx2));
        _0xecbcx6 = Ext['Date']['clearTime'](new Date(_0xecbcx6));
        if (this['intersectsWithCurrentWeeks'](_0xecbcx2, _0xecbcx6)) {
            throw new Error('Can not add intersecting week')
        };
        var _0xecbcx4 = this['model'];
        var _0xecbcx9 = [];
        Ext['Array']['each'](_0xecbcx1, function(_0xecbcx7, _0xecbcxa) {
            if (_0xecbcx7 instanceof Ext.ux.Scheduler['model']['CalendarDay']) {
                _0xecbcx7['setType']('WEEKDAYOVERRIDE');
                _0xecbcx7['setOverrideStartDate'](_0xecbcx2);
                _0xecbcx7['setOverrideEndDate'](_0xecbcx6);
                _0xecbcx7['setWeekday'](_0xecbcxa);
                _0xecbcx7['setName'](_0xecbcx5 || 'Week override');
                _0xecbcx9['push'](_0xecbcx7)
            } else {
                if (Ext['isArray'](_0xecbcx7)) {
                    var _0xecbcx8 = new _0xecbcx4();
                    _0xecbcx8['setType']('WEEKDAYOVERRIDE');
                    _0xecbcx8['setOverrideStartDate'](_0xecbcx2);
                    _0xecbcx8['setOverrideEndDate'](_0xecbcx6);
                    _0xecbcx8['setWeekday'](_0xecbcxa);
                    _0xecbcx8['setName'](_0xecbcx5 || 'Week override');
                    _0xecbcx8['setAvailability'](_0xecbcx7);
                    _0xecbcx9['push'](_0xecbcx8)
                }
            }
        });
        var _0xecbcx3 = new _0xecbcx4();
        _0xecbcx3['setType']('WEEKDAYOVERRIDE');
        _0xecbcx3['setOverrideStartDate'](_0xecbcx2);
        _0xecbcx3['setOverrideEndDate'](_0xecbcx6);
        _0xecbcx3['setWeekday'](-1);
        _0xecbcx3['setName'](_0xecbcx5 || 'Week override');
        _0xecbcx9['push'](_0xecbcx3);
        this['add'](_0xecbcx9)
    },
    getNonStandardWeekByStartDate: function(_0xecbcx1) {
        return this['nonStandardWeeksByStartDate'][Ext['Date']['clearTime'](new Date(_0xecbcx1)) - 0] || null
    },
    getNonStandardWeekByDate: function(_0xecbcx3) {
        _0xecbcx3 = Ext['Date']['clearTime'](new Date(_0xecbcx3)) - 0;
        var _0xecbcx4 = this['nonStandardWeeksStartDates'];
        var _0xecbcx1 = this['nonStandardWeeksByStartDate'];
        for (var _0xecbcx5 = 0; _0xecbcx5 < _0xecbcx4['length']; _0xecbcx5++) {
            var _0xecbcx2 = _0xecbcx1[_0xecbcx4[_0xecbcx5]];
            if (_0xecbcx2['startDate'] > _0xecbcx3) {
                break
            };
            if (_0xecbcx2['startDate'] <= _0xecbcx3 && _0xecbcx3 <= _0xecbcx2['endDate']) {
                return _0xecbcx2
            }
        };
        return null
    },
    removeNonStandardWeek: function(_0xecbcx1) {
        _0xecbcx1 = Ext['Date']['clearTime'](new Date(_0xecbcx1)) - 0;
        var _0xecbcx2 = this['getNonStandardWeekByStartDate'](_0xecbcx1);
        if (!_0xecbcx2) {
            return
        };
        this['remove'](Ext['Array']['clean'](_0xecbcx2['weekAvailability'])['concat'](_0xecbcx2['mainDay']))
    },
    forEachNonStandardWeek: function(_0xecbcx4, _0xecbcx5) {
        var _0xecbcx3 = this;
        var _0xecbcx6 = this['nonStandardWeeksStartDates'];
        var _0xecbcx1 = this['nonStandardWeeksByStartDate'];
        for (var _0xecbcx2 = 0; _0xecbcx2 < _0xecbcx6['length']; _0xecbcx2++) {
            if (_0xecbcx4['call'](_0xecbcx5 || _0xecbcx3, _0xecbcx1[_0xecbcx6[_0xecbcx2]]) === false) {
                return false
            }
        }
    },
    setWeekendsAreWorkDays: function(_0xecbcx1) {
        if (_0xecbcx1 !== this['weekendsAreWorkdays']) {
            this['weekendsAreWorkdays'] = _0xecbcx1;
            this['defaultWeekAvailability'] = this['getDefaultWeekAvailability']();
            this['clearCache']()
        }
    },
    areWeekendsWorkDays: function() {
        return this['weekendsAreWorkdays']
    },
    getCalendarDay: function(_0xecbcx1) {
        _0xecbcx1 = typeof _0xecbcx1 == 'number' ? new Date(_0xecbcx1) : _0xecbcx1;
        return this['getOverrideDay'](_0xecbcx1) || this['getWeekDay'](_0xecbcx1['getDay'](), _0xecbcx1) || this['getDefaultCalendarDay'](_0xecbcx1['getDay']())
    },
    getOverrideDay: function(_0xecbcx1) {
        return this['getOwnCalendarDay'](_0xecbcx1) || this['parent'] && this['parent']['getOverrideDay'](_0xecbcx1) || null
    },
    getOwnCalendarDay: function(_0xecbcx1) {
        _0xecbcx1 = typeof _0xecbcx1 == 'number' ? new Date(_0xecbcx1) : _0xecbcx1;
        return this['daysIndex'][Ext['Date']['clearTime'](_0xecbcx1, true) - 0]
    },
    getWeekDay: function(_0xecbcx5, _0xecbcx2) {
        if (_0xecbcx2) {
            var _0xecbcx1 = this['getNonStandardWeekByDate'](_0xecbcx2);
            if (_0xecbcx1 && _0xecbcx1['weekAvailability'][_0xecbcx5]) {
                return _0xecbcx1['weekAvailability'][_0xecbcx5]
            }
        };
        return this['weekAvailability'][_0xecbcx5] || this['parent'] && this['parent']['getWeekDay'](_0xecbcx5, _0xecbcx2) || null
    },
    getDefaultCalendarDay: function(_0xecbcx1) {
        if (!this.hasOwnProperty('defaultAvailability') && !this.hasOwnProperty('weekendsAreWorkdays') && this['parent']) {
            return this['parent']['getDefaultCalendarDay'](_0xecbcx1)
        };
        return this['defaultWeekAvailability'][_0xecbcx1]
    },
    isHoliday: function(_0xecbcx5) {
        var _0xecbcx2 = _0xecbcx5 - 0;
        var _0xecbcx3 = this['holidaysCache'];
        if (_0xecbcx3[_0xecbcx2] != null) {
            return _0xecbcx3[_0xecbcx2]
        };
        _0xecbcx5 = typeof _0xecbcx5 == 'number' ? new Date(_0xecbcx5) : _0xecbcx5;
        var _0xecbcx1 = this['getCalendarDay'](_0xecbcx5);
        if (!_0xecbcx1) {
            throw new Error('Can\'t find day for ' + _0xecbcx5)
        };
        return _0xecbcx3[_0xecbcx2] = !_0xecbcx1['getIsWorkingDay']()
    },
    isWeekend: function(_0xecbcx2) {
        var _0xecbcx1 = _0xecbcx2['getDay']();
        return _0xecbcx1 === this['weekendFirstDay'] || _0xecbcx1 === this['weekendSecondDay']
    },
    isWorkingDay: function(_0xecbcx1) {
        return !this['isHoliday'](_0xecbcx1)
    },
    convertMSDurationToUnit: function(_0xecbcx1, _0xecbcx2) {
        return _0xecbcx1 / this['unitsInMs'][Ext.ux.Scheduler['util']['Date']['getNameOfUnit'](_0xecbcx2)]
    },
    convertDurationToMs: function(_0xecbcx2, _0xecbcx1) {
        return _0xecbcx2 * this['unitsInMs'][Ext.ux.Scheduler['util']['Date']['getNameOfUnit'](_0xecbcx1)]
    },
    convertDuration: function(_0xecbcx4, _0xecbcx3, _0xecbcx2) {
        var _0xecbcx5 = this,
            _0xecbcx1 = _0xecbcx4;
        if (_0xecbcx3 != _0xecbcx2) {
            _0xecbcx1 = _0xecbcx5['convertMSDurationToUnit'](_0xecbcx5['convertDurationToMs'](_0xecbcx4, _0xecbcx3), _0xecbcx2)
        };
        return _0xecbcx1
    },
    getHolidaysRanges: function(_0xecbcx5, _0xecbcx6, _0xecbcx1) {
        if (_0xecbcx5 > _0xecbcx6) {
            Ext['Error']['raise']('startDate can\'t be bigger than endDate ')
        };
        _0xecbcx5 = Ext['Date']['clearTime'](_0xecbcx5, true);
        _0xecbcx6 = Ext['Date']['clearTime'](_0xecbcx6, true);
        var _0xecbcx2 = [],
            _0xecbcx9, _0xecbcx3;
        for (_0xecbcx3 = _0xecbcx5; _0xecbcx3 < _0xecbcx6; _0xecbcx3 = Ext.ux.Scheduler['util']['Date']['getNext'](_0xecbcx3, Ext.ux.Scheduler['util']['Date'].DAY, 1)) {
            if (this['isHoliday'](_0xecbcx3) || (this['weekendsAreWorkdays'] && _0xecbcx1 && this['isWeekend'](_0xecbcx3))) {
                var _0xecbcx7 = this['getCalendarDay'](_0xecbcx3);
                var _0xecbcxa = _0xecbcx7 && _0xecbcx7['getCls']() || this['defaultNonWorkingTimeCssCls'];
                var _0xecbcx4 = Ext.ux.Scheduler['util']['Date']['getNext'](_0xecbcx3, Ext.ux.Scheduler['util']['Date'].DAY, 1);
                if (!_0xecbcx9) {
                    _0xecbcx9 = new Ext.ux.Scheduler['model'].Range({
                        StartDate: _0xecbcx3,
                        EndDate: _0xecbcx4,
                        Cls: _0xecbcxa
                    })
                } else {
                    if (_0xecbcx9['getCls']() == _0xecbcxa) {
                        _0xecbcx9['setEndDate'](_0xecbcx4)
                    } else {
                        _0xecbcx2['push'](_0xecbcx9);
                        _0xecbcx9 = new Ext.ux.Scheduler['model'].Range({
                            StartDate: _0xecbcx3,
                            EndDate: _0xecbcx4,
                            Cls: _0xecbcxa
                        })
                    }
                }
            } else {
                if (_0xecbcx9) {
                    _0xecbcx2['push'](_0xecbcx9);
                    _0xecbcx9 = null
                }
            }
        };
        if (_0xecbcx9) {
            _0xecbcx2['push'](_0xecbcx9)
        };
        return _0xecbcx2
    },
    forEachAvailabilityInterval: function(_0xecbcx17, _0xecbcx6, _0xecbcx10) {
        _0xecbcx10 = _0xecbcx10 || this;
        var _0xecbcxe = this;
        var _0xecbcx3 = _0xecbcx17['startDate'];
        var _0xecbcxd = _0xecbcx17['endDate'];
        var _0xecbcxb = _0xecbcx17['isForward'] !== false;
        if (_0xecbcxb ? !_0xecbcx3 : !_0xecbcxd) {
            throw new Error('At least `startDate` or `endDate` is required, depending from the `isForward` option')
        };
        var _0xecbcx1 = new Date(_0xecbcxb ? _0xecbcx3 : _0xecbcxd);
        var _0xecbcx5 = Ext.ux.Scheduler['util']['Date'];
        if (_0xecbcxb) {
            if (!_0xecbcxd) {
                _0xecbcxd = _0xecbcx5['add'](_0xecbcx3, _0xecbcx5.DAY, _0xecbcx17['availabilitySearchLimit'] || this['availabilitySearchLimit'] || 5 * 365)
            }
        } else {
            if (!_0xecbcx3) {
                _0xecbcx3 = _0xecbcx5['add'](_0xecbcxd, _0xecbcx5.DAY, -(_0xecbcx17['availabilitySearchLimit'] || this['availabilitySearchLimit'] || 5 * 365))
            }
        };
        var _0xecbcx9 = false;
        while (_0xecbcxb ? _0xecbcx1 < _0xecbcxd : _0xecbcx1 > _0xecbcx3) {
            var _0xecbcx8 = this['getAvailabilityIntervalsFor'](_0xecbcx1 - (_0xecbcxb ? 0 : 1), _0xecbcxb ? _0xecbcx9 : false);
            for (var _0xecbcx7 = _0xecbcxb ? 0 : _0xecbcx8['length'] - 1; _0xecbcxb ? _0xecbcx7 < _0xecbcx8['length'] : _0xecbcx7 >= 0; _0xecbcxb ? _0xecbcx7++ : _0xecbcx7--) {
                var _0xecbcx2 = _0xecbcx8[_0xecbcx7];
                var _0xecbcx11 = _0xecbcx2['startDate'];
                var _0xecbcxc = _0xecbcx2['endDate'];
                if (_0xecbcx11 >= _0xecbcxd || _0xecbcxc <= _0xecbcx3) {
                    continue
                };
                var _0xecbcx4 = _0xecbcx11 < _0xecbcx3 ? _0xecbcx3 : _0xecbcx11;
                var _0xecbcxf = _0xecbcxc > _0xecbcxd ? _0xecbcxd : _0xecbcxc;
                if (_0xecbcx6['call'](_0xecbcx10, _0xecbcx4, _0xecbcxf) === false) {
                    return false
                }
            };
            _0xecbcx1 = _0xecbcxb ? _0xecbcx5['getStartOfNextDay'](_0xecbcx1, false, _0xecbcx9) : _0xecbcx5['getEndOfPreviousDay'](_0xecbcx1, _0xecbcx9);
            _0xecbcx9 = true
        }
    },
    calculateDuration: function(_0xecbcx1, _0xecbcx3, _0xecbcx2) {
        var _0xecbcx5 = 0;
        this['forEachAvailabilityInterval']({
            startDate: _0xecbcx1,
            endDate: _0xecbcx3
        }, function(_0xecbcx9, _0xecbcx6) {
            var _0xecbcx4 = _0xecbcx9['getTimezoneOffset']() - _0xecbcx6['getTimezoneOffset']();
            _0xecbcx5 += _0xecbcx6 - _0xecbcx9 + _0xecbcx4 * 60 * 1000
        });
        return this['convertMSDurationToUnit'](_0xecbcx5, _0xecbcx2)
    },
    calculateEndDate: function(_0xecbcx1, _0xecbcx6, _0xecbcx2) {
        if (!_0xecbcx6) {
            return new Date(_0xecbcx1)
        };
        var _0xecbcx4 = Ext.ux.Scheduler['util']['Date'],
            _0xecbcx3;
        _0xecbcx6 = this['convertDurationToMs'](_0xecbcx6, _0xecbcx2);
        var _0xecbcx5 = _0xecbcx6 === 0 && Ext['Date']['clearTime'](_0xecbcx1, true) - _0xecbcx1 === 0 ? _0xecbcx4['add'](_0xecbcx1, Ext.ux.Scheduler['util']['Date'].DAY, -1) : _0xecbcx1;
        this['forEachAvailabilityInterval']({
            startDate: _0xecbcx5
        }, function(_0xecbcxa, _0xecbcx7) {
            var _0xecbcx8 = _0xecbcx7 - _0xecbcxa;
            var _0xecbcx9 = _0xecbcxa['getTimezoneOffset']() - _0xecbcx7['getTimezoneOffset']();
            if (_0xecbcx8 >= _0xecbcx6) {
                _0xecbcx3 = new Date(_0xecbcxa - 0 + _0xecbcx6);
                return false
            } else {
                _0xecbcx6 -= _0xecbcx8 + _0xecbcx9 * 60 * 1000
            }
        });
        return _0xecbcx3
    },
    calculateStartDate: function(_0xecbcx3, _0xecbcx5, _0xecbcx2) {
        if (!_0xecbcx5) {
            return new Date(_0xecbcx3)
        };
        var _0xecbcx1;
        _0xecbcx5 = this['convertDurationToMs'](_0xecbcx5, _0xecbcx2);
        this['forEachAvailabilityInterval']({
            endDate: _0xecbcx3,
            isForward: false
        }, function(_0xecbcx6, _0xecbcx4) {
            var _0xecbcx9 = _0xecbcx4 - _0xecbcx6;
            if (_0xecbcx9 >= _0xecbcx5) {
                _0xecbcx1 = new Date(_0xecbcx4 - _0xecbcx5);
                return false
            } else {
                _0xecbcx5 -= _0xecbcx9
            }
        });
        return _0xecbcx1
    },
    skipNonWorkingTime: function(_0xecbcx1, _0xecbcx5) {
        var _0xecbcx2 = false;
        this['forEachAvailabilityInterval'](_0xecbcx5 ? {
            startDate: _0xecbcx1
        } : {
            endDate: _0xecbcx1,
            isForward: false
        }, function(_0xecbcx4, _0xecbcx3) {
            _0xecbcx1 = _0xecbcx5 ? _0xecbcx4 : _0xecbcx3;
            _0xecbcx2 = true;
            return false
        });
        if (!_0xecbcx2) {
            throw new Error('skipNonWorkingTime: Cannot skip non-working time, please ensure that this calendar has any working period of time specified')
        };
        return new Date(_0xecbcx1)
    },
    skipWorkingTime: function(_0xecbcx1, _0xecbcx5, _0xecbcx2) {
        return _0xecbcx5 >= 0 ? this['calculateEndDate'](_0xecbcx1, _0xecbcx5, _0xecbcx2) : this['calculateStartDate'](_0xecbcx1, -_0xecbcx5, _0xecbcx2)
    },
    getAvailabilityIntervalsFor: function(_0xecbcx1, _0xecbcx2) {
        if (_0xecbcx2) {
            _0xecbcx1 = (_0xecbcx1).valueOf()
        } else {
            if (_0xecbcx1 instanceof Date) {
                _0xecbcx1 = (new Date(_0xecbcx1['getFullYear'](), _0xecbcx1['getMonth'](), _0xecbcx1['getDate']())).valueOf()
            } else {
                _0xecbcx1 = Ext['Date']['clearTime'](new Date(_0xecbcx1)).valueOf()
            }
        };
        return this['availabilityIntervalsCache'][_0xecbcx1] = (this['availabilityIntervalsCache'][_0xecbcx1] || this['getCalendarDay'](_0xecbcx1)['getAvailabilityIntervalsFor'](_0xecbcx1))
    },
    isChildOf: function(_0xecbcx5) {
        var _0xecbcx1 = this,
            _0xecbcx2 = false;
        while (_0xecbcx1 && !_0xecbcx2) {
            _0xecbcx2 = _0xecbcx1 === _0xecbcx5;
            _0xecbcx1 = _0xecbcx1['parent']
        };
        return _0xecbcx2
    },
    getParentableCalendars: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = [],
            _0xecbcx5 = Ext.ux.Scheduler['data']['Calendar']['getAllCalendars']();
        Ext['Array']['each'](_0xecbcx5, function(_0xecbcx3) {
            if (_0xecbcx3 !== _0xecbcx2 && !_0xecbcx3['isChildOf'](_0xecbcx2)) {
                _0xecbcx1['push']({
                    Id: _0xecbcx3['calendarId'],
                    Name: _0xecbcx3['name'] || _0xecbcx3['calendarId']
                })
            }
        });
        return _0xecbcx1
    },
    setParent: function(_0xecbcx4) {
        var _0xecbcx3 = Ext.ux.Scheduler['data']['Calendar']['getCalendar'](_0xecbcx4);
        if (_0xecbcx4 && !_0xecbcx3) {
            throw new Error('Invalid parent specified for the calendar')
        };
        if (this['parent'] != _0xecbcx3) {
            var _0xecbcx2 = this['proxy'];
            var _0xecbcx5 = {
                calendarchange: this['clearCache'],
                destroy: this['onParentDestroy'],
                scope: this
            };
            var _0xecbcx1 = this['parent'];
            if (_0xecbcx1) {
                _0xecbcx1['un'](_0xecbcx5)
            };
            this['parent'] = _0xecbcx3;
            if (_0xecbcx3) {
                _0xecbcx3['on'](_0xecbcx5)
            };
            if (_0xecbcx2 && _0xecbcx2['extraParams']) {
                _0xecbcx2['extraParams']['parentId'] = _0xecbcx3 ? _0xecbcx3['calendarId'] : null
            };
            this['clearCache']();
            this['fireEvent']('parentchange', this, _0xecbcx3, _0xecbcx1)
        }
    },
    onParentDestroy: function() {
        this['setParent'](null)
    },
    isAvailabilityIntersected: function(_0xecbcxb, _0xecbcx2, _0xecbcxe) {
        var _0xecbcxf, _0xecbcx1, _0xecbcx4, _0xecbcx7;
        for (var _0xecbcx9 = 0; _0xecbcx9 < 7; _0xecbcx9++) {
            _0xecbcxf = this['getWeekDay'](_0xecbcx9) || this['getDefaultCalendarDay'](_0xecbcx9);
            _0xecbcx4 = _0xecbcxb['getWeekDay'](_0xecbcx9) || _0xecbcxb['getDefaultCalendarDay'](_0xecbcx9);
            if (!_0xecbcxf || !_0xecbcx4) {
                continue
            };
            _0xecbcx1 = _0xecbcxf['getAvailability']();
            _0xecbcx7 = _0xecbcx4['getAvailability']();
            for (var _0xecbcx6 = 0, _0xecbcx5 = _0xecbcx1['length']; _0xecbcx6 < _0xecbcx5; _0xecbcx6++) {
                for (var _0xecbcx3 = 0, _0xecbcxc = _0xecbcx7['length']; _0xecbcx3 < _0xecbcxc; _0xecbcx3++) {
                    if (_0xecbcx7[_0xecbcx3]['startTime'] < _0xecbcx1[_0xecbcx6]['endTime'] && _0xecbcx7[_0xecbcx3]['endTime'] > _0xecbcx1[_0xecbcx6]['startTime']) {
                        return true
                    }
                }
            }
        };
        var _0xecbcx10 = false;
        this['forEachNonStandardWeek'](function(_0xecbcxa) {
            if (_0xecbcxa['startDate'] >= _0xecbcxe) {
                return false
            };
            if (_0xecbcx2 < _0xecbcxa['endDate']) {
                _0xecbcx10 = true;
                return false
            }
        });
        return _0xecbcx10
    }
});
Ext.define('Ext.ux.Scheduler.data.CrudManager', {
    extend: 'Ext.ux.Scheduler.crud.AbstractManager',
    mixins: ['Ext.ux.Scheduler.crud.encoder.Json', 'Ext.ux.Scheduler.crud.transport.Ajax'],
    resourceStore: null,
    eventStore: null,
    assignmentStore: null,
    dependencyStore: null,
    addRelatedStores: true,
    constructor: function(_0xecbcx5) {
        _0xecbcx5 = _0xecbcx5 || {};
        var _0xecbcx7 = _0xecbcx5['resourceStore'] || this['resourceStore'] || new Ext.ux.Scheduler['data'].ResourceStore(),
            _0xecbcx3 = _0xecbcx5['eventStore'] || this['eventStore'] || new Ext.ux.Scheduler['data'].EventStore(),
            _0xecbcx9 = _0xecbcx5['assignmentStore'] || this['assignmentStore'],
            _0xecbcx1 = _0xecbcx5['dependencyStore'] || this['dependencyStore'],
            _0xecbcxa = [];
        if (_0xecbcx3 && _0xecbcx5['addRelatedStores'] !== false) {
            var _0xecbcx6 = this['getEventStoreInfo'](_0xecbcx3, _0xecbcx5);
            _0xecbcx9 = _0xecbcx9 || _0xecbcx6['assignmentStore'];
            _0xecbcx7 = _0xecbcx7 || _0xecbcx6['resourceStore'];
            _0xecbcx1 = _0xecbcx1 || _0xecbcx6['dependencyStore']
        };
        _0xecbcx3 && _0xecbcxa['push'](_0xecbcx3);
        _0xecbcx7 && _0xecbcxa['push'](_0xecbcx7);
        _0xecbcx9 && _0xecbcxa['push'](_0xecbcx9);
        _0xecbcx1 && _0xecbcxa['push'](_0xecbcx1);
        if (_0xecbcxa['length']) {
            var _0xecbcx2 = [];
            _0xecbcx7 && _0xecbcx2['push'](_0xecbcx7);
            _0xecbcx3 && _0xecbcx2['push'](_0xecbcx3);
            _0xecbcx9 && _0xecbcx2['push'](_0xecbcx9);
            _0xecbcx1 && _0xecbcx2['push'](_0xecbcx1);
            if (_0xecbcx2['length']) {
                _0xecbcx5['syncApplySequence'] = (_0xecbcx5['syncApplySequence'] || _0xecbcx5['stores'] || [])['concat'](_0xecbcx2)
            };
            var _0xecbcx4 = _0xecbcx5['stores'] || this['stores'];
            if (_0xecbcx4 && !Ext['isArray'](_0xecbcx4)) {
                _0xecbcx4 = [_0xecbcx4]
            };
            _0xecbcx5['stores'] = (_0xecbcx4 || [])['concat'](_0xecbcxa)
        };
        this['callParent']([_0xecbcx5]);
        this['eventStore'] = this['getStoreDescriptor'](_0xecbcx3);
        this['resourceStore'] = this['getStoreDescriptor'](_0xecbcx7);
        this['assignmentStore'] = this['getStoreDescriptor'](_0xecbcx9);
        this['dependencyStore'] = this['getStoreDescriptor'](_0xecbcx1)
    },
    getEventStoreInfo: function(_0xecbcx3, _0xecbcx5) {
        if (!_0xecbcx3['isStore']) {
            if (typeof _0xecbcx3 == 'string') {
                _0xecbcx3 = Ext['data']['StoreManager']['get'](_0xecbcx3)
            } else {
                _0xecbcx3 = _0xecbcx3['store']
            }
        };
        var _0xecbcx1 = {},
            _0xecbcx6 = _0xecbcx5['assignmentStore'],
            _0xecbcx4 = _0xecbcx5['resourceStore'],
            _0xecbcx2 = _0xecbcx5['dependencyStore'];
        !_0xecbcx6 && (_0xecbcx1['assignmentStore'] = _0xecbcx3['getAssignmentStore']());
        !_0xecbcx4 && (_0xecbcx1['resourceStore'] = _0xecbcx3['getResourceStore']());
        !_0xecbcx2 && (_0xecbcx1['dependencyStore'] = _0xecbcx3['getDependencyStore']());
        return _0xecbcx1
    },
    getResourceStore: function() {
        return this['resourceStore'] && this['resourceStore']['store']
    },
    setResourceStore: function(_0xecbcx1) {
        if (this['getResourceStore']()) {
            this['removeStore'](this['getResourceStore']())
        };
        this['addStore'](_0xecbcx1);
        this['resourceStore'] = {
            store: _0xecbcx1
        }
    },
    getEventStore: function() {
        return this['eventStore'] && this['eventStore']['store']
    },
    setEventStore: function(_0xecbcx1) {
        if (this['getEventStore']()) {
            this['removeStore'](this['getEventStore']())
        };
        this['addStore'](_0xecbcx1);
        this['eventStore'] = {
            store: _0xecbcx1
        }
    },
    getAssignmentStore: function() {
        return this['assignmentStore'] && this['assignmentStore']['store']
    },
    setAssignmentStore: function(_0xecbcx1) {
        if (this['getAssignmentStore']()) {
            this['removeStore'](this['getAssignmentStore']())
        };
        this['addStore'](_0xecbcx1);
        this['assignmentStore'] = {
            store: _0xecbcx1
        }
    },
    getDependencyStore: function() {
        return this['dependencyStore'] && this['dependencyStore']['store']
    },
    setDependencyStore: function(_0xecbcx1) {
        if (this['getDependencyStore']()) {
            this['removeStore'](this['getDependencyStore']())
        };
        this['addStore'](_0xecbcx1);
        this['dependencyStore'] = {
            store: _0xecbcx1
        }
    }
});
Ext.define('Ext.ux.Scheduler.data.util.EventDependencyCache', function() {
    var _0xecbcx8 = {
        allowNull: false,
        filtered: false,
        collapsed: true
    };
    var _0xecbcx9 = [null];

    function _0xecbcxa(_0xecbcxd, _0xecbcx11) {
        Ext['Array']['each'](_0xecbcx11, function(_0xecbcxf) {
            var _0xecbcxc = _0xecbcxf['getSourceId'](),
                _0xecbcxe = _0xecbcxf['getTargetId']();
            if (_0xecbcxc) {
                _0xecbcxd['add'](_0xecbcxc, _0xecbcxf)
            };
            if (_0xecbcxe) {
                _0xecbcxd['add'](_0xecbcxe, _0xecbcxf)
            };
            if (_0xecbcxc && _0xecbcxe) {
                _0xecbcxd['addSuccessor'](_0xecbcxc, _0xecbcxf);
                _0xecbcxd['addPredecessor'](_0xecbcxe, _0xecbcxf)
            }
        })
    }

    function _0xecbcx7(_0xecbcxd, _0xecbcx11) {
        Ext['Array']['each'](_0xecbcx11, function(_0xecbcxf) {
            var _0xecbcxc = _0xecbcxf['getSourceId'](),
                _0xecbcxe = _0xecbcxf['getTargetId']();
            if (_0xecbcxc) {
                _0xecbcxd['remove'](_0xecbcxc, _0xecbcxf);
                _0xecbcxd['removeSuccessor'](_0xecbcxc, _0xecbcxf)
            };
            if (_0xecbcxe) {
                _0xecbcxd['remove'](_0xecbcxe, _0xecbcxf);
                _0xecbcxd['removePredecessor'](_0xecbcxe, _0xecbcxf)
            }
        })
    }

    function _0xecbcx4(_0xecbcx11, _0xecbcxd) {
        Ext['Array']['each'](_0xecbcxd, function(_0xecbcxe) {
            _0xecbcx11['clear'](_0xecbcxe);
            _0xecbcx11['clearSuccessors'](_0xecbcxe);
            _0xecbcx11['clearPredecessors'](_0xecbcxe)
        })
    }

    function _0xecbcx6(_0xecbcxf, _0xecbcx11, _0xecbcxd, _0xecbcxb, _0xecbcxc, _0xecbcxe) {
        if (_0xecbcx11 !== _0xecbcxd) {
            _0xecbcxf['move'](_0xecbcxd, _0xecbcx11, _0xecbcxe);
            _0xecbcxf['moveSuccessors'](_0xecbcxd, _0xecbcx11, _0xecbcxe)
        };
        if (_0xecbcxb !== _0xecbcxc) {
            _0xecbcxf['move'](_0xecbcxc, _0xecbcxb, _0xecbcxe);
            _0xecbcxf['movePredecessors'](_0xecbcxc, _0xecbcxb, _0xecbcxe)
        }
    }

    function _0xecbcx2(_0xecbcxe, _0xecbcx11, _0xecbcxd) {
        _0xecbcxe['move'](_0xecbcx11, _0xecbcxd);
        _0xecbcxe['moveSuccessors'](_0xecbcx11, _0xecbcxd);
        _0xecbcxe['movePredecessors'](_0xecbcx11, _0xecbcxd)
    }

    function _0xecbcx1(_0xecbcx11, _0xecbcxd) {
        Ext['Array']['each'](_0xecbcxd, function(_0xecbcxe) {
            if (!_0xecbcx11['has'](_0xecbcxe)) {
                _0xecbcx11['set'](_0xecbcxe, []);
                _0xecbcx11['setSuccessors'](_0xecbcxe, []);
                _0xecbcx11['setPredecessors'](_0xecbcxe, [])
            }
        })
    }

    function _0xecbcx5(_0xecbcxe, _0xecbcxd, _0xecbcx11) {
        _0xecbcxe['clear']();
        _0xecbcxa(_0xecbcxe, _0xecbcxd['getRange']());
        _0xecbcx11 && (!_0xecbcx11['getRoot'] || _0xecbcx11['getRoot']()) && _0xecbcx1(_0xecbcxe, _0xecbcx11['collect'](_0xecbcx11['getModel']()['idProperty'], _0xecbcx8))
    }

    function _0xecbcx3(_0xecbcxf, _0xecbcxe, _0xecbcxd, _0xecbcx11) {
        _0xecbcxe = Ext['Array']['reduce'](_0xecbcxe, function(_0xecbcxc, _0xecbcxb) {
            _0xecbcxf['set'](_0xecbcxb, []);
            _0xecbcxc[_0xecbcxf['key'](_0xecbcxb)] = true
        }, {});
        _0xecbcxd['each'](function(_0xecbcx17) {
            var _0xecbcx15 = _0xecbcx17['getSourceId'](),
                _0xecbcx10 = _0xecbcx17['getTargetId'](),
                _0xecbcxb = _0xecbcxe.hasOwnProperty(_0xecbcx15),
                _0xecbcxc = _0xecbcxe.hasOwnProperty(_0xecbcx10);
            _0xecbcxb && _0xecbcxf['add'](_0xecbcx15, _0xecbcx17);
            _0xecbcxb && _0xecbcxf['addSuccessor'](_0xecbcx15, _0xecbcx17);
            _0xecbcxc && _0xecbcxf['add'](_0xecbcx10, _0xecbcx17);
            _0xecbcxc && _0xecbcxf['addPredecessor'](_0xecbcx10, _0xecbcx17)
        });
        Ext['Object']['each'](_0xecbcxe, function(_0xecbcxc) {
            if (!_0xecbcxf['has'](_0xecbcxc) && (_0xecbcx11['getNodeById'] ? _0xecbcx11['getNodeById'](_0xecbcxc) : _0xecbcx11['getById'](_0xecbcxc))) {
                _0xecbcxf['set'](_0xecbcxc, [])
            }
        })
    }
    return {
        extend: 'Ext.ux.Scheduler.util.Cache',
        dependencyStore: null,
        dependencyStoreDetacher: null,
        eventStoreDetacher: null,
        constructor: function(_0xecbcxe) {
            var _0xecbcx18 = this,
                _0xecbcx10;
            _0xecbcx18['callParent']();
            _0xecbcx18['dependencyStore'] = _0xecbcxe;

            function _0xecbcx16(_0xecbcx19, _0xecbcx1a) {
                _0xecbcxa(_0xecbcx18, _0xecbcx1a)
            }

            function _0xecbcxc(_0xecbcx1a, _0xecbcx1b, _0xecbcx1c, _0xecbcx19) {
                !_0xecbcx19 && _0xecbcx7(_0xecbcx18, _0xecbcx1b)
            }

            function _0xecbcxf(_0xecbcx1d, _0xecbcx1a, _0xecbcx1b) {
                var _0xecbcx1e = _0xecbcx1a['fromField'],
                    _0xecbcx1c = _0xecbcx1a['toField'],
                    _0xecbcx19 = _0xecbcx1a['previous'] && _0xecbcx1e in _0xecbcx1a['previous'],
                    _0xecbcx1f = _0xecbcx1a['previous'] && _0xecbcx1c in _0xecbcx1a['previous'],
                    _0xecbcx20 = _0xecbcx19 && _0xecbcx1a['previous'][_0xecbcx1e],
                    _0xecbcx21 = _0xecbcx1f && _0xecbcx1a['previous'][_0xecbcx1c];
                if (_0xecbcx19 || _0xecbcx1f) {
                    _0xecbcx6(_0xecbcx18, _0xecbcx19 ? _0xecbcx1a['getSourceId']() : false, _0xecbcx19 ? _0xecbcx20 : false, _0xecbcx1f ? _0xecbcx1a['getTargetId']() : false, _0xecbcx1f ? _0xecbcx21 : false, _0xecbcx1a)
                }
            }

            function _0xecbcx11(_0xecbcx19) {
                _0xecbcx5(_0xecbcx18, _0xecbcx19, _0xecbcx19['getEventStore']())
            }

            function _0xecbcxb(_0xecbcx19, _0xecbcx1a) {
                _0xecbcx5(_0xecbcx18, _0xecbcx19, _0xecbcx1a);
                _0xecbcxd(_0xecbcx1a)
            }

            function _0xecbcx22(_0xecbcx1a, _0xecbcx1c, _0xecbcx1b, _0xecbcx19) {
                _0xecbcx2(_0xecbcx18, _0xecbcx1b, _0xecbcx19)
            }

            function _0xecbcx23(_0xecbcx1a, _0xecbcx19) {
                _0xecbcx1(_0xecbcx18, _0xecbcx19)
            }

            function _0xecbcx13(_0xecbcx19, _0xecbcx1a) {
                _0xecbcx1(_0xecbcx18, _0xecbcx9[0] = _0xecbcx1a, _0xecbcx9)
            }

            function _0xecbcx17(_0xecbcx19, _0xecbcx1a) {
                _0xecbcx1(_0xecbcx18, _0xecbcx9[0] = _0xecbcx1a, _0xecbcx9)
            }

            function _0xecbcx15(_0xecbcx1a, _0xecbcx1b, _0xecbcx1c, _0xecbcx19) {
                !_0xecbcx19 && _0xecbcx4(_0xecbcx18, _0xecbcx1b)
            }

            function _0xecbcx24(_0xecbcx1a, _0xecbcx1c, _0xecbcx19) {
                !_0xecbcx19 && _0xecbcx4(_0xecbcx18, _0xecbcx9[0] = _0xecbcx1c, _0xecbcx9)
            }

            function _0xecbcx12() {
                _0xecbcx5(_0xecbcx18, _0xecbcx18['dependencyStore'], _0xecbcx18['dependencyStore']['getEventStore']())
            }

            function _0xecbcx14(_0xecbcx19, _0xecbcx1a) {
                if (!_0xecbcx1a) {
                    _0xecbcx5(_0xecbcx18, _0xecbcx18['dependencyStore'], _0xecbcx18['eventStore'])
                } else {
                    if (!Ext['isArray'](_0xecbcx1a)) {
                        _0xecbcx1a = [_0xecbcx1a]
                    };
                    _0xecbcx3(_0xecbcx18, _0xecbcx1a, _0xecbcx18['dependencyStore'], _0xecbcx18['eventStore'])
                }
            }

            function _0xecbcxd(_0xecbcx19) {
                var _0xecbcx1a;
                Ext['destroy'](_0xecbcx18['eventStoreDetacher']);
                if (_0xecbcx19) {
                    _0xecbcx1a = {
                        idchanged: _0xecbcx22,
                        cacheresethint: _0xecbcx12,
                        clear: _0xecbcx12,
                        refresh: _0xecbcx12,
                        "\x65\x76\x65\x6E\x74\x2D\x64\x65\x70\x65\x6E\x64\x65\x6E\x63\x79\x2D\x63\x61\x63\x68\x65\x2D\x69\x6E\x76\x61\x6C\x69\x64\x61\x74\x65": _0xecbcx14,
                        priority: 100,
                        destroyable: true
                    };
                    if (_0xecbcx19['isTreeStore']) {
                        _0xecbcx1a = Ext.apply(_0xecbcx1a, {
                            nodeappend: _0xecbcx13,
                            nodeinsert: _0xecbcx17,
                            noderemove: _0xecbcx24,
                            rootchange: _0xecbcx12
                        })
                    } else {
                        _0xecbcx1a = Ext.apply(_0xecbcx1a, {
                            add: _0xecbcx23,
                            remove: _0xecbcx15
                        })
                    };
                    _0xecbcx18['eventStoreDetacher'] = _0xecbcx19['on'](_0xecbcx1a)
                }
            }
            _0xecbcx18['dependencyStoreDetacher'] = _0xecbcxe['on']({
                add: _0xecbcx16,
                remove: _0xecbcxc,
                update: _0xecbcxf,
                refresh: _0xecbcx11,
                cacheresethint: _0xecbcx11,
                clear: _0xecbcx11,
                eventstorechange: _0xecbcxb,
                "\x65\x76\x65\x6E\x74\x2D\x64\x65\x70\x65\x6E\x64\x65\x6E\x63\x79\x2D\x63\x61\x63\x68\x65\x2D\x69\x6E\x76\x61\x6C\x69\x64\x61\x74\x65": _0xecbcx14,
                priority: 100,
                destroyable: true
            });
            _0xecbcx5(_0xecbcx18, _0xecbcxe, _0xecbcxe['getEventStore']())
        },
        destroy: function() {
            var _0xecbcxd = this;
            Ext['destroyMembers'](_0xecbcxd, 'dependencyStoreDetacher', 'eventStoreDetacher');
            _0xecbcxd['dependencyStore'] = null
        },
        get: function(_0xecbcx11, _0xecbcxe) {
            var _0xecbcxf = this;
            return _0xecbcxf['callParent']([_0xecbcx11])
        },
        getSuccessors: function(_0xecbcx11, _0xecbcxe) {
            var _0xecbcxf = this;
            return _0xecbcxf['get'](_0xecbcxf['self']['makeSuccessorsKey'](_0xecbcxf['key'](_0xecbcx11)), _0xecbcxe)
        },
        getPredecessors: function(_0xecbcx11, _0xecbcxe) {
            var _0xecbcxf = this;
            return _0xecbcxf['get'](_0xecbcxf['self']['makePredecessorsKey'](_0xecbcxf['key'](_0xecbcx11)), _0xecbcxe)
        },
        addSuccessor: function(_0xecbcxe, _0xecbcx11) {
            var _0xecbcxf = this;
            return arguments['length'] > 1 ? _0xecbcxf['add'](_0xecbcxf['self']['makeSuccessorsKey'](_0xecbcxf['key'](_0xecbcxe)), _0xecbcx11) : _0xecbcxf['add'](_0xecbcxf['self']['makeSuccessorsKey'](_0xecbcxf['key'](_0xecbcxe)))
        },
        addPredecessor: function(_0xecbcxe, _0xecbcx11) {
            var _0xecbcxf = this;
            return arguments['length'] > 1 ? _0xecbcxf['add'](_0xecbcxf['self']['makePredecessorsKey'](_0xecbcxf['key'](_0xecbcxe)), _0xecbcx11) : _0xecbcxf['add'](_0xecbcxf['self']['makePredecessorsKey'](_0xecbcxf['key'](_0xecbcxe)))
        },
        setSuccessors: function(_0xecbcx11, _0xecbcxf) {
            var _0xecbcxe = this;
            _0xecbcxe['set'](_0xecbcxe['self']['makeSuccessorsKey'](_0xecbcxe['key'](_0xecbcx11)), _0xecbcxf)
        },
        setPredecessors: function(_0xecbcx11, _0xecbcxf) {
            var _0xecbcxe = this;
            _0xecbcxe['set'](_0xecbcxe['self']['makePredecessorsKey'](_0xecbcxe['key'](_0xecbcx11)), _0xecbcxf)
        },
        removeSuccessor: function(_0xecbcxe, _0xecbcx11) {
            var _0xecbcxf = this;
            return _0xecbcxf['remove'](_0xecbcxf['self']['makeSuccessorsKey'](_0xecbcxf['key'](_0xecbcxe)), _0xecbcx11)
        },
        removePredecessor: function(_0xecbcxe, _0xecbcx11) {
            var _0xecbcxf = this;
            return _0xecbcxf['remove'](_0xecbcxf['self']['makePredecessorsKey'](_0xecbcxf['key'](_0xecbcxe)), _0xecbcx11)
        },
        moveSuccessors: function(_0xecbcxe, _0xecbcxf, _0xecbcxd) {
            var _0xecbcx11 = this;
            return arguments['length'] >= 3 ? _0xecbcx11['move'](_0xecbcx11['self']['makeSuccessorsKey'](_0xecbcx11['key'](_0xecbcxe)), _0xecbcx11['self']['makeSuccessorsKey'](_0xecbcx11['key'](_0xecbcxf)), _0xecbcxd) : _0xecbcx11['move'](_0xecbcx11['self']['makeSuccessorsKey'](_0xecbcx11['key'](_0xecbcxe)), _0xecbcx11['self']['makeSuccessorsKey'](_0xecbcx11['key'](_0xecbcxf)))
        },
        movePredecessors: function(_0xecbcxe, _0xecbcxf, _0xecbcxd) {
            var _0xecbcx11 = this;
            return arguments['length'] >= 3 ? _0xecbcx11['move'](_0xecbcx11['self']['makePredecessorsKey'](_0xecbcx11['key'](_0xecbcxe)), _0xecbcx11['self']['makePredecessorsKey'](_0xecbcx11['key'](_0xecbcxf)), _0xecbcxd) : _0xecbcx11['move'](_0xecbcx11['self']['makePredecessorsKey'](_0xecbcx11['key'](_0xecbcxe)), _0xecbcx11['self']['makePredecessorsKey'](_0xecbcx11['key'](_0xecbcxf)))
        },
        clearSuccessors: function(_0xecbcx11) {
            var _0xecbcxe = this;
            return _0xecbcxe['clear'](_0xecbcxe['self']['makeSuccessorsKey'](_0xecbcxe['key'](_0xecbcx11)))
        },
        clearPredecessors: function(_0xecbcx11) {
            var _0xecbcxe = this;
            return _0xecbcxe['clear'](_0xecbcxe['self']['makePredecessorsKey'](_0xecbcxe['key'](_0xecbcx11)))
        },
        inheritableStatics: {
            splitKey: function(_0xecbcx11) {
                _0xecbcx11 = _0xecbcx11['split']('@#!#@');
                return {
                    id: _0xecbcx11[0],
                    type: _0xecbcx11['length'] && _0xecbcx11[1] || false
                }
            },
            makeSuccessorsKey: function(_0xecbcx11) {
                return _0xecbcx11 + '@#!#@succ'
            },
            makePredecessorsKey: function(_0xecbcx11) {
                return _0xecbcx11 + '@#!#@pred'
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.model.DependencyBase', {
    extend: 'Ext.ux.Scheduler.model.Customizable',
    requires: ['Ext.ux.Scheduler.model.Range'],
    inheritableStatics: {
        Type: {
            StartToStart: 0,
            StartToEnd: 1,
            EndToStart: 2,
            EndToEnd: 3
        }
    },
    idProperty: 'Id',
    customizableFields: [{
        name: 'From'
    }, {
        name: 'To'
    }, {
        name: 'Type',
        type: 'int',
        defaultValue: 2
    }, {
        name: 'Cls',
        defaultValue: ''
    }, {
        name: 'Bidirectional',
        type: 'boolean'
    }, {
        name: 'FromSide',
        type: 'string'
    }, {
        name: 'ToSide',
        type: 'string'
    }, {
        name: 'Highlighted',
        type: 'string',
        persist: false,
        defaultValue: ''
    }],
    fromField: 'From',
    toField: 'To',
    typeField: 'Type',
    clsField: 'Cls',
    bidirectionalField: 'Bidirectional',
    highlightedField: 'Highlighted',
    constructor: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['callParent'](arguments);
        if (_0xecbcx1) {
            if (_0xecbcx1[_0xecbcx2['fromField']] && _0xecbcx1[_0xecbcx2['fromField']] instanceof Ext.ux.Scheduler['model']['Range']) {
                _0xecbcx2['setSourceEvent'](_0xecbcx1[_0xecbcx2['fromField']]);
                delete _0xecbcx1['fromField']
            };
            if (_0xecbcx1[_0xecbcx2['toField']] && _0xecbcx1[_0xecbcx2['toField']] instanceof Ext.ux.Scheduler['model']['Range']) {
                _0xecbcx2['setTargetEvent'](_0xecbcx1[_0xecbcx2['toField']]);
                delete _0xecbcx1['toField']
            }
        }
    },
    getEventStore: function() {
        return this['store']['getEventStore']()
    },
    getSourceEvent: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        return (_0xecbcx1 || _0xecbcx2['getEventStore']())['getModelById'](_0xecbcx2['getSourceId']())
    },
    setSourceEvent: function(_0xecbcx1) {
        this['setSourceId'](_0xecbcx1['getId']())
    },
    getTargetEvent: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        return (_0xecbcx1 || _0xecbcx2['getEventStore']())['getModelById'](_0xecbcx2['getTargetId']())
    },
    setTargetEvent: function(_0xecbcx1) {
        this['setTargetId'](_0xecbcx1['getId']())
    },
    getSourceId: function() {
        return this['getFrom']()
    },
    setSourceId: function(_0xecbcx1) {
        return this['setFrom'](_0xecbcx1)
    },
    getTargetId: function() {
        return this['getTo']()
    },
    setTargetId: function(_0xecbcx1) {
        return this['setTo'](_0xecbcx1)
    },
    isPersistable: function() {
        var _0xecbcx1 = this,
            _0xecbcx2 = _0xecbcx1['getSourceEvent'](),
            _0xecbcx5 = _0xecbcx1['getTargetEvent']();
        return _0xecbcx2 && !_0xecbcx2['phantom'] && _0xecbcx5 && !_0xecbcx5['phantom']
    },
    getDateRange: function() {
        var _0xecbcx1 = this['getSourceEvent']();
        var _0xecbcx3 = this['getTargetEvent']();
        if (_0xecbcx1 && _0xecbcx3 && _0xecbcx1['isScheduled']() && _0xecbcx3['isScheduled']()) {
            var _0xecbcx5 = this['self']['Type'];
            var _0xecbcx2, _0xecbcx4;
            switch (this['getType']()) {
                case _0xecbcx5['StartToStart']:
                    _0xecbcx2 = _0xecbcx1['getStartDate']();
                    _0xecbcx4 = _0xecbcx3['getStartDate']();
                    break;
                case _0xecbcx5['StartToEnd']:
                    _0xecbcx2 = _0xecbcx1['getStartDate']();
                    _0xecbcx4 = _0xecbcx3['getEndDate']();
                    break;
                case _0xecbcx5['EndToEnd']:
                    _0xecbcx2 = _0xecbcx1['getEndDate']();
                    _0xecbcx4 = _0xecbcx3['getEndDate']();
                    break;
                case _0xecbcx5['EndToStart']:
                    _0xecbcx2 = _0xecbcx1['getEndDate']();
                    _0xecbcx4 = _0xecbcx3['getStartDate']();
                    break
            };
            return {
                start: Ext.ux.Scheduler['util']['Date']['min'](_0xecbcx2, _0xecbcx4),
                end: Ext.ux.Scheduler['util']['Date']['max'](_0xecbcx2, _0xecbcx4)
            }
        };
        return null
    },
    highlight: function(_0xecbcx1) {
        var _0xecbcx5 = this,
            _0xecbcx2 = _0xecbcx5['getHighlighted']()['split'](' ');
        !Ext['Array']['contains'](_0xecbcx2, _0xecbcx1) && _0xecbcx5['setHighlighted'](_0xecbcx2['concat'](_0xecbcx1).join(' '))
    },
    unhighlight: function(_0xecbcx1) {
        var _0xecbcx5 = this,
            _0xecbcx2 = _0xecbcx5['getHighlighted']()['split'](' ');
        Ext['Array']['contains'](_0xecbcx2, _0xecbcx1) && _0xecbcx5['setHighlighted'](Ext['Array']['remove'](_0xecbcx2, _0xecbcx1).join(' '))
    },
    isHighlightedWith: function(_0xecbcx1) {
        var _0xecbcx5 = this,
            _0xecbcx2 = _0xecbcx5['getHighlighted']()['split'](' ');
        return Ext['Array']['contains'](_0xecbcx2, _0xecbcx1)
    }
});
Ext.define('Ext.ux.Scheduler.model.Dependency', {
    extend: 'Ext.ux.Scheduler.model.DependencyBase',
    isValid: function(_0xecbcx2) {
        var _0xecbcx4 = this,
            _0xecbcx3 = _0xecbcx4['callParent'](arguments),
            _0xecbcx6 = _0xecbcx4['getSourceId'](),
            _0xecbcx1 = _0xecbcx4['getTargetId'](),
            _0xecbcx5 = _0xecbcx4['getType']();
        return Ext['isNumber'](_0xecbcx5) && !Ext['isEmpty'](_0xecbcx6) && !Ext['isEmpty'](_0xecbcx1) && _0xecbcx6 != _0xecbcx1
    },
    getTypeFromSides: function(_0xecbcx3, _0xecbcx2, _0xecbcx4) {
        var _0xecbcx5 = this['self']['Type'],
            _0xecbcx1 = _0xecbcx4 ? 'right' : 'left',
            _0xecbcx6 = _0xecbcx4 ? 'left' : 'right';
        if (_0xecbcx3 === _0xecbcx1) {
            return (_0xecbcx2 === _0xecbcx1) ? _0xecbcx5['StartToStart'] : _0xecbcx5['StartToEnd']
        };
        return (_0xecbcx2 === _0xecbcx6) ? _0xecbcx5['EndToEnd'] : _0xecbcx5['EndToStart']
    }
});
Ext.define('Ext.ux.Scheduler.data.DependencyStore', {
    extend: 'Ext.data.Store',
    requires: ['Ext.ux.Scheduler.patches.CollectionKey', 'Ext.ux.Scheduler.data.util.EventDependencyCache'],
    mixins: ['Ext.ux.Scheduler.data.mixin.UniversalModelGetter', 'Ext.ux.Scheduler.data.mixin.CacheHintHelper', 'Robo.data.Store'],
    config: {
        extraKeys: {
            bySourceTargetId: {
                keyFn: function(_0xecbcx1) {
                    return Ext.ux.Scheduler['data']['DependencyStore']['makeDependencySourceTargetCompositeKey'](_0xecbcx1['getSourceId'](), _0xecbcx1['getTargetId']())
                }
            }
        }
    },
    model: 'Ext.ux.Scheduler.model.Dependency',
    alias: 'store.sch_dependencystore',
    storeId: 'dependencies',
    eventStoreDetacher: null,
    eventStore: null,
    constructor: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['callParent']([_0xecbcx1]);
        _0xecbcx2['eventDependencyCache'] = _0xecbcx2['eventDependencyCache'] || _0xecbcx2['createEventDependencyCache']()
    },
    destroy: function() {
        var _0xecbcx1 = this;
        Ext['destroyMembers'](_0xecbcx1, 'eventDependencyCache', 'eventStoreDetacher');
        _0xecbcx1['callParent']()
    },
    createEventDependencyCache: function() {
        return new Ext.ux.Scheduler['data']['util'].EventDependencyCache(this)
    },
    getEventStore: function() {
        return this['eventStore']
    },
    setEventStore: function(_0xecbcx1) {
        var _0xecbcx2 = this,
            _0xecbcx5 = _0xecbcx2['eventStore'];
        _0xecbcx2['eventStore'] = _0xecbcx1 && Ext['StoreMgr']['lookup'](_0xecbcx1) || null;
        _0xecbcx2['attachToEventStore'](_0xecbcx2['eventStore']);
        if ((_0xecbcx5 || _0xecbcx1) && _0xecbcx5 !== _0xecbcx1) {
            _0xecbcx2['fireEvent']('eventstorechange', _0xecbcx2, _0xecbcx1, _0xecbcx5)
        }
    },
    attachToEventStore: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        Ext['destroy'](_0xecbcx2['eventStoreDetacher']);
        if (_0xecbcx1 && _0xecbcx1['isTreeStore']) {
            _0xecbcx2['eventStoreDetacher'] = _0xecbcx1['on']({
                noderemove: _0xecbcx2['onEventNodeRemove'],
                scope: _0xecbcx2,
                destroyable: true,
                priority: 200
            })
        } else {
            if (_0xecbcx1) {
                _0xecbcx2['eventStoreDetacher'] = _0xecbcx1['on']({
                    remove: _0xecbcx2['onEventRemove'],
                    scope: _0xecbcx2,
                    destroyable: true,
                    priority: 200
                })
            }
        }
    },
    onEventRemove: function(_0xecbcx3, _0xecbcx5, _0xecbcx2, _0xecbcx1) {
        !_0xecbcx1 && this['removeEventDependencies'](_0xecbcx5, false)
    },
    onEventNodeRemove: function(_0xecbcx2, _0xecbcx5, _0xecbcx1) {
        !_0xecbcx1 && this['removeEventDependencies'](_0xecbcx5, false)
    },
    reduceEventDependencies: function(_0xecbcx3, _0xecbcx4, _0xecbcx1, _0xecbcx6, _0xecbcx2) {
        var _0xecbcx5 = this;
        _0xecbcx2 = _0xecbcx2 || function(_0xecbcx7) {
            var _0xecbcx9 = (_0xecbcx7 instanceof Ext['data']['Model']) && _0xecbcx7['getId']() || _0xecbcx7;
            return _0xecbcx5['eventDependencyCache']['get'](_0xecbcx7, function() {
                return Ext['Array']['filter'](_0xecbcx5['getRange'](), function(_0xecbcxa) {
                    return _0xecbcxa['getTargetId']() == _0xecbcx9 || _0xecbcxa['getSourceId']() == _0xecbcx9
                })
            })
        };
        _0xecbcx3 = Ext['isArray'](_0xecbcx3) ? _0xecbcx3 : [_0xecbcx3];
        _0xecbcx6 = _0xecbcx6 === undefined ? true : false;
        Ext['Array']['reduce'](_0xecbcx3, function(_0xecbcx9, _0xecbcx7) {
            if (_0xecbcx7['isNode'] && !_0xecbcx6) {
                _0xecbcx7['cascadeBy'](function(_0xecbcxa) {
                    _0xecbcx9 = Ext['Array']['reduce'](_0xecbcx2(_0xecbcxa), _0xecbcx4, _0xecbcx9)
                })
            } else {
                _0xecbcx9 = Ext['Array']['reduce'](_0xecbcx2(_0xecbcx7), _0xecbcx4, _0xecbcx9)
            }
        }, _0xecbcx1);
        return _0xecbcx1
    },
    reduceEventIncomingDependencies: function(_0xecbcx5, _0xecbcx3, _0xecbcx1, _0xecbcx4) {
        var _0xecbcx2 = this;
        return _0xecbcx2['reduceEventDependencies'](_0xecbcx5, _0xecbcx3, _0xecbcx1, _0xecbcx4, function(_0xecbcx9) {
            var _0xecbcx6 = (_0xecbcx9 instanceof Ext['data']['Model']) && _0xecbcx9['getId']() || _0xecbcx9;
            return _0xecbcx2['eventDependencyCache']['getPredecessors'](_0xecbcx9, function() {
                return Ext['Array']['filter'](_0xecbcx2['getRange'](), function(_0xecbcx7) {
                    return _0xecbcx7['getTargetId']() == _0xecbcx6
                })
            })
        })
    },
    reduceEventOutgoingDependencies: function(_0xecbcx5, _0xecbcx3, _0xecbcx1, _0xecbcx4) {
        var _0xecbcx2 = this;
        return _0xecbcx2['reduceEventDependencies'](_0xecbcx5, _0xecbcx3, _0xecbcx1, _0xecbcx4, function(_0xecbcx9) {
            var _0xecbcx6 = (_0xecbcx9 instanceof Ext['data']['Model']) && _0xecbcx9['getId']() || _0xecbcx9;
            return _0xecbcx2['eventDependencyCache']['getSuccessors'](_0xecbcx9, function() {
                return Ext['Array']['filter'](_0xecbcx2['getRange'](), function(_0xecbcx7) {
                    return _0xecbcx7['getSourceId']() == _0xecbcx6
                })
            })
        })
    },
    mapEventDependencies: function(_0xecbcx5, _0xecbcx2, _0xecbcx3, _0xecbcx4, _0xecbcx1) {
        return this['reduceEventDependencies'](_0xecbcx5, function(_0xecbcx6, _0xecbcx9) {
            _0xecbcx3(_0xecbcx9) && _0xecbcx6['push'](_0xecbcx9);
            return _0xecbcx6
        }, [], _0xecbcx4, _0xecbcx1)
    },
    mapEventIncomingDependencies: function(_0xecbcx2, _0xecbcx1, _0xecbcx5, _0xecbcx3) {
        return this['reduceEventIncomingDependencies'](_0xecbcx2, function(_0xecbcx4, _0xecbcx6) {
            _0xecbcx5(_0xecbcx6) && _0xecbcx4['push'](_0xecbcx6);
            return _0xecbcx4
        }, [], _0xecbcx3)
    },
    mapEventOutgoingDependencies: function(_0xecbcx2, _0xecbcx1, _0xecbcx5, _0xecbcx3) {
        return this['reduceEventOutgoingDependencies'](_0xecbcx2, function(_0xecbcx4, _0xecbcx6) {
            _0xecbcx5(_0xecbcx6) && _0xecbcx4['push'](_0xecbcx6);
            return _0xecbcx4
        }, [], _0xecbcx3)
    },
    getEventDependencies: function(_0xecbcx1, _0xecbcx2) {
        return this['mapEventDependencies'](_0xecbcx1, Ext['identityFn'], Ext['returnTrue'], _0xecbcx2)
    },
    getEventIncomingDependencies: function(_0xecbcx1, _0xecbcx2) {
        return this['mapEventIncomingDependencies'](_0xecbcx1, Ext['identityFn'], Ext['returnTrue'], _0xecbcx2)
    },
    getEventOutgoingDependencies: function(_0xecbcx1, _0xecbcx2) {
        return this['mapEventOutgoingDependencies'](_0xecbcx1, Ext['identityFn'], Ext['returnTrue'], _0xecbcx2)
    },
    getEventPredecessors: function(_0xecbcx5, _0xecbcx3) {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getEventStore']();
        Ext['Assert'] && Ext['Assert']['truthy'](_0xecbcx1, 'Can\'t get event predecessors, no event store configured ');
        return _0xecbcx2['reduceEventDependencies'](_0xecbcx5, function(_0xecbcx4, _0xecbcx9) {
            var _0xecbcx6 = _0xecbcx9['getFrom'](),
                _0xecbcx7 = _0xecbcx6 && _0xecbcx1['getModelById'](_0xecbcx6);
            if (_0xecbcx7) {
                _0xecbcx4['push'](_0xecbcx7)
            };
            return _0xecbcx4
        }, [], _0xecbcx3, function(_0xecbcx4) {
            return _0xecbcx2['eventDependencyCache']['getPredecessors'](_0xecbcx4)
        })
    },
    getEventSuccessors: function(_0xecbcx5, _0xecbcx3) {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getEventStore']();
        Ext['Assert'] && Ext['Assert']['truthy'](_0xecbcx1, 'Can\'t get event successors, no event store configured');
        return _0xecbcx2['reduceEventDependencies'](_0xecbcx5, function(_0xecbcx4, _0xecbcx9) {
            var _0xecbcx7 = _0xecbcx9['getTo'](),
                _0xecbcx6 = _0xecbcx7 && _0xecbcx1['getModelById'](_0xecbcx7);
            if (_0xecbcx6) {
                _0xecbcx4['push'](_0xecbcx6)
            };
            return _0xecbcx4
        }, [], _0xecbcx3, function(_0xecbcx4) {
            return _0xecbcx2['eventDependencyCache']['getSuccessors'](_0xecbcx4)
        })
    },
    removeEventDependencies: function(_0xecbcx2, _0xecbcx3) {
        var _0xecbcx1 = this,
            _0xecbcx5;
        _0xecbcx5 = _0xecbcx1['getEventDependencies'](_0xecbcx2, _0xecbcx3);
        _0xecbcx5['length'] && _0xecbcx1['remove'](Ext['Array']['unique'](_0xecbcx5))
    },
    removeEventIncomingDependencies: function(_0xecbcx2, _0xecbcx3) {
        var _0xecbcx1 = this,
            _0xecbcx5;
        _0xecbcx5 = _0xecbcx1['getEventIncomingDependencies'](_0xecbcx2, _0xecbcx3);
        _0xecbcx5['length'] && _0xecbcx1['remove'](Ext['Array']['unique'](_0xecbcx5))
    },
    removeEventOutgoingDependencies: function(_0xecbcx2, _0xecbcx3) {
        var _0xecbcx1 = this,
            _0xecbcx5;
        _0xecbcx5 = _0xecbcx1['getEventOutgoingDependencies'](_0xecbcx2, _0xecbcx3);
        _0xecbcx5['length'] && _0xecbcx1['remove'](Ext['Array']['unique'](_0xecbcx5))
    },
    getDependencyForSourceAndTargetEvents: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx5 = this;
        _0xecbcx1 = _0xecbcx1 instanceof Ext['data']['Model'] && _0xecbcx1['getId']() || _0xecbcx1;
        _0xecbcx2 = _0xecbcx2 instanceof Ext['data']['Model'] && _0xecbcx2['getId']() || _0xecbcx2;
        return _0xecbcx5['bySourceTargetId']['get'](_0xecbcx5['self']['makeDependencySourceTargetCompositeKey'](_0xecbcx1, _0xecbcx2))
    },
    getEventsLinkingDependency: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = this;
        return _0xecbcx5['getDependencyForSourceAndTargetEvents'](_0xecbcx2, _0xecbcx1) || _0xecbcx5['getDependencyForSourceAndTargetEvents'](_0xecbcx1, _0xecbcx2)
    },
    isValidDependency: function(_0xecbcx5) {
        var _0xecbcx2 = _0xecbcx5['getSourceId']();
        var _0xecbcx1 = _0xecbcx5['getTargetId']();
        return _0xecbcx2 != null && _0xecbcx1 != null && _0xecbcx2 !== _0xecbcx1
    },
    getHighlightedDependencies: function(_0xecbcx1) {
        return Ext['Array']['reduce'](this['getRange'](), function(_0xecbcx2, _0xecbcx5) {
            if (_0xecbcx5['isHighlightedWith'](_0xecbcx1)) {
                _0xecbcx2['push'](_0xecbcx5)
            };
            return _0xecbcx2
        }, [])
    },
    inheritableStatics: {
        makeDependencySourceTargetCompositeKey: function() {
            var _0xecbcx1 = [];
            return function(_0xecbcx5, _0xecbcx2) {
                _0xecbcx1['length'] = 0;
                _0xecbcx1['push']('source(', _0xecbcx5, ')-target(', _0xecbcx2, ')');
                return _0xecbcx1.join('')
            }
        }()
    }
});
Ext.define('Ext.ux.Scheduler.data.util.IdConsistencyManager', {
    config: {
        eventStore: null,
        resourceStore: null,
        assignmentStore: null,
        dependencyStore: null
    },
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    constructor: function(_0xecbcx1) {
        this['initConfig'](_0xecbcx1)
    },
    updateEventStore: function(_0xecbcx1, _0xecbcx5) {
        var _0xecbcx2 = this;
        Ext['destroyMembers'](_0xecbcx2, 'eventStoreDetacher');
        if (_0xecbcx1) {
            _0xecbcx2['eventStoreDetacher'] = _0xecbcx1['on']({
                idchanged: _0xecbcx2['onEventIdChanged'],
                scope: _0xecbcx2,
                destroyable: true,
                priority: 200
            })
        }
    },
    updateResourceStore: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx5 = this;
        Ext['destroyMembers'](_0xecbcx5, 'resourceStoreDetacher');
        if (_0xecbcx1) {
            _0xecbcx5['resourceStoreDetacher'] = _0xecbcx1['on']({
                idchanged: _0xecbcx5['onResourceIdChanged'],
                scope: _0xecbcx5,
                destroyable: true,
                priority: 200
            })
        }
    },
    onEventIdChanged: function(_0xecbcx6, _0xecbcx1, _0xecbcx3, _0xecbcx4) {
        var _0xecbcxa = this,
            _0xecbcx9 = _0xecbcxa['getAssignmentStore'](),
            _0xecbcx5 = _0xecbcxa['getDependencyStore'](),
            _0xecbcx2, _0xecbcx7;
        if (_0xecbcx9) {
            _0xecbcx2 = _0xecbcxa['getUpdateAssignmentEventIdFieldFn'](_0xecbcx9, _0xecbcx3, _0xecbcx4)
        };
        if (_0xecbcx5) {
            _0xecbcx7 = _0xecbcxa['getUpdateDependencySourceTargedIdFieldFn'](_0xecbcx5, _0xecbcx3, _0xecbcx4)
        };
        if (_0xecbcx2 || _0xecbcx7) {
            _0xecbcx6['on']('update', function() {
                _0xecbcx2 && _0xecbcx2();
                _0xecbcx7 && _0xecbcx7()
            }, null, {
                single: true,
                priority: 200
            })
        }
    },
    onResourceIdChanged: function(_0xecbcxa, _0xecbcx4, _0xecbcx2, _0xecbcx3) {
        var _0xecbcx7 = this,
            _0xecbcx6 = _0xecbcx7['getEventStore'](),
            _0xecbcx9 = _0xecbcx7['getAssignmentStore'](),
            _0xecbcx5, _0xecbcx1;
        if (_0xecbcx6 && !_0xecbcx9) {
            _0xecbcx5 = _0xecbcx7['getUpdateEventResourceIdFieldFn'](_0xecbcx6, _0xecbcx2, _0xecbcx3)
        };
        if (_0xecbcx9) {
            _0xecbcx1 = _0xecbcx7['getUpdateAssignmentResourceIdFieldFn'](_0xecbcx9, _0xecbcx2, _0xecbcx3)
        };
        if (_0xecbcx5 || _0xecbcx9) {
            _0xecbcxa['on']('update', function() {
                _0xecbcx5 && _0xecbcx5();
                _0xecbcx1 && _0xecbcx1()
            }, null, {
                single: true,
                priority: 200
            })
        }
    },
    getUpdateEventResourceIdFieldFn: function(_0xecbcx5, _0xecbcx3, _0xecbcx1) {
        var _0xecbcx2 = _0xecbcx5['getRange']();
        return function() {
            Ext['Array']['each'](_0xecbcx2, function(_0xecbcx4) {
                _0xecbcx4['getResourceId']() == _0xecbcx3 && _0xecbcx4['setResourceId'](_0xecbcx1)
            })
        }
    },
    getUpdateAssignmentEventIdFieldFn: function(_0xecbcx5, _0xecbcx3, _0xecbcx2) {
        var _0xecbcx1 = _0xecbcx5['getAssignmentsForEvent'](_0xecbcx3);
        return function() {
            Ext['Array']['each'](_0xecbcx1, function(_0xecbcx4) {
                _0xecbcx4['getEventId']() == _0xecbcx3 && _0xecbcx4['setEventId'](_0xecbcx2)
            })
        }
    },
    getUpdateAssignmentResourceIdFieldFn: function(_0xecbcx5, _0xecbcx3, _0xecbcx2) {
        var _0xecbcx1 = _0xecbcx5['getAssignmentsForResource'](_0xecbcx3);
        return function() {
            Ext['Array']['each'](_0xecbcx1, function(_0xecbcx4) {
                _0xecbcx4['getResourceId']() == _0xecbcx3 && _0xecbcx4['setResourceId'](_0xecbcx2)
            })
        }
    },
    getUpdateDependencySourceTargedIdFieldFn: function(_0xecbcx2, _0xecbcx3, _0xecbcx1) {
        var _0xecbcx5 = _0xecbcx2['getEventDependencies'](_0xecbcx3);
        return function() {
            Ext['Array']['each'](_0xecbcx5, function(_0xecbcx4) {
                _0xecbcx4['getSourceId']() == _0xecbcx3 && _0xecbcx4['setSourceId'](_0xecbcx1);
                _0xecbcx4['getTargetId']() == _0xecbcx3 && _0xecbcx4['setTargetId'](_0xecbcx1)
            })
        }
    }
});
Ext.define('Ext.ux.Scheduler.data.util.ModelPersistencyManager', {
    config: {
        eventStore: null,
        resourceStore: null,
        assignmentStore: null,
        dependencyStore: null
    },
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    assignmentStoreDetacher: null,
    dependencyStoreDetacher: null,
    constructor: function(_0xecbcx1) {
        this['initConfig'](_0xecbcx1)
    },
    updateEventStore: function(_0xecbcx1, _0xecbcx5) {
        var _0xecbcx2 = this;
        Ext['destroyMembers'](_0xecbcx2, 'eventStoreDetacher');
        if (_0xecbcx1 && _0xecbcx1['autoSync']) {
            _0xecbcx2['eventStoreDetacher'] = _0xecbcx1['on']({
                beforesync: _0xecbcx2['onEventStoreBeforeSync'],
                scope: _0xecbcx2,
                destroyable: true,
                priority: 100
            })
        }
    },
    updateResourceStore: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx5 = this;
        Ext['destroyMembers'](_0xecbcx5, 'resourceStoreDetacher');
        if (_0xecbcx1 && _0xecbcx1['autoSync']) {
            _0xecbcx5['resourceStoreDetacher'] = _0xecbcx1['on']({
                beforesync: _0xecbcx5['onResourceStoreBeforeSync'],
                scope: _0xecbcx5,
                destroyable: true,
                priority: 100
            })
        }
    },
    updateAssignmentStore: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx5 = this;
        Ext['destroyMembers'](_0xecbcx5, 'assignmentStoreDetacher');
        if (_0xecbcx1 && _0xecbcx1['autoSync']) {
            _0xecbcx5['assignmentStoreDetacher'] = _0xecbcx1['on']({
                beforesync: _0xecbcx5['onAssignmentStoreBeforeSync'],
                scope: _0xecbcx5,
                destroyable: true,
                priority: 100
            })
        }
    },
    updateDependencyStore: function(_0xecbcx5, _0xecbcx1) {
        var _0xecbcx2 = this;
        Ext['destroyMembers'](_0xecbcx2, 'dependencyStoreDetacher');
        if (_0xecbcx5 && _0xecbcx5['autoSync']) {
            _0xecbcx2['dependencyStoreDetacher'] = _0xecbcx5['on']({
                beforesync: _0xecbcx2['onDependencyStoreBeforeSync'],
                scope: _0xecbcx2,
                destroyable: true,
                priority: 100
            })
        }
    },
    onEventStoreBeforeSync: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['removeNonPersistableRecordsToCreate'](_0xecbcx1);
        return _0xecbcx2['shallContinueSync'](_0xecbcx1)
    },
    onResourceStoreBeforeSync: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['removeNonPersistableRecordsToCreate'](_0xecbcx1);
        return _0xecbcx2['shallContinueSync'](_0xecbcx1)
    },
    onAssignmentStoreBeforeSync: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['removeNonPersistableRecordsToCreate'](_0xecbcx1);
        return _0xecbcx2['shallContinueSync'](_0xecbcx1)
    },
    onDependencyStoreBeforeSync: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['removeNonPersistableRecordsToCreate'](_0xecbcx1);
        return _0xecbcx2['shallContinueSync'](_0xecbcx1)
    },
    removeNonPersistableRecordsToCreate: function(_0xecbcx2) {
        var _0xecbcx1 = _0xecbcx2['create'] || [],
            _0xecbcx3, _0xecbcx5;
        for (_0xecbcx5 = _0xecbcx1['length'] - 1; _0xecbcx5 >= 0; --_0xecbcx5) {
            _0xecbcx3 = _0xecbcx1[_0xecbcx5];
            if (!_0xecbcx3['isPersistable']()) {
                Ext['Array']['remove'](_0xecbcx1, _0xecbcx3)
            }
        };
        if (_0xecbcx1['length'] === 0) {
            delete _0xecbcx2['create']
        }
    },
    shallContinueSync: function(_0xecbcx1) {
        return Boolean((_0xecbcx1['create'] && _0xecbcx1['create']['length'] > 0) || (_0xecbcx1['update'] && _0xecbcx1['update']['length'] > 0) || (_0xecbcx1['destroy'] && _0xecbcx1['destroy']['length'] > 0))
    }
});
Ext.define('Ext.ux.Scheduler.data.util.ResourceEventsCache', {
    extend: 'Ext.ux.Scheduler.util.Cache',
    requires: ['Ext.data.Model'],
    eventStore: null,
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    constructor: function(_0xecbcx5) {
        var _0xecbcxa = this,
            _0xecbcx8 = _0xecbcx5['getResourceStore']();
        _0xecbcxa['callParent']();

        function _0xecbcx11(_0xecbcxf, _0xecbcxe) {
            Ext['Array']['each'](_0xecbcxe, function(_0xecbcxc) {
                _0xecbcxa['add'](_0xecbcxc['getResourceId'](), _0xecbcxc)
            })
        }

        function _0xecbcx4(_0xecbcxf, _0xecbcxe) {
            Ext['Array']['each'](_0xecbcxe, function(_0xecbcxc) {
                _0xecbcxa['remove'](_0xecbcxc['getResourceId'](), _0xecbcxc)
            })
        }

        function _0xecbcx3(_0xecbcxc, _0xecbcx17, _0xecbcxf, _0xecbcx10) {
            var _0xecbcx15 = _0xecbcx17['resourceIdField'],
                _0xecbcxb = _0xecbcx17['previous'] && _0xecbcx15 in _0xecbcx17['previous'],
                _0xecbcxe = _0xecbcxb && _0xecbcx17['previous'][_0xecbcx15];
            if (_0xecbcxb) {
                _0xecbcxa['move'](_0xecbcxe, _0xecbcx17['getResourceId'](), _0xecbcx17)
            }
        }

        function _0xecbcx9() {
            _0xecbcxa['clear']()
        }

        function _0xecbcxd(_0xecbcxf, _0xecbcxe, _0xecbcxc) {
            _0xecbcxa['clear']();
            _0xecbcx1(_0xecbcxe)
        }

        function _0xecbcx7(_0xecbcxf, _0xecbcxc, _0xecbcxb, _0xecbcxe) {
            _0xecbcxa['move'](_0xecbcxb, _0xecbcxe)
        }

        function _0xecbcx6(_0xecbcxe, _0xecbcxf) {
            Ext['Array']['each'](_0xecbcxf, function(_0xecbcxc) {
                _0xecbcxa['clear'](_0xecbcxc)
            })
        }

        function _0xecbcx2() {
            _0xecbcxa['clear']()
        }

        function _0xecbcx1(_0xecbcxe) {
            Ext['destroy'](_0xecbcxa['resourceStoreDetacher']);
            _0xecbcxa['resourceStoreDetacher'] = _0xecbcxe && _0xecbcxe['on']({
                idchanged: _0xecbcx7,
                remove: _0xecbcx6,
                clear: _0xecbcx2,
                cacheresethint: _0xecbcx2,
                rootchange: _0xecbcx2,
                priority: 100,
                destroyable: true
            })
        }
        _0xecbcxa['eventStoreDetacher'] = _0xecbcx5['on']({
            add: _0xecbcx11,
            remove: _0xecbcx4,
            update: _0xecbcx3,
            clear: _0xecbcx9,
            cacheresethint: _0xecbcx9,
            rootchange: _0xecbcx9,
            resourcestorechange: _0xecbcxd,
            priority: 100,
            destroyable: true
        });
        _0xecbcxa['eventStoreFiltersDetacher'] = _0xecbcx5['getFilters']()['on']('endupdate', _0xecbcx9, this, {
            priority: 1002,
            destroyable: true
        });
        _0xecbcx1(_0xecbcx8);
        _0xecbcxa['eventStore'] = _0xecbcx5
    },
    destroy: function() {
        var _0xecbcx1 = this;
        Ext['destroyMembers'](_0xecbcx1, 'eventStoreDetacher', 'eventStoreFiltersDetacher', 'resourceStoreDetacher');
        _0xecbcx1['eventStore'] = null
    },
    get: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx5 = this;
        _0xecbcx1 = _0xecbcx5['key'](_0xecbcx1);
        _0xecbcx2 = _0xecbcx2 || function() {
            return Ext['Array']['filter'](_0xecbcx5['eventStore']['getRange'](), function(_0xecbcx3) {
                return _0xecbcx3['getResourceId']() == _0xecbcx1
            })
        };
        return _0xecbcx5['callParent']([_0xecbcx1, _0xecbcx2])
    }
});
Ext.define('Ext.ux.Scheduler.data.mixin.EventStore', {
    extend: 'Ext.Mixin',
    requires: ['Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.data.util.IdConsistencyManager', 'Ext.ux.Scheduler.data.util.ModelPersistencyManager', 'Ext.ux.Scheduler.data.util.ResourceEventsCache'],
    isEventStore: true,
    resourceStore: null,
    resourceStoreDetacher: null,
    assignmentStore: null,
    resourceEventsCache: null,
    idConsistencyManager: null,
    modelPersistencyManager: null,
    mixinConfig: {
        after: {
            constructor: 'constructor',
            destroy: 'destroy'
        }
    },
    constructor: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['resourceEventsCache'] = _0xecbcx1['createResourceEventsCache']();
        _0xecbcx1['idConsistencyManager'] = _0xecbcx1['createIdConsistencyManager']();
        _0xecbcx1['modelPersistencyManager'] = _0xecbcx1['createModelPersistencyManager']()
    },
    destroy: function() {
        var _0xecbcx1 = this;
        Ext['destroyMembers'](_0xecbcx1, 'resourceEventsCache', 'idConsistencyManager', 'modelPersistencyManager')
    },
    createResourceEventsCache: function() {
        return new Ext.ux.Scheduler['data']['util'].ResourceEventsCache(this)
    },
    createIdConsistencyManager: function() {
        var _0xecbcx1 = this;
        return new Ext.ux.Scheduler['data']['util'].IdConsistencyManager({
            eventStore: _0xecbcx1,
            resourceStore: _0xecbcx1['getResourceStore'](),
            assignmentStore: _0xecbcx1['getAssignmentStore'](),
            dependencyStore: _0xecbcx1['getDependencyStore']()
        })
    },
    createModelPersistencyManager: function() {
        var _0xecbcx1 = this;
        return new Ext.ux.Scheduler['data']['util'].ModelPersistencyManager({
            eventStore: _0xecbcx1,
            resourceStore: _0xecbcx1['getResourceStore'](),
            assignmentStore: _0xecbcx1['getAssignmentStore'](),
            dependencyStore: _0xecbcx1['getDependencyStore']()
        })
    },
    getResourceStore: function() {
        return this['resourceStore']
    },
    setResourceStore: function(_0xecbcx2) {
        var _0xecbcx1 = this,
            _0xecbcx5 = _0xecbcx1['resourceStore'];
        if (_0xecbcx1['resourceStore']) {
            _0xecbcx1['resourceStore']['setEventStore'](null);
            _0xecbcx1['idConsistencyManager'] && _0xecbcx1['idConsistencyManager']['setResourceStore'](null);
            _0xecbcx1['modelPersistencyManager'] && _0xecbcx1['modelPersistencyManager']['setResourceStore'](null)
        };
        _0xecbcx1['resourceStore'] = _0xecbcx2 && Ext['StoreMgr']['lookup'](_0xecbcx2) || null;
        if (_0xecbcx1['resourceStore']) {
            _0xecbcx1['modelPersistencyManager'] && _0xecbcx1['modelPersistencyManager']['setResourceStore'](_0xecbcx1['resourceStore']);
            _0xecbcx1['idConsistencyManager'] && _0xecbcx1['idConsistencyManager']['setResourceStore'](_0xecbcx1['resourceStore']);
            _0xecbcx2['setEventStore'](_0xecbcx1)
        };
        if ((_0xecbcx5 || _0xecbcx2) && _0xecbcx5 !== _0xecbcx2) {
            _0xecbcx1['fireEvent']('resourcestorechange', _0xecbcx1, _0xecbcx2, _0xecbcx5)
        }
    },
    getAssignmentStore: function() {
        return this['assignmentStore']
    },
    setAssignmentStore: function(_0xecbcx2) {
        var _0xecbcx1 = this,
            _0xecbcx5 = _0xecbcx1['assignmentStore'];
        if (_0xecbcx1['assignmentStore']) {
            _0xecbcx1['assignmentStore']['setEventStore'](null);
            _0xecbcx1['idConsistencyManager'] && _0xecbcx1['idConsistencyManager']['setAssignmentStore'](null);
            _0xecbcx1['modelPersistencyManager'] && _0xecbcx1['modelPersistencyManager']['setAssignmentStore'](null)
        };
        _0xecbcx1['assignmentStore'] = _0xecbcx2 && Ext['StoreMgr']['lookup'](_0xecbcx2) || null;
        if (_0xecbcx1['assignmentStore']) {
            _0xecbcx1['modelPersistencyManager'] && _0xecbcx1['modelPersistencyManager']['setAssignmentStore'](_0xecbcx1['assignmentStore']);
            _0xecbcx1['idConsistencyManager'] && _0xecbcx1['idConsistencyManager']['setAssignmentStore'](_0xecbcx1['assignmentStore']);
            _0xecbcx1['assignmentStore']['setEventStore'](_0xecbcx1);
            Ext['destroy'](_0xecbcx1['resourceEventsCache'])
        } else {
            _0xecbcx1['resourceEventsCache'] = _0xecbcx1['createResourceEventsCache']()
        };
        if ((_0xecbcx5 || _0xecbcx2) && _0xecbcx5 !== _0xecbcx2) {
            _0xecbcx1['fireEvent']('assignmentstorechange', _0xecbcx1, _0xecbcx2, _0xecbcx5)
        }
    },
    getDependencyStore: function() {
        return this['dependencyStore']
    },
    setDependencyStore: function(_0xecbcx1) {
        var _0xecbcx2 = this,
            _0xecbcx5 = _0xecbcx2['DependencyStore'];
        if (_0xecbcx2['dependencyStore']) {
            _0xecbcx2['dependencyStore']['setEventStore'](null);
            _0xecbcx2['idConsistencyManager'] && _0xecbcx2['idConsistencyManager']['setDependencyStore'](null);
            _0xecbcx2['modelPersistencyManager'] && _0xecbcx2['modelPersistencyManager']['setDependencyStore'](null)
        };
        _0xecbcx2['dependencyStore'] = _0xecbcx1 && Ext['StoreMgr']['lookup'](_0xecbcx1) || null;
        if (_0xecbcx2['dependencyStore']) {
            _0xecbcx2['modelPersistencyManager'] && _0xecbcx2['modelPersistencyManager']['setDependencyStore'](_0xecbcx2['dependencyStore']);
            _0xecbcx2['idConsistencyManager'] && _0xecbcx2['idConsistencyManager']['setDependencyStore'](_0xecbcx2['dependencyStore']);
            _0xecbcx2['dependencyStore']['setEventStore'](_0xecbcx2)
        };
        if ((_0xecbcx5 || _0xecbcx1) && _0xecbcx5 !== _0xecbcx1) {
            _0xecbcx2['fireEvent']('dependencystorechange', _0xecbcx2, _0xecbcx1, _0xecbcx5)
        }
    },
    isDateRangeAvailable: function(_0xecbcx9, _0xecbcx1, _0xecbcx5, _0xecbcx4) {
        var _0xecbcx6 = Ext.ux.Scheduler['util']['Date'],
            _0xecbcx2 = this['getEventsForResource'](_0xecbcx4),
            _0xecbcx3 = true;
        Ext['each'](_0xecbcx2, function(_0xecbcx7) {
            _0xecbcx3 = _0xecbcx5 === _0xecbcx7 || !_0xecbcx6['intersectSpans'](_0xecbcx9, _0xecbcx1, _0xecbcx7['getStartDate'](), _0xecbcx7['getEndDate']());
            return _0xecbcx3
        });
        return _0xecbcx3
    },
    getEventsInTimeSpan: function(_0xecbcx6, _0xecbcx2, _0xecbcx1) {
        var _0xecbcx3 = new Ext['util'].MixedCollection();
        var _0xecbcx5 = [];
        if (_0xecbcx1 !== false) {
            var _0xecbcx4 = Ext.ux.Scheduler['util']['Date'];
            this['forEachScheduledEvent'](function(_0xecbcxa, _0xecbcx7, _0xecbcx9) {
                if (_0xecbcx4['intersectSpans'](_0xecbcx7, _0xecbcx9, _0xecbcx6, _0xecbcx2)) {
                    _0xecbcx5['push'](_0xecbcxa)
                }
            })
        } else {
            this['forEachScheduledEvent'](function(_0xecbcxa, _0xecbcx7, _0xecbcx9) {
                if (_0xecbcx7 - _0xecbcx6 >= 0 && _0xecbcx2 - _0xecbcx9 >= 0) {
                    _0xecbcx5['push'](_0xecbcxa)
                }
            })
        };
        _0xecbcx3['addAll'](_0xecbcx5);
        return _0xecbcx3
    },
    getEventsByStartDate: function(_0xecbcx5) {
        var _0xecbcx2 = Ext.ux.Scheduler['util']['Date'];
        var _0xecbcx1 = [];
        this['forEachScheduledEvent'](function(_0xecbcx6, _0xecbcx4, _0xecbcx3) {
            if (_0xecbcx2['compareWithPrecision'](_0xecbcx4, _0xecbcx5, _0xecbcx2.DAY) === 0) {
                _0xecbcx1['push'](_0xecbcx6)
            }
        });
        return _0xecbcx1
    },
    forEachScheduledEvent: function(_0xecbcx2, _0xecbcx1) {
        this['each'](function(_0xecbcx4) {
            var _0xecbcx3 = _0xecbcx4['getStartDate'](),
                _0xecbcx5 = _0xecbcx4['getEndDate']();
            if (_0xecbcx3 && _0xecbcx5) {
                return _0xecbcx2['call'](_0xecbcx1 || this, _0xecbcx4, _0xecbcx3, _0xecbcx5)
            }
        }, this)
    },
    getTotalTimeSpan: function() {
        var _0xecbcx1 = Ext.ux.Scheduler['util']['Date']['MAX_VALUE'],
            _0xecbcx2 = Ext.ux.Scheduler['util']['Date']['MIN_VALUE'],
            _0xecbcx5 = Ext.ux.Scheduler['util']['Date'];
        this['each'](function(_0xecbcx3) {
            if (_0xecbcx3['getStartDate']()) {
                _0xecbcx1 = _0xecbcx5['min'](_0xecbcx3['getStartDate'](), _0xecbcx1)
            };
            if (_0xecbcx3['getEndDate']()) {
                _0xecbcx2 = _0xecbcx5['max'](_0xecbcx3['getEndDate'](), _0xecbcx2)
            }
        });
        _0xecbcx1 = _0xecbcx1 < Ext.ux.Scheduler['util']['Date']['MAX_VALUE'] ? _0xecbcx1 : null;
        _0xecbcx2 = _0xecbcx2 > Ext.ux.Scheduler['util']['Date']['MIN_VALUE'] ? _0xecbcx2 : null;
        this['lastTotalTimeSpan'] = {
            start: _0xecbcx1 || null,
            end: _0xecbcx2 || _0xecbcx1 || null
        };
        return this['lastTotalTimeSpan']
    },
    filterEventsForResource: function(_0xecbcx3, _0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = _0xecbcx3['getEvents'](this);
        return Ext['Array']['filter'](_0xecbcx1, _0xecbcx5, _0xecbcx2 || this)
    },
    append: function(_0xecbcx1) {
        throw 'Must be implemented by consuming class'
    },
    getResourcesForEvent: function(_0xecbcx3) {
        var _0xecbcx5 = this,
            _0xecbcx4 = _0xecbcx5['getAssignmentStore'](),
            _0xecbcx2 = _0xecbcx5['getResourceStore'](),
            _0xecbcx1;
        if (_0xecbcx4) {
            _0xecbcx1 = _0xecbcx4['getResourcesForEvent'](_0xecbcx3)
        } else {
            if (_0xecbcx2) {
                _0xecbcx3 = _0xecbcx3 instanceof Ext.ux.Scheduler['model']['Event'] && _0xecbcx3 || _0xecbcx5['getModelById'](_0xecbcx3);
                _0xecbcx1 = _0xecbcx3 && _0xecbcx2['getModelById'](_0xecbcx3['getResourceId']());
                _0xecbcx1 = _0xecbcx1 && [_0xecbcx1] || []
            } else {
                _0xecbcx1 = []
            }
        };
        return _0xecbcx1
    },
    getEventsForResource: function(_0xecbcx5) {
        var _0xecbcx2 = this,
            _0xecbcx3 = _0xecbcx2['getAssignmentStore'](),
            _0xecbcx1;
        if (_0xecbcx3) {
            _0xecbcx1 = _0xecbcx3['getEventsForResource'](_0xecbcx5)
        } else {
            if (_0xecbcx2['resourceEventsCache']) {
                _0xecbcx1 = _0xecbcx2['resourceEventsCache']['get'](_0xecbcx5)
            } else {
                _0xecbcx1 = []
            }
        };
        return _0xecbcx1
    },
    getAssignmentsForEvent: function(_0xecbcx2) {
        var _0xecbcx1 = this,
            _0xecbcx5 = _0xecbcx1['getAssignmentStore']();
        return _0xecbcx5 && _0xecbcx5['getAssignmentsForEvent'](_0xecbcx2) || []
    },
    getAssignmentsForResource: function(_0xecbcx2) {
        var _0xecbcx1 = this,
            _0xecbcx5 = _0xecbcx1['getAssignmentStore']();
        return _0xecbcx5 && _0xecbcx5['getAssignmentsForResource'](_0xecbcx2) || []
    },
    assignEventToResource: function(_0xecbcx2, _0xecbcx5) {
        var _0xecbcx1 = this,
            _0xecbcx3 = _0xecbcx1['getAssignmentStore']();
        if (_0xecbcx3) {
            _0xecbcx3['assignEventToResource'](_0xecbcx2, _0xecbcx5)
        } else {
            _0xecbcx2 = _0xecbcx2 instanceof Ext.ux.Scheduler['model']['Event'] && _0xecbcx2 || _0xecbcx1['getModelById'](_0xecbcx2);
            _0xecbcx5 = _0xecbcx5 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0xecbcx5['getId']() : _0xecbcx5;
            _0xecbcx2 && _0xecbcx2['setResourceId'](_0xecbcx5)
        }
    },
    unassignEventFromResource: function(_0xecbcx2, _0xecbcx5) {
        var _0xecbcx1 = this,
            _0xecbcx3 = _0xecbcx1['getAssignmentStore']();
        if (_0xecbcx3) {
            _0xecbcx3['unassignEventFromResource'](_0xecbcx2, _0xecbcx5)
        } else {
            _0xecbcx2 = _0xecbcx2 instanceof Ext.ux.Scheduler['model']['Event'] && _0xecbcx2 || _0xecbcx1['getModelById'](_0xecbcx2);
            _0xecbcx5 = _0xecbcx5 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0xecbcx5['getId']() : _0xecbcx5;
            if (_0xecbcx2 && _0xecbcx2['getResourceId']() == _0xecbcx5) {
                _0xecbcx2['setResourceId'](null)
            }
        }
    },
    reassignEventFromResourceToResource: function(_0xecbcx6, _0xecbcx2, _0xecbcx5) {
        var _0xecbcx4 = this,
            _0xecbcx9 = _0xecbcx4['getAssignmentStore']();
        var _0xecbcx3 = _0xecbcx5 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0xecbcx5['getId']() : _0xecbcx5;
        var _0xecbcx1 = _0xecbcx2 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0xecbcx2['getId']() : _0xecbcx2;
        if (_0xecbcx9) {
            var _0xecbcx7 = _0xecbcx9['getAssignmentForEventAndResource'](_0xecbcx6, _0xecbcx2);
            if (_0xecbcx7) {
                _0xecbcx7['setResourceId'](_0xecbcx3)
            } else {
                _0xecbcx9['assignEventToResource'](_0xecbcx6, _0xecbcx5)
            }
        } else {
            _0xecbcx6 = _0xecbcx6 instanceof Ext.ux.Scheduler['model']['Event'] && _0xecbcx6 || _0xecbcx4['getModelById'](_0xecbcx6);
            if (_0xecbcx6['getResourceId']() == _0xecbcx1) {
                _0xecbcx6['setResourceId'](_0xecbcx3)
            }
        }
    },
    isEventAssignedToResource: function(_0xecbcx5, _0xecbcx3) {
        var _0xecbcx2 = this,
            _0xecbcx4 = _0xecbcx2['getAssignmentStore'](),
            _0xecbcx1;
        if (_0xecbcx4) {
            _0xecbcx1 = _0xecbcx4['isEventAssignedToResource'](_0xecbcx5, _0xecbcx3)
        } else {
            _0xecbcx5 = _0xecbcx5 instanceof Ext.ux.Scheduler['model']['Event'] && _0xecbcx5 || _0xecbcx2['getModelById'](_0xecbcx5);
            _0xecbcx3 = _0xecbcx3 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0xecbcx3['getId']() : _0xecbcx3;
            _0xecbcx1 = _0xecbcx5 && (_0xecbcx5['getResourceId']() == _0xecbcx3) || false
        };
        return _0xecbcx1
    },
    removeAssignmentsForEvent: function(_0xecbcx2) {
        var _0xecbcx1 = this,
            _0xecbcx5 = _0xecbcx1['getAssignmentStore']();
        if (_0xecbcx5) {
            _0xecbcx5['removeAssignmentsForEvent'](_0xecbcx2)
        } else {
            _0xecbcx2 = _0xecbcx2 instanceof Ext.ux.Scheduler['model']['Event'] && _0xecbcx2 || _0xecbcx1['getModelById'](_0xecbcx2);
            _0xecbcx2 && _0xecbcx2['setResourceId'](null)
        }
    },
    removeAssignmentsForResource: function(_0xecbcx5) {
        var _0xecbcx2 = this,
            _0xecbcx3 = _0xecbcx2['getAssignmentStore'](),
            _0xecbcx1 = _0xecbcx2['getResourceStore']();
        if (_0xecbcx3) {
            _0xecbcx3['removeAssignmentsForResource'](_0xecbcx5)
        } else {
            if (_0xecbcx1) {
                _0xecbcx5 = _0xecbcx5 instanceof Ext.ux.Scheduler['model']['Resource'] && _0xecbcx5 || _0xecbcx1['getModelById'](_0xecbcx5);
                _0xecbcx5 && Ext['Array']['each'](_0xecbcx2['resourceEventsCache']['get'](_0xecbcx5), function(_0xecbcx4) {
                    _0xecbcx4['setResourceId'](null)
                })
            } else {
                _0xecbcx5 = _0xecbcx5 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0xecbcx5['getId']() : _0xecbcx5;
                Ext['Array']['each'](_0xecbcx2['getRange'](), function(_0xecbcx4) {
                    _0xecbcx4['getResourceId']() == _0xecbcx5 && _0xecbcx4['setResourceId'](null)
                })
            }
        }
    },
    isEventPersistable: function(_0xecbcx4) {
        var _0xecbcx3 = this,
            _0xecbcx9 = _0xecbcx3['getAssignmentStore'](),
            _0xecbcx6, _0xecbcx5, _0xecbcx2, _0xecbcx1 = true;
        if (!_0xecbcx9) {
            _0xecbcx6 = _0xecbcx4['getResources']();
            for (_0xecbcx5 = 0, _0xecbcx2 = _0xecbcx6['length']; _0xecbcx1 && _0xecbcx5 < _0xecbcx2; ++_0xecbcx5) {
                _0xecbcx1 = _0xecbcx6[_0xecbcx5]['phantom'] !== true
            }
        };
        return _0xecbcx1
    }
});
Ext.define('Ext.ux.Scheduler.model.Event', {
    extend: 'Ext.ux.Scheduler.model.Range',
    idProperty: 'Id',
    customizableFields: [{
        name: 'IconCls'
    }, {
        name: 'ResourceId'
    }, {
        name: 'Draggable',
        type: 'boolean',
        persist: false,
        defaultValue: true
    }, {
        name: 'Resizable',
        persist: false,
        defaultValue: true
    }],
    resourceIdField: 'ResourceId',
    draggableField: 'Draggable',
    resizableField: 'Resizable',
    iconClsField: 'IconCls',
    getInternalId: function() {
        return this['internalId']
    },
    isHighlighted: false,
    getEventStore: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['joined'] && _0xecbcx2['joined'][0];
        if (_0xecbcx1 && !_0xecbcx1['isEventStore']) {
            Ext['Array']['sort'](_0xecbcx2['joined'], function(_0xecbcx3, _0xecbcx5) {
                return (_0xecbcx3['isEventStore'] || false) > (_0xecbcx5['isEventStore'] || false) && -1 || 1
            });
            _0xecbcx1 = _0xecbcx2['joined'][0];
            _0xecbcx1 = _0xecbcx1['isEventStore'] ? _0xecbcx1 : null
        };
        return _0xecbcx1
    },
    getResourceStore: function() {
        var _0xecbcx1 = this['getEventStore']();
        return _0xecbcx1 && _0xecbcx1['getResourceStore']()
    },
    getAssignmentStore: function() {
        var _0xecbcx1 = this['getEventStore']();
        return _0xecbcx1 && _0xecbcx1['getAssignmentStore']()
    },
    getResources: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getEventStore']();
        return _0xecbcx1 && _0xecbcx1['getResourcesForEvent'](_0xecbcx2) || []
    },
    forEachResource: function(_0xecbcx3, _0xecbcx5) {
        var _0xecbcx1 = this['getResources']();
        for (var _0xecbcx2 = 0; _0xecbcx2 < _0xecbcx1['length']; _0xecbcx2++) {
            if (_0xecbcx3['call'](_0xecbcx5 || this, _0xecbcx1[_0xecbcx2]) === false) {
                return
            }
        }
    },
    getResource: function(_0xecbcx4) {
        var _0xecbcx3 = this,
            _0xecbcx1 = null,
            _0xecbcx2 = _0xecbcx3['getEventStore'](),
            _0xecbcx5 = _0xecbcx2 && _0xecbcx2['getResourceStore']();
        _0xecbcx4 = _0xecbcx4 == null ? _0xecbcx3['getResourceId']() : _0xecbcx4;
        if (_0xecbcx2 && (_0xecbcx4 === null || _0xecbcx4 === undefined)) {
            _0xecbcx1 = _0xecbcx2['getResourcesForEvent'](_0xecbcx3);
            if (_0xecbcx1['length'] == 1) {
                _0xecbcx1 = _0xecbcx1[0]
            } else {
                if (_0xecbcx1['length'] > 1) {
                    Ext['Error']['raise']('Event::getResource() is not applicable for events with multiple assignments, please use Event::getResources() instead.')
                } else {
                    _0xecbcx1 = null
                }
            }
        } else {
            if (_0xecbcx5) {
                _0xecbcx1 = _0xecbcx5['getModelById'](_0xecbcx4)
            }
        };
        return _0xecbcx1
    },
    setResource: function(_0xecbcx5) {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getEventStore']();
        _0xecbcx1 && _0xecbcx1['removeAssignmentsForEvent'](_0xecbcx2);
        _0xecbcx2['assign'](_0xecbcx5)
    },
    assign: function(_0xecbcx5) {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getEventStore']();
        _0xecbcx5 = _0xecbcx5 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0xecbcx5['getId']() : _0xecbcx5;
        if (_0xecbcx1) {
            _0xecbcx1['assignEventToResource'](_0xecbcx2, _0xecbcx5)
        } else {
            _0xecbcx2['setResourceId'](_0xecbcx5)
        }
    },
    unassign: function(_0xecbcx5) {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getEventStore']();
        _0xecbcx5 = _0xecbcx5 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0xecbcx5['getId']() : _0xecbcx5;
        if (_0xecbcx1) {
            _0xecbcx1['unassignEventFromResource'](_0xecbcx2, _0xecbcx5)
        } else {
            if (_0xecbcx2['getResourceId']() == _0xecbcx5) {
                _0xecbcx2['setResourceId'](null)
            }
        }
    },
    reassign: function(_0xecbcx1, _0xecbcx3) {
        var _0xecbcx5 = this,
            _0xecbcx2 = _0xecbcx5['getEventStore']();
        _0xecbcx1 = _0xecbcx1 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0xecbcx1['get'](_0xecbcx1['idProperty']) : _0xecbcx1;
        _0xecbcx3 = _0xecbcx3 instanceof Ext.ux.Scheduler['model']['Resource'] ? _0xecbcx3['get'](_0xecbcx3['idProperty']) : _0xecbcx3;
        if (_0xecbcx2) {
            _0xecbcx2['reassignEventFromResourceToResource'](_0xecbcx5, _0xecbcx1, _0xecbcx3)
        } else {
            _0xecbcx5['setResourceId'](_0xecbcx3)
        }
    },
    isAssignedTo: function(_0xecbcx3) {
        var _0xecbcx5 = this,
            _0xecbcx2 = _0xecbcx5['getEventStore'](),
            _0xecbcx1 = false;
        _0xecbcx3 = _0xecbcx3 instanceof Ext.ux.Scheduler['model']['Resource'] && _0xecbcx3['getId']() || _0xecbcx3;
        if (_0xecbcx2) {
            _0xecbcx1 = _0xecbcx2['isEventAssignedToResource'](_0xecbcx5, _0xecbcx3)
        } else {
            _0xecbcx1 = _0xecbcx5['getResourceId']() == _0xecbcx3
        };
        return _0xecbcx1
    },
    getAssignments: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getEventStore']();
        return _0xecbcx1 && _0xecbcx1['getAssignmentsForEvent'](_0xecbcx2)
    },
    isDraggable: function() {
        return this['getDraggable']()
    },
    isResizable: function() {
        return this['getResizable']()
    },
    isPersistable: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getEventStore']();
        return _0xecbcx1 && _0xecbcx1['isEventPersistable'](_0xecbcx2)
    }
});
Ext.define('Ext.ux.Scheduler.data.EventStore', {
    extend: 'Ext.data.Store',
    alias: 'store.eventstore',
    mixins: ['Ext.ux.Scheduler.data.mixin.UniversalModelGetter', 'Ext.ux.Scheduler.data.mixin.CacheHintHelper', 'Ext.ux.Scheduler.data.mixin.EventStore', 'Robo.data.Store'],
    storeId: 'events',
    model: 'Ext.ux.Scheduler.model.Event',
    config: {
        model: 'Ext.ux.Scheduler.model.Event'
    },
    constructor: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['callParent']([_0xecbcx1]);
        _0xecbcx2['resourceStore'] && _0xecbcx2['setResourceStore'](_0xecbcx2['resourceStore']);
        _0xecbcx2['assignmentStore'] && _0xecbcx2['setAssignmentStore'](_0xecbcx2['assignmentStore']);
        if (_0xecbcx2['getModel']() !== Ext.ux.Scheduler['model']['Event'] && !(_0xecbcx2['getModel']()['prototype'] instanceof Ext.ux.Scheduler['model']['Event'])) {
            throw 'The model for the EventStore must subclass Ext.ux.Scheduler.model.Event'
        }
    },
    append: function(_0xecbcx1) {
        this['add'](_0xecbcx1)
    }
});
Ext.define('Ext.ux.Scheduler.data.mixin.ResourceStore', {
    eventStore: null,
    getEventStore: function() {
        return this['eventStore']
    },
    setEventStore: function(_0xecbcx1) {
        var _0xecbcx2 = this,
            _0xecbcx5;
        if (_0xecbcx2['eventStore'] !== _0xecbcx1) {
            _0xecbcx5 = _0xecbcx2['eventStore'];
            _0xecbcx2['eventStore'] = _0xecbcx1 && Ext['StoreMgr']['lookup'](_0xecbcx1) || null;
            _0xecbcx2['fireEvent']('eventstorechange', _0xecbcx2, _0xecbcx1, _0xecbcx5)
        }
    },
    getScheduledEventsInTimeSpan: function(_0xecbcx4, _0xecbcx1, _0xecbcx5) {
        var _0xecbcx2 = [];
        var _0xecbcx3 = Ext.ux.Scheduler['util']['Date'];
        _0xecbcx5 = _0xecbcx5 || this['getEventStore']();
        Ext['Array']['each'](this['getRange'](), function(_0xecbcx6) {
            Ext['Array']['each'](_0xecbcx5['getEventsForResource'](_0xecbcx6), function(_0xecbcx9) {
                if (_0xecbcx9['intersectsRange'](_0xecbcx4, _0xecbcx1)) {
                    _0xecbcx2['push'](_0xecbcx9)
                }
            })
        });
        return _0xecbcx2
    }
});
Ext.define('Ext.ux.Scheduler.model.Resource', {
    extend: 'Ext.ux.Scheduler.model.Customizable',
    idProperty: 'Id',
    config: Ext['versions']['touch'] ? {
        idProperty: 'Id'
    } : null,
    nameField: 'Name',
    customizableFields: [{
        name: 'Name',
        type: 'string'
    }],
    getInternalId: function() {
        return this['internalId']
    },
    getResourceStore: function() {
        return this['joined'] && this['joined'][0]
    },
    getEventStore: function() {
        var _0xecbcx1 = this['getResourceStore']();
        return _0xecbcx1 && _0xecbcx1['getEventStore']() || this['parentNode'] && this['parentNode']['getEventStore']()
    },
    getAssignmentStore: function() {
        var _0xecbcx1 = this['getEventStore']();
        return _0xecbcx1 && _0xecbcx1['getAssignmentStore']()
    },
    getEvents: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx1 = _0xecbcx1 || _0xecbcx2['getEventStore']();
        return _0xecbcx1 && _0xecbcx1['getEventsForResource'](_0xecbcx2) || []
    },
    getAssignments: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getEventStore']();
        return _0xecbcx1 && _0xecbcx1['getAssignmentsForResource'](_0xecbcx2)
    },
    isPersistable: function() {
        var _0xecbcx1 = this['parentNode'];
        return !_0xecbcx1 || !_0xecbcx1['phantom'] || (_0xecbcx1['isRoot'] && _0xecbcx1['isRoot']())
    },
    isAbove: function(_0xecbcx3) {
        var _0xecbcx6 = this,
            _0xecbcx7 = _0xecbcx6['getResourceStore'](),
            _0xecbcxa = false,
            _0xecbcx4, _0xecbcx5, _0xecbcx2, _0xecbcx1, _0xecbcx9;
        Ext['Assert'] && Ext['Assert']['truthy'](_0xecbcx7, 'Resource must be added to a store to be able to check if it above of an other resource');
        if (_0xecbcx6 == _0xecbcx3) {
            _0xecbcxa = false
        } else {
            if (_0xecbcx7 instanceof Ext['data']['TreeStore']) {
                _0xecbcx4 = _0xecbcx6;
                _0xecbcx5 = [];
                while (_0xecbcx4) {
                    _0xecbcx5['push'](_0xecbcx4);
                    _0xecbcx4 = _0xecbcx4['parentNode']
                };
                _0xecbcx4 = _0xecbcx3;
                _0xecbcx2 = [];
                while (_0xecbcx4) {
                    _0xecbcx2['push'](_0xecbcx4);
                    _0xecbcx4 = _0xecbcx4['parentNode']
                };
                _0xecbcx1 = 0;
                while (_0xecbcx1 < _0xecbcx5['length'] - 1 && _0xecbcx1 < _0xecbcx2['length'] - 1 && _0xecbcx5[_0xecbcx1] == _0xecbcx2[_0xecbcx1]) {
                    ++_0xecbcx1
                };
                _0xecbcx9 = _0xecbcx5[_0xecbcx1];
                _0xecbcx6 = _0xecbcx5[_0xecbcx1 + 1];
                _0xecbcx3 = _0xecbcx2[_0xecbcx1 + 1];
                _0xecbcxa = _0xecbcx9['indexOf'](_0xecbcx6) < _0xecbcx9['indexOf'](_0xecbcx3)
            } else {
                _0xecbcxa = _0xecbcx7['indexOf'](_0xecbcx6) < _0xecbcx7['indexOf'](_0xecbcx3)
            }
        };
        return _0xecbcxa
    }
});
Ext.define('Ext.ux.Scheduler.data.ResourceStore', {
    extend: 'Ext.data.Store',
    model: 'Ext.ux.Scheduler.model.Resource',
    config: {
        model: 'Ext.ux.Scheduler.model.Resource'
    },
    alias: 'store.resourcestore',
    mixins: ['Ext.ux.Scheduler.data.mixin.UniversalModelGetter', 'Ext.ux.Scheduler.data.mixin.CacheHintHelper', 'Ext.ux.Scheduler.data.mixin.ResourceStore', 'Robo.data.Store'],
    storeId: 'resources',
    constructor: function() {
        this['callParent'](arguments);
        if (this['getModel']() !== Ext.ux.Scheduler['model']['Resource'] && !(this['getModel']()['prototype'] instanceof Ext.ux.Scheduler['model']['Resource'])) {
            throw 'The model for the ResourceStore must subclass Ext.ux.Scheduler.model.Resource'
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TreeStore', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.data.TreeStore',
    minVersion: '5.1.0',
    overrides: {
        getRejectRecords: function() {
            return this['getModifiedRecords']()
        },
        rejectChanges: function() {
            this['removed'] = this['removedNodes'];
            this['callParent'](arguments)
        },
        remove: function(_0xecbcx2) {
            if (_0xecbcx2['isModel']) {
                _0xecbcx2['remove']()
            } else {
                if (_0xecbcx2 instanceof Array && _0xecbcx2[0]['isModel']) {
                    for (var _0xecbcx1 = 0; _0xecbcx1 < _0xecbcx2['length']; _0xecbcx1++) {
                        _0xecbcx2[_0xecbcx1]['remove']()
                    }
                } else {
                    this['callParent'](arguments)
                }
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TreeStoreInternalIdMap', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.data.TreeStore',
    minVersion: '5.1.1',
    overrides: {
        registerNode: function(_0xecbcx5, _0xecbcx1) {
            var _0xecbcx2 = this;
            if (!_0xecbcx2['byInternalIdMap']) {
                _0xecbcx2['byInternalIdMap'] = {}
            };
            _0xecbcx2['byInternalIdMap'][_0xecbcx5['internalId']] = _0xecbcx5;
            _0xecbcx2['callParent'](arguments)
        },
        unregisterNode: function(_0xecbcx5, _0xecbcx1) {
            var _0xecbcx2 = this;
            if (_0xecbcx2['byInternalIdMap']) {
                delete _0xecbcx2['byInternalIdMap'][_0xecbcx5['internalId']]
            };
            _0xecbcx2['callParent'](arguments)
        },
        updateRoot: function() {
            this['byInternalIdMap'] = {};
            this['callParent'](arguments)
        }
    }
});
Ext.define('Ext.ux.Scheduler.data.mixin.FilterableTreeStore', {
    isFilteredFlag: false,
    isHiddenFlag: false,
    treeFilter: null,
    lastTreeFilter: null,
    lastTreeHiding: null,
    allowExpandCollapseWhileFiltered: true,
    keepExpandStateWhileFiltered: false,
    reApplyFilterOnDataChange: true,
    suspendIncrementalFilterRefresh: 0,
    filterGeneration: 0,
    currentFilterGeneration: null,
    dataChangeListeners: null,
    monitoringDataChange: false,
    filterUpdateSuspended: false,
    onClassMixedIn: function(_0xecbcx1) {
        _0xecbcx1['override'](Ext.ux.Scheduler['data']['mixin']['FilterableTreeStore']['prototype']['inheritables']() || {})
    },
    initTreeFiltering: function() {
        this['treeFilter'] = new Ext['util'].Filter({
            filterFn: this['isNodeFilteredIn'],
            scope: this
        });
        this['dataChangeListeners'] = {
            nodeappend: this['onNeedToUpdateFilter'],
            nodeinsert: this['onNeedToUpdateFilter'],
            scope: this
        };
        Ext.apply(this['dataChangeListeners'], {
            beforeload: this['onStoreBeforeLoad'],
            load: this['onStoreLoad']
        })
    },
    onStoreBeforeLoad: function() {
        this['filterUpdateSuspended'] = true
    },
    onStoreLoad: function() {
        this['filterUpdateSuspended'] = false;
        this['onNeedToUpdateFilter']()
    },
    startDataChangeMonitoring: function() {
        if (this['monitoringDataChange']) {
            return
        };
        this['monitoringDataChange'] = true;
        this['on'](this['dataChangeListeners'])
    },
    stopDataChangeMonitoring: function() {
        if (!this['monitoringDataChange']) {
            return
        };
        this['monitoringDataChange'] = false;
        this['un'](this['dataChangeListeners'])
    },
    onNeedToUpdateFilter: function() {
        if (this['reApplyFilterOnDataChange'] && !this['filterUpdateSuspended'] && !this['suspendIncrementalFilterRefresh']) {
            this['reApplyFilter']()
        }
    },
    clearTreeFilter: function() {
        if (!this['isTreeFiltered']()) {
            return
        };
        this['currentFilterGeneration'] = null;
        this['isFilteredFlag'] = false;
        this['lastTreeFilter'] = null;
        if (!this['isTreeFiltered'](true)) {
            this['stopDataChangeMonitoring']()
        };
        this['refreshNodeStoreContent']();
        this['fireEvent']('filter-clear', this)
    },
    reApplyFilter: function() {
        if (this['isHiddenFlag']) {
            this['hideNodesBy']['apply'](this, this['lastTreeHiding']['concat'](this['isFilteredFlag']))
        };
        if (this['isFilteredFlag']) {
            this['filterTreeBy'](this['lastTreeFilter'])
        }
    },
    refreshNodeStoreContent: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getFilters']();
        if (_0xecbcx1['indexOf'](_0xecbcx2['treeFilter']) < 0) {
            _0xecbcx2['addFilter'](_0xecbcx2['treeFilter'])
        } else {
            this['getFilters']()['fireEvent']('endupdate', this['getFilters']())
        }
    },
    getIndexInTotalDataset: function(_0xecbcx3) {
        var _0xecbcx5 = this['getRootNode'](),
            _0xecbcx6 = -1;
        var _0xecbcx9 = this['rootVisible'];
        if (!_0xecbcx9 && _0xecbcx3 == _0xecbcx5) {
            return -1
        };
        var _0xecbcx2 = this['isTreeFiltered']();
        var _0xecbcx1 = this['currentFilterGeneration'];
        var _0xecbcx4 = function(_0xecbcx8) {
            if (_0xecbcx2 && _0xecbcx8['__filterGen'] != _0xecbcx1 || _0xecbcx8['hidden']) {
                if (_0xecbcx8 == _0xecbcx3) {
                    return false
                }
            };
            if (_0xecbcx9 || _0xecbcx8 != _0xecbcx5) {
                _0xecbcx6++
            };
            if (_0xecbcx8 == _0xecbcx3) {
                return false
            };
            if (!_0xecbcx8['isLeaf']() && _0xecbcx8['isExpanded']()) {
                var _0xecbcx11 = _0xecbcx8['childNodes'],
                    _0xecbcxa = _0xecbcx11['length'];
                for (var _0xecbcx7 = 0; _0xecbcx7 < _0xecbcxa; _0xecbcx7++) {
                    if (_0xecbcx4(_0xecbcx11[_0xecbcx7]) === false) {
                        return false
                    }
                }
            }
        };
        _0xecbcx4(_0xecbcx5);
        return _0xecbcx6
    },
    isTreeFiltered: function(_0xecbcx1) {
        return this['isFilteredFlag'] || _0xecbcx1 && this['isHiddenFlag']
    },
    markFilteredNodes: function(_0xecbcx8, _0xecbcx5) {
        var _0xecbcxa = this;
        var _0xecbcx4 = this['currentFilterGeneration'];
        var _0xecbcx3 = {};
        var _0xecbcxd = this['getRootNode'](),
            _0xecbcxe = this['rootVisible'];
        var _0xecbcxb = function(_0xecbcx17) {
            var _0xecbcx10 = _0xecbcx17['parentNode'];
            while (_0xecbcx10 && !_0xecbcx3[_0xecbcx10['internalId']]) {
                _0xecbcx3[_0xecbcx10['internalId']] = true;
                _0xecbcx10 = _0xecbcx10['parentNode']
            }
        };
        var _0xecbcx1 = _0xecbcx5['filter'];
        var _0xecbcxc = _0xecbcx5['scope'] || this;
        var _0xecbcx11 = _0xecbcx5['shallow'];
        var _0xecbcxf = _0xecbcx5['checkParents'] || _0xecbcx11;
        var _0xecbcx9 = _0xecbcx5['fullMatchingParents'];
        var _0xecbcx6 = _0xecbcx5['onlyParents'] || _0xecbcx9;
        var _0xecbcx2 = !_0xecbcx5['isOldFilter'];
        if (_0xecbcx6 && _0xecbcxf) {
            throw new Error('Can\'t combine `onlyParents` and `checkParents` options ')
        };
        if (_0xecbcxe) {
            _0xecbcx3[_0xecbcxd['internalId']] = true
        };
        var _0xecbcx7 = function(_0xecbcx14) {
            if (_0xecbcx14['hidden']) {
                return
            };
            var _0xecbcx17, _0xecbcx12, _0xecbcx15, _0xecbcx10;
            if (_0xecbcx14['isLeaf']()) {
                if (_0xecbcx1['call'](_0xecbcxc, _0xecbcx14, _0xecbcx3)) {
                    _0xecbcx3[_0xecbcx14['internalId']] = true;
                    _0xecbcxb(_0xecbcx14)
                }
            } else {
                if (_0xecbcx6) {
                    _0xecbcx17 = _0xecbcx1['call'](_0xecbcxc, _0xecbcx14);
                    _0xecbcx12 = _0xecbcx14['childNodes'];
                    _0xecbcx15 = _0xecbcx12['length'];
                    if (_0xecbcx17) {
                        _0xecbcx3[_0xecbcx14['internalId']] = true;
                        _0xecbcxb(_0xecbcx14);
                        if (_0xecbcx9) {
                            _0xecbcx14['cascadeBy'](function(_0xecbcx13) {
                                _0xecbcx3[_0xecbcx13['internalId']] = true
                            });
                            return
                        }
                    };
                    for (_0xecbcx10 = 0; _0xecbcx10 < _0xecbcx15; _0xecbcx10++) {
                        if (_0xecbcx17 && _0xecbcx12[_0xecbcx10]['isLeaf']()) {
                            _0xecbcx3[_0xecbcx12[_0xecbcx10]['internalId']] = true
                        } else {
                            if (!_0xecbcx12[_0xecbcx10]['isLeaf']()) {
                                _0xecbcx7(_0xecbcx12[_0xecbcx10])
                            }
                        }
                    }
                } else {
                    if (_0xecbcxf) {
                        _0xecbcx17 = _0xecbcx1['call'](_0xecbcxc, _0xecbcx14, _0xecbcx3);
                        if (_0xecbcx17) {
                            _0xecbcx3[_0xecbcx14['internalId']] = true;
                            _0xecbcxb(_0xecbcx14)
                        }
                    };
                    if (!_0xecbcxf || !_0xecbcx11 || _0xecbcx11 && (_0xecbcx17 || _0xecbcx14 == _0xecbcxd && !_0xecbcxe)) {
                        _0xecbcx12 = _0xecbcx14['childNodes'];
                        _0xecbcx15 = _0xecbcx12['length'];
                        for (_0xecbcx10 = 0; _0xecbcx10 < _0xecbcx15; _0xecbcx10++) {
                            _0xecbcx7(_0xecbcx12[_0xecbcx10])
                        }
                    }
                }
            }
        };
        _0xecbcx7(_0xecbcx8);
        _0xecbcxd['cascadeBy'](function(_0xecbcx10) {
            if (_0xecbcx2) {
                _0xecbcx10['addedWhileFiltered'] = false
            };
            if (_0xecbcx3[_0xecbcx10['internalId']]) {
                _0xecbcx10['__filterGen'] = _0xecbcx4;
                if (!_0xecbcxa['keepExpandStateWhileFiltered'] && !_0xecbcx10['isLeaf']()) {
                    _0xecbcx10['expand']()
                }
            }
        })
    },
    filterTreeBy: function(_0xecbcx5, _0xecbcx2) {
        this['currentFilterGeneration'] = this['filterGeneration']++;
        var _0xecbcx1;
        if (arguments['length'] == 1 && Ext['isObject'](arguments[0])) {
            _0xecbcx2 = _0xecbcx5['scope'];
            _0xecbcx1 = _0xecbcx5['filter']
        } else {
            _0xecbcx1 = _0xecbcx5;
            _0xecbcx5 = {
                filter: _0xecbcx1,
                scope: _0xecbcx2
            }
        };
        this['fireEvent']('nodestore-datachange-start', this);
        _0xecbcx5 = _0xecbcx5 || {};
        this['markFilteredNodes'](this['getRootNode'](), _0xecbcx5);
        _0xecbcx5['isOldFilter'] = true;
        this['startDataChangeMonitoring']();
        this['isFilteredFlag'] = true;
        this['lastTreeFilter'] = _0xecbcx5;
        this['fireEvent']('nodestore-datachange-end', this);
        this['fireEvent']('filter-set', this);
        this['refreshNodeStoreContent']()
    },
    isNodeFilteredIn: function(_0xecbcx5) {
        var _0xecbcx2 = this['isTreeFiltered']();
        var _0xecbcx1 = this['currentFilterGeneration'];
        return this['loading'] || (_0xecbcx5['addedWhileFiltered'] && _0xecbcx5['isVisible']()) || !Boolean(_0xecbcx2 && _0xecbcx5['__filterGen'] != _0xecbcx1 || _0xecbcx5['hidden'])
    },
    hasNativeFilters: function() {
        var _0xecbcx5 = this,
            _0xecbcx2 = _0xecbcx5['getFilters'](),
            _0xecbcx1 = _0xecbcx2['getCount']();
        return (_0xecbcx1 && _0xecbcx1 > 1) || _0xecbcx2['indexOf'](_0xecbcx5['treeFilter']) < 0
    },
    hideNodesBy: function(_0xecbcx2, _0xecbcx1, _0xecbcx3) {
        var _0xecbcx5 = this;
        if (_0xecbcx5['isFiltered']() && _0xecbcx5['hasNativeFilters']()) {
            throw new Error('Can\'t hide nodes of a filtered tree store ')
        };
        _0xecbcx1 = _0xecbcx1 || _0xecbcx5;
        _0xecbcx5['getRootNode']()['cascadeBy'](function(_0xecbcx4) {
            _0xecbcx4['hidden'] = Boolean(_0xecbcx2['call'](_0xecbcx1, _0xecbcx4, _0xecbcx5))
        });
        _0xecbcx5['startDataChangeMonitoring']();
        _0xecbcx5['isHiddenFlag'] = true;
        _0xecbcx5['lastTreeHiding'] = [_0xecbcx2, _0xecbcx1];
        if (!_0xecbcx3) {
            _0xecbcx5['refreshNodeStoreContent']()
        }
    },
    showAllNodes: function(_0xecbcx1) {
        this['getRootNode']()['cascadeBy'](function(_0xecbcx2) {
            _0xecbcx2['hidden'] = false
        });
        this['isHiddenFlag'] = false;
        this['lastTreeHiding'] = null;
        if (!this['isTreeFiltered'](true)) {
            this['stopDataChangeMonitoring']()
        };
        if (!_0xecbcx1) {
            this['refreshNodeStoreContent']()
        }
    },
    inheritables: function() {
        return {
            onNodeExpand: function(_0xecbcx1) {
                if (this['isTreeFiltered'](true) && _0xecbcx1 == this['getRoot']()) {
                    this['callParent'](arguments);
                    this['reApplyFilter']()
                } else {
                    return this['callParent'](arguments)
                }
            },
            onNodeCollapse: function(_0xecbcx9, _0xecbcx2) {
                var _0xecbcx4 = this;
                var _0xecbcx3 = _0xecbcx4['data'];
                var _0xecbcxa = _0xecbcx3['contains'];
                var _0xecbcx5 = _0xecbcx4['isTreeFiltered']();
                var _0xecbcx6 = _0xecbcx4['currentFilterGeneration'];
                _0xecbcx3['contains'] = function() {
                    var _0xecbcxe, _0xecbcx11, _0xecbcxc;
                    var _0xecbcxd = _0xecbcx4['indexOf'](_0xecbcx9) + 1;
                    var _0xecbcxf = false;
                    for (var _0xecbcx8 = 0; _0xecbcx8 < _0xecbcx2['length']; _0xecbcx8++) {
                        if (!(_0xecbcx2[_0xecbcx8]['hidden'] || _0xecbcx5 && _0xecbcx2[_0xecbcx8]['__filterGen'] != _0xecbcx6) && _0xecbcxa['call'](this, _0xecbcx2[_0xecbcx8])) {
                            _0xecbcxe = _0xecbcx9;
                            while (_0xecbcxe['parentNode']) {
                                _0xecbcx11 = _0xecbcxe;
                                do {
                                    _0xecbcx11 = _0xecbcx11['nextSibling']
                                } while (_0xecbcx11 && (_0xecbcx11['hidden'] || _0xecbcx5 && _0xecbcx11['__filterGen'] != _0xecbcx6));;
                                if (_0xecbcx11) {
                                    _0xecbcxf = true;
                                    _0xecbcxc = _0xecbcx4['indexOf'](_0xecbcx11);
                                    break
                                } else {
                                    _0xecbcxe = _0xecbcxe['parentNode']
                                }
                            };
                            if (!_0xecbcxf) {
                                _0xecbcxc = _0xecbcx4['getCount']()
                            };
                            _0xecbcx4['removeAt'](_0xecbcxd, _0xecbcxc - _0xecbcxd);
                            break
                        }
                    };
                    return false
                };
                this['callParent'](arguments);
                if (this['isTreeFiltered']()) {
                    if (_0xecbcx4['needsLocalFilter']()) {
                        _0xecbcx2 = Ext['Array']['filter'](_0xecbcx2, _0xecbcx4['filterVisible'])
                    };
                    if (!_0xecbcx2['length'] && _0xecbcx4['indexOf'](_0xecbcx9) !== -1) {
                        var _0xecbcx7 = _0xecbcx4['indexOf'](_0xecbcx9) + 1;
                        var _0xecbcx1 = _0xecbcx4['indexOfNextVisibleNode'](_0xecbcx9);
                        _0xecbcx4['removeAt'](_0xecbcx7, _0xecbcx1 - _0xecbcx7)
                    }
                };
                _0xecbcx3['contains'] = _0xecbcxa
            },
            handleNodeExpand: function(_0xecbcx7, _0xecbcx1, _0xecbcx8) {
                var _0xecbcx4 = this;
                var _0xecbcx6 = [];
                var _0xecbcx2 = _0xecbcx4['isTreeFiltered']();
                var _0xecbcx9 = _0xecbcx4['currentFilterGeneration'];
                for (var _0xecbcx5 = 0; _0xecbcx5 < _0xecbcx1['length']; _0xecbcx5++) {
                    var _0xecbcx3 = _0xecbcx1[_0xecbcx5];
                    if (!(_0xecbcx2 && _0xecbcx3['__filterGen'] != _0xecbcx9 || _0xecbcx3['hidden'])) {
                        _0xecbcx6[_0xecbcx6['length']] = _0xecbcx3
                    }
                };
                return this['callParent']([_0xecbcx7, _0xecbcx6, _0xecbcx8])
            },
            onNodeInsert: function(_0xecbcxc, _0xecbcx1, _0xecbcx7) {
                var _0xecbcxd = this,
                    _0xecbcxa, _0xecbcxb, _0xecbcx11, _0xecbcx2, _0xecbcxe, _0xecbcx6, _0xecbcx5 = _0xecbcx1['raw'] || _0xecbcx1['data'],
                    _0xecbcx9 = _0xecbcxd['removedNodes'],
                    _0xecbcxf, _0xecbcx4, _0xecbcx3, _0xecbcx8 = this['isTreeFiltered']();
                if (_0xecbcxd['filterFn']) {
                    _0xecbcx4 = _0xecbcxd['filterFn'](_0xecbcx1);
                    _0xecbcx1['set']('visible', _0xecbcx4);
                    if (_0xecbcx4) {
                        _0xecbcxc['set']('visible', _0xecbcxd['filterFn'](_0xecbcxc))
                    }
                };
                if (!this['reApplyFilterOnDataChange'] && _0xecbcx8) {
                    _0xecbcx1['addedWhileFiltered'] = true
                };
                _0xecbcxd['registerNode'](_0xecbcx1, true);
                _0xecbcxd['beginUpdate']();
                if (_0xecbcxd['isVisible'](_0xecbcx1) || (_0xecbcx8 && _0xecbcx1['addedWhileFiltered'])) {
                    if (_0xecbcx7 === 0 || !_0xecbcx1['previousSibling']) {
                        _0xecbcxa = _0xecbcxc
                    } else {
                        for (_0xecbcxb = _0xecbcx1['previousSibling']; _0xecbcxb && !_0xecbcxb['addedWhileFiltered'] && !_0xecbcxb['get']('visible'); _0xecbcxb = _0xecbcxb['previousSibling']) {};
                        if (!_0xecbcxb) {
                            _0xecbcxa = _0xecbcxc
                        } else {
                            while (_0xecbcxb['isExpanded']() && _0xecbcxb['lastChild']) {
                                _0xecbcxb = _0xecbcxb['lastChild']
                            };
                            for (; _0xecbcxb && !_0xecbcxb['addedWhileFiltered'] && !_0xecbcxb['get']('visible'); _0xecbcxb = _0xecbcxb['previousSibling']) {};
                            _0xecbcxa = _0xecbcxb
                        }
                    };
                    _0xecbcxd['insert'](_0xecbcxd['indexOf'](_0xecbcxa) + 1, _0xecbcx1);
                    if (!_0xecbcx1['isLeaf']() && _0xecbcx1['isExpanded']()) {
                        if (_0xecbcx1['isLoaded']()) {
                            _0xecbcxd['onNodeExpand'](_0xecbcx1, _0xecbcx1['childNodes'])
                        } else {
                            if (!_0xecbcxd['fillCount']) {
                                _0xecbcx1['set']('expanded', false);
                                _0xecbcx1['expand']()
                            }
                        }
                    }
                };
                Ext['Array']['remove'](_0xecbcx9, _0xecbcx1);
                _0xecbcxd['needsSync'] = _0xecbcxd['needsSync'] || _0xecbcx1['phantom'] || _0xecbcx1['dirty'];
                if (!_0xecbcx1['isLeaf']() && !_0xecbcx1['isLoaded']() && !_0xecbcxd['lazyFill']) {
                    _0xecbcx11 = _0xecbcxd['getProxy']()['getReader']();
                    _0xecbcx2 = _0xecbcx1['getProxy']();
                    _0xecbcxe = _0xecbcx2 ? _0xecbcx2['getReader']() : null;
                    _0xecbcx6 = _0xecbcxe && _0xecbcxe['initialConfig']['rootProperty'] ? _0xecbcxe : _0xecbcx11;
                    _0xecbcxf = _0xecbcx6['getRoot'](_0xecbcx5);
                    if (_0xecbcxf) {
                        _0xecbcx3 = _0xecbcx1['childType'];
                        _0xecbcxd['fillNode'](_0xecbcx1, _0xecbcx6['extractData'](_0xecbcxf, _0xecbcx3 ? {
                            model: _0xecbcx3
                        } : undefined))
                    }
                };
                _0xecbcxd['endUpdate']()
            },
            isFiltered: function() {
                return this['callParent'](arguments) || this['isTreeFiltered']()
            },
            afterEdit: function(_0xecbcx5, _0xecbcx2) {
                var _0xecbcx1 = this;
                if (Ext['getVersion']()['isGreaterThan']('6.0.2')) {
                    if (_0xecbcx1['needsLocalFilter']()) {
                        _0xecbcx1['doFilter'](_0xecbcx5)
                    };
                    Ext['data']['Store']['prototype']['afterEdit']['apply'](_0xecbcx1, [_0xecbcx5, _0xecbcx2])
                } else {
                    return _0xecbcx1['callParent']([_0xecbcx5, _0xecbcx2])
                }
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.data.ResourceTreeStore', {
    extend: 'Ext.data.TreeStore',
    requires: ['Ext.ux.Scheduler.patches.TreeStore', 'Ext.ux.Scheduler.patches.TreeStoreInternalIdMap'],
    mixins: ['Ext.ux.Scheduler.data.mixin.UniversalModelGetter', 'Ext.ux.Scheduler.data.mixin.CacheHintHelper', 'Ext.ux.Scheduler.data.mixin.ResourceStore', 'Ext.ux.Scheduler.data.mixin.FilterableTreeStore', 'Robo.data.Store'],
    alias: 'store.resourcetreestore',
    model: 'Ext.ux.Scheduler.model.Resource',
    storeId: 'resources',
    constructor: function() {
        this['callParent'](arguments);
        this['initTreeFiltering']();
        if (this['getModel']() !== Ext.ux.Scheduler['model']['Resource'] && !(this['getModel']()['prototype'] instanceof Ext.ux.Scheduler['model']['Resource'])) {
            throw 'The model for the ResourceTreeStore must subclass Ext.ux.Scheduler.model.Resource'
        }
    },
    setRootNode: function() {
        this['isSettingRoot'] = true;
        var _0xecbcx1 = this['callParent'](arguments);
        this['isSettingRoot'] = false;
        return _0xecbcx1
    }
});
Ext.define('Ext.ux.Scheduler.model.TimeAxisTick', {
    extend: 'Ext.ux.Scheduler.model.Range',
    startDateField: 'start',
    endDateField: 'end'
});
Ext.define('Ext.ux.Scheduler.data.TimeAxis', {
    extend: 'Ext.data.JsonStore',
    requires: ['Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.model.TimeAxisTick'],
    model: 'Ext.ux.Scheduler.model.TimeAxisTick',
    continuous: true,
    originalContinuous: null,
    autoAdjust: true,
    unit: null,
    increment: null,
    resolutionUnit: null,
    resolutionIncrement: null,
    weekStartDay: null,
    mainUnit: null,
    shiftUnit: null,
    shiftIncrement: 1,
    defaultSpan: 1,
    isConfigured: false,
    adjustedStart: null,
    adjustedEnd: null,
    visibleTickStart: null,
    visibleTickEnd: null,
    presetName: null,
    mode: 'plain',
    startTime: 0,
    endTime: 24,
    constructor: function(_0xecbcx1) {
        var _0xecbcx5 = this;
        _0xecbcx1 = _0xecbcx1 || {};
        if (_0xecbcx5['setModel']) {
            _0xecbcx5['setModel'](_0xecbcx5['model'])
        };
        _0xecbcx5['setMode'](_0xecbcx1['mode'] || _0xecbcx5['mode']);
        _0xecbcx5['originalContinuous'] = _0xecbcx5['continuous'];
        _0xecbcx5['callParent'](arguments);
        _0xecbcx5['on'](Ext['versions']['touch'] ? 'refresh' : 'datachanged', function() {
            _0xecbcx5['fireEvent']('reconfigure', _0xecbcx5, false)
        });
        _0xecbcx5['on']('endreconfigure', function(_0xecbcx3, _0xecbcx4) {
            _0xecbcx3['fireEvent']('reconfigure', _0xecbcx3, _0xecbcx4)
        });
        if (_0xecbcx1['viewPreset']) {
            var _0xecbcx2 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0xecbcx1['viewPreset']);
            _0xecbcx2 && _0xecbcx5['consumeViewPreset'](_0xecbcx2)
        };
        if (_0xecbcx1['start'] || _0xecbcx5['start']) {
            _0xecbcx5['reconfigure'](_0xecbcx1)
        }
    },
    reconfigure: function(_0xecbcx3, _0xecbcx1) {
        this['isConfigured'] = true;
        Ext.apply(this, _0xecbcx3);
        var _0xecbcxd = this['getAdjustedDates'](_0xecbcx3['start'], _0xecbcx3['end'], true);
        var _0xecbcx8 = this['getAdjustedDates'](_0xecbcx3['start'], _0xecbcx3['end']);
        var _0xecbcx2 = _0xecbcx8['start'];
        var _0xecbcx4 = _0xecbcx8['end'];
        if (this['fireEvent']('beforereconfigure', this, _0xecbcx2, _0xecbcx4) !== false) {
            this['fireEvent']('beginreconfigure', this);
            var _0xecbcx7 = this['unit'];
            var _0xecbcxa = this['increment'] || 1;
            var _0xecbcx9 = this['generateTicks'](_0xecbcx2, _0xecbcx4, _0xecbcx7, _0xecbcxa);
            this['removeAll'](true);
            this['suspendEvents']();
            this['add'](_0xecbcx9);
            if (this['getCount']() === 0) {
                Ext['Error']['raise']('Invalid time axis configuration or filter, please check your input data.')
            };
            this['resumeEvents']();
            var _0xecbcx5 = Ext.ux.Scheduler['util']['Date'];
            var _0xecbcx6 = _0xecbcx9['length'];
            if (this['isContinuous']()) {
                this['adjustedStart'] = _0xecbcxd['start'];
                this['adjustedEnd'] = this['getNext'](_0xecbcx6 > 1 ? _0xecbcx9[_0xecbcx6 - 1]['start'] : _0xecbcxd['start'], _0xecbcx7, _0xecbcxa)
            } else {
                this['adjustedStart'] = this['getStart']();
                this['adjustedEnd'] = this['getEnd']()
            };
            do {
                this['visibleTickStart'] = (this['getStart']() - this['adjustedStart']) / (_0xecbcx5['getUnitDurationInMs'](_0xecbcx7) * _0xecbcxa);
                if (this['visibleTickStart'] >= 1) {
                    this['adjustedStart'] = _0xecbcx5['getNext'](this['adjustedStart'], _0xecbcx7, _0xecbcxa)
                }
            } while (this['visibleTickStart'] >= 1);;
            do {
                this['visibleTickEnd'] = _0xecbcx6 - (this['adjustedEnd'] - this['getEnd']()) / (_0xecbcx5['getUnitDurationInMs'](_0xecbcx7) * _0xecbcxa);
                if (_0xecbcx6 - this['visibleTickEnd'] >= 1) {
                    this['adjustedEnd'] = _0xecbcx5['getNext'](this['adjustedEnd'], _0xecbcx7, -1)
                }
            } while (_0xecbcx6 - this['visibleTickEnd'] >= 1);;
            this['fireEvent']('endreconfigure', this, _0xecbcx1)
        }
    },
    isWeek: function() {
        return this['mode'] !== 'plain'
    },
    setMode: function(_0xecbcx1) {
        this['mode'] = _0xecbcx1;
        if (this['isWeek']()) {
            this['generateTicksValidatorFn'] = function(_0xecbcx2) {
                if (this['startTime'] > 0 || this['endTime'] < 24) {
                    return (_0xecbcx2['getHours']() >= this['startTime'] && _0xecbcx2['getHours']() < this['endTime'])
                } else {
                    return true
                }
            }
        } else {
            this['generateTicksValidatorFn'] = function() {
                return true
            }
        }
    },
    setTimeSpan: function(_0xecbcx5, _0xecbcx1) {
        var _0xecbcx2 = this['getAdjustedDates'](_0xecbcx5, _0xecbcx1);
        _0xecbcx5 = _0xecbcx2['start'];
        _0xecbcx1 = _0xecbcx2['end'];
        if (this['getStart']() - _0xecbcx5 !== 0 || this['getEnd']() - _0xecbcx1 !== 0) {
            this['reconfigure']({
                start: _0xecbcx5,
                end: _0xecbcx1
            })
        }
    },
    filterBy: function(_0xecbcx2, _0xecbcx1) {
        this['continuous'] = false;
        _0xecbcx1 = _0xecbcx1 || this;
        this['clearFilter'](true);
        this['suspendEvents'](true);
        this['filter']([{
            filterFn: function(_0xecbcx3, _0xecbcx5) {
                return _0xecbcx2['call'](_0xecbcx1, _0xecbcx3['data'], _0xecbcx5)
            }
        }]);
        if (this['getCount']() === 0) {
            this['clearFilter']();
            this['resumeEvents']();
            Ext['Error']['raise']('Invalid time axis filter - no ticks passed through the filter. Please check your filter method.')
        };
        this['resumeEvents']()
    },
    isContinuous: function() {
        var _0xecbcx1 = this['continuous'] && !this['isFiltered']();
        if (this['isWeek']()) {
            _0xecbcx1 = _0xecbcx1 && this['startTime'] === 0 && this['endTime'] === 24
        };
        return _0xecbcx1
    },
    clearFilter: function() {
        this['continuous'] = this['originalContinuous'];
        this['callParent'](arguments)
    },
    generateTicks: function(_0xecbcx1, _0xecbcx3, _0xecbcx9, _0xecbcxa) {
        var _0xecbcx7 = [],
            _0xecbcx6, _0xecbcx2 = Ext.ux.Scheduler['util']['Date'],
            _0xecbcx4 = 0;
        _0xecbcx9 = _0xecbcx9 || this['unit'];
        _0xecbcxa = _0xecbcxa || this['increment'];
        var _0xecbcx8 = this['getAdjustedDates'](_0xecbcx1, _0xecbcx3);
        _0xecbcx1 = _0xecbcx8['start'];
        _0xecbcx3 = _0xecbcx8['end'];
        while (_0xecbcx1 < _0xecbcx3) {
            _0xecbcx6 = this['getNext'](_0xecbcx1, _0xecbcx9, _0xecbcxa);
            if (!this['autoAdjust'] && _0xecbcx6 > _0xecbcx3) {
                _0xecbcx6 = _0xecbcx3
            };
            if (_0xecbcx9 === _0xecbcx2['HOUR'] && _0xecbcxa > 1 && _0xecbcx7['length'] > 0 && _0xecbcx4 === 0) {
                var _0xecbcx5 = _0xecbcx7[_0xecbcx7['length'] - 1];
                _0xecbcx4 = ((_0xecbcx5['start']['getHours']() + _0xecbcxa) % 24) - _0xecbcx5['end']['getHours']();
                if (_0xecbcx4 !== 0) {
                    _0xecbcx6 = _0xecbcx2['add'](_0xecbcx6, _0xecbcx2.HOUR, _0xecbcx4)
                }
            };
            this['generateTicksValidatorFn'](_0xecbcx1) && _0xecbcx7['push']({
                start: _0xecbcx1,
                end: _0xecbcx6
            });
            _0xecbcx1 = _0xecbcx6
        };
        return _0xecbcx7
    },
    getVisibleTickTimeSpan: function() {
        return this['isContinuous']() ? this['visibleTickEnd'] - this['visibleTickStart'] : this['getCount']()
    },
    getAdjustedDates: function(_0xecbcx2, _0xecbcx4, _0xecbcx3) {
        var _0xecbcx5 = Ext.ux.Scheduler['util']['Date'];
        _0xecbcx2 = _0xecbcx2 || this['getStart']();
        _0xecbcx4 = _0xecbcx4 || _0xecbcx5['add'](_0xecbcx2, this['mainUnit'], this['defaultSpan']);
        if (this['isWeek']()) {
            if (this['shiftUnit'] === _0xecbcx5['MONTH']) {
                var _0xecbcx9 = _0xecbcx5['add'](_0xecbcx2, _0xecbcx5.WEEK, 1);
                var _0xecbcx6 = _0xecbcx5['add'](_0xecbcx4, _0xecbcx5.WEEK, -1);
                if (!_0xecbcx4) {
                    _0xecbcx4 = this['getNext'](_0xecbcx2, this['shiftUnit'], 1);
                    _0xecbcx4 = this['ceilDate'](_0xecbcx4, false, this['shiftUnit']);
                    _0xecbcx4 = this['ceilDate'](_0xecbcx4, false, this['mainUnit'])
                };
                if (_0xecbcx9['getMonth']() !== _0xecbcx2['getMonth']() && _0xecbcx6['getMonth']() !== _0xecbcx4['getMonth']()) {
                    return {
                        start: _0xecbcx2,
                        end: _0xecbcx4
                    }
                }
            };
            var _0xecbcxa, _0xecbcx1, _0xecbcx7;
            _0xecbcxa = this['floorDate'](_0xecbcx2, false, this['shiftUnit'], 1);
            _0xecbcxa = this['floorDate'](_0xecbcxa, false, this['mainUnit'], 1);
            if (this['autoAdjust']) {
                _0xecbcx7 = this['getNext'](_0xecbcx2, this['shiftUnit'], 1);
                _0xecbcx1 = this['ceilDate'](_0xecbcx7, false, this['shiftUnit']);
                _0xecbcx1 = this['ceilDate'](_0xecbcx1, false, this['mainUnit'])
            } else {
                _0xecbcx1 = this['ceilDate'](_0xecbcx4, false, this['shiftUnit']);
                _0xecbcx1 = this['ceilDate'](_0xecbcx1, false, this['mainUnit'])
            };
            return {
                start: _0xecbcxa,
                end: _0xecbcx1
            }
        } else {
            return this['autoAdjust'] || _0xecbcx3 ? {
                start: this['floorDate'](_0xecbcx2, false, this['autoAdjust'] ? this['mainUnit'] : this['unit'], 1),
                end: this['ceilDate'](_0xecbcx4, false, this['autoAdjust'] ? this['mainUnit'] : this['unit'], 1)
            } : {
                start: _0xecbcx2,
                end: _0xecbcx4
            }
        }
    },
    getTickFromDate: function(_0xecbcx3) {
        var _0xecbcx8 = this['data']['items'];
        var _0xecbcx7 = _0xecbcx8['length'] - 1;
        if (_0xecbcx3.valueOf() < _0xecbcx8[0]['data']['start'].valueOf() || _0xecbcx3.valueOf() > _0xecbcx8[_0xecbcx7]['data']['end'].valueOf()) {
            return -1
        };
        var _0xecbcx6, _0xecbcx9, _0xecbcx2;
        if (this['isContinuous']()) {
            if (_0xecbcx3 - _0xecbcx8[0]['data']['start'] === 0) {
                return this['visibleTickStart']
            };
            if (_0xecbcx3 - _0xecbcx8[_0xecbcx7]['data']['end'] === 0) {
                return this['visibleTickEnd']
            };
            var _0xecbcxd = this['adjustedStart'];
            var _0xecbcx1 = this['adjustedEnd'];
            var _0xecbcx5 = Math['floor'](_0xecbcx8['length'] * (_0xecbcx3 - _0xecbcxd) / (_0xecbcx1 - _0xecbcxd));
            if (_0xecbcx5 > _0xecbcx7) {
                _0xecbcx5 = _0xecbcx7
            };
            _0xecbcx9 = _0xecbcx5 === 0 ? _0xecbcxd : _0xecbcx8[_0xecbcx5]['data']['start'];
            _0xecbcx2 = _0xecbcx5 == _0xecbcx7 ? _0xecbcx1 : _0xecbcx8[_0xecbcx5]['data']['end'];
            _0xecbcx6 = _0xecbcx5 + (_0xecbcx3 - _0xecbcx9) / (_0xecbcx2 - _0xecbcx9);
            if (_0xecbcx6 < this['visibleTickStart'] || _0xecbcx6 > this['visibleTickEnd']) {
                return -1
            };
            return _0xecbcx6
        } else {
            for (var _0xecbcx4 = 0; _0xecbcx4 <= _0xecbcx7; _0xecbcx4++) {
                _0xecbcx2 = _0xecbcx8[_0xecbcx4]['data']['end'];
                if (_0xecbcx3 <= _0xecbcx2) {
                    _0xecbcx9 = _0xecbcx8[_0xecbcx4]['data']['start'];
                    _0xecbcx6 = _0xecbcx4 + (_0xecbcx3 > _0xecbcx9 ? (_0xecbcx3 - _0xecbcx9) / (_0xecbcx2 - _0xecbcx9) : 0);
                    return _0xecbcx6
                }
            }
        };
        return -1
    },
    getDateFromTick: function(_0xecbcx4, _0xecbcxa) {
        if (_0xecbcx4 === this['visibleTickEnd']) {
            return this['getEnd']()
        };
        var _0xecbcx2 = Math['floor'](_0xecbcx4),
            _0xecbcx9 = _0xecbcx4 - _0xecbcx2,
            _0xecbcx7 = this['getAt'](_0xecbcx2);
        if (!_0xecbcx7) {
            return null
        };
        var _0xecbcx6 = _0xecbcx7['data'];
        var _0xecbcx1 = _0xecbcx2 === 0 ? this['adjustedStart'] : _0xecbcx6['start'];
        var _0xecbcx3 = (_0xecbcx2 == this['getCount']() - 1) && this['isContinuous']() ? this['adjustedEnd'] : _0xecbcx6['end'];
        var _0xecbcx5 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx1, Ext.ux.Scheduler['util']['Date'].MILLI, _0xecbcx9 * (_0xecbcx3 - _0xecbcx1));
        if (_0xecbcxa) {
            _0xecbcx5 = this[_0xecbcxa + 'Date'](_0xecbcx5)
        };
        return _0xecbcx5
    },
    getTicks: function() {
        var _0xecbcx1 = [];
        this['each'](function(_0xecbcx2) {
            _0xecbcx1['push'](_0xecbcx2['data'])
        });
        return _0xecbcx1
    },
    getStart: function() {
        var _0xecbcx1 = this['first']();
        if (_0xecbcx1) {
            return new Date(_0xecbcx1['data']['start'])
        };
        return null
    },
    getEnd: function() {
        var _0xecbcx1 = this['last']();
        if (_0xecbcx1) {
            return new Date(_0xecbcx1['data']['end'])
        };
        return null
    },
    floorDate: function(_0xecbcx4, _0xecbcx9, _0xecbcx7, _0xecbcx1) {
        _0xecbcx9 = _0xecbcx9 !== false;
        var _0xecbcx5 = Ext['Date']['clone'](_0xecbcx4),
            _0xecbcx3 = _0xecbcx9 ? this['getStart']() : null,
            _0xecbcx11 = _0xecbcx1 || this['resolutionIncrement'],
            _0xecbcxd;
        if (_0xecbcx7) {
            _0xecbcxd = _0xecbcx7
        } else {
            _0xecbcxd = _0xecbcx9 ? this['resolutionUnit'] : this['mainUnit']
        };
        var _0xecbcx2 = Ext.ux.Scheduler['util']['Date'];
        var _0xecbcx6 = function(_0xecbcxc, _0xecbcxf) {
            return Math['floor'](_0xecbcxc / _0xecbcxf) * _0xecbcxf
        };
        switch (_0xecbcxd) {
            case _0xecbcx2['MILLI']:
                if (_0xecbcx9) {
                    _0xecbcx5 = _0xecbcx2['add'](_0xecbcx3, _0xecbcx2.MILLI, _0xecbcx6(_0xecbcx2['getDurationInMilliseconds'](_0xecbcx3, _0xecbcx5), _0xecbcx11))
                };
                break;
            case _0xecbcx2['SECOND']:
                if (_0xecbcx9) {
                    _0xecbcx5 = _0xecbcx2['add'](_0xecbcx3, _0xecbcx2.MILLI, _0xecbcx6(_0xecbcx2['getDurationInSeconds'](_0xecbcx3, _0xecbcx5), _0xecbcx11) * 1000)
                } else {
                    _0xecbcx5['setMilliseconds'](0);
                    _0xecbcx5['setSeconds'](_0xecbcx6(_0xecbcx5['getSeconds'](), _0xecbcx11))
                };
                break;
            case _0xecbcx2['MINUTE']:
                if (_0xecbcx9) {
                    _0xecbcx5 = _0xecbcx2['add'](_0xecbcx3, _0xecbcx2.SECOND, _0xecbcx6(_0xecbcx2['getDurationInMinutes'](_0xecbcx3, _0xecbcx5), _0xecbcx11) * 60)
                } else {
                    _0xecbcx5['setMinutes'](_0xecbcx6(_0xecbcx5['getMinutes'](), _0xecbcx11));
                    _0xecbcx5['setSeconds'](0);
                    _0xecbcx5['setMilliseconds'](0)
                };
                break;
            case _0xecbcx2['HOUR']:
                if (_0xecbcx9) {
                    _0xecbcx5 = _0xecbcx2['add'](_0xecbcx3, _0xecbcx2.MINUTE, _0xecbcx6(_0xecbcx2['getDurationInHours'](this['getStart'](), _0xecbcx5), _0xecbcx11) * 60)
                } else {
                    _0xecbcx5['setMinutes'](0);
                    _0xecbcx5['setSeconds'](0);
                    _0xecbcx5['setMilliseconds'](0);
                    _0xecbcx5['setHours'](_0xecbcx6(_0xecbcx5['getHours'](), _0xecbcx11))
                };
                break;
            case _0xecbcx2['DAY']:
                if (_0xecbcx9) {
                    _0xecbcx5 = _0xecbcx2['add'](_0xecbcx3, _0xecbcx2.DAY, _0xecbcx6(_0xecbcx2['getDurationInDays'](_0xecbcx3, _0xecbcx5), _0xecbcx11))
                } else {
                    Ext.ux.Scheduler['util']['Date']['clearTime'](_0xecbcx5);
                    _0xecbcx5['setDate'](_0xecbcx6(_0xecbcx5['getDate']() - 1, _0xecbcx11) + 1)
                };
                break;
            case _0xecbcx2['WEEK']:
                var _0xecbcx8 = _0xecbcx5['getDay']() || 7;
                var _0xecbcxa = this['weekStartDay'] || 7;
                Ext.ux.Scheduler['util']['Date']['clearTime'](_0xecbcx5);
                _0xecbcx5 = _0xecbcx2['add'](_0xecbcx5, _0xecbcx2.DAY, _0xecbcx8 >= _0xecbcxa ? _0xecbcxa - _0xecbcx8 : -(7 - _0xecbcxa + _0xecbcx8));
                if (_0xecbcx5['getDay']() !== _0xecbcxa && _0xecbcx5['getHours']() === 23) {
                    _0xecbcx5 = _0xecbcx2['add'](_0xecbcx5, _0xecbcx2.HOUR, 1)
                };
                break;
            case _0xecbcx2['MONTH']:
                if (_0xecbcx9) {
                    _0xecbcx5 = _0xecbcx2['add'](_0xecbcx3, _0xecbcx2.MONTH, _0xecbcx6(_0xecbcx2['getDurationInMonths'](_0xecbcx3, _0xecbcx5), _0xecbcx11))
                } else {
                    Ext.ux.Scheduler['util']['Date']['clearTime'](_0xecbcx5);
                    _0xecbcx5['setDate'](1);
                    _0xecbcx5['setMonth'](_0xecbcx6(_0xecbcx5['getMonth'](), _0xecbcx11))
                };
                break;
            case _0xecbcx2['QUARTER']:
                Ext.ux.Scheduler['util']['Date']['clearTime'](_0xecbcx5);
                _0xecbcx5['setDate'](1);
                _0xecbcx5 = _0xecbcx2['add'](_0xecbcx5, _0xecbcx2.MONTH, -(_0xecbcx5['getMonth']() % 3));
                break;
            case _0xecbcx2['YEAR']:
                if (_0xecbcx9) {
                    _0xecbcx5 = _0xecbcx2['add'](_0xecbcx3, _0xecbcx2.YEAR, _0xecbcx6(_0xecbcx2['getDurationInYears'](_0xecbcx3, _0xecbcx5), _0xecbcx11))
                } else {
                    var _0xecbcxe = _0xecbcx6(_0xecbcx4['getFullYear']() - 1, _0xecbcx11) + 1;
                    _0xecbcx5 = new Date(0, 0, 1);
                    _0xecbcx5['setFullYear'](_0xecbcxe)
                };
                break
        };
        return _0xecbcx5
    },
    roundDate: function(_0xecbcx17, _0xecbcx2) {
        var _0xecbcx11 = Ext['Date']['clone'](_0xecbcx17),
            _0xecbcx15 = this['resolutionIncrement'];
        _0xecbcx2 = _0xecbcx2 || this['getStart']();
        switch (this['resolutionUnit']) {
            case Ext.ux.Scheduler['util']['Date']['MILLI']:
                var _0xecbcx4 = Ext.ux.Scheduler['util']['Date']['getDurationInMilliseconds'](_0xecbcx2, _0xecbcx11),
                    _0xecbcx3 = Math['round'](_0xecbcx4 / _0xecbcx15) * _0xecbcx15;
                _0xecbcx11 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx2, Ext.ux.Scheduler['util']['Date'].MILLI, _0xecbcx3);
                break;
            case Ext.ux.Scheduler['util']['Date']['SECOND']:
                var _0xecbcxa = Ext.ux.Scheduler['util']['Date']['getDurationInSeconds'](_0xecbcx2, _0xecbcx11),
                    _0xecbcx10 = Math['round'](_0xecbcxa / _0xecbcx15) * _0xecbcx15;
                _0xecbcx11 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx2, Ext.ux.Scheduler['util']['Date'].MILLI, _0xecbcx10 * 1000);
                break;
            case Ext.ux.Scheduler['util']['Date']['MINUTE']:
                var _0xecbcxf = Ext.ux.Scheduler['util']['Date']['getDurationInMinutes'](_0xecbcx2, _0xecbcx11),
                    _0xecbcx1 = Math['round'](_0xecbcxf / _0xecbcx15) * _0xecbcx15;
                _0xecbcx11 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx2, Ext.ux.Scheduler['util']['Date'].SECOND, _0xecbcx1 * 60);
                break;
            case Ext.ux.Scheduler['util']['Date']['HOUR']:
                var _0xecbcxe = Ext.ux.Scheduler['util']['Date']['getDurationInHours'](_0xecbcx2, _0xecbcx11),
                    _0xecbcx8 = Math['round'](_0xecbcxe / _0xecbcx15) * _0xecbcx15;
                _0xecbcx11 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx2, Ext.ux.Scheduler['util']['Date'].MINUTE, _0xecbcx8 * 60);
                break;
            case Ext.ux.Scheduler['util']['Date']['DAY']:
                var _0xecbcx5 = Ext.ux.Scheduler['util']['Date']['getDurationInDays'](_0xecbcx2, _0xecbcx11),
                    _0xecbcx6 = Math['round'](_0xecbcx5 / _0xecbcx15) * _0xecbcx15;
                _0xecbcx11 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx2, Ext.ux.Scheduler['util']['Date'].DAY, _0xecbcx6);
                break;
            case Ext.ux.Scheduler['util']['Date']['WEEK']:
                Ext.ux.Scheduler['util']['Date']['clearTime'](_0xecbcx11);
                var _0xecbcxc = _0xecbcx11['getDay']() - this['weekStartDay'],
                    _0xecbcx14;
                if (_0xecbcxc < 0) {
                    _0xecbcxc = 7 + _0xecbcxc
                };
                if (Math['round'](_0xecbcxc / 7) === 1) {
                    _0xecbcx14 = 7 - _0xecbcxc
                } else {
                    _0xecbcx14 = -_0xecbcxc
                };
                _0xecbcx11 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx11, Ext.ux.Scheduler['util']['Date'].DAY, _0xecbcx14);
                break;
            case Ext.ux.Scheduler['util']['Date']['MONTH']:
                var _0xecbcxb = Ext.ux.Scheduler['util']['Date']['getDurationInMonths'](_0xecbcx2, _0xecbcx11) + (_0xecbcx11['getDate']() / Ext['Date']['getDaysInMonth'](_0xecbcx11)),
                    _0xecbcx7 = Math['round'](_0xecbcxb / _0xecbcx15) * _0xecbcx15;
                _0xecbcx11 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx2, Ext.ux.Scheduler['util']['Date'].MONTH, _0xecbcx7);
                break;
            case Ext.ux.Scheduler['util']['Date']['QUARTER']:
                Ext.ux.Scheduler['util']['Date']['clearTime'](_0xecbcx11);
                _0xecbcx11['setDate'](1);
                _0xecbcx11 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx11, Ext.ux.Scheduler['util']['Date'].MONTH, 3 - (_0xecbcx11['getMonth']() % 3));
                break;
            case Ext.ux.Scheduler['util']['Date']['YEAR']:
                var _0xecbcxd = Ext.ux.Scheduler['util']['Date']['getDurationInYears'](_0xecbcx2, _0xecbcx11),
                    _0xecbcx9 = Math['round'](_0xecbcxd / _0xecbcx15) * _0xecbcx15;
                _0xecbcx11 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx2, Ext.ux.Scheduler['util']['Date'].YEAR, _0xecbcx9);
                break
        };
        return _0xecbcx11
    },
    ceilDate: function(_0xecbcx5, _0xecbcx2, _0xecbcx6, _0xecbcx1) {
        var _0xecbcx4 = Ext['Date']['clone'](_0xecbcx5);
        _0xecbcx2 = _0xecbcx2 !== false;
        _0xecbcx1 = _0xecbcx1 || (_0xecbcx2 ? this['resolutionIncrement'] : 1);
        var _0xecbcx9 = false,
            _0xecbcx3;
        if (_0xecbcx6) {
            _0xecbcx3 = _0xecbcx6
        } else {
            _0xecbcx3 = _0xecbcx2 ? this['resolutionUnit'] : this['mainUnit']
        };
        switch (_0xecbcx3) {
            case Ext.ux.Scheduler['util']['Date']['HOUR']:
                if (_0xecbcx4['getMinutes']() > 0 || _0xecbcx4['getSeconds']() > 0 || _0xecbcx4['getMilliseconds']() > 0) {
                    _0xecbcx9 = true
                };
                break;
            case Ext.ux.Scheduler['util']['Date']['DAY']:
                if (_0xecbcx4['getHours']() > 0 || _0xecbcx4['getMinutes']() > 0 || _0xecbcx4['getSeconds']() > 0 || _0xecbcx4['getMilliseconds']() > 0) {
                    _0xecbcx9 = true
                };
                break;
            case Ext.ux.Scheduler['util']['Date']['WEEK']:
                Ext.ux.Scheduler['util']['Date']['clearTime'](_0xecbcx4);
                if (_0xecbcx4['getDay']() !== this['weekStartDay'] || _0xecbcx5['getTime']() - _0xecbcx4['getTime']() > 0) {
                    _0xecbcx9 = true
                };
                break;
            case Ext.ux.Scheduler['util']['Date']['MONTH']:
                Ext.ux.Scheduler['util']['Date']['clearTime'](_0xecbcx4);
                if (_0xecbcx4['getDate']() !== 1 || _0xecbcx5['getTime']() - _0xecbcx4['getTime']() > 0) {
                    _0xecbcx9 = true
                };
                break;
            case Ext.ux.Scheduler['util']['Date']['QUARTER']:
                Ext.ux.Scheduler['util']['Date']['clearTime'](_0xecbcx4);
                if (_0xecbcx4['getMonth']() % 3 !== 0 || _0xecbcx4['getDate']() !== 1 || _0xecbcx5['getTime']() - _0xecbcx4['getTime']() > 0) {
                    _0xecbcx9 = true
                };
                break;
            case Ext.ux.Scheduler['util']['Date']['YEAR']:
                Ext.ux.Scheduler['util']['Date']['clearTime'](_0xecbcx4);
                if (_0xecbcx4['getMonth']() !== 0 || _0xecbcx4['getDate']() !== 1 || _0xecbcx5['getTime']() - _0xecbcx4['getTime']() > 0) {
                    _0xecbcx9 = true
                };
                break;
            default:
                break
        };
        if (_0xecbcx9) {
            return this['getNext'](_0xecbcx4, _0xecbcx3, _0xecbcx1)
        } else {
            return _0xecbcx4
        }
    },
    getNext: function(_0xecbcx2, _0xecbcx5, _0xecbcx1) {
        return Ext.ux.Scheduler['util']['Date']['getNext'](_0xecbcx2, _0xecbcx5, _0xecbcx1, this['weekStartDay'])
    },
    getResolution: function() {
        return {
            unit: this['resolutionUnit'],
            increment: this['resolutionIncrement']
        }
    },
    setResolution: function(_0xecbcx2, _0xecbcx1) {
        this['resolutionUnit'] = _0xecbcx2;
        this['resolutionIncrement'] = _0xecbcx1 || 1
    },
    shift: function(_0xecbcx1, _0xecbcx2) {
        this['setTimeSpan'](Ext.ux.Scheduler['util']['Date']['add'](this['getStart'](), _0xecbcx2, _0xecbcx1), Ext.ux.Scheduler['util']['Date']['add'](this['getEnd'](), _0xecbcx2, _0xecbcx1))
    },
    shiftNext: function(_0xecbcx1) {
        _0xecbcx1 = _0xecbcx1 || this['getShiftIncrement']();
        var _0xecbcx2 = this['getShiftUnit']();
        this['setTimeSpan'](Ext.ux.Scheduler['util']['Date']['add'](this['getStart'](), _0xecbcx2, _0xecbcx1), Ext.ux.Scheduler['util']['Date']['add'](this['getEnd'](), _0xecbcx2, _0xecbcx1))
    },
    shiftPrevious: function(_0xecbcx1) {
        _0xecbcx1 = -(_0xecbcx1 || this['getShiftIncrement']());
        var _0xecbcx2 = this['getShiftUnit']();
        this['setTimeSpan'](Ext.ux.Scheduler['util']['Date']['add'](this['getStart'](), _0xecbcx2, _0xecbcx1), Ext.ux.Scheduler['util']['Date']['add'](this['getEnd'](), _0xecbcx2, _0xecbcx1))
    },
    getShiftUnit: function() {
        return this['shiftUnit'] || this['mainUnit']
    },
    getShiftIncrement: function() {
        return this['shiftIncrement'] || 1
    },
    getUnit: function() {
        return this['unit']
    },
    getIncrement: function() {
        return this['increment']
    },
    getRowTicks: function() {
        if (this['isWeek']()) {
            var _0xecbcx5 = this['getStart']();
            var _0xecbcx1 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx5, this['headerConfig']['middle']['splitUnit'], 1);
            var _0xecbcx2 = this['findBy'](function(_0xecbcx3) {
                return _0xecbcx3['getStartDate']()['getTime']() >= _0xecbcx1['getTime']()
            });
            if (_0xecbcx2 === -1) {
                return this['getRange']()
            };
            return this['getRange'](0, _0xecbcx2 - 1)
        }
    },
    dateInAxis: function(_0xecbcx5, _0xecbcx8) {
        var _0xecbcxd = false;
        var _0xecbcx6 = this['getStart']();
        var _0xecbcx9 = this['getEnd']();
        if (this['isContinuous']()) {
            _0xecbcxd = _0xecbcx8 ? Ext.ux.Scheduler['util']['Date']['betweenLesserEqual'](_0xecbcx5, _0xecbcx6, _0xecbcx9) : Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0xecbcx5, _0xecbcx6, _0xecbcx9)
        } else {
            var _0xecbcx2 = this['getCount'](),
                _0xecbcx7, _0xecbcx1;
            for (var _0xecbcx3 = 0; _0xecbcx3 < _0xecbcx2; _0xecbcx3++) {
                var _0xecbcx4 = this['getAt'](_0xecbcx3);
                _0xecbcx7 = _0xecbcx4['data']['start'];
                _0xecbcx1 = _0xecbcx4['data']['end'];
                if ((_0xecbcx8 && _0xecbcx5 <= _0xecbcx1) || (!_0xecbcx8 && _0xecbcx5 < _0xecbcx1)) {
                    return _0xecbcx5 >= _0xecbcx7
                }
            }
        };
        return _0xecbcxd
    },
    timeSpanInAxis: function(_0xecbcx7, _0xecbcx5) {
        var _0xecbcx1 = this['getStart']();
        var _0xecbcx9 = this['getEnd']();
        var _0xecbcx4 = _0xecbcx5 - _0xecbcx7;
        if (_0xecbcx4 === 0) {
            return this['dateInAxis'](_0xecbcx7, true)
        };
        if (this['isContinuous']()) {
            return Ext.ux.Scheduler['util']['Date']['intersectSpans'](_0xecbcx7, _0xecbcx5, _0xecbcx1, _0xecbcx9)
        } else {
            var _0xecbcx3 = _0xecbcx7 < _0xecbcx1 && _0xecbcx5 > _0xecbcx9;
            if (_0xecbcx3) {
                return true
            };
            var _0xecbcx2 = this['getTickFromDate'](_0xecbcx7);
            var _0xecbcx6 = this['getTickFromDate'](_0xecbcx5);
            return (_0xecbcx2 !== _0xecbcx6 && (_0xecbcx7 < _0xecbcx9 && _0xecbcx5 > _0xecbcx1))
        }
    },
    isRangeInAxis: function(_0xecbcx2) {
        var _0xecbcx5 = _0xecbcx2['getStartDate'](),
            _0xecbcx1 = _0xecbcx2['getEndDate']();
        if (!_0xecbcx5 || !_0xecbcx1) {
            return false
        };
        return this['timeSpanInAxis'](_0xecbcx5, _0xecbcx1)
    },
    forEachAuxInterval: function(_0xecbcx7, _0xecbcx2, _0xecbcx1, _0xecbcx6) {
        _0xecbcx6 = _0xecbcx6 || this;
        var _0xecbcx5 = this['getEnd'](),
            _0xecbcx9 = this['getStart'](),
            _0xecbcx4 = 0,
            _0xecbcx3;
        if (_0xecbcx9 > _0xecbcx5) {
            throw new Error('Invalid time axis configuration')
        };
        while (_0xecbcx9 < _0xecbcx5) {
            _0xecbcx3 = Ext.ux.Scheduler['util']['Date']['min'](this['getNext'](_0xecbcx9, _0xecbcx7, _0xecbcx2 || 1), _0xecbcx5);
            _0xecbcx1['call'](_0xecbcx6, _0xecbcx9, _0xecbcx3, _0xecbcx4);
            _0xecbcx9 = _0xecbcx3;
            _0xecbcx4++
        }
    },
    consumeViewPreset: function(_0xecbcx1) {
        Ext.apply(this, {
            unit: _0xecbcx1['getBottomHeader']()['unit'],
            increment: _0xecbcx1['getBottomHeader']()['increment'] || 1,
            resolutionUnit: _0xecbcx1['timeResolution']['unit'],
            resolutionIncrement: _0xecbcx1['timeResolution']['increment'],
            mainUnit: _0xecbcx1['getMainHeader']()['unit'],
            shiftUnit: _0xecbcx1['shiftUnit'],
            shiftIncrement: _0xecbcx1['shiftIncrement'] || 1,
            defaultSpan: _0xecbcx1['defaultSpan'] || 1,
            presetName: _0xecbcx1['name'],
            headerConfig: _0xecbcx1['headerConfig']
        })
    }
});
Ext.define('Ext.ux.Scheduler.data.util.AssignmentStoreEventResourcesCache', {
    extend: 'Ext.ux.Scheduler.util.Cache',
    requires: ['Ext.data.Model'],
    assignmentStore: null,
    assignmentStoreDetacher: null,
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    constructor: function(_0xecbcx8) {
        var _0xecbcxd = this,
            _0xecbcx6 = _0xecbcx8['getEventStore'](),
            _0xecbcxc = _0xecbcx6 && _0xecbcx6['getResourceStore']();
        _0xecbcxd['callParent']();

        function _0xecbcxe(_0xecbcx15, _0xecbcx17) {
            var _0xecbcx14 = _0xecbcxd['assignmentStore']['getEventStore'](),
                _0xecbcx12 = _0xecbcx14 && _0xecbcx14['getResourceStore']();
            Ext['Array']['each'](_0xecbcx17, function(_0xecbcx16) {
                var _0xecbcx13 = _0xecbcx12 && _0xecbcx12['getModelById'](_0xecbcx16['getResourceId']());
                if (_0xecbcx13) {
                    _0xecbcxd['add'](_0xecbcx16['getEventId'](), _0xecbcx13)
                } else {
                    _0xecbcxd['clear'](_0xecbcx16['getEventId']())
                }
            })
        }

        function _0xecbcx2(_0xecbcx15, _0xecbcx17) {
            var _0xecbcx14 = _0xecbcxd['assignmentStore']['getEventStore'](),
                _0xecbcx12 = _0xecbcx14 && _0xecbcx14['getResourceStore']();
            Ext['Array']['each'](_0xecbcx17, function(_0xecbcx16) {
                var _0xecbcx13 = _0xecbcx12['getModelById'](_0xecbcx16['getResourceId']());
                if (_0xecbcx13) {
                    _0xecbcxd['remove'](_0xecbcx16['getEventId'](), _0xecbcx13)
                } else {
                    _0xecbcxd['clear'](_0xecbcx16['getEventId']())
                }
            })
        }

        function _0xecbcx10(_0xecbcx19, _0xecbcx15, _0xecbcx18) {
            var _0xecbcx22 = _0xecbcx15['resourceIdField'],
                _0xecbcx1a = _0xecbcx15['previous'] && _0xecbcx22 in _0xecbcx15['previous'],
                _0xecbcx12 = _0xecbcx1a && _0xecbcx15['previous'][_0xecbcx22],
                _0xecbcx24 = _0xecbcx15['eventIdField'],
                _0xecbcx17 = _0xecbcx15['previous'] && _0xecbcx24 in _0xecbcx15['previous'],
                _0xecbcx14 = _0xecbcx17 && _0xecbcx15['previous'][_0xecbcx24],
                _0xecbcx16 = _0xecbcxd['assignmentStore']['getEventStore'](),
                _0xecbcx23 = _0xecbcx16 && _0xecbcx16['getResourceStore'](),
                _0xecbcx13;
            if (_0xecbcx1a || _0xecbcx17) {
                _0xecbcx12 = _0xecbcx1a ? _0xecbcx12 : _0xecbcx15['getResourceId']();
                _0xecbcx14 = _0xecbcx17 ? _0xecbcx14 : _0xecbcx15['getEventId']();
                _0xecbcx13 = _0xecbcx23['getModelById'](_0xecbcx12);
                if (_0xecbcx13) {
                    _0xecbcxd['remove'](_0xecbcx14, _0xecbcx13)
                } else {
                    _0xecbcxd['clear'](_0xecbcx14)
                };
                _0xecbcx13 = _0xecbcx23['getModelById'](_0xecbcx15['getResourceId']());
                if (_0xecbcx13) {
                    _0xecbcxd['add'](_0xecbcx15['getEventId'](), _0xecbcx13)
                } else {
                    _0xecbcxd['clear'](_0xecbcx15['getEventId']())
                }
            }
        }

        function _0xecbcxf(_0xecbcx17) {
            _0xecbcxd['clear']()
        }

        function _0xecbcx5(_0xecbcx17, _0xecbcx15) {
            _0xecbcxd['clear']();
            _0xecbcx1(_0xecbcx15);
            _0xecbcx3(_0xecbcx15 && _0xecbcx15['getResourceStore']())
        }

        function _0xecbcx11(_0xecbcx15, _0xecbcx14, _0xecbcx12, _0xecbcx17) {
            _0xecbcxd['move'](_0xecbcx12, _0xecbcx17)
        }

        function _0xecbcx9(_0xecbcx15, _0xecbcx17) {
            Ext['Array']['each'](_0xecbcx17, function(_0xecbcx14) {
                _0xecbcxd['clear'](_0xecbcx14)
            })
        }

        function _0xecbcxa() {
            _0xecbcxd['clear']()
        }

        function _0xecbcxb(_0xecbcx17, _0xecbcx15) {
            _0xecbcxd['clear']();
            _0xecbcx3(_0xecbcx15)
        }

        function _0xecbcx7(_0xecbcx17, _0xecbcx15) {
            Ext['Array']['each'](_0xecbcx15, function(_0xecbcx14) {
                _0xecbcxd['uncache'](_0xecbcx14)
            })
        }

        function _0xecbcx4() {
            _0xecbcxd['clear']()
        }

        function _0xecbcx1(_0xecbcx17) {
            Ext['destroy'](_0xecbcxd['eventStoreDetacher']);
            _0xecbcxd['eventStoreDetacher'] = _0xecbcx17 && _0xecbcx17['on']({
                idchanged: _0xecbcx11,
                remove: _0xecbcx9,
                clear: _0xecbcxa,
                cacheresethint: _0xecbcxa,
                rootchange: _0xecbcxa,
                resourcestorechange: _0xecbcxb,
                priority: 100,
                destroyable: true
            })
        }

        function _0xecbcx3(_0xecbcx17) {
            Ext['destory'](_0xecbcxd['resourceStoreDetacher']);
            _0xecbcxd['resourceStoreDetacher'] = _0xecbcx17 && _0xecbcx17['on']({
                remove: _0xecbcx7,
                clear: _0xecbcx4,
                cacheresethint: _0xecbcx4,
                rootchange: _0xecbcx4,
                priority: 100,
                destroyable: true
            })
        }
        _0xecbcxd['assignmentStoreDetacher'] = _0xecbcx8['on']({
            add: _0xecbcxe,
            remove: _0xecbcx2,
            update: _0xecbcx10,
            clear: _0xecbcxf,
            cacheresethint: _0xecbcxf,
            priority: 100,
            destroyable: true
        });
        _0xecbcxd['assignmentStore'] = _0xecbcx8
    },
    destroy: function() {
        var _0xecbcx1 = this;
        Ext['destroyMembers'](_0xecbcx1, 'assignmentStoreDetacher', 'eventStoreDetacher', 'resourceStoreDetacher');
        _0xecbcx1['assignmentStore'] = null
    },
    get: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx5 = this;
        _0xecbcx2 = _0xecbcx2 || function() {
            return _0xecbcx5['assignmentStore']['mapAssignmentsForEvent'](_0xecbcx1, function _0xecbcx4(_0xecbcx6) {
                return _0xecbcx6['getResource']()
            }, function _0xecbcx3(_0xecbcx6) {
                return !!_0xecbcx6
            })
        };
        return _0xecbcx5['callParent']([_0xecbcx1, _0xecbcx2])
    }
});
Ext.define('Ext.ux.Scheduler.data.util.AssignmentStoreResourceEventsCache', {
    extend: 'Ext.ux.Scheduler.util.Cache',
    requires: ['Ext.data.Model'],
    assignmentStore: null,
    assignmentStoreDetacher: null,
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    constructor: function(_0xecbcx8) {
        var _0xecbcx11 = this,
            _0xecbcx6 = _0xecbcx8['getEventStore'](),
            _0xecbcxc = _0xecbcx6 && _0xecbcx6['getResourceStore']();
        _0xecbcx11['callParent']();

        function _0xecbcxe(_0xecbcx15, _0xecbcx17) {
            var _0xecbcx14 = _0xecbcx11['assignmentStore']['getEventStore']();
            Ext['Array']['each'](_0xecbcx17, function(_0xecbcx13) {
                var _0xecbcx12 = _0xecbcx14 && _0xecbcx14['getModelById'](_0xecbcx13['getEventId']());
                if (_0xecbcx12) {
                    _0xecbcx11['add'](_0xecbcx13['getResourceId'](), _0xecbcx12)
                } else {
                    _0xecbcx11['clear'](_0xecbcx13['getResourceId']())
                }
            })
        }

        function _0xecbcx2(_0xecbcx15, _0xecbcx17) {
            var _0xecbcx14 = _0xecbcx11['assignmentStore']['getEventStore']();
            Ext['Array']['each'](_0xecbcx17, function(_0xecbcx13) {
                var _0xecbcx12 = _0xecbcx14 && _0xecbcx14['getModelById'](_0xecbcx13['getEventId']());
                if (_0xecbcx12) {
                    _0xecbcx11['remove'](_0xecbcx13['getResourceId'](), _0xecbcx12)
                } else {
                    _0xecbcx11['clear'](_0xecbcx13['getResourceId']())
                }
            })
        }

        function _0xecbcx10(_0xecbcx23, _0xecbcx14, _0xecbcx18) {
            var _0xecbcx22 = _0xecbcx14['resourceIdField'],
                _0xecbcx19 = _0xecbcx14['previous'] && _0xecbcx22 in _0xecbcx14['previous'],
                _0xecbcx13 = _0xecbcx19 && _0xecbcx14['previous'][_0xecbcx22],
                _0xecbcx24 = _0xecbcx14['eventIdField'],
                _0xecbcx17 = _0xecbcx14['previous'] && _0xecbcx24 in _0xecbcx14['previous'],
                _0xecbcx12 = _0xecbcx17 && _0xecbcx14['previous'][_0xecbcx24],
                _0xecbcx16 = _0xecbcx11['assignmentStore']['getEventStore'](),
                _0xecbcx15;
            if (_0xecbcx19 || _0xecbcx17) {
                _0xecbcx13 = _0xecbcx19 ? _0xecbcx13 : _0xecbcx14['getResourceId']();
                _0xecbcx12 = _0xecbcx17 ? _0xecbcx12 : _0xecbcx14['getEventId']();
                _0xecbcx15 = _0xecbcx16 && _0xecbcx16['getModelById'](_0xecbcx12);
                if (_0xecbcx15) {
                    _0xecbcx11['remove'](_0xecbcx13, _0xecbcx15)
                } else {
                    _0xecbcx11['clear'](_0xecbcx13)
                };
                _0xecbcx15 = _0xecbcx16 && _0xecbcx16['getModelById'](_0xecbcx14['getEventId']());
                if (_0xecbcx15) {
                    _0xecbcx11['add'](_0xecbcx14['getResourceId'](), _0xecbcx15)
                } else {
                    _0xecbcx11['clear'](_0xecbcx14['getResourceId']())
                }
            }
        }

        function _0xecbcxf(_0xecbcx17) {
            _0xecbcx11['clear']()
        }

        function _0xecbcx5(_0xecbcx17, _0xecbcx15) {
            _0xecbcx11['clear']();
            _0xecbcx1(_0xecbcx15);
            _0xecbcx3(_0xecbcx15 && _0xecbcx15['getResourceStore']())
        }

        function _0xecbcx9(_0xecbcx15, _0xecbcx17) {
            Ext['Array']['each'](_0xecbcx17, function(_0xecbcx14) {
                _0xecbcx11['uncache'](_0xecbcx14)
            })
        }

        function _0xecbcxa() {
            _0xecbcx11['clear']()
        }

        function _0xecbcxb(_0xecbcx17, _0xecbcx15) {
            _0xecbcx11['clear']();
            _0xecbcx3(_0xecbcx15)
        }

        function _0xecbcxd(_0xecbcx15, _0xecbcx14, _0xecbcx12, _0xecbcx17) {
            _0xecbcx11['move'](_0xecbcx12, _0xecbcx17)
        }

        function _0xecbcx7(_0xecbcx17, _0xecbcx15) {
            Ext['Array']['each'](_0xecbcx15, function(_0xecbcx14) {
                _0xecbcx11['clear'](_0xecbcx14)
            })
        }

        function _0xecbcx4() {
            _0xecbcx11['clear']()
        }

        function _0xecbcx1(_0xecbcx17) {
            Ext['destroy'](_0xecbcx11['eventStoreDetacher']);
            _0xecbcx11['eventStoreDetacher'] = _0xecbcx17 && _0xecbcx17['on']({
                remove: _0xecbcx9,
                cacheresethint: _0xecbcxa,
                clear: _0xecbcxa,
                rootchange: _0xecbcxa,
                resourcestorechange: _0xecbcxb,
                priority: 100,
                destroyable: true
            })
        }

        function _0xecbcx3(_0xecbcx17) {
            Ext['destroy'](_0xecbcx11['resourceStoreDetacher']);
            _0xecbcx11['resourceStoreDetacher'] = _0xecbcx17 && _0xecbcx17['on']({
                idchanged: _0xecbcxd,
                remove: _0xecbcx7,
                cacheresethint: _0xecbcx4,
                clear: _0xecbcx4,
                rootchange: _0xecbcx4,
                priority: 100,
                destroyable: true
            })
        }
        _0xecbcx11['assignmentStoreDetacher'] = _0xecbcx8['on']({
            add: _0xecbcxe,
            remove: _0xecbcx2,
            update: _0xecbcx10,
            cacheresethint: _0xecbcxf,
            clear: _0xecbcxf,
            eventstorechange: _0xecbcx5,
            priority: 100,
            destroyable: true
        });
        _0xecbcx1(_0xecbcx6);
        _0xecbcx3(_0xecbcxc);
        _0xecbcx11['assignmentStore'] = _0xecbcx8
    },
    destroy: function() {
        var _0xecbcx1 = this;
        Ext['destroyMembers'](_0xecbcx1, 'assignmentStoreDetacher', 'eventStoreDetacher', 'resourceStoreDetacher');
        _0xecbcx1['assignmentStore'] = null
    },
    get: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx5 = this;
        _0xecbcx2 = _0xecbcx2 || function() {
            return _0xecbcx5['assignmentStore']['mapAssignmentsForResource'](_0xecbcx1, function _0xecbcx4(_0xecbcx6) {
                return _0xecbcx6['getEvent']()
            }, function _0xecbcx3(_0xecbcx6) {
                return !!_0xecbcx6
            })
        };
        return _0xecbcx5['callParent']([_0xecbcx1, _0xecbcx2])
    }
});
Ext.define('Ext.ux.Scheduler.eventlayout.Horizontal', {
    nbrOfBandsByResource: null,
    bandIndexToPxConvertFn: null,
    bandIndexToPxConvertScope: null,
    constructor: function(_0xecbcx1) {
        Ext.apply(this, _0xecbcx1);
        this['nbrOfBandsByResource'] = {}
    },
    clearCache: function(_0xecbcx1) {
        if (_0xecbcx1) {
            delete this['nbrOfBandsByResource'][_0xecbcx1['internalId']]
        } else {
            this['nbrOfBandsByResource'] = {}
        }
    },
    getNumberOfBands: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = this['nbrOfBandsByResource'];
        if (_0xecbcx1.hasOwnProperty(_0xecbcx5['internalId'])) {
            return _0xecbcx1[_0xecbcx5['internalId']]
        };
        var _0xecbcx4 = Ext['isFunction'](_0xecbcx2) ? _0xecbcx2() : _0xecbcx2;
        var _0xecbcx3 = Ext['Array']['map'](_0xecbcx4, function(_0xecbcx6) {
            return {
                start: _0xecbcx6['getStartDate'](),
                end: _0xecbcx6['getEndDate'](),
                event: _0xecbcx6
            }
        });
        return this['applyLayout'](_0xecbcx3, _0xecbcx5)
    },
    applyLayout: function(_0xecbcx1, _0xecbcx5) {
        var _0xecbcx3 = _0xecbcx1['slice']();
        var _0xecbcx2 = this;
        _0xecbcx3['sort'](function(_0xecbcx6, _0xecbcx4) {
            return _0xecbcx2['sortEvents'](_0xecbcx6['event'], _0xecbcx4['event'])
        });
        return this['nbrOfBandsByResource'][_0xecbcx5['internalId']] = this['layoutEventsInBands'](_0xecbcx3)
    },
    sortEvents: function(_0xecbcx6, _0xecbcx3) {
        var _0xecbcx9 = _0xecbcx6['getStartDate']();
        var _0xecbcx4 = _0xecbcx3['getStartDate']();
        var _0xecbcx5 = (_0xecbcx9 - _0xecbcx4 === 0);
        if (_0xecbcx5) {
            return _0xecbcx6['getEndDate']() > _0xecbcx3['getEndDate']() ? -1 : 1
        } else {
            return (_0xecbcx9 < _0xecbcx4) ? -1 : 1
        }
    },
    layoutEventsInBands: function(_0xecbcx2) {
        var _0xecbcx1 = 0;
        do {
            var _0xecbcx5 = _0xecbcx2[0];
            while (_0xecbcx5) {
                _0xecbcx5['top'] = this['bandIndexToPxConvertFn']['call'](this['bandIndexToPxConvertScope'] || this, _0xecbcx1, _0xecbcx5['event']);
                Ext['Array']['remove'](_0xecbcx2, _0xecbcx5);
                _0xecbcx5 = this['findClosestSuccessor'](_0xecbcx5, _0xecbcx2)
            };
            _0xecbcx1++
        } while (_0xecbcx2['length'] > 0);;
        return _0xecbcx1
    },
    findClosestSuccessor: function(_0xecbcx1, _0xecbcx8) {
        var _0xecbcx6 = Infinity,
            _0xecbcx2, _0xecbcx9 = _0xecbcx1['end'],
            _0xecbcx7, _0xecbcx5 = _0xecbcx1['end'] - _0xecbcx1['start'] === 0;
        for (var _0xecbcx4 = 0, _0xecbcx3 = _0xecbcx8['length']; _0xecbcx4 < _0xecbcx3; _0xecbcx4++) {
            _0xecbcx7 = _0xecbcx8[_0xecbcx4]['start'] - _0xecbcx9;
            if (_0xecbcx7 >= 0 && _0xecbcx7 < _0xecbcx6 && (_0xecbcx7 > 0 || _0xecbcx8[_0xecbcx4]['end'] - _0xecbcx8[_0xecbcx4]['start'] > 0 || !_0xecbcx5)) {
                _0xecbcx2 = _0xecbcx8[_0xecbcx4];
                _0xecbcx6 = _0xecbcx7
            }
        };
        return _0xecbcx2
    }
});
Ext.define('Ext.ux.Scheduler.eventlayout.Table', {
    extend: 'Ext.ux.Scheduler.eventlayout.Horizontal',
    timeAxisViewModel: null,
    layoutEventsInBands: function(_0xecbcx5) {
        var _0xecbcx7 = this['timeAxisViewModel'];
        var _0xecbcx6 = _0xecbcx7['timeAxis'];
        var _0xecbcx1 = 0;
        do {
            var _0xecbcx4 = _0xecbcx5[0];
            while (_0xecbcx4) {
                _0xecbcx4['top'] = this['bandIndexToPxConvertFn']['call'](this['bandIndexToPxConvertScope'] || this, _0xecbcx1, _0xecbcx4['event']);
                var _0xecbcx2 = Math['floor'](_0xecbcx6['getTickFromDate'](_0xecbcx4['start']));
                var _0xecbcx9 = this['timeAxisViewModel']['getPositionFromDate'](_0xecbcx6['getAt'](_0xecbcx2)['getStartDate']());
                var _0xecbcx3 = this['timeAxisViewModel']['getTickWidth']();
                _0xecbcx4['left'] = _0xecbcx9;
                _0xecbcx4['width'] = _0xecbcx3;
                Ext['Array']['remove'](_0xecbcx5, _0xecbcx4);
                _0xecbcx4 = this['findClosestSuccessor'](_0xecbcx4, _0xecbcx5)
            };
            _0xecbcx1++
        } while (_0xecbcx5['length'] > 0);;
        return _0xecbcx1
    },
    findClosestSuccessor: function(_0xecbcx4, _0xecbcx3) {
        var _0xecbcx6 = this['timeAxisViewModel']['timeAxis'];
        var _0xecbcx9 = Math['floor'](_0xecbcx6['getTickFromDate'](_0xecbcx4['start']));
        var _0xecbcx5 = _0xecbcx6['getAt'](_0xecbcx9);
        for (var _0xecbcx2 = 0, _0xecbcx1 = _0xecbcx3['length']; _0xecbcx2 < _0xecbcx1; _0xecbcx2++) {
            if (_0xecbcx3[_0xecbcx2]['start'] >= _0xecbcx5['getEndDate']()) {
                return _0xecbcx3[_0xecbcx2]
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.eventlayout.Vertical', {
    requires: ['Ext.ux.Scheduler.util.Date'],
    view: null,
    constructor: function(_0xecbcx1) {
        Ext.apply(this, _0xecbcx1)
    },
    applyLayout: function(_0xecbcx1, _0xecbcx9) {
        if (_0xecbcx1['length'] === 0) {
            return
        };
        var _0xecbcx12 = this;
        _0xecbcx1['sort'](function(_0xecbcx8, _0xecbcxa) {
            return _0xecbcx12['sortEvents'](_0xecbcx8['event'], _0xecbcxa['event'])
        });
        var _0xecbcx3, _0xecbcx5, _0xecbcx7 = this['view'],
            _0xecbcxd = Ext.ux.Scheduler['util']['Date'],
            _0xecbcxf = 1,
            _0xecbcx17, _0xecbcx2, _0xecbcx4, _0xecbcx10;
        for (var _0xecbcx15 = 0, _0xecbcxb = _0xecbcx1['length']; _0xecbcx15 < _0xecbcxb; _0xecbcx15++) {
            _0xecbcx4 = _0xecbcx1[_0xecbcx15];
            _0xecbcx3 = _0xecbcx4['start'];
            _0xecbcx5 = _0xecbcx4['end'];
            _0xecbcx2 = this['findStartSlot'](_0xecbcx1, _0xecbcx4);
            var _0xecbcx14 = this['getCluster'](_0xecbcx1, _0xecbcx15);
            if (_0xecbcx14['length'] > 1) {
                _0xecbcx4['left'] = _0xecbcx2['start'];
                _0xecbcx4['width'] = _0xecbcx2['end'] - _0xecbcx2['start'];
                _0xecbcx10 = 1;
                while (_0xecbcx10 < (_0xecbcx14['length'] - 1) && _0xecbcx14[_0xecbcx10 + 1]['start'] - _0xecbcx4['start'] === 0) {
                    _0xecbcx10++
                };
                var _0xecbcxc = this['findStartSlot'](_0xecbcx1, _0xecbcx14[_0xecbcx10]);
                if (_0xecbcxc && _0xecbcxc['start'] < 0.8) {
                    _0xecbcx14 = _0xecbcx14['slice'](0, _0xecbcx10)
                }
            };
            var _0xecbcx6 = _0xecbcx14['length'],
                _0xecbcxe = (_0xecbcx2['end'] - _0xecbcx2['start']) / _0xecbcx6;
            for (_0xecbcx10 = 0; _0xecbcx10 < _0xecbcx6; _0xecbcx10++) {
                _0xecbcx14[_0xecbcx10]['width'] = _0xecbcxe;
                _0xecbcx14[_0xecbcx10]['left'] = _0xecbcx2['start'] + (_0xecbcx10 * _0xecbcxe)
            };
            _0xecbcx15 += _0xecbcx6 - 1
        };
        for (_0xecbcx15 = 0, _0xecbcxb = _0xecbcx1['length']; _0xecbcx15 < _0xecbcxb; _0xecbcx15++) {
            _0xecbcx1[_0xecbcx15]['width'] = _0xecbcx1[_0xecbcx15]['width'] * _0xecbcx9;
            _0xecbcx1[_0xecbcx15]['left'] = _0xecbcx7['barMargin'] + (_0xecbcx1[_0xecbcx15]['left'] * _0xecbcx9)
        }
    },
    findStartSlot: function(_0xecbcx5, _0xecbcx3) {
        var _0xecbcx1 = this['getPriorOverlappingEvents'](_0xecbcx5, _0xecbcx3),
            _0xecbcx2;
        if (_0xecbcx1['length'] === 0) {
            return {
                start: 0,
                end: 1
            }
        };
        for (_0xecbcx2 = 0; _0xecbcx2 < _0xecbcx1['length']; _0xecbcx2++) {
            if (_0xecbcx2 === 0 && _0xecbcx1[0]['left'] > 0) {
                return {
                    start: 0,
                    end: _0xecbcx1[0]['left']
                }
            } else {
                if (_0xecbcx1[_0xecbcx2]['left'] + _0xecbcx1[_0xecbcx2]['width'] < (_0xecbcx2 < _0xecbcx1['length'] - 1 ? _0xecbcx1[_0xecbcx2 + 1]['left'] : 1)) {
                    return {
                        start: _0xecbcx1[_0xecbcx2]['left'] + _0xecbcx1[_0xecbcx2]['width'],
                        end: _0xecbcx2 < _0xecbcx1['length'] - 1 ? _0xecbcx1[_0xecbcx2 + 1]['left'] : 1
                    }
                }
            }
        };
        return false
    },
    getPriorOverlappingEvents: function(_0xecbcx4, _0xecbcx6) {
        var _0xecbcx9 = Ext.ux.Scheduler['util']['Date'],
            _0xecbcx7 = _0xecbcx6['start'],
            _0xecbcx2 = _0xecbcx6['end'],
            _0xecbcx5 = [];
        for (var _0xecbcx3 = 0, _0xecbcx1 = Ext['Array']['indexOf'](_0xecbcx4, _0xecbcx6); _0xecbcx3 < _0xecbcx1; _0xecbcx3++) {
            if (_0xecbcx9['intersectSpans'](_0xecbcx7, _0xecbcx2, _0xecbcx4[_0xecbcx3]['start'], _0xecbcx4[_0xecbcx3]['end'])) {
                _0xecbcx5['push'](_0xecbcx4[_0xecbcx3])
            }
        };
        _0xecbcx5['sort'](this['sortOverlappers']);
        return _0xecbcx5
    },
    sortOverlappers: function(_0xecbcx2, _0xecbcx1) {
        return _0xecbcx2['left'] < _0xecbcx1['left'] ? -1 : 1
    },
    getCluster: function(_0xecbcx4, _0xecbcx9) {
        if (_0xecbcx9 >= _0xecbcx4['length'] - 1) {
            return [_0xecbcx4[_0xecbcx9]]
        };
        var _0xecbcx5 = [_0xecbcx4[_0xecbcx9]],
            _0xecbcx7 = _0xecbcx4[_0xecbcx9]['start'],
            _0xecbcx2 = _0xecbcx4[_0xecbcx9]['end'],
            _0xecbcx1 = _0xecbcx4['length'],
            _0xecbcx6 = Ext.ux.Scheduler['util']['Date'],
            _0xecbcx3 = _0xecbcx9 + 1;
        while (_0xecbcx3 < _0xecbcx1 && _0xecbcx6['intersectSpans'](_0xecbcx7, _0xecbcx2, _0xecbcx4[_0xecbcx3]['start'], _0xecbcx4[_0xecbcx3]['end'])) {
            _0xecbcx5['push'](_0xecbcx4[_0xecbcx3]);
            _0xecbcx7 = _0xecbcx6['max'](_0xecbcx7, _0xecbcx4[_0xecbcx3]['start']);
            _0xecbcx2 = _0xecbcx6['min'](_0xecbcx4[_0xecbcx3]['end'], _0xecbcx2);
            _0xecbcx3++
        };
        return _0xecbcx5
    },
    sortEvents: function(_0xecbcx6, _0xecbcx3) {
        var _0xecbcx9 = _0xecbcx6['getStartDate'](),
            _0xecbcxa = _0xecbcx6['getEndDate']();
        var _0xecbcx4 = _0xecbcx3['getStartDate'](),
            _0xecbcx7 = _0xecbcx3['getEndDate']();
        var _0xecbcx5 = (_0xecbcx9 - _0xecbcx4 === 0);
        if (_0xecbcx5) {
            return _0xecbcxa > _0xecbcx7 ? -1 : 1
        } else {
            return (_0xecbcx9 < _0xecbcx4) ? -1 : 1
        }
    }
});
Ext.define('Ext.ux.Scheduler.feature.AbstractTimeSpan', {
    extend: 'Ext.AbstractPlugin',
    mixins: {
        observable: 'Ext.util.Observable'
    },
    lockableScope: 'top',
    schedulerView: null,
    timeAxis: null,
    expandToFitView: false,
    disabled: false,
    cls: null,
    clsField: 'Cls',
    template: null,
    store: null,
    renderElementsBuffered: false,
    renderDelay: 0,
    refreshSizeOnItemUpdate: true,
    _renderTimer: null,
    showHeaderElements: false,
    headerTemplate: null,
    innerHeaderTpl: null,
    headerContainerCls: 'sch-header-secondary-canvas',
    headerContainerEl: null,
    renderingDoneEvent: null,
    constructor: function(_0xecbcx1) {
        this['uniqueCls'] = this['uniqueCls'] || ('sch-timespangroup-' + Ext['id']());
        Ext.apply(this, _0xecbcx1);
        this['mixins']['observable']['constructor']['call'](this);
        this['callParent'](arguments)
    },
    init: function(_0xecbcx1) {
        if (Ext['versions']['touch'] && !_0xecbcx1['isReady']()) {
            _0xecbcx1['on']('viewready', function() {
                this['init'](_0xecbcx1)
            }, this);
            return
        };
        if (typeof this['innerHeaderTpl'] === 'string') {
            this['innerHeaderTpl'] = new Ext.XTemplate(this['innerHeaderTpl'])
        };
        var _0xecbcx2 = this['innerHeaderTpl'];
        if (!this['headerTemplate']) {
            this['headerTemplate'] = new Ext.XTemplate('<tpl for=".">', '<div id="{id}" class="{cls}" title="{[values.Name || values.Text || ""]}" style="{side}:{position}px;">' + (_0xecbcx2 ? '{[this.renderInner(values)]}' : '') + '</div>', '</tpl>', {
                renderInner: function(_0xecbcx5) {
                    return _0xecbcx2['apply'](_0xecbcx5)
                }
            })
        };
        this['schedulerView'] = _0xecbcx1['getSchedulingView']();
        this['panel'] = _0xecbcx1;
        this['timeAxis'] = _0xecbcx1['getTimeAxis']();
        this['store'] = Ext['StoreManager']['lookup'](this['store']);
        if (!this['store']) {
            Ext['Error']['raise']('Error: You must define a store for this plugin')
        };
        this['panel']['on']({
            horizontaltimeaxiscolumnrender: this['renderHeaderElements'],
            scope: this
        });
        if (!this['schedulerView']['getEl']()) {
            this['schedulerView']['on']({
                viewready: this['onViewReady'],
                scope: this
            })
        } else {
            this['onViewReady']()
        }
    },
    setDisabled: function(_0xecbcx1) {
        if (_0xecbcx1) {
            this['removeElements']()
        };
        this['disabled'] = _0xecbcx1
    },
    removeElements: function() {
        this['removeBodyElements']();
        if (this['showHeaderElements']) {
            this['removeHeaderElements']()
        }
    },
    getBodyElements: function() {
        var _0xecbcx1 = this['getContainerEl']();
        if (_0xecbcx1) {
            return _0xecbcx1['select']('.' + this['uniqueCls'])
        };
        return null
    },
    getHeaderContainerEl: function() {
        var _0xecbcx3 = this['headerContainerEl'],
            _0xecbcx5 = Ext['baseCSSPrefix'],
            _0xecbcx2;
        if (!_0xecbcx3 || !_0xecbcx3['dom']) {
            if (this['schedulerView']['isHorizontal']()) {
                var _0xecbcx1 = this['panel']['getHorizontalTimeAxisColumn']();
                if (_0xecbcx1['headerView']) {
                    _0xecbcx2 = _0xecbcx1['headerView']['containerEl']
                } else {
                    return null
                }
            } else {
                _0xecbcx2 = this['panel']['lockedGrid']['getView']()['el']
            };
            if (_0xecbcx2) {
                _0xecbcx3 = _0xecbcx2['down']('.' + this['headerContainerCls']);
                if (!_0xecbcx3) {
                    _0xecbcx3 = _0xecbcx2['appendChild']({
                        cls: this['headerContainerCls']
                    })
                };
                this['headerContainerEl'] = _0xecbcx3
            }
        };
        return _0xecbcx3
    },
    getHeaderElements: function() {
        var _0xecbcx1 = this['getHeaderContainerEl']();
        if (_0xecbcx1) {
            return _0xecbcx1['select']('.' + this['uniqueCls'])
        };
        return null
    },
    removeBodyElements: function() {
        var _0xecbcx1 = this['getBodyElements']();
        if (_0xecbcx1) {
            _0xecbcx1['each'](function(_0xecbcx2) {
                _0xecbcx2['destroy']()
            })
        }
    },
    removeHeaderElements: function() {
        var _0xecbcx1 = this['getHeaderElements']();
        if (_0xecbcx1) {
            _0xecbcx1['each'](function(_0xecbcx2) {
                _0xecbcx2['destroy']()
            })
        }
    },
    getElementId: function(_0xecbcx1) {
        return this['uniqueCls'] + '-' + _0xecbcx1['internalId']
    },
    getHeaderElementId: function(_0xecbcx1) {
        return this['uniqueCls'] + '-header-' + _0xecbcx1['internalId']
    },
    getTemplateData: function(_0xecbcx1) {
        return this['prepareTemplateData'] ? this['prepareTemplateData'](_0xecbcx1) : _0xecbcx1['data']
    },
    getElementCls: function(_0xecbcx1, _0xecbcx5) {
        var _0xecbcx2 = _0xecbcx1['clsField'] || this['clsField'];
        if (!_0xecbcx5) {
            _0xecbcx5 = this['getTemplateData'](_0xecbcx1)
        };
        return this['cls'] + ' ' + this['uniqueCls'] + ' ' + (_0xecbcx5[_0xecbcx2] || '')
    },
    getHeaderElementCls: function(_0xecbcx1, _0xecbcx5) {
        var _0xecbcx2 = _0xecbcx1['clsField'] || this['clsField'];
        if (!_0xecbcx5) {
            _0xecbcx5 = this['getTemplateData'](_0xecbcx1)
        };
        return 'sch-header-indicator ' + this['uniqueCls'] + ' ' + (_0xecbcx5[_0xecbcx2] || '')
    },
    getContainerEl: function() {
        return this['schedulerView']['getSecondaryCanvasEl']()
    },
    onViewReady: function(_0xecbcx2) {
        var _0xecbcx1 = this['schedulerView'];
        this['storeListeners'] = {
            load: this['renderElements'],
            datachanged: this['renderElements'],
            clear: this['renderElements'],
            update: this['refreshSingle'],
            scope: this
        };
        this['store']['on'](this['storeListeners']);
        this['panel']['on']({
            beforemodechange: this['onTimelinePanelBeforeModeChange'],
            modechange: this['onTimelinePanelModeChange'],
            scope: this
        });
        this['viewListeners'] = {
            refresh: this['renderElements'],
            scope: this
        };
        this['headerListeners'] = {
            afterlayout: this['renderElements'],
            scope: this
        };
        if (_0xecbcx1['isWeekView']()) {
            _0xecbcx1['headerCt']['on'](this['headerListeners'])
        } else {
            _0xecbcx1['on'](this['viewListeners']);
            this['renderElements']()
        }
    },
    onTimelinePanelBeforeModeChange: function() {
        var _0xecbcx1 = this['schedulerView'];
        if (_0xecbcx1['isWeekView']()) {
            _0xecbcx1['headerCt']['un'](this['headerListeners'])
        } else {
            this['schedulerView']['un'](this['viewListeners'])
        }
    },
    onTimelinePanelModeChange: function() {
        var _0xecbcx1 = this['schedulerView'];
        if (_0xecbcx1['isWeekView']()) {
            _0xecbcx1['headerCt']['on'](this['headerListeners'])
        } else {
            _0xecbcx1['on'](this['viewListeners'])
        };
        this['forceNewRenderingTimeout']()
    },
    forceNewRenderingTimeout: function() {
        this['renderElementsBuffered'] = false;
        clearTimeout(this._renderTimer);
        this['renderElements']()
    },
    renderElements: function() {
        if (this['renderElementsBuffered'] || this['disabled']) {
            return
        };
        this['renderElementsBuffered'] = true;
        clearTimeout(this._renderTimer);
        this['_renderTimer'] = Ext['Function']['defer'](this['renderElementsInternal'], this['renderDelay'], this)
    },
    setElementX: function(_0xecbcx2, _0xecbcx1) {
        if (this['panel']['rtl']) {
            _0xecbcx2['setRight'](_0xecbcx1)
        } else {
            _0xecbcx2['setLeft'](_0xecbcx1)
        }
    },
    getHeaderElementPosition: function(_0xecbcx2) {
        var _0xecbcx1 = this['schedulerView']['getTimeAxisViewModel']();
        return Math['round'](_0xecbcx1['getPositionFromDate'](_0xecbcx2))
    },
    renderBodyElementsInternal: function(_0xecbcx2) {
        var _0xecbcx3 = this['timeAxis']['getStart'](),
            _0xecbcx1 = this['timeAxis']['getEnd'](),
            _0xecbcx5 = this['getElementData'](_0xecbcx3, _0xecbcx1, _0xecbcx2);
        this['template']['append'](this['getContainerEl'](), _0xecbcx5)
    },
    getHeaderElementData: function(_0xecbcx1, _0xecbcx2) {
        throw 'Abstract method call'
    },
    renderHeaderElements: function(_0xecbcx1) {
        var _0xecbcx5 = this['getHeaderContainerEl']();
        if (_0xecbcx5) {
            var _0xecbcx2 = this['getHeaderElementData'](_0xecbcx1);
            this['headerTemplate']['append'](_0xecbcx5, _0xecbcx2)
        }
    },
    renderElementsInternal: function() {
        this['renderElementsBuffered'] = false;
        var _0xecbcx1 = this['schedulerView'];
        if (this['disabled'] || _0xecbcx1['isDestroyed'] || !this['getContainerEl']() || _0xecbcx1['store']['getCount']() === 0) {
            return
        };
        if (_0xecbcx1['isWeekView']()) {
            var _0xecbcx2 = _0xecbcx1['getColumnManager']()['getColumns']();
            if (_0xecbcx2[0] && !_0xecbcx2[0]['rendered']) {
                return
            }
        };
        this['removeElements']();
        this['renderBodyElementsInternal']();
        if (this['showHeaderElements']) {
            this['headerContainerEl'] = null;
            this['renderHeaderElements']()
        };
        if (this['renderingDoneEvent']) {
            this['fireEvent'](this['renderingDoneEvent'], this)
        }
    },
    getElementData: function(_0xecbcx3, _0xecbcx5, _0xecbcx1, _0xecbcx2) {
        throw 'Abstract method call'
    },
    updateBodyElement: function(_0xecbcx2) {
        var _0xecbcx5 = Ext['get'](this['getElementId'](_0xecbcx2));
        if (_0xecbcx5) {
            var _0xecbcx4 = this['timeAxis']['getStart'](),
                _0xecbcx1 = this['timeAxis']['getEnd'](),
                _0xecbcx3 = this['getElementData'](_0xecbcx4, _0xecbcx1, [_0xecbcx2])[0];
            if (_0xecbcx3) {
                _0xecbcx5['dom']['className'] = _0xecbcx3['$cls'];
                _0xecbcx5['setTop'](_0xecbcx3['top']);
                this['setElementX'](_0xecbcx5, _0xecbcx3['left']);
                _0xecbcx5['setSize'](_0xecbcx3['width'], _0xecbcx3['height'])
            } else {
                Ext['destroy'](_0xecbcx5)
            }
        } else {
            this['renderBodyElementsInternal']([_0xecbcx2])
        }
    },
    updateHeaderElement: function(_0xecbcx1) {
        var _0xecbcx2 = Ext['get'](this['getHeaderElementId'](_0xecbcx1));
        if (_0xecbcx2) {
            var _0xecbcx5 = this['getHeaderElementData']([_0xecbcx1])[0];
            if (_0xecbcx5) {
                _0xecbcx2['dom']['className'] = _0xecbcx5['cls'];
                if (this['schedulerView']['isHorizontal']()) {
                    this['setElementX'](_0xecbcx2, _0xecbcx5['position']);
                    _0xecbcx2['setWidth'](_0xecbcx5['size'])
                } else {
                    _0xecbcx2['setTop'](_0xecbcx5['position']);
                    _0xecbcx2['setHeight'](_0xecbcx5['size'])
                }
            } else {
                Ext['destroy'](_0xecbcx2)
            }
        } else {
            this['renderHeaderElements']([_0xecbcx1])
        }
    },
    destroy: function() {
        clearTimeout(this._renderTimer);
        this['store']['un'](this['storeListeners']);
        if (this['store']['autoDestroy']) {
            this['store']['destroy']()
        }
    },
    refreshSingle: function(_0xecbcx2, _0xecbcx1) {
        _0xecbcx1 = _0xecbcx1 instanceof Array ? _0xecbcx1 : [_0xecbcx1];
        Ext['Array']['each'](_0xecbcx1, function(_0xecbcx5) {
            this['updateBodyElement'](_0xecbcx5);
            if (this['showHeaderElements']) {
                this['updateHeaderElement'](_0xecbcx5)
            }
        }, this)
    }
});
Ext.define('Ext.ux.Scheduler.plugin.Lines', {
    extend: 'Ext.ux.Scheduler.feature.AbstractTimeSpan',
    alias: 'plugin.scheduler_lines',
    cls: 'sch-timeline',
    showTip: true,
    innerTpl: null,
    prepareTemplateData: null,
    side: null,
    init: function(_0xecbcx1) {
        if (typeof this['innerTpl'] === 'string') {
            this['innerTpl'] = new Ext.XTemplate(this['innerTpl'])
        };
        this['side'] = _0xecbcx1['rtl'] ? 'right' : 'left';
        var _0xecbcx2 = this['innerTpl'];
        if (!this['template']) {
            this['template'] = new Ext.XTemplate('<tpl for=".">', '<div id="{id}" ' + (this['showTip'] ? 'title="{[this.getTipText(values)]}" ' : '') + 'class="{$cls}" style="' + this['side'] + ':{left}px;top:{top}px;width:{width}px">' + (_0xecbcx2 ? '{[this.renderInner(values)]}' : '') + '</div>', '</tpl>', {
                getTipText: function(_0xecbcx5) {
                    return _0xecbcx1['getSchedulingView']()['getFormattedDate'](_0xecbcx5.Date) + ' ' + (_0xecbcx5['Text'] || '')
                },
                renderInner: function(_0xecbcx5) {
                    return _0xecbcx2['apply'](_0xecbcx5)
                }
            })
        };
        this['callParent'](arguments)
    },
    getElementData: function(_0xecbcx6, _0xecbcx3, _0xecbcx17) {
        var _0xecbcxe = this['store'],
            _0xecbcx5 = this['schedulerView'],
            _0xecbcx8 = _0xecbcx5['isHorizontal'](),
            _0xecbcx7 = _0xecbcx5['isWeekView'](),
            _0xecbcxd = _0xecbcx17 || _0xecbcxe['getRange'](),
            _0xecbcx2 = _0xecbcx5['getTimeSpanRegion'](_0xecbcx6, null, this['expandToFitView']),
            _0xecbcx12 = [],
            _0xecbcxf, _0xecbcxc, _0xecbcx1, _0xecbcx14, _0xecbcx4;
        for (var _0xecbcx10 = 0, _0xecbcxb = _0xecbcxd['length']; _0xecbcx10 < _0xecbcxb; _0xecbcx10++) {
            _0xecbcx1 = _0xecbcxd[_0xecbcx10];
            _0xecbcx14 = _0xecbcx1['get']('Date');
            if (_0xecbcx14 && _0xecbcx5['timeAxis']['dateInAxis'](_0xecbcx14)) {
                _0xecbcx4 = Ext.apply({}, this['getTemplateData'](_0xecbcx1));
                _0xecbcx4['id'] = this['getElementId'](_0xecbcx1);
                _0xecbcx4['$cls'] = this['getElementCls'](_0xecbcx1, _0xecbcx4);
                if (_0xecbcx7) {
                    _0xecbcx2 = _0xecbcx5['getTimeSpanRegion'](_0xecbcx14, _0xecbcx14);
                    _0xecbcx4['left'] = _0xecbcx2['x'];
                    _0xecbcx4['top'] = _0xecbcx2['y'];
                    _0xecbcx4['width'] = _0xecbcx2['right'] - _0xecbcx2['left']
                } else {
                    var _0xecbcx9 = _0xecbcx5['getCoordinateFromDate'](_0xecbcx14);
                    if (_0xecbcx8) {
                        _0xecbcx4['left'] = _0xecbcx9
                    } else {
                        _0xecbcx4['top'] = _0xecbcx9
                    }
                };
                _0xecbcx12['push'](_0xecbcx4)
            }
        };
        return _0xecbcx12
    },
    getHeaderElementData: function(_0xecbcx5) {
        var _0xecbcx1 = this['timeAxis']['getStart'](),
            _0xecbcxd = this['timeAxis']['getEnd'](),
            _0xecbcxe = this['schedulerView']['isHorizontal'](),
            _0xecbcx9 = [],
            _0xecbcx7, _0xecbcx2, _0xecbcx8, _0xecbcx4;
        _0xecbcx5 = _0xecbcx5 || this['store']['getRange']();
        for (var _0xecbcx6 = 0, _0xecbcx3 = _0xecbcx5['length']; _0xecbcx6 < _0xecbcx3; _0xecbcx6++) {
            _0xecbcx7 = _0xecbcx5[_0xecbcx6];
            _0xecbcx2 = _0xecbcx7['get']('Date');
            if (_0xecbcx2 && Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0xecbcx2, _0xecbcx1, _0xecbcxd)) {
                _0xecbcx8 = this['getHeaderElementPosition'](_0xecbcx2);
                _0xecbcx4 = this['getTemplateData'](_0xecbcx7);
                _0xecbcx4 = Ext.apply({
                    side: _0xecbcxe ? this['side'] : 'top',
                    cls: this['getHeaderElementCls'](_0xecbcx7, _0xecbcx4),
                    position: _0xecbcx8
                }, _0xecbcx4);
                _0xecbcx4['id'] = this['getHeaderElementId'](_0xecbcx7);
                _0xecbcx9['push'](_0xecbcx4)
            }
        };
        return _0xecbcx9
    }
});
Ext.define('Ext.ux.Scheduler.feature.ColumnLines', {
    extend: 'Ext.ux.Scheduler.plugin.Lines',
    requires: ['Ext.data.JsonStore'],
    showTip: false,
    cls: 'sch-column-line',
    timeAxisViewModel: null,
    renderingDoneEvent: 'columnlinessynced',
    useLowestHeader: null,
    init: function(_0xecbcx1) {
        this['timeAxis'] = _0xecbcx1['getTimeAxis']();
        this['timeAxisViewModel'] = _0xecbcx1['timeAxisViewModel'];
        this['panel'] = _0xecbcx1;
        this['store'] = new Ext['data'].JsonStore({
            fields: ['Date']
        });
        this['callParent'](arguments);
        _0xecbcx1['on']({
            destroy: this['onHostDestroy'],
            scope: this
        });
        this['timeAxisViewModel']['on']('update', this['populate'], this);
        this['populate']()
    },
    onHostDestroy: function() {
        this['timeAxisViewModel']['un']('update', this['populate'], this)
    },
    populate: function() {
        this['store']['setData'](this['getData']())
    },
    getData: function() {
        var _0xecbcx2 = this['panel'],
            _0xecbcx9 = [];
        var _0xecbcx7 = this['timeAxisViewModel'];
        var _0xecbcx4 = this['useLowestHeader'] ? _0xecbcx7['getLowestHeader']() : _0xecbcx7['columnLinesFor'];
        var _0xecbcx6 = !!(_0xecbcx7['headerConfig'] && _0xecbcx7['headerConfig'][_0xecbcx4]['cellGenerator']);
        if (_0xecbcx6) {
            var _0xecbcx5 = _0xecbcx7['getColumnConfig']()[_0xecbcx4];
            for (var _0xecbcx3 = 1, _0xecbcx1 = _0xecbcx5['length']; _0xecbcx3 < _0xecbcx1; _0xecbcx3++) {
                _0xecbcx9['push']({
                    Date: _0xecbcx5[_0xecbcx3]['start']
                })
            }
        } else {
            _0xecbcx7['forEachInterval'](_0xecbcx4, function(_0xecbcx11, _0xecbcx8, _0xecbcxd) {
                if (_0xecbcxd > 0) {
                    _0xecbcx9['push']({
                        Date: _0xecbcx11,
                        Cls: _0xecbcx7['isMajorTick'](_0xecbcx11) ? 'sch-column-line-solid' : ''
                    })
                }
            })
        };
        return _0xecbcx9
    }
});
Ext.define('Ext.ux.Scheduler.util.ScrollManager', {
    singleton: true,
    vthresh: 25,
    hthresh: 25,
    increment: 100,
    frequency: 500,
    animate: true,
    animDuration: 200,
    activeCmp: null,
    activeEl: null,
    scrollElRegion: null,
    scrollProcess: {},
    pt: null,
    scrollWidth: null,
    scrollHeight: null,
    direction: 'both',
    constructor: function() {
        this['doScroll'] = Ext['Function']['bind'](this['doScroll'], this)
    },
    triggerRefresh: function() {
        if (this['activeEl']) {
            this['refreshElRegion']();
            this['clearScrollInterval']();
            this['onMouseMove']()
        }
    },
    doScroll: function() {
        var _0xecbcx9 = this['scrollProcess'],
            _0xecbcx7 = _0xecbcx9['cmp'],
            _0xecbcx6 = _0xecbcx7['rtl'] && !_0xecbcx7['up']('[isViewport]'),
            _0xecbcx2 = _0xecbcx9['dir'][0],
            _0xecbcxa = this['increment'],
            _0xecbcx5 = this['activeCmp']['getScrollX'](),
            _0xecbcx1 = this['activeCmp']['getVerticalScroll']();
        if (_0xecbcx2 === 'r') {
            _0xecbcxa = Math['min'](_0xecbcxa, _0xecbcx6 ? _0xecbcx5 : this['scrollWidth'] - _0xecbcx5 - this['activeEl']['dom']['clientWidth'])
        } else {
            if (_0xecbcx2 === 'd') {
                _0xecbcxa = Math['min'](_0xecbcxa, this['scrollHeight'] - _0xecbcx1 - _0xecbcx7['getViewContainerHeight']())
            }
        };
        _0xecbcxa = Math['max'](_0xecbcxa, 0);
        var _0xecbcx4 = 0,
            _0xecbcx3 = 0;
        if (_0xecbcx2 === 'r') {
            _0xecbcx4 = _0xecbcxa
        };
        if (_0xecbcx2 === 'l') {
            _0xecbcx4 = -_0xecbcxa
        };
        if (_0xecbcx2 === 'u') {
            _0xecbcx3 = -_0xecbcxa
        };
        if (_0xecbcx2 === 'd') {
            _0xecbcx3 = _0xecbcxa
        };
        if (_0xecbcx6) {
            _0xecbcx4 = -_0xecbcx4
        };
        if (_0xecbcx4) {
            _0xecbcx7['scrollHorizontallyBy'](_0xecbcx4, {
                duration: this['animDuration'],
                callback: this['triggerRefresh'],
                scope: this
            })
        } else {
            if (_0xecbcx3) {
                _0xecbcx7['scrollVerticallyBy'](_0xecbcx3, {
                    duration: this['animDuration'],
                    callback: this['triggerRefresh'],
                    scope: this
                })
            }
        }
    },
    clearScrollInterval: function() {
        var _0xecbcx1 = this['scrollProcess'];
        if (_0xecbcx1['id']) {
            clearTimeout(_0xecbcx1['id'])
        };
        _0xecbcx1['id'] = 0;
        _0xecbcx1['cmp'] = null;
        _0xecbcx1['dir'] = ''
    },
    isScrollAllowed: function(_0xecbcx1) {
        switch (this['direction']) {
            case 'both':
                return true;
            case 'horizontal':
                return _0xecbcx1 === 'right' || _0xecbcx1 === 'left';
            case 'vertical':
                return _0xecbcx1 === 'up' || _0xecbcx1 === 'down';
            default:
                throw new Error('Invalid direction: ' + this['direction'])
        }
    },
    startScrollInterval: function(_0xecbcx2, _0xecbcx1) {
        if (!this['isScrollAllowed'](_0xecbcx1)) {
            return
        };
        this['clearScrollInterval']();
        this['scrollProcess']['cmp'] = _0xecbcx2;
        this['scrollProcess']['dir'] = _0xecbcx1;
        this['scrollProcess']['id'] = setTimeout(this['doScroll'], this['frequency'])
    },
    onMouseMove: function(_0xecbcx7) {
        var _0xecbcxc = _0xecbcx7 ? {
                x: _0xecbcx7['getX'](),
                y: _0xecbcx7['getY'](),
                right: _0xecbcx7['getX'](),
                bottom: _0xecbcx7['getY']()
            } : this['pt'],
            _0xecbcxf = _0xecbcxc['x'],
            _0xecbcx11 = _0xecbcxc['y'],
            _0xecbcxa = this['scrollProcess'],
            _0xecbcxe = this['activeCmp'],
            _0xecbcx3 = _0xecbcxe['getScrollX'](),
            _0xecbcx5 = _0xecbcxe['getVerticalScroll'](),
            _0xecbcx1, _0xecbcx9 = _0xecbcxe['rtl'] && !_0xecbcxe['up']('[isViewport]'),
            _0xecbcx2 = this['activeEl'],
            _0xecbcxd = this['scrollElRegion'],
            _0xecbcx6 = _0xecbcx2['dom'],
            _0xecbcx8 = this;
        this['pt'] = _0xecbcxc;
        if (_0xecbcxd && _0xecbcxd['contains'](_0xecbcxc) && _0xecbcx2['isScrollable']()) {
            if (_0xecbcxd['bottom'] - _0xecbcx11 <= _0xecbcx8['vthresh'] && (this['scrollHeight'] - _0xecbcx5 - _0xecbcxe['getViewContainerHeight']() > 0)) {
                if (_0xecbcxa['cmp'] != _0xecbcxe) {
                    this['startScrollInterval'](_0xecbcxe, 'down')
                };
                return
            } else {
                if (_0xecbcxd['right'] - _0xecbcxf <= _0xecbcx8['hthresh'] && (_0xecbcx9 ? _0xecbcx3 > 0 : this['scrollWidth'] - _0xecbcx3 - _0xecbcx6['clientWidth'] > 0)) {
                    if (_0xecbcxa['cmp'] != _0xecbcxe) {
                        this['startScrollInterval'](_0xecbcxe, 'right')
                    };
                    return
                } else {
                    if (_0xecbcx11 - _0xecbcxd['top'] <= _0xecbcx8['vthresh'] && _0xecbcx5 > 0) {
                        if (_0xecbcxa['cmp'] != _0xecbcxe) {
                            this['startScrollInterval'](_0xecbcxe, 'up')
                        };
                        return
                    } else {
                        if (_0xecbcxf - _0xecbcxd['left'] <= _0xecbcx8['hthresh'] && (_0xecbcx9 ? _0xecbcx6['clientWidth'] + _0xecbcx3 < this['scrollWidth'] : _0xecbcx3 > 0)) {
                            if (_0xecbcxa['cmp'] != _0xecbcxe) {
                                this['startScrollInterval'](_0xecbcxe, 'left')
                            };
                            return
                        }
                    }
                }
            }
        };
        this['clearScrollInterval']()
    },
    refreshElRegion: function() {
        var _0xecbcx1 = this['activeEl']['getRegion']();
        this['scrollElRegion'] = this['activeCmp']['getScrollableContainerRegion']()
    },
    activate: function(_0xecbcx2, _0xecbcx5) {
        var _0xecbcx1 = Ext['getScrollbarSize']();
        this['direction'] = _0xecbcx5 || 'both';
        this['activeCmp'] = _0xecbcx2;
        this['activeEl'] = _0xecbcx2['getEl']();
        var _0xecbcx3 = _0xecbcx2['getScrollableMaxPosition']();
        this['scrollWidth'] = _0xecbcx3['x'] + _0xecbcx2['getWidth']() - _0xecbcx1['width'];
        this['scrollHeight'] = _0xecbcx3['y'] + _0xecbcx2['getViewContainerHeight']() - _0xecbcx1['height'];
        this['refreshElRegion']();
        this['activeEl']['on']('mousemove', this['onMouseMove'], this)
    },
    deactivate: function() {
        if (this['activeEl']) {
            this['clearScrollInterval']();
            this['activeEl']['un']('mousemove', this['onMouseMove'], this);
            this['activeEl'] = this['activeCmp'] = this['scrollElRegion'] = this['scrollWidth'] = this['scrollHeight'] = null;
            this['direction'] = 'both'
        }
    }
});
Ext.define('Ext.ux.Scheduler.util.DragTracker', {
    extend: 'Ext.dd.DragTracker',
    requires: ['Ext.util.Region'],
    xStep: 1,
    yStep: 1,
    deferredTouchActivation: 0,
    constructor: function() {
        this['callParent'](arguments);
        this['on']('dragstart', this['bindListenersOnDragStart']);
        this['moveListener'] = {
            pinchstart: this['abortWait'],
            touchend: this['abortWait'],
            mouseup: this['abortWait'],
            mousemove: this['onMoveWhileWaiting'],
            scope: this,
            capture: true
        }
    },
    bindListenersOnDragStart: function() {
        var _0xecbcx1 = this['el'];
        _0xecbcx1['on'](this['getListeners']());
        this['on']('dragend', this['unbindListenersOnDragEnd'], this, {
            single: true
        })
    },
    unbindListenersOnDragEnd: function() {
        this['el'] && this['el']['un'](this['getListeners']())
    },
    getListeners: function() {
        return {
            scroll: this['onMouseMove'],
            pinchstart: this['onMouseUp'],
            scope: this
        }
    },
    destroy: function() {
        clearTimeout(this['deferTimer']);
        this['callParent'](arguments)
    },
    setXStep: function(_0xecbcx1) {
        this['xStep'] = _0xecbcx1
    },
    startScroll: null,
    deferTimer: null,
    deferTolerance: 10,
    moveListener: null,
    setYStep: function(_0xecbcx1) {
        this['yStep'] = _0xecbcx1
    },
    onMoveWhileWaiting: function(_0xecbcx3, _0xecbcx1) {
        var _0xecbcx5 = _0xecbcx3['getXY']();
        var _0xecbcx2 = this['startXY'];
        if (Math['max'](Math['abs'](_0xecbcx2[0] - _0xecbcx5[0]), Math['abs'](_0xecbcx2[1] - _0xecbcx5[1])) > this['deferTolerance']) {
            this['abortWait']();
            this['onMouseUp'](_0xecbcx3)
        }
    },
    abortWait: function() {
        clearTimeout(this['deferTimer']);
        this['deferTimer'] = null;
        Ext['getDoc']()['un'](this['moveListener'])
    },
    getCurrentScroll: function() {
        return this['el']['getScroll']()
    },
    getRegion: function() {
        var _0xecbcx8 = this['startXY'],
            _0xecbcx6 = this['getCurrentScroll']();
        if (Ext['isIE'] && this['rtl']) {
            _0xecbcx6['left'] = this['el']['dom']['scrollWidth'] - this['el']['getWidth']() - _0xecbcx6['left']
        };
        var _0xecbcx11 = this['getXY'](),
            _0xecbcx5 = _0xecbcx11[0],
            _0xecbcx2 = _0xecbcx11[1],
            _0xecbcx7 = _0xecbcx6['left'] - this['startScroll']['left'],
            _0xecbcxe = _0xecbcx6['top'] - this['startScroll']['top'],
            _0xecbcxa = _0xecbcx8[0] - _0xecbcx7,
            _0xecbcx9 = _0xecbcx8[1] - _0xecbcxe,
            _0xecbcx4 = Math['min'](_0xecbcxa, _0xecbcx5),
            _0xecbcx3 = Math['min'](_0xecbcx9, _0xecbcx2),
            _0xecbcx1 = Math['abs'](_0xecbcxa - _0xecbcx5),
            _0xecbcxd = Math['abs'](_0xecbcx9 - _0xecbcx2);
        return new Ext['util'].Region(_0xecbcx3, _0xecbcx4 + _0xecbcx1, _0xecbcx3 + _0xecbcxd, _0xecbcx4)
    },
    onMouseDown: function(_0xecbcx3, _0xecbcx5) {
        var _0xecbcx2 = _0xecbcx3['event']['touches'] || [];
        if (_0xecbcx2['length'] > 1) {
            return
        };
        _0xecbcx3['stopPropagation'] = Ext['emptyFn'];
        this['startXY'] = _0xecbcx3['getXY']();
        if (this['deferredTouchActivation'] && _0xecbcx2['length'] === 1) {
            var _0xecbcx1 = this;
            Ext['getDoc']()['on'](this['moveListener']);
            this['deferTimer'] = setTimeout(function() {
                var _0xecbcx4 = _0xecbcx1['deferredTouchActivation'];
                Ext['getDoc']()['un'](_0xecbcx1['moveListener']);
                _0xecbcx1['deferredTouchActivation'] = false;
                _0xecbcx1['onMouseDown'](_0xecbcx3, _0xecbcx5);
                _0xecbcx1['deferredTouchActivation'] = _0xecbcx4
            }, this['deferredTouchActivation']);
            return
        };
        this['callParent']([_0xecbcx3, _0xecbcx5]);
        this['lastXY'] = this['startXY'];
        this['startScroll'] = this['getCurrentScroll']();
        if (Ext['isIE'] && this['rtl']) {
            this['startScroll']['left'] = this['el']['dom']['scrollWidth'] - this['el']['getWidth']() - this['startScroll']['left']
        }
    },
    onMouseMove: function(_0xecbcx9, _0xecbcx6) {
        if (this['active'] && _0xecbcx9['type'] === 'mousemove' && Ext['isIE9m'] && !_0xecbcx9['browserEvent']['button']) {
            _0xecbcx9['preventDefault']();
            this['onMouseUp'](_0xecbcx9);
            return
        };
        _0xecbcx9['preventDefault']();
        var _0xecbcx3 = _0xecbcx9['type'] === 'scroll' ? this['lastXY'] : _0xecbcx9['getXY'](),
            _0xecbcx2 = this['startXY'];
        if (!this['active']) {
            if (Math['max'](Math['abs'](_0xecbcx2[0] - _0xecbcx3[0]), Math['abs'](_0xecbcx2[1] - _0xecbcx3[1])) > this['tolerance']) {
                this['triggerStart'](_0xecbcx9)
            } else {
                return
            }
        };
        var _0xecbcx1 = _0xecbcx3[0],
            _0xecbcx7 = _0xecbcx3[1];
        if (this['xStep'] > 1) {
            _0xecbcx1 -= this['startXY'][0];
            _0xecbcx1 = Math['round'](_0xecbcx1 / this['xStep']) * this['xStep'];
            _0xecbcx1 += this['startXY'][0]
        };
        if (this['yStep'] > 1) {
            _0xecbcx7 -= this['startXY'][1];
            _0xecbcx7 = Math['round'](_0xecbcx7 / this['yStep']) * this['yStep'];
            _0xecbcx7 += this['startXY'][1]
        };
        var _0xecbcx5 = this['xStep'] > 1 || this['yStep'] > 1;
        if (!_0xecbcx5 || _0xecbcx1 !== _0xecbcx3[0] || _0xecbcx7 !== _0xecbcx3[1]) {
            this['lastXY'] = [_0xecbcx1, _0xecbcx7];
            if (this['fireEvent']('mousemove', this, _0xecbcx9) === false) {
                this['onMouseUp'](_0xecbcx9)
            } else {
                this['onDrag'](_0xecbcx9);
                this['fireEvent']('drag', this, _0xecbcx9)
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.tooltip.ClockTemplate', {
    extend: 'Ext.XTemplate',
    minuteHeight: 8,
    minuteTop: 2,
    hourHeight: 8,
    hourTop: 2,
    handLeft: 10,
    mode: 'hour',
    getRotateStyle: function(_0xecbcx1) {
        return 'transform:rotate(Ddeg);-ms-transform:rotate(Ddeg);-moz-transform: rotate(Ddeg);-webkit-transform: rotate(Ddeg);-o-transform:rotate(Ddeg);' ['replace'](/D/g, _0xecbcx1)
    },
    getRotateStyleIE: (function() {
        var _0xecbcx5 = Math['PI'] / 180,
            _0xecbcx2 = Math['cos'],
            _0xecbcx1 = Math['sin'];
        return function(_0xecbcx3, _0xecbcx8, _0xecbcxf) {
            var _0xecbcx9 = this,
                _0xecbcx7 = _0xecbcx3 * _0xecbcx5,
                _0xecbcx6 = _0xecbcx2(_0xecbcx7),
                _0xecbcx11 = _0xecbcx1(_0xecbcx7),
                _0xecbcxa = _0xecbcxf * _0xecbcx1((90 - _0xecbcx3) * _0xecbcx5),
                _0xecbcxd = _0xecbcxf * _0xecbcx2((90 - _0xecbcx3) * _0xecbcx5),
                _0xecbcxe = Math['min'](_0xecbcxf, _0xecbcxf - _0xecbcxa),
                _0xecbcx4 = _0xecbcx3 > 180 ? _0xecbcxd : 0,
                _0xecbcxc = 'progid:DXImageTransform.Microsoft.Matrix(sizingMethod=\'auto expand \', M11 = ' + _0xecbcx6 + ', M12 = ' + (-_0xecbcx11) + ', M21 = ' + _0xecbcx11 + ', M22 = ' + _0xecbcx6 + ')';
            return Ext['String']['format']('filter:{0};-ms-filter:{0};top:{1}px;left:{2}px;', _0xecbcxc, _0xecbcxe + _0xecbcx8, _0xecbcx4 + _0xecbcx9['handLeft'])
        }
    })(),
    constructor: function() {
        var _0xecbcx1 = Ext['isIE'] && Ext['isIE8m'];
        this['callParent'](['<div class="sch-clockwrap ' + (_0xecbcx1 ? '' : 'sch-supports-border-radius') + ' sch-clock-{[this.mode]}"><div class="sch-clock"><div class="sch-hourIndicator" style="{[this.getHourStyle((values.date.getHours() % 12) * 30,' + this['hourTop'] + ', + ' + this['hourHeight'] + ')]}">{[Ext.Date.monthNames[values.date.getMonth()].substr(0,3)]}</div><div class="sch-minuteIndicator" style="{[this.getMinuteStyle(values.date.getMinutes() * 6,' + this['minuteTop'] + ', + ' + this['minuteHeight'] + ')]}">{[values.date.getDate()]}</div>' + (_0xecbcx1 ? '' : '<div class="sch-clock-dot"></div>') + '</div><span class="sch-clock-text">{text}</span></div>', {
            getMinuteStyle: _0xecbcx1 ? this['getRotateStyleIE'] : this['getRotateStyle'],
            getHourStyle: _0xecbcx1 ? this['getRotateStyleIE'] : this['getRotateStyle']
        }])
    }
});
Ext.define('Ext.ux.Scheduler.tooltip.Tooltip', {
    extend: 'Ext.tip.ToolTip',
    requires: ['Ext.ux.Scheduler.tooltip.ClockTemplate'],
    autoHide: false,
    anchor: 'b',
    padding: '0 3 0 0',
    showDelay: 0,
    hideDelay: 0,
    quickShowInterval: 0,
    dismissDelay: 0,
    trackMouse: false,
    anchorOffset: 5,
    shadow: false,
    frame: false,
    schedulerView: null,
    message: null,
    startDate: null,
    endDate: null,
    template: null,
    valid: true,
    mode: null,
    offsetAdjust: [18, 5],
    constructor: function(_0xecbcx2) {
        var _0xecbcx1 = new Ext.ux.Scheduler['tooltip'].ClockTemplate();
        this['startDate'] = this['endDate'] = new Date();
        if (!this['template']) {
            this['template'] = Ext['create']('Ext.XTemplate', '<div class="' + Ext['baseCSSPrefix'] + 'fa sch-tip-{[values.valid ? "ok fa-check" : "notok fa-ban"]} ">{[this.renderClock(values.startDate, values.startText, "sch-tooltip-startdate")]}{[this.renderClock(values.endDate, values.endText, "sch-tooltip-enddate")]}<div class="sch-tip-message">{message}</div></div>', {
                renderClock: function(_0xecbcx3, _0xecbcx4, _0xecbcx5) {
                    return _0xecbcx1['apply']({
                        date: _0xecbcx3,
                        text: _0xecbcx4,
                        cls: _0xecbcx5
                    })
                }
            })
        };
        this['callParent'](arguments)
    },
    update: function(_0xecbcx1, _0xecbcx6, _0xecbcx4, _0xecbcx3) {
        if (this['startDate'] - _0xecbcx1 !== 0 || this['endDate'] - _0xecbcx6 !== 0 || this['valid'] !== _0xecbcx4 || this['message'] !== _0xecbcx3) {
            this['startDate'] = _0xecbcx1;
            this['endDate'] = _0xecbcx6;
            this['valid'] = _0xecbcx4;
            this['message'] = _0xecbcx3;
            var _0xecbcx5 = this['schedulerView']['getFormattedDate'](_0xecbcx1),
                _0xecbcx2 = this['schedulerView']['getFormattedEndDate'](_0xecbcx6, _0xecbcx1);
            if (this['mode'] === 'calendar' && _0xecbcx6['getHours']() === 0 && _0xecbcx6['getMinutes']() === 0 && !(_0xecbcx6['getYear']() === _0xecbcx1['getYear']() && _0xecbcx6['getMonth']() === _0xecbcx1['getMonth']() && _0xecbcx6['getDate']() === _0xecbcx1['getDate']())) {
                _0xecbcx6 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx6, Ext.ux.Scheduler['util']['Date'].DAY, -1)
            };
            this['callParent']([this['template']['apply']({
                valid: _0xecbcx4,
                startDate: _0xecbcx1,
                endDate: _0xecbcx6,
                startText: _0xecbcx5,
                endText: _0xecbcx2,
                message: _0xecbcx3
            })])
        };
        if (this['rendered'] && this['isVisible']()) {
            if (Ext['getVersion']()['isGreaterThan']('6.2.1')) {
                this['realignToTarget']()
            } else {
                this['realign']()
            }
        }
    },
    showForElement: function(_0xecbcx2, _0xecbcx1) {
        if (Ext.ux.Scheduler['util']['Date']['compareUnits'](this['schedulerView']['getTimeResolution']()['unit'], Ext.ux.Scheduler['util']['Date'].DAY) >= 0) {
            this['mode'] = 'calendar';
            this['addCls']('sch-day-resolution');
            this['removeCls']('sch-hour-resolution')
        } else {
            this['mode'] = 'clock';
            this['removeCls']('sch-day-resolution');
            this['addCls']('sch-hour-resolution')
        };
        _0xecbcx1 = arguments['length'] > 1 ? _0xecbcx1 : this['offsetAdjust'][0];
        this['mouseOffsets'] = [_0xecbcx1 - this['offsetAdjust'][0], -this['offsetAdjust'][1]];
        this['setTarget'](_0xecbcx2);
        this['show']();
        this['realign']()
    },
    realign: function() {
        this['alignTo'](this['target'], 'bl-tl?', this['mouseOffsets'])
    },
    afterRender: function() {
        this['callParent'](arguments);
        this['el']['on']('mouseenter', this['realign'], this)
    }
});
Ext.define('Ext.ux.Scheduler.tooltip.HoverTip', {
    extend: 'Ext.tip.ToolTip',
    alias: 'widget.scheduler_hovertip',
    requires: ['Ext.ux.Scheduler.tooltip.ClockTemplate'],
    trackMouse: true,
    bodyCls: 'sch-hovertip',
    messageTpl: '<div class="sch-hovertip-msg">{message}</div>',
    autoHide: false,
    dismissDelay: 1000,
    showDelay: 0,
    schedulerView: null,
    clockTpl: null,
    lastTime: null,
    lastResource: null,
    initComponent: function() {
        var _0xecbcx2 = this;
        var _0xecbcx1 = _0xecbcx2['schedulerView'];
        _0xecbcx2['clockTpl'] = new Ext.ux.Scheduler['tooltip'].ClockTemplate();
        _0xecbcx2['messageTpl'] = new Ext.XTemplate(_0xecbcx2['messageTpl']);
        _0xecbcx2['callParent'](arguments);
        _0xecbcx2['on']('beforeshow', _0xecbcx2['tipOnBeforeShow'], _0xecbcx2);
        _0xecbcx1['mon'](_0xecbcx1['el'], {
            mouseleave: function() {
                _0xecbcx2['hide']()
            },
            mousemove: _0xecbcx2['handleMouseMove'],
            scope: _0xecbcx2
        });
        _0xecbcx1['mon'](_0xecbcx1['el'], {
            click: _0xecbcx2['onBodyMouseDown'],
            scope: _0xecbcx2,
            delay: 1
        })
    },
    onBodyMouseDown: function() {
        this['hide']()
    },
    handleMouseMove: function(_0xecbcx6) {
        var _0xecbcx5 = this;
        var _0xecbcx1 = _0xecbcx5['schedulerView'];
        if (_0xecbcx5['disabled']) {
            return
        };
        if (_0xecbcx6['getTarget']('.' + _0xecbcx1['itemCls'], 5) && !_0xecbcx6['getTarget'](_0xecbcx1['eventSelector'])) {
            var _0xecbcx3 = _0xecbcx1['getDateFromDomEvent'](_0xecbcx6, 'floor');
            if (_0xecbcx3) {
                var _0xecbcx2 = _0xecbcx1['resolveResource'](_0xecbcx6['getTarget']());
                if (_0xecbcx3 - _0xecbcx5['lastTime'] !== 0 || _0xecbcx2 !== _0xecbcx5['lastResource']) {
                    _0xecbcx5['lastResource'] = _0xecbcx2;
                    if (_0xecbcx5['hidden']) {
                        if (Ext.ux.Scheduler['util']['Date']['compareUnits'](this['schedulerView']['getTimeResolution']()['unit'], Ext.ux.Scheduler['util']['Date'].DAY) >= 0) {
                            _0xecbcx5['clockTpl']['mode'] = 'day'
                        } else {
                            _0xecbcx5['clockTpl']['mode'] = 'hour'
                        };
                        _0xecbcx5['show']()
                    };
                    _0xecbcx5['updateHoverTip'](_0xecbcx3, _0xecbcx6)
                }
            } else {
                _0xecbcx5['hide']();
                _0xecbcx5['lastTime'] = null;
                _0xecbcx5['lastResource'] = null
            }
        } else {
            _0xecbcx5['hide']();
            _0xecbcx5['lastTime'] = null;
            _0xecbcx5['lastResource'] = null
        }
    },
    getText: function() {},
    updateHoverTip: function(_0xecbcx5, _0xecbcx3) {
        if (_0xecbcx5) {
            var _0xecbcx2 = this['clockTpl']['apply']({
                date: _0xecbcx5,
                text: this['schedulerView']['getFormattedDate'](_0xecbcx5)
            });
            var _0xecbcx1 = this['messageTpl']['apply']({
                message: this['getText'](_0xecbcx5, _0xecbcx3)
            });
            this['update'](_0xecbcx2 + _0xecbcx1);
            this['lastTime'] = _0xecbcx5
        }
    },
    tipOnBeforeShow: function(_0xecbcx1) {
        return !this['disabled'] && this['lastTime'] !== null
    }
});
Ext.define('Ext.ux.Scheduler.feature.DragCreator', {
    requires: ['Ext.XTemplate', 'Ext.ToolTip', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.util.ScrollManager', 'Ext.ux.Scheduler.util.DragTracker', 'Ext.ux.Scheduler.tooltip.Tooltip', 'Ext.ux.Scheduler.tooltip.HoverTip'],
    disabled: false,
    showHoverTip: true,
    showDragTip: true,
    dragTip: null,
    dragTolerance: 2,
    hoverTip: null,
    validatorFn: Ext['emptyFn'],
    validatorFnScope: null,
    trackerConfig: null,
    schedulerView: null,
    template: '<div class="sch-dragcreator-proxy"><div class="sch-event-inner">&#160;</div></div>',
    constructor: function(_0xecbcx1) {
        Ext.apply(this, _0xecbcx1 || {});
        this['lastTime'] = new Date();
        if (!(this['template'] instanceof Ext['Template'])) {
            this['template'] = new Ext.Template(this['template'])
        };
        this['schedulerView']['on']('destroy', this['onSchedulerDestroy'], this);
        if (Ext['supports']['Touch']) {
            this['schedulerView']['on']('boxready', this['initDragTracker'], this)
        } else {
            this['schedulerView']['el']['on']('mousemove', this['initDragTracker'], this, {
                single: true
            })
        };
        this['callParent']([_0xecbcx1])
    },
    setDisabled: function(_0xecbcx1) {
        this['disabled'] = _0xecbcx1;
        if (this['hoverTip'] && this['hoverTip']['setDisabled']) {
            this['hoverTip']['setDisabled'](_0xecbcx1)
        };
        if (this['dragTip'] && this['dragTip']['setDisabled']) {
            this['dragTip']['setDisabled'](_0xecbcx1)
        }
    },
    getProxy: function() {
        if (!this['proxy']) {
            this['proxy'] = this['template']['append'](this['schedulerView']['getEl'](), {}, true);
            this['proxy']['hide'] = function() {
                this['setStyle']({
                    left: 0,
                    right: 0,
                    top: '-10000px'
                })
            }
        };
        return this['proxy']
    },
    onBeforeDragStart: function(_0xecbcx3, _0xecbcx9) {
        var _0xecbcx2 = this['schedulerView'],
            _0xecbcx1 = _0xecbcx9['getTarget']('.' + _0xecbcx2['timeCellCls'], 5);
        if (_0xecbcx1 && this['isCreateAllowed'](_0xecbcx9) && (!_0xecbcx9['event']['touches'] || _0xecbcx9['event']['touches']['length'] === 1)) {
            var _0xecbcx5 = _0xecbcx2['resolveResource'](_0xecbcx1);
            var _0xecbcx6 = _0xecbcx2['getDateFromDomEvent'](_0xecbcx9);
            if (!this['disabled'] && _0xecbcx1 && _0xecbcx2['fireEvent']('beforedragcreate', _0xecbcx2, _0xecbcx5, _0xecbcx6, _0xecbcx9) !== false) {
                this['resourceRecord'] = _0xecbcx5;
                this['originalStart'] = _0xecbcx6;
                this['resourceRegion'] = _0xecbcx2['getScheduleRegion'](this['resourceRecord'], this['originalStart']);
                this['dateConstraints'] = _0xecbcx2['getDateConstraints'](this['resourceRecord'], this['originalStart']);
                return true
            }
        };
        return false
    },
    isCreateAllowed: function(_0xecbcx1) {
        return !_0xecbcx1['getTarget'](this['schedulerView']['eventSelector'])
    },
    disableHoverTip: function() {
        this['hoverTip'] && this['hoverTip']['disable'] && this['hoverTip']['disable']()
    },
    onDragStart: function() {
        var _0xecbcx3 = this,
            _0xecbcx2 = _0xecbcx3['schedulerView'],
            _0xecbcx1 = _0xecbcx3['tracker']['getRegion'](),
            _0xecbcx5 = _0xecbcx3['getProxy']();
        this['dragging'] = true;
        if (this['hoverTip']) {
            this['hoverTip']['on']('enable', this['disableHoverTip'], this);
            this['hoverTip']['disable']()
        };
        _0xecbcx3['start'] = _0xecbcx3['originalStart'];
        _0xecbcx3['end'] = _0xecbcx3['start'];
        _0xecbcx3['originalScroll'] = _0xecbcx2['getScroll']();
        if (_0xecbcx2['isHorizontal']()) {
            _0xecbcx3['rowBoundaries'] = {
                top: _0xecbcx3['resourceRegion']['top'],
                bottom: _0xecbcx3['resourceRegion']['bottom']
            }
        } else {
            _0xecbcx3['rowBoundaries'] = {
                left: _0xecbcx3['resourceRegion']['left'],
                right: _0xecbcx3['resourceRegion']['right']
            }
        };
        Ext.apply(_0xecbcx1, _0xecbcx3['rowBoundaries']);
        if (_0xecbcx2['rtl']) {
            _0xecbcx5['setStyle']({
                right: 'auto'
            })
        };
        _0xecbcx5['setBox'](_0xecbcx1);
        _0xecbcx5['show']();
        _0xecbcx2['fireEvent']('dragcreatestart', _0xecbcx2, _0xecbcx5);
        if (_0xecbcx3['showDragTip']) {
            _0xecbcx3['dragTip']['enable']();
            _0xecbcx3['dragTip']['update'](_0xecbcx3['start'], _0xecbcx3['end'], true);
            _0xecbcx3['dragTip']['showForElement'](_0xecbcx5);
            _0xecbcx3['dragTip']['setStyle']('visibility', 'visible')
        };
        Ext.ux.Scheduler['util']['ScrollManager']['activate'](_0xecbcx2, _0xecbcx2['isHorizontal']() ? 'horizontal' : 'vertical')
    },
    onDrag: function() {
        var _0xecbcx9 = this,
            _0xecbcx3 = _0xecbcx9['schedulerView'],
            _0xecbcx5 = _0xecbcx9['tracker']['getRegion'](),
            _0xecbcx7 = _0xecbcx3['getStartEndDatesFromRegion'](_0xecbcx5, 'round'),
            _0xecbcx6 = '';
        if (!_0xecbcx7) {
            return
        };
        _0xecbcx9['start'] = _0xecbcx7['start'] || _0xecbcx9['start'];
        _0xecbcx9['end'] = _0xecbcx7['end'] || _0xecbcx9['end'];
        var _0xecbcx2 = _0xecbcx9['dateConstraints'];
        if (_0xecbcx2) {
            _0xecbcx9['end'] = Ext.ux.Scheduler['util']['Date']['constrain'](_0xecbcx9['end'], _0xecbcx2['start'], _0xecbcx2['end']);
            _0xecbcx9['start'] = Ext.ux.Scheduler['util']['Date']['constrain'](_0xecbcx9['start'], _0xecbcx2['start'], _0xecbcx2['end'])
        };
        _0xecbcx9['valid'] = this['validatorFn']['call'](_0xecbcx9['validatorFnScope'] || _0xecbcx9, _0xecbcx9['resourceRecord'], _0xecbcx9['start'], _0xecbcx9['end']);
        if (_0xecbcx9['valid'] && typeof _0xecbcx9['valid'] !== 'boolean') {
            _0xecbcx6 = _0xecbcx9['valid']['message'];
            _0xecbcx9['valid'] = _0xecbcx9['valid']['valid']
        };
        _0xecbcx9['valid'] = (_0xecbcx9['valid'] !== false);
        if (_0xecbcx9['showDragTip']) {
            _0xecbcx9['dragTip']['update'](_0xecbcx9['start'], _0xecbcx9['end'], _0xecbcx9['valid'], _0xecbcx6)
        };
        Ext.apply(_0xecbcx5, _0xecbcx9['rowBoundaries']);
        var _0xecbcx1 = _0xecbcx3['getScroll']();
        var _0xecbcx4 = this['getProxy']();
        _0xecbcx4['setBox'](_0xecbcx5);
        if (_0xecbcx3['isHorizontal']()) {
            _0xecbcx4['setY'](_0xecbcx9['resourceRegion']['top'] + _0xecbcx9['originalScroll']['top'] - _0xecbcx1['top'])
        }
    },
    eventSwallower: function(_0xecbcx1) {
        _0xecbcx1['stopPropagation']();
        _0xecbcx1['preventDefault']()
    },
    onDragEnd: function(_0xecbcx7, _0xecbcxa) {
        var _0xecbcx9 = this,
            _0xecbcx3 = _0xecbcx9['schedulerView'],
            _0xecbcx6 = true,
            _0xecbcx1 = _0xecbcxa['getTarget'](),
            _0xecbcx5 = Ext['get'](_0xecbcx1);
        _0xecbcx5['on']('click', this['eventSwallower']);
        _0xecbcx9['unbindTimer'] = setTimeout(function() {
            _0xecbcx5['un']('click', _0xecbcx9['eventSwallower'])
        }, 100);
        _0xecbcx9['dragging'] = false;
        if (_0xecbcx9['showDragTip']) {
            _0xecbcx9['dragTip']['disable']()
        };
        if (!_0xecbcx9['start'] || !_0xecbcx9['end'] || (_0xecbcx9['end'] - _0xecbcx9['start'] <= 0)) {
            _0xecbcx9['valid'] = false
        };
        var _0xecbcx2 = {
            start: _0xecbcx9['start'],
            end: _0xecbcx9['end'],
            resourceRecord: _0xecbcx9['resourceRecord'],
            e: _0xecbcxa,
            finalize: function(_0xecbcx4) {
                _0xecbcx9['finalize'](_0xecbcx4, _0xecbcx2)
            }
        };
        if (_0xecbcx9['valid']) {
            _0xecbcx6 = _0xecbcx3['fireEvent']('beforedragcreatefinalize', _0xecbcx9['schedulerView'], _0xecbcx2, _0xecbcxa, this['getProxy']()) !== false
        };
        if (_0xecbcx6) {
            _0xecbcx9['finalize'](_0xecbcx9['valid'], _0xecbcx2)
        };
        Ext.ux.Scheduler['util']['ScrollManager']['deactivate']()
    },
    finalize: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx3 = this['schedulerView'];
        if (_0xecbcx1) {
            var _0xecbcx5 = Ext['create'](_0xecbcx3['getEventStore']()['getModel']());
            if (_0xecbcx5['setCalendar']) {
                _0xecbcx5['setCalendar'](_0xecbcx3['getEventStore']()['getCalendar']())
            };
            _0xecbcx5['setStartEndDate'](_0xecbcx2['start'], _0xecbcx2['end']);
            if (_0xecbcx5['setCalendar']) {
                _0xecbcx5['setCalendar'](null)
            };
            _0xecbcx3['fireEvent']('dragcreateend', _0xecbcx3, _0xecbcx5, _0xecbcx2['resourceRecord'], _0xecbcx2['e'], this['getProxy']())
        };
        this['proxy']['hide']();
        this['schedulerView']['fireEvent']('afterdragcreate', _0xecbcx3, this['getProxy']());
        if (this['hoverTip']) {
            this['hoverTip']['un']('enable', this['disableHoverTip'], this);
            this['hoverTip']['enable']()
        }
    },
    dragging: false,
    initDragTracker: function() {
        var _0xecbcx3 = this,
            _0xecbcx2 = Ext['supports']['Touch'],
            _0xecbcx1 = _0xecbcx3['schedulerView'];
        var _0xecbcx5 = Ext.apply({
            el: _0xecbcx1['el'],
            rtl: _0xecbcx1['rtl'],
            tolerance: _0xecbcx3['dragTolerance'],
            listeners: {
                mousedown: _0xecbcx3['verifyLeftButtonPressed'],
                beforedragstart: _0xecbcx3['onBeforeDragStart'],
                dragstart: _0xecbcx3['onDragStart'],
                drag: _0xecbcx3['onDrag'],
                dragend: _0xecbcx3['onDragEnd'],
                scope: _0xecbcx3
            }
        }, this['trackerConfig']);
        this['bindRightClickPreventer']();
        if (_0xecbcx2) {
            this['showDragTip'] = false;
            this['showHoverTip'] = false;
            this['dragTip'] = null;
            this['hoverTip'] = null
        } else {
            this['setupTooltips']()
        };
        _0xecbcx3['tracker'] = new Ext.ux.Scheduler['util'].DragTracker(_0xecbcx5)
    },
    bindRightClickPreventer: function() {
        var _0xecbcx1;
        if (Ext['isIE9m']) {
            _0xecbcx1 = 'mousedown'
        } else {
            _0xecbcx1 = 'contextmenu'
        };
        this['schedulerView']['el']['on'](_0xecbcx1, this['stopDragCreateOnRightClick'], this, {
            priority: 999
        })
    },
    stopDragCreateOnRightClick: function(_0xecbcx1) {
        if (_0xecbcx1['button'] !== 0 && this['dragging']) {
            this['tracker']['onMouseUp'](_0xecbcx1)
        }
    },
    setupTooltips: function() {
        var _0xecbcx5 = this,
            _0xecbcx1 = _0xecbcx5['schedulerView'];
        if (this['showDragTip']) {
            var _0xecbcx2 = this['dragTip'];
            if (_0xecbcx2 instanceof Ext['tip']['ToolTip']) {
                _0xecbcx2['schedulerView'] = _0xecbcx1;
                _0xecbcx2['on']('beforeshow', function() {
                    return _0xecbcx5['dragging']
                })
            } else {
                this['dragTip'] = new Ext.ux.Scheduler['tooltip'].Tooltip(Ext.apply({
                    cls: 'sch-dragcreate-tip',
                    schedulerView: _0xecbcx1,
                    constrainTo: _0xecbcx1['up']('grid')['el'],
                    listeners: {
                        beforeshow: function() {
                            return _0xecbcx5['dragging']
                        }
                    }
                }, _0xecbcx2))
            }
        };
        if (_0xecbcx5['showHoverTip']) {
            var _0xecbcx3 = _0xecbcx5['hoverTip'];
            if (_0xecbcx3 instanceof Ext['tip']['ToolTip']) {
                _0xecbcx3['schedulerView'] = _0xecbcx1
            } else {
                _0xecbcx5['hoverTip'] = Ext['ComponentManager']['create'](Ext['applyIf']({
                    renderTo: Ext['getBody'](),
                    target: _0xecbcx1['el'],
                    schedulerView: _0xecbcx1
                }, _0xecbcx3), 'scheduler_hovertip')
            }
        }
    },
    verifyLeftButtonPressed: function(_0xecbcx1, _0xecbcx2) {
        return _0xecbcx2['button'] === 0
    },
    onSchedulerDestroy: function() {
        if (this['hoverTip'] && this['hoverTip']['destroy']) {
            this['hoverTip']['destroy']()
        };
        if (this['dragTip'] && this['dragTip']['destroy']) {
            this['dragTip']['destroy']()
        };
        if (this['tracker']) {
            this['tracker']['destroy']()
        };
        if (this['proxy']) {
            Ext['destroy'](this['proxy']);
            this['proxy'] = null
        };
        clearTimeout(this['unbindTimer'])
    }
});
Ext.define('Ext.ux.Scheduler.feature.SchedulerDragZone', {
    extend: 'Ext.dd.DragZone',
    requires: ['Ext.dd.StatusProxy', 'Ext.ux.Scheduler.tooltip.Tooltip'],
    uses: ['Ext.ux.Scheduler.patches.DragZone'],
    repairHighlight: false,
    repairHighlightColor: 'transparent',
    containerScroll: false,
    showTooltip: true,
    tip: null,
    deltaSetXY: null,
    schedulerView: null,
    _onValidDropTimer: null,
    lastXY: null,
    showExactDropPosition: false,
    enableCopy: false,
    enableCopyKey: 'SHIFT',
    validatorFn: function(_0xecbcx2, _0xecbcx1, _0xecbcx5, _0xecbcx6, _0xecbcx3) {
        return true
    },
    validatorFnScope: null,
    copyKeyPressed: false,
    dragDropProxyCls: 'sch-dd-ref',
    invalidCssClasses: ['sch-resizable-handle', 'sch-terminal'],
    constructor: function(_0xecbcx5, _0xecbcx1) {
        if (Ext['isIE8m'] && window['top'] !== window) {
            Ext['dd']['DragDropManager']['notifyOccluded'] = true
        };
        var _0xecbcx2 = this['proxy'] = this['proxy'] || new Ext['dd'].StatusProxy({
            shadow: false,
            dropAllowed: this['dropAllowed'],
            dropNotAllowed: this['dropNotAllowed'],
            ensureAttachedToBody: Ext['emptyFn']
        });
        this['callParent'](arguments);
        this['isTarget'] = true;
        this['scroll'] = false;
        this['ignoreSelf'] = false;
        var _0xecbcx4 = this['schedulerView'];
        Ext['Array']['each'](this['invalidCssClasses'], this['addInvalidHandleClass'], this);
        if (_0xecbcx4['touchScroll']) {
            this['showTooltip'] = false
        };
        _0xecbcx4['el']['appendChild'](_0xecbcx2['el']);
        this['bindRightClickPreventer']();
        _0xecbcx2['addCls']('sch-dragproxy');
        _0xecbcx4['on']({
            eventdragstart: function() {
                Ext.ux.Scheduler['util']['ScrollManager']['activate'](_0xecbcx4, _0xecbcx4['constrainDragToResource'] && _0xecbcx4['getMode']())
            },
            aftereventdrop: function() {
                Ext.ux.Scheduler['util']['ScrollManager']['deactivate']()
            },
            scope: this
        });
        if (this['showTooltip']) {
            var _0xecbcx3 = this['tip'];
            if (_0xecbcx3 instanceof Ext['tip']['ToolTip']) {
                _0xecbcx3['schedulerView'] = _0xecbcx4
            } else {
                this['tip'] = new Ext.ux.Scheduler['tooltip'].Tooltip(Ext.apply({
                    schedulerView: _0xecbcx4,
                    constrainTo: _0xecbcx4['up']('grid')['el'],
                    alignOnScroll: false,
                    cls: 'sch-dragdrop-tip'
                }, _0xecbcx3))
            }
        }
    },
    bindRightClickPreventer: function() {
        var _0xecbcx1;
        if (Ext['isIE10']) {
            _0xecbcx1 = 'contextmenu'
        } else {
            _0xecbcx1 = 'mousedown'
        };
        this['schedulerView']['el']['on'](_0xecbcx1, this['preventRightClick'], this, {
            priority: 999
        })
    },
    destroy: function() {
        this['tip'] && this['tip']['destroy']();
        clearTimeout(this._onValidDropTimer);
        this['callParent'](arguments)
    },
    preventRightClick: function(_0xecbcx1) {
        if (this['dragging'] && _0xecbcx1['button'] !== 0) {
            _0xecbcx1['stopEvent']();
            return false
        }
    },
    autoOffset: function() {
        this['setDelta'](0, 0)
    },
    setupConstraints: function(_0xecbcxd, _0xecbcx3, _0xecbcx9, _0xecbcx4, _0xecbcxa, _0xecbcx6, _0xecbcx5) {
        this['clearTicks']();
        var _0xecbcx1 = _0xecbcxa && !this['showExactDropPosition'] && _0xecbcx6 > 1 ? _0xecbcx6 : 0;
        var _0xecbcx7 = !_0xecbcxa && !this['showExactDropPosition'] && _0xecbcx6 > 1 ? _0xecbcx6 : 0;
        this['resetConstraints']();
        this['initPageX'] = _0xecbcxd['left'] + _0xecbcx9;
        this['initPageY'] = _0xecbcxd['top'] + _0xecbcx4;
        var _0xecbcx2 = _0xecbcx3['right'] - _0xecbcx3['left'];
        var _0xecbcx8 = _0xecbcx3['bottom'] - _0xecbcx3['top'];
        if (_0xecbcxa) {
            if (_0xecbcx5) {
                this['setXConstraint'](_0xecbcxd['left'] + _0xecbcx9, _0xecbcxd['right'] - _0xecbcx2 + _0xecbcx9, _0xecbcx1)
            } else {
                this['setXConstraint'](_0xecbcxd['left'], _0xecbcxd['right'], _0xecbcx1)
            };
            this['setYConstraint'](_0xecbcxd['top'] + _0xecbcx4, _0xecbcxd['bottom'] - _0xecbcx8 + _0xecbcx4, _0xecbcx7)
        } else {
            this['setXConstraint'](_0xecbcxd['left'] + _0xecbcx9, _0xecbcxd['right'] - _0xecbcx2 + _0xecbcx9, _0xecbcx1);
            if (_0xecbcx5) {
                this['setYConstraint'](_0xecbcxd['top'] + _0xecbcx4, _0xecbcxd['bottom'] - _0xecbcx8 + _0xecbcx4, _0xecbcx7)
            } else {
                this['setYConstraint'](_0xecbcxd['top'], _0xecbcxd['bottom'], _0xecbcx7)
            }
        }
    },
    setXConstraint: function(_0xecbcx5, _0xecbcx2, _0xecbcx1) {
        this['leftConstraint'] = _0xecbcx5;
        this['rightConstraint'] = _0xecbcx2;
        this['minX'] = _0xecbcx5;
        this['maxX'] = _0xecbcx2;
        if (_0xecbcx1) {
            this['setXTicks'](this['initPageX'], _0xecbcx1)
        };
        this['constrainX'] = true
    },
    setYConstraint: function(_0xecbcx1, _0xecbcx5, _0xecbcx2) {
        this['topConstraint'] = _0xecbcx1;
        this['bottomConstraint'] = _0xecbcx5;
        this['minY'] = _0xecbcx1;
        this['maxY'] = _0xecbcx5;
        if (_0xecbcx2) {
            this['setYTicks'](this['initPageY'], _0xecbcx2)
        };
        this['constrainY'] = true
    },
    onDragEnter: Ext['emptyFn'],
    onDragOut: Ext['emptyFn'],
    setVisibilityForSourceEvents: function(_0xecbcx1) {
        Ext['Array']['each'](this['dragData']['getEventBarElements'](), function(_0xecbcx2) {
            _0xecbcx2 && Ext['fly'](_0xecbcx2)[_0xecbcx1 ? 'show' : 'hide']()
        })
    },
    onDragOver: function(_0xecbcx9) {
        if (_0xecbcx9 && _0xecbcx9['event']['touches'] && _0xecbcx9['event']['touches']['length'] > 1) {
            Ext['dd']['DragDropManager']['handleMouseUp'](_0xecbcx9);
            return
        };
        var _0xecbcx11 = _0xecbcx9 ? _0xecbcx9['getXY']() : this['lastXY'];
        if (!_0xecbcx11) {
            return
        };
        var _0xecbcxd = this['dragData'];
        if (!_0xecbcxd['originalHidden']) {
            this['setVisibilityForSourceEvents'](false);
            _0xecbcxd['originalHidden'] = true;
            this['onShiftKeyStateChange'](_0xecbcx9[this['enableCopyKey']['toLowerCase']() + 'Key'])
        };
        var _0xecbcx2 = _0xecbcxd['startDate'];
        var _0xecbcx3 = _0xecbcxd['newResource'];
        var _0xecbcx7 = this['schedulerView'];
        this['updateDragContext'](_0xecbcx9);
        if (this['showExactDropPosition']) {
            var _0xecbcxa = _0xecbcx7['isHorizontal']();
            var _0xecbcx1 = _0xecbcx7['getDateFromCoordinate'](_0xecbcxa ? _0xecbcx11[0] : _0xecbcx11[1]) - _0xecbcxd['sourceDate'];
            var _0xecbcx8 = new Date(_0xecbcxd['origStart'] - 0 + _0xecbcx1);
            var _0xecbcx6 = _0xecbcx7['timeAxisViewModel']['getDistanceBetweenDates'](_0xecbcx8, _0xecbcxd['startDate']);
            if (_0xecbcxd['startDate'] > _0xecbcx7['timeAxis']['getStart']()) {
                var _0xecbcx5 = this['proxy']['el'];
                if (_0xecbcx6) {
                    if (_0xecbcx7['isHorizontal']()) {
                        _0xecbcx5['setX'](_0xecbcx11[0] + (_0xecbcx7['shouldAdjustForRtl']() ? -_0xecbcx6 : _0xecbcx6))
                    } else {
                        _0xecbcx5['setY'](_0xecbcx11[1] + _0xecbcx6)
                    }
                }
            }
        };
        if (_0xecbcxd['startDate'] - _0xecbcx2 !== 0 || _0xecbcx3 !== _0xecbcxd['newResource']) {
            _0xecbcx7['fireEvent']('eventdrag', _0xecbcx7, _0xecbcxd['draggedRecords'], _0xecbcxd['startDate'], _0xecbcxd['newResource'], _0xecbcxd)
        };
        if (this['showTooltip']) {
            this['tip']['update'](_0xecbcxd['startDate'], _0xecbcxd['endDate'], _0xecbcxd['valid'], _0xecbcxd['message'])
        };
        if (_0xecbcx9) {
            this['lastXY'] = [_0xecbcx9['browserEvent']['clientX'] + document['body']['scrollLeft'], _0xecbcx9['getY']()]
        }
    },
    getCoordinate: function(_0xecbcx2) {
        var _0xecbcx1 = this['schedulerView'];
        if (_0xecbcx1['isHorizontal']()) {
            return _0xecbcx2[0]
        };
        if (_0xecbcx1['isVertical']()) {
            return _0xecbcx2[1]
        };
        if (_0xecbcx1['isWeekView']()) {
            return _0xecbcx2
        }
    },
    getDragData: function(_0xecbcxb) {
        var _0xecbcx7 = this['schedulerView'],
            _0xecbcx15 = _0xecbcxb['getTarget'](_0xecbcx7['eventSelector']);
        if (!_0xecbcx15 || _0xecbcxb['event']['touches'] && _0xecbcxb['event']['touches']['length'] > 1) {
            return
        };
        var _0xecbcx8 = _0xecbcx7['resolveEventRecord'](_0xecbcx15),
            _0xecbcxe = _0xecbcx7['resolveResource'](_0xecbcx15),
            _0xecbcx3 = _0xecbcx7['resolveAssignmentRecord'](_0xecbcx15),
            _0xecbcxc = _0xecbcx8 && _0xecbcx8['isDraggable']() && !_0xecbcx7['isReadOnly']();
        if (!_0xecbcxc || _0xecbcx7['fireEvent']('beforeeventdrag', _0xecbcx7, _0xecbcx8, _0xecbcxb) === false) {
            return null
        };
        var _0xecbcx9 = _0xecbcxb['getXY'](),
            _0xecbcx17 = Ext['fly'](_0xecbcx15)['getXY'](),
            _0xecbcxa = [_0xecbcx9[0] - _0xecbcx17[0], _0xecbcx9[1] - _0xecbcx17[1]],
            _0xecbcx11 = Ext['fly'](_0xecbcx15)['getRegion']();
        this['lastXY'] = null;
        var _0xecbcxd = _0xecbcx7['isHorizontal']();
        _0xecbcx7['constrainDragToResource'] && !_0xecbcxe && Ext['Error']['raise']('Resource could not be resolved for event: ' + _0xecbcx8['getId']());
        var _0xecbcx10 = _0xecbcx7['getDateConstraints'](_0xecbcx7['constrainDragToResource'] ? _0xecbcxe : null, _0xecbcx8);
        this['setupConstraints'](_0xecbcx7['getScheduleRegion'](_0xecbcx7['constrainDragToResource'] ? _0xecbcxe : null, _0xecbcx8), _0xecbcx11, _0xecbcxa[0], _0xecbcxa[1], _0xecbcxd, _0xecbcx7['getSnapPixelAmount'](), Boolean(_0xecbcx10));
        var _0xecbcx1 = _0xecbcx8['getStartDate'](),
            _0xecbcxf = _0xecbcx8['getEndDate'](),
            _0xecbcx2 = _0xecbcx7['timeAxis'],
            _0xecbcx6 = this['getRelatedRecords'](_0xecbcx3 || _0xecbcx8) || [],
            _0xecbcx14 = _0xecbcx7['getElementsFromEventRecord'](_0xecbcx8, _0xecbcx7['isWeekView']() ? null : _0xecbcxe, null, true);
        Ext['Array']['each'](_0xecbcx6, function(_0xecbcx4) {
            if (_0xecbcx4 instanceof Ext.ux.Scheduler['model']['Assignment']) {
                _0xecbcx14 = _0xecbcx14['concat'](_0xecbcx7['getElementsFromEventRecord'](_0xecbcx4['getEvent'](), _0xecbcx4['getResource'](), null, true))
            } else {
                _0xecbcx14 = _0xecbcx14['concat'](_0xecbcx7['getElementsFromEventRecord'](_0xecbcx4, null, null, true))
            }
        });
        _0xecbcx14 = Ext['Array']['unique'](_0xecbcx14);
        var _0xecbcx5 = {
            offsets: _0xecbcxa,
            repairXY: _0xecbcx17,
            prevScroll: _0xecbcx7['getScroll'](),
            dateConstraints: _0xecbcx10,
            eventBarEls: _0xecbcx14,
            getEventBarElements: function() {
                return _0xecbcx5['eventBarEls'] = Ext['Array']['map'](_0xecbcx5['eventBarEls'], function(_0xecbcx4) {
                    return _0xecbcx4 && document['getElementById'](_0xecbcx4['id'])
                })
            },
            draggedRecords: [_0xecbcx3 || _0xecbcx8]['concat'](_0xecbcx6),
            resourceRecord: _0xecbcxe,
            sourceDate: _0xecbcx7['getDateFromCoordinate'](this['getCoordinate'](_0xecbcx9)),
            origStart: _0xecbcx1,
            origEnd: _0xecbcxf,
            startDate: _0xecbcx1,
            endDate: _0xecbcxf,
            timeDiff: 0,
            startsOutsideView: _0xecbcx1 < _0xecbcx2['getStart'](),
            endsOutsideView: _0xecbcxf > _0xecbcx2['getEnd'](),
            duration: _0xecbcxf - _0xecbcx1
        };
        this['copyKeyPressed'] = _0xecbcxb[this['enableCopyKey']['toLowerCase']() + 'Key'];
        _0xecbcx5['ddel'] = this['getDragElement'](_0xecbcx15, _0xecbcx5);
        return _0xecbcx5
    },
    onStartDrag: function() {
        var _0xecbcx2 = this['schedulerView'],
            _0xecbcx1 = this['dragData'];
        Ext['Array']['each'](_0xecbcx1['getEventBarElements'](), function(_0xecbcx5) {
            Ext['fly'](_0xecbcx5)['removeCls']('sch-event-hover')
        });
        _0xecbcx2['fireEvent']('eventdragstart', _0xecbcx2, _0xecbcx1['draggedRecords']);
        _0xecbcx2['getScrollable']()['on']('scroll', this['onViewScroll'], this);
        if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
            _0xecbcx2['up']('timelinetree,timelinegrid')['getScrollable']()['on']('scroll', this['onViewScroll'], this)
        }
    },
    alignElWithMouse: function(_0xecbcx2, _0xecbcx4, _0xecbcx3) {
        this['callParent'](arguments);
        if (Ext['isIE'] && this['schedulerView']['rtl'] && this['schedulerView']['up']('[isViewport]')) {
            this['deltaSetXY'] = null;
            this['callParent'](arguments)
        };
        var _0xecbcx5 = this['getTargetCoord'](_0xecbcx4, _0xecbcx3),
            _0xecbcx1 = _0xecbcx2['dom'] ? _0xecbcx2 : Ext['fly'](_0xecbcx2, '_dd');
        this['setLocalXY'](_0xecbcx1, _0xecbcx5['x'] + this['deltaSetXY'][0], _0xecbcx5['y'] + this['deltaSetXY'][1])
    },
    onViewScroll: function(_0xecbcx9) {
        var _0xecbcx4 = this['proxy'],
            _0xecbcxd = this['schedulerView'],
            _0xecbcxa = this['dragData'],
            _0xecbcx7 = _0xecbcxd['getScroll'](),
            _0xecbcx2 = _0xecbcx7['left'],
            _0xecbcx6 = _0xecbcx7['top'],
            _0xecbcx3 = _0xecbcxd['rtl'] && !_0xecbcxd['up']('[isViewport]');
        this['setVisibilityForSourceEvents'](false);
        var _0xecbcx8 = _0xecbcx4['getXY']();
        var _0xecbcx5;
        if (_0xecbcx3) {
            _0xecbcx5 = [_0xecbcx8[0] - _0xecbcx2 + _0xecbcxa['prevScroll']['left'], _0xecbcx8[1] + _0xecbcx6 - _0xecbcxa['prevScroll']['top']]
        } else {
            _0xecbcx5 = [_0xecbcx8[0] + _0xecbcx2 - _0xecbcxa['prevScroll']['left'], _0xecbcx8[1] + _0xecbcx6 - _0xecbcxa['prevScroll']['top']]
        };
        var _0xecbcx1 = this['deltaSetXY'];
        if (_0xecbcx3) {
            this['deltaSetXY'] = [_0xecbcx1[0] - _0xecbcx2 + _0xecbcxa['prevScroll']['left'], _0xecbcx1[1] + _0xecbcx6 - _0xecbcxa['prevScroll']['top']]
        } else {
            this['deltaSetXY'] = [_0xecbcx1[0] + _0xecbcx2 - _0xecbcxa['prevScroll']['left'], _0xecbcx1[1] + _0xecbcx6 - _0xecbcxa['prevScroll']['top']]
        };
        _0xecbcxa['prevScroll'] = {
            left: _0xecbcx2,
            top: _0xecbcx6
        };
        _0xecbcx4['setXY'](_0xecbcx5);
        this['onDragOver']()
    },
    isCopyKeyPressed: function() {
        return this['enableCopy'] && this['copyKeyPressed']
    },
    onShiftKeyStateChange: function(_0xecbcx2) {
        var _0xecbcx1 = this['dragData'];
        if (_0xecbcx2) {
            _0xecbcx1['refElements']['addCls']('sch-event-copy')
        } else {
            _0xecbcx1['refElements']['removeCls']('sch-event-copy')
        };
        this['setVisibilityForSourceEvents'](_0xecbcx2);
        this['copyKeyPressed'] = _0xecbcx2
    },
    onKey: function(_0xecbcx1) {
        if (this['enableCopy'] && _0xecbcx1['getKey']() === _0xecbcx1[this['enableCopyKey']]) {
            this['onShiftKeyStateChange'](_0xecbcx1['type'] === 'keydown')
        };
        if (_0xecbcx1['getKey']() === _0xecbcx1['ESC']) {
            this['dragData']['ddCallbackArgs'] = [_0xecbcx1['getTarget'](), _0xecbcx1, this['id']];
            this['finalize'](false);
            Ext['dd']['DragDropManager']['stopDrag'](_0xecbcx1);
            Ext['dd']['DragDropManager']['stopEvent'](_0xecbcx1)
        }
    },
    startDrag: function() {
        Ext['getDoc']()['on']({
            keydown: this['onKey'],
            keyup: this['onKey'],
            useCapture: true,
            scope: this
        });
        var _0xecbcx2 = this['callParent'](arguments);
        var _0xecbcx1 = this['dragData'];
        _0xecbcx1['refElement'] = this['proxy']['el']['down']('.' + this['dragDropProxyCls']);
        _0xecbcx1['refElements'] = this['proxy']['el']['select']('.sch-event');
        _0xecbcx1['refElement']['removeCls']('sch-event-hover');
        if (this['showTooltip']) {
            this['tip']['setStyle']('visibility');
            this['tip']['update'](_0xecbcx1['origStart'], _0xecbcx1['origEnd'], true);
            this['tip']['showForElement'](_0xecbcx1['refElement'], _0xecbcx1['offsets'][0])
        };
        if (this['copyKeyPressed']) {
            _0xecbcx1['refElements']['addCls']('sch-event-copy');
            _0xecbcx1['originalHidden'] = true
        };
        return _0xecbcx2
    },
    endDrag: function() {
        this['schedulerView']['getScrollable']()['un']('scroll', this['onViewScroll'], this);
        if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
            this['schedulerView']['up']('timelinetree,timelinegrid')['getScrollable']()['un']('scroll', this['onViewScroll'], this)
        };
        Ext['getDoc']()['un']({
            keydown: this['onKey'],
            keyup: this['onKey'],
            useCapture: true,
            scope: this
        });
        this['callParent'](arguments)
    },
    onMouseUp: function() {
        if (!this['dragging']) {
            this['afterDragFinalized']()
        }
    },
    afterDragFinalized: function() {
        this['proxy']['el']['dom']['style']['top'] = this['proxy']['el']['dom']['style']['left'] = 0
    },
    updateRecords: function(_0xecbcx5) {
        var _0xecbcx8 = this,
            _0xecbcxd = _0xecbcx8['schedulerView'],
            _0xecbcx4 = _0xecbcxd['getEventStore'](),
            _0xecbcxe = _0xecbcxd['getResourceStore'](),
            _0xecbcx7 = _0xecbcx4['getAssignmentStore'](),
            _0xecbcx6 = _0xecbcx5['newResource'],
            _0xecbcx9 = _0xecbcx5['draggedRecords'][0],
            _0xecbcx2 = _0xecbcx5['draggedRecords']['slice'](1),
            _0xecbcxa = _0xecbcx5['resourceRecord'],
            _0xecbcx11 = _0xecbcx8['isCopyKeyPressed'](),
            _0xecbcx3 = _0xecbcx5['startDate'],
            _0xecbcx1 = _0xecbcx5['timeDiff'],
            _0xecbcxf = _0xecbcxd['isWeekView']();
        if (_0xecbcx7 && _0xecbcx4 instanceof Ext.ux.Scheduler['data']['EventStore']) {
            _0xecbcx8['updateRecordsMultipleAssignmentMode'](_0xecbcx3, _0xecbcx1, _0xecbcx9, _0xecbcx2, _0xecbcxa, _0xecbcx6, _0xecbcx4, _0xecbcxe, _0xecbcx7, _0xecbcx11, _0xecbcxf)
        } else {
            if (_0xecbcx7) {
                _0xecbcx8['updateRecordsSingleAssignmentMode'](_0xecbcx3, _0xecbcx1, _0xecbcx9['getEvent'](), Ext['Array']['map'](_0xecbcx2, function(_0xecbcxc) {
                    return _0xecbcxc['getEvent']()
                }), _0xecbcxa, _0xecbcx6, _0xecbcx4, _0xecbcxe, _0xecbcx11, _0xecbcxf)
            } else {
                _0xecbcx8['updateRecordsSingleAssignmentMode'](_0xecbcx3, _0xecbcx1, _0xecbcx9, _0xecbcx2, _0xecbcxa, _0xecbcx6, _0xecbcx4, _0xecbcxe, _0xecbcx11, _0xecbcxf)
            }
        };
        _0xecbcxd['fireEvent']('eventdrop', _0xecbcxd, _0xecbcx5['draggedRecords'], _0xecbcx11)
    },
    updateRecordsSingleAssignmentMode: function(_0xecbcx5, _0xecbcx2, _0xecbcx11, _0xecbcx7, _0xecbcx3, _0xecbcxa, _0xecbcx4, _0xecbcx8, _0xecbcx1, _0xecbcxd) {
        var _0xecbcx9 = this,
            _0xecbcxe = [];
        if (_0xecbcx1) {
            _0xecbcx11 = _0xecbcx11['fullCopy'](null);
            _0xecbcxe['push'](_0xecbcx11)
        };
        _0xecbcx11['beginEdit']();
        if (_0xecbcx3 instanceof Ext.ux.Scheduler['model']['Resource'] && _0xecbcxa instanceof Ext.ux.Scheduler['model']['Resource'] && _0xecbcxa !== _0xecbcx3) {
            if (_0xecbcx1) {
                _0xecbcx11['assign'](_0xecbcxa)
            } else {
                _0xecbcx11['reassign'](_0xecbcx3, _0xecbcxa)
            }
        };
        _0xecbcx11['setStartDate'](_0xecbcx5, true, _0xecbcx4['skipWeekendsDuringDragDrop']);
        _0xecbcx11['endEdit']();
        if (!_0xecbcxd) {
            var _0xecbcx6 = _0xecbcx8['indexOf'](_0xecbcx3) - _0xecbcx8['indexOf'](_0xecbcxa);
            Ext['Array']['each'](_0xecbcx7, function(_0xecbcxc) {
                var _0xecbcxf = _0xecbcxc['getResources']();
                if (_0xecbcx1) {
                    _0xecbcxc = _0xecbcxc['fullCopy'](null);
                    _0xecbcxe['push'](_0xecbcxc)
                };
                _0xecbcxc['beginEdit']();
                _0xecbcxc['setStartDate'](_0xecbcx9['adjustStartDate'](_0xecbcxc['getStartDate'](), _0xecbcx2), true, _0xecbcx4['skipWeekendsDuringDragDrop']);
                _0xecbcx6 !== 0 && _0xecbcxf['length'] && Ext['Array']['each'](_0xecbcxf, function(_0xecbcx15) {
                    var _0xecbcx10 = _0xecbcx8['indexOf'](_0xecbcx15) - _0xecbcx6,
                        _0xecbcxb;
                    if (_0xecbcx10 < 0) {
                        _0xecbcx10 = 0
                    } else {
                        if (_0xecbcx10 >= _0xecbcx8['getCount']()) {
                            _0xecbcx10 = _0xecbcx8['getCount']() - 1
                        }
                    };
                    _0xecbcxb = _0xecbcx8['getAt'](_0xecbcx10);
                    _0xecbcxc['reassign'](_0xecbcx15, _0xecbcxb)
                });
                _0xecbcxc['endEdit']()
            })
        };
        if (_0xecbcxe['length']) {
            _0xecbcx4['append'](_0xecbcxe)
        }
    },
    updateRecordsMultipleAssignmentMode: function(_0xecbcx5, _0xecbcx2, _0xecbcx9, _0xecbcxe, _0xecbcx3, _0xecbcxa, _0xecbcx4, _0xecbcxd, _0xecbcx6, _0xecbcx1, _0xecbcx11) {
        var _0xecbcx7 = this;
        var _0xecbcx8 = {};
        Ext['Array']['each']([]['concat'](_0xecbcx9, _0xecbcxe), function(_0xecbcxc) {
            var _0xecbcxf = _0xecbcxc['getEvent']();
            if (_0xecbcx8[_0xecbcxf['getId']()]) {
                return
            };
            _0xecbcx8[_0xecbcxf['getId']()] = true;
            _0xecbcxf['setStartDate'](_0xecbcx7['adjustStartDate'](_0xecbcxf['getStartDate'](), _0xecbcx2), true, _0xecbcx4['skipWeekendsDuringDragDrop']);
            if (!_0xecbcx11 && _0xecbcx3 !== _0xecbcxa) {
                if (_0xecbcx1) {
                    _0xecbcxf['assign'](_0xecbcxa)
                } else {
                    if (!_0xecbcxf['isAssignedTo'](_0xecbcxa)) {
                        _0xecbcxf['reassign'](_0xecbcxc['getResource'](), _0xecbcxa)
                    } else {
                        _0xecbcxf['unassign'](_0xecbcxc['getResource']())
                    }
                }
            }
        })
    },
    isValidDrop: function(_0xecbcx1, _0xecbcx2, _0xecbcx5) {
        if (_0xecbcx1 !== _0xecbcx2) {
            if (_0xecbcx5 instanceof Ext.ux.Scheduler['model']['Assignment']) {
                return !_0xecbcx5['getEvent']()['isAssignedTo'](_0xecbcx2)
            } else {
                return !_0xecbcx5['isAssignedTo'](_0xecbcx2)
            }
        };
        return true
    },
    resolveResource: function(_0xecbcx4) {
        var _0xecbcx5 = this['proxy']['el']['dom'];
        var _0xecbcx6 = Ext['getBody']()['getScroll']();
        var _0xecbcx1 = this['schedulerView'];
        _0xecbcx5['style']['display'] = 'none';
        var _0xecbcx3 = document['elementFromPoint'](_0xecbcx4[0] - _0xecbcx6['left'], _0xecbcx4[1] - _0xecbcx6['top']);
        if (Ext['isIE8'] && window['top']['Siesta']) {
            _0xecbcx3 = document['elementFromPoint'](_0xecbcx4[0] - _0xecbcx6['left'], _0xecbcx4[1] - _0xecbcx6['top'])
        };
        _0xecbcx5['style']['display'] = 'block';
        if (!_0xecbcx3) {
            return null
        };
        if (Ext['fly'](_0xecbcx3)['up']('.' + Ext['baseCSSPrefix'] + 'grid-group-hd', 4, true)) {
            return null
        };
        if (_0xecbcx3['className']['match'](Ext['baseCSSPrefix'] + 'grid-item')) {
            return this['resolveResource']([_0xecbcx4[0], _0xecbcx4[1] + 3])
        };
        if (!_0xecbcx3['className']['match'](_0xecbcx1['timeCellCls'])) {
            var _0xecbcx2 = Ext['fly'](_0xecbcx3)['up']('.' + _0xecbcx1['timeCellCls']);
            if (_0xecbcx2) {
                _0xecbcx3 = _0xecbcx2['dom']
            } else {
                return null
            }
        };
        return _0xecbcx1['resolveResource'](_0xecbcx3)
    },
    adjustStartDate: function(_0xecbcx1, _0xecbcx5) {
        var _0xecbcx2 = this['schedulerView'];
        return _0xecbcx2['timeAxis']['roundDate'](new Date(_0xecbcx1 - 0 + _0xecbcx5), _0xecbcx2['snapRelativeToEventStartDate'] ? _0xecbcx1 : false)
    },
    updateDragContext: function(_0xecbcx9) {
        var _0xecbcxa = this['dragData'],
            _0xecbcxd = _0xecbcx9 ? _0xecbcx9['getXY']() : this['lastXY'],
            _0xecbcx1, _0xecbcx2;
        if (_0xecbcx9) {
            if (_0xecbcx9['browserEvent']['touches'] && _0xecbcx9['browserEvent']['touches']['length'] > 0) {
                _0xecbcx1 = _0xecbcx9['browserEvent']['touches'][0]['clientX']
            } else {
                _0xecbcx1 = _0xecbcx9['browserEvent']['clientX'] != null ? _0xecbcx9['browserEvent']['clientX'] : _0xecbcx9['clientX']
            };
            _0xecbcx2 = [_0xecbcx1 + document['body']['scrollLeft'], _0xecbcx9['getY']()]
        } else {
            _0xecbcx2 = this['lastXY']
        };
        if (!_0xecbcxa['refElement']) {
            return
        };
        var _0xecbcx11 = this['schedulerView'],
            _0xecbcx3 = _0xecbcxa['refElement']['getRegion']();
        if (_0xecbcx11['timeAxis']['isContinuous']()) {
            if ((_0xecbcx11['isHorizontal']() && this['minX'] < _0xecbcxd[0] && _0xecbcxd[0] < this['maxX']) || (!_0xecbcx11['isHorizontal']() && this['minY'] < _0xecbcxd[1] && _0xecbcxd[1] < this['maxY'])) {
                var _0xecbcx7 = _0xecbcx11['getDateFromCoordinate'](this['getCoordinate'](_0xecbcxd));
                _0xecbcxa['timeDiff'] = _0xecbcx7 - _0xecbcxa['sourceDate'];
                _0xecbcxa['startDate'] = this['adjustStartDate'](_0xecbcxa['origStart'], _0xecbcxa['timeDiff']);
                _0xecbcxa['endDate'] = new Date(_0xecbcxa['startDate'] - 0 + _0xecbcxa['duration'])
            }
        } else {
            var _0xecbcx6;
            if (_0xecbcx11['isWeekView']()) {
                var _0xecbcx5 = {
                    bottom: _0xecbcx3['bottom'],
                    top: _0xecbcx3['top']
                };
                _0xecbcx5['left'] = _0xecbcx5['right'] = _0xecbcx3['left'] + _0xecbcxa['offsets'][0];
                _0xecbcx6 = this['resolveStartEndDates'](_0xecbcx5)
            } else {
                _0xecbcx6 = this['resolveStartEndDates'](_0xecbcx3)
            };
            _0xecbcxa['startDate'] = _0xecbcx6['startDate'];
            _0xecbcxa['endDate'] = _0xecbcx6['endDate'];
            _0xecbcxa['timeDiff'] = _0xecbcxa['startDate'] - _0xecbcxa['origStart']
        };
        _0xecbcxa['newResource'] = _0xecbcx11['constrainDragToResource'] ? _0xecbcxa['resourceRecord'] : this['resolveResource'](_0xecbcx2);
        if (_0xecbcxa['newResource']) {
            var _0xecbcx8 = !_0xecbcx9 || this['validatorFn']['call'](this['validatorFnScope'] || this, _0xecbcxa['draggedRecords'], _0xecbcxa['newResource'], _0xecbcxa['startDate'], _0xecbcxa['duration'], _0xecbcx9);
            if (!_0xecbcx8 || typeof _0xecbcx8 === 'boolean') {
                _0xecbcxa['valid'] = _0xecbcx8 !== false;
                _0xecbcxa['message'] = ''
            } else {
                _0xecbcxa['valid'] = _0xecbcx8['valid'] !== false;
                _0xecbcxa['message'] = _0xecbcx8['message']
            }
        } else {
            _0xecbcxa['valid'] = false
        }
    },
    getRelatedRecords: function(_0xecbcx5) {
        var _0xecbcx2 = this['schedulerView'],
            _0xecbcx3 = _0xecbcx2['getEventSelectionModel'](),
            _0xecbcx1 = _0xecbcx3['getDraggableSelections']();
        return Ext['Array']['filter'](_0xecbcx1, function(_0xecbcx4) {
            return _0xecbcx5 !== _0xecbcx4
        })
    },
    getDragElement: function(_0xecbcx8, _0xecbcx9) {
        var _0xecbcx3 = _0xecbcx9['getEventBarElements']();
        var _0xecbcx1;
        var _0xecbcx2;
        var _0xecbcx7 = _0xecbcx9['offsets'][0];
        var _0xecbcx6 = _0xecbcx9['offsets'][1];
        var _0xecbcx4 = _0xecbcx8['dom'] || _0xecbcx8;
        var _0xecbcx5 = !this['schedulerView']['rtl'] || this['schedulerView']['shouldAdjustForRtl']();
        if (_0xecbcx3['length'] > 1) {
            var _0xecbcxa = Ext['core']['DomHelper']['createDom']({
                tag: 'div',
                cls: 'sch-dd-wrap',
                style: {
                    overflow: 'visible'
                }
            });
            Ext['Array']['each'](_0xecbcx3, function(_0xecbcx11) {
                _0xecbcx1 = _0xecbcx11['cloneNode'](true);
                _0xecbcx1['id'] = Ext['id']();
                if (_0xecbcx11 === _0xecbcx4) {
                    _0xecbcx1['className'] += ' ' + this['dragDropProxyCls'];
                    if (Ext['isIE8']) {
                        Ext['fly'](_0xecbcx1)['addCls'](this['dragDropProxyCls'])
                    }
                };
                _0xecbcxa['appendChild'](_0xecbcx1);
                var _0xecbcxd = Ext['fly'](_0xecbcx11)['getOffsetsTo'](_0xecbcx4);
                if (_0xecbcx5) {
                    _0xecbcx1['style']['left'] = _0xecbcxd[0] - _0xecbcx7 + 'px'
                } else {
                    _0xecbcx1['style']['left'] = _0xecbcx7 - Ext['fly'](_0xecbcx11)['getWidth']() - _0xecbcxd[0] + 'px'
                };
                _0xecbcx1['style']['top'] = _0xecbcxd[1] - _0xecbcx6 + 'px'
            }, this);
            _0xecbcx2 = _0xecbcxa
        } else {
            _0xecbcx1 = _0xecbcx4['cloneNode'](true);
            _0xecbcx1['id'] = Ext['id']();
            _0xecbcx1['style']['left'] = (_0xecbcx5 ? -_0xecbcx7 : (_0xecbcx7 - Ext['fly'](_0xecbcx4)['getWidth']())) + 'px';
            _0xecbcx1['style']['top'] = -_0xecbcx6 + 'px';
            _0xecbcx1['className'] += ' ' + this['dragDropProxyCls'];
            if (Ext['isIE8']) {
                Ext['fly'](_0xecbcx1)['addCls'](this['dragDropProxyCls'])
            };
            _0xecbcx2 = _0xecbcx1
        };
        if (!_0xecbcx4['style']['height']) {
            Ext['fly'](_0xecbcx2)['setHeight'](Ext['fly'](_0xecbcx4)['getHeight']())
        };
        return _0xecbcx2
    },
    onDragDrop: function(_0xecbcx7, _0xecbcxa) {
        this['updateDragContext'](_0xecbcx7);
        var _0xecbcx3 = this,
            _0xecbcx2 = _0xecbcx3['schedulerView'],
            _0xecbcx9 = _0xecbcx3['cachedTarget'] || Ext['dd']['DragDropMgr']['getDDById'](_0xecbcxa),
            _0xecbcx6 = _0xecbcx3['dragData'],
            _0xecbcx1 = false,
            _0xecbcx5 = true;
        if (_0xecbcx3['tip']) {
            _0xecbcx3['tip']['hide']()
        };
        _0xecbcx6['ddCallbackArgs'] = [_0xecbcx9, _0xecbcx7, _0xecbcxa];
        if (_0xecbcx6['valid'] && _0xecbcx6['startDate'] && _0xecbcx6['endDate']) {
            _0xecbcx6['finalize'] = function() {
                _0xecbcx3['finalize']['apply'](_0xecbcx3, arguments)
            };
            _0xecbcx5 = _0xecbcx2['fireEvent']('beforeeventdropfinalize', _0xecbcx3, _0xecbcx6, _0xecbcx7) !== false;
            if (_0xecbcx5 && _0xecbcx3['isValidDrop'](_0xecbcx6['resourceRecord'], _0xecbcx6['newResource'], _0xecbcx6['draggedRecords'][0])) {
                _0xecbcx1 = (_0xecbcx6['startDate'] - _0xecbcx6['origStart']) !== 0 || _0xecbcx6['newResource'] !== _0xecbcx6['resourceRecord']
            }
        };
        if (_0xecbcx5) {
            _0xecbcx3['finalize'](_0xecbcx6['valid'] && _0xecbcx1)
        } else {
            _0xecbcx3['proxy']['el']['addCls']('sch-before-drag-finalized')
        }
    },
    finalize: function(_0xecbcx5) {
        var _0xecbcx6 = this,
            _0xecbcx2 = _0xecbcx6['schedulerView'],
            _0xecbcx3 = _0xecbcx2['getEventStore'](),
            _0xecbcx9 = _0xecbcx6['dragData'];
        _0xecbcx6['proxy']['el']['removeCls']('sch-before-drag-finalized');
        if (_0xecbcx5) {
            var _0xecbcx1, _0xecbcx4 = function() {
                _0xecbcx1 = true
            };
            _0xecbcx3['on']('update', _0xecbcx4, null, {
                single: true
            });
            _0xecbcx6['updateRecords'](_0xecbcx9);
            _0xecbcx3['un']('update', _0xecbcx4, null, {
                single: true
            });
            if (!_0xecbcx1) {
                _0xecbcx6['onInvalidDrop']['apply'](_0xecbcx6, _0xecbcx9['ddCallbackArgs'])
            } else {
                if (Ext['isIE9']) {
                    _0xecbcx6['proxy']['el']['setStyle']('visibility', 'hidden');
                    _0xecbcx6['_onValidDropTimer'] = Ext['Function']['defer'](_0xecbcx6['onValidDrop'], 10, _0xecbcx6, _0xecbcx9['ddCallbackArgs'])
                } else {
                    _0xecbcx6['onValidDrop']['apply'](_0xecbcx6, _0xecbcx9['ddCallbackArgs'])
                };
                _0xecbcx2['fireEvent']('aftereventdrop', _0xecbcx2, _0xecbcx9['draggedRecords'])
            };
            _0xecbcx6['afterDragFinalized']()
        } else {
            _0xecbcx6['onInvalidDrop']['apply'](_0xecbcx6, _0xecbcx9['ddCallbackArgs'])
        }
    },
    onInvalidDrop: function(_0xecbcx3, _0xecbcx5, _0xecbcx6) {
        if (!_0xecbcx5) {
            _0xecbcx5 = _0xecbcx3;
            _0xecbcx3 = _0xecbcx5['getTarget']() || document['body']
        };
        if (this['tip']) {
            this['tip']['hide']()
        };
        this['setVisibilityForSourceEvents'](true);
        var _0xecbcx1 = this['schedulerView'],
            _0xecbcx2 = this['callParent']([_0xecbcx3, _0xecbcx5, _0xecbcx6]);
        _0xecbcx1['fireEvent']('aftereventdrop', _0xecbcx1, this['dragData']['draggedRecords']);
        this['afterDragFinalized']();
        return _0xecbcx2
    },
    resolveStartEndDates: function(_0xecbcx9) {
        var _0xecbcx1 = this['dragData'],
            _0xecbcx3, _0xecbcx6 = _0xecbcx1['origStart'],
            _0xecbcx2 = _0xecbcx1['origEnd'],
            _0xecbcx4 = Ext.ux.Scheduler['util']['Date'];
        if (!_0xecbcx1['startsOutsideView']) {
            _0xecbcx3 = this['schedulerView']['getStartEndDatesFromRegion'](_0xecbcx9, 'round');
            if (_0xecbcx3) {
                if (_0xecbcx3['start'] && !this['schedulerView']['timeAxis']['dateInAxis'](_0xecbcx3['start'], false)) {
                    var _0xecbcx5 = this['schedulerView']['timeAxis']['getTickFromDate'](_0xecbcx3['start']);
                    if (_0xecbcx5) {
                        _0xecbcx3['start'] = this['schedulerView']['timeAxis']['getDateFromTick'](_0xecbcx5)
                    }
                };
                _0xecbcx6 = _0xecbcx3['start'] || _0xecbcx1['startDate'];
                _0xecbcx2 = _0xecbcx4['add'](_0xecbcx6, _0xecbcx4.MILLI, _0xecbcx1['duration'])
            }
        } else {
            if (!_0xecbcx1['endsOutsideView']) {
                _0xecbcx3 = this['schedulerView']['getStartEndDatesFromRegion'](_0xecbcx9, 'round');
                if (_0xecbcx3) {
                    _0xecbcx2 = _0xecbcx3['end'] || _0xecbcx1['endDate'];
                    _0xecbcx6 = _0xecbcx4['add'](_0xecbcx2, _0xecbcx4.MILLI, -_0xecbcx1['duration'])
                }
            }
        };
        return {
            startDate: _0xecbcx6,
            endDate: _0xecbcx2
        }
    }
});
Ext.define('Ext.ux.Scheduler.feature.DragDrop', {
    requires: ['Ext.XTemplate', 'Ext.ux.Scheduler.feature.SchedulerDragZone'],
    validatorFn: function(_0xecbcx2, _0xecbcx1, _0xecbcx5, _0xecbcx6, _0xecbcx3) {
        return true
    },
    validatorFnScope: null,
    dragConfig: null,
    constructor: function(_0xecbcx2, _0xecbcx1) {
        Ext.apply(this, _0xecbcx1);
        this['schedulerView'] = _0xecbcx2;
        _0xecbcx2['eventDragZone'] = new Ext.ux.Scheduler['feature'].SchedulerDragZone(_0xecbcx2['getEl'](), Ext.apply({
            ddGroup: _0xecbcx2['id'],
            schedulerView: _0xecbcx2,
            validatorFn: this['validatorFn'],
            validatorFnScope: this['validatorFnScope']
        }, this['dragConfig']));
        this['schedulerView']['on']('destroy', this['cleanUp'], this);
        this['callParent']([_0xecbcx1])
    },
    cleanUp: function() {
        var _0xecbcx1 = this['schedulerView'];
        if (_0xecbcx1['eventDragZone']) {
            _0xecbcx1['eventDragZone']['destroy']()
        }
    }
});
Ext.define('Ext.ux.Scheduler.feature.Grouping', {
    extend: 'Ext.grid.feature.Grouping',
    alias: 'feature.scheduler_grouping',
    headerRenderer: Ext['emptyFn'],
    eventStoreDetacher: null,
    assignmentStoreDetacher: null,
    resourceStoreDetacher: null,
    schedulerGroupHeaderTpl: '{[this.renderCells(values)]}',
    headerCellTpl: '<tpl for="."><div class="sch-grid-group-hd-cell {cellCls}" style="{cellStyle}; width: {width}px;"><span>{value}</span></div></tpl>',
    renderCells: function(_0xecbcx3) {
        var _0xecbcx2 = this['view']['getTimeAxisViewModel']();
        var _0xecbcx5 = _0xecbcx2['columnConfig'][_0xecbcx2['columnLinesFor']];
        var _0xecbcx1 = Ext['Array']['map'](_0xecbcx5, function(_0xecbcx4) {
            var _0xecbcx9 = {};
            var _0xecbcx6 = this['headerRenderer'](_0xecbcx4['start'], _0xecbcx4['end'], _0xecbcx3['children'], _0xecbcx9);
            _0xecbcx9['value'] = (_0xecbcx6 === null || _0xecbcx6 === undefined) ? '&nbsp;' : _0xecbcx6;
            _0xecbcx9['width'] = _0xecbcx2['getDistanceBetweenDates'](_0xecbcx4['start'], _0xecbcx4['end']);
            return _0xecbcx9
        }, this);
        return this['headerCellTpl']['apply'](_0xecbcx1)
    },
    disable: function() {
        this['unbindStoreListeners']();
        this['callParent'](arguments)
    },
    enable: function() {
        this['bindStoreListeners']();
        this['callParent'](arguments)
    },
    init: function() {
        var _0xecbcx1 = this['view'];
        var _0xecbcx2 = this;
        this['callParent'](arguments);
        if (typeof this['headerCellTpl'] === 'string') {
            this['headerCellTpl'] = new Ext.XTemplate(this['headerCellTpl'])
        };
        if (_0xecbcx1['getResourceStore']) {
            this['bindStoreListeners']();
            this['groupHeaderTpl'] = new Ext.XTemplate(this['schedulerGroupHeaderTpl'], {
                renderCells: Ext['Function']['bind'](_0xecbcx2['renderCells'], _0xecbcx2)
            });
            _0xecbcx1['on']({
                resourcestorechange: this['bindStoreListeners'],
                eventstorechange: this['bindStoreListeners'],
                assignmentstorechange: this['bindStoreListeners'],
                scope: this
            })
        };
        Ext.apply(_0xecbcx1, {
            getRowNode: function(_0xecbcx5) {
                return this['retrieveNode'](this['getRowId'](_0xecbcx5), true)
            }
        });
        _0xecbcx1['groupingFeature'] = this
    },
    bindStoreListeners: function() {
        var _0xecbcx1 = this['view'];
        if (!_0xecbcx1['isLockedView']) {
            var _0xecbcx2 = _0xecbcx1['getEventStore']();
            var _0xecbcx5 = this['getStoreListeners']();
            this['unbindStoreListeners']();
            if (_0xecbcx2) {
                this['eventStoreDetacher'] = _0xecbcx1['mon'](_0xecbcx2, _0xecbcx5['eventStore'])
            };
            if (_0xecbcx2 && _0xecbcx2['getAssignmentStore']()) {
                this['assignmentStoreDetacher'] = _0xecbcx1['mon'](_0xecbcx2['getAssignmentStore'](), _0xecbcx5['assignmentStore'])
            };
            if (_0xecbcx1['getResourceStore']()) {
                this['resourceStoreDetacher'] = _0xecbcx1['mon'](_0xecbcx1['getResourceStore'](), _0xecbcx5['resourceStore'])
            }
        }
    },
    unbindStoreListeners: function() {
        if (!this['view']['isLockedView']) {
            Ext['destroyMembers'](this, 'eventStoreDetacher', 'resourceStoreDetacher', 'assignmentStoreDetacher')
        }
    },
    getStoreListeners: function() {
        var _0xecbcx1 = this['view'],
            _0xecbcx2 = {
                resourceStore: {
                    add: this['onResourceAdd'],
                    destroyable: true,
                    scope: this
                }
            };
        if (_0xecbcx1['getEventStore']) {
            _0xecbcx2['eventStore'] = {
                add: this['onEventAddOrRemove'],
                remove: this['onEventAddOrRemove'],
                update: this['onEventUpdate'],
                destroyable: true,
                scope: this
            };
            if (_0xecbcx1['getEventStore']()['getAssignmentStore']()) {
                _0xecbcx2['assignmentStore'] = {
                    add: this['onAssignmentAddOrRemove'],
                    update: this['onAssignmentUpdate'],
                    remove: this['onAssignmentAddOrRemove'],
                    destroyable: true,
                    scope: this
                }
            }
        };
        return _0xecbcx2
    },
    refreshGrouping: function(_0xecbcx2) {
        if (!this['view']['getStore']()['isGrouped']()) {
            return
        };
        var _0xecbcx5 = this;
        var _0xecbcx1 = {};
        Ext['Array']['each'](_0xecbcx2, function(_0xecbcx6) {
            if (_0xecbcx6) {
                var _0xecbcx3 = _0xecbcx5['getRecordGroup'](_0xecbcx6);
                if (_0xecbcx3) {
                    var _0xecbcx9 = _0xecbcx3['first']();
                    var _0xecbcx4 = _0xecbcx9['getId']();
                    if (!_0xecbcx1[_0xecbcx4]) {
                        _0xecbcx1[_0xecbcx4] = _0xecbcx9;
                        _0xecbcx5['refreshGroupHeader'](_0xecbcx9, true)
                    }
                }
            }
        })
    },
    onAssignmentAddOrRemove: function(_0xecbcx2, _0xecbcx1) {
        if (!this['view']['getStore']()['isGrouped']()) {
            return
        };
        var _0xecbcx5 = this['view']['getResourceStore']();
        this['refreshGrouping'](Ext['Array']['map'](_0xecbcx1, function(_0xecbcx3) {
            return _0xecbcx3['getResource'](_0xecbcx5)
        }))
    },
    onAssignmentUpdate: function(_0xecbcx1, _0xecbcx3) {
        if (!this['view']['getStore']()['isGrouped']()) {
            return
        };
        var _0xecbcx2 = this['view']['getResourceStore']();
        var _0xecbcx5 = [_0xecbcx3['getResource'](_0xecbcx2)];
        if (_0xecbcx3['previous'] && _0xecbcx3['previous'][_0xecbcx3['resourceIdField']]) {
            _0xecbcx5['push'](_0xecbcx2['getById'](_0xecbcx3['previous'][_0xecbcx3['resourceIdField']]))
        };
        this['refreshGrouping'](_0xecbcx5)
    },
    onEventUpdate: function(_0xecbcx6, _0xecbcx3) {
        if (!this['view']['getStore']()['isGrouped']()) {
            return
        };
        var _0xecbcx9 = this;
        var _0xecbcx7 = _0xecbcx6['getAssignmentStore']();
        if (_0xecbcx7) {
            _0xecbcx9['refreshGrouping'](_0xecbcx3['getResources']())
        } else {
            var _0xecbcx5 = _0xecbcx6['getResourceStore']()['getGroupField']();
            var _0xecbcx1 = _0xecbcx3['previous'] && _0xecbcx3['resourceIdField'] in _0xecbcx3['previous'];
            var _0xecbcx4 = _0xecbcx3['getResource']();
            if (_0xecbcx1) {
                var _0xecbcx2 = _0xecbcx6['getResourceStore']()['getById'](_0xecbcx3['previous'][_0xecbcx3['resourceIdField']]);
                if (_0xecbcx2 && (!_0xecbcx4 || _0xecbcx2['get'](_0xecbcx5) !== _0xecbcx4['get'](_0xecbcx5))) {
                    _0xecbcx9['refreshGroupHeader'](_0xecbcx2)
                }
            };
            if (_0xecbcx4) {
                _0xecbcx9['refreshGroupHeader'](_0xecbcx4)
            }
        }
    },
    onEventAddOrRemove: function(_0xecbcx5, _0xecbcx2) {
        if (!this['view']['getStore']()['isGrouped']()) {
            return
        };
        var _0xecbcx6 = this;
        var _0xecbcx1 = _0xecbcx6['view'];
        var _0xecbcx3 = _0xecbcx1['getEventStore']();
        var _0xecbcx4 = Ext['Array']['map'](_0xecbcx2, function(_0xecbcx9) {
            return _0xecbcx3['getResourcesForEvent'](_0xecbcx9)
        });
        _0xecbcx4 = []['concat']['apply']([], _0xecbcx4);
        this['refreshGrouping'](Ext['Array']['unique'](_0xecbcx4))
    },
    onResourceAdd: function(_0xecbcx2, _0xecbcx1) {
        if (!this['view']['getStore']()['isGrouped']()) {
            return
        };
        this['refreshGrouping'](_0xecbcx1)
    },
    refreshGroupHeader: function(_0xecbcx3, _0xecbcx5) {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['view'];
        if (_0xecbcx2['disabled'] || !_0xecbcx2['view']['getResourceStore']()['isGrouped']()) {
            return
        };
        _0xecbcx1['refreshNode'](_0xecbcx5 ? _0xecbcx3 : _0xecbcx2['getRecordGroup'](_0xecbcx3)['first']())
    },
    injectGroupingMenu: function() {
        var _0xecbcx1 = this,
            _0xecbcx2 = _0xecbcx1['view']['headerCt'];
        _0xecbcx2['showMenuBy'] = Ext['Function']['createInterceptor'](_0xecbcx2['showMenuBy'], _0xecbcx1['showMenuBy']);
        _0xecbcx2['getMenuItems'] = _0xecbcx1['getMenuItems']()
    },
    showMenuBy: function(_0xecbcx7, _0xecbcxa, _0xecbcx5) {
        var _0xecbcx4 = this,
            _0xecbcx1 = _0xecbcx4['getMenu'](),
            _0xecbcx6 = _0xecbcx1['down']('#groupMenuItem'),
            _0xecbcx3 = _0xecbcx5['groupable'] === false || !_0xecbcx5['dataIndex'] || _0xecbcx4['view']['headerCt']['getVisibleGridColumns']()['length'] < 2 ? 'disable' : 'enable',
            _0xecbcx2 = _0xecbcx1['down']('#groupToggleMenuItem'),
            _0xecbcx9 = _0xecbcx4['grid']['getStore']()['isGrouped']();
        _0xecbcx6[_0xecbcx3]();
        if (_0xecbcx2) {
            _0xecbcx2['setChecked'](_0xecbcx9, true);
            _0xecbcx2[_0xecbcx9 ? 'enable' : 'disable']()
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.ScrollerEvents', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.scroll.Scroller',
    minVersion: '6.0.2',
    maxVersion: '6.5.0',
    reportUrl: 'https://www.sencha.com/forum/showthread.php?334486-Please-add-xDelta-yDelta-to-scroller-s-scroll-scrollstart-scrollend-events&p=1169887#post1169887',
    obsoleteTestName: 'patches/004_scroller_events.t.js',
    description: ['Modifies scroller event firing routines to include xDelta, yDelta into', 'the scrollstart/scroll/scrollend event signatures'].join(' '),
    overrides: {
        privates: {
            fireScrollStart: function(_0xecbcx1, _0xecbcx6, _0xecbcx4, _0xecbcx3) {
                var _0xecbcx5 = this,
                    _0xecbcx2 = _0xecbcx5['component'];
                _0xecbcx5['invokePartners']('onPartnerScrollStart', _0xecbcx1, _0xecbcx6, _0xecbcx4, _0xecbcx3);
                if (_0xecbcx5['hasListeners']['scrollstart']) {
                    _0xecbcx5['fireEvent']('scrollstart', _0xecbcx5, _0xecbcx1, _0xecbcx6, _0xecbcx4, _0xecbcx3)
                };
                if (_0xecbcx2 && _0xecbcx2['onScrollStart']) {
                    _0xecbcx2['onScrollStart'](_0xecbcx1, _0xecbcx6)
                };
                Ext['GlobalEvents']['fireEvent']('scrollstart', _0xecbcx5, _0xecbcx1, _0xecbcx6, _0xecbcx4, _0xecbcx3)
            },
            fireScroll: function(_0xecbcx1, _0xecbcx6, _0xecbcx4, _0xecbcx3) {
                var _0xecbcx5 = this,
                    _0xecbcx2 = _0xecbcx5['component'];
                _0xecbcx5['invokePartners']('onPartnerScroll', _0xecbcx1, _0xecbcx6, _0xecbcx4, _0xecbcx3);
                if (_0xecbcx5['hasListeners']['scroll']) {
                    _0xecbcx5['fireEvent']('scroll', _0xecbcx5, _0xecbcx1, _0xecbcx6, _0xecbcx4, _0xecbcx3)
                };
                if (_0xecbcx2 && _0xecbcx2['onScrollMove']) {
                    _0xecbcx2['onScrollMove'](_0xecbcx1, _0xecbcx6)
                };
                Ext['GlobalEvents']['fireEvent']('scroll', _0xecbcx5, _0xecbcx1, _0xecbcx6, _0xecbcx4, _0xecbcx3)
            },
            fireScrollEnd: function(_0xecbcx1, _0xecbcx6, _0xecbcx4, _0xecbcx3) {
                var _0xecbcx5 = this,
                    _0xecbcx2 = _0xecbcx5['component'];
                _0xecbcx5['invokePartners']('onPartnerScrollEnd', _0xecbcx1, _0xecbcx6, _0xecbcx4, _0xecbcx3);
                if (_0xecbcx5['hasListeners']['scrollend']) {
                    _0xecbcx5['fireEvent']('scrollend', _0xecbcx5, _0xecbcx1, _0xecbcx6, _0xecbcx4, _0xecbcx3)
                };
                if (_0xecbcx2 && _0xecbcx2['onScrollEnd']) {
                    _0xecbcx2['onScrollEnd'](_0xecbcx1, _0xecbcx6)
                };
                Ext['GlobalEvents']['fireEvent']('scrollend', _0xecbcx5, _0xecbcx1, _0xecbcx6, _0xecbcx4, _0xecbcx3)
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.feature.ResizeZone', {
    extend: 'Ext.util.Observable',
    requires: ['Ext.resizer.Resizer', 'Ext.ux.Scheduler.tooltip.Tooltip', 'Ext.ux.Scheduler.util.ScrollManager', 'Ext.ux.Scheduler.patches.ScrollerEvents'],
    showTooltip: true,
    showExactResizePosition: false,
    validatorFn: Ext['emptyFn'],
    validatorFnScope: null,
    schedulerView: null,
    origEl: null,
    handlePos: null,
    eventRec: null,
    mouseDownEvent: null,
    tip: null,
    tipInstance: null,
    startScroll: null,
    constructor: function(_0xecbcx1) {
        Ext.apply(this, _0xecbcx1);
        var _0xecbcx2 = this['schedulerView'];
        _0xecbcx2['on']({
            destroy: this['cleanUp'],
            scope: this
        });
        _0xecbcx2['el']['on']({
            mousedown: this['onMouseDown'],
            mouseup: this['onMouseUp'],
            scope: this,
            delegate: '.sch-resizable-handle'
        });
        this['bindRightClickPreventer']();
        this['callParent'](arguments)
    },
    bindRightClickPreventer: function() {
        var _0xecbcx1;
        if (Ext['isIE9m']) {
            _0xecbcx1 = 'mousedown'
        } else {
            _0xecbcx1 = 'contextmenu'
        };
        var _0xecbcx2 = {
            scope: this,
            priority: 999
        };
        _0xecbcx2[_0xecbcx1] = this['preventRightClick'];
        this['schedulerView']['el']['on'](_0xecbcx2)
    },
    preventRightClick: function(_0xecbcx1) {
        if (_0xecbcx1['button'] !== 0 && this['resizer']) {
            _0xecbcx1['stopEvent']();
            return false
        }
    },
    onMouseDown: function(_0xecbcx6, _0xecbcx1) {
        var _0xecbcx2 = this['schedulerView'];
        var _0xecbcx3 = this['eventRec'] = _0xecbcx2['resolveEventRecord'](_0xecbcx1);
        var _0xecbcx5 = _0xecbcx3['isResizable']();
        if (_0xecbcx6['button'] !== 0 || (_0xecbcx5 === false || typeof _0xecbcx5 === 'string' && !_0xecbcx1['className']['match'](_0xecbcx5))) {
            return
        };
        this['eventRec'] = _0xecbcx3;
        this['handlePos'] = this['getHandlePosition'](_0xecbcx1);
        this['origEl'] = Ext['get'](_0xecbcx6['getTarget']('.sch-event'));
        this['mouseDownEvent'] = _0xecbcx6;
        _0xecbcx2['el']['on']({
            mousemove: this['onMouseMove'],
            scope: this,
            single: true
        })
    },
    onMouseUp: function(_0xecbcx5, _0xecbcx1) {
        var _0xecbcx2 = this['schedulerView'];
        _0xecbcx2['el']['un']({
            mousemove: this['onMouseMove'],
            scope: this,
            single: true
        });
        this['mouseDownEvent'] = null
    },
    getTipInstance: function() {
        if (this['tipInstance']) {
            return this['tipInstance']
        };
        var _0xecbcx1 = this['schedulerView'];
        var _0xecbcx2 = this['tip'];
        if (_0xecbcx2 instanceof Ext['tip']['ToolTip']) {
            _0xecbcx2['schedulerView'] = _0xecbcx1
        } else {
            _0xecbcx2 = new Ext.ux.Scheduler['tooltip'].Tooltip(Ext.apply({
                rtl: this['rtl'],
                schedulerView: _0xecbcx1,
                constrainTo: _0xecbcx1['up']('grid')['el'],
                cls: 'sch-resize-tip'
            }, _0xecbcx2))
        };
        return this['tipInstance'] = _0xecbcx2
    },
    onMouseMove: function(_0xecbcx7, _0xecbcx1) {
        var _0xecbcx2 = this['schedulerView'],
            _0xecbcx9 = this['eventRec'],
            _0xecbcx3 = this['handlePos'];
        if (!_0xecbcx9 || _0xecbcx2['fireEvent']('beforeeventresize', _0xecbcx2, _0xecbcx9, _0xecbcx7) === false) {
            return
        };
        delete this['eventRec'];
        _0xecbcx7['stopEvent']();
        this['origEl']['addCls']('sch-event-resizing');
        this['resizer'] = this['createResizer'](this['origEl'], _0xecbcx9, _0xecbcx3);
        var _0xecbcx5 = this['resizer']['resizeTracker'];
        if (this['showTooltip']) {
            var _0xecbcx6 = this['getTipInstance']();
            _0xecbcx6['update'](_0xecbcx9['getStartDate'](), _0xecbcx9['getEndDate'](), true);
            _0xecbcx6['showForElement'](this['origEl'], _0xecbcx7['getX']() - this['origEl']['getX']())
        };
        _0xecbcx5['onMouseDown'](this['mouseDownEvent'], this['resizer'][_0xecbcx3]['dom']);
        _0xecbcx5['onMouseMove'](_0xecbcx7, this['resizer'][_0xecbcx3]['dom']);
        _0xecbcx2['fireEvent']('eventresizestart', _0xecbcx2, _0xecbcx9);
        _0xecbcx2['getScrollable']()['on']('scroll', this['onViewScroll'], this)
    },
    getHandlePosition: function(_0xecbcx2) {
        var _0xecbcx1 = _0xecbcx2['className']['match']('start');
        if (this['schedulerView']['isHorizontal']()) {
            if (this['schedulerView']['rtl']) {
                return _0xecbcx1 ? 'east' : 'west'
            };
            return _0xecbcx1 ? 'west' : 'east'
        } else {
            return _0xecbcx1 ? 'north' : 'south'
        }
    },
    createResizer: function(_0xecbcx3, _0xecbcx7, _0xecbcx5) {
        var _0xecbcxc = this['schedulerView'],
            _0xecbcx9 = this,
            _0xecbcx6 = _0xecbcxc['resolveResource'](_0xecbcx3),
            _0xecbcxd = _0xecbcxc['getSnapPixelAmount'](),
            _0xecbcxf = _0xecbcxc['getScheduleRegion'](_0xecbcx6, _0xecbcx7),
            _0xecbcx2 = _0xecbcxc['getDateConstraints'](_0xecbcx6, _0xecbcx7),
            _0xecbcxe = _0xecbcx3['getHeight'](),
            _0xecbcx1 = (_0xecbcxc['rtl'] && _0xecbcx5[0] === 'e') || (!_0xecbcxc['rtl'] && _0xecbcx5[0] === 'w') || _0xecbcx5[0] === 'n',
            _0xecbcxa = !_0xecbcxc['isHorizontal'](),
            _0xecbcx4 = {
                otherEdgeX: _0xecbcx1 ? _0xecbcx3['getRight']() : _0xecbcx3['getLeft'](),
                otherEdgeY: _0xecbcx1 ? _0xecbcx3['getBottom']() : _0xecbcx3['getTop'](),
                target: _0xecbcx3,
                isStart: _0xecbcx1,
                dateConstraints: _0xecbcx2,
                resourceRecord: _0xecbcx6,
                eventRecord: _0xecbcx7,
                handles: _0xecbcx5[0],
                minHeight: _0xecbcxe,
                constrainTo: _0xecbcxf,
                listeners: {
                    resizedrag: this['partialResize'],
                    resize: this['afterResize'],
                    scope: this
                }
            };
        if (_0xecbcxa) {
            if (_0xecbcxd > 0) {
                var _0xecbcx8 = _0xecbcx3['getWidth']();
                Ext.apply(_0xecbcx4, {
                    minHeight: _0xecbcxd,
                    minWidth: _0xecbcx8,
                    maxWidth: _0xecbcx8,
                    heightIncrement: _0xecbcxd
                })
            }
        } else {
            if (_0xecbcxd > 0) {
                Ext.apply(_0xecbcx4, {
                    minWidth: _0xecbcxd,
                    maxHeight: _0xecbcxe,
                    widthIncrement: _0xecbcxd
                })
            }
        };
        var _0xecbcx11 = new Ext['resizer'].Resizer(_0xecbcx4);
        if (_0xecbcx11['resizeTracker']) {
            _0xecbcx11['resizeTracker']['tolerance'] = -1
        };
        _0xecbcx3['setStyle']('z-index', parseInt(_0xecbcx3['getStyle']('z-index'), 10) + 1);
        Ext.ux.Scheduler['util']['ScrollManager']['activate'](_0xecbcxc, _0xecbcxc['isHorizontal']() ? 'horizontal' : 'vertical');
        this['startScroll'] = _0xecbcxc['getScroll']();
        return _0xecbcx11
    },
    getStartEndDates: function() {
        var _0xecbcx4 = this['resizer'],
            _0xecbcx3 = _0xecbcx4['el'],
            _0xecbcx9 = this['schedulerView'],
            _0xecbcx5 = _0xecbcx4['isStart'],
            _0xecbcx7, _0xecbcx2, _0xecbcx1, _0xecbcx6;
        if (_0xecbcx5) {
            if (_0xecbcx9['isHorizontal']()) {
                _0xecbcx1 = _0xecbcx9['rtl'] && _0xecbcx9['shouldAdjustForRtl']() ? _0xecbcx3['getRight']() : _0xecbcx3['getLeft']() + 1;
                _0xecbcx6 = [_0xecbcx1, 0]
            } else {
                _0xecbcx6 = [(_0xecbcx3['getRight']() + _0xecbcx3['getLeft']()) / 2, _0xecbcx3['getTop']()]
            };
            _0xecbcx2 = _0xecbcx4['eventRecord']['getEndDate']();
            if (_0xecbcx9['snapRelativeToEventStartDate']) {
                _0xecbcx7 = _0xecbcx9['getDateFromXY'](_0xecbcx6);
                _0xecbcx7 = _0xecbcx9['timeAxis']['roundDate'](_0xecbcx7, _0xecbcx4['eventRecord']['getStartDate']())
            } else {
                _0xecbcx7 = _0xecbcx9['getDateFromXY'](_0xecbcx6, 'round')
            }
        } else {
            if (_0xecbcx9['isHorizontal']()) {
                _0xecbcx1 = _0xecbcx9['rtl'] && _0xecbcx9['shouldAdjustForRtl']() ? _0xecbcx3['getLeft']() : _0xecbcx3['getRight']();
                _0xecbcx6 = [_0xecbcx1, 0]
            } else {
                _0xecbcx6 = [(_0xecbcx3['getRight']() + _0xecbcx3['getLeft']()) / 2, _0xecbcx3['getBottom']()]
            };
            _0xecbcx7 = _0xecbcx4['eventRecord']['getStartDate']();
            if (_0xecbcx9['snapRelativeToEventStartDate']) {
                _0xecbcx2 = _0xecbcx9['getDateFromXY'](_0xecbcx6);
                _0xecbcx2 = _0xecbcx9['timeAxis']['roundDate'](_0xecbcx2, _0xecbcx4['eventRecord']['getEndDate']())
            } else {
                _0xecbcx2 = _0xecbcx9['getDateFromXY'](_0xecbcx6, 'round')
            }
        };
        _0xecbcx7 = _0xecbcx7 || _0xecbcx4['start'];
        _0xecbcx2 = _0xecbcx2 || _0xecbcx4['end'];
        if (_0xecbcx4['dateConstraints']) {
            _0xecbcx7 = Ext.ux.Scheduler['util']['Date']['constrain'](_0xecbcx7, _0xecbcx4['dateConstraints']['start'], _0xecbcx4['dateConstraints']['end']);
            _0xecbcx2 = Ext.ux.Scheduler['util']['Date']['constrain'](_0xecbcx2, _0xecbcx4['dateConstraints']['start'], _0xecbcx4['dateConstraints']['end'])
        };
        return {
            start: _0xecbcx7,
            end: _0xecbcx2
        }
    },
    partialResize: function(_0xecbcxf, _0xecbcx10, _0xecbcxc, _0xecbcx14) {
        var _0xecbcx11 = this['schedulerView'],
            _0xecbcx6 = _0xecbcx14 ? _0xecbcx14['getXY']() : this['resizer']['resizeTracker']['lastXY'],
            _0xecbcxe = this['getStartEndDates'](_0xecbcx6),
            _0xecbcx3 = _0xecbcxe['start'],
            _0xecbcx5 = _0xecbcxe['end'],
            _0xecbcx2 = _0xecbcxf['eventRecord'],
            _0xecbcxa = _0xecbcx11['isHorizontal']();
        if (this['showTooltip']) {
            var _0xecbcxb = this['validatorFn']['call'](this['validatorFnScope'] || this, _0xecbcxf['resourceRecord'], _0xecbcx2, _0xecbcx3, _0xecbcx5);
            var _0xecbcxd = '';
            if (_0xecbcxb && typeof _0xecbcxb !== 'boolean') {
                _0xecbcxd = _0xecbcxb['message'];
                _0xecbcxb = _0xecbcxb['valid']
            };
            this['getTipInstance']()['update'](_0xecbcx3, _0xecbcx5, _0xecbcxb !== false, _0xecbcxd)
        };
        if (this['showExactResizePosition']) {
            var _0xecbcx12 = _0xecbcxf['target']['el'],
                _0xecbcx7, _0xecbcx8, _0xecbcx9;
            if (_0xecbcxf['isStart']) {
                if (_0xecbcx11['isWeekView']()) {
                    var _0xecbcx1 = _0xecbcx11['weekview']['getEventColumns'](_0xecbcx2)[0];
                    _0xecbcx7 = _0xecbcx11['timeAxisViewModel']['getDistanceBetweenDates'](_0xecbcx3, _0xecbcx1['end'])
                } else {
                    _0xecbcx7 = _0xecbcx11['timeAxisViewModel']['getDistanceBetweenDates'](_0xecbcx3, _0xecbcx2['getEndDate']())
                };
                if (_0xecbcxa) {
                    _0xecbcx8 = _0xecbcx11['getDateFromCoordinate'](_0xecbcxf['otherEdgeX'] - Math['min'](_0xecbcx10, _0xecbcxf['maxWidth'])) || _0xecbcx3;
                    _0xecbcx9 = _0xecbcx11['timeAxisViewModel']['getDistanceBetweenDates'](_0xecbcx8, _0xecbcx3);
                    if (_0xecbcx12['getWidth']() !== _0xecbcx7) {
                        _0xecbcx12['setWidth'](_0xecbcx7);
                        _0xecbcx12['setX'](_0xecbcx12['getX']() + _0xecbcx9)
                    }
                } else {
                    _0xecbcx8 = _0xecbcx11['getDateFromCoordinate'](_0xecbcxf['otherEdgeY'] - Math['min'](_0xecbcxc, _0xecbcxf['maxHeight'])) || _0xecbcx3;
                    _0xecbcx9 = _0xecbcx11['timeAxisViewModel']['getDistanceBetweenDates'](_0xecbcx8, _0xecbcx3);
                    if (_0xecbcx12['getHeight']() !== _0xecbcx7) {
                        _0xecbcx12['setHeight'](_0xecbcx7);
                        _0xecbcx12['setY'](_0xecbcx12['getY']() + _0xecbcx9)
                    }
                }
            } else {
                _0xecbcx7 = _0xecbcx11['timeAxisViewModel']['getDistanceBetweenDates'](_0xecbcx2['getStartDate'](), _0xecbcx5);
                if (_0xecbcxa) {
                    _0xecbcx12['setWidth'](_0xecbcx7)
                } else {
                    _0xecbcx12['setHeight'](_0xecbcx7)
                }
            }
        } else {
            if (!_0xecbcx3 || !_0xecbcx5 || ((_0xecbcxf['start'] - _0xecbcx3 === 0) && (_0xecbcxf['end'] - _0xecbcx5 === 0))) {
                return
            }
        };
        _0xecbcxf['end'] = _0xecbcx5;
        _0xecbcxf['start'] = _0xecbcx3;
        _0xecbcx11['fireEvent']('eventpartialresize', _0xecbcx11, _0xecbcx2, _0xecbcx3, _0xecbcx5, _0xecbcxf['el'])
    },
    onViewScroll: function(_0xecbcx2, _0xecbcx1, _0xecbcx3, _0xecbcx5) {
        if (_0xecbcx5 !== 0) {
            this['resizer']['resizeTracker']['onDrag']({});
            this['partialResize'](this['resizer'], 0, 0)
        }
    },
    afterResize: function(_0xecbcx2, _0xecbcxc, _0xecbcxa, _0xecbcx8) {
        var _0xecbcx11 = this,
            _0xecbcxd = _0xecbcx2['resourceRecord'],
            _0xecbcxe = _0xecbcx2['eventRecord'],
            _0xecbcx6 = _0xecbcxe['getStartDate'](),
            _0xecbcx15 = _0xecbcxe['getEndDate'](),
            _0xecbcx5 = _0xecbcx2['start'] || _0xecbcx6,
            _0xecbcx3 = _0xecbcx2['end'] || _0xecbcx15,
            _0xecbcx10 = _0xecbcx11['schedulerView'],
            _0xecbcxb = false,
            _0xecbcxf = true,
            _0xecbcx1 = _0xecbcx11['validatorFn']['call'](_0xecbcx11['validatorFnScope'] || _0xecbcx11, _0xecbcxd, _0xecbcxe, _0xecbcx5, _0xecbcx3, _0xecbcx8);
        Ext.ux.Scheduler['util']['ScrollManager']['deactivate']();
        _0xecbcx10['getScrollable']()['un']('scroll', this['onViewScroll'], this);
        if (this['showTooltip']) {
            this['getTipInstance']()['hide']()
        };
        var _0xecbcx9 = {
            resourceRecord: _0xecbcx2['resourceRecord'],
            eventRecord: _0xecbcxe,
            start: _0xecbcx5,
            end: _0xecbcx3,
            finalize: function(_0xecbcx4) {
                _0xecbcx11['finalize'](_0xecbcx4, _0xecbcx9)
            }
        };
        if (_0xecbcx1 && typeof _0xecbcx1 !== 'boolean') {
            _0xecbcx1 = _0xecbcx1['valid']
        };
        if (_0xecbcx5 && _0xecbcx3 && (_0xecbcx3 - _0xecbcx5 > 0) && ((_0xecbcx5 - _0xecbcx6 !== 0) || (_0xecbcx3 - _0xecbcx15 !== 0)) && _0xecbcx1 !== false) {
            _0xecbcxf = _0xecbcx10['fireEvent']('beforeeventresizefinalize', _0xecbcx11, _0xecbcx9, _0xecbcx8) !== false;
            _0xecbcxb = true
        } else {
            _0xecbcx10['repaintEventsForResource'](_0xecbcxd)
        };
        if (_0xecbcxf) {
            _0xecbcx11['finalize'](_0xecbcxb, _0xecbcx9)
        }
    },
    finalize: function(_0xecbcx1, _0xecbcx4) {
        var _0xecbcx2 = this['schedulerView'];
        var _0xecbcx3 = false;
        var _0xecbcx5 = function() {
            _0xecbcx3 = true
        };
        _0xecbcx2['getEventStore']()['on']('update', _0xecbcx5);
        this['resizer']['target']['destroy']();
        if (Ext['isIE']) {
            document['body']['focus']()
        };
        if (_0xecbcx1) {
            if (this['resizer']['isStart']) {
                _0xecbcx4['eventRecord']['setStartDate'](_0xecbcx4['start'], false, _0xecbcx2['getEventStore']()['skipWeekendsDuringDragDrop'])
            } else {
                _0xecbcx4['eventRecord']['setEndDate'](_0xecbcx4['end'], false, _0xecbcx2['getEventStore']()['skipWeekendsDuringDragDrop'])
            };
            if (!_0xecbcx3) {
                _0xecbcx2['repaintEventsForResource'](_0xecbcx4['resourceRecord'])
            }
        } else {
            _0xecbcx2['repaintEventsForResource'](_0xecbcx4['resourceRecord'])
        };
        this['resizer']['destroy']();
        delete this['resizer'];
        _0xecbcx2['getEventStore']()['un']('update', _0xecbcx5);
        _0xecbcx2['fireEvent']('eventresizeend', _0xecbcx2, _0xecbcx4['eventRecord'])
    },
    cleanUp: function() {
        if (this['tipInstance']) {
            this['tipInstance']['destroy']()
        };
        this['mouseDownEvent'] = null
    }
});
Ext.define('Ext.ux.Scheduler.field.CellEditor', {
    extend: 'Ext.form.field.Text',
    alias: 'widget.celleditorfield',
    hidden: true,
    enableKeyEvents: true,
    divider: '-',
    dateFormat: 'H',
    getErrors: function(_0xecbcx5) {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['callParent'](arguments);
        if (_0xecbcx5 == null || _0xecbcx5 === '') {
            return _0xecbcx1
        };
        var _0xecbcx3 = this['getDates'](_0xecbcx5);
        if (!_0xecbcx3[0]) {
            _0xecbcx1['push']('Start date is incorrect')
        };
        if (!_0xecbcx3[1]) {
            _0xecbcx1['push']('End date is incorrect')
        };
        if (_0xecbcx3[1] - _0xecbcx3[0] < 0) {
            _0xecbcx1['push']('Start date is less then end date')
        };
        return _0xecbcx1
    },
    getDates: function(_0xecbcx4) {
        var _0xecbcx3 = this;
        var _0xecbcx2 = _0xecbcx4['split'](_0xecbcx3['divider']);
        var _0xecbcx6, _0xecbcx1;
        if (Ext['isArray'](_0xecbcx3['dateFormat'])) {
            for (var _0xecbcx5 = 0; _0xecbcx5 < _0xecbcx3['dateFormat']['length']; _0xecbcx5++) {
                _0xecbcx6 = _0xecbcx6 || Ext['Date']['parse'](_0xecbcx2[0], _0xecbcx3['dateFormat'][_0xecbcx5]);
                _0xecbcx1 = _0xecbcx1 || Ext['Date']['parse'](_0xecbcx2[1], _0xecbcx3['dateFormat'][_0xecbcx5])
            }
        } else {
            _0xecbcx6 = Ext['Date']['parse'](_0xecbcx2[0], _0xecbcx3['dateFormat']);
            _0xecbcx1 = Ext['Date']['parse'](_0xecbcx2[1], _0xecbcx3['dateFormat'])
        };
        if (!_0xecbcx6 || !_0xecbcx1) {
            return []
        };
        if (_0xecbcx3['record']) {
            _0xecbcx6 = Ext.ux.Scheduler['util']['Date']['mergeDates'](_0xecbcx3['record']['getStartDate'](), _0xecbcx6, _0xecbcx3['bottomUnit']);
            _0xecbcx1 = Ext.ux.Scheduler['util']['Date']['mergeDates'](_0xecbcx3['record']['getEndDate'](), _0xecbcx1, _0xecbcx3['bottomUnit'])
        } else {
            _0xecbcx6 = Ext.ux.Scheduler['util']['Date']['mergeDates'](_0xecbcx3['startDate'], _0xecbcx6, _0xecbcx3['bottomUnit']);
            _0xecbcx1 = Ext.ux.Scheduler['util']['Date']['mergeDates'](_0xecbcx3['startDate'], _0xecbcx1, _0xecbcx3['bottomUnit'])
        };
        return [_0xecbcx6, _0xecbcx1]
    }
});
Ext.define('Ext.ux.Scheduler.layout.TableLayout', {
    extend: 'Ext.view.TableLayout',
    alias: 'layout.timeline_tablelayout',
    beginLayout: function(_0xecbcx6) {
        var _0xecbcx3 = this,
            _0xecbcx1 = _0xecbcx3['owner'],
            _0xecbcx4 = _0xecbcx1['ownerGrid'],
            _0xecbcx5 = _0xecbcx1['lockingPartner'],
            _0xecbcx9 = _0xecbcx5 && _0xecbcx5['grid']['isVisible']() && !_0xecbcx5['grid']['collapsed'],
            _0xecbcx2 = _0xecbcx6['context'];
        _0xecbcx6['doSyncRowHeights'] = _0xecbcx9 && (_0xecbcx4['syncRowHeight'] || _0xecbcx4['syncRowHeightOnNextLayout']);
        if (!_0xecbcx3['columnFlusherId']) {
            _0xecbcx3['columnFlusherId'] = _0xecbcx3['id'] + '-columns';
            _0xecbcx3['rowHeightFlusherId'] = _0xecbcx3['id'] + '-rows'
        };
        if (_0xecbcx3['owner']['bufferedRenderer']) {
            _0xecbcx3['owner']['bufferedRenderer']['beforeTableLayout'](_0xecbcx6)
        };
        _0xecbcx3['superclass']['superclass']['beginLayout']['apply'](this, [_0xecbcx6]);
        if (_0xecbcx9 && _0xecbcx5['componentLayout']['isRunning']()) {
            if (!_0xecbcx6['lockingPartnerContext']) {
                (_0xecbcx6['lockingPartnerContext'] = _0xecbcx2['getCmp'](_0xecbcx5))['lockingPartnerContext'] = _0xecbcx6
            };
            if (_0xecbcx6['doSyncRowHeights']) {
                _0xecbcx6['rowHeightSynchronizer'] = _0xecbcx3['owner']['syncRowHeightBegin']()
            }
        };
        (_0xecbcx6['headerContext'] = _0xecbcx2['getCmp'](_0xecbcx3['headerCt']))['viewContext'] = _0xecbcx6
    }
});
Ext.define('Ext.ux.Scheduler.plugin.Zones', {
    extend: 'Ext.ux.Scheduler.feature.AbstractTimeSpan',
    alias: 'plugin.scheduler_zones',
    requires: ['Ext.ux.Scheduler.model.Range'],
    innerTpl: null,
    cls: 'sch-zone',
    side: null,
    init: function(_0xecbcx1) {
        if (typeof this['innerTpl'] === 'string') {
            this['innerTpl'] = new Ext.XTemplate(this['innerTpl'])
        };
        this['side'] = _0xecbcx1['rtl'] ? 'right' : 'left';
        var _0xecbcx2 = this['innerTpl'];
        if (!this['template']) {
            this['template'] = new Ext.XTemplate('<tpl for="."><div id="{id}" class="{$cls}" style="' + this['side'] + ':{left}px;top:{top}px;height:{height}px;width:{width}px;{style}">' + (_0xecbcx2 ? '{[this.renderInner(values)]}' : '') + '</div></tpl>', {
                renderInner: function(_0xecbcx5) {
                    return _0xecbcx2['apply'](_0xecbcx5)
                }
            })
        };
        if (typeof this['innerHeaderTpl'] === 'string') {
            this['innerHeaderTpl'] = new Ext.XTemplate(this['innerHeaderTpl'])
        };
        this['callParent'](arguments)
    },
    getElementData: function(_0xecbcx7, _0xecbcx3, _0xecbcx10, _0xecbcx6) {
        var _0xecbcx9 = this['schedulerView'],
            _0xecbcx15 = [];
        var _0xecbcx5 = _0xecbcx9['getTimeSpanRegion'](_0xecbcx7, _0xecbcx3, this['expandToFitView']);
        var _0xecbcx2, _0xecbcxd, _0xecbcx1, _0xecbcx8, _0xecbcxe, _0xecbcx4;
        _0xecbcx10 = _0xecbcx10 || this['store']['getRange']();
        for (var _0xecbcxb = 0, _0xecbcxc = _0xecbcx10['length']; _0xecbcxb < _0xecbcxc; _0xecbcxb++) {
            _0xecbcx2 = _0xecbcx10[_0xecbcxb];
            _0xecbcxd = _0xecbcx2['getStartDate']();
            _0xecbcx1 = _0xecbcx2['getEndDate']();
            _0xecbcx4 = this['getTemplateData'](_0xecbcx2);
            if (_0xecbcxd && _0xecbcx1 && Ext.ux.Scheduler['util']['Date']['intersectSpans'](_0xecbcxd, _0xecbcx1, _0xecbcx7, _0xecbcx3)) {
                _0xecbcx8 = Ext.apply({}, _0xecbcx4);
                _0xecbcx8['id'] = this['getElementId'](_0xecbcx2);
                _0xecbcx8['$cls'] = this['getElementCls'](_0xecbcx2, _0xecbcx4);
                if (_0xecbcx9['isWeekView']()) {
                    var _0xecbcx17 = _0xecbcx9['getTimeSpanRegion'](_0xecbcxd, _0xecbcx1);
                    _0xecbcx8['left'] = _0xecbcx17['left'];
                    _0xecbcx8['top'] = _0xecbcx17['top'];
                    _0xecbcx8['height'] = _0xecbcx17['bottom'] - _0xecbcx17['top'];
                    _0xecbcx8['width'] = _0xecbcx17['right'] - _0xecbcx17['left']
                } else {
                    var _0xecbcx14 = _0xecbcx9['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['max'](_0xecbcxd, _0xecbcx7));
                    var _0xecbcxf = _0xecbcx9['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['min'](_0xecbcx1, _0xecbcx3));
                    if (_0xecbcx9['isHorizontal']()) {
                        _0xecbcx8['left'] = _0xecbcx14;
                        _0xecbcx8['top'] = _0xecbcx5['top'];
                        _0xecbcx8['width'] = _0xecbcx6 ? 0 : _0xecbcxf - _0xecbcx14;
                        _0xecbcx8['style'] = _0xecbcx6 ? ('border-left-width:' + (_0xecbcxf - _0xecbcx14) + 'px') : ''
                    } else {
                        _0xecbcx8['left'] = _0xecbcx5['left'];
                        _0xecbcx8['top'] = _0xecbcx14;
                        _0xecbcx8['height'] = _0xecbcx6 ? 0 : _0xecbcxf - _0xecbcx14;
                        _0xecbcx8['style'] = _0xecbcx6 ? ('border-top-width:' + (_0xecbcxf - _0xecbcx14) + 'px') : ''
                    }
                };
                _0xecbcx15['push'](_0xecbcx8)
            }
        };
        return _0xecbcx15
    },
    getHeaderElementId: function(_0xecbcx2, _0xecbcx1) {
        return this['callParent']([_0xecbcx2]) + (_0xecbcx1 ? '-start' : '-end')
    },
    getHeaderElementCls: function(_0xecbcx2, _0xecbcx3, _0xecbcx1) {
        var _0xecbcx5 = _0xecbcx2['clsField'] || this['clsField'];
        if (!_0xecbcx3) {
            _0xecbcx3 = this['getTemplateData'](_0xecbcx2)
        };
        return 'sch-header-indicator sch-header-indicator-' + (_0xecbcx1 ? 'start ' : 'end ') + this['uniqueCls'] + ' ' + (_0xecbcx3[_0xecbcx5] || '')
    },
    getZoneHeaderElementData: function(_0xecbcx2, _0xecbcx7, _0xecbcx6, _0xecbcx1) {
        var _0xecbcx5 = _0xecbcx1 ? _0xecbcx6['getStartDate']() : _0xecbcx6['getEndDate'](),
            _0xecbcx4 = null,
            _0xecbcx9, _0xecbcxa, _0xecbcx3;
        if (_0xecbcx5 && Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0xecbcx5, _0xecbcx2, _0xecbcx7)) {
            _0xecbcx9 = this['getHeaderElementPosition'](_0xecbcx5);
            _0xecbcxa = this['schedulerView']['isHorizontal']();
            _0xecbcx3 = this['getTemplateData'](_0xecbcx6);
            _0xecbcx4 = Ext.apply({
                id: this['getHeaderElementId'](_0xecbcx6, _0xecbcx1),
                cls: this['getHeaderElementCls'](_0xecbcx6, _0xecbcx3, _0xecbcx1),
                isStart: _0xecbcx1,
                side: _0xecbcxa ? this['side'] : 'top',
                position: _0xecbcx9
            }, _0xecbcx3)
        };
        return _0xecbcx4
    },
    getHeaderElementData: function(_0xecbcx2) {
        var _0xecbcx1 = this['timeAxis']['getStart'](),
            _0xecbcx7 = this['timeAxis']['getEnd'](),
            _0xecbcx4 = [],
            _0xecbcx9, _0xecbcx3, _0xecbcx8;
        _0xecbcx2 = _0xecbcx2 || this['store']['getRange']();
        for (var _0xecbcx6 = 0, _0xecbcx5 = _0xecbcx2['length']; _0xecbcx6 < _0xecbcx5; _0xecbcx6++) {
            _0xecbcx9 = _0xecbcx2[_0xecbcx6];
            _0xecbcx3 = this['getZoneHeaderElementData'](_0xecbcx1, _0xecbcx7, _0xecbcx9, true);
            if (_0xecbcx3) {
                _0xecbcx4['push'](_0xecbcx3)
            };
            _0xecbcx8 = this['getZoneHeaderElementData'](_0xecbcx1, _0xecbcx7, _0xecbcx9, false);
            if (_0xecbcx8) {
                _0xecbcx4['push'](_0xecbcx8)
            }
        };
        return _0xecbcx4
    },
    updateZoneHeaderElement: function(_0xecbcx1, _0xecbcx2) {
        _0xecbcx1['dom']['className'] = _0xecbcx2['cls'];
        if (this['schedulerView']['isHorizontal']()) {
            this['setElementX'](_0xecbcx1, _0xecbcx2['position'])
        } else {
            _0xecbcx1['setTop'](_0xecbcx2['position'])
        }
    },
    updateHeaderElement: function(_0xecbcx5) {
        var _0xecbcx1 = this['timeAxis']['getStart'](),
            _0xecbcx9 = this['timeAxis']['getEnd'](),
            _0xecbcx6 = Ext['get'](this['getHeaderElementId'](_0xecbcx5, true)),
            _0xecbcx4 = Ext['get'](this['getHeaderElementId'](_0xecbcx5, false)),
            _0xecbcx3 = this['getZoneHeaderElementData'](_0xecbcx1, _0xecbcx9, _0xecbcx5, true),
            _0xecbcx2 = this['getZoneHeaderElementData'](_0xecbcx1, _0xecbcx9, _0xecbcx5, false);
        if (!(_0xecbcx6 && _0xecbcx2) || !(_0xecbcx4 && _0xecbcx2)) {
            Ext['destroy'](_0xecbcx6, _0xecbcx4);
            this['renderHeaderElements']([_0xecbcx5])
        } else {
            if (_0xecbcx6) {
                if (!_0xecbcx3) {
                    Ext['destroy'](_0xecbcx6)
                } else {
                    this['updateZoneHeaderElement'](_0xecbcx6, _0xecbcx3)
                }
            };
            if (_0xecbcx4) {
                if (!_0xecbcx2) {
                    Ext['destroy'](_0xecbcx4)
                } else {
                    this['updateZoneHeaderElement'](_0xecbcx4, _0xecbcx2)
                }
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.plugin.ResourceZones', {
    extend: 'Ext.ux.Scheduler.plugin.Zones',
    alias: 'plugin.scheduler_resourcezones',
    innerTpl: null,
    store: null,
    cls: 'sch-resourcezone',
    init: function(_0xecbcx1) {
        this['store'] = Ext['StoreManager']['lookup'](this['store']);
        this['uniqueCls'] = this['uniqueCls'] || ('sch-timespangroup-' + Ext['id']());
        this['scheduler'] = _0xecbcx1;
        _0xecbcx1['registerRenderer'](this['renderer'], this);
        if (typeof this['innerTpl'] === 'string') {
            this['innerTpl'] = new Ext.XTemplate(this['innerTpl'])
        };
        var _0xecbcx2 = this['innerTpl'];
        if (!this['template']) {
            this['template'] = new Ext.XTemplate('<tpl for="."><div id="' + this['uniqueCls'] + '-{id}" class="' + this['cls'] + ' ' + this['uniqueCls'] + ' {Cls}" style="' + (_0xecbcx1['rtl'] ? 'right' : 'left') + ':{start}px;width:{width}px;top:{start}px;height:{width}px;{style}">' + (_0xecbcx2 ? '{[this.renderInner(values)]}' : ('{' + this['store']['getModel']()['prototype']['nameField'] + '}')) + '</div></tpl>', {
                renderInner: function(_0xecbcx5) {
                    return _0xecbcx2['apply'](_0xecbcx5)
                }
            })
        };
        this['storeListeners'] = {
            load: this['fullRefresh'],
            datachanged: this['fullRefresh'],
            clear: this['fullRefresh'],
            add: this['fullRefresh'],
            remove: this['fullRefresh'],
            update: this['onModelUpdate'],
            addrecords: this['fullRefresh'],
            removerecords: this['fullRefresh'],
            updaterecord: this['onModelUpdate'],
            scope: this
        };
        this['store']['on'](this['storeListeners'])
    },
    destroy: function() {
        this['store']['un'](this['storeListeners']);
        this['callParent'](arguments)
    },
    fullRefresh: function() {
        this['scheduler']['getSchedulingView']()['refreshView']()
    },
    renderer: function(_0xecbcx5, _0xecbcx2, _0xecbcx1, _0xecbcx3) {
        if (_0xecbcx1 && (this['scheduler']['isHorizontal']() || _0xecbcx3 === 0)) {
            return this['renderZones'](_0xecbcx1)
        };
        return ''
    },
    renderZones: function(_0xecbcx4) {
        var _0xecbcx5 = this['store'],
            _0xecbcx7 = this['scheduler'],
            _0xecbcxd = _0xecbcx7['timeAxis']['getStart'](),
            _0xecbcxc = _0xecbcx7['timeAxis']['getEnd'](),
            _0xecbcx9 = [],
            _0xecbcxe = _0xecbcx4['getEvents'](_0xecbcx5),
            _0xecbcxb, _0xecbcx3;
        for (var _0xecbcx6 = 0, _0xecbcx11 = _0xecbcxe['length']; _0xecbcx6 < _0xecbcx11; _0xecbcx6++) {
            var _0xecbcx8 = _0xecbcxe[_0xecbcx6];
            _0xecbcxb = _0xecbcx8['getStartDate']();
            _0xecbcx3 = _0xecbcx8['getEndDate']();
            if (_0xecbcxb && _0xecbcx3 && Ext.ux.Scheduler['util']['Date']['intersectSpans'](_0xecbcxb, _0xecbcx3, _0xecbcxd, _0xecbcxc)) {
                var _0xecbcxf = _0xecbcx7['getSchedulingView']()[_0xecbcx7['getMode']()]['getEventRenderData'](_0xecbcx8);
                var _0xecbcx2, _0xecbcx1;
                if (_0xecbcx7['isHorizontal']()) {
                    _0xecbcx2 = _0xecbcx7['rtl'] ? _0xecbcxf['right'] : _0xecbcxf['left'];
                    _0xecbcx1 = _0xecbcxf['width']
                } else {
                    _0xecbcx2 = _0xecbcxf['top'];
                    _0xecbcx1 = _0xecbcxf['height']
                };
                _0xecbcx9[_0xecbcx9['length']] = Ext.apply({
                    id: _0xecbcx8['internalId'],
                    start: _0xecbcx2,
                    width: _0xecbcx1,
                    Cls: _0xecbcx8['getCls']()
                }, _0xecbcx8['data'])
            }
        };
        return this['template']['apply'](_0xecbcx9)
    },
    onModelUpdate: function(_0xecbcxa, _0xecbcx7) {
        var _0xecbcx5 = document['getElementById'](this['uniqueCls'] + '-' + _0xecbcx7['internalId']);
        if (_0xecbcx5) {
            var _0xecbcx4 = this['scheduler'],
                _0xecbcx6 = _0xecbcx4['timeAxis']['getStart'](),
                _0xecbcx8 = _0xecbcx4['timeAxis']['getEnd']();
            var _0xecbcx2 = Ext.ux.Scheduler['util']['Date']['max'](_0xecbcx6, _0xecbcx7['getStartDate']()),
                _0xecbcx3 = Ext.ux.Scheduler['util']['Date']['min'](_0xecbcx8, _0xecbcx7['getEndDate']()),
                _0xecbcxd = _0xecbcx7['getCls']();
            var _0xecbcx9 = _0xecbcx4['getSchedulingView']()['getCoordinateFromDate'](_0xecbcx2);
            var _0xecbcx1 = _0xecbcx4['getSchedulingView']()['getCoordinateFromDate'](_0xecbcx3) - _0xecbcx9;
            _0xecbcx5['className'] = this['cls'] + ' ' + this['uniqueCls'] + ' ' + (_0xecbcxd || '');
            _0xecbcx5['style']['left'] = _0xecbcx9 + 'px';
            _0xecbcx5['style']['top'] = _0xecbcx9 + 'px';
            _0xecbcx5['style']['height'] = _0xecbcx1 + 'px';
            _0xecbcx5['style']['width'] = _0xecbcx1 + 'px'
        }
    }
});
Ext.define('Ext.ux.Scheduler.mixin.AbstractSchedulerPanel', {
    requires: ['Ext.ux.Scheduler.model.Event', 'Ext.ux.Scheduler.model.Resource', 'Ext.ux.Scheduler.data.EventStore', 'Ext.ux.Scheduler.data.ResourceStore', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.plugin.ResourceZones'],
    eventBarIconClsField: '',
    enableEventDragDrop: true,
    resourceColumnClass: 'Ext.ux.Scheduler.column.Resource',
    resourceColumnWidth: null,
    allowOverlap: true,
    startParamName: 'startDate',
    endParamName: 'endDate',
    passStartEndParameters: false,
    eventRenderer: null,
    eventRendererScope: null,
    eventStore: null,
    resourceStore: null,
    onEventCreated: function(_0xecbcx1, _0xecbcx2) {},
    resourceZones: null,
    resourceZonesConfig: null,
    initStores: function() {
        var _0xecbcx1 = this['resourceStore'] || this['store'];
        if (this['crudManager']) {
            if (!Ext.ux.Scheduler['crud']['AbstractManager']) {
                throw new Error('Ext.ux.Scheduler.crud.AbstractManager not loaded, did you forget to require crudManager class (e.g. Ext.ux.Scheduler.data.CrudManager)?')
            };
            if (!(this['crudManager'] instanceof Ext.ux.Scheduler['crud']['AbstractManager'])) {
                this['crudManager'] = Ext['create'](this['crudManager']['xclass'] || 'Ext.ux.Scheduler.data.CrudManager', Ext['clone'](this['crudManager']))
            }
        };
        if (!_0xecbcx1) {
            if (this['crudManager']) {
                _0xecbcx1 = this['resourceStore'] = this['crudManager']['getResourceStore']()
            };
            if (!_0xecbcx1) {
                if (this['isTree']) {
                    _0xecbcx1 = new Ext.ux.Scheduler['data'].ResourceTreeStore({
                        proxy: 'memory'
                    })
                } else {
                    _0xecbcx1 = new Ext.ux.Scheduler['data'].ResourceStore()
                }
            }
        };
        if (!this['dependencyStore']) {
            if (this['crudManager']) {
                this['dependencyStore'] = this['crudManager']['getDependencyStore']()
            }
        };
        if (!this['eventStore']) {
            if (this['crudManager']) {
                this['eventStore'] = this['crudManager']['getEventStore']()
            };
            this['eventStore'] = this['eventStore'] || new Ext.ux.Scheduler['data'].EventStore()
        };
        this['store'] = Ext['StoreManager']['lookup'](_0xecbcx1);
        this['resourceStore'] = this['store'];
        this['setEventStore'](this['eventStore']);
        if (!this['eventStore'] || !this['eventStore']['isEventStore']) {
            Ext['Error']['raise']('Your eventStore should be a subclass of Ext.ux.Scheduler.data.EventStore (or consume the EventStore mixin)')
        };
        this['resourceStore']['eventStore'] = this['getEventStore']()
    },
    _initializeSchedulerPanel: function() {
        this['initStores']();
        if (this['eventBodyTemplate'] && typeof this['eventBodyTemplate'] === 'string') {
            this['eventBodyTemplate'] = new Ext.XTemplate(this['eventBodyTemplate'])
        };
        this['on']('destroy', function() {
            this['setResourceStore'](null);
            this['setEventStore'](null)
        })
    },
    getResourceStore: function() {
        return this['resourceStore']
    },
    setResourceStore: function(_0xecbcx2) {
        var _0xecbcx3 = this['getResourceStore']();
        this['resourceStore'] = _0xecbcx2 = _0xecbcx2 && Ext['StoreManager']['lookup'](_0xecbcx2);
        var _0xecbcx5 = this['getEventStore']();
        if (_0xecbcx5) {
            _0xecbcx5['setResourceStore'](_0xecbcx2)
        };
        var _0xecbcx1 = this['getSchedulingView']();
        _0xecbcx1 && _0xecbcx1['setResourceStore'](_0xecbcx2);
        if (_0xecbcx2) {
            this['fireEvent']('resourcestorechange', this, _0xecbcx2, _0xecbcx3);
            if (this['isVertical']()) {
                this['refreshResourceColumns']();
                this['mun'](_0xecbcx3, this['verticalListeners']);
                this['mon'](_0xecbcx2, this['verticalListeners'])
            };
            if (this['isWeekView']()) {
                this['mun'](_0xecbcx3, this['calendarResourceStoreListeners']);
                this['mon'](_0xecbcx2, this['calendarResourceStoreListeners'])
            };
            if (_0xecbcx3 === this['store']) {
                this['reconfigure'](_0xecbcx2)
            } else {
                this['refreshViews'](false)
            }
        }
    },
    getEventStore: function() {
        return this['eventStore']
    },
    setEventStore: function(_0xecbcx1) {
        var _0xecbcx4 = this['getEventStore']();
        _0xecbcx1 = _0xecbcx1 && Ext['StoreManager']['lookup'](_0xecbcx1);
        if (this['getEventStore']()) {
            this['mun'](this['getEventStore'](), 'beforeload', this['applyStartEndParameters'], this)
        };
        var _0xecbcx3 = this['getResourceStore']();
        var _0xecbcx6 = this['getAssignmentStore']();
        var _0xecbcx5 = this['getDependencyStore']();
        this['eventStore'] = _0xecbcx1;
        if (_0xecbcx3) {
            _0xecbcx3['setEventStore'](_0xecbcx1)
        };
        if (_0xecbcx6 && _0xecbcx1 && !_0xecbcx1['getAssignmentStore']()) {
            _0xecbcx1['setAssignmentStore'](_0xecbcx6)
        };
        if (_0xecbcx5 && _0xecbcx1 && !_0xecbcx1['getDependencyStore']()) {
            _0xecbcx1['setDependencyStore'](_0xecbcx5)
        };
        var _0xecbcx2 = this['getSchedulingView']();
        _0xecbcx2 && _0xecbcx2['setEventStore'](_0xecbcx1);
        if (_0xecbcx1) {
            this['fireEvent']('eventstorechange', this, _0xecbcx1, _0xecbcx4);
            if (this['passStartEndParameters']) {
                this['mon'](_0xecbcx1, 'beforeload', this['applyStartEndParameters'], this)
            };
            this['refreshViews'](false)
        }
    },
    applyStartEndParameters: function(_0xecbcx5, _0xecbcx1) {
        var _0xecbcx2 = _0xecbcx5['getProxy']();
        _0xecbcx2['setExtraParam'](this['startParamName'], this['getStart']());
        _0xecbcx2['setExtraParam'](this['endParamName'], this['getEnd']())
    },
    getAssignmentStore: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getEventStore']();
        return _0xecbcx1 && _0xecbcx1['isStore'] && _0xecbcx1['getAssignmentStore']() || _0xecbcx2['assignmentStore']
    },
    setAssignmentStore: function(_0xecbcx1) {
        var _0xecbcx2 = this['getAssignmentStore']();
        this['getEventStore']()['setAssignmentStore'](_0xecbcx1);
        if (_0xecbcx1) {
            this['fireEvent']('assignmentstorechange', this, _0xecbcx1, _0xecbcx2);
            this['refreshViews'](false)
        }
    },
    getDependencyStore: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getEventStore']();
        return _0xecbcx1 && _0xecbcx1['isStore'] && _0xecbcx1['getDependencyStore']() || _0xecbcx2['dependencyStore']
    },
    setDependencyStore: function(_0xecbcx1) {
        var _0xecbcx2 = this['getDependencyStore']();
        this['getEventStore']()['setDependencyStore'](_0xecbcx1);
        if (_0xecbcx1) {
            this['fireEvent']('dependencystorechange', this, _0xecbcx1, _0xecbcx2);
            this['refreshViews'](false)
        }
    },
    createResourceColumns: function(_0xecbcx1) {
        return Ext['Array']['map'](this['resourceStore']['getRange'](), function(_0xecbcx2) {
            return {
                xclass: this['resourceColumnClass'],
                renderer: this['mainRenderer'],
                scope: this,
                width: _0xecbcx1 || 100,
                text: _0xecbcx2['getName'](),
                model: _0xecbcx2
            }
        }, this)
    }
});
Ext.define('Ext.ux.Scheduler.template.Event', {
    extend: 'Ext.XTemplate',
    eventPrefix: null,
    resizeHandles: null,
    resizeTpl: '<div class="sch-resizable-handle sch-resizable-handle-DIR"></div>',
    terminalSides: null,
    terminalTpl: '<div class="sch-terminal sch-terminal-SIDE"></div>',
    constructor: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        Ext.apply(_0xecbcx2, _0xecbcx1);
        _0xecbcx2['callParent']([this['getOuterMarkup']()])
    },
    getOuterMarkup: function() {
        var _0xecbcx1 = this;
        var _0xecbcx2 = Ext['Array']['map'](_0xecbcx1['terminalSides'] || [], function(_0xecbcx5) {
            return _0xecbcx1['terminalTpl']['replace'](/SIDE/, _0xecbcx5)
        }).join('');
        return ['<tpl for=".">', '<div unselectable="on" tabindex="-1" id="', _0xecbcx1['eventPrefix'], '{id}" style="right:{right}px;left:{left}px;top:{top}px;height:{height}px;width:{width}px;{style}" class="sch-event ', Ext['baseCSSPrefix'], 'unselectable {internalCls} {cls}">', ((_0xecbcx1['resizeHandles'] === 'start' || _0xecbcx1['resizeHandles'] === 'both') ? _0xecbcx1['resizeTpl']['replace'](/DIR/, 'start') : ''), '<div unselectable="on" class="sch-event-inner {iconCls}">', this['getInnerMarkup'](), '</div>', ((_0xecbcx1['resizeHandles'] === 'end' || _0xecbcx1['resizeHandles'] === 'both') ? _0xecbcx1['resizeTpl']['replace'](/DIR/, 'end') : ''), _0xecbcx2, '</div>', '</tpl>'].join('')
    },
    getInnerMarkup: function() {
        return '{body}'
    }
});
Ext.define('Ext.ux.Scheduler.view.Vertical', {
    view: null,
    constructor: function(_0xecbcx1) {
        Ext.apply(this, _0xecbcx1)
    },
    getElementsFromEventRecord: function(_0xecbcx2, _0xecbcx4, _0xecbcx3, _0xecbcx5) {
        var _0xecbcx1 = this['view'],
            _0xecbcx6;
        _0xecbcx5 = _0xecbcx5 || false;
        if (_0xecbcx4) {
            _0xecbcx6 = '[id^=' + _0xecbcx1['eventPrefix'] + _0xecbcx2['internalId'] + '-' + _0xecbcx4['internalId'] + '-]'
        } else {
            _0xecbcx6 = '[id^=' + _0xecbcx1['eventPrefix'] + _0xecbcx2['internalId'] + '-]'
        };
        return _0xecbcx1['getEl']()['query'](_0xecbcx6, _0xecbcx5)
    },
    translateToScheduleCoordinate: function(_0xecbcx2) {
        var _0xecbcx1 = this['view'];
        return _0xecbcx2 - _0xecbcx1['getViewContainerElementTop']() + _0xecbcx1['getVerticalScroll']()
    },
    translateToPageCoordinate: function(_0xecbcx5) {
        var _0xecbcx2 = this['view'];
        var _0xecbcx1 = _0xecbcx2['getVerticalScroll']();
        return _0xecbcx5 + _0xecbcx2['getViewContainerElementTop']() - _0xecbcx1
    },
    getDateFromXY: function(_0xecbcx5, _0xecbcx2, _0xecbcx1) {
        var _0xecbcx3 = _0xecbcx5[1];
        if (!_0xecbcx1) {
            _0xecbcx3 = this['translateToScheduleCoordinate'](_0xecbcx3)
        };
        return this['view']['timeAxisViewModel']['getDateFromPosition'](_0xecbcx3, _0xecbcx2)
    },
    getEventRenderData: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx7 = Math,
            _0xecbcx9 = _0xecbcx1['getStartDate'](),
            _0xecbcx6 = _0xecbcx1['getEndDate'](),
            _0xecbcxa = this['view'],
            _0xecbcx4 = _0xecbcxa['timeAxis']['getStart'](),
            _0xecbcx8 = _0xecbcxa['timeAxis']['getEnd'](),
            _0xecbcx3 = _0xecbcx7['floor'](_0xecbcxa['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['max'](_0xecbcx9, _0xecbcx4))),
            _0xecbcxd = _0xecbcx7['floor'](_0xecbcxa['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['min'](_0xecbcx6, _0xecbcx8))),
            _0xecbcx5 = {
                event: _0xecbcx1
            };
        _0xecbcx5['top'] = _0xecbcx7['max'](0, _0xecbcx7['min'](_0xecbcx3, _0xecbcxd) - _0xecbcxa['eventBorderWidth']);
        _0xecbcx5['height'] = _0xecbcx7['max'](1, _0xecbcx7['abs'](_0xecbcx3 - _0xecbcxd));
        _0xecbcx5['start'] = _0xecbcx9;
        _0xecbcx5['end'] = _0xecbcx6;
        _0xecbcx5['startsOutsideView'] = _0xecbcx9 < _0xecbcx4;
        _0xecbcx5['endsOutsideView'] = _0xecbcx6 > _0xecbcx8;
        return _0xecbcx5
    },
    getScheduleRegion: function(_0xecbcx3, _0xecbcx6) {
        var _0xecbcx7 = this['view'],
            _0xecbcx9 = _0xecbcx3 ? Ext['fly'](_0xecbcx7['getScheduleCell'](_0xecbcx7['getNodes']()[0], _0xecbcx7['getResourceStore']()['indexOf'](_0xecbcx3)))['getRegion']() : _0xecbcx7['getTableRegion'](),
            _0xecbcx4 = _0xecbcx7['timeAxis']['getStart'](),
            _0xecbcxd = _0xecbcx7['timeAxis']['getEnd'](),
            _0xecbcx1 = _0xecbcx7['getDateConstraints'](_0xecbcx3, _0xecbcx6) || {
                start: _0xecbcx4,
                end: _0xecbcxd
            },
            _0xecbcx5 = this['translateToPageCoordinate'](_0xecbcx7['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['max'](_0xecbcx4, _0xecbcx1['start']))),
            _0xecbcx8 = this['translateToPageCoordinate'](_0xecbcx7['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['min'](_0xecbcxd, _0xecbcx1['end']))),
            _0xecbcx2 = _0xecbcx9['left'] + _0xecbcx7['barMargin'],
            _0xecbcxa = (_0xecbcx3 ? (_0xecbcx9['left'] + this['getResourceColumnWidth'](_0xecbcx3)) : _0xecbcx9['right']) - _0xecbcx7['barMargin'];
        return new Ext['util'].Region(Math['min'](_0xecbcx5, _0xecbcx8), _0xecbcxa, Math['max'](_0xecbcx5, _0xecbcx8), _0xecbcx2)
    },
    getResourceColumnWidth: function(_0xecbcx1) {
        return this['view']['timeAxisViewModel']['resourceColumnWidth']
    },
    getResourceColumnLayoutAvailableWidth: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        return _0xecbcx1['getResourceColumnWidth'](_0xecbcx2) - (2 * _0xecbcx1['view']['barMargin']) - _0xecbcx1['view']['cellBorderWidth']
    },
    getResourceRegion: function(_0xecbcx7, _0xecbcx2, _0xecbcx9) {
        var _0xecbcx8 = this['view'],
            _0xecbcx4 = _0xecbcx8['getResourceStore']()['indexOf'](_0xecbcx7) * this['getResourceColumnWidth'](_0xecbcx7),
            _0xecbcxa = _0xecbcx8['timeAxis']['getStart'](),
            _0xecbcxe = _0xecbcx8['timeAxis']['getEnd'](),
            _0xecbcx1 = _0xecbcx2 ? Ext.ux.Scheduler['util']['Date']['max'](_0xecbcxa, _0xecbcx2) : _0xecbcxa,
            _0xecbcx3 = _0xecbcx9 ? Ext.ux.Scheduler['util']['Date']['min'](_0xecbcxe, _0xecbcx9) : _0xecbcxe,
            _0xecbcx6 = Math['max'](0, _0xecbcx8['getCoordinateFromDate'](_0xecbcx1) - _0xecbcx8['cellTopBorderWidth']),
            _0xecbcx11 = _0xecbcx8['getCoordinateFromDate'](_0xecbcx3) - _0xecbcx8['cellTopBorderWidth'],
            _0xecbcx5 = _0xecbcx4 + _0xecbcx8['cellBorderWidth'],
            _0xecbcxd = _0xecbcx4 + this['getResourceColumnWidth'](_0xecbcx7) - _0xecbcx8['cellBorderWidth'];
        return new Ext['util'].Region(Math['min'](_0xecbcx6, _0xecbcx11), _0xecbcxd, Math['max'](_0xecbcx6, _0xecbcx11), _0xecbcx5)
    },
    columnRenderer: function(_0xecbcx6, _0xecbcx17, _0xecbcxe, _0xecbcxc, _0xecbcx10) {
        var _0xecbcxb = this['view'];
        var _0xecbcx4 = '';
        if (_0xecbcxc === 0) {
            var _0xecbcx1 = Ext.ux.Scheduler['util']['Date'],
                _0xecbcxd = _0xecbcxb['timeAxis'],
                _0xecbcxf, _0xecbcx5, _0xecbcx8, _0xecbcx9;
            _0xecbcxf = [];
            _0xecbcx5 = _0xecbcxb['getEventStore']()['getEventsForResource'](_0xecbcxe);
            for (_0xecbcx8 = 0, _0xecbcx9 = _0xecbcx5['length']; _0xecbcx8 < _0xecbcx9; _0xecbcx8++) {
                var _0xecbcx2 = _0xecbcx5[_0xecbcx8],
                    _0xecbcx3 = _0xecbcx2['getStartDate'](),
                    _0xecbcx7 = _0xecbcx2['getEndDate']();
                if (_0xecbcx3 && _0xecbcx7 && _0xecbcxd['timeSpanInAxis'](_0xecbcx3, _0xecbcx7)) {
                    _0xecbcxf['push'](_0xecbcxb['generateTplData'](_0xecbcx2, _0xecbcxe, _0xecbcx10))
                }
            };
            _0xecbcxb['eventLayout']['vertical']['applyLayout'](_0xecbcxf, this['getResourceColumnLayoutAvailableWidth'](_0xecbcxe));
            _0xecbcx4 = '&#160;' + _0xecbcxb['eventTpl']['apply'](_0xecbcxf)
        };
        if (_0xecbcx10 % 2 === 1) {
            _0xecbcx17['tdCls'] = (_0xecbcx17['tdCls'] || '') + ' ' + _0xecbcxb['altColCls'];
            _0xecbcx17['cellCls'] = (_0xecbcx17['cellCls'] || '') + ' ' + _0xecbcxb['altColCls']
        };
        return _0xecbcx4
    },
    resolveResource: function(_0xecbcx6) {
        var _0xecbcx4 = this,
            _0xecbcx2 = _0xecbcx4['view'],
            _0xecbcx3, _0xecbcx5 = -1,
            _0xecbcx1;
        _0xecbcx3 = Ext['fly'](_0xecbcx6)['is'](_0xecbcx2['eventSelector']) && _0xecbcx6 || Ext['fly'](_0xecbcx6)['up'](_0xecbcx2['eventSelector'], null, true);
        if (_0xecbcx3) {
            _0xecbcx1 = _0xecbcx2['getResourceRecordFromDomId'](_0xecbcx3['id'])
        } else {
            _0xecbcx6 = Ext['fly'](_0xecbcx6)['is'](_0xecbcx2['timeCellSelector']) ? _0xecbcx6 : Ext['fly'](_0xecbcx6)['up'](_0xecbcx2['timeCellSelector'], null, true);
            if (_0xecbcx6) {
                if (Ext['isIE8m']) {
                    _0xecbcx5 = 0;
                    _0xecbcx6 = _0xecbcx6['previousSibling'];
                    while (_0xecbcx6) {
                        if (_0xecbcx6['nodeType'] === 1) {
                            _0xecbcx5++
                        };
                        _0xecbcx6 = _0xecbcx6['previousSibling']
                    }
                } else {
                    _0xecbcx5 = Ext['Array']['indexOf'](Array['prototype']['slice']['call'](_0xecbcx6['parentNode']['children']), _0xecbcx6)
                }
            };
            _0xecbcx1 = _0xecbcx5 >= 0 && _0xecbcx2['getResourceStore']()['getAt'](_0xecbcx5) || null
        };
        return _0xecbcx1
    },
    onEventUpdate: function(_0xecbcx11, _0xecbcx1) {
        var _0xecbcxa = this;
        var _0xecbcx9 = _0xecbcx1['previous'] || {};
        var _0xecbcx8 = _0xecbcxa['view'];
        var _0xecbcx6 = _0xecbcx8['timeAxis'];
        var _0xecbcx2 = _0xecbcx1['getStartDate']();
        var _0xecbcx7 = _0xecbcx1['getEndDate']();
        var _0xecbcx5 = _0xecbcx9['StartDate'] || _0xecbcx2;
        var _0xecbcx4 = _0xecbcx9['EndDate'] || _0xecbcx7;
        var _0xecbcxd = _0xecbcx5 && _0xecbcx4 && _0xecbcx6['timeSpanInAxis'](_0xecbcx5, _0xecbcx4);
        var _0xecbcx3;
        if (_0xecbcx1['resourceIdField'] in _0xecbcx9 && _0xecbcxd) {
            _0xecbcx3 = _0xecbcx11['getResourceStore']()['getById'](_0xecbcx9[_0xecbcx1['resourceIdField']]);
            _0xecbcx3 && _0xecbcxa['relayoutRenderedEvents'](_0xecbcx3)
        };
        if ((_0xecbcx2 && _0xecbcx7 && _0xecbcx6['timeSpanInAxis'](_0xecbcx2, _0xecbcx7)) || _0xecbcxd) {
            _0xecbcxa['renderSingle'](_0xecbcx1);
            Ext['Array']['each'](_0xecbcx1['getResources'](), function(_0xecbcxe) {
                _0xecbcxa['relayoutRenderedEvents'](_0xecbcxe);
                _0xecbcx8['getEventSelectionModel']()['isSelected'](_0xecbcx1) && _0xecbcx8['onEventBarSelect'](_0xecbcx1, true)
            })
        }
    },
    onEventAdd: function(_0xecbcx5, _0xecbcx6) {
        var _0xecbcx4 = this,
            _0xecbcx2 = _0xecbcx4['view'],
            _0xecbcx3, _0xecbcx1, _0xecbcx9;
        if (_0xecbcx6['length'] === 1) {
            _0xecbcx3 = _0xecbcx6[0];
            _0xecbcx1 = _0xecbcx3['getStartDate']();
            _0xecbcx9 = _0xecbcx3['getEndDate']();
            if (_0xecbcx1 && _0xecbcx9 && _0xecbcx2['timeAxis']['timeSpanInAxis'](_0xecbcx1, _0xecbcx9)) {
                _0xecbcx4['renderSingle'](_0xecbcx3);
                Ext['Array']['each'](_0xecbcx5['getResourcesForEvent'](_0xecbcx3), function(_0xecbcx7) {
                    _0xecbcx4['relayoutRenderedEvents'](_0xecbcx7)
                })
            }
        } else {
            _0xecbcx2['repaintAllEvents']()
        }
    },
    onEventRemove: function(_0xecbcxd, _0xecbcx8) {
        var _0xecbcx9 = this,
            _0xecbcx7 = _0xecbcx9['view'],
            _0xecbcx1, _0xecbcx5, _0xecbcx4, _0xecbcx3, _0xecbcx6, _0xecbcx2;
        for (_0xecbcx2 = false, _0xecbcx3 = 0, _0xecbcx6 = _0xecbcx8['length']; !_0xecbcx2 && _0xecbcx3 < _0xecbcx6; _0xecbcx3++) {
            _0xecbcx1 = _0xecbcx8[_0xecbcx3];
            _0xecbcx5 = _0xecbcx1['getStartDate']();
            _0xecbcx4 = _0xecbcx1['getEndDate']();
            _0xecbcx2 = _0xecbcx5 && _0xecbcx4 && _0xecbcx7['timeAxis']['timeSpanInAxis'](_0xecbcx5, _0xecbcx4);
            _0xecbcx2 && _0xecbcx7['repaintAllEvents']()
        }
    },
    relayoutRenderedEvents: function(_0xecbcx3) {
        var _0xecbcx5 = [],
            _0xecbcx1 = this['view'],
            _0xecbcx2 = _0xecbcx1['getEventStore']()['getEventsForResource'](_0xecbcx3);
        Ext['Array']['each'](_0xecbcx2, function(_0xecbcx6) {
            var _0xecbcx4 = _0xecbcx1['getElementsFromEventRecord'](_0xecbcx6, _0xecbcx3);
            _0xecbcx4['length'] && _0xecbcx5['push']({
                start: _0xecbcx6['getStartDate'](),
                end: _0xecbcx6['getEndDate'](),
                event: _0xecbcx6,
                node: _0xecbcx4[0]
            })
        });
        _0xecbcx1['eventLayout']['vertical']['applyLayout'](_0xecbcx5, this['getResourceColumnLayoutAvailableWidth'](_0xecbcx3));
        Ext['Array']['each'](_0xecbcx5, function(_0xecbcx4) {
            _0xecbcx4['node']['setStyle']({
                left: _0xecbcx4['left'] + 'px',
                width: _0xecbcx4['width'] + 'px'
            });
            _0xecbcx1['fireEvent']('eventrepaint', _0xecbcx1, _0xecbcx4['event'], _0xecbcx4['node'])
        })
    },
    renderSingle: function(_0xecbcx5) {
        var _0xecbcx2 = this['view'],
            _0xecbcx1 = _0xecbcx5['getStartDate'](),
            _0xecbcx3 = _0xecbcx5['getEndDate']();
        Ext['Array']['each'](_0xecbcx2['getElementsFromEventRecord'](_0xecbcx5), function(_0xecbcx4) {
            _0xecbcx4['destroy']()
        });
        if (_0xecbcx1 && _0xecbcx3 && _0xecbcx2['timeAxis']['timeSpanInAxis'](_0xecbcx1, _0xecbcx3)) {
            Ext['Array']['each'](_0xecbcx5['getResources'](), function(_0xecbcx7) {
                var _0xecbcx9 = _0xecbcx2['getResourceStore']()['indexOf'](_0xecbcx7),
                    _0xecbcx4 = Ext['fly'](_0xecbcx2['getScheduleCell'](0, _0xecbcx9)),
                    _0xecbcx6;
                if (_0xecbcx4) {
                    _0xecbcx6 = _0xecbcx2['generateTplData'](_0xecbcx5, _0xecbcx7, _0xecbcx9);
                    _0xecbcx2['eventTpl']['append'](_0xecbcx4['first'](), [_0xecbcx6])
                }
            })
        }
    },
    getTimeSpanRegion: function(_0xecbcx2, _0xecbcx9) {
        var _0xecbcx3 = this['view'],
            _0xecbcx1 = _0xecbcx3['getCoordinateFromDate'](_0xecbcx2),
            _0xecbcx6 = _0xecbcx9 ? _0xecbcx3['getCoordinateFromDate'](_0xecbcx9) : _0xecbcx1,
            _0xecbcx5 = _0xecbcx3['getTableRegion'](),
            _0xecbcx4 = _0xecbcx5 ? _0xecbcx5['right'] - _0xecbcx5['left'] : _0xecbcx3['getEl']()['dom']['clientWidth'];
        return new Ext['util'].Region(Math['min'](_0xecbcx1, _0xecbcx6), _0xecbcx4, Math['max'](_0xecbcx1, _0xecbcx6), 0)
    },
    getStartEndDatesFromRegion: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = this['view']['getDateFromCoordinate'](_0xecbcx5['top'], _0xecbcx2),
            _0xecbcx3 = this['view']['getDateFromCoordinate'](_0xecbcx5['bottom'], _0xecbcx2);
        if (_0xecbcx1 && _0xecbcx3) {
            return {
                start: _0xecbcx1,
                end: _0xecbcx3
            }
        } else {
            return null
        }
    },
    setColumnWidth: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = this['view'];
        _0xecbcx1['resourceColumnWidth'] = _0xecbcx5;
        _0xecbcx1['getTimeAxisViewModel']()['setViewColumnWidth'](_0xecbcx5, _0xecbcx2)
    },
    getVisibleDateRange: function() {
        var _0xecbcx4 = this['view'];
        if (!_0xecbcx4['rendered']) {
            return null
        };
        var _0xecbcx5 = _0xecbcx4['getScroll'](),
            _0xecbcx2 = _0xecbcx4['getViewContainerHeight'](),
            _0xecbcx3 = _0xecbcx4['getTableRegion'](),
            _0xecbcx6 = _0xecbcx4['timeAxis']['getEnd']();
        if (_0xecbcx3['bottom'] - _0xecbcx3['top'] < _0xecbcx2) {
            var _0xecbcx1 = _0xecbcx4['timeAxis']['getStart']();
            return {
                startDate: _0xecbcx1,
                endDate: _0xecbcx6
            }
        };
        return {
            startDate: _0xecbcx4['getDateFromCoordinate'](_0xecbcx5['top'], null, true),
            endDate: _0xecbcx4['getDateFromCoordinate'](_0xecbcx5['top'] + _0xecbcx2, null, true) || _0xecbcx6
        }
    },
    getItemBox: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        return Ext['Array']['map'](_0xecbcx1['getResources'](), function(_0xecbcx5) {
            return _0xecbcx2['getResourceEventBox'](_0xecbcx1, _0xecbcx5)
        })
    },
    getResourceEventBox: function(_0xecbcx6, _0xecbcx9) {
        var _0xecbcxa = Ext.ux.Scheduler['util']['Date'],
            _0xecbcx15 = this,
            _0xecbcxd = null,
            _0xecbcxe = _0xecbcx15['view'],
            _0xecbcx8 = _0xecbcxe['timeAxis']['getStart'](),
            _0xecbcx7 = _0xecbcxe['timeAxis']['getEnd'](),
            _0xecbcx10 = _0xecbcx6['getStartDate'](),
            _0xecbcx11 = _0xecbcx6['getEndDate'](),
            _0xecbcxc, _0xecbcxf, _0xecbcx17, _0xecbcx3, _0xecbcxb, _0xecbcx2, _0xecbcx1, _0xecbcx5;
        if (_0xecbcx10 && _0xecbcx11 && _0xecbcxa['intersectSpans'](_0xecbcx10, _0xecbcx11, _0xecbcx8, _0xecbcx7)) {
            if (_0xecbcxe['managedEventSizing']) {
                _0xecbcxc = _0xecbcxe['eventLayout']['vertical'];
                var _0xecbcx4 = _0xecbcxe['getEventStore']()['filterEventsForResource'](_0xecbcx9, _0xecbcxe['timeAxis']['isRangeInAxis'], _0xecbcxe['timeAxis']);
                _0xecbcxf = Ext['Array']['map'](_0xecbcx4, _0xecbcx15['getEventRenderData'], _0xecbcx15);
                _0xecbcxc['applyLayout'](_0xecbcxf, _0xecbcx15['getResourceColumnLayoutAvailableWidth'](_0xecbcx9));
                _0xecbcx17 = Ext['Array']['findBy'](_0xecbcxf, function(_0xecbcx14) {
                    return _0xecbcx14['event'] == _0xecbcx6
                });
                if (_0xecbcx17) {
                    _0xecbcx3 = _0xecbcxe['getResourceStore']()['indexOf'](_0xecbcx9) * _0xecbcx15['getResourceColumnWidth'](_0xecbcx9);
                    _0xecbcxd = {
                        rendered: true,
                        start: _0xecbcx17['left'] + _0xecbcx3,
                        end: _0xecbcx17['left'] + _0xecbcx17['width'] + _0xecbcx3,
                        top: _0xecbcx17['top'],
                        bottom: _0xecbcx17['top'] + _0xecbcx17['height']
                    }
                }
            } else {
                _0xecbcxb = _0xecbcxe['getElementsFromEventRecord'](_0xecbcx6, _0xecbcx6 !== _0xecbcx9 && _0xecbcx9);
                if (_0xecbcxb['length']) {
                    _0xecbcx2 = _0xecbcxb[0];
                    _0xecbcx1 = _0xecbcx2['getOffsetsTo'](_0xecbcxe['getEl']());
                    _0xecbcx5 = _0xecbcx2['getBox']();
                    _0xecbcxd = {
                        rendered: true,
                        start: _0xecbcx1[0],
                        end: _0xecbcx1[0] + _0xecbcx5['width'],
                        top: _0xecbcx1[1],
                        bottom: _0xecbcx1[1] + _0xecbcx5['height']
                    }
                }
            };
            if (_0xecbcxd) {
                _0xecbcxd = _0xecbcx15['adjustItemBox'](_0xecbcx6, _0xecbcxd)
            }
        };
        return _0xecbcxd
    },
    adjustItemBox: function(_0xecbcx1, _0xecbcx2) {
        return _0xecbcx2
    },
    getConnectorStartSide: function(_0xecbcx1) {
        return 'top'
    },
    getConnectorEndSide: function(_0xecbcx1) {
        return 'bottom'
    }
});
Ext.define('Ext.ux.Scheduler.mixin.AbstractSchedulerView', {
    requires: ['Ext.ux.Scheduler.model.Assignment', 'Ext.ux.Scheduler.template.Event', 'Ext.ux.Scheduler.eventlayout.Horizontal', 'Ext.ux.Scheduler.view.Vertical', 'Ext.ux.Scheduler.eventlayout.Vertical'],
    _cmpCls: 'sch-schedulerview',
    scheduledEventName: 'event',
    eventTemplateClass: 'Ext.ux.Scheduler.template.Event',
    eventTpl: null,
    barMargin: 0,
    constrainDragToResource: false,
    allowOverlap: null,
    readOnly: null,
    altColCls: 'sch-col-alt',
    highlightedEventCls: 'sch-event-highlighted',
    highlightDirtyEvents: false,
    dynamicRowHeight: true,
    managedEventSizing: true,
    eventAnimations: true,
    horizontalLayoutCls: 'Ext.ux.Scheduler.eventlayout.Horizontal',
    horizontalEventSorterFn: null,
    verticalLayoutCls: 'Ext.ux.Scheduler.eventlayout.Vertical',
    verticalEventSorterFn: null,
    eventCls: 'sch-event',
    verticalViewClass: 'Ext.ux.Scheduler.view.Vertical',
    eventStore: null,
    resourceStore: null,
    eventLayout: null,
    terminalSides: null,
    _initializeSchedulerView: function() {
        var _0xecbcx1 = Ext['ClassManager']['get'](this['horizontalLayoutCls']);
        var _0xecbcx2 = Ext['ClassManager']['get'](this['verticalLayoutCls']);
        this['eventSelector'] = '.' + this['eventCls'];
        this['eventLayout'] = {};
        this['eventTpl'] = this['eventTpl'] || Ext['create'](this['eventTemplateClass'], {
            eventPrefix: this['eventPrefix'],
            terminalSides: this['terminalSides'],
            resizeHandles: this['eventResizeHandles']
        });
        if (_0xecbcx1) {
            this['eventLayout']['horizontal'] = new _0xecbcx1(Ext.apply({
                timeAxisViewModel: this['timeAxisViewModel']
            }, {
                bandIndexToPxConvertFn: this['horizontal']['layoutEventVertically'],
                bandIndexToPxConvertScope: this['horizontal']
            }, this['horizontalEventSorterFn'] ? {
                sortEvents: this['horizontalEventSorterFn']
            } : {}))
        };
        if (_0xecbcx2) {
            this['eventLayout']['vertical'] = new _0xecbcx2(Ext.apply({
                view: this
            }, this['verticalEventSorterFn'] ? {
                sortEvents: this['verticalEventSorterFn']
            } : {}))
        };
        this['store'] = this['store'] || this['resourceStore'];
        this['resourceStore'] = this['resourceStore'] || this['store']
    },
    generateTplData: function(_0xecbcx4, _0xecbcx3, _0xecbcx5) {
        var _0xecbcx9 = this[this['mode']]['getEventRenderData'](_0xecbcx4, _0xecbcx3, _0xecbcx5),
            _0xecbcx7 = _0xecbcx4['getStartDate'](),
            _0xecbcx2 = _0xecbcx4['getEndDate'](),
            _0xecbcx1 = _0xecbcx4['getCls']() || '';
        _0xecbcx1 += ' sch-event-resizable-' + _0xecbcx4['getResizable']();
        if (_0xecbcx4['dirty']) {
            _0xecbcx1 += ' sch-dirty '
        };
        if (_0xecbcx9['endsOutsideView']) {
            _0xecbcx1 += ' sch-event-endsoutside '
        };
        if (_0xecbcx9['startsOutsideView']) {
            _0xecbcx1 += ' sch-event-startsoutside '
        };
        if (this['eventBarIconClsField']) {
            _0xecbcx1 += ' sch-event-withicon '
        };
        if (_0xecbcx4['isDraggable']() === false) {
            _0xecbcx1 += ' sch-event-fixed '
        };
        if (_0xecbcx2 - _0xecbcx7 === 0) {
            _0xecbcx1 += ' sch-event-milestone '
        };
        if (this['getEventSelectionModel']()['isSelected'](_0xecbcx4)) {
            _0xecbcx1 += ' ' + this['selectedEventCls'] + ' '
        };
        if (_0xecbcx4['isHighlighted'] || (this['highlightDirtyEvents'] ? _0xecbcx4['dirty'] : false)) {
            _0xecbcx1 += ' ' + this['highlightedEventCls'] + ' '
        };
        if (this['isWeekView']()) {
            _0xecbcx9['id'] = _0xecbcx4['internalId'] + '-calendar-' + _0xecbcx5 + '-x'
        } else {
            _0xecbcx9['id'] = _0xecbcx4['internalId'] + '-' + _0xecbcx3['internalId'] + '-x'
        };
        _0xecbcx9['internalCls'] = _0xecbcx1;
        _0xecbcx9['start'] = _0xecbcx7;
        _0xecbcx9['end'] = _0xecbcx2;
        _0xecbcx9['iconCls'] = _0xecbcx4['data'][this['eventBarIconClsField']] || (_0xecbcx4['getIconCls'] && _0xecbcx4['getIconCls']()) || '';
        _0xecbcx9['event'] = _0xecbcx4;
        if (this['eventRenderer']) {
            var _0xecbcx6 = this['eventRenderer']['call'](this['eventRendererScope'] || this, _0xecbcx4, _0xecbcx3, _0xecbcx9, _0xecbcx5);
            if (this['eventBodyTemplate']) {
                _0xecbcx9['body'] = this['eventBodyTemplate']['apply'](_0xecbcx6)
            } else {
                _0xecbcx9['body'] = _0xecbcx6
            }
        } else {
            if (this['eventBodyTemplate']) {
                _0xecbcx9['body'] = this['eventBodyTemplate']['apply'](_0xecbcx4['data'])
            } else {
                if (this['eventBarTextField']) {
                    _0xecbcx9['body'] = _0xecbcx4['data'][this['eventBarTextField']] || ''
                }
            }
        };
        return _0xecbcx9
    },
    resolveResource: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        return _0xecbcx1[_0xecbcx1['mode']]['resolveResource'](_0xecbcx2)
    },
    getResourceRegion: function(_0xecbcx2, _0xecbcx1, _0xecbcx5) {
        return this[this['mode']]['getResourceRegion'](_0xecbcx2, _0xecbcx1, _0xecbcx5)
    },
    resolveEventRecord: function(_0xecbcx1) {
        _0xecbcx1 = _0xecbcx1['dom'] ? _0xecbcx1['dom'] : _0xecbcx1;
        if (!(Ext['fly'](_0xecbcx1)['is'](this['eventSelector']))) {
            _0xecbcx1 = Ext['fly'](_0xecbcx1)['up'](this['eventSelector'])
        };
        return _0xecbcx1 && this['getEventRecordFromDomId'](_0xecbcx1['id'])
    },
    resolveEventRecordFromResourceRow: function(_0xecbcx1) {
        var _0xecbcx5 = this,
            _0xecbcx4 = _0xecbcx5['getEventSelectionModel'](),
            _0xecbcx3, _0xecbcx2;
        _0xecbcx1 = _0xecbcx1['dom'] ? _0xecbcx1['dom'] : _0xecbcx1;
        _0xecbcx3 = _0xecbcx5['getRecord'](_0xecbcx1);
        return _0xecbcx4['getFirstSelectedEventForResource'](_0xecbcx3)
    },
    resolveAssignmentRecord: function(_0xecbcx1) {
        var _0xecbcx5 = this,
            _0xecbcx4 = _0xecbcx5['getEventStore']()['getAssignmentStore'](),
            _0xecbcx6 = null,
            _0xecbcx2, _0xecbcx3;
        if (_0xecbcx4) {
            _0xecbcx2 = _0xecbcx5['getEventRecordFromDomId'](_0xecbcx1['id']);
            _0xecbcx3 = _0xecbcx5['getResourceRecordFromDomId'](_0xecbcx1['id']);
            if (_0xecbcx2 && _0xecbcx3) {
                _0xecbcx6 = _0xecbcx4['getAssignmentForEventAndResource'](_0xecbcx2, _0xecbcx3)
            }
        };
        return _0xecbcx6
    },
    getEventRecordFromDomId: function(_0xecbcx1) {
        _0xecbcx1 = this['getEventIdFromDomNodeId'](_0xecbcx1);
        return this['getEventStore']()['getModelByInternalId'](_0xecbcx1)
    },
    getResourceRecordFromDomId: function(_0xecbcx1) {
        _0xecbcx1 = this['getResourceIdFromDomNodeId'](_0xecbcx1);
        return this['getResourceStore']()['getByInternalId'](_0xecbcx1)
    },
    isDateRangeAvailable: function(_0xecbcx3, _0xecbcx1, _0xecbcx2, _0xecbcx5) {
        return this['getEventStore']()['isDateRangeAvailable'](_0xecbcx3, _0xecbcx1, _0xecbcx2, _0xecbcx5)
    },
    getEventsInView: function() {
        var _0xecbcx2 = this['timeAxis']['getStart'](),
            _0xecbcx1 = this['timeAxis']['getEnd']();
        return this['getEventStore']()['getEventsInTimeSpan'](_0xecbcx2, _0xecbcx1)
    },
    getEventNodes: function() {
        return this['getEl']()['select'](this['eventSelector'])
    },
    triggerHighlightEvents: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = this;
        var _0xecbcx3 = [];
        Ext['Array']['each']([]['concat'](_0xecbcx2), function(_0xecbcx6) {
            _0xecbcx3['push']['apply'](_0xecbcx3, _0xecbcx5['getElementsFromEventRecord'](_0xecbcx6, null, null, true))
        });
        var _0xecbcx4 = _0xecbcx1 !== false ? 'addCls' : 'removeCls';
        Ext['Array']['each'](_0xecbcx2, function(_0xecbcx6) {
            _0xecbcx6['isHighlighted'] = _0xecbcx1
        });
        Ext['Array']['each']([]['concat'](_0xecbcx3), function(_0xecbcx6) {
            Ext['fly'](_0xecbcx6)[_0xecbcx4](_0xecbcx5['highlightedEventCls'])
        })
    },
    highlightEvents: function(_0xecbcx1) {
        this['triggerHighlightEvents'](_0xecbcx1, true)
    },
    unhighlightEvents: function(_0xecbcx1) {
        this['triggerHighlightEvents'](_0xecbcx1, false)
    },
    highlightEventsBy: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = this['getEventsInView']();
        this['highlightEvents'](_0xecbcx1['filterBy'](_0xecbcx5, _0xecbcx2)['getRange']())
    },
    clearHighlightedEvents: function() {
        Ext['Array']['each'](this['getEventStore']()['getRange'](), function(_0xecbcx1) {
            _0xecbcx1['isHighlighted'] = false
        });
        this['getEl']()['select']('.' + this['highlightedEventCls'])['removeCls'](this['highlightedEventCls'])
    },
    onEventCreated: function(_0xecbcx1, _0xecbcx2) {},
    getEventStore: function() {
        return this['eventStore']
    },
    registerEventEditor: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['eventEditor'] = _0xecbcx1;
        _0xecbcx2['mon'](_0xecbcx1['editor'] || _0xecbcx1, {
            beforeeventadd: function() {
                var _0xecbcx5 = Ext['Array']['toArray'](arguments);
                Ext['Array']['splice'](_0xecbcx5, 0, 1, _0xecbcx2);
                return _0xecbcx2['fireEventArgs']['call'](_0xecbcx2, 'beforeeventadd', _0xecbcx5)
            }
        })
    },
    getEventEditor: function() {
        return this['eventEditor']
    },
    onEventUpdate: function(_0xecbcx2, _0xecbcx5, _0xecbcx1) {
        this[this['mode']]['onEventUpdate'](_0xecbcx2, _0xecbcx5, _0xecbcx1)
    },
    onEventAdd: function(_0xecbcx1, _0xecbcx2) {
        if (!Ext['isArray'](_0xecbcx2)) {
            _0xecbcx2 = [_0xecbcx2]
        };
        this[this['mode']]['onEventAdd'](_0xecbcx1, _0xecbcx2)
    },
    onAssignmentAdd: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = this;
        Ext['Array']['each'](_0xecbcx1, function(_0xecbcx4) {
            var _0xecbcx3 = _0xecbcx4['getResource']();
            _0xecbcx3 && _0xecbcx5['repaintEventsForResource'](_0xecbcx3)
        })
    },
    onAssignmentUpdate: function(_0xecbcx3, _0xecbcx9) {
        var _0xecbcx6 = this,
            _0xecbcx1 = _0xecbcx9['previous'] && _0xecbcx9['previous'][_0xecbcx9['resourceIdField']],
            _0xecbcx4 = _0xecbcx9['getResourceId'](),
            _0xecbcx2, _0xecbcx5;
        if (_0xecbcx1) {
            _0xecbcx2 = _0xecbcx6['getResourceStore']()['getModelById'](_0xecbcx1);
            _0xecbcx6['repaintEventsForResource'](_0xecbcx2)
        };
        if (_0xecbcx4) {
            _0xecbcx5 = _0xecbcx6['getResourceStore']()['getModelById'](_0xecbcx4);
            _0xecbcx6['repaintEventsForResource'](_0xecbcx5)
        }
    },
    onAssignmentRemove: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = this;
        Ext['Array']['each'](_0xecbcx1, function(_0xecbcx4) {
            var _0xecbcx6 = _0xecbcx4['getResourceId']();
            var _0xecbcx3 = _0xecbcx6 && _0xecbcx5['getResourceStore']()['getModelById'](_0xecbcx6);
            _0xecbcx3 && _0xecbcx5['repaintEventsForResource'](_0xecbcx3)
        })
    },
    onEventRemove: function(_0xecbcx1, _0xecbcx2) {
        this[this['mode']]['onEventRemove'](_0xecbcx1, _0xecbcx2)
    },
    setEventStore: function(_0xecbcx3, _0xecbcx2) {
        var _0xecbcx6 = this;
        var _0xecbcx7 = _0xecbcx6['getEventStore']();
        var _0xecbcx1 = {
            scope: _0xecbcx6,
            refresh: _0xecbcx6['onEventDataRefresh'],
            addrecords: _0xecbcx6['onEventAdd'],
            updaterecord: _0xecbcx6['onEventUpdate'],
            removerecords: _0xecbcx6['onEventRemove'],
            update: _0xecbcx6['onEventUpdate'],
            nodeinsert: _0xecbcx6['onEventAdd'],
            nodeappend: _0xecbcx6['onEventAdd']
        };
        if (!Ext['data']['TreeStore'] || !(_0xecbcx3 instanceof Ext['data']['TreeStore'])) {
            _0xecbcx1['remove'] = _0xecbcx6['onEventRemove'];
            _0xecbcx1['add'] = _0xecbcx6['onEventAdd']
        };
        var _0xecbcx5 = {
            scope: _0xecbcx6,
            refresh: _0xecbcx6['onEventDataRefresh'],
            load: _0xecbcx6['onEventDataRefresh'],
            update: _0xecbcx6['onAssignmentUpdate'],
            add: _0xecbcx6['onAssignmentAdd'],
            remove: _0xecbcx6['onAssignmentRemove']
        };
        if (!Ext['versions']['touch']) {
            _0xecbcx1['clear'] = _0xecbcx6['onEventDataRefresh']
        };
        if (!_0xecbcx2 && _0xecbcx6['eventStore']) {
            _0xecbcx6['eventStore']['setResourceStore'](null);
            if (_0xecbcx3 !== _0xecbcx6['eventStore'] && _0xecbcx6['eventStore']['autoDestroy']) {
                _0xecbcx6['eventStore']['destroy']()
            } else {
                if (_0xecbcx6['mun']) {
                    _0xecbcx6['mun'](_0xecbcx6['eventStore'], _0xecbcx1);
                    var _0xecbcx4 = _0xecbcx6['eventStore']['getAssignmentStore']();
                    if (_0xecbcx4) {
                        _0xecbcx6['mun'](_0xecbcx4, _0xecbcx5)
                    }
                } else {
                    _0xecbcx6['eventStore']['un'](_0xecbcx1)
                }
            };
            if (!_0xecbcx3) {
                _0xecbcx6['eventStore'] = null
            }
        };
        if (_0xecbcx3) {
            _0xecbcx3 = Ext['data']['StoreManager']['lookup'](_0xecbcx3);
            if (_0xecbcx6['mon']) {
                _0xecbcx6['mon'](_0xecbcx3, _0xecbcx1)
            } else {
                _0xecbcx3['on'](_0xecbcx1)
            };
            _0xecbcx6['eventStore'] = _0xecbcx3;
            _0xecbcx3['setResourceStore'](_0xecbcx6['getResourceStore']());
            var _0xecbcx9 = _0xecbcx3['getAssignmentStore']();
            if (_0xecbcx9) {
                _0xecbcx6['mon'](_0xecbcx9, _0xecbcx5)
            }
        };
        if (_0xecbcx3 && !_0xecbcx2) {
            this['getTimeAxisViewModel']()['setEventStore'](_0xecbcx3);
            this['getEventSelectionModel']()['bindStore'](_0xecbcx3);
            this['fireEvent']('eventstorechange', this, _0xecbcx3, _0xecbcx7);
            _0xecbcx6['refreshView']()
        }
    },
    onEventDataRefresh: function() {
        this['refreshKeepingScroll']()
    },
    onEventBarSelect: function(_0xecbcx1) {
        var _0xecbcx5 = this,
            _0xecbcx2, _0xecbcx3;
        if (_0xecbcx1 instanceof Ext.ux.Scheduler['model']['Assignment']) {
            _0xecbcx2 = _0xecbcx1['getEvent']();
            _0xecbcx3 = _0xecbcx1['getResource']()
        } else {
            _0xecbcx2 = _0xecbcx1;
            _0xecbcx3 = null
        };
        Ext['Array']['each'](_0xecbcx5['getElementsFromEventRecord'](_0xecbcx2, _0xecbcx3, null, true), function(_0xecbcx4) {
            Ext['fly'](_0xecbcx4)['addCls'](_0xecbcx5['selectedEventCls'])
        })
    },
    onEventBarDeselect: function(_0xecbcx1) {
        var _0xecbcx5 = this,
            _0xecbcx2, _0xecbcx3;
        if (_0xecbcx1 instanceof Ext.ux.Scheduler['model']['Assignment']) {
            _0xecbcx2 = _0xecbcx1['getEvent']();
            _0xecbcx3 = _0xecbcx1['getResource']()
        } else {
            _0xecbcx2 = _0xecbcx1;
            _0xecbcx3 = null
        };
        _0xecbcx2 && Ext['Array']['each'](_0xecbcx5['getElementsFromEventRecord'](_0xecbcx2, _0xecbcx3, null, true), function(_0xecbcx4) {
            Ext['fly'](_0xecbcx4)['removeCls'](_0xecbcx5['selectedEventCls'])
        })
    },
    refresh: function() {
        throw 'Abstract method call'
    },
    repaintEventsForResource: function(_0xecbcx1) {
        throw 'Abstract method call'
    },
    repaintAllEvents: function() {
        this['refreshKeepingScroll']()
    },
    scrollEventIntoView: function(_0xecbcx6, _0xecbcx2, _0xecbcx1, _0xecbcx9, _0xecbcx5) {
        var _0xecbcx3 = this,
            _0xecbcx4 = _0xecbcx6['getResources']();
        if (_0xecbcx4['length'] > 1) {
            Ext['Error']['raise']('AbstractSchedulerView::scrollEventIntoView() is not applicable for events with multiple assignments, please use AbstractSchedulerView::scrollResourceEventIntoView() instead.')
        };
        _0xecbcx4['length'] && _0xecbcx3['scrollResourceEventIntoView'](_0xecbcx4[0], _0xecbcx6, null, _0xecbcx2, _0xecbcx1, _0xecbcx9, _0xecbcx5)
    },
    getResourceStore: function() {
        return this['resourceStore']
    },
    setResourceStore: function(_0xecbcx1) {
        var _0xecbcx2 = this['resourceStore'];
        this['resourceStore'] = _0xecbcx1;
        if (_0xecbcx1) {
            this['fireEvent']('resourcestorechange', this, _0xecbcx1, _0xecbcx2)
        }
    }
});
Ext.define('Ext.ux.Scheduler.preset.ViewPreset', {
    requires: ['Ext.ux.Scheduler.util.Date'],
    name: null,
    rowHeight: 24,
    timeColumnWidth: 50,
    timeRowHeight: null,
    timeAxisColumnWidth: null,
    displayDateFormat: 'G:i',
    shiftUnit: 'HOUR',
    shiftIncrement: 1,
    defaultSpan: 12,
    timeResolution: null,
    headerConfig: null,
    columnLinesFor: 'middle',
    headers: null,
    mainHeader: 0,
    ptype: '',
    constructor: function(_0xecbcx1) {
        Ext.apply(this, _0xecbcx1);
        this['normalizeUnits']()
    },
    normalizeUnits: function() {
        var _0xecbcx1 = this['headerConfig'];
        var _0xecbcx3 = Ext.ux.Scheduler['util']['Date'];
        for (var _0xecbcx4 in _0xecbcx1) {
            if (_0xecbcx1.hasOwnProperty(_0xecbcx4)) {
                if (_0xecbcx3[_0xecbcx1[_0xecbcx4]['unit']]) {
                    _0xecbcx1[_0xecbcx4]['unit'] = _0xecbcx3[_0xecbcx1[_0xecbcx4]['unit']['toUpperCase']()]
                };
                if (_0xecbcx3[_0xecbcx1[_0xecbcx4]['splitUnit']]) {
                    _0xecbcx1[_0xecbcx4]['splitUnit'] = _0xecbcx3[_0xecbcx1[_0xecbcx4]['splitUnit']['toUpperCase']()]
                }
            }
        };
        var _0xecbcx2 = this['timeResolution'];
        if (_0xecbcx2 && _0xecbcx3[_0xecbcx2['unit']]) {
            _0xecbcx2['unit'] = _0xecbcx3[_0xecbcx2['unit']['toUpperCase']()]
        };
        var _0xecbcx5 = this['shiftUnit'];
        if (_0xecbcx5 && _0xecbcx3[_0xecbcx5]) {
            this['shiftUnit'] = _0xecbcx3[_0xecbcx5['toUpperCase']()]
        }
    },
    getHeaders: function() {
        if (this['headers']) {
            return this['headers']
        };
        var _0xecbcx1 = this['headerConfig'];
        this['mainHeader'] = _0xecbcx1['top'] ? 1 : 0;
        return this['headers'] = []['concat'](_0xecbcx1['top'] || [], _0xecbcx1['middle'] || [], _0xecbcx1['bottom'] || [])
    },
    getMainHeader: function() {
        return this['getHeaders']()[this['mainHeader']]
    },
    getBottomHeader: function() {
        var _0xecbcx1 = this['getHeaders']();
        return _0xecbcx1[_0xecbcx1['length'] - 1]
    },
    clone: function() {
        var _0xecbcx1 = {};
        var _0xecbcx2 = this;
        Ext['Array']['each'](['rowHeight', 'timeColumnWidth', 'timeRowHeight', 'timeAxisColumnWidth', 'displayDateFormat', 'shiftUnit', 'shiftIncrement', 'defaultSpan', 'timeResolution', 'headerConfig'], function(_0xecbcx5) {
            _0xecbcx1[_0xecbcx5] = _0xecbcx2[_0xecbcx5]
        });
        return new this['self'](Ext['clone'](_0xecbcx1))
    },
    isValid: function() {
        var _0xecbcx3 = Ext.ux.Scheduler['util']['Date'],
            _0xecbcx2 = true,
            _0xecbcx5 = Ext.ux.Scheduler['util']['Date']['units'],
            _0xecbcx1 = {};
        for (var _0xecbcx4 in this['headerConfig']) {
            if (this['headerConfig'].hasOwnProperty(_0xecbcx4)) {
                _0xecbcx1[_0xecbcx4] = true;
                _0xecbcx2 = _0xecbcx2 && Ext['Array']['indexOf'](_0xecbcx5, this['headerConfig'][_0xecbcx4]['unit']) >= 0
            }
        };
        if (!(this['columnLinesFor'] in _0xecbcx1)) {
            this['columnLinesFor'] = 'middle'
        };
        if (this['timeResolution']) {
            _0xecbcx2 = _0xecbcx2 && Ext['Array']['indexOf'](_0xecbcx5, this['timeResolution']['unit']) >= 0
        };
        if (this['shiftUnit']) {
            _0xecbcx2 = _0xecbcx2 && Ext['Array']['indexOf'](_0xecbcx5, this['shiftUnit']) >= 0
        };
        return _0xecbcx2
    }
});
Ext.define('Ext.ux.Scheduler.preset.Manager', {
    extend: 'Ext.util.MixedCollection',
    requires: ['Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.preset.ViewPreset'],
    mixins: ['Ext.ux.Scheduler.mixin.Localizable'],
    singleton: true,
    defaultPresets: {
        secondAndMinute: {
            timeColumnWidth: 30,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'G:i:s',
            shiftIncrement: 10,
            shiftUnit: 'MINUTE',
            defaultSpan: 24,
            timeResolution: {
                unit: 'SECOND',
                increment: 5
            },
            headerConfig: {
                middle: {
                    unit: 'SECOND',
                    increment: 10,
                    align: 'center',
                    dateFormat: 's'
                },
                top: {
                    unit: 'MINUTE',
                    align: 'center',
                    dateFormat: 'D, d g:iA'
                }
            }
        },
        minuteAndHour: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'HOUR',
            defaultSpan: 24,
            timeResolution: {
                unit: 'MINUTE',
                increment: 30
            },
            headerConfig: {
                middle: {
                    unit: 'MINUTE',
                    increment: '30',
                    align: 'center',
                    dateFormat: 'i'
                },
                top: {
                    unit: 'HOUR',
                    align: 'center',
                    dateFormat: 'D, gA/d'
                }
            }
        },
        hourAndDay: {
            timeColumnWidth: 60,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'DAY',
            defaultSpan: 24,
            timeResolution: {
                unit: 'MINUTE',
                increment: 30
            },
            headerConfig: {
                middle: {
                    unit: 'HOUR',
                    align: 'center',
                    dateFormat: 'G:i'
                },
                top: {
                    unit: 'DAY',
                    align: 'center',
                    dateFormat: 'D d/m'
                }
            }
        },
        dayAndWeek: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d G:i',
            shiftUnit: 'DAY',
            shiftIncrement: 1,
            defaultSpan: 5,
            timeResolution: {
                unit: 'HOUR',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'DAY',
                    align: 'center',
                    dateFormat: 'D d M'
                },
                top: {
                    unit: 'WEEK',
                    align: 'center',
                    renderer: function(_0xecbcx5, _0xecbcx2, _0xecbcx1) {
                        return Ext.ux.Scheduler['util']['Date']['getShortNameOfUnit']('WEEK') + '.' + Ext['Date']['format'](_0xecbcx5, 'W M Y')
                    }
                }
            }
        },
        weekAndDay: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'WEEK',
            shiftIncrement: 1,
            defaultSpan: 1,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                bottom: {
                    unit: 'DAY',
                    align: 'center',
                    increment: 1,
                    dateFormat: 'd/m'
                },
                middle: {
                    unit: 'WEEK',
                    dateFormat: 'D d M'
                }
            }
        },
        weekAndMonth: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'WEEK',
            shiftIncrement: 5,
            defaultSpan: 6,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'WEEK',
                    align: 'center',
                    renderer: function(_0xecbcx5, _0xecbcx2, _0xecbcx1) {
                        return Ext['Date']['format'](_0xecbcx5, 'd M')
                    }
                },
                top: {
                    unit: 'MONTH',
                    align: 'center',
                    dateFormat: 'M Y'
                }
            }
        },
        monthAndYear: {
            timeColumnWidth: 110,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftIncrement: 3,
            shiftUnit: 'MONTH',
            defaultSpan: 12,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'MONTH',
                    align: 'center',
                    dateFormat: 'M Y'
                },
                top: {
                    unit: 'YEAR',
                    align: 'center',
                    dateFormat: 'Y'
                }
            }
        },
        year: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'YEAR',
            shiftIncrement: 1,
            defaultSpan: 1,
            timeResolution: {
                unit: 'MONTH',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'QUARTER',
                    align: 'center',
                    renderer: function(_0xecbcx5, _0xecbcx2, _0xecbcx1) {
                        return Ext['String']['format'](Ext.ux.Scheduler['util']['Date']['getShortNameOfUnit']('QUARTER')['toUpperCase']() + '{0}', Math['floor'](_0xecbcx5['getMonth']() / 3) + 1)
                    }
                },
                top: {
                    unit: 'YEAR',
                    align: 'center',
                    dateFormat: 'Y'
                }
            }
        },
        manyYears: {
            timeColumnWidth: 50,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'YEAR',
            shiftIncrement: 1,
            defaultSpan: 1,
            timeResolution: {
                unit: 'YEAR',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'YEAR',
                    align: 'center',
                    dateFormat: 'Y',
                    increment: 5
                },
                bottom: {
                    unit: 'YEAR',
                    align: 'center',
                    dateFormat: 'y',
                    increment: 1
                }
            }
        },
        weekAndDayLetter: {
            timeColumnWidth: 20,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'WEEK',
            shiftIncrement: 1,
            defaultSpan: 10,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                bottom: {
                    unit: 'DAY',
                    align: 'center',
                    renderer: function(_0xecbcx1) {
                        return Ext['Date']['dayNames'][_0xecbcx1['getDay']()]['substring'](0, 1)
                    },
                    verticalColumnWidth: 25
                },
                middle: {
                    unit: 'WEEK',
                    dateFormat: 'D d M Y',
                    verticalColumnWidth: 115
                }
            }
        },
        weekDateAndMonth: {
            timeColumnWidth: 30,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'WEEK',
            shiftIncrement: 1,
            defaultSpan: 10,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'WEEK',
                    align: 'center',
                    dateFormat: 'd'
                },
                top: {
                    unit: 'MONTH',
                    dateFormat: 'Y F'
                }
            }
        },
        day: {
            timeRowHeight: 40,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'DAY',
            defaultSpan: 1,
            timeResolution: {
                unit: 'MINUTE',
                increment: 30
            },
            columnLinesFor: 'bottom',
            headerConfig: {
                bottom: {
                    unit: 'HOUR',
                    align: 'center',
                    renderer: function(_0xecbcx1) {
                        return Ext['String']['format']('<div class="sch-calendarcolumn-ct"><span class="sch-calendarcolumn-hours">{0}</span><span class="sch-calendarcolumn-minutes">{1}</span></div>', Ext['Date']['format'](_0xecbcx1, 'H'), Ext['Date']['format'](_0xecbcx1, 'i'))
                    }
                },
                middle: {
                    unit: 'DAY',
                    align: 'center',
                    dateFormat: 'D d/m',
                    splitUnit: 'DAY'
                }
            }
        },
        week: {
            timeRowHeight: 40,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'WEEK',
            defaultSpan: 24,
            timeResolution: {
                unit: 'MINUTE',
                increment: 30
            },
            columnLinesFor: 'bottom',
            headerConfig: {
                bottom: {
                    unit: 'HOUR',
                    align: 'center',
                    dateFormat: 'H:i',
                    renderer: function(_0xecbcx1) {
                        return Ext['String']['format']('<div class="sch-calendarcolumn-ct"><span class="sch-calendarcolumn-hours">{0}</span><span class="sch-calendarcolumn-minutes">{1}</span></div>', Ext['Date']['format'](_0xecbcx1, 'H'), Ext['Date']['format'](_0xecbcx1, 'i'))
                    }
                },
                middle: {
                    unit: 'WEEK',
                    align: 'center',
                    dateFormat: 'D d',
                    splitUnit: 'DAY'
                }
            }
        }
    },
    constructor: function() {
        this['callParent'](arguments);
        this['registerDefaults']()
    },
    onLocalized: function() {
        var _0xecbcx1 = this;
        this['eachKey'](function(_0xecbcx5, _0xecbcx3) {
            if (_0xecbcx1['l10n'][_0xecbcx5]) {
                var _0xecbcx2 = _0xecbcx1.L(_0xecbcx5);
                _0xecbcx2['displayDateFormat'] && (_0xecbcx3['displayDateFormat'] = _0xecbcx2['displayDateFormat']);
                _0xecbcx2['middleDateFormat'] && (_0xecbcx3['headerConfig']['middle']['dateFormat'] = _0xecbcx2['middleDateFormat']);
                _0xecbcx2['topDateFormat'] && (_0xecbcx3['headerConfig']['top']['dateFormat'] = _0xecbcx2['topDateFormat']);
                _0xecbcx2['bottomDateFormat'] && (_0xecbcx3['headerConfig']['bottom']['dateFormat'] = _0xecbcx2['bottomDateFormat'])
            }
        })
    },
    registerPreset: function(_0xecbcx2, _0xecbcx1) {
        _0xecbcx1['name'] = _0xecbcx2;
        var _0xecbcx5 = new Ext.ux.Scheduler['preset'].ViewPreset(_0xecbcx1);
        if (_0xecbcx5['isValid']()) {
            if (this['containsKey'](_0xecbcx2)) {
                this['removeAtKey'](_0xecbcx2)
            };
            this['add'](_0xecbcx2, _0xecbcx5)
        } else {
            throw 'Invalid preset, please check your configuration'
        }
    },
    getPreset: function(_0xecbcx1) {
        return this['get'](_0xecbcx1)
    },
    deletePreset: function(_0xecbcx1) {
        this['removeAtKey'](_0xecbcx1)
    },
    registerDefaults: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = this['defaultPresets'];
        for (var _0xecbcx5 in _0xecbcx1) {
            _0xecbcx2['registerPreset'](_0xecbcx5, _0xecbcx1[_0xecbcx5])
        }
    }
});
Ext.define('Ext.ux.Scheduler.view.model.TimeAxis', {
    extend: 'Ext.util.Observable',
    requires: ['Ext.Date', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.preset.Manager'],
    timeAxis: null,
    availableWidth: 0,
    tickWidth: 100,
    snapToIncrement: false,
    forceFit: false,
    headerConfig: null,
    headers: null,
    mainHeader: 0,
    calendar: null,
    timeAxisColumnWidth: null,
    resourceColumnWidth: null,
    weekViewColumnWidth: null,
    calendarColumnDates: null,
    headersDatesCache: null,
    timeColumnWidth: null,
    rowHeightHorizontal: null,
    rowHeightVertical: null,
    mode: 'horizontal',
    suppressFit: false,
    refCount: 0,
    columnConfig: {},
    viewPreset: null,
    columnLinesFor: 'middle',
    eventStore: null,
    originalTickWidth: null,
    constructor: function(_0xecbcx1) {
        var _0xecbcx5 = this;
        Ext.apply(this, _0xecbcx1);
        _0xecbcx5['headersDatesCache'] = {};
        if (this['viewPreset']) {
            if (this['viewPreset'] instanceof Ext.ux.Scheduler['preset']['ViewPreset']) {
                this['consumeViewPreset'](this['viewPreset'])
            } else {
                var _0xecbcx2 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](this['viewPreset']);
                _0xecbcx2 && this['consumeViewPreset'](_0xecbcx2)
            }
        };
        _0xecbcx5['timeAxis']['on']('reconfigure', _0xecbcx5['onTimeAxisReconfigure'], _0xecbcx5);
        this['callParent'](arguments)
    },
    isHorizontal: function() {
        return this['mode'] === 'horizontal'
    },
    isVertical: function() {
        return this['mode'] === 'vertical'
    },
    isWeek: function() {
        return this['mode'] === 'weekview'
    },
    destroy: function() {
        this['timeAxis']['un']('reconfigure', this['onTimeAxisReconfigure'], this)
    },
    onTimeAxisReconfigure: function(_0xecbcx1, _0xecbcx2) {
        if (!_0xecbcx2) {
            this['update']()
        }
    },
    reconfigure: function(_0xecbcx1) {
        this['headers'] = null;
        Ext.apply(this, _0xecbcx1);
        var _0xecbcx2;
        if (this['isHorizontal']()) {
            _0xecbcx2 = this['timeColumnWidth']
        } else {
            _0xecbcx2 = this['rowHeightVertical']
        };
        this['setTickWidth'](_0xecbcx2);
        this['fireEvent']('reconfigure', this)
    },
    getColumnConfig: function() {
        return this['columnConfig']
    },
    update: function(_0xecbcx3, _0xecbcx2) {
        var _0xecbcx4 = this['timeAxis'],
            _0xecbcx5 = this['headerConfig'];
        this['availableWidth'] = Math['max'](_0xecbcx3 || this['availableWidth'], 0);
        if (!Ext['isNumber'](this['availableWidth'])) {
            throw new Error('Invalid available width provided to Ext.ux.Scheduler.view.model.TimeAxis')
        };
        if (this['forceFit'] && this['availableWidth'] <= 0) {
            return
        };
        this['columnConfig'] = {};
        for (var _0xecbcx6 in _0xecbcx5) {
            if (_0xecbcx5[_0xecbcx6]['cellGenerator']) {
                this['columnConfig'][_0xecbcx6] = _0xecbcx5[_0xecbcx6]['cellGenerator']['call'](this, _0xecbcx4['getStart'](), _0xecbcx4['getEnd']())
            } else {
                this['columnConfig'][_0xecbcx6] = this['createHeaderRow'](_0xecbcx6, _0xecbcx5[_0xecbcx6])
            }
        };
        var _0xecbcx1 = this['calculateTickWidth'](this['originalTickWidth']);
        if (!Ext['isNumber'](_0xecbcx1) || _0xecbcx1 <= 0) {
            throw new Error('Invalid column width calculated in Ext.ux.Scheduler.view.model.TimeAxis')
        };
        this['updateTickWidth'](_0xecbcx1);
        if (!_0xecbcx2) {
            this['fireEvent']('update', this)
        }
    },
    updateCalendarColumnDates: function(_0xecbcx2) {
        this['calendarColumnDates'] = [];
        for (var _0xecbcx1 = 0; _0xecbcx1 < _0xecbcx2['length']; _0xecbcx1++) {
            var _0xecbcx5 = _0xecbcx2[_0xecbcx1];
            this['calendarColumnDates']['push']([_0xecbcx5['start'], _0xecbcx5['end']])
        }
    },
    getCalendarColumnDates: function() {
        return this['calendarColumnDates']
    },
    createHeaderRow: function(_0xecbcx1, _0xecbcx3) {
        var _0xecbcx5 = [],
            _0xecbcx4 = this,
            _0xecbcx6 = _0xecbcx3['align'],
            _0xecbcx2 = Ext['Date']['clearTime'](new Date());
        _0xecbcx4['headersDatesCache'][_0xecbcx1] = {};
        _0xecbcx4['forEachInterval'](_0xecbcx1, function(_0xecbcxd, _0xecbcx9, _0xecbcx7) {
            var _0xecbcx8 = {
                align: _0xecbcx6,
                start: _0xecbcxd,
                end: _0xecbcx9,
                headerCls: ''
            };
            _0xecbcx4['headersDatesCache'][_0xecbcx1][_0xecbcxd['getTime']()] = 1;
            if (_0xecbcx3['renderer']) {
                _0xecbcx8['header'] = _0xecbcx3['renderer']['call'](_0xecbcx3['scope'] || _0xecbcx4, _0xecbcxd, _0xecbcx9, _0xecbcx8, _0xecbcx7, _0xecbcx4['eventStore'])
            } else {
                _0xecbcx8['header'] = Ext['Date']['format'](_0xecbcxd, _0xecbcx3['dateFormat'])
            };
            if (_0xecbcx3['unit'] === Ext.ux.Scheduler['util']['Date']['DAY'] && (!_0xecbcx3['increment'] || _0xecbcx3['increment'] === 1)) {
                _0xecbcx8['headerCls'] += ' sch-dayheadercell-' + _0xecbcxd['getDay']();
                if (this['calendar'] && this['calendar']['isWeekend'](_0xecbcxd)) {
                    _0xecbcx8['headerCls'] += ' sch-dayheadercell-nonworking'
                };
                if (Ext['Date']['clearTime'](_0xecbcxd, true) - _0xecbcx2 === 0) {
                    _0xecbcx8['headerCls'] += ' sch-dayheadercell-today'
                }
            };
            _0xecbcx5['push'](_0xecbcx8)
        });
        return _0xecbcx5
    },
    getDistanceBetweenDates: function(_0xecbcx2, _0xecbcx1) {
        return Math['round'](this['getPositionFromDate'](_0xecbcx1, true) - this['getPositionFromDate'](_0xecbcx2))
    },
    getPositionFromDate: function(_0xecbcx4, _0xecbcx3) {
        var _0xecbcxa = -1;
        if (this['isWeek']()) {
            var _0xecbcx1 = this['rowHeightVertical'];
            var _0xecbcx5 = this['getHeaders']();
            var _0xecbcx2 = this['timeAxis']['getStart']();
            var _0xecbcx9 = Ext.ux.Scheduler['util']['Date'];
            var _0xecbcx7 = _0xecbcx9['mergeDates'](_0xecbcx2, _0xecbcx4, _0xecbcx5[1]['unit']);
            _0xecbcxa = _0xecbcx9['getDurationInUnit'](_0xecbcx2, _0xecbcx7, _0xecbcx5[1]['unit'], true) * _0xecbcx1;
            if (_0xecbcxa === 0 && _0xecbcx3) {
                _0xecbcxa = this['calendarRowsAmount'] * _0xecbcx1
            }
        } else {
            var _0xecbcx6 = this['timeAxis']['getTickFromDate'](_0xecbcx4);
            if (_0xecbcx6 >= 0) {
                _0xecbcxa = this['getTickWidth']() * (_0xecbcx6 - this['timeAxis']['visibleTickStart'])
            }
        };
        return Math['round'](_0xecbcxa)
    },
    getDateFromPosition: function(_0xecbcx9, _0xecbcxd) {
        if (this['isWeek']()) {
            var _0xecbcx2 = this['getCalendarColumnDates']();
            if (!_0xecbcx2) {
                return null
            };
            var _0xecbcx7 = Math['min'](Math['floor'](Math['max'](_0xecbcx9[0], 0) / this['weekViewColumnWidth']), _0xecbcx2['length'] - 1),
                _0xecbcxa = _0xecbcx2[_0xecbcx7][0],
                _0xecbcx4 = this['timeAxis']['first'](),
                _0xecbcx5 = (_0xecbcx4['get']('end') - _0xecbcx4['get']('start')) / this['rowHeightVertical'],
                _0xecbcx6 = Ext.ux.Scheduler['util']['Date'],
                _0xecbcx8 = _0xecbcx6['add'](_0xecbcxa, _0xecbcx6.MILLI, Math['round'](_0xecbcx9[1] * _0xecbcx5));
            if (_0xecbcxd) {
                _0xecbcx8 = this['timeAxis'][_0xecbcxd + 'Date'](_0xecbcx8)
            };
            return _0xecbcx8
        } else {
            var _0xecbcx3 = _0xecbcx9 / this['getTickWidth']() + this['timeAxis']['visibleTickStart'],
                _0xecbcx1 = this['timeAxis']['getCount']();
            if (_0xecbcx3 < 0 || _0xecbcx3 > _0xecbcx1) {
                return null
            };
            return this['timeAxis']['getDateFromTick'](_0xecbcx3, _0xecbcxd)
        }
    },
    getSingleUnitInPixels: function(_0xecbcx1) {
        return Ext.ux.Scheduler['util']['Date']['getUnitToBaseUnitRatio'](this['timeAxis']['getUnit'](), _0xecbcx1) * this['getTickWidth']() / this['timeAxis']['increment']
    },
    getSnapPixelAmount: function() {
        if (this['snapToIncrement']) {
            var _0xecbcx1 = this['timeAxis']['getResolution']();
            return (_0xecbcx1['increment'] || 1) * this['getSingleUnitInPixels'](_0xecbcx1['unit'])
        } else {
            return 1
        }
    },
    getTickWidth: function() {
        return this['tickWidth']
    },
    setTickWidth: function(_0xecbcx2, _0xecbcx1) {
        this['originalTickWidth'] = _0xecbcx2;
        this['updateTickWidth'](_0xecbcx2);
        this['update'](null, _0xecbcx1)
    },
    updateTickWidth: function(_0xecbcx1) {
        this['tickWidth'] = _0xecbcx1;
        this[this['isHorizontal']() ? 'timeColumnWidth' : 'rowHeightVertical'] = _0xecbcx1
    },
    getTotalWidth: function() {
        return Math['round'](this['getTickWidth']() * this['timeAxis']['getVisibleTickTimeSpan']())
    },
    calculateTickWidth: function(_0xecbcx4) {
        var _0xecbcxd = this['forceFit'];
        var _0xecbcx7 = this['timeAxis'];
        var _0xecbcx5 = 0,
            _0xecbcx9 = _0xecbcx7['getUnit'](),
            _0xecbcx8 = Number['MAX_VALUE'],
            _0xecbcx3 = Ext.ux.Scheduler['util']['Date'];
        if (this['snapToIncrement']) {
            var _0xecbcx6 = _0xecbcx7['getResolution']();
            _0xecbcx8 = _0xecbcx3['getUnitToBaseUnitRatio'](_0xecbcx9, _0xecbcx6['unit']) * _0xecbcx6['increment']
        } else {
            var _0xecbcxa = _0xecbcx3['getMeasuringUnit'](_0xecbcx9);
            _0xecbcx8 = Math['min'](_0xecbcx8, _0xecbcx3['getUnitToBaseUnitRatio'](_0xecbcx9, _0xecbcxa))
        };
        if (!this['suppressFit']) {
            var _0xecbcx11 = this['isWeek']() ? _0xecbcx7['endTime'] - _0xecbcx7['startTime'] : _0xecbcx7['getVisibleTickTimeSpan'](),
                _0xecbcx2 = Math[_0xecbcxd ? 'floor' : 'round'](this['getAvailableWidth']() / _0xecbcx11);
            _0xecbcx5 = (_0xecbcxd || _0xecbcx4 < _0xecbcx2) ? _0xecbcx2 : _0xecbcx4;
            if (_0xecbcx8 > 0 && (!_0xecbcxd || _0xecbcx8 < 1)) {
                var _0xecbcx1 = Ext['versions']['touch'] && _0xecbcxd ? 'ceil' : (_0xecbcxd ? 'floor' : 'round');
                _0xecbcx5 = Math['round'](Math['max'](1, Math[_0xecbcx1](_0xecbcx8 * _0xecbcx5)) / _0xecbcx8)
            }
        } else {
            _0xecbcx5 = _0xecbcx4
        };
        return _0xecbcx5
    },
    getAvailableWidth: function() {
        return this['availableWidth']
    },
    setAvailableWidth: function(_0xecbcx1) {
        this['availableWidth'] = Math['max'](0, _0xecbcx1);
        if (this['availableWidth'] > 0) {
            var _0xecbcx2 = this['calculateTickWidth'](this['originalTickWidth']);
            if (_0xecbcx2 > 0 && _0xecbcx2 !== this['getTickWidth']()) {
                this['update']()
            }
        }
    },
    fitToAvailableWidth: function(_0xecbcx1) {
        var _0xecbcx2 = Math['floor'](this['availableWidth'] / this['timeAxis']['getVisibleTickTimeSpan']());
        this['setTickWidth'](_0xecbcx2, _0xecbcx1)
    },
    setForceFit: function(_0xecbcx1) {
        if (_0xecbcx1 !== this['forceFit']) {
            this['forceFit'] = _0xecbcx1;
            this['update']()
        }
    },
    setSnapToIncrement: function(_0xecbcx1) {
        if (_0xecbcx1 !== this['snapToIncrement']) {
            this['snapToIncrement'] = _0xecbcx1;
            this['update']()
        }
    },
    getViewRowHeight: function() {
        var _0xecbcx1 = this['isHorizontal']() ? this['rowHeightHorizontal'] : this['rowHeightVertical'];
        if (!_0xecbcx1) {
            throw new Error('rowHeight info not available')
        };
        return _0xecbcx1
    },
    setViewRowHeight: function(_0xecbcx5, _0xecbcx1) {
        var _0xecbcx2 = 'rowHeight' + Ext['String']['capitalize'](this['mode']);
        if (this[_0xecbcx2] != _0xecbcx5) {
            this[_0xecbcx2] = _0xecbcx5;
            if (this['isHorizontal']()) {
                if (!_0xecbcx1) {
                    this['fireEvent']('update', this)
                }
            } else {
                this['setTickWidth'](_0xecbcx5, _0xecbcx1)
            }
        }
    },
    setViewColumnWidth: function(_0xecbcx2, _0xecbcx1) {
        if (this['isHorizontal']()) {
            this['setTickWidth'](_0xecbcx2, _0xecbcx1)
        } else {
            if (this['isVertical']()) {
                this['resourceColumnWidth'] = _0xecbcx2
            } else {
                if (this['isWeek']()) {
                    this['weekViewColumnWidth'] = _0xecbcx2
                }
            }
        };
        if (!_0xecbcx1) {
            this['fireEvent']('columnwidthchange', this, _0xecbcx2)
        }
    },
    getHeaders: function() {
        if (this['headers']) {
            return this['headers']
        };
        var _0xecbcx1 = this['headerConfig'];
        this['mainHeader'] = _0xecbcx1['top'] ? 1 : 0;
        return this['headers'] = []['concat'](_0xecbcx1['top'] || [], _0xecbcx1['middle'] || [], _0xecbcx1['bottom'] || [])
    },
    getMainHeader: function() {
        return this['getHeaders']()[this['mainHeader']]
    },
    getBottomHeader: function() {
        var _0xecbcx1 = this['getHeaders']();
        return _0xecbcx1[_0xecbcx1['length'] - 1]
    },
    getLowestHeader: function() {
        return 'bottom' in this['headerConfig'] ? 'bottom' : 'middle'
    },
    getMajorHeaderName: function() {
        var _0xecbcx1 = this['headerConfig'];
        if (_0xecbcx1['bottom']) {
            return 'middle'
        };
        if (_0xecbcx1['top']) {
            return 'top'
        };
        return null
    },
    isMajorTick: function(_0xecbcx1) {
        var _0xecbcx2 = this['getMajorHeaderName']();
        return _0xecbcx2 && this['headersDatesCache'][_0xecbcx2] && this['headersDatesCache'][_0xecbcx2][_0xecbcx1['getTime']()] || false
    },
    forEachInterval: function(_0xecbcx2, _0xecbcx1, _0xecbcx3) {
        _0xecbcx3 = _0xecbcx3 || this;
        var _0xecbcx5 = this['headerConfig'];
        if (!_0xecbcx5) {
            return
        };
        if (_0xecbcx2 === 'top' || (_0xecbcx2 === 'middle' && _0xecbcx5['bottom'])) {
            var _0xecbcx4 = _0xecbcx5[_0xecbcx2];
            this['timeAxis']['forEachAuxInterval'](_0xecbcx4['unit'], _0xecbcx4['increment'], _0xecbcx1, _0xecbcx3)
        } else {
            this['timeAxis']['each'](function(_0xecbcx9, _0xecbcx6) {
                return _0xecbcx1['call'](_0xecbcx3, _0xecbcx9['data']['start'], _0xecbcx9['data']['end'], _0xecbcx6)
            })
        }
    },
    forEachMainInterval: function(_0xecbcx1, _0xecbcx2) {
        this['forEachInterval']('middle', _0xecbcx1, _0xecbcx2)
    },
    consumeViewPreset: function(_0xecbcx1) {
        this['headers'] = null;
        Ext.apply(this, {
            headerConfig: _0xecbcx1['headerConfig'],
            columnLinesFor: _0xecbcx1['columnLinesFor'] || 'middle',
            rowHeightHorizontal: _0xecbcx1['rowHeight'],
            tickWidth: this['isHorizontal']() ? _0xecbcx1['timeColumnWidth'] : _0xecbcx1['timeRowHeight'] || _0xecbcx1['timeColumnWidth'] || 60,
            timeColumnWidth: _0xecbcx1['timeColumnWidth'],
            rowHeightVertical: _0xecbcx1['timeRowHeight'] || _0xecbcx1['timeColumnWidth'] || 60,
            timeAxisColumnWidth: _0xecbcx1['timeAxisColumnWidth'],
            resourceColumnWidth: _0xecbcx1['resourceColumnWidth'] || 100
        });
        this['originalTickWidth'] = this['getTickWidth']()
    },
    setEventStore: function(_0xecbcx1) {
        this['eventStore'] = _0xecbcx1
    },
    setCalendar: function(_0xecbcx1) {
        if (_0xecbcx1 !== this['calendar']) {
            this['calendar'] = _0xecbcx1;
            if (_0xecbcx1) {
                this['update']()
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.mixin.Zoomable', {
    zoomOnMouseWheel: true,
    preventScrollZoom: false,
    zoomLevels: [{
        width: 40,
        increment: 1,
        resolution: 1,
        preset: 'manyYears',
        resolutionUnit: 'YEAR'
    }, {
        width: 80,
        increment: 1,
        resolution: 1,
        preset: 'manyYears',
        resolutionUnit: 'YEAR'
    }, {
        width: 30,
        increment: 1,
        resolution: 1,
        preset: 'year',
        resolutionUnit: 'MONTH'
    }, {
        width: 50,
        increment: 1,
        resolution: 1,
        preset: 'year',
        resolutionUnit: 'MONTH'
    }, {
        width: 100,
        increment: 1,
        resolution: 1,
        preset: 'year',
        resolutionUnit: 'MONTH'
    }, {
        width: 200,
        increment: 1,
        resolution: 1,
        preset: 'year',
        resolutionUnit: 'MONTH'
    }, {
        width: 100,
        increment: 1,
        resolution: 7,
        preset: 'monthAndYear',
        resolutionUnit: 'DAY'
    }, {
        width: 30,
        increment: 1,
        resolution: 1,
        preset: 'weekDateAndMonth',
        resolutionUnit: 'DAY'
    }, {
        width: 35,
        increment: 1,
        resolution: 1,
        preset: 'weekAndMonth',
        resolutionUnit: 'DAY'
    }, {
        width: 50,
        increment: 1,
        resolution: 1,
        preset: 'weekAndMonth',
        resolutionUnit: 'DAY'
    }, {
        width: 20,
        increment: 1,
        resolution: 1,
        preset: 'weekAndDayLetter'
    }, {
        width: 50,
        increment: 1,
        resolution: 1,
        preset: 'weekAndDay',
        resolutionUnit: 'HOUR'
    }, {
        width: 100,
        increment: 1,
        resolution: 1,
        preset: 'weekAndDay',
        resolutionUnit: 'HOUR'
    }, {
        width: 50,
        increment: 6,
        resolution: 30,
        preset: 'hourAndDay',
        resolutionUnit: 'MINUTE'
    }, {
        width: 100,
        increment: 6,
        resolution: 30,
        preset: 'hourAndDay',
        resolutionUnit: 'MINUTE'
    }, {
        width: 60,
        increment: 2,
        resolution: 30,
        preset: 'hourAndDay',
        resolutionUnit: 'MINUTE'
    }, {
        width: 60,
        increment: 1,
        resolution: 30,
        preset: 'hourAndDay',
        resolutionUnit: 'MINUTE'
    }, {
        width: 30,
        increment: 15,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 60,
        increment: 15,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 130,
        increment: 15,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 60,
        increment: 5,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 100,
        increment: 5,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 50,
        increment: 2,
        resolution: 1,
        preset: 'minuteAndHour'
    }, {
        width: 30,
        increment: 10,
        resolution: 5,
        preset: 'secondAndMinute'
    }, {
        width: 60,
        increment: 10,
        resolution: 5,
        preset: 'secondAndMinute'
    }, {
        width: 130,
        increment: 5,
        resolution: 5,
        preset: 'secondAndMinute'
    }],
    minZoomLevel: null,
    maxZoomLevel: null,
    visibleZoomFactor: 5,
    zoomKeepsOriginalTimespan: false,
    initializeZooming: function() {
        this['zoomLevels'] = this['zoomLevels']['slice']();
        this['setMinZoomLevel'](this['minZoomLevel'] || 0);
        this['setMaxZoomLevel'](this['maxZoomLevel'] !== null ? this['maxZoomLevel'] : this['zoomLevels']['length'] - 1);
        this['on']('viewready', this['onTimelineReady'], this)
    },
    getZoomLevelUnit: function(_0xecbcx1) {
        return Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0xecbcx1['preset'])['getBottomHeader']()['unit']
    },
    getMilliSecondsPerPixelForZoomLevel: function(_0xecbcx5, _0xecbcx1) {
        var _0xecbcx2 = Ext.ux.Scheduler['util']['Date'];
        return Math['round']((_0xecbcx2['add'](new Date(1, 0, 1), this['getZoomLevelUnit'](_0xecbcx5), _0xecbcx5['increment']) - new Date(1, 0, 1)) / (_0xecbcx1 ? _0xecbcx5['width'] : _0xecbcx5['actualWidth'] || _0xecbcx5['width']))
    },
    presetToZoomLevel: function(_0xecbcx2) {
        var _0xecbcx1 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0xecbcx2);
        return {
            preset: _0xecbcx2,
            increment: _0xecbcx1['getBottomHeader']()['increment'] || 1,
            resolution: _0xecbcx1['timeResolution']['increment'],
            resolutionUnit: _0xecbcx1['timeResolution']['unit'],
            width: _0xecbcx1['timeColumnWidth']
        }
    },
    calculateCurrentZoomLevel: function() {
        var _0xecbcx9 = this['presetToZoomLevel'](this['viewPreset']),
            _0xecbcx3 = Number['MAX_VALUE'],
            _0xecbcx2 = this['timeAxisViewModel'],
            _0xecbcx6 = _0xecbcx2['timeColumnWidth'];
        _0xecbcx9['width'] = _0xecbcx6;
        _0xecbcx9['increment'] = _0xecbcx2['getBottomHeader']()['increment'] || 1;
        for (var _0xecbcx5 = 0, _0xecbcx1 = this['zoomLevels']['length']; _0xecbcx5 < _0xecbcx1; _0xecbcx5++) {
            var _0xecbcx4 = this['zoomLevels'][_0xecbcx5];
            if (_0xecbcx4['preset'] !== _0xecbcx9['preset']) {
                continue
            };
            var _0xecbcx7 = Math['abs'](_0xecbcx4['width'] - _0xecbcx6);
            if (_0xecbcx7 < _0xecbcx3) {
                _0xecbcx3 = _0xecbcx7;
                _0xecbcx9['actualWidth'] = _0xecbcx4['actualWidth'];
                _0xecbcx9['width'] = _0xecbcx4['width']
            }
        };
        return _0xecbcx9
    },
    getCurrentZoomLevelIndex: function() {
        var _0xecbcx6 = this['calculateCurrentZoomLevel']();
        var _0xecbcx2 = this['getMilliSecondsPerPixelForZoomLevel'](_0xecbcx6);
        var _0xecbcx4 = this['zoomLevels'];
        for (var _0xecbcx5 = 0; _0xecbcx5 < _0xecbcx4['length']; _0xecbcx5++) {
            var _0xecbcx3 = this['getMilliSecondsPerPixelForZoomLevel'](_0xecbcx4[_0xecbcx5]);
            if (_0xecbcx3 == _0xecbcx2) {
                return _0xecbcx5
            };
            if (_0xecbcx5 === 0 && _0xecbcx2 > _0xecbcx3) {
                return -0.5
            };
            if (_0xecbcx5 == _0xecbcx4['length'] - 1 && _0xecbcx2 < _0xecbcx3) {
                return _0xecbcx4['length'] - 1 + 0.5
            };
            var _0xecbcx1 = this['getMilliSecondsPerPixelForZoomLevel'](_0xecbcx4[_0xecbcx5 + 1]);
            if (_0xecbcx3 > _0xecbcx2 && _0xecbcx2 > _0xecbcx1) {
                return _0xecbcx5 + 0.5
            }
        };
        throw new Error('Can\'t find current zoom level index ')
    },
    setMaxZoomLevel: function(_0xecbcx1) {
        if (_0xecbcx1 < 0 || _0xecbcx1 >= this['zoomLevels']['length']) {
            throw new Error('Invalid range for `setMinZoomLevel`')
        };
        this['maxZoomLevel'] = _0xecbcx1
    },
    setMinZoomLevel: function(_0xecbcx1) {
        if (_0xecbcx1 < 0 || _0xecbcx1 >= this['zoomLevels']['length']) {
            throw new Error('Invalid range for `setMinZoomLevel`')
        };
        this['minZoomLevel'] = _0xecbcx1
    },
    zoomToLevel: function(_0xecbcx1, _0xecbcxd, _0xecbcxf) {
        _0xecbcx1 = Ext['Number']['constrain'](_0xecbcx1, this['minZoomLevel'], this['maxZoomLevel']);
        _0xecbcxf = _0xecbcxf || {};
        var _0xecbcx2 = this['calculateCurrentZoomLevel']();
        var _0xecbcxc = this['getMilliSecondsPerPixelForZoomLevel'](_0xecbcx2);
        var _0xecbcx8 = this['zoomLevels'][_0xecbcx1];
        var _0xecbcx5 = this['getMilliSecondsPerPixelForZoomLevel'](_0xecbcx8);
        if (this['getMode']() !== 'horizontal' || (_0xecbcxc == _0xecbcx5 && !_0xecbcxd)) {
            return null
        };
        var _0xecbcx9 = this;
        _0xecbcx9['fireEvent']('beforezoomchange', _0xecbcx9, _0xecbcx1);
        var _0xecbcx7 = this['getSchedulingView']();
        if (!this['rendered']) {
            this['on']('afterlayout', Ext['Function']['bind'](this['zoomToLevel'], this, [_0xecbcx1, _0xecbcxd, _0xecbcxf]), null, {
                single: true
            });
            return
        };
        var _0xecbcxe = _0xecbcx7['getOuterEl']();
        var _0xecbcxa = this['isVertical']();
        var _0xecbcx3 = _0xecbcxf['centerDate'] || (_0xecbcxd ? new Date((_0xecbcxd['start']['getTime']() + _0xecbcxd['end']['getTime']()) / 2) : this['getViewportCenterDateCached']());
        var _0xecbcx6 = _0xecbcxa ? _0xecbcx7['getViewContainerHeight']() : _0xecbcxe['getWidth']();
        var _0xecbcx11 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0xecbcx8['preset'])['clone']();
        _0xecbcx11['name'] = _0xecbcx8['preset'];
        var _0xecbcx4 = _0xecbcx11['getBottomHeader']();
        _0xecbcxd = this['calculateOptimalDateRange'](_0xecbcx3, _0xecbcx6, _0xecbcx8, _0xecbcxd);
        _0xecbcx11[_0xecbcxa ? 'timeRowHeight' : 'timeColumnWidth'] = _0xecbcxf['customWidth'] || _0xecbcx8['width'];
        _0xecbcx4['increment'] = _0xecbcx8['increment'];
        this['isZooming'] = true;
        _0xecbcx11['increment'] = _0xecbcx8['increment'];
        _0xecbcx11['timeResolution']['unit'] = Ext.ux.Scheduler['util']['Date']['getUnitByName'](_0xecbcx8['resolutionUnit'] || _0xecbcx11['timeResolution']['unit'] || _0xecbcx4['unit']);
        _0xecbcx11['timeResolution']['increment'] = _0xecbcx8['resolution'];
        this['setViewPreset'](_0xecbcx11, _0xecbcxd['start'] || this['getStart'](), _0xecbcxd['end'] || this['getEnd'](), false, {
            centerDate: _0xecbcx3
        });
        _0xecbcx8['actualWidth'] = this['timeAxisViewModel']['getTickWidth']();
        _0xecbcx9['isZooming'] = false;
        _0xecbcx9['fireEvent']('zoomchange', _0xecbcx9, _0xecbcx1);
        return _0xecbcx1
    },
    setZoomLevel: function() {
        this['zoomToLevel']['apply'](this, arguments)
    },
    zoomToSpan: function(_0xecbcx10, _0xecbcx14) {
        var _0xecbcxf = this['getSchedulingView']();
        _0xecbcx14 = _0xecbcx14 || {};
        if (_0xecbcx14['leftMargin'] || _0xecbcx14['rightMargin']) {
            _0xecbcx14['adjustStart'] = 0;
            _0xecbcx14['adjustEnd'] = 0
        };
        Ext['applyIf'](_0xecbcx14, {
            leftMargin: 0,
            rightMargin: 0
        });
        if (!this['rendered']) {
            this['on']('afterlayout', Ext['Function']['bind'](this['zoomToSpan'], this, [_0xecbcx10, _0xecbcx14]), null, {
                single: true
            });
            return
        };
        if (_0xecbcx10['start'] && _0xecbcx10['end']) {
            var _0xecbcx9 = _0xecbcx10['start'],
                _0xecbcx3 = _0xecbcx10['end'],
                _0xecbcx4 = _0xecbcx14['adjustStart'] >= 0 && _0xecbcx14['adjustEnd'] >= 0;
            if (_0xecbcx4) {
                _0xecbcx9 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx9, this['timeAxis']['mainUnit'], -_0xecbcx14['adjustStart']);
                _0xecbcx3 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx3, this['timeAxis']['mainUnit'], _0xecbcx14['adjustEnd'])
            };
            if (_0xecbcx9 <= _0xecbcx3) {
                var _0xecbcx1 = _0xecbcxf['getTimeAxisViewModel']()['getAvailableWidth']();
                var _0xecbcxe = Math['floor'](this['getCurrentZoomLevelIndex']());
                if (_0xecbcxe == -1) {
                    _0xecbcxe = 0
                };
                var _0xecbcx12 = this['zoomLevels'];
                var _0xecbcx2 = _0xecbcx3 - _0xecbcx9 || 1,
                    _0xecbcx8 = this['getMilliSecondsPerPixelForZoomLevel'](_0xecbcx12[_0xecbcxe], true),
                    _0xecbcx11 = _0xecbcx2 / _0xecbcx8 + _0xecbcx14['leftMargin'] + _0xecbcx14['rightMargin'] > _0xecbcx1 ? -1 : 1,
                    _0xecbcx6 = _0xecbcxe + _0xecbcx11;
                var _0xecbcxb, _0xecbcx7 = null;
                while (_0xecbcx6 >= 0 && _0xecbcx6 <= _0xecbcx12['length'] - 1) {
                    _0xecbcxb = _0xecbcx12[_0xecbcx6];
                    _0xecbcx8 = this['getMilliSecondsPerPixelForZoomLevel'](_0xecbcxb, true);
                    var _0xecbcx17 = _0xecbcx2 / _0xecbcx8 + _0xecbcx14['leftMargin'] + _0xecbcx14['rightMargin'];
                    if (_0xecbcx11 == -1) {
                        if (_0xecbcx17 <= _0xecbcx1) {
                            _0xecbcx7 = _0xecbcx6;
                            break
                        }
                    } else {
                        if (_0xecbcx17 <= _0xecbcx1) {
                            if (_0xecbcxe !== _0xecbcx6 - _0xecbcx11) {
                                _0xecbcx7 = _0xecbcx6
                            }
                        } else {
                            break
                        }
                    };
                    _0xecbcx6 += _0xecbcx11
                };
                _0xecbcx7 = _0xecbcx7 !== null ? _0xecbcx7 : _0xecbcx6 - _0xecbcx11;
                _0xecbcxb = _0xecbcx12[_0xecbcx7];
                var _0xecbcx5 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0xecbcxb['preset'])['getBottomHeader']()['unit'];
                if (_0xecbcx14['leftMargin'] || _0xecbcx14['rightMargin']) {
                    _0xecbcx9 = new Date(_0xecbcx9['getTime']() - _0xecbcx8 * _0xecbcx14['leftMargin']);
                    _0xecbcx3 = new Date(_0xecbcx3['getTime']() + _0xecbcx8 * _0xecbcx14['rightMargin'])
                };
                var _0xecbcx15 = Ext.ux.Scheduler['util']['Date']['getDurationInUnit'](_0xecbcx9, _0xecbcx3, _0xecbcx5, true) / _0xecbcxb['increment'];
                if (_0xecbcx15 === 0) {
                    return
                };
                var _0xecbcxa = Math['floor'](_0xecbcx1 / _0xecbcx15);
                var _0xecbcxd = new Date((_0xecbcx9['getTime']() + _0xecbcx3['getTime']()) / 2);
                var _0xecbcxc;
                if (_0xecbcx4) {
                    _0xecbcxc = {
                        start: _0xecbcx9,
                        end: _0xecbcx3
                    }
                } else {
                    _0xecbcxc = this['calculateOptimalDateRange'](_0xecbcxd, _0xecbcx1, _0xecbcxb)
                };
                return this['zoomToLevel'](_0xecbcx7, _0xecbcxc, {
                    customWidth: _0xecbcxa,
                    centerDate: _0xecbcxd
                })
            }
        };
        return null
    },
    zoomIn: function(_0xecbcx1) {
        _0xecbcx1 = _0xecbcx1 || 1;
        var _0xecbcx2 = this['getCurrentZoomLevelIndex']();
        if (_0xecbcx2 >= this['zoomLevels']['length'] - 1) {
            return null
        };
        return this['zoomToLevel'](Math['floor'](_0xecbcx2) + _0xecbcx1)
    },
    zoomOut: function(_0xecbcx1) {
        _0xecbcx1 = _0xecbcx1 || 1;
        var _0xecbcx2 = this['getCurrentZoomLevelIndex']();
        if (_0xecbcx2 <= 0) {
            return null
        };
        return this['zoomToLevel'](Math['ceil'](_0xecbcx2) - _0xecbcx1)
    },
    zoomInFull: function() {
        return this['zoomToLevel'](this['maxZoomLevel'])
    },
    zoomOutFull: function() {
        return this['zoomToLevel'](this['minZoomLevel'])
    },
    calculateOptimalDateRange: function(_0xecbcx5, _0xecbcx7, _0xecbcx4, _0xecbcx8) {
        if (_0xecbcx8) {
            return _0xecbcx8
        };
        var _0xecbcx9 = this['timeAxis'];
        if (this['zoomKeepsOriginalTimespan']) {
            return {
                start: _0xecbcx9['getStart'](),
                end: _0xecbcx9['getEnd']()
            }
        };
        var _0xecbcx2 = Ext.ux.Scheduler['util']['Date'];
        var _0xecbcxa = this['getZoomLevelUnit'](_0xecbcx4);
        var _0xecbcx3 = Math['ceil'](_0xecbcx7 / _0xecbcx4['width'] * _0xecbcx4['increment'] * this['visibleZoomFactor'] / 2);
        var _0xecbcx1 = _0xecbcx2['add'](_0xecbcx5, _0xecbcxa, -_0xecbcx3);
        var _0xecbcx6 = _0xecbcx2['add'](_0xecbcx5, _0xecbcxa, _0xecbcx3);
        return {
            start: _0xecbcx9['floorDate'](_0xecbcx1, false, _0xecbcxa, _0xecbcx4['increment']),
            end: _0xecbcx9['ceilDate'](_0xecbcx6, false, _0xecbcxa, _0xecbcx4['increment'])
        }
    },
    onTimelineReady: function() {
        if (this['zoomOnMouseWheel']) {
            this['getSchedulingView']()['getEl']()['on']('wheel', this['onWheel'], this, {
                capture: true
            });
            this['on']('destroy', function() {
                clearTimeout(this['scrollWheelBlockTimeout'])
            })
        }
    },
    onWheel: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        if (_0xecbcx2['ctrlKey']) {
            _0xecbcx2['preventDefault']();
            if (!_0xecbcx1['preventScrollZoom']) {
                if (_0xecbcx2['browserEvent']['deltaY'] > 0) {
                    _0xecbcx1['zoomOut']()
                } else {
                    if (_0xecbcx2['browserEvent']['deltaY'] < 0) {
                        _0xecbcx1['zoomIn']()
                    }
                };
                _0xecbcx1['preventScrollZoom'] = true;
                _0xecbcx1['scrollWheelBlockTimeout'] = setTimeout(function() {
                    _0xecbcx1['preventScrollZoom'] = false
                }, 30)
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.mixin.AbstractTimelinePanel', {
    requires: ['Ext.ux.Scheduler.data.TimeAxis', 'Ext.ux.Scheduler.view.model.TimeAxis', 'Ext.ux.Scheduler.feature.ColumnLines', 'Ext.ux.Scheduler.preset.Manager'],
    mixins: ['Ext.ux.Scheduler.mixin.Zoomable'],
    snapToIncrement: false,
    readOnly: false,
    forceFit: false,
    eventResizeHandles: 'both',
    timeAxis: null,
    autoAdjustTimeAxis: true,
    timeAxisViewModel: null,
    crudManager: null,
    viewPreset: 'weekAndDay',
    trackHeaderOver: true,
    startDate: null,
    endDate: null,
    startTime: 0,
    endTime: 24,
    columnLines: true,
    getDateConstraints: Ext['emptyFn'],
    snapRelativeToEventStartDate: false,
    trackMouseOver: false,
    readRowHeightFromPreset: true,
    eventBorderWidth: 1,
    cachedCenterDate: null,
    cellBorderWidth: 1,
    cellTopBorderWidth: 1,
    cellBottomBorderWidth: 1,
    renderers: null,
    getMode: function() {
        return this['mode']
    },
    isHorizontal: function() {
        return this['getMode']() === 'horizontal'
    },
    isVertical: function() {
        return this['getMode']() === 'vertical'
    },
    isWeekView: function() {
        return this['getMode']() === 'weekview'
    },
    _initializeTimelinePanel: function() {
        if (this['mode']) {
            if (this['mode'] === 'calendar') {
                this['mode'] = 'weekview'
            }
        } else {
            this['mode'] = 'horizontal'
        };
        this['applyViewPreset'](this['viewPreset']);
        if (this['isWeekView']()) {
            if (!this['viewPreset']['headerConfig']['middle']['splitUnit']) {
                this['_oldViewPresetArgs'] = [this['viewPreset']];
                this['viewPreset'] = this['calendarViewPreset'] || 'week'
            }
        };
        this['initializeZooming']();
        this['on']('viewchange', this['clearCenterDateCache'], this);
        this['on']('viewready', this['setupClearCenterDateCache'], this);
        this['renderers'] = [];
        if (this['readRowHeightFromPreset']) {
            this['readRowHeightFromPreset'] = !this['rowHeight']
        };
        if (!(this['timeAxis'] instanceof Ext.ux.Scheduler['data']['TimeAxis'])) {
            this['timeAxis'] = Ext['create'](Ext['applyIf'](this['timeAxis'] || {}, {
                xclass: 'Ext.ux.Scheduler.data.TimeAxis',
                autoAdjust: this['autoAdjustTimeAxis'],
                mode: this['isWeekView']() ? 'week' : 'plain'
            }))
        };
        if (!(this['timeAxisViewModel'] instanceof Ext.ux.Scheduler['view']['model']['TimeAxis'])) {
            this['timeAxisViewModel'] = Ext['create'](Ext['applyIf'](this['timeAxisViewModel'] || {}, {
                xclass: 'Ext.ux.Scheduler.view.model.TimeAxis',
                mode: this['mode'],
                snapToIncrement: this['snapToIncrement'],
                forceFit: this['forceFit'],
                timeAxis: this['timeAxis'],
                eventStore: this['getEventStore'](),
                viewPreset: this['viewPreset']
            }))
        };
        this['timeAxisViewModel']['on']('update', this['onTimeAxisViewModelUpdate'], this);
        this['timeAxisViewModel']['refCount']++;
        this['on']('destroy', this['onPanelDestroyed'], this);
        var _0xecbcx1;
        if (this['isHorizontal']()) {
            _0xecbcx1 = ['sch-horizontal']
        } else {
            if (this['isVertical']()) {
                _0xecbcx1 = ['sch-vertical', 'sch-vertical-resource']
            } else {
                if (this['isWeekView']()) {
                    _0xecbcx1 = ['sch-vertical', 'sch-calendar']
                }
            }
        };
        this['addCls']([]['concat']['apply'](['sch-timelinepanel'], _0xecbcx1))
    },
    applyViewPreset: function(_0xecbcx2) {
        var _0xecbcx3;
        if (Ext['isString'](_0xecbcx2)) {
            _0xecbcx3 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0xecbcx2);
            if (!_0xecbcx3) {
                throw 'You must define a valid view preset object. See Ext.ux.Scheduler.preset.Manager class for reference'
            }
        } else {
            if (Ext['isObject'](_0xecbcx2)) {
                var _0xecbcx5 = _0xecbcx2['name'] && Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0xecbcx2['name']);
                if (_0xecbcx5) {
                    _0xecbcx3 = new Ext.ux.Scheduler['preset'].ViewPreset(Ext['applyIf'](_0xecbcx2, _0xecbcx5))
                } else {
                    var _0xecbcx1 = _0xecbcx2['name'] || ('preset' + Ext.ux.Scheduler['preset']['Manager']['getCount']());
                    Ext.ux.Scheduler['preset']['Manager']['registerPreset'](_0xecbcx1, _0xecbcx2);
                    _0xecbcx3 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0xecbcx1)
                }
            }
        };
        this['viewPreset'] = _0xecbcx3
    },
    onTimeAxisViewModelUpdate: function() {
        var _0xecbcx1 = this['getSchedulingView']();
        if (_0xecbcx1 && _0xecbcx1['viewReady']) {
            _0xecbcx1['refreshKeepingScroll']();
            this['fireEvent']('viewchange', this)
        }
    },
    onPanelDestroyed: function() {
        var _0xecbcx1 = this['timeAxisViewModel'];
        _0xecbcx1['un']('update', this['onTimeAxisViewModelUpdate'], this);
        _0xecbcx1['refCount']--;
        if (_0xecbcx1['refCount'] <= 0) {
            _0xecbcx1['destroy']()
        }
    },
    getSchedulingView: function() {
        throw 'Abstract method call'
    },
    setReadOnly: function(_0xecbcx1) {
        this['getSchedulingView']()['setReadOnly'](_0xecbcx1)
    },
    isReadOnly: function() {
        return this['getSchedulingView']()['isReadOnly']()
    },
    setupClearCenterDateCache: function() {
        this['mon'](this['getSchedulingView']()['getScrollable'](), 'scroll', this['clearCenterDateCache'], this)
    },
    getViewportCenterDateCached: function() {
        if (this['cachedCenterDate']) {
            return this['cachedCenterDate']
        };
        return this['cachedCenterDate'] = this['getViewportCenterDate']()
    },
    clearCenterDateCache: function(_0xecbcx5, _0xecbcx4, _0xecbcx3) {
        var _0xecbcx6 = this['isHorizontal'](),
            _0xecbcx1 = this['viewPresetActiveScroll'];
        var _0xecbcx2 = _0xecbcx1 && (_0xecbcx6 ? _0xecbcx4 === _0xecbcx1['left'] : _0xecbcx3 == _0xecbcx1['top']);
        if (!_0xecbcx2) {
            this['cachedCenterDate'] = null;
            this['viewPresetActiveScroll'] = null
        }
    },
    switchViewPreset: function() {
        this['setViewPreset']['apply'](this, arguments)
    },
    setViewPreset: function(_0xecbcxf, _0xecbcx1, _0xecbcx3, _0xecbcx6, _0xecbcxc) {
        _0xecbcxc = _0xecbcxc || {};
        var _0xecbcx2 = _0xecbcxc['centerDate'],
            _0xecbcx4 = this['timeAxis'],
            _0xecbcxa = this['getSchedulingView']();
        if (typeof _0xecbcxf === 'string') {
            _0xecbcxf = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0xecbcxf)
        };
        if (!_0xecbcxf) {
            throw new Error('View preset not found')
        };
        if (this['fireEvent']('beforeviewchange', this, _0xecbcxf, _0xecbcx1, _0xecbcx3) !== false) {
            this['viewPreset'] = _0xecbcxf['name'];
            var _0xecbcx11 = this['isHorizontal'](),
                _0xecbcxd = this['isVertical']();
            if (!(_0xecbcx6 && _0xecbcx4['isConfigured'])) {
                var _0xecbcx5 = {
                    weekStartDay: this['weekStartDay'] !== undefined ? this['weekStartDay'] : (this['L'] ? this.L('weekStartDay') : 1),
                    startTime: this['startTime'],
                    endTime: this['endTime']
                };
                if (_0xecbcx6 || !this['rendered']) {
                    if (_0xecbcx4['getCount']() === 0 || _0xecbcx1) {
                        _0xecbcx5['start'] = _0xecbcx1 || new Date();
                        _0xecbcx5['end'] = _0xecbcx3
                    }
                } else {
                    if (_0xecbcx1) {
                        _0xecbcx5['start'] = _0xecbcx1;
                        _0xecbcx5['end'] = _0xecbcx3;
                        if (!_0xecbcx2 && _0xecbcx3) {
                            if (this['infiniteScroll'] && _0xecbcxa['cachedScrollDate'] && _0xecbcxa['cachedScrollDateIsCentered']) {
                                _0xecbcx2 = _0xecbcxa['cachedScrollDate']
                            } else {
                                _0xecbcx2 = new Date((_0xecbcx1['getTime']() + _0xecbcx3['getTime']()) / 2)
                            }
                        }
                    } else {
                        _0xecbcx5['start'] = _0xecbcx4['getStart']();
                        _0xecbcx5['end'] = _0xecbcx3 || _0xecbcx4['getEnd']();
                        if (!_0xecbcx2) {
                            if (this['infiniteScroll'] && _0xecbcxa['cachedScrollDate'] && _0xecbcxa['cachedScrollDateIsCentered']) {
                                _0xecbcx2 = _0xecbcxa['cachedScrollDate']
                            } else {
                                _0xecbcx2 = this['getViewportCenterDateCached']()
                            }
                        }
                    }
                };
                _0xecbcx4['consumeViewPreset'](_0xecbcxf);
                _0xecbcx4['reconfigure'](_0xecbcx5, true);
                this['timeAxisViewModel']['reconfigure']({
                    viewPreset: this['viewPreset'],
                    headerConfig: _0xecbcxf['headerConfig'],
                    columnLinesFor: _0xecbcxf['columnLinesFor'] || 'middle',
                    rowHeightHorizontal: this['readRowHeightFromPreset'] ? _0xecbcxf['rowHeight'] : (this['rowHeight'] || this['timeAxisViewModel']['getViewRowHeight']()),
                    tickWidth: _0xecbcx11 ? _0xecbcxf['timeColumnWidth'] : _0xecbcxf['timeRowHeight'] || _0xecbcxf['timeColumnWidth'] || 60,
                    timeColumnWidth: _0xecbcxf['timeColumnWidth'],
                    rowHeightVertical: _0xecbcxf['timeRowHeight'] || _0xecbcxf['timeColumnWidth'] || 60,
                    timeAxisColumnWidth: _0xecbcxf['timeAxisColumnWidth'],
                    resourceColumnWidth: this['resourceColumnWidth'] || _0xecbcxf['resourceColumnWidth'] || 100
                })
            };
            _0xecbcxa['setDisplayDateFormat'](_0xecbcxf['displayDateFormat']);
            if (_0xecbcxd) {
                _0xecbcxa['setColumnWidth'](this['resourceColumnWidth'] || _0xecbcxf['resourceColumnWidth'] || 100, true)
            };
            var _0xecbcxe = _0xecbcxa['getOuterEl']();
            if (!_0xecbcxc['notScroll'] && _0xecbcxe && this['getView']()['el']) {
                if (_0xecbcx2) {
                    this['cachedCenterDate'] = _0xecbcx2;
                    var _0xecbcx8 = null,
                        _0xecbcx7 = null;
                    if (_0xecbcxd) {
                        _0xecbcx7 = Math['max'](Math['floor'](_0xecbcxa['getCoordinateFromDate'](_0xecbcx2, true) - _0xecbcxa['getViewContainerHeight']() / 2), 0);
                        this['viewPresetActiveScroll'] = {
                            top: _0xecbcx7
                        };
                        _0xecbcxa['scrollVerticallyTo'](_0xecbcx7)
                    } else {
                        _0xecbcx8 = Math['max'](Math['floor'](_0xecbcxa['getCoordinateFromDate'](_0xecbcx2, true) - _0xecbcxe['getWidth']() / 2), 0);
                        this['viewPresetActiveScroll'] = {
                            left: _0xecbcx8
                        };
                        if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
                            var _0xecbcx9 = _0xecbcxa['up']('timelinegrid,timelinetree')['normalScrollbarScroller'];
                            _0xecbcx9 && _0xecbcx9['scrollTo'](_0xecbcx8)
                        };
                        _0xecbcxa['headerCt']['scrollTo'](_0xecbcx8);
                        _0xecbcxa['scrollTo'](_0xecbcx8)
                    }
                } else {
                    if (_0xecbcx11) {
                        _0xecbcxa['scrollHorizontallyTo'](0)
                    } else {
                        _0xecbcxa['scrollVerticallyTo'](0)
                    }
                }
            }
        }
    },
    getViewPreset: function() {
        return this['viewPreset']
    },
    getStart: function() {
        return this['getStartDate']()
    },
    getStartDate: function() {
        return this['timeAxis']['getStart']()
    },
    getEnd: function() {
        return this['getEndDate']()
    },
    getEndDate: function() {
        return this['timeAxis']['getEnd']()
    },
    setTimeColumnWidth: function(_0xecbcx2, _0xecbcx1) {
        this['timeAxisViewModel']['setTickWidth'](_0xecbcx2, _0xecbcx1)
    },
    getTimeColumnWidth: function() {
        return this['timeAxisViewModel']['getTickWidth']()
    },
    getRowHeight: function() {
        return this['timeAxisViewModel']['getViewRowHeight']()
    },
    shiftNext: function(_0xecbcx1) {
        this['suspendLayouts'] && this['suspendLayouts']();
        this['timeAxis']['shiftNext'](_0xecbcx1);
        this['suspendLayouts'] && this['resumeLayouts'](true)
    },
    shiftPrevious: function(_0xecbcx1) {
        this['suspendLayouts'] && this['suspendLayouts']();
        this['timeAxis']['shiftPrevious'](_0xecbcx1);
        this['suspendLayouts'] && this['resumeLayouts'](true)
    },
    goToNow: function() {
        this['setTimeSpan'](new Date())
    },
    setTimeSpan: function(_0xecbcx2, _0xecbcx1) {
        if (this['timeAxis']) {
            this['timeAxis']['setTimeSpan'](_0xecbcx2, _0xecbcx1)
        }
    },
    setStart: function(_0xecbcx1) {
        this['setStartDate'](_0xecbcx1)
    },
    setEnd: function(_0xecbcx1) {
        this['setEndDate'](_0xecbcx1)
    },
    setStartDate: function(_0xecbcx1) {
        this['setTimeSpan'](_0xecbcx1)
    },
    setEndDate: function(_0xecbcx1) {
        this['setTimeSpan'](null, _0xecbcx1)
    },
    getTimeAxis: function() {
        return this['timeAxis']
    },
    scrollToDate: function(_0xecbcx5, _0xecbcx2, _0xecbcx3) {
        var _0xecbcx1 = this['getSchedulingView']();
        var _0xecbcx4 = _0xecbcx1['getCoordinateFromDate'](_0xecbcx5, true);
        this['scrollToCoordinate'](_0xecbcx4, _0xecbcx5, _0xecbcx2, false, _0xecbcx3)
    },
    scrollToDateCentered: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = this['getSchedulingView']();
        var _0xecbcx4 = 0;
        if (_0xecbcx1['isHorizontal']()) {
            _0xecbcx4 = _0xecbcx1['getBox']()['width'] / 2
        } else {
            _0xecbcx4 = _0xecbcx1['getBox']()['height'] / 2
        };
        var _0xecbcx3 = Math['round'](_0xecbcx1['getCoordinateFromDate'](_0xecbcx5, true) - _0xecbcx4);
        this['scrollToCoordinate'](_0xecbcx3, _0xecbcx5, _0xecbcx2, true)
    },
    scrollToCoordinate: function(_0xecbcx8, _0xecbcx5, _0xecbcx2, _0xecbcx6, _0xecbcx9) {
        var _0xecbcxa = this['getSchedulingView']();
        var _0xecbcx7 = this;
        _0xecbcx9 = _0xecbcx9 || 0;
        if (_0xecbcx8 < 0 && !_0xecbcxa['isWeekView']()) {
            if (this['infiniteScroll']) {
                _0xecbcxa['shiftToDate'](_0xecbcx5, _0xecbcx6)
            } else {
                var _0xecbcx3 = (this['timeAxis']['getEnd']() - this['timeAxis']['getStart']()) / 2;
                var _0xecbcx1 = new Date(_0xecbcx5['getTime']() - _0xecbcx3);
                var _0xecbcx4 = new Date(_0xecbcx5['getTime']() + _0xecbcx3);
                if (_0xecbcx1 - this['getStart']() !== 0 && _0xecbcx4 - this['getEnd']() !== 0) {
                    this['setTimeSpan'](_0xecbcx1, _0xecbcx4);
                    if (_0xecbcx6) {
                        _0xecbcx7['scrollToDateCentered'](_0xecbcx5, _0xecbcx2)
                    } else {
                        _0xecbcx7['scrollToDate'](_0xecbcx5, _0xecbcx2, _0xecbcx9)
                    }
                }
            };
            return
        };
        if (this['isHorizontal']()) {
            _0xecbcxa['scrollHorizontallyTo'](_0xecbcx8 - _0xecbcx9, _0xecbcx2)
        } else {
            _0xecbcxa['scrollVerticallyTo'](_0xecbcx8 - _0xecbcx9, _0xecbcx2)
        }
    },
    getViewportCenterDate: function() {
        return this['getSchedulingView']()['getViewportCenterDate']()
    },
    addCls: function() {
        throw 'Abstract method call'
    },
    removeCls: function() {
        throw 'Abstract method call'
    },
    registerRenderer: function(_0xecbcx2, _0xecbcx1) {
        this['renderers']['push']({
            fn: _0xecbcx2,
            scope: _0xecbcx1
        })
    },
    deregisterRenderer: function(_0xecbcx2, _0xecbcx1) {
        Ext['each'](this['renderers'], function(_0xecbcx5, _0xecbcx3) {
            if (_0xecbcx2 === _0xecbcx5) {
                Ext['Array']['removeAt'](this['renderers'], _0xecbcx3);
                return false
            }
        })
    },
    getCrudManager: function() {
        return this['crudManager']
    },
    setCrudManager: function(_0xecbcx1) {
        this['crudManager'] = _0xecbcx1
    }
});
Ext.define('Ext.ux.Scheduler.view.Horizontal', {
    requires: ['Ext.util.Region', 'Ext.Element', 'Ext.Array', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.model.Resource'],
    view: null,
    constructor: function(_0xecbcx1) {
        Ext.apply(this, _0xecbcx1)
    },
    getElementsFromEventRecord: function(_0xecbcx2, _0xecbcx4, _0xecbcx3, _0xecbcx5) {
        var _0xecbcx1 = this['view'],
            _0xecbcx6;
        _0xecbcx5 = _0xecbcx5 || false;
        if (_0xecbcx4) {
            _0xecbcx6 = '[id^=' + _0xecbcx1['eventPrefix'] + _0xecbcx2['internalId'] + '-' + _0xecbcx4['internalId'] + '-]'
        } else {
            _0xecbcx6 = '[id^=' + _0xecbcx1['eventPrefix'] + _0xecbcx2['internalId'] + '-]'
        };
        return _0xecbcx1['getEl']()['query'](_0xecbcx6, _0xecbcx5)
    },
    translateToScheduleCoordinate: function(_0xecbcx1) {
        var _0xecbcx2 = this['view'];
        var _0xecbcx5;
        if (_0xecbcx2['shouldAdjustForRtl']()) {
            _0xecbcx5 = _0xecbcx2['getEl']()['getRight']() - _0xecbcx1
        } else {
            _0xecbcx5 = _0xecbcx1 - _0xecbcx2['getEl']()['getX']()
        };
        return _0xecbcx5 + _0xecbcx2['getScroll']()['left']
    },
    translateToPageCoordinate: function(_0xecbcx1) {
        var _0xecbcx2 = this['view'];
        return _0xecbcx1 + _0xecbcx2['getEl']()['getX']() - _0xecbcx2['getScroll']()['left']
    },
    getDateFromXY: function(_0xecbcx5, _0xecbcx2, _0xecbcx1) {
        var _0xecbcx3 = _0xecbcx5[0];
        if (!_0xecbcx1) {
            _0xecbcx3 = this['translateToScheduleCoordinate'](_0xecbcx3)
        };
        return this['view']['timeAxisViewModel']['getDateFromPosition'](_0xecbcx3, _0xecbcx2)
    },
    getEventRenderData: function(_0xecbcx1) {
        var _0xecbcx6 = _0xecbcx1['getStartDate'](),
            _0xecbcx4 = _0xecbcx1['getEndDate']() || _0xecbcx6,
            _0xecbcx7 = this['view'],
            _0xecbcx5 = _0xecbcx7['timeAxis']['getStart'](),
            _0xecbcxa = _0xecbcx7['timeAxis']['getEnd'](),
            _0xecbcx9 = Math,
            _0xecbcx3 = _0xecbcx7['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['max'](_0xecbcx6, _0xecbcx5)),
            _0xecbcx8 = _0xecbcx7['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['min'](_0xecbcx4, _0xecbcxa)),
            _0xecbcx2 = {
                event: _0xecbcx1
            };
        if (this['view']['rtl']) {
            _0xecbcx2['right'] = _0xecbcx9['min'](_0xecbcx3, _0xecbcx8)
        } else {
            _0xecbcx2['left'] = _0xecbcx9['min'](_0xecbcx3, _0xecbcx8)
        };
        _0xecbcx2['width'] = _0xecbcx9['max'](1, _0xecbcx9['abs'](_0xecbcx8 - _0xecbcx3)) - _0xecbcx7['eventBorderWidth'];
        if (_0xecbcx7['managedEventSizing']) {
            _0xecbcx2['top'] = _0xecbcx9['max'](0, (_0xecbcx7['barMargin'] - ((Ext['isIE'] && !Ext['isStrict']) ? 0 : _0xecbcx7['eventBorderWidth'] - _0xecbcx7['cellTopBorderWidth'])));
            _0xecbcx2['height'] = _0xecbcx7['timeAxisViewModel']['rowHeightHorizontal'] - (2 * _0xecbcx7['barMargin']) - _0xecbcx7['eventBorderWidth']
        };
        _0xecbcx2['start'] = _0xecbcx6;
        _0xecbcx2['end'] = _0xecbcx4;
        _0xecbcx2['startsOutsideView'] = _0xecbcx6 < _0xecbcx5;
        _0xecbcx2['endsOutsideView'] = _0xecbcx4 > _0xecbcxa;
        return _0xecbcx2
    },
    getScheduleRegion: function(_0xecbcx4, _0xecbcx9) {
        var _0xecbcx8 = this['view'],
            _0xecbcxa;
        if (_0xecbcx4) {
            var _0xecbcx5 = _0xecbcx9 && _0xecbcx8['getElementsFromEventRecord'](_0xecbcx9, _0xecbcx4)[0];
            _0xecbcxa = Ext['fly'](_0xecbcx8['getRowNode'](_0xecbcx4))['getRegion']();
            if (_0xecbcx5) {
                var _0xecbcx11 = _0xecbcx5['getRegion']();
                _0xecbcxa['top'] = _0xecbcx11['top'];
                _0xecbcxa['bottom'] = _0xecbcx11['bottom']
            } else {
                _0xecbcxa['top'] = _0xecbcxa['top'] + _0xecbcx8['barMargin'];
                _0xecbcxa['bottom'] = _0xecbcxa['bottom'] - _0xecbcx8['barMargin'] - _0xecbcx8['eventBorderWidth']
            }
        } else {
            _0xecbcxa = _0xecbcx8['getTableRegion']();
            _0xecbcxa['top'] = _0xecbcxa['top'] + _0xecbcx8['barMargin'];
            _0xecbcxa['bottom'] = _0xecbcxa['bottom'] - _0xecbcx8['barMargin'] - _0xecbcx8['eventBorderWidth']
        };
        var _0xecbcx6 = _0xecbcx8['timeAxis']['getStart'](),
            _0xecbcxe = _0xecbcx8['timeAxis']['getEnd'](),
            _0xecbcx2 = _0xecbcx8['getDateConstraints'](_0xecbcx4, _0xecbcx9) || {
                start: _0xecbcx6,
                end: _0xecbcxe
            },
            _0xecbcx3 = this['translateToPageCoordinate'](_0xecbcx8['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['max'](_0xecbcx6, _0xecbcx2['start']))),
            _0xecbcxd = this['translateToPageCoordinate'](_0xecbcx8['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['min'](_0xecbcxe, _0xecbcx2['end']))),
            _0xecbcx7 = _0xecbcxa['top'],
            _0xecbcx1 = _0xecbcxa['bottom'];
        return new Ext['util'].Region(_0xecbcx7, Math['max'](_0xecbcx3, _0xecbcxd), _0xecbcx1, Math['min'](_0xecbcx3, _0xecbcxd))
    },
    getResourceRegion: function(_0xecbcx8, _0xecbcx4, _0xecbcxa) {
        var _0xecbcxe = this['view'],
            _0xecbcx3 = _0xecbcxe['getRowNode'](_0xecbcx8),
            _0xecbcx6 = Ext['fly'](_0xecbcx3)['getOffsetsTo'](_0xecbcxe['getEl']()),
            _0xecbcxd = _0xecbcxe['timeAxis']['getStart'](),
            _0xecbcxc = _0xecbcxe['timeAxis']['getEnd'](),
            _0xecbcx5 = _0xecbcx4 ? Ext.ux.Scheduler['util']['Date']['max'](_0xecbcxd, _0xecbcx4) : _0xecbcxd,
            _0xecbcx9 = _0xecbcxa ? Ext.ux.Scheduler['util']['Date']['min'](_0xecbcxc, _0xecbcxa) : _0xecbcxc,
            _0xecbcx7 = _0xecbcxe['getCoordinateFromDate'](_0xecbcx5),
            _0xecbcxf = _0xecbcxe['getCoordinateFromDate'](_0xecbcx9),
            _0xecbcx11 = _0xecbcx6[1] + _0xecbcxe['cellTopBorderWidth'],
            _0xecbcx1 = _0xecbcx6[1] + Ext['fly'](_0xecbcx3)['getHeight']() - _0xecbcxe['cellBottomBorderWidth'];
        if (!Ext['versions']['touch']) {
            var _0xecbcx2 = _0xecbcxe['getScroll']();
            _0xecbcx11 += _0xecbcx2['top'];
            _0xecbcx1 += _0xecbcx2['top']
        };
        return new Ext['util'].Region(_0xecbcx11, Math['max'](_0xecbcx7, _0xecbcxf), _0xecbcx1, Math['min'](_0xecbcx7, _0xecbcxf))
    },
    columnRenderer: function(_0xecbcx2, _0xecbcx8, _0xecbcx4, _0xecbcx6, _0xecbcxa) {
        var _0xecbcx7 = this['view'];
        var _0xecbcx1 = _0xecbcx7['getEventStore']()['filterEventsForResource'](_0xecbcx4, function(_0xecbcxd) {
            return _0xecbcx7['timeAxis']['isRangeInAxis'](_0xecbcxd)
        });
        if (_0xecbcx1['length'] === 0) {
            return
        };
        var _0xecbcx9 = Ext['Array']['map'](_0xecbcx1, function(_0xecbcxd) {
            return _0xecbcx7['generateTplData'](_0xecbcxd, _0xecbcx4, _0xecbcx6)
        });
        if (_0xecbcx7['dynamicRowHeight']) {
            var _0xecbcx3 = _0xecbcx7['eventLayout']['horizontal'];
            var _0xecbcx5 = _0xecbcx3['applyLayout'](_0xecbcx9, _0xecbcx4, this['layoutEventVertically'], this);
            _0xecbcx8['rowHeight'] = (_0xecbcx5 * _0xecbcx7['timeAxisViewModel']['rowHeightHorizontal']) - ((_0xecbcx5 - 1) * _0xecbcx7['barMargin'])
        };
        return _0xecbcx7['eventTpl']['apply'](_0xecbcx9)
    },
    layoutEventVertically: function(_0xecbcx3, _0xecbcx2) {
        var _0xecbcx1 = this['view'];
        var _0xecbcx5 = _0xecbcx3 === 0 ? _0xecbcx1['barMargin'] : (_0xecbcx3 * _0xecbcx1['timeAxisViewModel']['rowHeightHorizontal'] - (_0xecbcx3 - 1) * _0xecbcx1['barMargin']);
        if (_0xecbcx5 >= _0xecbcx1['cellBottomBorderWidth']) {
            _0xecbcx5 -= _0xecbcx1['cellBottomBorderWidth']
        };
        return _0xecbcx5
    },
    resolveResource: function(_0xecbcx4) {
        var _0xecbcx3 = this,
            _0xecbcx2 = _0xecbcx3['view'],
            _0xecbcx5, _0xecbcx1;
        _0xecbcx5 = Ext['fly'](_0xecbcx4)['is'](_0xecbcx2['eventSelector']) && _0xecbcx4 || Ext['fly'](_0xecbcx4)['up'](_0xecbcx2['eventSelector'], null, true);
        if (_0xecbcx5) {
            _0xecbcx1 = _0xecbcx2['getResourceRecordFromDomId'](_0xecbcx5['id'])
        } else {
            _0xecbcx4 = _0xecbcx2['findRowByChild'](_0xecbcx4);
            _0xecbcx1 = _0xecbcx4 && _0xecbcx2['getRecordForRowNode'](_0xecbcx4) || null
        };
        return _0xecbcx1
    },
    getTimeSpanRegion: function(_0xecbcx2, _0xecbcx7, _0xecbcx9) {
        var _0xecbcx3 = this['view'],
            _0xecbcx5 = _0xecbcx3['getCoordinateFromDate'](_0xecbcx2),
            _0xecbcx4 = _0xecbcx7 ? _0xecbcx3['getCoordinateFromDate'](_0xecbcx7) : _0xecbcx5,
            _0xecbcx1, _0xecbcx6;
        _0xecbcx6 = _0xecbcx3['getTableRegion']();
        if (_0xecbcx9) {
            _0xecbcx1 = Math['max'](_0xecbcx6 ? _0xecbcx6['bottom'] - _0xecbcx6['top'] : 0, _0xecbcx3['getEl']()['dom']['clientHeight'])
        } else {
            _0xecbcx1 = _0xecbcx6 ? _0xecbcx6['bottom'] - _0xecbcx6['top'] : 0
        };
        return new Ext['util'].Region(0, Math['max'](_0xecbcx5, _0xecbcx4), _0xecbcx1, Math['min'](_0xecbcx5, _0xecbcx4))
    },
    getStartEndDatesFromRegion: function(_0xecbcx3, _0xecbcx5) {
        var _0xecbcx1 = this['view'];
        var _0xecbcx2 = _0xecbcx1['getDateFromCoordinate'](_0xecbcx3['left'], _0xecbcx5),
            _0xecbcx4 = _0xecbcx1['getDateFromCoordinate'](_0xecbcx3['right'], _0xecbcx5);
        if (_0xecbcx2 && _0xecbcx4) {
            return {
                start: Ext.ux.Scheduler['util']['Date']['min'](_0xecbcx2, _0xecbcx4),
                end: Ext.ux.Scheduler['util']['Date']['max'](_0xecbcx2, _0xecbcx4)
            }
        };
        return null
    },
    onEventAdd: function(_0xecbcx10, _0xecbcxb) {
        var _0xecbcxc = this['view'],
            _0xecbcx7 = {},
            _0xecbcx1, _0xecbcx2, _0xecbcxf, _0xecbcx5, _0xecbcx4, _0xecbcxe, _0xecbcx3, _0xecbcx9, _0xecbcx6;
        for (_0xecbcxe = 0, _0xecbcx3 = _0xecbcxb['length']; _0xecbcxe < _0xecbcx3; _0xecbcxe++) {
            _0xecbcx1 = _0xecbcxb[_0xecbcxe];
            _0xecbcx2 = _0xecbcx1['getStartDate']();
            _0xecbcxf = _0xecbcx1['getEndDate']();
            if (_0xecbcx2 && _0xecbcxf && _0xecbcxc['timeAxis']['timeSpanInAxis'](_0xecbcx2, _0xecbcxf)) {
                _0xecbcx5 = _0xecbcxb[_0xecbcxe]['getResources'](_0xecbcxc['getEventStore']());
                for (_0xecbcx9 = 0, _0xecbcx6 = _0xecbcx5['length']; _0xecbcx9 < _0xecbcx6; _0xecbcx9++) {
                    _0xecbcx4 = _0xecbcx5[_0xecbcx9];
                    _0xecbcx7[_0xecbcx4['getId']()] = _0xecbcx4
                }
            }
        };
        Ext['Object']['each'](_0xecbcx7, function(_0xecbcx8, _0xecbcxa) {
            _0xecbcxc['repaintEventsForResource'](_0xecbcxa)
        })
    },
    onEventRemove: function(_0xecbcx4, _0xecbcx2) {
        var _0xecbcx6 = this,
            _0xecbcx1 = _0xecbcx6['view'],
            _0xecbcx3 = _0xecbcx1['getEventStore'](),
            _0xecbcx9, _0xecbcx5;
        _0xecbcx9 = Ext['Array']['unique'](Ext['Array']['reduce'](_0xecbcx2, function(_0xecbcx7, _0xecbcxa) {
            return _0xecbcx7['concat'](_0xecbcx3['getResourcesForEvent'](_0xecbcxa))
        }, []));
        _0xecbcx5 = Ext['Array']['reduce'](_0xecbcx2, function(_0xecbcx7, _0xecbcxa) {
            return _0xecbcx7['concat'](_0xecbcx1['getElementsFromEventRecord'](_0xecbcxa, null, null, true))
        }, []);
        _0xecbcx5 = new Ext.CompositeElementLite(_0xecbcx5);
        _0xecbcx5['fadeOut']({
            callback: function(_0xecbcx7) {
                Ext['Array']['forEach'](_0xecbcx9, function(_0xecbcxa) {
                    if (_0xecbcx1 && !_0xecbcx1['isDestroyed']) {
                        _0xecbcx1['store']['indexOf'](_0xecbcxa) >= 0 && _0xecbcx1['repaintEventsForResource'](_0xecbcxa)
                    }
                })
            }
        })
    },
    onEventUpdate: function(_0xecbcx3, _0xecbcx4) {
        var _0xecbcx7 = _0xecbcx4['previous'] || {};
        var _0xecbcx8 = this['view'];
        var _0xecbcx9 = _0xecbcx8['timeAxis'];
        var _0xecbcx1 = _0xecbcx4['getStartDate']();
        var _0xecbcxa = _0xecbcx4['getEndDate']();
        var _0xecbcx2 = _0xecbcx7['StartDate'] || _0xecbcx1;
        var _0xecbcx6 = _0xecbcx7['EndDate'] || _0xecbcxa;
        var _0xecbcxd = _0xecbcx2 && _0xecbcx6 && _0xecbcx9['timeSpanInAxis'](_0xecbcx2, _0xecbcx6);
        var _0xecbcx5;
        if (_0xecbcx4['resourceIdField'] in _0xecbcx7 && _0xecbcxd) {
            _0xecbcx5 = _0xecbcx3['getResourceStore']()['getById'](_0xecbcx7[_0xecbcx4['resourceIdField']]);
            _0xecbcx5 && _0xecbcx8['repaintEventsForResource'](_0xecbcx5, true)
        };
        if ((_0xecbcx1 && _0xecbcxa && _0xecbcx9['timeSpanInAxis'](_0xecbcx1, _0xecbcxa)) || _0xecbcxd) {
            Ext['Array']['each'](_0xecbcx4['getResources'](), function(_0xecbcx11) {
                _0xecbcx8['repaintEventsForResource'](_0xecbcx11, true)
            })
        }
    },
    setColumnWidth: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = this['view'];
        _0xecbcx1['getTimeAxisViewModel']()['setViewColumnWidth'](_0xecbcx5, _0xecbcx2)
    },
    getVisibleDateRange: function() {
        var _0xecbcx4 = this['view'];
        if (!_0xecbcx4['getEl']()) {
            return null
        };
        var _0xecbcx3 = _0xecbcx4['getTableRegion'](),
            _0xecbcx5 = _0xecbcx4['timeAxis']['getStart'](),
            _0xecbcx9 = _0xecbcx4['timeAxis']['getEnd'](),
            _0xecbcx6 = _0xecbcx4['getWidth']();
        if ((_0xecbcx3['right'] - _0xecbcx3['left']) < _0xecbcx6) {
            return {
                startDate: _0xecbcx5,
                endDate: _0xecbcx9
            }
        };
        var _0xecbcx2 = _0xecbcx4['getScroll']();
        var _0xecbcx1 = {
            startDate: _0xecbcx4['getDateFromCoordinate'](_0xecbcx2['left'], null, true),
            endDate: _0xecbcx4['getDateFromCoordinate'](_0xecbcx2['left'] + _0xecbcx6, null, true) || _0xecbcx4['timeAxis']['getEnd']()
        };
        if (!_0xecbcx1['endDate']) {
            _0xecbcx1['endDate'] = _0xecbcx4['timeAxis']['getEnd']()
        };
        return _0xecbcx1
    },
    getItemBox: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        return Ext['Array']['map'](_0xecbcx1['getResources'](), function(_0xecbcx5) {
            return _0xecbcx2['getResourceEventBox'](_0xecbcx1, _0xecbcx5)
        })
    },
    isRowVisible: function(_0xecbcx2) {
        var _0xecbcx5 = Ext['isFunction'](_0xecbcx2['isVisible']) && !_0xecbcx2['isVisible']();
        if (!_0xecbcx5 && this['view']['groupingFeature'] && !this['view']['groupingFeature']['disabled']) {
            var _0xecbcx1 = this['view']['resourceStore']['getGroups']();
            if (_0xecbcx1) {
                var _0xecbcx3 = _0xecbcx1['getByKey'](_0xecbcx2['get'](this['view']['resourceStore']['groupField']));
                _0xecbcx5 = _0xecbcx3 && !this['view']['lockingPartner']['groupingFeature']['isExpanded'](_0xecbcx3)
            }
        };
        return !_0xecbcx5
    },
    isElementRenderedAndDisplayed: function(_0xecbcx1) {
        if (_0xecbcx1 instanceof Ext.ux.Scheduler['model']['Resource']) {
            _0xecbcx1 = this['view']['getRowNode'](_0xecbcx1)
        };
        return !!(_0xecbcx1 && Ext['fly'](_0xecbcx1)['getHeight']())
    },
    getResultEventBox: function(_0xecbcx2, _0xecbcx1) {
        return {
            rendered: true,
            start: (_0xecbcx2.hasOwnProperty('left') ? _0xecbcx2['left'] : _0xecbcx2['right']),
            end: (_0xecbcx2.hasOwnProperty('left') ? _0xecbcx2['left'] : _0xecbcx2['right']) + _0xecbcx2['width'],
            top: _0xecbcx1 + _0xecbcx2['top'],
            bottom: _0xecbcx1 + _0xecbcx2['top'] + _0xecbcx2['height']
        }
    },
    getResourceEventBox: function(_0xecbcxa, _0xecbcx8) {
        var _0xecbcxe = Ext.ux.Scheduler['util']['Date'],
            _0xecbcx19 = this,
            _0xecbcxb = null,
            _0xecbcx15 = _0xecbcx19['view'],
            _0xecbcxf = _0xecbcx15['timeAxis']['getStart'](),
            _0xecbcx11 = _0xecbcx15['timeAxis']['getEnd'](),
            _0xecbcx22 = _0xecbcxa['getStartDate'](),
            _0xecbcx10 = _0xecbcxa['getEndDate'](),
            _0xecbcx13, _0xecbcx14, _0xecbcx23, _0xecbcx24, _0xecbcxc, _0xecbcx4, _0xecbcx6, _0xecbcx17, _0xecbcx16, _0xecbcx2, _0xecbcx1, _0xecbcx5, _0xecbcx18, _0xecbcx12, _0xecbcx3, _0xecbcx9, _0xecbcxd;
        if (_0xecbcx22 && _0xecbcx10 && _0xecbcxe['intersectSpans'](_0xecbcx22, _0xecbcx10, _0xecbcxf, _0xecbcx11) && _0xecbcx19['isRowVisible'](_0xecbcx8)) {
            _0xecbcx24 = _0xecbcx15['getRowNode'](_0xecbcx8);
            if (_0xecbcx24 && _0xecbcx19['isElementRenderedAndDisplayed'](_0xecbcx24)) {
                if (_0xecbcx15['managedEventSizing']) {
                    _0xecbcx13 = _0xecbcx15['eventLayout']['horizontal'];
                    var _0xecbcx7 = _0xecbcx15['getEventStore']()['filterEventsForResource'](_0xecbcx8, _0xecbcx15['timeAxis']['isRangeInAxis'], _0xecbcx15['timeAxis']);
                    _0xecbcx14 = Ext['Array']['map'](_0xecbcx7, _0xecbcx19['getEventRenderData'], _0xecbcx19);
                    _0xecbcx13['applyLayout'](_0xecbcx14, _0xecbcx8);
                    _0xecbcx23 = Ext['Array']['findBy'](_0xecbcx14, function(_0xecbcx1a) {
                        return _0xecbcx1a['event'] == _0xecbcxa
                    });
                    if (_0xecbcx23) {
                        _0xecbcx4 = Ext['fly'](_0xecbcx24)['getOffsetsTo'](_0xecbcx15['getNodeContainer']())[1];
                        _0xecbcxb = this['getResultEventBox'](_0xecbcx23, _0xecbcx4)
                    }
                } else {
                    _0xecbcx16 = _0xecbcx15['getElementsFromEventRecord'](_0xecbcxa, _0xecbcxa !== _0xecbcx8 && _0xecbcx8);
                    if (_0xecbcx16['length']) {
                        _0xecbcx2 = _0xecbcx16[0];
                        _0xecbcx1 = _0xecbcx2['getOffsetsTo'](_0xecbcx15['getEl']());
                        _0xecbcx5 = _0xecbcx2['getBox']();
                        _0xecbcxb = {
                            rendered: true,
                            start: _0xecbcx1[0],
                            end: _0xecbcx1[0] + _0xecbcx5['width'],
                            top: _0xecbcx1[1],
                            bottom: _0xecbcx1[1] + _0xecbcx5['height']
                        }
                    }
                }
            } else {
                _0xecbcxb = {
                    rendered: false,
                    start: _0xecbcx15['getCoordinateFromDate'](_0xecbcxe['max'](_0xecbcx22, _0xecbcxf)),
                    end: _0xecbcx15['getCoordinateFromDate'](_0xecbcxe['min'](_0xecbcx10, _0xecbcx11))
                };
                _0xecbcx18 = _0xecbcx15['all']['startIndex'];
                _0xecbcx12 = _0xecbcx15['getRecord'](_0xecbcx18);
                _0xecbcx3 = _0xecbcx15['all']['endIndex'];
                _0xecbcx9 = _0xecbcx15['getRecord'](_0xecbcx3);
                _0xecbcx6 = _0xecbcx15['getRowHeight']();
                if (_0xecbcx8['isAbove'](_0xecbcx12)) {
                    _0xecbcxb['top'] = -_0xecbcx6;
                    _0xecbcxb['bottom'] = _0xecbcxb['top'] + _0xecbcx6;
                    _0xecbcxb['relPos'] = 'before'
                } else {
                    if (_0xecbcx8 == _0xecbcx9 || _0xecbcx8['isAbove'](_0xecbcx9)) {
                        _0xecbcxc = _0xecbcx15['indexOf'](_0xecbcx8);
                        _0xecbcxb['top'] = _0xecbcxc * _0xecbcx6;
                        _0xecbcxb['bottom'] = _0xecbcxb['top'] + _0xecbcx6
                    } else {
                        _0xecbcxd = _0xecbcx15['getNode'](_0xecbcx3);
                        if (_0xecbcx19['isElementRenderedAndDisplayed'](_0xecbcxd)) {
                            _0xecbcxb['top'] = Ext['fly'](_0xecbcxd)['getOffsetsTo'](_0xecbcx15['getNodeContainer']())[1] + Ext['fly'](_0xecbcxd)['getHeight']()
                        } else {
                            _0xecbcxb['top'] = (_0xecbcx3 + 1) * _0xecbcx6
                        };
                        _0xecbcxb['bottom'] = _0xecbcxb['top'] + _0xecbcx6;
                        _0xecbcxb['relPos'] = 'after'
                    }
                }
            };
            if (_0xecbcxb) {
                _0xecbcxb = _0xecbcx19['adjustItemBox'](_0xecbcxa, _0xecbcxb)
            }
        };
        return _0xecbcxb
    },
    adjustItemBox: function(_0xecbcx1, _0xecbcx2) {
        return _0xecbcx2
    },
    getConnectorStartSide: function(_0xecbcx1) {
        return 'left'
    },
    getConnectorEndSide: function(_0xecbcx1) {
        return 'right'
    }
});
Ext.define('Ext.ux.Scheduler.mixin.AbstractTimelineView', {
    requires: ['Ext.ux.Scheduler.data.TimeAxis', 'Ext.ux.Scheduler.template.Event', 'Ext.ux.Scheduler.view.Horizontal'],
    uses: ['Ext.dom.Query'],
    selectedEventCls: 'sch-event-selected',
    readOnly: false,
    horizontalViewClass: 'Ext.ux.Scheduler.view.Horizontal',
    timeCellCls: 'sch-timetd',
    timeCellSelector: '.sch-timetd',
    eventBorderWidth: 1,
    timeAxis: null,
    timeAxisViewModel: null,
    eventPrefix: null,
    rowHeight: null,
    mode: 'horizontal',
    horizontal: null,
    vertical: null,
    panel: null,
    displayDateFormat: null,
    el: null,
    _initializeTimelineView: function() {
        if (this['horizontalViewClass']) {
            this['horizontal'] = Ext['create'](this['horizontalViewClass'], {
                view: this
            })
        };
        if (this['verticalViewClass']) {
            this['vertical'] = Ext['create'](this['verticalViewClass'], {
                view: this
            })
        };
        if (this['weekViewClass']) {
            this['weekview'] = Ext['create'](this['weekViewClass'], {
                view: this
            })
        };
        this['eventPrefix'] = (this['eventPrefix'] || this['getId']()) + '-'
    },
    getTimeAxisViewModel: function() {
        return this['timeAxisViewModel']
    },
    getFormattedDate: function(_0xecbcx1) {
        return Ext['Date']['format'](_0xecbcx1, this['getDisplayDateFormat']())
    },
    getFormattedEndDate: function(_0xecbcx5, _0xecbcx1) {
        var _0xecbcx2 = this['getDisplayDateFormat']();
        if (_0xecbcx5['getHours']() === 0 && _0xecbcx5['getMinutes']() === 0 && (!_0xecbcx1 || !(_0xecbcx5['getYear']() === _0xecbcx1['getYear']() && _0xecbcx5['getMonth']() === _0xecbcx1['getMonth']() && _0xecbcx5['getDate']() === _0xecbcx1['getDate']())) && !Ext.ux.Scheduler['util']['Date']['hourInfoRe']['test'](_0xecbcx2['replace'](Ext.ux.Scheduler['util']['Date']['stripEscapeRe'], ''))) {
            _0xecbcx5 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx5, Ext.ux.Scheduler['util']['Date'].DAY, -1)
        };
        return Ext['Date']['format'](_0xecbcx5, _0xecbcx2)
    },
    getDisplayDateFormat: function() {
        return this['displayDateFormat']
    },
    setDisplayDateFormat: function(_0xecbcx1) {
        this['displayDateFormat'] = _0xecbcx1
    },
    fitColumns: function(_0xecbcx2) {
        if (this['isHorizontal']()) {
            this['getTimeAxisViewModel']()['fitToAvailableWidth'](_0xecbcx2)
        } else {
            var _0xecbcx1 = Math['floor']((this['panel']['getWidth']() - Ext['getScrollbarSize']()['width'] - 1) / this['headerCt']['getColumnCount']());
            this['setColumnWidth'](_0xecbcx1, _0xecbcx2)
        }
    },
    getElementsFromEventRecord: function(_0xecbcx1, _0xecbcx3, _0xecbcx5, _0xecbcx2) {
        return this[this['mode']]['getElementsFromEventRecord'](_0xecbcx1, _0xecbcx3, _0xecbcx5, _0xecbcx2)
    },
    getStartEndDatesFromRegion: function(_0xecbcx2, _0xecbcx1) {
        return this[this['mode']]['getStartEndDatesFromRegion'](_0xecbcx2, _0xecbcx1)
    },
    getTimeResolution: function() {
        return this['timeAxis']['getResolution']()
    },
    setTimeResolution: function(_0xecbcx2, _0xecbcx1) {
        this['timeAxis']['setResolution'](_0xecbcx2, _0xecbcx1);
        if (this['getTimeAxisViewModel']()['snapToIncrement']) {
            this['refreshKeepingScroll']()
        }
    },
    getEventIdFromDomNodeId: function(_0xecbcx1) {
        return _0xecbcx1['substring'](this['eventPrefix']['length'])['split']('-')[0]
    },
    getResourceIdFromDomNodeId: function(_0xecbcx1) {
        return _0xecbcx1['substring'](this['eventPrefix']['length'])['split']('-')[1]
    },
    getDateFromDomEvent: function(_0xecbcx2, _0xecbcx1) {
        return this['getDateFromXY'](_0xecbcx2['getXY'](), _0xecbcx1)
    },
    getSnapPixelAmount: function() {
        return this['getTimeAxisViewModel']()['getSnapPixelAmount']()
    },
    setSnapEnabled: function(_0xecbcx1) {
        this['getTimeAxisViewModel']()['setSnapToIncrement'](_0xecbcx1)
    },
    setReadOnly: function(_0xecbcx1) {
        this['readOnly'] = _0xecbcx1;
        this[_0xecbcx1 ? 'addCls' : 'removeCls'](this['_cmpCls'] + '-readonly')
    },
    isReadOnly: function() {
        return this['readOnly']
    },
    setMode: function(_0xecbcx1) {
        this['mode'] = _0xecbcx1;
        this['timeAxisViewModel']['mode'] = _0xecbcx1
    },
    getMode: function() {
        return this['mode']
    },
    isHorizontal: function() {
        return this['getMode']() === 'horizontal'
    },
    isVertical: function() {
        return this['getMode']() === 'vertical'
    },
    isWeekView: function() {
        return this['getMode']() === 'weekview'
    },
    getDateFromXY: function(_0xecbcx5, _0xecbcx2, _0xecbcx1) {
        return this[this['mode']]['getDateFromXY'](_0xecbcx5, _0xecbcx2, _0xecbcx1)
    },
    getDateFromCoordinate: function(_0xecbcx5, _0xecbcx2, _0xecbcx1) {
        if (!_0xecbcx1) {
            _0xecbcx5 = this[this['mode']]['translateToScheduleCoordinate'](_0xecbcx5)
        };
        return this['timeAxisViewModel']['getDateFromPosition'](_0xecbcx5, _0xecbcx2)
    },
    getDateFromX: function(_0xecbcx1, _0xecbcx2) {
        return this['getDateFromCoordinate'](_0xecbcx1, _0xecbcx2)
    },
    getDateFromY: function(_0xecbcx2, _0xecbcx1) {
        return this['getDateFromCoordinate'](_0xecbcx2, _0xecbcx1)
    },
    getCoordinateFromDate: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx5 = this['timeAxisViewModel']['getPositionFromDate'](_0xecbcx1);
        if (_0xecbcx2 === false) {
            _0xecbcx5 = this[this['mode']]['translateToPageCoordinate'](_0xecbcx5)
        };
        return _0xecbcx5
    },
    getTimeSpanDistance: function(_0xecbcx1, _0xecbcx2) {
        return this['timeAxisViewModel']['getDistanceBetweenDates'](_0xecbcx1, _0xecbcx2)
    },
    getTimeSpanRegion: function(_0xecbcx1, _0xecbcx2) {
        return this[this['mode']]['getTimeSpanRegion'](_0xecbcx1, _0xecbcx2)
    },
    getScheduleRegion: function(_0xecbcx2, _0xecbcx1) {
        return this[this['mode']]['getScheduleRegion'](_0xecbcx2, _0xecbcx1)
    },
    getTableRegion: function() {
        throw 'Abstract method call'
    },
    getRowNode: function(_0xecbcx1) {
        throw 'Abstract method call'
    },
    getRecordForRowNode: function(_0xecbcx1) {
        throw 'Abstract method call'
    },
    getVisibleDateRange: function() {
        return this[this['mode']]['getVisibleDateRange']()
    },
    setColumnWidth: function(_0xecbcx2, _0xecbcx1) {
        this[this['mode']]['setColumnWidth'](_0xecbcx2, _0xecbcx1)
    },
    findRowByChild: function(_0xecbcx1) {
        throw 'Abstract method call'
    },
    setBarMargin: function(_0xecbcx2, _0xecbcx1) {
        this['barMargin'] = _0xecbcx2;
        if (!_0xecbcx1) {
            this['refreshKeepingScroll']()
        }
    },
    getRowHeight: function() {
        return this['timeAxisViewModel']['getViewRowHeight']()
    },
    setRowHeight: function(_0xecbcx1, _0xecbcx2) {
        this['timeAxisViewModel']['setViewRowHeight'](_0xecbcx1, _0xecbcx2)
    },
    refreshKeepingScroll: function() {
        throw 'Abstract method call'
    },
    scrollVerticallyTo: function(_0xecbcx2, _0xecbcx1) {
        throw 'Abstract method call'
    },
    scrollHorizontallyTo: function(_0xecbcx1, _0xecbcx2) {
        throw 'Abstract method call'
    },
    getVerticalScroll: function() {
        throw 'Abstract method call'
    },
    getHorizontalScroll: function() {
        throw 'Abstract method call'
    },
    getEl: Ext['emptyFn'],
    getScroll: function() {
        throw 'Abstract method call'
    },
    getOuterEl: function() {
        return this['getEl']()
    },
    getRowContainerEl: function() {
        return this['getEl']()
    },
    getScheduleCell: function(_0xecbcx2, _0xecbcx1) {
        return this['getCellByPosition']({
            row: _0xecbcx2,
            column: _0xecbcx1
        })
    },
    getScrollEventSource: function() {
        return this['getEl']()
    },
    getViewportHeight: function() {
        return this['getEl']()['getHeight']()
    },
    getViewportWidth: function() {
        return this['getEl']()['getWidth']()
    },
    getViewportCenterDate: function() {
        var _0xecbcx1 = this['getScroll'](),
            _0xecbcx2;
        if (this['isVertical']()) {
            _0xecbcx2 = [0, _0xecbcx1['top'] + this['getViewportHeight']() / 2]
        } else {
            _0xecbcx2 = [_0xecbcx1['left'] + this['getViewportWidth']() / 2, 0]
        };
        return this['getDateFromXY'](_0xecbcx2, null, true)
    },
    getDateConstraints: Ext['emptyFn'],
    getItemBox: function(_0xecbcx1) {
        return this[this['mode']]['getItemBox'](_0xecbcx1)
    },
    getConnectorStartSide: function(_0xecbcx1) {
        return this[this['mode']]['getConnectorStartSide'](_0xecbcx1)
    },
    getConnectorEndSide: function(_0xecbcx1) {
        return this[this['mode']]['getConnectorEndSide'](_0xecbcx1)
    },
    getViewStartDate: function() {
        return this['timeAxis']['getStart']()
    },
    getViewEndDate: function() {
        return this['timeAxis']['getEnd']()
    }
});
Ext.apply(Ext.ux.Scheduler, {
    VERSION: '5.1.3'
});
Ext.define('Ext.ux.Scheduler.mixin.FilterableTreeView', {
    prevBlockRefresh: null,
    initTreeFiltering: function() {
        var _0xecbcx1 = function() {
            var _0xecbcx2 = this['store'];
            this['mon'](_0xecbcx2, 'nodestore-datachange-start', this['onFilterChangeStart'], this);
            this['mon'](_0xecbcx2, 'nodestore-datachange-end', this['onFilterChangeEnd'], this);
            if (!_0xecbcx2['allowExpandCollapseWhileFiltered']) {
                this['mon'](_0xecbcx2, 'filter-clear', this['onFilterCleared'], this);
                this['mon'](_0xecbcx2, 'filter-set', this['onFilterSet'], this)
            }
        };
        if (this['rendered']) {
            _0xecbcx1['call'](this)
        } else {
            this['on']('beforerender', _0xecbcx1, this, {
                single: true
            })
        }
    },
    onFilterChangeStart: function() {
        this['prevBlockRefresh'] = this['blockRefresh'];
        this['blockRefresh'] = true;
        Ext['suspendLayouts']()
    },
    onFilterChangeEnd: function() {
        Ext['resumeLayouts'](true);
        this['blockRefresh'] = this['prevBlockRefresh']
    },
    onFilterCleared: function() {
        delete this['toggle'];
        var _0xecbcx1 = this['getEl']();
        if (_0xecbcx1) {
            _0xecbcx1['removeCls']('sch-tree-filtered')
        }
    },
    onFilterSet: function() {
        this['toggle'] = function() {};
        var _0xecbcx1 = this['getEl']();
        if (_0xecbcx1) {
            _0xecbcx1['addCls']('sch-tree-filtered')
        }
    }
});
Ext.define('Ext.ux.Scheduler.mixin.GridViewCanvas', {
    extend: 'Ext.Mixin',
    mixinConfig: {
        after: {
            onRender: 'afterOnRender'
        }
    },
    secondaryCanvasCls: 'sch-secondary-canvas',
    secondaryCanvasLayerCls: 'sch-secondary-canvas-layer',
    itemsCanvasEl: null,
    itemsCanvasCls: 'sch-item-canvas',
    itemsCanvasLayerCls: 'sch-item-canvas-layer',
    getSecondaryCanvasEl: function() {
        var _0xecbcx1 = null;
        if (this['isItemCanvasAvailable']()) {
            _0xecbcx1 = this['getItemCanvasEl'](-1, {
                tag: 'div',
                role: 'presentation',
                cls: this['secondaryCanvasCls']
            })
        };
        return _0xecbcx1
    },
    isItemCanvasAvailable: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        return !!(_0xecbcx2['rendered'] && !_0xecbcx2['destroyed'] && (_0xecbcx2['getNodeContainer']() || _0xecbcx2['itemsCanvasEl'] && (_0xecbcx2['itemsCanvasEl']['_underMixinControl'] || !Ext['isGarbage'](_0xecbcx2['itemsCanvasEl']['dom']))))
    },
    isItemCanvasPresent: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        return !!(_0xecbcx2['rendered'] && !_0xecbcx2['destroyed'] && _0xecbcx2['itemsCanvasEl'] && (_0xecbcx1 === undefined || (_0xecbcx2['itemsCanvasEl'][_0xecbcx1] && (_0xecbcx2['itemsCanvasEl']['_underMixinControl'] || !Ext['isGarbage'](_0xecbcx2['itemsCanvasEl'][_0xecbcx1]['dom'])))))
    },
    getItemCanvasEl: function(_0xecbcx2, _0xecbcx4) {
        var _0xecbcx5 = this,
            _0xecbcx1 = _0xecbcx5['itemsCanvasEl'],
            _0xecbcx3 = _0xecbcx1;
        Ext['Assert'] && Ext['Assert']['truthy'](_0xecbcx5['isItemCanvasAvailable'](), 'Can\'t get sub canvas element, view \'s node container isn\'t rendered yet ');
        if (!_0xecbcx1 || !_0xecbcx1['dom'] || (!_0xecbcx1['_underMixinControl'] && (Ext['isGarbage'](_0xecbcx1['dom'])))) {
            _0xecbcx3 = _0xecbcx1 = _0xecbcx5['itemsCanvasEl'] = Ext['fly'](_0xecbcx5['getNodeContainer']())['insertFirst']({
                cls: _0xecbcx5['itemsCanvasCls']
            })
        };
        if (arguments['length'] > 0) {
            _0xecbcx2 = _0xecbcx2 || 0;
            _0xecbcx3 = _0xecbcx1[_0xecbcx2] || Ext['dom']['Query']['selectNode']('[data-sch-secondary-canvas-layer="' + _0xecbcx2 + '"]', _0xecbcx1['dom']);
            if (!_0xecbcx3 || !_0xecbcx3['dom'] || (!_0xecbcx1['_underMixinControl'] && Ext['isGarbage'](_0xecbcx3['dom']))) {
                _0xecbcx3 = _0xecbcx1['createChild']((Ext['isFunction'](_0xecbcx4) ? _0xecbcx4() : _0xecbcx4) || {
                    tag: 'div'
                });
                _0xecbcx3['set']({
                    "\x64\x61\x74\x61\x2D\x73\x63\x68\x2D\x73\x65\x63\x6F\x6E\x64\x61\x72\x79\x2D\x63\x61\x6E\x76\x61\x73\x2D\x6C\x61\x79\x65\x72": _0xecbcx2
                });
                _0xecbcx3['setStyle']('zIndex', _0xecbcx2);
                _0xecbcx3['addCls'](_0xecbcx5['itemsCanvasLayerCls']);
                _0xecbcx1[_0xecbcx2] = _0xecbcx3
            }
        };
        return _0xecbcx3
    },
    afterOnRender: function() {
        if (this['bufferedRenderer']) {
            this['on']('viewready', this['onBufferedRendererViewReady'], this)
        }
    },
    onBufferedRendererViewReady: function() {
        var _0xecbcx2 = this,
            _0xecbcx5 = _0xecbcx2['bufferedRenderer'],
            _0xecbcx1 = _0xecbcx5['onRangeFetched'];
        _0xecbcx5['onRangeFetched'] = function() {
            var _0xecbcx3 = _0xecbcx2['getItemCanvasEl'](),
                _0xecbcx6 = _0xecbcx2['getNodeContainer'](),
                _0xecbcx4;
            _0xecbcx3['_underMixinControl'] = true;
            _0xecbcx3['dom']['parentNode'] && _0xecbcx3['dom']['parentNode']['removeChild'](_0xecbcx3['dom']);
            _0xecbcx4 = _0xecbcx1['apply'](this, arguments);
            _0xecbcx6['insertBefore'](_0xecbcx3['dom'], _0xecbcx6['firstChild']);
            delete _0xecbcx3['_underMixinControl'];
            return _0xecbcx4
        }
    }
});
Ext.define('Ext.ux.Scheduler.mixin.PartnerTimelinePanel', {
    extend: 'Ext.Mixin',
    setupPartnerTimelinePanel: function(_0xecbcx2) {
        var _0xecbcx4 = this['partnerTimelinePanel'];
        var _0xecbcx1 = _0xecbcx4['lockedGrid'];
        var _0xecbcx3 = this['lockedGrid'];
        _0xecbcx1['mon'](_0xecbcx3, 'resize', this['onLockedGridResize'], _0xecbcx1);
        _0xecbcx3['mon'](_0xecbcx1, 'resize', this['onLockedGridResize'], _0xecbcx3);
        var _0xecbcx5 = _0xecbcx4['isVisible']() ? _0xecbcx4['lockedGrid']['getWidth']() : _0xecbcx4['lockedGrid']['width'];
        if (_0xecbcx1['getCollapsed']()) {
            this['mon'](_0xecbcx1, 'viewready', function(_0xecbcx6) {
                _0xecbcx3['setWidth'](_0xecbcx6['getWidth']())
            })
        } else {
            _0xecbcx3['setWidth'](_0xecbcx5)
        };
        this['on']('afterlayout', function() {
            if (_0xecbcx1['getCollapsed']()) {
                _0xecbcx3['collapse']()
            } else {
                _0xecbcx3['expand']();
                _0xecbcx3['setWidth'](_0xecbcx5)
            }
        }, this, {
            single: true
        });
        _0xecbcx1['on']({
            collapse: this['onPartnerCollapseExpand'],
            expand: this['onPartnerCollapseExpand'],
            scope: this
        });
        _0xecbcx3['on']({
            collapse: this['onPartnerCollapseExpand'],
            expand: this['onPartnerCollapseExpand'],
            scope: _0xecbcx4
        });
        this['setupScrollSync']();
        _0xecbcx4['mon'](this, 'beforezoomchange', this['onBeforeZoomChange'], this);
        _0xecbcx4['mon'](this, 'viewchange', this['onViewChange'], this);
        this['mon'](_0xecbcx4, 'beforezoomchange', this['onBeforeZoomChange'], this);
        this['mon'](_0xecbcx4, 'viewchange', this['onViewChange'], this)
    },
    onLockedGridResize: function(_0xecbcx2, _0xecbcx1) {
        this['setWidth'](_0xecbcx1)
    },
    onPartnerCollapseExpand: function(_0xecbcx1) {
        if (_0xecbcx1['getCollapsed']()) {
            this['lockedGrid']['collapse']()
        } else {
            this['lockedGrid']['expand']()
        }
    },
    setupScrollSync: function() {
        var _0xecbcx7 = this['partnerTimelinePanel']['getSchedulingView'](),
            _0xecbcx5 = _0xecbcx7['getScrollable'](),
            _0xecbcx6 = this['getSchedulingView'](),
            _0xecbcx1 = _0xecbcx6['getScrollable'](),
            _0xecbcx4;

        function _0xecbcx9(_0xecbcx8) {
            var _0xecbcxa = _0xecbcx8 === _0xecbcx1 ? _0xecbcx1 : _0xecbcx5,
                _0xecbcxd = _0xecbcx8 === _0xecbcx1 ? _0xecbcx5 : _0xecbcx1;
            _0xecbcxa['component']['mun'](_0xecbcxa, 'scrollstart', _0xecbcx9);
            _0xecbcxd['component']['mun'](_0xecbcxd, 'scrollstart', _0xecbcx9);
            _0xecbcxa['component']['mon'](_0xecbcxa, 'scroll', _0xecbcx2);
            _0xecbcxa['component']['mon'](_0xecbcxa, 'scrollend', _0xecbcx3)
        }

        function _0xecbcx2(_0xecbcxa, _0xecbcxe) {
            var _0xecbcxd = _0xecbcxa === _0xecbcx1 ? _0xecbcx1 : _0xecbcx5,
                _0xecbcx11 = _0xecbcxa === _0xecbcx1 ? _0xecbcx5 : _0xecbcx1;
            var _0xecbcx8 = _0xecbcx11['component']['headerCt']['getScrollable']();
            _0xecbcx8 && _0xecbcx8['scrollTo'](_0xecbcxe);
            _0xecbcx11['scrollTo'](_0xecbcxe)
        }

        function _0xecbcx3(_0xecbcx8) {
            var _0xecbcxa = _0xecbcx8 === _0xecbcx1 ? _0xecbcx1 : _0xecbcx5,
                _0xecbcxd = _0xecbcx8 === _0xecbcx1 ? _0xecbcx5 : _0xecbcx1;
            _0xecbcxa['component']['mun'](_0xecbcxa, 'scroll', _0xecbcx2);
            _0xecbcxa['component']['mun'](_0xecbcxa, 'scrollend', _0xecbcx3);
            _0xecbcxa['component']['mon'](_0xecbcxa, 'scrollstart', _0xecbcx9);
            _0xecbcxd['component']['mon'](_0xecbcxd, 'scrollstart', _0xecbcx9)
        }
        _0xecbcx5['component']['mon'](_0xecbcx1, {
            scrollstart: _0xecbcx9
        });
        _0xecbcx1['component']['mon'](_0xecbcx5, {
            scrollstart: _0xecbcx9
        });
        this['partnerTimelinePanel']['mon'](this, {
            show: function() {
                _0xecbcx2(_0xecbcx5, _0xecbcx5['getPosition']()['x'])
            }
        });
        this['mon'](this['partnerTimelinePanel'], {
            show: function() {
                _0xecbcx2(_0xecbcx1, _0xecbcx1['getPosition']()['x'])
            }
        })
    },
    onViewChange: function(_0xecbcx1) {
        if (_0xecbcx1 === this) {
            this['partnerTimelinePanel']['viewPreset'] = this['viewPreset'] = this['timeAxisViewModel']['viewPreset']
        }
    },
    onBeforeZoomChange: function() {
        var _0xecbcx5 = this['partnerTimelinePanel'];
        var _0xecbcx2 = _0xecbcx5['getSchedulingView']()['getScrollable'](),
            _0xecbcx1 = _0xecbcx2['suspendPartnerSync'];
        _0xecbcx2['suspendPartnerSync'] = Ext['emptyFn'];
        _0xecbcx2['on']('scrollend', function() {
            _0xecbcx2['suspendPartnerSync'] = _0xecbcx1
        }, null, {
            single: true
        })
    }
});
Ext.define('Ext.ux.Scheduler.patches.NavigationModel6_0_2', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.grid.NavigationModel',
    minVersion: '6.0.2',
    maxVersion: '6.2.0',
    overrides: {
        focusPosition: function(_0xecbcx2) {
            var _0xecbcx3 = this,
                _0xecbcx5, _0xecbcx4, _0xecbcx1;
            _0xecbcx3['item'] = _0xecbcx3['cell'] = null;
            if (_0xecbcx2 && _0xecbcx2['record'] && _0xecbcx2['column']) {
                _0xecbcx5 = _0xecbcx2['view'];
                if (_0xecbcx2['rowElement']) {
                    _0xecbcx4 = _0xecbcx3['item'] = _0xecbcx2['rowElement']
                } else {
                    _0xecbcx4 = _0xecbcx5['getRowByRecord'](_0xecbcx2['record'])
                };
                if (_0xecbcx4) {
                    _0xecbcx3['cell'] = _0xecbcx2['cellElement'] || Ext['fly'](_0xecbcx4)['down'](_0xecbcx2['column']['getCellSelector'](), true);
                    if (_0xecbcx3['cell']) {
                        _0xecbcx3['cell'] = new Ext['dom'].Fly(_0xecbcx3['cell']);
                        _0xecbcx5['lastFocused'] = _0xecbcx3['lastFocused'] = _0xecbcx3['position']['clone']();
                        _0xecbcx1 = _0xecbcx5['getScrollable']();
                        if (_0xecbcx1 && !_0xecbcx5['mixins']['Ext.ux.Scheduler.mixin.TimelineView']) {
                            _0xecbcx1['scrollIntoView'](_0xecbcx3['cell'])
                        };
                        _0xecbcx3['focusItem'](_0xecbcx3['cell']);
                        _0xecbcx5['focusEl'] = _0xecbcx3['cell']
                    } else {
                        _0xecbcx3['position']['setAll']();
                        _0xecbcx3['record'] = _0xecbcx3['column'] = _0xecbcx3['recordIndex'] = _0xecbcx3['columnIndex'] = null
                    }
                } else {
                    _0xecbcx4 = _0xecbcx5['dataSource']['indexOf'](_0xecbcx2['record']);
                    _0xecbcx3['position']['setAll']();
                    _0xecbcx3['record'] = _0xecbcx3['column'] = _0xecbcx3['recordIndex'] = _0xecbcx3['columnIndex'] = null;
                    if (_0xecbcx4 !== -1 && _0xecbcx5['bufferedRenderer']) {
                        _0xecbcx3['lastKeyEvent'] = null;
                        _0xecbcx5['bufferedRenderer']['scrollTo'](_0xecbcx4, false, _0xecbcx3['afterBufferedScrollTo'], _0xecbcx3)
                    }
                }
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TouchScroll', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.scroll.TouchScroller',
    minVersion: '5.1.0',
    maxVersion: '6.2.0',
    overrides: {
        privates: {
            onEvent: function(_0xecbcx2) {
                var _0xecbcx1 = this;
                if (!_0xecbcx1[_0xecbcx1['listenerMap'][_0xecbcx2['type']]]) {
                    return
                };
                return this['callParent'](arguments)
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.View', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.view.View',
    minVersion: '5.1.0',
    overrides: {
        handleEvent: function(_0xecbcx6) {
            var _0xecbcx3 = this,
                _0xecbcx5 = _0xecbcx3['keyEventRe']['test'](_0xecbcx6['type']),
                _0xecbcx1 = _0xecbcx3['getNavigationModel']();
            _0xecbcx6['view'] = _0xecbcx3;
            if (_0xecbcx5) {
                _0xecbcx6['item'] = _0xecbcx6['getTarget'](_0xecbcx3['itemSelector']);
                _0xecbcx6['record'] = _0xecbcx1['getRecord'](_0xecbcx6['item'])
            };
            if (!_0xecbcx6['item']) {
                var _0xecbcx2 = _0xecbcx3['editingPlugin'] && _0xecbcx3['editingPlugin']['getActiveEditor'] && _0xecbcx3['editingPlugin']['getActiveEditor']();
                if (!(_0xecbcx2 && _0xecbcx2['getEl']()['contains'](_0xecbcx6['getTarget']()))) {
                    _0xecbcx6['item'] = _0xecbcx6['getTarget'](_0xecbcx3['itemSelector'])
                }
            };
            if (_0xecbcx6['item'] && !_0xecbcx6['record']) {
                _0xecbcx6['record'] = _0xecbcx3['getRecord'](_0xecbcx6['item'])
            };
            if (_0xecbcx3['processUIEvent'](_0xecbcx6) !== false) {
                _0xecbcx3['processSpecialEvent'](_0xecbcx6)
            };
            if (_0xecbcx5 && !Ext['fly'](_0xecbcx6['target'])['isInputField']()) {
                if (_0xecbcx6['getKey']() === _0xecbcx6['SPACE'] || _0xecbcx6['isNavKeyPress'](true)) {
                    _0xecbcx6['preventDefault']()
                }
            };
            _0xecbcx6['view'] = null
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.Scroller', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.scroll.Scroller',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    applyFn: function() {
        var _0xecbcx1 = {
            destroy: function() {
                clearTimeout(this['restoringTimer']);
                this['callParent'](arguments)
            },
            privates: {
                restoreState: function() {
                    var _0xecbcx5 = this,
                        _0xecbcx2 = _0xecbcx5['getScrollElement'](),
                        _0xecbcx3;
                    if (_0xecbcx2) {
                        _0xecbcx3 = _0xecbcx2['dom'];
                        if (_0xecbcx5['trackingScrollTop'] !== undefined) {
                            _0xecbcx5['restoring'] = true;
                            _0xecbcx5['restoringTimer'] = Ext['defer'](function() {
                                _0xecbcx5['restoring'] = false
                            }, 50);
                            _0xecbcx3['scrollTop'] = _0xecbcx5['trackingScrollTop'];
                            _0xecbcx3['scrollLeft'] = _0xecbcx5['trackingScrollLeft']
                        }
                    }
                }
            }
        };
        if (Ext['isIE9m']) {
            _0xecbcx1['privates']['updateSpacerXY'] = function(_0xecbcx5) {
                var _0xecbcx2 = this['getSpacer']();
                if (this['getRtl'] && this['getRtl']()) {
                    _0xecbcx2['rtlSetLocalXY'](_0xecbcx5['x'], _0xecbcx5['y'])
                } else {
                    _0xecbcx2['setLocalXY'](_0xecbcx5['x'], _0xecbcx5['y'])
                }
            }
        };
        Ext['ClassManager']['get'](this['target'])['override'](_0xecbcx1)
    }
});
Ext.define('Ext.ux.Scheduler.patches.Scroller_6_5', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.scroll.Scroller',
    minVersion: '6.5.0',
    overrides: {
        privates: {
            updateDomScrollPosition: function(_0xecbcx5) {
                var _0xecbcx3 = this,
                    _0xecbcx2 = _0xecbcx3['position'],
                    _0xecbcxa = _0xecbcx2['x'],
                    _0xecbcx7 = _0xecbcx2['y'],
                    _0xecbcx9, _0xecbcx6, _0xecbcx1, _0xecbcx4;
                _0xecbcx3['readPosition'](_0xecbcx2);
                _0xecbcx9 = _0xecbcx2['x'];
                _0xecbcx6 = _0xecbcx2['y'];
                _0xecbcx3['positionDirty'] = false;
                if (!_0xecbcx5) {
                    _0xecbcx1 = _0xecbcx9 - _0xecbcxa;
                    _0xecbcx4 = _0xecbcx6 - _0xecbcx7;
                    if (!_0xecbcx3['isScrolling']) {
                        _0xecbcx3['isScrolling'] = Ext['isScrolling'] = true;
                        _0xecbcx3['fireScrollStart'](_0xecbcx9, _0xecbcx6, _0xecbcx1, _0xecbcx4)
                    };
                    _0xecbcx3['fireScroll'](_0xecbcx9, _0xecbcx6, _0xecbcx1, _0xecbcx4);
                    _0xecbcx3['bufferedOnDomScrollEnd'](_0xecbcx9, _0xecbcx6, _0xecbcx1, _0xecbcx4)
                };
                return _0xecbcx2
            }
        },
        getPosition: function() {
            var _0xecbcx1 = this;
            if (_0xecbcx1['positionDirty']) {
                _0xecbcx1['updateDomScrollPosition'](true)
            };
            return _0xecbcx1['position']
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.Queue', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.util.Queue',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        add: function(_0xecbcx4, _0xecbcx2) {
            var _0xecbcx5 = this,
                _0xecbcx1 = _0xecbcx5['getKey'](_0xecbcx4),
                _0xecbcx3;
            if (!(_0xecbcx3 = _0xecbcx5['map'][_0xecbcx1])) {
                ++_0xecbcx5['length'];
                _0xecbcx5['items']['push'](_0xecbcx4);
                _0xecbcx5['map'][_0xecbcx1] = _0xecbcx4
            } else {
                if (_0xecbcx2) {
                    _0xecbcx5['map'][_0xecbcx1] = _0xecbcx4;
                    _0xecbcx5['items'][Ext['Array']['indexOf'](_0xecbcx5['items'], _0xecbcx3)] = _0xecbcx4
                }
            };
            return _0xecbcx4
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.LayoutContext', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.layout.Context',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        queueFlush: function(_0xecbcx2, _0xecbcx1) {
            this['flushQueue']['add'](_0xecbcx2, _0xecbcx1)
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.LayoutContext_6_5', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.layout.Context',
    minVersion: '6.5.0',
    maxVersion: '6.5.1',
    overrides: {
        callLayout: function(_0xecbcx2, _0xecbcx1) {
            this['currentLayout'] = _0xecbcx2;
            if (!_0xecbcx2['destroyed']) {
                _0xecbcx2[_0xecbcx1](this['getCmp'](_0xecbcx2['owner']))
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.Lockable', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.grid.locking.Lockable',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    applyFn: function() {
        if (Ext['firefoxVersion'] > 51 && Ext['supports']['touchScroll'] === 2) {
            Ext['supports']['Touch'] = 0;
            Ext['supports']['TouchEvents'] = 0;
            Ext['supports']['touchScroll'] = 0
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TableLayout', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    requires: 'Ext.ux.Scheduler.patches.Lockable',
    target: 'Ext.view.TableLayout',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        calculate: function(_0xecbcx8) {
            var _0xecbcx17 = this,
                _0xecbcx3 = _0xecbcx8['context'],
                _0xecbcx15 = _0xecbcx8['lockingPartnerContext'],
                _0xecbcxb = _0xecbcx8['headerContext'],
                _0xecbcxf = _0xecbcx8['ownerCtContext'],
                _0xecbcx1 = _0xecbcx17['owner'],
                _0xecbcx5 = _0xecbcxb['getProp']('columnsChanged'),
                _0xecbcx6 = _0xecbcx8['state'],
                _0xecbcx11, _0xecbcx9, _0xecbcx2, _0xecbcxd, _0xecbcxe = _0xecbcx1['body']['dom'],
                _0xecbcxc, _0xecbcxa, _0xecbcx7, _0xecbcx14, _0xecbcx10, _0xecbcx4;
            if (!_0xecbcx1['all']['getCount']() && (!_0xecbcxe || !_0xecbcx1['body']['child']('table'))) {
                _0xecbcx8['setProp']('viewOverflowY', false);
                _0xecbcx17['callParent']([_0xecbcx8]);
                return
            };
            if (_0xecbcx5 === undefined) {
                _0xecbcx17['done'] = false;
                return
            };
            if (_0xecbcx5) {
                if (!(_0xecbcx11 = _0xecbcx6['columnFlusher'])) {
                    _0xecbcx3['queueFlush'](_0xecbcx6['columnFlusher'] = _0xecbcx11 = {
                        ownerContext: _0xecbcx8,
                        columnsChanged: _0xecbcx5,
                        layout: _0xecbcx17,
                        id: _0xecbcx17['columnFlusherId'],
                        flush: _0xecbcx17['flushColumnWidths']
                    }, true)
                };
                if (!_0xecbcx11['flushed']) {
                    _0xecbcx17['done'] = false;
                    return
                }
            };
            if (_0xecbcx8['doSyncRowHeights']) {
                if (!(_0xecbcxd = _0xecbcx6['rowHeightFlusher'])) {
                    if (!(_0xecbcx2 = _0xecbcx6['rowHeights'])) {
                        _0xecbcx6['rowHeights'] = _0xecbcx2 = _0xecbcx8['rowHeightSynchronizer'];
                        _0xecbcx17['owner']['syncRowHeightMeasure'](_0xecbcx2);
                        _0xecbcx8['setProp']('rowHeights', _0xecbcx2)
                    };
                    if (!(_0xecbcx9 = _0xecbcx15['getProp']('rowHeights'))) {
                        _0xecbcx17['done'] = false;
                        return
                    };
                    _0xecbcx3['queueFlush'](_0xecbcx6['rowHeightFlusher'] = _0xecbcxd = {
                        ownerContext: _0xecbcx8,
                        synchronizer: _0xecbcx2,
                        otherSynchronizer: _0xecbcx9,
                        layout: _0xecbcx17,
                        id: _0xecbcx17['rowHeightFlusherId'],
                        flush: _0xecbcx17['flushRowHeights']
                    }, true)
                };
                if (!_0xecbcxd['flushed']) {
                    _0xecbcx17['done'] = false;
                    return
                }
            };
            _0xecbcx17['callParent']([_0xecbcx8]);
            if (!_0xecbcx8['heightModel']['shrinkWrap']) {
                _0xecbcx7 = false;
                if (!_0xecbcxf['heightModel']['shrinkWrap']) {
                    _0xecbcxa = _0xecbcxf['target']['layout']['getContainerSize'](_0xecbcxf);
                    if (!_0xecbcxa['gotHeight']) {
                        _0xecbcx17['done'] = false;
                        return
                    };
                    _0xecbcxc = _0xecbcxe['offsetHeight'];
                    _0xecbcx7 = _0xecbcxc > _0xecbcxa['height']
                };
                _0xecbcx8['setProp']('viewOverflowY', _0xecbcx7)
            };
            if (_0xecbcx17['done'] && Ext['getScrollbarSize']()['height']) {
                if (_0xecbcx15 && _0xecbcx1['isLockedView']) {
                    _0xecbcx14 = _0xecbcx1['lockingPartner'];
                    _0xecbcx10 = _0xecbcx1['scrollFlags']['x'] && _0xecbcx8['headerContext']['state']['boxPlan']['tooNarrow'];
                    _0xecbcx4 = _0xecbcx14['scrollFlags']['x'] && _0xecbcx15['headerContext']['state']['boxPlan']['tooNarrow'];
                    if (_0xecbcx10 !== _0xecbcx4) {
                        if (_0xecbcx4) {
                            _0xecbcx15['setProp']('overflowX', true);
                            _0xecbcx8['setProp']('overflowX', 'scroll')
                        } else {
                            _0xecbcx8['setProp']('overflowX', true);
                            _0xecbcx15['setProp']('overflowX', 'scroll')
                        }
                    } else {
                        _0xecbcx8['setProp']('overflowX', _0xecbcx4);
                        _0xecbcx15['setProp']('overflowX', _0xecbcx10)
                    };
                    _0xecbcx8['setProp']('overflowY', 'scroll')
                } else {
                    if (!_0xecbcx1['isAutoTree']) {
                        _0xecbcx8['setProp']('overflowX', !!_0xecbcx8['headerContext']['state']['boxPlan']['tooNarrow'])
                    }
                }
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.ColumnLayout', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.grid.ColumnLayout',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        calculate: function(_0xecbcx3) {
            var _0xecbcxb = this,
                _0xecbcx1 = _0xecbcxb['owner']['grid'],
                _0xecbcxd = _0xecbcx3['viewContext'],
                _0xecbcx2 = _0xecbcx3['state'],
                _0xecbcx5 = _0xecbcx3['context'],
                _0xecbcx8, _0xecbcxf, _0xecbcx10, _0xecbcx11, _0xecbcx9, _0xecbcxc, _0xecbcxe, _0xecbcx6, _0xecbcx7, _0xecbcx4;
            _0xecbcxb['callSuper']([_0xecbcx3]);
            if (_0xecbcx1 && _0xecbcx2['parallelDone']) {
                _0xecbcx8 = _0xecbcxd['lockingPartnerContext'];
                if (_0xecbcx8) {
                    _0xecbcxf = _0xecbcx8['target']['ownerCt'];
                    if (!_0xecbcxf['isVisible']() || _0xecbcxf['collapsed']) {
                        _0xecbcx8 = null
                    }
                };
                _0xecbcx10 = _0xecbcx1['ownerGrid'];
                if (_0xecbcx10['forceFit'] && !_0xecbcx2['reflexed']) {
                    if (_0xecbcxb['convertWidthsToFlexes'](_0xecbcx3)) {
                        _0xecbcxb['cacheFlexes'](_0xecbcx3);
                        _0xecbcxb['done'] = false;
                        _0xecbcx3['invalidate']({
                            state: {
                                reflexed: true,
                                scrollbarAdjustment: _0xecbcxb['getScrollbarAdjustment'](_0xecbcx3)
                            }
                        });
                        return
                    }
                };
                if ((_0xecbcx11 = _0xecbcx2['columnsChanged']) === undefined) {
                    _0xecbcx9 = _0xecbcx3['target']['getVisibleGridColumns']();
                    _0xecbcx11 = false;
                    for (_0xecbcxe = 0, _0xecbcxc = _0xecbcx9['length']; _0xecbcxe < _0xecbcxc; _0xecbcxe++) {
                        _0xecbcx6 = _0xecbcx5['getCmp'](_0xecbcx9[_0xecbcxe]);
                        if (!_0xecbcx6['lastBox'] || _0xecbcx6['props']['width'] !== _0xecbcx6['lastBox']['width']) {
                            (_0xecbcx11 || (_0xecbcx11 = []))[_0xecbcxe] = _0xecbcx6
                        }
                    };
                    _0xecbcx2['columnsChanged'] = _0xecbcx11;
                    _0xecbcx3['setProp']('columnsChanged', _0xecbcx11)
                };
                if (_0xecbcx3['manageScrollbar']) {
                    _0xecbcx7 = _0xecbcxb['getScrollbarAdjustment'](_0xecbcx3);
                    if (_0xecbcx7) {
                        _0xecbcx4 = _0xecbcxd['getProp']('viewOverflowY');
                        if (_0xecbcx4 === undefined) {
                            _0xecbcxb['done'] = false;
                            return
                        };
                        if (!_0xecbcx4) {
                            if (_0xecbcx8) {
                                _0xecbcx8['invalidate']();
                                _0xecbcx8['headerContext']['invalidate']()
                            };
                            _0xecbcxd['invalidate']();
                            _0xecbcx3['invalidate']({
                                state: {
                                    scrollbarAdjustment: 0
                                }
                            })
                        }
                    }
                }
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.ToolTip', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.tip.ToolTip',
    minVersion: '6.0.0',
    applyFn: function() {
        var _0xecbcx1 = {
            setTarget: function(_0xecbcx3) {
                var _0xecbcx2 = this;
                if (_0xecbcx2['target']) {
                    var _0xecbcx5 = Ext['get'](_0xecbcx2['target']);
                    if (_0xecbcx5) {
                        _0xecbcx2['mun'](_0xecbcx5, {
                            mouseover: _0xecbcx2['onTargetOver'],
                            tap: _0xecbcx2['onTargetOver'],
                            mouseout: _0xecbcx2['onTargetOut'],
                            mousemove: _0xecbcx2['onMouseMove'],
                            scope: _0xecbcx2
                        })
                    }
                };
                _0xecbcx2['target'] = Ext['get'](_0xecbcx3);
                if (_0xecbcx2['target']) {
                    _0xecbcx2['mon'](_0xecbcx2['target'], {
                        mouseover: _0xecbcx2['onTargetOver'],
                        tap: _0xecbcx2['onTargetOver'],
                        mouseout: _0xecbcx2['onTargetOut'],
                        mousemove: _0xecbcx2['onMouseMove'],
                        scope: _0xecbcx2
                    })
                };
                if (_0xecbcx2['anchor']) {
                    _0xecbcx2['anchorTarget'] = _0xecbcx2['target']
                }
            }
        };
        if (Ext['getVersion']()['isLessThan']('6.0.2')) {
            _0xecbcx1['afterSetPosition'] = function(_0xecbcx2, _0xecbcx3) {
                var _0xecbcx5 = this;
                _0xecbcx5['callParent'](arguments);
                if (_0xecbcx5['anchor']) {
                    if (!_0xecbcx5['anchorEl']['isVisible']()) {
                        _0xecbcx5['anchorEl']['show']()
                    };
                    _0xecbcx5['syncAnchor']()
                } else {
                    _0xecbcx5['anchorEl']['hide']()
                }
            }
        };
        Ext['ClassManager']['get'](this['target'])['override'](_0xecbcx1)
    }
});
Ext.define('Ext.ux.Scheduler.patches.AbstractView', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.view.AbstractView',
    minVersion: '6.2.0',
    obsoleteTestName: 'patches/002_abstract_view.t.js',
    overrides: {
        setItemsDraggable: function(_0xecbcx2) {
            var _0xecbcx5 = this,
                _0xecbcx1;
            _0xecbcx1 = _0xecbcx5['callParent']([_0xecbcx2]);
            if (!_0xecbcx2 && _0xecbcx5['viewStyleSheet'] && _0xecbcx5['viewStyleSheet']['cssRules']['length'] === 0) {
                _0xecbcx5['viewStyleSheet']['ownerNode']['parentNode']['removeChild'](_0xecbcx5['viewStyleSheet']['ownerNode']);
                _0xecbcx5['viewStyleSheet'] = Ext['view']['AbstractView']['prototype']['viewStyleSheet'] = null
            };
            return _0xecbcx1
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TableScroller', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    minVersion: '6.2.1',
    maxVersion: '6.5.0',
    target: 'Ext.scroll.TableScroller',
    overrides: {
        privates: {
            onDomScroll: function() {
                var _0xecbcx4 = this,
                    _0xecbcx2 = _0xecbcx4['position'],
                    _0xecbcx3 = _0xecbcx2['x'],
                    _0xecbcx5 = _0xecbcx2['y'],
                    _0xecbcx1, _0xecbcx7, _0xecbcx9, _0xecbcx6;
                _0xecbcx2 = _0xecbcx4['updateDomScrollPosition']();
                if (_0xecbcx4['restoreTimer']) {
                    clearTimeout(_0xecbcx4['onDomScrollEnd']['timer']);
                    return
                };
                _0xecbcx1 = _0xecbcx2['x'];
                _0xecbcx7 = _0xecbcx2['y'];
                _0xecbcx9 = _0xecbcx1 - _0xecbcx3;
                _0xecbcx6 = _0xecbcx7 - _0xecbcx5;
                if (!_0xecbcx4['isScrolling']) {
                    _0xecbcx4['isScrolling'] = Ext['isScrolling'] = true;
                    _0xecbcx4['fireScrollStart'](_0xecbcx1, _0xecbcx7, _0xecbcx9, _0xecbcx6)
                };
                _0xecbcx4['fireScroll'](_0xecbcx1, _0xecbcx7, _0xecbcx9, _0xecbcx6);
                _0xecbcx4['bufferedOnDomScrollEnd'](_0xecbcx1, _0xecbcx7, _0xecbcx9, _0xecbcx6)
            },
            invokePartners: function(_0xecbcx1, _0xecbcxa, _0xecbcx9, _0xecbcx3, _0xecbcx7) {
                var _0xecbcx6 = this,
                    _0xecbcx8 = _0xecbcx6['_partners'],
                    _0xecbcx5, _0xecbcx2, _0xecbcx4;
                if (!_0xecbcx6['suspendSync']) {
                    _0xecbcx6['invokingPartners'] = true;
                    for (_0xecbcx2 in _0xecbcx8) {
                        _0xecbcx4 = _0xecbcx8[_0xecbcx2]['axes'];
                        _0xecbcx5 = _0xecbcx8[_0xecbcx2]['scroller'];
                        if (!_0xecbcx5['invokingPartners']) {
                            _0xecbcx5[_0xecbcx1](_0xecbcx6, _0xecbcx4['x'] ? _0xecbcxa : null, _0xecbcx4['y'] ? _0xecbcx9 : null, _0xecbcx3, _0xecbcx7)
                        }
                    };
                    _0xecbcx6['invokingPartners'] = false
                }
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TableScroller2', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    minVersion: '6.2.1',
    maxVersion: '6.2.2',
    target: 'Ext.scroll.TableScroller',
    overrides: {
        privates: {
            getScrollIntoViewXY: function(_0xecbcx3, _0xecbcx4) {
                var _0xecbcx2 = this['getLockingScroller'](),
                    _0xecbcx1 = this['getPosition'](),
                    _0xecbcx5;
                if (_0xecbcx2) {
                    _0xecbcx1['y'] = _0xecbcx2['position']['y']
                };
                _0xecbcx5 = Ext['fly'](_0xecbcx3)['getScrollIntoViewXY'](this['getElement'](), _0xecbcx1['x'], _0xecbcx1['y']);
                _0xecbcx5['x'] = (_0xecbcx4 === false) ? _0xecbcx1['x'] : _0xecbcx5['x'];
                if (_0xecbcx2) {
                    _0xecbcx5['y'] = Ext['fly'](_0xecbcx3)['getScrollIntoViewXY'](_0xecbcx2['getElement'](), _0xecbcx1['x'], _0xecbcx1['y'])['y']
                };
                return _0xecbcx5
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.Ie9FormFieldText', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.form.field.Text',
    ieOnly: true,
    minVersion: '6.0.0',
    reportUrl: null,
    obsoleteTestName: 'patches/003_ie9_form_field_text.t.js',
    description: ['Text field being a part of grid cell editor might find itself in a situation when it\'s detached ', 'from the document and requested to select text inside itself, by being focused for example, simultaneously '].join(),
    applyFn: function() {
        Ext['isIE9'] && Ext['ClassManager']['get'](this['target'])['override']({
            selectTextAsapId: null,
            selectText: function(_0xecbcx3, _0xecbcx1) {
                var _0xecbcx2 = this;
                if (!_0xecbcx2['destroying'] && !_0xecbcx2['destroyed'] && _0xecbcx2['inputEl']) {
                    try {
                        Ext['asapCancel'](_0xecbcx2['selectTextAsapId']), _0xecbcx2['selectTextAsapId'] = null;
                        _0xecbcx2['callParent']([_0xecbcx3, _0xecbcx1])
                    } catch (c) {
                        _0xecbcx2['selectTextAsapId'] = Ext['asap'](_0xecbcx2['selectText'], _0xecbcx2, [_0xecbcx3, _0xecbcx1])
                    }
                }
            }
        })
    }
});
Ext.define('Ext.ux.Scheduler.tooltip.EventTip', {
    extend: 'Ext.tip.ToolTip',
    alias: 'widget.scheduler_eventtip',
    uses: ['Ext.Number', 'Ext.util.Format', 'Ext.util.Region', 'Ext.util.Point'],
    config: {
        view: null
    },
    componentCls: 'sch-tooltip-eventtip',
    anchor: 't',
    constraintInsets: '7 -7 -7 7',
    initComponent: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['callParent'](arguments);
        _0xecbcx1['on']('beforeshow', _0xecbcx1['onTipBeforeShow'], _0xecbcx1)
    },
    getAlignRegion: function() {
        var _0xecbcx9 = this,
            _0xecbcx6 = _0xecbcx9['anchorEl'],
            _0xecbcx5 = _0xecbcx9['getAnchorAlign'](),
            _0xecbcxa, _0xecbcx7, _0xecbcx3, _0xecbcx2 = _0xecbcx9['mouseOffset'],
            _0xecbcx4, _0xecbcx1;
        if (!_0xecbcx9['anchorSize']) {
            _0xecbcx6['addCls'](Ext['baseCSSPrefix'] + 'tip-anchor-top');
            _0xecbcx6['show']();
            _0xecbcx9['anchorSize'] = new Ext['util'].Offset(_0xecbcx6['getWidth'](), _0xecbcx6['getHeight']());
            _0xecbcx6['removeCls'](Ext['baseCSSPrefix'] + 'tip-anchor-top');
            _0xecbcx6['hide']()
        };
        if ((_0xecbcx9['anchor'] || _0xecbcx9['align']) && _0xecbcx9['anchorToTarget'] && !_0xecbcx9['trackMouse']) {
            _0xecbcx3 = _0xecbcx9['currentTarget']['getRegion']();
            if (!Ext['isGarbage'](_0xecbcx9['currentTarget']['dom']) && _0xecbcx9['getView']()['getMode']() === 'horizontal' && _0xecbcx9['pointerEvent']) {
                _0xecbcx3 = _0xecbcx3['intersect'](new Ext['util'].Region(_0xecbcx3['top'], _0xecbcx9['pointerEvent']['getPoint']()['x'] + _0xecbcx9['getRegion']()['width'] / 2, _0xecbcx3['bottom'], _0xecbcx9['pointerEvent']['getPoint']()['x'] + (-_0xecbcx9['getRegion']()['width'] / 2))) || _0xecbcx3
            }
        } else {
            _0xecbcx3 = _0xecbcx9['pointerEvent'] ? _0xecbcx9['pointerEvent']['getPoint']()['adjust'](-Math['abs'](_0xecbcx2[1]), Math['abs'](_0xecbcx2[0]), Math['abs'](_0xecbcx2[1]), -Math['abs'](_0xecbcx2[0])) : new Ext['util'].Point();
            if (!_0xecbcx9['anchor']) {
                _0xecbcxa = true;
                if (_0xecbcx2[0] > 0) {
                    if (_0xecbcx2[1] > 0) {
                        _0xecbcx5 = 'tl-br'
                    } else {
                        _0xecbcx5 = 'bl-tr'
                    }
                } else {
                    if (_0xecbcx2[1] > 0) {
                        _0xecbcx5 = 'tr-bl'
                    } else {
                        _0xecbcx5 = 'br-tl'
                    }
                }
            }
        };
        _0xecbcx7 = {
            align: _0xecbcx9['convertPositionSpec'](_0xecbcx5),
            axisLock: _0xecbcx9['axisLock'],
            target: _0xecbcx3,
            overlap: _0xecbcxa,
            offset: _0xecbcx9['targetOffset']
        };
        if (_0xecbcx9['anchor']) {
            _0xecbcx7['anchorSize'] = _0xecbcx9['anchorSize']
        };
        if (_0xecbcx9['constrainPosition']) {
            _0xecbcx4 = _0xecbcx9['constrainTo'] || Ext['getBody']();
            if (!_0xecbcx4['isRegion']) {
                _0xecbcx4 = Ext['util']['Region']['getRegion'](_0xecbcx4)
            };
            if (_0xecbcx9['constraintInsets']) {
                _0xecbcx1 = _0xecbcx9['constraintInsets'];
                if (!Ext['isObject'](_0xecbcx1)) {
                    _0xecbcx1 = Ext['util']['Format']['parseBox'](_0xecbcx1)
                };
                _0xecbcx4 = _0xecbcx4['copy']()['adjust'](_0xecbcx1['top'], _0xecbcx1['right'], _0xecbcx1['bottom'], _0xecbcx1['left'])
            };
            _0xecbcx7['inside'] = _0xecbcx4
        };
        return _0xecbcx9['getRegion']()['alignTo'](_0xecbcx7)
    },
    onTipBeforeShow: function(_0xecbcx4) {
        if (!_0xecbcx4['triggerElement'] || !_0xecbcx4['triggerElement']['id']) {
            return false
        };
        var _0xecbcx5 = _0xecbcx4['getView']();
        var _0xecbcx9 = Ext['all']('window[modal=true]{isVisible()}');
        var _0xecbcx2 = Ext['Array']['findBy'](_0xecbcx9, function(_0xecbcx7) {
            return _0xecbcx5 !== _0xecbcx7 && !_0xecbcx5['isDescendantOf'](_0xecbcx7)
        });
        if (_0xecbcx2) {
            return false
        };
        var _0xecbcx1 = _0xecbcx5['resolveEventRecord'](_0xecbcx4['triggerElement']);
        if (!_0xecbcx1 || _0xecbcx5['fireEvent']('beforetooltipshow', _0xecbcx5, _0xecbcx1) === false) {
            return false
        };
        var _0xecbcx6 = _0xecbcx5['getDataForTooltipTpl'](_0xecbcx1, _0xecbcx4['triggerElement']),
            _0xecbcx3;
        if (!_0xecbcx6) {
            return false
        };
        _0xecbcx3 = _0xecbcx5['tooltipTpl']['apply'](_0xecbcx6);
        if (!_0xecbcx3) {
            return false
        };
        _0xecbcx4['update'](_0xecbcx3)
    }
}, function(_0xecbcx1) {
    var _0xecbcx5 = 't';

    function _0xecbcx2(_0xecbcx9) {
        var _0xecbcx6 = Ext['util']['Region'];
        if (_0xecbcx9 && !_0xecbcx9['isRegion'] && _0xecbcx9['isComponent']) {
            _0xecbcx9 = _0xecbcx9['getConstrainRegion']()
        } else {
            if (_0xecbcx9 && !_0xecbcx9['isRegion'] && _0xecbcx9['isElement']) {
                _0xecbcx9 = _0xecbcx9['getConstrainRegion']()
            } else {
                if (_0xecbcx9 && !_0xecbcx9['isRegion'] && Ext['isElement'](_0xecbcx9)) {
                    _0xecbcx9 = _0xecbcx6['getRegion'](_0xecbcx9)
                } else {
                    if (_0xecbcx9 && !_0xecbcx9['isRegion']) {
                        _0xecbcx9 = _0xecbcx6['from'](_0xecbcx9)
                    }
                }
            }
        };
        return _0xecbcx9
    }

    function _0xecbcx3(_0xecbcx9) {
        var _0xecbcx6 = Ext['util']['Point'];
        if (_0xecbcx9 && !_0xecbcx9['isPoint'] && Ext['isArray'](_0xecbcx9)) {
            _0xecbcx9 = new _0xecbcx6(_0xecbcx9[0] || 0, _0xecbcx9[1] || 0)
        } else {
            if (_0xecbcx9 && !_0xecbcx9['isPoint']) {
                _0xecbcx9 = _0xecbcx6['from'](_0xecbcx9)
            }
        };
        return _0xecbcx9
    }

    function _0xecbcx4(_0xecbcx6, _0xecbcx9) {
        return (_0xecbcx6['right'] - _0xecbcx6['left']) >= (_0xecbcx9['right'] - _0xecbcx9['left']) && (_0xecbcx6['bottom'] - _0xecbcx6['top']) >= (_0xecbcx9['bottom'] - _0xecbcx9['top'])
    }
    Ext['versions']['extjs']['isLessThan']('6.2.0') && Ext['override'](_0xecbcx1, {
        show: function() {
            var _0xecbcx9 = this,
                _0xecbcx6 = _0xecbcx9['getView']();
            _0xecbcx9['callParent'](arguments);
            if (_0xecbcx9['triggerElement'] && _0xecbcx6['getMode']() === 'horizontal') {
                _0xecbcx9['alignTipToEvent'](_0xecbcx9['triggerElement'], _0xecbcx9['constrainPosition'] && _0xecbcx9['constrainTo'], _0xecbcx9['targetXY'])
            }
        },
        alignTipToEvent: function(_0xecbcx6, _0xecbcx1a, _0xecbcx24) {
            var _0xecbcx11 = Ext['util']['Region'],
                _0xecbcxf = Ext['util']['Point'],
                _0xecbcx7 = Ext['Number']['constrain'],
                _0xecbcx1c = this,
                _0xecbcxb = window['tipAnchor'] || _0xecbcx1c['origAnchor'] || _0xecbcx5,
                _0xecbcxd = _0xecbcx1c['rtl'],
                _0xecbcx19, _0xecbcx14, _0xecbcxa, _0xecbcx10, _0xecbcx22, _0xecbcx15, _0xecbcx23, _0xecbcx8, _0xecbcx9, _0xecbcx13, _0xecbcxc, _0xecbcx18, _0xecbcx12, _0xecbcx17, _0xecbcx16, _0xecbcxe;
            _0xecbcx22 = _0xecbcx2(_0xecbcx1a || Ext['getBody']());
            _0xecbcx10 = _0xecbcx22['intersect'](_0xecbcx2(_0xecbcx6));
            if (_0xecbcx10) {
                _0xecbcx19 = _0xecbcx1c['getWidth'](), _0xecbcx14 = _0xecbcx1c['getHeight'](), _0xecbcx13 = _0xecbcx1c['anchorEl'] && _0xecbcx1c['anchorEl']['getSize']() || {
                    width: 0,
                    height: 0
                };
                _0xecbcx13['width'] /= 2;
                _0xecbcx13['height'] /= 2;
                _0xecbcx24 = _0xecbcx24 && _0xecbcx3(_0xecbcx24);
                if (!_0xecbcx24 || !_0xecbcx10['contains'](_0xecbcx24)) {
                    _0xecbcx24 = new _0xecbcxf((_0xecbcx10['left'] + _0xecbcx10['right']) / 2, (_0xecbcx10['top'] + _0xecbcx10['bottom']) / 2)
                };
                _0xecbcx15 = {
                    top: new _0xecbcx11(_0xecbcx22['top'], _0xecbcx22['right'], _0xecbcx10['top'], _0xecbcx22['left']),
                    bottom: new _0xecbcx11(_0xecbcx10['bottom'], _0xecbcx22['right'], _0xecbcx22['bottom'], _0xecbcx22['left']),
                    left: new _0xecbcx11(_0xecbcx22['top'], _0xecbcx10['left'], _0xecbcx22['bottom'], _0xecbcx22['left']),
                    right: new _0xecbcx11(_0xecbcx22['top'], _0xecbcx22['right'], _0xecbcx22['bottom'], _0xecbcx10['right'])
                };
                _0xecbcx23 = {
                    top: new _0xecbcx11(_0xecbcx15['top']['bottom'] - _0xecbcx14 - _0xecbcx13['height'], _0xecbcx24['x'] + _0xecbcx19 / 2, _0xecbcx15['top']['bottom'] - _0xecbcx13['height'], _0xecbcx24['x'] - _0xecbcx19 / 2),
                    bottom: new _0xecbcx11(_0xecbcx15['bottom']['top'] + _0xecbcx13['height'], _0xecbcx24['x'] + _0xecbcx19 / 2, _0xecbcx15['bottom']['top'] + _0xecbcx14 + _0xecbcx13['height'], _0xecbcx24['x'] - _0xecbcx19 / 2),
                    left: new _0xecbcx11(_0xecbcx24['y'] - _0xecbcx14 / 2, _0xecbcx15['left']['right'] - _0xecbcx13['width'], _0xecbcx24['y'] + _0xecbcx14 / 2, _0xecbcx15['left']['right'] - _0xecbcx19 - _0xecbcx13['width']),
                    right: new _0xecbcx11(_0xecbcx24['y'] - _0xecbcx14 / 2, _0xecbcx15['right']['left'] + _0xecbcx19 + _0xecbcx13['width'], _0xecbcx24['y'] - _0xecbcx14 / 2, _0xecbcx15['right']['left'] + _0xecbcx13['width'])
                };
                _0xecbcx8 = {
                    top: new _0xecbcx11(_0xecbcx15['top']['bottom'] - _0xecbcx14 - _0xecbcx13['height'], _0xecbcx24['x'] + _0xecbcx19 / 2, _0xecbcx15['top']['bottom'], _0xecbcx24['x'] - _0xecbcx19 / 2),
                    bottom: new _0xecbcx11(_0xecbcx15['bottom']['top'], _0xecbcx24['x'] + _0xecbcx19 / 2, _0xecbcx15['bottom']['top'] + _0xecbcx14 + _0xecbcx13['height'], _0xecbcx24['x'] - _0xecbcx19 / 2),
                    left: new _0xecbcx11(_0xecbcx24['y'] - _0xecbcx14 / 2, _0xecbcx15['left']['right'], _0xecbcx24['y'] + _0xecbcx14 / 2, _0xecbcx15['left']['right'] - _0xecbcx19 - _0xecbcx13['width']),
                    right: new _0xecbcx11(_0xecbcx24['y'] - _0xecbcx14 / 2, _0xecbcx15['right']['left'] + _0xecbcx19 + _0xecbcx13['width'], _0xecbcx24['y'] - _0xecbcx14 / 2, _0xecbcx15['right']['left'])
                };
                switch (_0xecbcxb['charAt'](0)) {
                    case 't':
                        _0xecbcx9 = ['top', 'bottom', _0xecbcxd ? 'right' : 'left', _0xecbcxd ? 'left' : 'right'];
                        break;
                    case 'r':
                        _0xecbcx9 = ['right', 'left', 'top', 'bottom'];
                        break;
                    case 'b':
                        _0xecbcx9 = ['bottom', 'top', _0xecbcxd ? 'right' : 'left', _0xecbcxd ? 'left' : 'right'];
                        break;
                    case 'l':
                        _0xecbcx9 = ['left', 'right', 'top', 'bottom'];
                        break;
                    default:
                        Ext['Error']['raise']('Unknown anchor')
                };
                _0xecbcxc = Ext['Array']['findBy'](_0xecbcx9, function(_0xecbcx1d) {
                    var _0xecbcx1f = _0xecbcx15[_0xecbcx1d],
                        _0xecbcx1b = _0xecbcx8[_0xecbcx1d];
                    return _0xecbcx4(_0xecbcx1f, _0xecbcx1b)
                });
                if (_0xecbcxc) {
                    _0xecbcx18 = _0xecbcx15[_0xecbcxc];
                    _0xecbcx12 = _0xecbcx8[_0xecbcxc];
                    _0xecbcx17 = _0xecbcx23[_0xecbcxc];
                    if (_0xecbcx18['contains'](_0xecbcx12)) {
                        _0xecbcxa = 0;
                        _0xecbcxe = [_0xecbcx17['x'], _0xecbcx17['y']]
                    } else {
                        _0xecbcx16 = _0xecbcx1c['getConstrainVector'](_0xecbcx12);
                        _0xecbcxe = _0xecbcx1c['getXY']();
                        _0xecbcxe = [_0xecbcxe[0] + _0xecbcx16[0], _0xecbcxe[1] + _0xecbcx16[1]];
                        _0xecbcx1c['setXY'](_0xecbcxe);
                        _0xecbcx16 = _0xecbcx1c['getConstrainVector'](_0xecbcx18);
                        if (_0xecbcxc == 'left' || _0xecbcxc == 'right') {
                            _0xecbcxa = -_0xecbcx16[1]
                        } else {
                            if (_0xecbcxc == 'top' || _0xecbcxc == 'bottom') {
                                _0xecbcxa = -_0xecbcx16[0]
                            }
                        };
                        _0xecbcxe = [_0xecbcxe[0] + _0xecbcx16[0], _0xecbcxe[1] + _0xecbcx16[1]]
                    };
                    switch (_0xecbcxc) {
                        case 'top':
                            _0xecbcx1c['tipAnchor'] = 'bottom';
                            _0xecbcx1c['anchorOffset'] = _0xecbcx7(_0xecbcx19 / 2 - 20 + _0xecbcxa, 0, _0xecbcx19 - 40);
                            break;
                        case 'right':
                            _0xecbcx1c['tipAnchor'] = 'left';
                            _0xecbcx1c['anchorOffset'] = _0xecbcx7(_0xecbcx14 / 2 - 12 + _0xecbcxa, 0, _0xecbcx14 - 24);
                            break;
                        case 'bottom':
                            _0xecbcx1c['tipAnchor'] = 'top';
                            _0xecbcx1c['anchorOffset'] = _0xecbcx7(_0xecbcx19 / 2 - 20 + _0xecbcxa, 0, _0xecbcx19 - 40);
                            break;
                        case 'left':
                            _0xecbcx1c['tipAnchor'] = 'right';
                            _0xecbcx1c['anchorOffset'] = _0xecbcx7(_0xecbcx14 / 2 - 12 + _0xecbcxa, 0, _0xecbcx14 - 24);
                            break
                    };
                    _0xecbcx1c['anchorEl']['removeCls'](Ext['Array']['map'](_0xecbcx9, function(_0xecbcx1b) {
                        return Ext['baseCSSPrefix'] + 'tip-anchor-' + _0xecbcx1b
                    }));
                    _0xecbcx1c['anchorEl']['addCls'](Ext['baseCSSPrefix'] + 'tip-anchor-' + _0xecbcx1c['tipAnchor']);
                    _0xecbcx1c['syncAnchor']();
                    _0xecbcx1c['setXY'](_0xecbcxe)
                } else {}
            }
        }
    })
});
Ext.define('Ext.ux.Scheduler.mixin.TimelineView', {
    extend: 'Ext.ux.Scheduler.mixin.AbstractTimelineView',
    requires: ['Ext.tip.ToolTip', 'Ext.ux.Scheduler.patches.NavigationModel6_0_2', 'Ext.ux.Scheduler.patches.TouchScroll', 'Ext.ux.Scheduler.patches.View', 'Ext.ux.Scheduler.patches.Scroller', 'Ext.ux.Scheduler.patches.Scroller_6_5', 'Ext.ux.Scheduler.patches.Queue', 'Ext.ux.Scheduler.patches.LayoutContext', 'Ext.ux.Scheduler.patches.LayoutContext_6_5', 'Ext.ux.Scheduler.patches.TableLayout', 'Ext.ux.Scheduler.patches.ColumnLayout', 'Ext.ux.Scheduler.patches.ToolTip', 'Ext.ux.Scheduler.patches.AbstractView', 'Ext.ux.Scheduler.patches.TableScroller', 'Ext.ux.Scheduler.patches.TableScroller2', 'Ext.ux.Scheduler.patches.Ie9FormFieldText', 'Ext.ux.Scheduler.tooltip.EventTip'],
    tip: null,
    overScheduledEventClass: 'sch-event-hover',
    ScheduleBarEvents: ['mousedown', 'mouseup', 'click', 'dblclick', 'longpress', 'contextmenu'],
    ResourceRowEvents: ['keydown', 'keyup'],
    preventOverCls: false,
    hoveredEventNode: null,
    _initializeTimelineView: function() {
        this['callParent'](arguments);
        this['on']('destroy', this._onDestroy, this);
        this['on']('afterrender', this._onAfterRender, this);
        this['setMode'](this['mode']);
        this['enableBubble']('columnwidthchange');
        this['addCls']('sch-timelineview');
        if (this['readOnly']) {
            this['addCls'](this['_cmpCls'] + '-readonly')
        };
        this['addCls'](this._cmpCls);
        if (this['eventAnimations']) {
            this['addCls']('sch-animations-enabled')
        }
    },
    handleScheduleBarEvent: function(_0xecbcx2, _0xecbcx1) {
        this['fireEvent'](this['scheduledEventName'] + _0xecbcx2['type'], this, this['resolveEventRecord'](_0xecbcx1), _0xecbcx2)
    },
    handleResourceRowEvent: function(_0xecbcx1, _0xecbcx2) {
        this['fireEvent'](this['scheduledEventName'] + _0xecbcx1['type'], this, this['resolveEventRecordFromResourceRow'](_0xecbcx2), _0xecbcx1)
    },
    _onDestroy: function() {
        if (this['tip']) {
            this['tip']['destroy']()
        }
    },
    _onAfterRender: function() {
        if (this['overScheduledEventClass']) {
            this['setMouseOverEnabled'](true)
        };
        if (this['tooltipTpl']) {
            if (typeof this['tooltipTpl'] === 'string') {
                this['tooltipTpl'] = new Ext.XTemplate(this['tooltipTpl'])
            };
            this['el']['on']('mousemove', this['setupTooltip'], this, {
                single: true
            })
        };
        var _0xecbcx5 = this['bufferedRenderer'];
        if (_0xecbcx5) {
            this['patchBufferedRenderingPlugin'](_0xecbcx5);
            this['patchBufferedRenderingPlugin'](this['lockingPartner']['bufferedRenderer'])
        };
        this['setupTimeCellEvents']();
        var _0xecbcx2 = {
            delegate: this['eventSelector'],
            scope: this
        };
        var _0xecbcx1 = {
            delegate: this['rowSelector'],
            scope: this
        };
        Ext['Array']['each'](this.ScheduleBarEvents, function(_0xecbcx3) {
            _0xecbcx2[_0xecbcx3] = this['handleScheduleBarEvent']
        }, this);
        Ext['Array']['each'](this.ResourceRowEvents, function(_0xecbcx3) {
            _0xecbcx1[_0xecbcx3] = this['handleResourceRowEvent']
        }, this);
        this['el']['on'](_0xecbcx2);
        this['el']['on'](_0xecbcx1)
    },
    patchBufferedRenderingPlugin: function(_0xecbcx5) {
        var _0xecbcx2 = this;
        var _0xecbcx1 = _0xecbcx5['setBodyTop'];
        _0xecbcx5['setBodyTop'] = function(_0xecbcx3, _0xecbcx4) {
            var _0xecbcx6 = _0xecbcx1['apply'](this, arguments);
            _0xecbcx2['fireEvent']('bufferedrefresh', this);
            return _0xecbcx6
        }
    },
    setMouseOverEnabled: function(_0xecbcx1) {
        this[_0xecbcx1 ? 'mon' : 'mun'](this['el'], {
            mouseover: this['onEventMouseOver'],
            mouseout: this['onEventMouseOut'],
            delegate: this['eventSelector'],
            scope: this
        });
        if (!_0xecbcx1) {
            this['getEl']()['select']('.' + this['overScheduledEventClass'])['removeCls'](this['overScheduledEventClass'])
        }
    },
    onEventMouseOver: function(_0xecbcx5, _0xecbcx1) {
        if (_0xecbcx1 !== this['hoveredEventNode'] && !this['preventOverCls']) {
            this['hoveredEventNode'] = _0xecbcx1;
            Ext['fly'](_0xecbcx1)['addCls'](this['overScheduledEventClass']);
            var _0xecbcx2 = this['resolveEventRecord'](_0xecbcx1);
            if (_0xecbcx2) {
                this['fireEvent']('eventmouseenter', this, _0xecbcx2, _0xecbcx5)
            }
        }
    },
    onEventMouseOut: function(_0xecbcx2, _0xecbcx1) {
        if (this['hoveredEventNode']) {
            if (!_0xecbcx2['within'](this['hoveredEventNode'], true, true)) {
                Ext['fly'](this['hoveredEventNode'])['removeCls'](this['overScheduledEventClass']);
                this['fireEvent']('eventmouseleave', this, this['resolveEventRecord'](this['hoveredEventNode']), _0xecbcx2);
                this['hoveredEventNode'] = null
            }
        }
    },
    highlightItem: function(_0xecbcx2) {
        if (_0xecbcx2) {
            var _0xecbcx1 = this;
            _0xecbcx1['clearHighlight']();
            _0xecbcx1['highlightedItem'] = _0xecbcx2;
            Ext['fly'](_0xecbcx2)['addCls'](_0xecbcx1['overItemCls'])
        }
    },
    setupTooltip: function() {
        var _0xecbcx1 = this,
            _0xecbcx2 = _0xecbcx1['getEl']();
        _0xecbcx1['tip'] = new Ext.ux.Scheduler['tooltip'].EventTip(Ext.apply({
            view: _0xecbcx1,
            delegate: _0xecbcx1['eventSelector'],
            target: _0xecbcx2,
            constrainTo: _0xecbcx1['grid']['getEl'](),
            rtl: _0xecbcx1['rtl']
        }, _0xecbcx1['tipCfg']));
        if (Ext['supports']['Touch']) {
            _0xecbcx1['el']['un']({
                touchmove: _0xecbcx1['setupTooltip'],
                mousemove: _0xecbcx1['setupTooltip'],
                scope: _0xecbcx1
            })
        }
    },
    getHorizontalTimeAxisColumn: function() {
        if (!this['timeAxisColumn']) {
            this['timeAxisColumn'] = this['headerCt']['down']('timeaxiscolumn');
            if (this['timeAxisColumn']) {
                this['timeAxisColumn']['on']('destroy', function() {
                    this['timeAxisColumn'] = null
                }, this)
            }
        };
        return this['timeAxisColumn']
    },
    getDataForTooltipTpl: function(_0xecbcx1, _0xecbcx2) {
        return Ext.apply({
            _record: _0xecbcx1
        }, _0xecbcx1['data'])
    },
    refreshKeepingScroll: function() {
        Ext['suspendLayouts']();
        this['blockRestoringInfiniteScrollDate']();
        this['refreshView']();
        Ext['resumeLayouts'](true);
        this['resumeRestoringInfiniteScrollDate']()
    },
    setupTimeCellEvents: function() {
        this['mon'](this['el'], {
            click: this['handleScheduleEvent'],
            dblclick: this['handleScheduleEvent'],
            contextmenu: this['handleScheduleEvent'],
            pinch: this['handleScheduleEvent'],
            pinchstart: this['handleScheduleEvent'],
            pinchend: this['handleScheduleEvent'],
            scope: this
        })
    },
    getTableRegion: function() {
        var _0xecbcx1 = this['el']['down']('.' + Ext['baseCSSPrefix'] + 'grid-item-container');
        return (_0xecbcx1 || this['el'])['getRegion']()
    },
    getRowNode: function(_0xecbcx1) {
        return this['getNodeByRecord'](_0xecbcx1)
    },
    findRowByChild: function(_0xecbcx1) {
        return this['findItemByChild'](_0xecbcx1)
    },
    getRecordForRowNode: function(_0xecbcx1) {
        return this['getRecord'](_0xecbcx1)
    },
    refreshKeepingResourceScroll: function() {
        var _0xecbcx1 = this['getScroll']();
        this['refreshView']();
        if (this['isHorizontal']()) {
            this['scrollVerticallyTo'](_0xecbcx1['top'])
        } else {
            this['scrollHorizontallyTo'](_0xecbcx1['left'])
        }
    },
    scrollHorizontallyTo: function(_0xecbcx1, _0xecbcx2) {
        if (this['rendered']) {
            this['scrollTo'](_0xecbcx1, null, _0xecbcx2)
        }
    },
    scrollVerticallyTo: function(_0xecbcx2, _0xecbcx1) {
        if (this['rendered']) {
            this['scrollTo'](null, _0xecbcx2, _0xecbcx1)
        }
    },
    getVerticalScroll: function() {
        return this['getScrollY']()
    },
    getHorizontalScroll: function() {
        return this['getScrollX']()
    },
    getScroll: function() {
        var _0xecbcx1 = this;
        return {
            top: _0xecbcx1['getVerticalScroll'](),
            left: _0xecbcx1['getHorizontalScroll']()
        }
    },
    handleScheduleEvent: function() {},
    disableViewScroller: function(_0xecbcx5) {
        var _0xecbcx1 = this['getScrollable']();
        if (_0xecbcx1) {
            if (_0xecbcx1['setDisabled']) {
                _0xecbcx1['setDisabled'](_0xecbcx5)
            } else {
                var _0xecbcx2 = this['up']('timelinetree,timelinegrid')['getScrollable']();
                _0xecbcx1['setConfig']({
                    x: !_0xecbcx5,
                    y: !_0xecbcx5
                });
                _0xecbcx2['setConfig']({
                    x: !_0xecbcx5,
                    y: !_0xecbcx5
                })
            }
        }
    },
    shouldAdjustForRtl: function() {
        return this['rtl'] && !Ext['rootInheritedState']['rtl']
    },
    getHorizontalPositionSide: function() {
        return this['rtl'] ? 'right' : 'left'
    },
    getViewContainerElementTop: function() {
        var _0xecbcx1;
        if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
            _0xecbcx1 = this['up']('timelinegrid,timelinetree')['getView']()['el']
        } else {
            _0xecbcx1 = this['getEl']()
        };
        return _0xecbcx1['getY']()
    },
    getViewContainerHeight: function() {
        if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
            return this['up']('timelinegrid,timelinetree')['getView']()['el']['getHeight']()
        };
        return this['getHeight']()
    },
    getScrollableMaxPosition: function() {
        return {
            x: this['getScrollable']()['getMaxPosition']()['x'],
            y: this['getVerticalScrollableMaxHeight']()
        }
    },
    getVerticalScrollableMaxHeight: function() {
        var _0xecbcx1;
        if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
            _0xecbcx1 = this['up']('timelinegrid,timelinetree')['getScrollable']()
        } else {
            _0xecbcx1 = this['getScrollable']()
        };
        return _0xecbcx1['getMaxPosition']()['y']
    },
    getScrollableContainerRegion: function() {
        var _0xecbcx1 = this['getEl']()['getRegion']();
        if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
            _0xecbcx1['top'] = this['up']('timelinegrid, timelinetree')['getScrollable']()['getElement']()['getY']()
        };
        return new Ext['util'].Region(_0xecbcx1['top'], _0xecbcx1['right'], _0xecbcx1['top'] + this['getViewContainerHeight'](), _0xecbcx1['left'])
    },
    scrollHorizontallyBy: function(_0xecbcx1, _0xecbcx2) {
        this['scrollBy'](_0xecbcx1, 0, _0xecbcx2)
    },
    scrollVerticallyBy: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx5;
        if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
            _0xecbcx5 = this['up']('timelinegrid, timelinetree')['getScrollable']()
        } else {
            _0xecbcx5 = this['getScrollable']()
        };
        _0xecbcx5['scrollBy'](0, _0xecbcx1, _0xecbcx2)
    },
    scrollElementIntoView: function(_0xecbcx5, _0xecbcx4, _0xecbcx1, _0xecbcx6, _0xecbcxd, _0xecbcxb, _0xecbcx10) {
        var _0xecbcxa = this,
            _0xecbcx9 = _0xecbcx5['dom'],
            _0xecbcxe = _0xecbcxa['getScroll'](),
            _0xecbcxc = _0xecbcxe['left'],
            _0xecbcxf = _0xecbcxe['top'],
            _0xecbcx7 = _0xecbcxa['getScrollIntoViewXY'](_0xecbcx5, _0xecbcxc, _0xecbcxf, _0xecbcxd),
            _0xecbcx3 = _0xecbcx7['x'],
            _0xecbcx2 = _0xecbcx7['y'],
            _0xecbcx11, _0xecbcx8;
        _0xecbcx11 = _0xecbcx4 !== false ? _0xecbcx3 : _0xecbcxc;
        _0xecbcx8 = _0xecbcx2;
        if (_0xecbcx11 !== _0xecbcxc || _0xecbcx8 !== _0xecbcxf) {
            _0xecbcxa['on']({
                scrollend: {
                    fn: function() {
                        _0xecbcx6 && _0xecbcx5['highlight']();
                        _0xecbcxb && _0xecbcxb['call'](_0xecbcx10)
                    },
                    scope: _0xecbcxa,
                    single: true
                }
            });
            _0xecbcxa['scrollTo'](_0xecbcx11, _0xecbcx8, _0xecbcx1)
        } else {
            _0xecbcxb && _0xecbcxb['call'](_0xecbcx10)
        };
        return _0xecbcxa
    },
    getScrollIntoViewXY: function(_0xecbcx2, _0xecbcxf, _0xecbcxe, _0xecbcx1) {
        _0xecbcx1 = Ext['isEmpty'](_0xecbcx1) ? 20 : _0xecbcx1;
        var _0xecbcx14 = this,
            _0xecbcx3 = Ext['getVersion']()['isGreaterThan']('6.2.0') ? Ext['getDom'](_0xecbcx14['ownerCt']['getEl']()) : Ext['getDom'](_0xecbcx14['getEl']()),
            _0xecbcxb = _0xecbcx2['dom'],
            _0xecbcx4 = _0xecbcx2['getOffsetsTo'](_0xecbcx3),
            _0xecbcx11 = _0xecbcxb['offsetWidth'],
            _0xecbcxa = _0xecbcxb['offsetHeight'],
            _0xecbcx5 = _0xecbcx4[0] + _0xecbcxf,
            _0xecbcx7 = _0xecbcx4[1] + _0xecbcxe,
            _0xecbcx9 = _0xecbcx7 + _0xecbcxa,
            _0xecbcx17 = _0xecbcx5 + _0xecbcx11,
            _0xecbcx8 = _0xecbcx3['clientHeight'],
            _0xecbcxc = _0xecbcx3['clientWidth'],
            _0xecbcx10 = _0xecbcxf,
            _0xecbcxd = _0xecbcxe,
            _0xecbcx6 = _0xecbcxd + _0xecbcx8,
            _0xecbcx15 = _0xecbcx10 + _0xecbcxc;
        if (_0xecbcxa > _0xecbcx8 || _0xecbcx7 < _0xecbcxd) {
            _0xecbcxe = _0xecbcx7 - _0xecbcx1
        } else {
            if (_0xecbcx9 > _0xecbcx6) {
                _0xecbcxe = _0xecbcx9 - _0xecbcx8 + _0xecbcx1
            }
        };
        if (_0xecbcx11 > _0xecbcxc || _0xecbcx5 < _0xecbcx10) {
            _0xecbcxf = _0xecbcx5 - _0xecbcx1
        } else {
            if (_0xecbcx17 > _0xecbcx15) {
                _0xecbcxf = _0xecbcx17 - _0xecbcxc + _0xecbcx1
            }
        };
        return {
            x: _0xecbcxf,
            y: _0xecbcxe
        }
    }
});
Ext.define('Ext.ux.Scheduler.view.TimelineGridView', {
    extend: 'Ext.grid.View',
    mixins: ['Ext.ux.Scheduler.mixin.TimelineView'],
    infiniteScroll: false,
    bufferCoef: 5,
    bufferThreshold: 0.2,
    cachedScrollDate: null,
    boxIsReady: false,
    ignoreNextHorizontalScroll: false,
    constructor: function(_0xecbcx1) {
        this['callParent'](arguments);
        if (this['infiniteScroll']) {
            this['on']('boxready', this['setupInfiniteScroll'], this)
        };
        if (this['timeAxisViewModel']) {
            this['relayEvents'](this['timeAxisViewModel'], ['columnwidthchange'])
        }
    },
    setupInfiniteScroll: function() {
        var _0xecbcx3 = this['panel']['ownerCt'];
        this['cachedScrollDate'] = _0xecbcx3['startDate'] || this['timeAxis']['getStart']();
        if (Ext['getVersion']()['isLessThan']('6.0.1') && Ext['supports']['Touch'] && Ext['os']['is']['Windows']) {
            var _0xecbcx1 = this['panel']['headerCt']['getScrollable']();
            var _0xecbcx2 = this['getScrollable']();
            _0xecbcx1['onIdle'] && Ext['GlobalEvents']['un']('idle', _0xecbcx1['onIdle'], _0xecbcx1);
            _0xecbcx2['onIdle'] && Ext['GlobalEvents']['un']('idle', _0xecbcx2['onIdle'], _0xecbcx2)
        };
        var _0xecbcx5 = this;
        _0xecbcx3['calculateOptimalDateRange'] = function(_0xecbcx6, _0xecbcx4, _0xecbcxa, _0xecbcx9) {
            if (_0xecbcx9) {
                return _0xecbcx9
            };
            var _0xecbcx7 = Ext.ux.Scheduler['preset']['Manager']['getPreset'](_0xecbcxa['preset']);
            return _0xecbcx5['calculateInfiniteScrollingDateRange'](_0xecbcx6, _0xecbcx7['getBottomHeader']()['unit'], _0xecbcxa['increment'], _0xecbcxa['width'], true)
        };
        this['bindInfiniteScrollListeners']()
    },
    bindInfiniteScrollListeners: function() {
        this['getScrollable']()['on']('scroll', this['onHorizontalScroll'], this)
    },
    unbindInfiniteScrollListeners: function() {
        this['getScrollable']()['un']('scroll', this['onHorizontalScroll'], this);
        this['infiniteScroll'] = false
    },
    onHorizontalScroll: function(_0xecbcx6, _0xecbcx7, _0xecbcx9) {
        if (this['ignoreNextHorizontalScroll'] || this['cachedScrollDate']) {
            this['ignoreNextHorizontalScroll'] = false;
            return
        };
        var _0xecbcx4 = Ext['getScrollbarSize'](),
            _0xecbcx3 = this['getWidth'](),
            _0xecbcx2 = _0xecbcx3 * this['bufferThreshold'] * this['bufferCoef'],
            _0xecbcx5 = this['getScrollable']()['getMaxPosition']()['x'];
        _0xecbcx5 -= _0xecbcx4['width'];
        if ((_0xecbcx5 - _0xecbcx7 < _0xecbcx2) || _0xecbcx7 < _0xecbcx2) {
            this['shiftToDate'](this['getDateFromCoordinate'](_0xecbcx7, null, true));
            if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
                var _0xecbcx1 = this['getScrollable']()['_translatable'] || this['getScrollable']()['translatable'];
                _0xecbcx1 && _0xecbcx1['stopAnimation']()
            } else {
                this['el']['stopAnimation']()
            }
        }
    },
    refresh: function() {
        this['callParent'](arguments);
        if (this['infiniteScroll'] && !this['scrollStateSaved'] && this['boxIsReady']) {
            this['restoreScrollToCachedDate']()
        }
    },
    onResize: function(_0xecbcx5, _0xecbcx1, _0xecbcx2, _0xecbcx3) {
        this['boxIsReady'] = true;
        this['callParent'](arguments);
        if (this['infiniteScroll'] && _0xecbcx5 > 0 && _0xecbcx5 !== _0xecbcx2) {
            this['shiftToDate'](this['cachedScrollDate'] || this['getVisibleDateRange']()['startDate'], this['cachedScrollDateIsCentered'])
        }
    },
    restoreScrollToCachedDate: function() {
        if (this['cachedScrollDate'] && this['boxIsReady']) {
            this['ignoreNextHorizontalScroll'] = true;
            this['scrollToDate'](this['cachedScrollDate']);
            this['cachedScrollDate'] = null
        }
    },
    scrollToDate: function(_0xecbcx1) {
        this['cachedScrollDate'] = _0xecbcx1;
        if (this['cachedScrollDateIsCentered']) {
            this['panel']['ownerCt']['scrollToDateCentered'](_0xecbcx1)
        } else {
            this['panel']['ownerCt']['scrollToDate'](_0xecbcx1)
        };
        var _0xecbcx2 = this['getScrollX']();
        this['panel']['scrollLeftPos'] = _0xecbcx2;
        this['headerCt']['setScrollX'](_0xecbcx2);
        if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
            this['up']('timelinegrid,timelinetree')['lastScrollPos']['x'] = _0xecbcx2
        }
    },
    blockRestoringInfiniteScrollDate: function() {
        this['scrollStateSaved'] = this['boxIsReady']
    },
    resumeRestoringInfiniteScrollDate: function() {
        this['scrollStateSaved'] = false;
        if (this['infiniteScroll'] && this['cachedScrollDate']) {
            this['restoreScrollToCachedDate']()
        }
    },
    calculateInfiniteScrollingDateRange: function(_0xecbcx5, _0xecbcxa, _0xecbcx8, _0xecbcx7, _0xecbcx9) {
        var _0xecbcx6 = this['timeAxis'],
            _0xecbcx4 = this['getWidth'](),
            _0xecbcxd;
        _0xecbcx7 = _0xecbcx7 || this['timeAxisViewModel']['getTickWidth']();
        _0xecbcx8 = _0xecbcx8 || _0xecbcx6['increment'] || 1;
        _0xecbcxa = _0xecbcxa || _0xecbcx6['unit'];
        var _0xecbcx1 = Ext.ux.Scheduler['util']['Date'];
        var _0xecbcx3 = Math['ceil'](_0xecbcx4 * this['bufferCoef'] / _0xecbcx7);
        if (_0xecbcx9) {
            var _0xecbcx2 = Math['ceil']((_0xecbcx4 * (1 + this['bufferCoef'])) / (2 * _0xecbcx7)) * _0xecbcx8;
            _0xecbcxd = {
                start: _0xecbcx6['floorDate'](_0xecbcx1['add'](_0xecbcx5, _0xecbcxa, -_0xecbcx2), false, _0xecbcxa, _0xecbcx8),
                end: _0xecbcx6['ceilDate'](_0xecbcx1['add'](_0xecbcx5, _0xecbcxa, _0xecbcx2), false, _0xecbcxa, _0xecbcx8)
            }
        } else {
            _0xecbcxd = {
                start: _0xecbcx6['floorDate'](_0xecbcx1['add'](_0xecbcx5, _0xecbcxa, -_0xecbcx3 * _0xecbcx8), false, _0xecbcxa, _0xecbcx8),
                end: _0xecbcx6['ceilDate'](_0xecbcx1['add'](_0xecbcx5, _0xecbcxa, Math['ceil']((_0xecbcx4 / _0xecbcx7 + _0xecbcx3) * _0xecbcx8)), false, _0xecbcxa, _0xecbcx8)
            }
        };
        return _0xecbcxd
    },
    shiftToDate: function(_0xecbcx5, _0xecbcx1) {
        var _0xecbcx2 = this['calculateInfiniteScrollingDateRange'](_0xecbcx5, null, null, null, _0xecbcx1);
        this['cachedScrollDate'] = _0xecbcx5;
        this['cachedScrollDateIsCentered'] = _0xecbcx1;
        this['timeAxis']['setTimeSpan'](_0xecbcx2['start'], _0xecbcx2['end'])
    },
    destroy: function() {
        if (this['infiniteScroll'] && this['rendered']) {
            this['unbindInfiniteScrollListeners']()
        };
        this['callParent'](arguments)
    }
});
Ext.define('Ext.ux.Scheduler.patches.DragDropManager', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    requires: ['Ext.dd.ScrollManager'],
    target: 'Ext.dd.DragDropManager',
    minVersion: '6.0.0',
    applyFn: function() {
        Ext['override'](Ext['dd'].DragDropManager, {
            fireEvents: function(_0xecbcx24, _0xecbcxb) {
                var _0xecbcx19 = this,
                    _0xecbcx10 = Ext['supports']['Touch'],
                    _0xecbcxd = _0xecbcx19['dragCurrent'],
                    _0xecbcx18 = _0xecbcx19['currentPoint'],
                    _0xecbcx14 = _0xecbcx18['x'],
                    _0xecbcx15 = _0xecbcx18['y'],
                    _0xecbcx17 = [],
                    _0xecbcx11 = [],
                    _0xecbcxf = [],
                    _0xecbcx3 = [],
                    _0xecbcx23 = [],
                    _0xecbcx22 = [],
                    _0xecbcx5 = _0xecbcx10 ? document['documentElement']['clientWidth'] / window['innerWidth'] : 1,
                    _0xecbcx7, _0xecbcx8, _0xecbcxc, _0xecbcx6, _0xecbcx13, _0xecbcx16, _0xecbcx12, _0xecbcxe;
                if (!_0xecbcxd || _0xecbcxd['isLocked']()) {
                    return
                };
                _0xecbcxe = !(_0xecbcxd['deltaX'] < 0 || _0xecbcxd['deltaY'] < 0);
                if (_0xecbcx10 || (!_0xecbcx19['notifyOccluded'] && (!Ext['supports']['CSSPointerEvents'] || Ext['isIE10m'] || Ext['isOpera']) && _0xecbcxe)) {
                    _0xecbcx7 = _0xecbcxd['getDragEl']();
                    if (_0xecbcxe) {
                        _0xecbcx7['style']['visibility'] = 'hidden'
                    };
                    var _0xecbcx9 = Ext['getBody']()['getScroll']();
                    _0xecbcx24['target'] = document['elementFromPoint'](_0xecbcx14 - _0xecbcx9['left'] / _0xecbcx5, _0xecbcx15 - _0xecbcx9['top'] / _0xecbcx5);
                    if (_0xecbcxe) {
                        _0xecbcx7['style']['visibility'] = 'visible'
                    }
                };
                for (_0xecbcx13 in _0xecbcx19['dragOvers']) {
                    _0xecbcx8 = _0xecbcx19['dragOvers'][_0xecbcx13];
                    delete _0xecbcx19['dragOvers'][_0xecbcx13];
                    if (!_0xecbcx19['isTypeOfDD'](_0xecbcx8) || _0xecbcx8['destroyed']) {
                        continue
                    };
                    if (_0xecbcx19['notifyOccluded']) {
                        if (!this['isOverTarget'](_0xecbcx18, _0xecbcx8, _0xecbcx19['mode'])) {
                            _0xecbcxf['push'](_0xecbcx8)
                        }
                    } else {
                        if (!_0xecbcx24['within'](_0xecbcx8['getEl']())) {
                            _0xecbcxf['push'](_0xecbcx8)
                        }
                    };
                    _0xecbcx11[_0xecbcx13] = true
                };
                for (_0xecbcx12 in _0xecbcxd['groups']) {
                    if ('string' !== typeof _0xecbcx12) {
                        continue
                    };
                    for (_0xecbcx13 in _0xecbcx19['ids'][_0xecbcx12]) {
                        _0xecbcx8 = _0xecbcx19['ids'][_0xecbcx12][_0xecbcx13];
                        if (_0xecbcx19['isTypeOfDD'](_0xecbcx8) && (_0xecbcxc = _0xecbcx8['getEl']()) && (_0xecbcx8['isTarget']) && (!_0xecbcx8['isLocked']()) && (Ext['fly'](_0xecbcxc)['isVisible'](true)) && ((_0xecbcx8 !== _0xecbcxd) || (_0xecbcxd['ignoreSelf'] === false))) {
                            if (_0xecbcx19['notifyOccluded']) {
                                if ((_0xecbcx8['zIndex'] = _0xecbcx19['getZIndex'](_0xecbcxc)) !== -1) {
                                    _0xecbcx6 = true
                                };
                                _0xecbcx17['push'](_0xecbcx8)
                            } else {
                                if (_0xecbcx24['within'](_0xecbcx8['getEl']())) {
                                    _0xecbcx17['push'](_0xecbcx8);
                                    break
                                }
                            }
                        }
                    }
                };
                if (_0xecbcx6) {
                    Ext['Array']['sort'](_0xecbcx17, _0xecbcx19['byZIndex'])
                };
                for (_0xecbcx13 = 0, _0xecbcx16 = _0xecbcx17['length']; _0xecbcx13 < _0xecbcx16; _0xecbcx13++) {
                    _0xecbcx8 = _0xecbcx17[_0xecbcx13];
                    if (_0xecbcx19['isOverTarget'](_0xecbcx18, _0xecbcx8, _0xecbcx19['mode'])) {
                        if (_0xecbcxb) {
                            _0xecbcx23['push'](_0xecbcx8)
                        } else {
                            if (!_0xecbcx11[_0xecbcx8['id']]) {
                                _0xecbcx22['push'](_0xecbcx8)
                            } else {
                                _0xecbcx3['push'](_0xecbcx8)
                            };
                            _0xecbcx19['dragOvers'][_0xecbcx8['id']] = _0xecbcx8
                        };
                        if (!_0xecbcx19['notifyOccluded']) {
                            break
                        }
                    }
                };
                if (_0xecbcx19['mode']) {
                    if (_0xecbcxf['length']) {
                        _0xecbcxd['b4DragOut'](_0xecbcx24, _0xecbcxf);
                        _0xecbcxd['onDragOut'](_0xecbcx24, _0xecbcxf)
                    };
                    if (_0xecbcx22['length']) {
                        _0xecbcxd['onDragEnter'](_0xecbcx24, _0xecbcx22)
                    };
                    if (_0xecbcx3['length']) {
                        _0xecbcxd['b4DragOver'](_0xecbcx24, _0xecbcx3);
                        _0xecbcxd['onDragOver'](_0xecbcx24, _0xecbcx3)
                    };
                    if (_0xecbcx23['length']) {
                        _0xecbcxd['b4DragDrop'](_0xecbcx24, _0xecbcx23);
                        _0xecbcxd['onDragDrop'](_0xecbcx24, _0xecbcx23)
                    }
                } else {
                    for (_0xecbcx13 = 0, _0xecbcx16 = _0xecbcxf['length']; _0xecbcx13 < _0xecbcx16; ++_0xecbcx13) {
                        _0xecbcxd['b4DragOut'](_0xecbcx24, _0xecbcxf[_0xecbcx13]['id']);
                        _0xecbcxd['onDragOut'](_0xecbcx24, _0xecbcxf[_0xecbcx13]['id'])
                    };
                    for (_0xecbcx13 = 0, _0xecbcx16 = _0xecbcx22['length']; _0xecbcx13 < _0xecbcx16; ++_0xecbcx13) {
                        _0xecbcxd['onDragEnter'](_0xecbcx24, _0xecbcx22[_0xecbcx13]['id'], _0xecbcx22[_0xecbcx13])
                    };
                    for (_0xecbcx13 = 0, _0xecbcx16 = _0xecbcx3['length']; _0xecbcx13 < _0xecbcx16; ++_0xecbcx13) {
                        _0xecbcxd['b4DragOver'](_0xecbcx24, _0xecbcx3[_0xecbcx13]['id']);
                        _0xecbcxd['onDragOver'](_0xecbcx24, _0xecbcx3[_0xecbcx13]['id'])
                    };
                    for (_0xecbcx13 = 0, _0xecbcx16 = _0xecbcx23['length']; _0xecbcx13 < _0xecbcx16; ++_0xecbcx13) {
                        _0xecbcxd['b4DragDrop'](_0xecbcx24, _0xecbcx23[_0xecbcx13]['id']);
                        _0xecbcxd['onDragDrop'](_0xecbcx24, _0xecbcx23[_0xecbcx13]['id'])
                    }
                };
                if (_0xecbcxb && !_0xecbcx23['length']) {
                    _0xecbcxd['onInvalidDrop'](_0xecbcx24)
                }
            }
        });
        Ext['override'](Ext['dd'].DragSource, {
            onDragEnter: function(_0xecbcx3, _0xecbcx6, _0xecbcx5) {
                this['forceCachedTarget'] = _0xecbcx5;
                return this['callParent']([_0xecbcx3, _0xecbcx6])
            },
            beforeDragEnter: function(_0xecbcx3, _0xecbcx5, _0xecbcx6) {
                if (this['forceCachedTarget']) {
                    _0xecbcx3 = this['cachedTarget'] = this['forceCachedTarget'];
                    delete this['forceCachedTarget']
                };
                return this['callParent']([_0xecbcx3, _0xecbcx5, _0xecbcx6])
            }
        });
        var _0xecbcx2 = Ext['dd']['ScrollManager'];
        var _0xecbcx1 = Ext['dd']['DragDropManager'];
        _0xecbcx1['fireEvents'] = Ext['Function']['createSequence'](_0xecbcx1['fireEvents'], _0xecbcx2['onFire'], _0xecbcx2);
        _0xecbcx1['stopDrag'] = Ext['Function']['createSequence'](_0xecbcx1['stopDrag'], _0xecbcx2['onStop'], _0xecbcx2)
    }
});
Ext.define('Ext.ux.Scheduler.patches.NavigationModel', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.grid.NavigationModel',
    minVersion: '6.0.0',
    overrides: {
        setPosition: function(_0xecbcx2, _0xecbcx3, _0xecbcx6, _0xecbcx1, _0xecbcx9) {
            var _0xecbcx4 = this;
            if (Ext['isIE'] && _0xecbcx6 && (_0xecbcx6['getKey']() === _0xecbcx6['PAGE_DOWN'] || _0xecbcx6['getKey']() === _0xecbcx6['PAGE_UP'])) {
                var _0xecbcx5 = _0xecbcx4['lastFocused'];
                if (_0xecbcx6['view']['isLockedView'] && _0xecbcx5 && _0xecbcx6['view']['getVisibleColumnManager']()['indexOf'](_0xecbcx5['column']) === -1) {
                    _0xecbcx6['view'] = _0xecbcx6['view']['lockingPartner']
                }
            };
            if (Ext['getVersion']()['equals']('6.0.1.250')) {
                _0xecbcx4['patchedSetPosition']['apply'](this, arguments)
            } else {
                return _0xecbcx4['callParent'](arguments)
            }
        },
        patchedSetPosition: function(_0xecbcx2, _0xecbcxb, _0xecbcxe, _0xecbcx3, _0xecbcxd) {
            var _0xecbcx10 = this,
                _0xecbcxa, _0xecbcxf, _0xecbcx8, _0xecbcxc, _0xecbcx4, _0xecbcx7, _0xecbcx1, _0xecbcx6, _0xecbcx9, _0xecbcx17 = _0xecbcx2 == null && _0xecbcxb == null,
                _0xecbcx11 = _0xecbcx10['record'] == null && _0xecbcx10['recordIndex'] == null && _0xecbcx10['item'] == null;
            if (_0xecbcx2 && _0xecbcx2['isCellContext']) {
                _0xecbcxa = _0xecbcx2['view']
            } else {
                if (_0xecbcxe && _0xecbcxe['view']) {
                    _0xecbcxa = _0xecbcxe['view']
                } else {
                    if (_0xecbcx10['lastFocused']) {
                        _0xecbcxa = _0xecbcx10['lastFocused']['view']
                    } else {
                        _0xecbcxa = _0xecbcx10['view']
                    }
                }
            };
            _0xecbcxa['getFocusTask']()['cancel']();
            if (_0xecbcxa['destroyed'] || !_0xecbcxa['refreshCounter'] || !_0xecbcxa['ownerCt'] || _0xecbcx17 && _0xecbcx11 || !_0xecbcxa['all']['getCount']()) {
                return
            };
            _0xecbcx8 = _0xecbcxa['getSelectionModel']();
            _0xecbcxc = _0xecbcxa['dataSource'];
            _0xecbcx4 = _0xecbcxa['getVisibleColumnManager']();
            if (_0xecbcx2 && _0xecbcx2['isCellContext']) {
                _0xecbcx6 = _0xecbcx2['record'];
                _0xecbcx7 = _0xecbcx2['rowIdx'];
                _0xecbcx1 = Math['min'](_0xecbcx2['colIdx'], _0xecbcx4['getColumns']()['length'] - 1);
                _0xecbcx9 = _0xecbcx4['getColumns']()[_0xecbcx1];
                if (_0xecbcxc['indexOf'](_0xecbcx6) === -1) {
                    _0xecbcxf = _0xecbcxa['getScrollable']();
                    _0xecbcx10['recordIndex'] = -1;
                    if (_0xecbcxf['getPosition']()['y'] >= _0xecbcxf['getMaxPosition']()['y'] - _0xecbcxa['all']['last'](true)['offsetHeight']) {
                        _0xecbcx2['rowIdx']--
                    };
                    _0xecbcx7 = Math['min'](_0xecbcx2['rowIdx'], _0xecbcxc['getCount']() - 1);
                    _0xecbcx6 = _0xecbcxc['getAt'](_0xecbcx7)
                }
            } else {
                if (_0xecbcx17) {
                    _0xecbcx6 = _0xecbcx7 = null
                } else {
                    if (_0xecbcxb == null) {
                        _0xecbcxb = _0xecbcx10['lastFocused'] ? _0xecbcx10['lastFocused']['column'] : 0
                    };
                    if (typeof _0xecbcx2 === 'number') {
                        _0xecbcx7 = Math['max'](Math['min'](_0xecbcx2, _0xecbcxc['getCount']() - 1), 0);
                        _0xecbcx6 = _0xecbcxc['getAt'](_0xecbcx2)
                    } else {
                        if (_0xecbcx2['isEntity']) {
                            _0xecbcx6 = _0xecbcx2;
                            _0xecbcx7 = _0xecbcxc['indexOf'](_0xecbcx6)
                        } else {
                            if (_0xecbcx2['tagName']) {
                                _0xecbcx6 = _0xecbcxa['getRecord'](_0xecbcx2);
                                _0xecbcx7 = _0xecbcxc['indexOf'](_0xecbcx6);
                                if (_0xecbcx7 === -1) {
                                    _0xecbcx6 = null
                                }
                            } else {
                                if (_0xecbcx11) {
                                    return
                                };
                                _0xecbcx17 = true;
                                _0xecbcx6 = _0xecbcx7 = null
                            }
                        }
                    }
                };
                if (_0xecbcx6) {
                    if (_0xecbcx7 === -1) {
                        _0xecbcx10['recordIndex'] = -1;
                        _0xecbcx6 = _0xecbcxc['getAt'](0);
                        _0xecbcx7 = 0;
                        _0xecbcxb = null
                    };
                    if (_0xecbcxb == null) {
                        if (!(_0xecbcx9 = _0xecbcx10['column'])) {
                            _0xecbcx1 = 0;
                            _0xecbcx9 = _0xecbcx4['getColumns']()[0]
                        }
                    } else {
                        if (typeof _0xecbcxb === 'number') {
                            _0xecbcx9 = _0xecbcx4['getColumns']()[_0xecbcxb];
                            _0xecbcx1 = _0xecbcxb
                        } else {
                            _0xecbcx9 = _0xecbcxb;
                            _0xecbcx1 = _0xecbcx4['indexOf'](_0xecbcxb)
                        }
                    }
                } else {
                    _0xecbcx17 = true;
                    _0xecbcx9 = _0xecbcx1 = null
                }
            };
            if (_0xecbcxa['actionableMode'] && !_0xecbcx17) {
                var _0xecbcx5 = new Ext['grid'].CellContext(_0xecbcxa)['setPosition'](_0xecbcx6, _0xecbcx9);
                _0xecbcx10['focusPosition'](_0xecbcx5);
                return _0xecbcxa['ownerGrid']['setActionableMode'](false, _0xecbcx5)
            };
            if (_0xecbcx7 === _0xecbcx10['recordIndex'] && _0xecbcx1 === _0xecbcx10['columnIndex'] && _0xecbcxa === _0xecbcx10['position']['view']) {
                return _0xecbcx10['focusPosition'](_0xecbcx10['position'])
            };
            if (_0xecbcx10['cell']) {
                _0xecbcx10['cell']['removeCls'](_0xecbcx10['focusCls'])
            };
            _0xecbcx10['previousRecordIndex'] = _0xecbcx10['recordIndex'];
            _0xecbcx10['previousRecord'] = _0xecbcx10['record'];
            _0xecbcx10['previousItem'] = _0xecbcx10['item'];
            _0xecbcx10['previousCell'] = _0xecbcx10['cell'];
            _0xecbcx10['previousColumn'] = _0xecbcx10['column'];
            _0xecbcx10['previousColumnIndex'] = _0xecbcx10['columnIndex'];
            _0xecbcx10['previousPosition'] = _0xecbcx10['position']['clone']();
            _0xecbcx10['selectionStart'] = _0xecbcx8['selectionStart'];
            _0xecbcx10['position']['setAll'](_0xecbcxa, _0xecbcx10['recordIndex'] = _0xecbcx7, _0xecbcx10['columnIndex'] = _0xecbcx1, _0xecbcx10['record'] = _0xecbcx6, _0xecbcx10['column'] = _0xecbcx9);
            if (_0xecbcx17) {
                _0xecbcx10['item'] = _0xecbcx10['cell'] = null
            } else {
                _0xecbcx10['focusPosition'](_0xecbcx10['position'], _0xecbcxd)
            };
            if (!_0xecbcx3) {
                _0xecbcx8['fireEvent']('focuschange', _0xecbcx8, _0xecbcx10['previousRecord'], _0xecbcx10['record']);
                _0xecbcxa['fireEvent']('rowfocus', _0xecbcx10['record'], _0xecbcx10['item'], _0xecbcx10['recordIndex']);
                _0xecbcxa['fireEvent']('cellfocus', _0xecbcx10['record'], _0xecbcx10['cell'], _0xecbcx10['position'])
            };
            if (_0xecbcxe && !_0xecbcxd && _0xecbcx10['cell'] !== _0xecbcx10['previousCell']) {
                _0xecbcx10['fireNavigateEvent'](_0xecbcxe)
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.view.WeekView', {
    requires: ['Ext.util.Region'],
    view: null,
    constructor: function(_0xecbcx1) {
        Ext.apply(this, _0xecbcx1)
    },
    getElementsFromEventRecord: function(_0xecbcx2, _0xecbcx4, _0xecbcx3, _0xecbcx5) {
        var _0xecbcx1 = this['view'],
            _0xecbcx6;
        _0xecbcx5 = _0xecbcx5 || false;
        if (_0xecbcx3 !== null && _0xecbcx3 !== undefined) {
            _0xecbcx6 = '[id^=' + _0xecbcx1['eventPrefix'] + _0xecbcx2['internalId'] + '-calendar-' + _0xecbcx3 + '-]'
        } else {
            _0xecbcx6 = '[id^=' + _0xecbcx1['eventPrefix'] + _0xecbcx2['internalId'] + '-calendar-]'
        };
        return _0xecbcx1['getEl']()['query'](_0xecbcx6, _0xecbcx5)
    },
    getColumnsBy: function(_0xecbcx2, _0xecbcx4) {
        var _0xecbcx3 = this['view']['panel']['headerCt']['getGridColumns']();
        var _0xecbcx1 = [];
        for (var _0xecbcx5 = 0; _0xecbcx5 < _0xecbcx3['length']; _0xecbcx5++) {
            if (_0xecbcx2['call'](this, _0xecbcx3[_0xecbcx5])) {
                if (_0xecbcx4 !== true) {
                    _0xecbcx1['push'](_0xecbcx3[_0xecbcx5])
                } else {
                    _0xecbcx1['push']({
                        column: _0xecbcx3[_0xecbcx5],
                        index: _0xecbcx5
                    })
                }
            }
        };
        return _0xecbcx1
    },
    getColumnsForDateRange: function(_0xecbcx1, _0xecbcx2) {
        return this['getColumnsBy'](function(_0xecbcx5) {
            return !(_0xecbcx1['getEndDate']() <= _0xecbcx5['start'] || _0xecbcx1['getStartDate']() >= _0xecbcx5['end'])
        }, _0xecbcx2)
    },
    getColumnEvents: function(_0xecbcx2) {
        var _0xecbcx1 = [];
        this['view']['getEventStore']()['each'](function(_0xecbcx5) {
            if (!(_0xecbcx5['getEndDate']() <= _0xecbcx2['start'] || _0xecbcx5['getStartDate']() >= _0xecbcx2['end'])) {
                _0xecbcx1['push'](_0xecbcx5)
            }
        });
        return _0xecbcx1
    },
    getColumnsByResource: function(_0xecbcx2, _0xecbcx1) {
        return this['getColumnsBy'](function(_0xecbcx5) {
            return _0xecbcx5['start'] == _0xecbcx2['start']
        }, _0xecbcx1)[0]
    },
    translateToScheduleCoordinate: function(_0xecbcx2) {
        var _0xecbcx1 = this['view'];
        if (Ext['isArray'](_0xecbcx2)) {
            return [_0xecbcx2[0] - _0xecbcx1['getEl']()['getX']() + _0xecbcx1['getHorizontalScroll'](), _0xecbcx2[1] - _0xecbcx1['getViewContainerElementTop']() + _0xecbcx1['getVerticalScroll']()]
        } else {
            return _0xecbcx2 - _0xecbcx1['getViewContainerElementTop']() + _0xecbcx1['getVerticalScroll']()
        }
    },
    translateToPageCoordinate: function(_0xecbcx5) {
        var _0xecbcx1 = this['view'];
        var _0xecbcx2 = _0xecbcx1['getEl']();
        if (Ext['isArray'](_0xecbcx5)) {
            return [_0xecbcx5[0] + _0xecbcx2['getX']() - _0xecbcx1['getHorizontalScroll'](), _0xecbcx5[1] + _0xecbcx1['getViewContainerElementTop']() - _0xecbcx1['getVerticalScroll']()]
        } else {
            return _0xecbcx5 + _0xecbcx1['getViewContainerElementTop']() - _0xecbcx1['getVerticalScroll']()
        }
    },
    getDateFromXY: function(_0xecbcx5, _0xecbcx2, _0xecbcx1) {
        var _0xecbcx3 = _0xecbcx5;
        if (!_0xecbcx1) {
            _0xecbcx3 = this['translateToScheduleCoordinate'](_0xecbcx3)
        };
        return this['view']['timeAxisViewModel']['getDateFromPosition'](_0xecbcx3, _0xecbcx2)
    },
    getEventRenderData: function(_0xecbcx1, _0xecbcx2, _0xecbcx7) {
        var _0xecbcxa = _0xecbcx1['getStartDate'](),
            _0xecbcx9 = _0xecbcx1['getEndDate'](),
            _0xecbcxd = this['view'],
            _0xecbcx5 = _0xecbcxd['panel']['headerCt']['getGridColumns'](),
            _0xecbcx6 = _0xecbcx5[_0xecbcx7]['start'],
            _0xecbcx11 = _0xecbcx5[_0xecbcx7]['end'],
            _0xecbcx8 = Math;
        var _0xecbcx4 = Math['floor'](_0xecbcxd['getCoordinateFromDate'](Ext.ux.Scheduler['util']['Date']['max'](_0xecbcxa, _0xecbcx6)));
        var _0xecbcxe = Math['floor'](_0xecbcxd['timeAxisViewModel']['getPositionFromDate'](Ext.ux.Scheduler['util']['Date']['min'](_0xecbcx9, _0xecbcx11), true));
        var _0xecbcx3;
        if (_0xecbcxe === 0) {
            _0xecbcxe = _0xecbcxd['getStore']()['getCount']() * _0xecbcxd['getRowHeight']()
        };
        _0xecbcx3 = {
            top: _0xecbcx8['max'](0, _0xecbcx8['min'](_0xecbcx4, _0xecbcxe) - _0xecbcxd['eventBorderWidth']),
            height: _0xecbcx8['max'](1, _0xecbcx8['abs'](_0xecbcx4 - _0xecbcxe))
        };
        _0xecbcx3['start'] = _0xecbcxa;
        _0xecbcx3['end'] = _0xecbcx9;
        _0xecbcx3['startsOutsideView'] = _0xecbcxa < _0xecbcx6;
        _0xecbcx3['endsOutsideView'] = _0xecbcx9 > _0xecbcx11;
        return _0xecbcx3
    },
    getScheduleRegion: function(_0xecbcx6, _0xecbcx5) {
        var _0xecbcx2 = this['view'],
            _0xecbcx7 = _0xecbcx6 ? this['getColumnsByResource'](_0xecbcx6)['getRegion']() : _0xecbcx2['getTableRegion'](),
            _0xecbcx1 = this['translateToPageCoordinate'](0),
            _0xecbcx4 = this['translateToPageCoordinate'](_0xecbcx2['getStore']()['getCount']() * _0xecbcx2['getRowHeight']()),
            _0xecbcx9 = _0xecbcx7['left'] + _0xecbcx2['barMargin'],
            _0xecbcx3 = _0xecbcx7['right'] - _0xecbcx2['barMargin'];
        return new Ext['util'].Region(Math['min'](_0xecbcx1, _0xecbcx4), _0xecbcx3, Math['max'](_0xecbcx1, _0xecbcx4), _0xecbcx9)
    },
    getWeekViewColumnWidth: function() {
        return this['view']['timeAxisViewModel']['weekViewColumnWidth']
    },
    getResourceRegion: function(_0xecbcx7, _0xecbcx2, _0xecbcx9) {
        var _0xecbcx8 = this['view'],
            _0xecbcx4 = _0xecbcx8['getResourceStore']()['indexOf'](_0xecbcx7) * this['getWeekViewColumnWidth'](),
            _0xecbcxa = _0xecbcx8['timeAxis']['getStart'](),
            _0xecbcxe = _0xecbcx8['timeAxis']['getEnd'](),
            _0xecbcx1 = _0xecbcx2 ? Ext.ux.Scheduler['util']['Date']['max'](_0xecbcxa, _0xecbcx2) : _0xecbcxa,
            _0xecbcx3 = _0xecbcx9 ? Ext.ux.Scheduler['util']['Date']['min'](_0xecbcxe, _0xecbcx9) : _0xecbcxe,
            _0xecbcx6 = Math['max'](0, _0xecbcx8['getCoordinateFromDate'](_0xecbcx1) - _0xecbcx8['cellTopBorderWidth']),
            _0xecbcx11 = _0xecbcx8['getCoordinateFromDate'](_0xecbcx3) - _0xecbcx8['cellTopBorderWidth'],
            _0xecbcx5 = _0xecbcx4 + _0xecbcx8['cellBorderWidth'],
            _0xecbcxd = _0xecbcx4 + this['getWeekViewColumnWidth']() - _0xecbcx8['cellBorderWidth'];
        return new Ext['util'].Region(Math['min'](_0xecbcx6, _0xecbcx11), _0xecbcxd, Math['max'](_0xecbcx6, _0xecbcx11), _0xecbcx5)
    },
    columnRenderer: function(_0xecbcx3, _0xecbcxf, _0xecbcx9, _0xecbcx7, _0xecbcxe) {
        var _0xecbcx8 = this['view'];
        var _0xecbcx5 = '';
        if (_0xecbcx7 === 0) {
            var _0xecbcxd, _0xecbcx2, _0xecbcx6, _0xecbcx4;
            _0xecbcxd = [];
            _0xecbcx2 = this['getColumnEvents'](_0xecbcxf['column']);
            for (_0xecbcx6 = 0, _0xecbcx4 = _0xecbcx2['length']; _0xecbcx6 < _0xecbcx4; _0xecbcx6++) {
                var _0xecbcx1 = _0xecbcx2[_0xecbcx6];
                _0xecbcxd['push'](_0xecbcx8['generateTplData'](_0xecbcx1, _0xecbcx1['getResources']()[0], _0xecbcxe))
            };
            if (_0xecbcxf['column']['rendered'] && this['getWeekViewColumnWidth']() !== _0xecbcxf['column']['getWidth']()) {
                this['setColumnWidth'](_0xecbcxf['column']['getWidth'](), true)
            };
            _0xecbcx8['eventLayout']['vertical']['applyLayout'](_0xecbcxd, this['getWeekViewColumnWidth']() - (2 * _0xecbcx8['barMargin']) - _0xecbcx8['cellBorderWidth']);
            _0xecbcx5 = '&#160;' + _0xecbcx8['eventTpl']['apply'](_0xecbcxd)
        };
        if (_0xecbcxe % 2 === 1) {
            _0xecbcxf['tdCls'] = (_0xecbcxf['tdCls'] || '') + ' ' + _0xecbcx8['altColCls'];
            _0xecbcxf['cellCls'] = (_0xecbcxf['cellCls'] || '') + ' ' + _0xecbcx8['altColCls']
        };
        return _0xecbcx5
    },
    resolveResource: function(_0xecbcx3) {
        var _0xecbcx1 = this['view'];
        _0xecbcx3 = Ext['fly'](_0xecbcx3)['is'](_0xecbcx1['timeCellSelector']) ? _0xecbcx3 : Ext['fly'](_0xecbcx3)['up'](_0xecbcx1['timeCellSelector']);
        if (_0xecbcx3) {
            var _0xecbcx4 = _0xecbcx3['dom'] ? _0xecbcx3['dom'] : _0xecbcx3;
            var _0xecbcx2 = 0;
            if (Ext['isIE8m']) {
                _0xecbcx4 = _0xecbcx4['previousSibling'];
                while (_0xecbcx4) {
                    if (_0xecbcx4['nodeType'] === 1) {
                        _0xecbcx2++
                    };
                    _0xecbcx4 = _0xecbcx4['previousSibling']
                }
            } else {
                _0xecbcx2 = Ext['Array']['indexOf'](Array['prototype']['slice']['call'](_0xecbcx4['parentNode']['children']), _0xecbcx4)
            };
            if (_0xecbcx2 >= 0) {
                var _0xecbcx5 = _0xecbcx1['panel']['headerCt']['getGridColumns']()[_0xecbcx2];
                return {
                    start: _0xecbcx5['start'],
                    end: _0xecbcx5['end']
                }
            }
        }
    },
    onEventUpdate: function(_0xecbcx2, _0xecbcx5) {
        if (!this['view']['headerCt']['items']['get'](0)['rendered']) {
            return
        };
        this['renderSingle'](_0xecbcx5);
        var _0xecbcx1 = this['view'];
        var _0xecbcx3 = _0xecbcx1['getEventSelectionModel']();
        _0xecbcx3['forEachEventRelatedSelection'](_0xecbcx5, function(_0xecbcx4) {
            _0xecbcx1['onEventBarSelect'](_0xecbcx4)
        })
    },
    onEventAdd: function(_0xecbcx2, _0xecbcx5) {
        if (!this['view']['headerCt']['items']['get'](0)['rendered']) {
            return
        };
        var _0xecbcx1 = this['view'];
        if (_0xecbcx5['length'] === 1) {
            this['renderSingle'](_0xecbcx5[0])
        } else {
            _0xecbcx1['repaintAllEvents']()
        }
    },
    onEventRemove: function(_0xecbcx2, _0xecbcx5) {
        if (!this['view']['headerCt']['items']['get'](0)['rendered']) {
            return
        };
        var _0xecbcx1 = this['view'];
        if (_0xecbcx5['length'] === 1) {
            Ext['Array']['each'](_0xecbcx1['getElementsFromEventRecord'](_0xecbcx5[0]), function(_0xecbcx3) {
                Ext['fly'](_0xecbcx3)['destroy']()
            });
            this['relayoutRenderedEvents'](_0xecbcx5[0])
        } else {
            _0xecbcx1['repaintAllEvents']()
        }
    },
    relayoutRenderedEvents: function(_0xecbcx2) {
        var _0xecbcx5 = this,
            _0xecbcx1 = _0xecbcx5['getColumnsForDateRange'](_0xecbcx2, true);
        Ext['Array']['each'](_0xecbcx1, function(_0xecbcx3) {
            _0xecbcx5['repaintEventsForColumn'](_0xecbcx3['column'], _0xecbcx3['index'])
        })
    },
    renderSingle: function(_0xecbcx4) {
        var _0xecbcx1 = this['view'];
        Ext['Array']['each'](_0xecbcx1['getElementsFromEventRecord'](_0xecbcx4), function(_0xecbcx9) {
            Ext['fly'](_0xecbcx9)['destroy']()
        });
        var _0xecbcx3 = _0xecbcx4['previous'] || {};
        var _0xecbcx2 = Ext.ux.Scheduler['util']['Date'];
        var _0xecbcx6 = new Ext.ux.Scheduler['model'].Range({
            StartDate: _0xecbcx2['min'](_0xecbcx3['StartDate'] || _0xecbcx4['getStartDate'](), _0xecbcx4['getStartDate']()),
            EndDate: _0xecbcx2['max'](_0xecbcx3['EndDate'] || _0xecbcx4['getEndDate'](), _0xecbcx4['getEndDate']())
        });
        var _0xecbcx5 = this['getColumnsForDateRange'](_0xecbcx6);
        Ext['Array']['each'](_0xecbcx5, function(_0xecbcx8) {
            var _0xecbcxa = _0xecbcx8['getIndex']();
            var _0xecbcx7 = this['getColumnEvents'](_0xecbcx8);
            var _0xecbcx9 = Ext['Array']['map'](_0xecbcx7, function(_0xecbcxd) {
                if (_0xecbcxd === _0xecbcx4) {
                    return _0xecbcx1['generateTplData'](_0xecbcx4, _0xecbcx4['getResources']()[0], _0xecbcxa)
                } else {
                    return {
                        start: _0xecbcxd['getStartDate']() < _0xecbcx8['start'] ? _0xecbcx8['start'] : _0xecbcxd['getStartDate'](),
                        end: _0xecbcxd['getEndDate']() > _0xecbcx8['end'] ? _0xecbcx8['end'] : _0xecbcxd['getEndDate'](),
                        event: _0xecbcxd
                    }
                }
            });
            _0xecbcx1['eventLayout']['vertical']['applyLayout'](_0xecbcx9, _0xecbcx8['getWidth']() - (2 * _0xecbcx1['barMargin']) - _0xecbcx1['cellBorderWidth']);
            Ext['Array']['each'](_0xecbcx9, function(_0xecbcxe) {
                if (_0xecbcxe['event'] === _0xecbcx4) {
                    var _0xecbcx11 = _0xecbcx1['getScheduleCell'](0, _0xecbcxa);
                    if (_0xecbcx11) {
                        if (!Ext['versions']['touch']) {
                            _0xecbcx11 = Ext['fly'](_0xecbcx11)['first']()
                        };
                        _0xecbcx1['eventTpl']['append'](_0xecbcx11, [_0xecbcxe])
                    }
                } else {
                    var _0xecbcxd = _0xecbcx1['getElementsFromEventRecord'](_0xecbcxe['event'], null, _0xecbcxa)[0];
                    if (_0xecbcxd) {
                        _0xecbcxd['setStyle']({
                            left: _0xecbcxe['left'] + 'px',
                            width: Math['max'](_0xecbcxe['width'], 0) + 'px'
                        })
                    }
                }
            })
        }, this)
    },
    repaintEventsForColumn: function(_0xecbcx4, _0xecbcxe) {
        var _0xecbcxf = this;
        var _0xecbcxb = _0xecbcxf['getColumnEvents'](_0xecbcx4);
        var _0xecbcxc = _0xecbcxf['view'];
        var _0xecbcx7 = [],
            _0xecbcx8, _0xecbcx6, _0xecbcx1, _0xecbcx3, _0xecbcx5, _0xecbcx9;
        for (_0xecbcx8 = 0, _0xecbcx6 = _0xecbcxb['length']; _0xecbcx8 < _0xecbcx6; _0xecbcx8++) {
            _0xecbcx1 = _0xecbcxb[_0xecbcx8];
            _0xecbcx3 = _0xecbcxc['getElementsFromEventRecord'](_0xecbcx1)[0];
            if (!_0xecbcx3) {
                return
            };
            var _0xecbcxd = _0xecbcx3['id']['split']('-');
            _0xecbcxd['pop']();
            _0xecbcx5 = _0xecbcx1['getStartDate']();
            _0xecbcx9 = _0xecbcx1['getEndDate']();
            _0xecbcx7['push']({
                start: _0xecbcx5 < _0xecbcx4['start'] ? _0xecbcx4['start'] : _0xecbcx5,
                end: _0xecbcx9 > _0xecbcx4['end'] ? _0xecbcx4['end'] : _0xecbcx9,
                event: _0xecbcx1,
                id: _0xecbcxd.join('-')
            })
        };
        _0xecbcxc['eventLayout']['vertical']['applyLayout'](_0xecbcx7, _0xecbcx4['getWidth']() - (2 * _0xecbcxc['barMargin']) - _0xecbcxc['cellBorderWidth']);
        var _0xecbcx2 = _0xecbcxc['getNode'](0);
        for (_0xecbcx8 = 0; _0xecbcx8 < _0xecbcx7['length']; _0xecbcx8++) {
            _0xecbcx1 = _0xecbcx7[_0xecbcx8];
            _0xecbcx3 = Ext['DomQuery']['selectNode']('td:nth-child(' + (_0xecbcxe + 1) + ') [id^=' + _0xecbcx1['id'] + '-]', _0xecbcx2);
            _0xecbcx3 && Ext['fly'](_0xecbcx3)['setStyle']({
                left: _0xecbcx1['left'] + 'px',
                width: Math['max'](_0xecbcx1['width'], 0) + 'px'
            })
        }
    },
    getTimeSpanRegion: function(_0xecbcx1, _0xecbcx3) {
        var _0xecbcx6 = this['view'],
            _0xecbcx5 = _0xecbcx6['getCoordinateFromDate'](_0xecbcx1),
            _0xecbcx9 = _0xecbcx3 ? _0xecbcx6['timeAxisViewModel']['getPositionFromDate'](_0xecbcx3, true) : _0xecbcx5;
        var _0xecbcx2 = this['getColumnsBy'](function(_0xecbcx8) {
            return _0xecbcx8['start'] <= _0xecbcx1 && _0xecbcx8['end'] > _0xecbcx1
        })[0];
        var _0xecbcx4 = this['getColumnsBy'](function(_0xecbcx8) {
            return _0xecbcx8['start'] < _0xecbcx3 && _0xecbcx8['end'] >= _0xecbcx3
        })[0];
        if (!_0xecbcx2 || !_0xecbcx4 || !_0xecbcx2['rendered'] || !_0xecbcx4['rendered']) {
            return new Ext['util'].Region(-1, 0, -1, 0)
        };
        var _0xecbcxa = this['translateToScheduleCoordinate']([_0xecbcx2['getX'](), 0]);
        var _0xecbcx7 = this['translateToScheduleCoordinate']([_0xecbcx4 ? _0xecbcx4['getRegion']()['right'] : _0xecbcx2['getWidth']() + _0xecbcxa[0], 0]);
        return new Ext['util'].Region(Math['min'](_0xecbcx5, _0xecbcx9), _0xecbcx7[0], Math['max'](_0xecbcx5, _0xecbcx9), _0xecbcxa[0])
    },
    getStartEndDatesFromRegion: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = this['view']['getDateFromCoordinate']([_0xecbcx5['left'], _0xecbcx5['top']], _0xecbcx2),
            _0xecbcx3 = this['view']['getDateFromCoordinate']([_0xecbcx5['left'], _0xecbcx5['bottom']], _0xecbcx2);
        if (_0xecbcx1 && _0xecbcx3) {
            return {
                start: _0xecbcx1,
                end: _0xecbcx3
            }
        } else {
            return null
        }
    },
    setColumnWidth: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = this['view'];
        _0xecbcx1['weekViewColumnWidth'] = _0xecbcx5;
        _0xecbcx1['getTimeAxisViewModel']()['setViewColumnWidth'](_0xecbcx5, _0xecbcx2)
    },
    getVisibleDateRange: function() {
        var _0xecbcx4 = this['view'];
        if (!_0xecbcx4['rendered']) {
            return null
        };
        var _0xecbcx5 = _0xecbcx4['getScroll'](),
            _0xecbcx2 = _0xecbcx4['getViewContainerHeight'](),
            _0xecbcx3 = _0xecbcx4['getTableRegion'](),
            _0xecbcx6 = _0xecbcx4['timeAxis']['getEnd']();
        if (_0xecbcx3['bottom'] - _0xecbcx3['top'] < _0xecbcx2) {
            var _0xecbcx1 = _0xecbcx4['timeAxis']['getStart']();
            return {
                startDate: _0xecbcx1,
                endDate: _0xecbcx6
            }
        };
        return {
            startDate: _0xecbcx4['getDateFromCoordinate'](_0xecbcx5['top'], null, true),
            endDate: _0xecbcx4['getDateFromCoordinate'](_0xecbcx5['top'] + _0xecbcx2, null, true) || _0xecbcx6
        }
    },
    getItemBox: function(_0xecbcx1) {
        return null
    },
    getConnectorStartSide: function(_0xecbcx1) {
        return 'top'
    },
    getConnectorEndSide: function(_0xecbcx1) {
        return 'bottom'
    }
});
Ext.define('Ext.ux.Scheduler.mixin.SchedulerView', {
    extend: 'Ext.ux.Scheduler.mixin.AbstractSchedulerView',
    mixins: ['Ext.ux.Scheduler.mixin.Localizable'],
    requires: ['Ext.ux.Scheduler.patches.DragDropManager', 'Ext.ux.Scheduler.patches.NavigationModel', 'Ext.ux.Scheduler.patches.NavigationModel6_0_2', 'Ext.ux.Scheduler.feature.DragCreator', 'Ext.ux.Scheduler.feature.DragDrop', 'Ext.ux.Scheduler.feature.ResizeZone', 'Ext.ux.Scheduler.column.Resource', 'Ext.ux.Scheduler.column.Day', 'Ext.ux.Scheduler.view.WeekView', 'Ext.XTemplate'],
    eventResizeHandles: 'end',
    dndValidatorFn: Ext['emptyFn'],
    resizeValidatorFn: Ext['emptyFn'],
    createValidatorFn: Ext['emptyFn'],
    weekViewClass: 'Ext.ux.Scheduler.view.WeekView',
    lockedGridDependsOnSchedule: null,
    _initializeSchedulerView: function() {
        this['callParent'](arguments);
        this['on']({
            destroy: this['_destroy'],
            afterrender: this['_afterRender'],
            itemupdate: this['onRowUpdated'],
            scope: this
        });
        this['timeAxis']['on']('beginreconfigure', this['clearRowHeightCache'], this);
        if (Ext['getVersion']()['isGreaterThan']('5.1.1')) {
            this['on']('itemadd', function(_0xecbcx2) {
                var _0xecbcx5 = this['all']['item'](this['all']['endIndex'] - _0xecbcx2['length']);
                if (_0xecbcx5) {
                    _0xecbcx5['dom']['style']['height'] = ''
                }
            })
        };
        var _0xecbcx1 = this;
        if (!this['eventPrefix']) {
            throw 'eventPrefix missing'
        };
        this['on']({
            resourcestorechange: this['clearRowHeightCache'],
            assignmentstorechange: this['clearRowHeightCache'],
            eventstorechange: this['clearRowHeightCache'],
            scope: this
        })
    },
    inheritables: function() {
        return {
            loadingText: this.L('loadingText'),
            overItemCls: '',
            trackOver: false,
            selectedItemCls: '',
            setReadOnly: function(_0xecbcx1) {
                if (this['dragCreator']) {
                    this['dragCreator']['setDisabled'](_0xecbcx1)
                };
                this['callParent'](arguments)
            },
            repaintEventsForResource: function(_0xecbcx4, _0xecbcx5) {
                var _0xecbcx3 = this,
                    _0xecbcx6 = _0xecbcx3['isHorizontal'](),
                    _0xecbcx1 = _0xecbcx6 ? _0xecbcx3['indexOf'](_0xecbcx4) : 0;
                if (_0xecbcx6) {
                    _0xecbcx3['eventLayout']['horizontal']['clearCache'](_0xecbcx4)
                };
                if (_0xecbcx1 >= 0) {
                    Ext['suspendLayouts']();
                    if (_0xecbcx6) {
                        _0xecbcx3['refreshNode'](_0xecbcx4);
                        if (_0xecbcx3['lockedGridDependsOnSchedule']) {
                            _0xecbcx3['lockingPartner']['refreshNode'](_0xecbcx4)
                        }
                    } else {
                        _0xecbcx3['refreshNode'](_0xecbcx1)
                    };
                    Ext['resumeLayouts']();
                    if (_0xecbcx5) {
                        var _0xecbcx9 = _0xecbcx3['getEventSelectionModel']();
                        var _0xecbcx2 = _0xecbcx3['getEventStore']()['getEventsForResource'](_0xecbcx4);
                        Ext['Array']['each'](_0xecbcx2, function(_0xecbcx7) {
                            _0xecbcx9['forEachEventRelatedSelection'](_0xecbcx7, function(_0xecbcxa) {
                                _0xecbcx3['onEventBarSelect'](_0xecbcxa, true)
                            })
                        })
                    }
                }
            },
            repaintAllEvents: function() {
                if (this['isHorizontal']()) {
                    this['refreshView']()
                } else {
                    this['refreshNode'](0)
                }
            },
            handleScheduleEvent: function(_0xecbcx9) {
                var _0xecbcx1 = _0xecbcx9['getTarget']('.' + this['eventCls'], 3),
                    _0xecbcx8 = !_0xecbcx1 && _0xecbcx9['getTarget']('.' + this['timeCellCls'], 3);
                if (_0xecbcx8) {
                    var _0xecbcxd = this['getDateFromDomEvent'](_0xecbcx9, 'floor');
                    var _0xecbcxa = this['findRowByChild'](_0xecbcx8);
                    var _0xecbcx6 = this['indexOf'](_0xecbcxa);
                    var _0xecbcx2;
                    if (this['isHorizontal']()) {
                        _0xecbcx2 = this['getRecordForRowNode'](_0xecbcxa)
                    } else {
                        var _0xecbcx5 = _0xecbcx9['getTarget'](this['timeCellSelector'], 5);
                        if (_0xecbcx5) {
                            var _0xecbcx7 = typeof _0xecbcx5['cellIndex'] == 'number' ? _0xecbcx5['cellIndex'] : _0xecbcx5['getAttribute']('data-cellIndex');
                            var _0xecbcx3 = this['headerCt']['getGridColumns']()[_0xecbcx7];
                            _0xecbcx2 = _0xecbcx3 && _0xecbcx3['model']
                        }
                    };
                    if (_0xecbcx9['type']['indexOf']('pinch') >= 0) {
                        this['fireEvent']('schedule' + _0xecbcx9['type'], this, _0xecbcx9)
                    } else {
                        this['fireEvent']('schedule' + _0xecbcx9['type'], this, _0xecbcxd, _0xecbcx6, _0xecbcx2, _0xecbcx9)
                    }
                }
            },
            onEventDataRefresh: function() {
                this['clearRowHeightCache']();
                this['callParent'](arguments)
            },
            onUnbindStore: function(_0xecbcx1) {
                _0xecbcx1['un']({
                    refresh: this['clearRowHeightCache'],
                    clear: this['clearRowHeightCache'],
                    load: this['clearRowHeightCache'],
                    scope: this
                });
                this['callParent'](arguments)
            },
            bindStore: function(_0xecbcx1) {
                _0xecbcx1 && _0xecbcx1['on']({
                    refresh: this['clearRowHeightCache'],
                    clear: this['clearRowHeightCache'],
                    load: this['clearRowHeightCache'],
                    scope: this
                });
                this['callParent'](arguments)
            },
            refreshKeepingScroll: function() {
                this['lockingPartner']['refreshView']();
                this['callParent'](arguments)
            }
        }
    },
    getEventSelectionModel: function() {
        var _0xecbcx2 = this,
            _0xecbcx5 = _0xecbcx2['eventSelModel'] || {},
            _0xecbcx1 = _0xecbcx2['eventSelModelType'],
            _0xecbcx3;
        if (_0xecbcx5['events']) {
            return _0xecbcx5
        };
        if (!_0xecbcx1 && _0xecbcx2['getEventStore']()['getAssignmentStore']()) {
            _0xecbcx1 = 'assignmentmodel'
        } else {
            if (!_0xecbcx1) {
                _0xecbcx1 = 'eventmodel'
            }
        };
        _0xecbcx3 = 'SINGLE';
        if (_0xecbcx2['simpleSelect']) {
            _0xecbcx3 = 'SIMPLE'
        } else {
            if (_0xecbcx2['multiSelect']) {
                _0xecbcx3 = 'MULTI'
            }
        };
        Ext['applyIf'](_0xecbcx5, {
            allowDeselect: _0xecbcx2['allowDeselect'],
            mode: _0xecbcx3
        });
        if (!_0xecbcx5['events']) {
            _0xecbcx5 = _0xecbcx2['eventSelModel'] = Ext['create']('selection.' + _0xecbcx1, _0xecbcx5)
        };
        if (_0xecbcx2['disableSelection']) {
            _0xecbcx5['locked'] = true
        };
        return _0xecbcx5
    },
    _afterRender: function() {
        this['setEventStore'](this['eventStore'], true);
        this['getEventSelectionModel']()['bindToView'](this);
        this['setupEventListeners']();
        this['configureFunctionality']();
        var _0xecbcx1 = this['headerCt']['resizer'];
        if (_0xecbcx1) {
            _0xecbcx1['doResize'] = Ext['Function']['createSequence'](_0xecbcx1['doResize'], this['afterHeaderResized'], this)
        };
        this['on']('itemupdate', function() {
            this['hoveredEventNode'] = null
        })
    },
    _destroy: function() {
        this['setEventStore'](null)
    },
    clearRowHeightCache: function() {
        if (this['isHorizontal']()) {
            this['eventLayout']['horizontal']['clearCache']()
        }
    },
    configureFunctionality: function() {
        var _0xecbcx1 = this['validatorFnScope'] || this;
        if (this['eventResizeHandles'] !== 'none' && Ext.ux.Scheduler['feature']['ResizeZone']) {
            this['resizePlug'] = new Ext.ux.Scheduler['feature'].ResizeZone(Ext['applyIf']({
                schedulerView: this,
                validatorFn: function(_0xecbcx3, _0xecbcx5, _0xecbcx2, _0xecbcx4) {
                    return (this['allowOverlap'] || this['isDateRangeAvailable'](_0xecbcx2, _0xecbcx4, _0xecbcx5, _0xecbcx3)) && this['resizeValidatorFn']['apply'](_0xecbcx1, arguments)
                },
                validatorFnScope: this
            }, this['resizeConfig'] || {}))
        };
        if (this['enableEventDragDrop'] !== false && Ext.ux.Scheduler['feature']['DragDrop']) {
            this['dragdropPlug'] = new Ext.ux.Scheduler['feature'].DragDrop(this, {
                validatorFn: function(_0xecbcx5, _0xecbcx2, _0xecbcx3, _0xecbcx4) {
                    return (this['allowOverlap'] || this['isDateRangeAvailable'](_0xecbcx3, Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx3, Ext.ux.Scheduler['util']['Date'].MILLI, _0xecbcx4), _0xecbcx5[0], _0xecbcx2)) && this['dndValidatorFn']['apply'](_0xecbcx1, arguments)
                },
                validatorFnScope: this,
                dragConfig: this['dragConfig'] || {}
            })
        };
        if (this['enableDragCreation'] !== false && Ext.ux.Scheduler['feature']['DragCreator']) {
            this['dragCreator'] = new Ext.ux.Scheduler['feature'].DragCreator(Ext['applyIf']({
                schedulerView: this,
                disabled: this['readOnly'],
                validatorFn: function(_0xecbcx5, _0xecbcx2, _0xecbcx3) {
                    return (this['allowOverlap'] || this['isDateRangeAvailable'](_0xecbcx2, _0xecbcx3, null, _0xecbcx5)) && this['createValidatorFn']['apply'](_0xecbcx1, arguments)
                },
                validatorFnScope: this
            }, this['createConfig'] || {}))
        }
    },
    onDragDropStart: function() {
        if (this['dragCreator']) {
            this['dragCreator']['setDisabled'](true)
        };
        if (this['tip']) {
            this['tip']['hide']();
            this['tip']['disable']()
        };
        if (this['overScheduledEventClass']) {
            this['setMouseOverEnabled'](false)
        };
        this['disableViewScroller'](true);
        this['hoveredEventNode'] = null
    },
    onDragDropEnd: function() {
        if (this['dragCreator']) {
            this['dragCreator']['setDisabled'](false)
        };
        if (this['tip']) {
            this['tip']['enable']()
        };
        if (this['overScheduledEventClass']) {
            this['setMouseOverEnabled'](true)
        };
        this['disableViewScroller'](false)
    },
    onBeforeDragCreate: function(_0xecbcx2, _0xecbcx5, _0xecbcx1, _0xecbcx3) {
        return !this['readOnly'] && !_0xecbcx3['ctrlKey']
    },
    onDragCreateStart: function() {
        if (this['overScheduledEventClass']) {
            this['setMouseOverEnabled'](false)
        };
        if (this['tip']) {
            this['tip']['hide']();
            this['tip']['disable']()
        };
        this['disableViewScroller'](true)
    },
    onDragCreateEnd: function(_0xecbcx2, _0xecbcx1, _0xecbcx5) {
        if (!this['getEventEditor']()) {
            var _0xecbcx3 = _0xecbcx5 ? [_0xecbcx5] : [];
            if (this['fireEvent']('beforeeventadd', this, _0xecbcx1, _0xecbcx3) !== false) {
                this['getEventStore']()['append'](_0xecbcx1);
                if (!this['isWeekView']()) {
                    _0xecbcx1['assign'](_0xecbcx5)
                };
                this['onEventCreated'](_0xecbcx1, _0xecbcx3)
            }
        };
        if (this['overScheduledEventClass']) {
            this['setMouseOverEnabled'](true)
        }
    },
    onEventCreated: function(_0xecbcx1, _0xecbcx2) {},
    onAfterDragCreate: function() {
        if (this['overScheduledEventClass']) {
            this['setMouseOverEnabled'](true)
        };
        if (this['tip']) {
            this['tip']['enable']()
        };
        this['disableViewScroller'](false)
    },
    onBeforeResize: function() {
        return !this['readOnly']
    },
    onResizeStart: function() {
        if (this['tip']) {
            this['tip']['hide']();
            this['tip']['disable']()
        };
        if (this['dragCreator']) {
            this['dragCreator']['setDisabled'](true)
        };
        this['disableViewScroller'](true)
    },
    onResizeEnd: function() {
        if (this['tip']) {
            this['tip']['enable']()
        };
        if (this['dragCreator']) {
            this['dragCreator']['setDisabled'](false)
        };
        this['disableViewScroller'](false)
    },
    setupEventListeners: function() {
        this['on']({
            eventdragstart: this['onDragDropStart'],
            aftereventdrop: this['onDragDropEnd'],
            beforedragcreate: this['onBeforeDragCreate'],
            dragcreatestart: this['onDragCreateStart'],
            dragcreateend: this['onDragCreateEnd'],
            afterdragcreate: this['onAfterDragCreate'],
            beforeeventresize: this['onBeforeResize'],
            eventresizestart: this['onResizeStart'],
            eventresizeend: this['onResizeEnd'],
            scope: this
        })
    },
    afterHeaderResized: function() {
        var _0xecbcx2 = this['headerCt']['resizer'];
        if (_0xecbcx2 && !this['isHorizontal']()) {
            if (this['panel']['forceFit']) {
                this['setColumnWidth'](_0xecbcx2['origWidth'])
            } else {
                var _0xecbcx1 = _0xecbcx2['dragHd']['getWidth']();
                this['setColumnWidth'](_0xecbcx1)
            }
        }
    },
    columnRenderer: function(_0xecbcx4, _0xecbcx5, _0xecbcx1, _0xecbcx3, _0xecbcx2) {
        return this[this['mode']]['columnRenderer'](_0xecbcx4, _0xecbcx5, _0xecbcx1, _0xecbcx3, _0xecbcx2)
    },
    onRowUpdated: function(_0xecbcx5) {
        var _0xecbcx2 = this,
            _0xecbcx1;
        if (_0xecbcx2['isHorizontal']() && _0xecbcx2['hasListener']('eventrepaint')) {
            Ext['Array']['each'](_0xecbcx5['getEvents'](), function(_0xecbcx3) {
                _0xecbcx1 = _0xecbcx2['getElementsFromEventRecord'](_0xecbcx3, _0xecbcx5, null, true);
                Ext['Array']['each'](_0xecbcx1, function(_0xecbcx4) {
                    _0xecbcx2['fireEvent']('eventrepaint', _0xecbcx2, _0xecbcx3, _0xecbcx4)
                })
            })
        }
    },
    scrollResourceEventIntoView: function(_0xecbcx6, _0xecbcx7, _0xecbcxd, _0xecbcx3, _0xecbcx1, _0xecbcxf, _0xecbcxc) {
        var _0xecbcxe = this,
            _0xecbcx11 = _0xecbcx7['getStartDate'](),
            _0xecbcx9 = _0xecbcx7['getEndDate'](),
            _0xecbcx5, _0xecbcx2;
        var _0xecbcx4 = function() {
            _0xecbcx2 = _0xecbcxe['getElementsFromEventRecord'](_0xecbcx7, _0xecbcx6, _0xecbcxd);
            _0xecbcx2 = _0xecbcx2['length'] && _0xecbcx2[0] || null;
            _0xecbcxe['scrollElementIntoView'](_0xecbcx2, true, _0xecbcx1, _0xecbcx3, null, _0xecbcxf, _0xecbcxc)
        };
        if (!_0xecbcxe['timeAxis']['dateInAxis'](_0xecbcx11) || !_0xecbcxe['timeAxis']['dateInAxis'](_0xecbcx9)) {
            _0xecbcx5 = _0xecbcxe['timeAxis']['getEnd']() - _0xecbcxe['timeAxis']['getStart']();
            _0xecbcxe['timeAxis']['setTimeSpan'](new Date(_0xecbcx11.valueOf() - _0xecbcx5 / 2), new Date(_0xecbcx9['getTime']() + _0xecbcx5 / 2));
            _0xecbcxe['up']('panel')['scrollTask']['cancel']()
        };
        if (this['isHorizontal']()) {
            var _0xecbcx8 = _0xecbcxe['up']('timelinegrid,timelinetree');
            var _0xecbcxa = _0xecbcx8['store']['isTreeStore'];
            _0xecbcx8['ensureVisible'](_0xecbcxa ? _0xecbcx6['getPath']() : _0xecbcx6, {
                callback: function() {
                    if (this['isLocked'] === false || Ext['getVersion']()['gt']('6.2.2')) {
                        _0xecbcx4()
                    }
                }
            })
        } else {
            _0xecbcx4()
        }
    }
});
Ext.define('Ext.ux.Scheduler.view.SchedulerGridView', {
    extend: 'Ext.ux.Scheduler.view.TimelineGridView',
    mixins: ['Ext.ux.Scheduler.mixin.SchedulerView', 'Ext.ux.Scheduler.mixin.GridViewCanvas', 'Ext.ux.Scheduler.mixin.Localizable'],
    alias: 'widget.schedulergridview'
}, function() {
    this['override'](Ext.ux.Scheduler['mixin']['SchedulerView']['prototype']['inheritables']() || {})
});
Ext.define('Ext.ux.Scheduler.selection.EventModel', {
    extend: 'Ext.selection.Model',
    alias: 'selection.eventmodel',
    requires: ['Ext.util.KeyNav'],
    deselectOnContainerClick: true,
    selectedOnMouseDown: null,
    bindToView: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['view'] = _0xecbcx1;
        _0xecbcx2['bindStore'](_0xecbcx2['getSelectionStore'](_0xecbcx1));
        _0xecbcx1['on']({
            eventclick: _0xecbcx2['onEventClick'],
            eventmousedown: _0xecbcx2['onEventMouseDown'],
            itemmousedown: _0xecbcx2['onItemMouseDown'],
            refresh: function() {
                _0xecbcx2['refresh']()
            },
            destroy: function() {
                _0xecbcx2['bindStore'](null)
            },
            scope: _0xecbcx2
        })
    },
    getSelectionStore: function(_0xecbcx1) {
        return _0xecbcx1['getEventStore']()
    },
    bindStore: function(_0xecbcx1) {
        if (this['getStore']()) {
            this['mun'](this['getStore'](), 'load', this['onSelectionStoreLoad'], this)
        };
        if (_0xecbcx1) {
            this['mon'](_0xecbcx1, 'load', this['onSelectionStoreLoad'], this)
        };
        this['callParent'](arguments)
    },
    onSelectionStoreLoad: function() {
        this['deselectAll']()
    },
    onEventMouseDown: function(_0xecbcx2, _0xecbcx1, _0xecbcx5) {
        this['selectedOnMouseDown'] = null;
        if ((!this['ignoreRightMouseSelection'] || _0xecbcx5['button'] !== 2) && !this['isSelected'](_0xecbcx1)) {
            this['selectedOnMouseDown'] = _0xecbcx1;
            this['selectWithEvent'](_0xecbcx1, _0xecbcx5)
        }
    },
    onEventClick: function(_0xecbcx2, _0xecbcx1, _0xecbcx5) {
        if ((!this['ignoreRightMouseSelection'] || _0xecbcx5['button'] !== 2) && !this['selectedOnMouseDown']) {
            this['selectWithEvent'](_0xecbcx1, _0xecbcx5)
        }
    },
    onItemMouseDown: function(_0xecbcx6, _0xecbcx4, _0xecbcxa, _0xecbcx7, _0xecbcx9) {
        if (this['deselectOnContainerClick'] && !_0xecbcx9['getTarget'](this['view']['eventSelector'])) {
            this['deselectAll']()
        }
    },
    onSelectChange: function(_0xecbcx3, _0xecbcx2, _0xecbcx8, _0xecbcx1) {
        var _0xecbcx6 = this,
            _0xecbcx9 = _0xecbcx6['view'],
            _0xecbcx7 = _0xecbcx6['store'],
            _0xecbcx4 = _0xecbcx2 ? 'select' : 'deselect',
            _0xecbcx5 = 0;
        if ((_0xecbcx8 || _0xecbcx6['fireEvent']('before' + _0xecbcx4, _0xecbcx6, _0xecbcx3)) !== false && _0xecbcx1() !== false) {
            if (_0xecbcx2) {
                _0xecbcx9['onEventBarSelect'](_0xecbcx3, _0xecbcx8)
            } else {
                _0xecbcx9['onEventBarDeselect'](_0xecbcx3, _0xecbcx8)
            };
            if (!_0xecbcx8) {
                _0xecbcx6['fireEvent'](_0xecbcx4, _0xecbcx6, _0xecbcx3)
            }
        }
    },
    selectRange: Ext['emptyFn'],
    selectNode: function(_0xecbcx5, _0xecbcx3, _0xecbcx1) {
        var _0xecbcx2 = this['view']['resolveEventRecord'](_0xecbcx5);
        if (_0xecbcx2) {
            this['select'](_0xecbcx2, _0xecbcx3, _0xecbcx1)
        }
    },
    deselectNode: function(_0xecbcx5, _0xecbcx3, _0xecbcx1) {
        var _0xecbcx2 = this['view']['resolveEventRecord'](_0xecbcx5);
        if (_0xecbcx2) {
            this['deselect'](_0xecbcx2, _0xecbcx1)
        }
    },
    getFirstSelectedEventForResource: function(_0xecbcx6) {
        var _0xecbcx5 = this['getSelection'](),
            _0xecbcx4 = null,
            _0xecbcx2, _0xecbcx1, _0xecbcx3;
        for (_0xecbcx2 = 0, _0xecbcx1 = _0xecbcx5['length']; !_0xecbcx4 && _0xecbcx2 < _0xecbcx1; ++_0xecbcx2) {
            _0xecbcx3 = _0xecbcx5[_0xecbcx2];
            if (_0xecbcx3['isAssignedTo'](_0xecbcx6)) {
                _0xecbcx4 = _0xecbcx3
            }
        };
        return _0xecbcx4
    },
    getDraggableSelections: function() {
        return Ext['Array']['filter'](this['getSelection'](), function(_0xecbcx1) {
            return _0xecbcx1['isDraggable']()
        })
    },
    forEachEventRelatedSelection: function(_0xecbcx1, _0xecbcx2) {
        this['isSelected'](_0xecbcx1) && _0xecbcx2(_0xecbcx1)
    }
});
Ext.define('Ext.ux.Scheduler.selection.AssignmentModel', {
    extend: 'Ext.ux.Scheduler.selection.EventModel',
    alias: 'selection.assignmentmodel',
    assignmentStoreDetacher: null,
    getSelectionStore: function(_0xecbcx1) {
        return _0xecbcx1['getEventStore']()['assignmentStore']
    },
    onBindStore: function(_0xecbcx2) {
        this['callParent'](arguments);
        if (_0xecbcx2) {
            var _0xecbcx1 = this;
            _0xecbcx1['assignmentStoreDetacher'] && _0xecbcx1['assignmentStoreDetacher']['destroy']();
            _0xecbcx1['assignmentStoreDetacher'] = _0xecbcx2['on']({
                remove: _0xecbcx1['onAssignmentStoreRemove'],
                clear: _0xecbcx1['onAssignmentStoreClear'],
                refresh: _0xecbcx1['onAssignmentStoreRefresh'],
                scope: _0xecbcx1,
                destroyable: true
            })
        }
    },
    onEventMouseDown: function(_0xecbcx2, _0xecbcx1, _0xecbcx3) {
        this['selectedOnMouseDown'] = null;
        var _0xecbcx5 = this['resolveAssignmentRecordFromEventNode'](_0xecbcx3['getTarget']());
        if (_0xecbcx5 && (!this['ignoreRightMouseSelection'] || _0xecbcx3['button'] !== 2) && !this['isSelected'](_0xecbcx5)) {
            this['selectedOnMouseDown'] = _0xecbcx5;
            this['selectWithEvent'](_0xecbcx5, _0xecbcx3)
        }
    },
    onEventClick: function(_0xecbcx2, _0xecbcx1, _0xecbcx3) {
        var _0xecbcx5 = this['resolveAssignmentRecordFromEventNode'](_0xecbcx3['getTarget']());
        if (_0xecbcx5 && (!this['ignoreRightMouseSelection'] || _0xecbcx3['button'] !== 2) && !this['selectedOnMouseDown']) {
            this['selectWithEvent'](_0xecbcx5, _0xecbcx3)
        }
    },
    resolveAssignmentRecordFromEventNode: function(_0xecbcx5) {
        var _0xecbcx1 = this['view'],
            _0xecbcx2 = _0xecbcx1['resolveEventRecord'](_0xecbcx5),
            _0xecbcx3 = _0xecbcx1['resolveResource'](_0xecbcx5);
        if (_0xecbcx2 && _0xecbcx3) {
            var _0xecbcx4 = _0xecbcx1['getEventStore']()['getAssignmentStore']();
            return _0xecbcx4['getAssignmentForEventAndResource'](_0xecbcx2, _0xecbcx3)
        }
    },
    selectNode: function(_0xecbcx5, _0xecbcx3, _0xecbcx1) {
        var _0xecbcx2 = this['resolveAssignmentRecordFromEventNode'](_0xecbcx5);
        if (_0xecbcx2) {
            this['select'](_0xecbcx2, _0xecbcx3, _0xecbcx1)
        }
    },
    deselectNode: function(_0xecbcx5, _0xecbcx3, _0xecbcx1) {
        var _0xecbcx2 = this['resolveAssignmentRecordFromEventNode'](_0xecbcx5);
        if (_0xecbcx2) {
            this['deselect'](_0xecbcx2, _0xecbcx1)
        }
    },
    getFirstSelectedEventForResource: function(_0xecbcx6) {
        var _0xecbcx5 = this['getSelection'](),
            _0xecbcx4 = null,
            _0xecbcx2, _0xecbcx1, _0xecbcx3;
        for (_0xecbcx2 = 0, _0xecbcx1 = _0xecbcx5['length']; !_0xecbcx4 && _0xecbcx2 < _0xecbcx1; ++_0xecbcx2) {
            _0xecbcx3 = _0xecbcx5[_0xecbcx2];
            if (_0xecbcx3['getEvent']()['isAssignedTo'](_0xecbcx6)) {
                _0xecbcx4 = _0xecbcx3;
                break
            }
        };
        return _0xecbcx4
    },
    getDraggableSelections: function() {
        return Ext['Array']['filter'](this['getSelection'](), function(_0xecbcx1) {
            return _0xecbcx1['getEvent']()['isDraggable']()
        })
    },
    forEachEventRelatedSelection: function(_0xecbcx1, _0xecbcx2) {
        Ext['Array']['each'](this['getSelection'](), function(_0xecbcx5) {
            _0xecbcx5['getEvent']() === _0xecbcx1 && _0xecbcx2(_0xecbcx5)
        })
    },
    onAssignmentStoreRemove: function(_0xecbcx2, _0xecbcx1) {
        this['deselect'](_0xecbcx1, true)
    },
    onAssignmentStoreClear: function(_0xecbcx1) {
        this['clearSelections']()
    },
    onAssignmentStoreRefresh: function(_0xecbcx1) {
        this['clearSelections']()
    },
    destroy: function() {
        var _0xecbcx1 = this;
        Ext['destroyMembers'](_0xecbcx1, 'assignmentStoreDetacher');
        _0xecbcx1['callParent']()
    }
});
Ext.define('Ext.ux.Scheduler.mixin.SchedulerPanel', {
    extend: 'Ext.ux.Scheduler.mixin.AbstractSchedulerPanel',
    requires: ['Ext.ux.Scheduler.view.SchedulerGridView', 'Ext.ux.Scheduler.selection.EventModel', 'Ext.ux.Scheduler.selection.AssignmentModel', 'Ext.ux.Scheduler.column.Resource', 'Ext.ux.Scheduler.column.timeAxis.Vertical', 'Ext.ux.Scheduler.column.ResourceName'],
    eventSelModelType: null,
    eventSelModel: null,
    enableEventDragDrop: true,
    enableDragCreation: true,
    dragConfig: null,
    weekViewColumnClass: 'Ext.ux.Scheduler.column.Day',
    componentCls: 'sch-schedulerpanel',
    lockedGridDependsOnSchedule: true,
    verticalListeners: null,
    horizontalLockedWidth: null,
    verticalColumns: null,
    calendarColumns: null,
    horizontalCls: ['sch-horizontal'],
    verticalCls: ['sch-vertical-resource', 'sch-vertical'],
    weekviewCls: ['sch-calendar', 'sch-vertical'],
    _oldViewPresetArgs: null,
    inheritables: function() {
        return {
            variableRowHeight: true,
            initComponent: function() {
                var _0xecbcx6 = this,
                    _0xecbcx5 = _0xecbcx6['normalViewConfig'] = _0xecbcx6['normalViewConfig'] || {},
                    _0xecbcx1 = _0xecbcx6['getDependencyViewConfig'] && _0xecbcx6['getDependencyViewConfig']() || {};
                _0xecbcx6._initializeSchedulerPanel();
                _0xecbcx6['verticalListeners'] = {
                    clear: _0xecbcx6['refreshResourceColumns'],
                    datachanged: _0xecbcx6['refreshResourceColumns'],
                    update: _0xecbcx6['refreshResourceColumns'],
                    load: _0xecbcx6['refreshResourceColumns'],
                    scope: _0xecbcx6
                };
                _0xecbcx6['calendarListeners'] = {
                    reconfigure: _0xecbcx6['refreshCalendarColumns'],
                    priority: 1,
                    scope: _0xecbcx6
                };
                _0xecbcx6['calendarNormalGridListeners'] = {
                    columnresize: _0xecbcx6['onCalendarColumnResize'],
                    scope: _0xecbcx6
                };
                _0xecbcx6['calendarResourceStoreListeners'] = {
                    load: _0xecbcx6['onCalendarResourceStoreChange'],
                    add: _0xecbcx6['onCalendarResourceStoreChange'],
                    remove: _0xecbcx6['onCalendarResourceStoreChange'],
                    scope: _0xecbcx6
                };
                _0xecbcx6['normalViewConfig'] = _0xecbcx6['normalViewConfig'] || {};
                Ext.apply(_0xecbcx6['normalViewConfig'], {
                    eventStore: _0xecbcx6['eventStore'],
                    resourceStore: _0xecbcx6['resourceStore'],
                    dependencyStore: _0xecbcx6['dependencyStore'],
                    eventBarTextField: _0xecbcx6['eventBarTextField'] || this['getEventStore']()['getModel']()['prototype']['nameField']
                });
                if (_0xecbcx6['getDependencyStore']() && _0xecbcx1['enableDependencyDragDrop'] !== false) {
                    _0xecbcx5['terminalSides'] = _0xecbcx1['terminalSides'] || ['left', 'right', 'top', 'bottom']
                };
                Ext['Array']['each'](['barMargin', 'eventBodyTemplate', 'eventTpl', 'allowOverlap', 'dragConfig', 'eventBarIconClsField', 'onEventCreated', 'constrainDragToResource', 'snapRelativeToEventStartDate', 'eventSelModelType', 'eventSelModel', 'simpleSelect', 'multiSelect', 'allowDeselect', 'lockedGridDependsOnSchedule'], function(_0xecbcx9) {
                    if (_0xecbcx9 in _0xecbcx6) {
                        _0xecbcx6['normalViewConfig'][_0xecbcx9] = _0xecbcx6[_0xecbcx9]
                    }
                });
                _0xecbcx6['callParent'](arguments);
                if (!_0xecbcx6['isHorizontal']()) {
                    _0xecbcx6['setGroupingFeatureDisabled'](true)
                };
                if (_0xecbcx6['isVertical']()) {
                    _0xecbcx6['mon'](_0xecbcx6['resourceStore'], _0xecbcx6['verticalListeners'])
                };
                var _0xecbcx4 = _0xecbcx6['lockedGrid']['getView']();
                var _0xecbcx3 = _0xecbcx6['getSchedulingView']();
                _0xecbcx4['on']('resize', _0xecbcx6['onLockedViewResize'], _0xecbcx6);
                _0xecbcx6['registerRenderer'](_0xecbcx3['columnRenderer'], _0xecbcx3);
                if (_0xecbcx6['resourceZones']) {
                    var _0xecbcx2 = Ext['StoreManager']['lookup'](_0xecbcx6['resourceZones']);
                    _0xecbcx2['setResourceStore'](_0xecbcx6['resourceStore']);
                    _0xecbcx6['resourceZonesPlug'] = new Ext.ux.Scheduler['plugin'].ResourceZones(Ext.apply({
                        store: _0xecbcx2
                    }, _0xecbcx6['resourceZonesConfig']));
                    _0xecbcx6['resourceZonesPlug']['init'](_0xecbcx6)
                };
                _0xecbcx3['on']('columnwidthchange', _0xecbcx6['onColWidthChange'], _0xecbcx6);
                _0xecbcx6['relayEvents'](_0xecbcx3, ['eventclick', 'eventlongpress', 'eventmousedown', 'eventmouseup', 'eventdblclick', 'eventcontextmenu', 'eventmouseenter', 'eventmouseleave', 'eventkeydown', 'eventkeyup', 'beforeeventresize', 'eventresizestart', 'eventpartialresize', 'beforeeventresizefinalize', 'eventresizeend', 'beforeeventdrag', 'eventdragstart', 'eventdrag', 'beforeeventdropfinalize', 'eventdrop', 'aftereventdrop', 'beforedragcreate', 'dragcreatestart', 'beforedragcreatefinalize', 'dragcreateend', 'afterdragcreate', 'beforeeventadd']);
                if (!_0xecbcx6['syncRowHeight']) {
                    _0xecbcx6['enableRowHeightInjection'](_0xecbcx4, _0xecbcx3)
                };
                if (_0xecbcx6['getDependencyStore']()) {
                    _0xecbcx6['addCls']('sch-scheduler-with-dependencies')
                }
            },
            configureColumns: function(_0xecbcx1) {
                var _0xecbcx2 = this;
                _0xecbcx1 = _0xecbcx1 || [{
                    xtype: 'scheduler_resourcenamecolumn'
                }];
                _0xecbcx2['callParent'](arguments);
                _0xecbcx2['verticalColumns'] = _0xecbcx2['verticalColumns'] || [Ext.apply({
                    xtype: 'verticaltimeaxis'
                }, _0xecbcx2['timeAxisColumnCfg'] || {})];
                Ext['Array']['each'](_0xecbcx2['verticalColumns'], function(_0xecbcx5) {
                    Ext.apply(_0xecbcx5, {
                        timeAxis: _0xecbcx2['timeAxis'],
                        timeAxisViewModel: _0xecbcx2['timeAxisViewModel'],
                        cellTopBorderWidth: _0xecbcx2['cellTopBorderWidth'],
                        cellBottomBorderWidth: _0xecbcx2['cellBottomBorderWidth']
                    })
                });
                _0xecbcx2['calendarColumns'] = [Ext.apply({
                    xtype: 'verticaltimeaxis',
                    width: 60,
                    timeAxis: _0xecbcx2['timeAxis'],
                    timeAxisViewModel: _0xecbcx2['timeAxisViewModel'],
                    cellTopBorderWidth: _0xecbcx2['cellTopBorderWidth'],
                    cellBottomBorderWidth: _0xecbcx2['cellBottomBorderWidth']
                }, _0xecbcx2['calendarTimeAxisCfg'] || _0xecbcx2['weekViewTimeAxisCfg'] || {})];
                if (_0xecbcx2['isVertical']()) {
                    _0xecbcx2['columns'] = _0xecbcx2['verticalColumns']['concat'](_0xecbcx2['createResourceColumns'](_0xecbcx2['resourceColumnWidth'] || _0xecbcx2['timeAxisViewModel']['resourceColumnWidth']));
                    _0xecbcx2['store'] = _0xecbcx2['timeAxis'];
                    if (_0xecbcx2['resourceStore']['isGrouped']()) {
                        _0xecbcx2['timeAxis']['group'](_0xecbcx2['resourceStore']['groupField']);
                        _0xecbcx2['bindGroupingFeatureListener']()
                    }
                } else {
                    if (_0xecbcx2['isWeekView']()) {
                        _0xecbcx2['columns'] = [];
                        _0xecbcx2['store'] = null;
                        _0xecbcx2['on']('beforerender', _0xecbcx2['refreshCalendarColumns'], _0xecbcx2)
                    }
                }
            },
            applyViewSettings: function(_0xecbcx5, _0xecbcx2) {
                this['callParent'](arguments);
                var _0xecbcx3 = this['getSchedulingView'](),
                    _0xecbcx1;
                if (this['orientation'] === 'vertical') {
                    _0xecbcx1 = _0xecbcx5['timeColumnWidth'] || 60;
                    _0xecbcx3['setColumnWidth'](_0xecbcx5['resourceColumnWidth'] || 100, true);
                    _0xecbcx3['setRowHeight'](_0xecbcx1, true)
                }
            },
            onRender: function() {
                if (!this['isHorizontal']()) {
                    this['reconfigureBufferedRendering'](true)
                };
                this['callParent'](arguments)
            },
            afterRender: function() {
                var _0xecbcx1 = this;
                var _0xecbcx2 = this['getSchedulingView']();
                this['callParent'](arguments);
                if (this['isVertical']()) {
                    this['onLockedViewResize'](null, null, this['lockedGrid']['getView']()['getHeight']())
                } else {
                    if (this['isWeekView']()) {
                        this['mon'](this['timeAxis'], this['calendarListeners']);
                        this['mon'](this['resourceStore'], this['calendarResourceStoreListeners']);
                        this['normalGrid']['on'](this['calendarNormalGridListeners'])
                    }
                };
                if (this['infiniteScroll']) {
                    _0xecbcx2['on']({
                        eventdragstart: this['doSuspendLayouts'],
                        aftereventdrop: this['doResumeLayouts'],
                        eventresizestart: this['doSuspendLayouts'],
                        eventresizeend: this['doResumeLayouts'],
                        scope: this
                    })
                };
                if (this['lockedGridDependsOnSchedule']) {
                    _0xecbcx2['on']('itemupdate', this['onNormalViewItemUpdate'], this)
                };
                this['relayEvents'](this['getEventSelectionModel'](), ['selectionchange', 'deselect', 'select'], 'event');
                this['getView']()['on']('refresh', function() {
                    if (!_0xecbcx1['isHorizontal']()) {
                        _0xecbcx1['reconfigureBufferedRendering']()
                    }
                })
            },
            getTimeSpanDefiningStore: function() {
                return this['eventStore']
            },
            destroy: function() {
                var _0xecbcx1 = this;
                if (_0xecbcx1['destroyStores']) {
                    _0xecbcx1['getDependencyStore']() && _0xecbcx1['getDependencyStore']()['destroy']();
                    _0xecbcx1['getAssignmentStore']() && _0xecbcx1['getAssignmentStore']()['destroy']();
                    _0xecbcx1['getEventStore']() && _0xecbcx1['getEventStore']()['destroy']();
                    _0xecbcx1['getResourceStore']() && _0xecbcx1['getResourceStore']()['destroy']()
                };
                Ext['destroyMembers'](_0xecbcx1, 'resourceZonesPlug');
                _0xecbcx1['callParent'](arguments)
            },
            scrollToDateCentered: function(_0xecbcx4, _0xecbcx3) {
                var _0xecbcx5 = this['getSchedulingView']();
                if (_0xecbcx5['isWeekView']()) {
                    var _0xecbcx6 = _0xecbcx5['weekview']['getColumnsBy'](function(_0xecbcx9) {
                        return _0xecbcx9['start'] <= _0xecbcx4 && _0xecbcx9['end'] > _0xecbcx4
                    })[0];
                    if (_0xecbcx6) {
                        var _0xecbcx2 = _0xecbcx5['getWidth']() / 2;
                        var _0xecbcx1 = _0xecbcx5['getViewContainerHeight']() / 2;
                        _0xecbcx5['scrollHorizontallyTo'](Math['max'](_0xecbcx6['getLocalX']() - _0xecbcx2, 0));
                        _0xecbcx5['scrollVerticallyTo'](Math['max'](_0xecbcx5['getCoordinateFromDate'](_0xecbcx4, true) - _0xecbcx1, 0))
                    }
                } else {
                    return this['callParent'](arguments)
                }
            }
        }
    },
    doSuspendLayouts: function() {
        this['timeAxis']['on']({
            beginreconfigure: this['onBeginReconfigure'],
            endreconfigure: this['onEndReconfigure'],
            scope: this
        });
        this['lockedGrid']['suspendLayouts']();
        this['normalGrid']['suspendLayouts']()
    },
    doResumeLayouts: function() {
        this['timeAxis']['un']({
            beginreconfigure: this['onBeginReconfigure'],
            endreconfigure: this['onEndReconfigure'],
            scope: this
        });
        this['lockedGrid']['resumeLayouts']();
        this['normalGrid']['resumeLayouts']()
    },
    onBeginReconfigure: function() {
        this['normalGrid']['resumeLayouts']()
    },
    onEndReconfigure: function() {
        this['normalGrid']['suspendLayouts']()
    },
    onColWidthChange: function(_0xecbcx2, _0xecbcx1) {
        if (this['isVertical']()) {
            this['resourceColumnWidth'] = _0xecbcx1;
            this['refreshResourceColumns']()
        } else {
            if (this['isWeekView']()) {
                this['weekViewColumnWidth'] = _0xecbcx1;
                this['refreshCalendarColumns']()
            }
        }
    },
    enableRowHeightInjection: function(_0xecbcx2, _0xecbcx3) {
        var _0xecbcx1 = this;
        var _0xecbcx5 = new Ext.XTemplate('{%', 'this.processCellValues(values);', 'this.nextTpl.applyOut(values, out, parent);', '%}', {
            priority: 1,
            processCellValues: function(_0xecbcx4) {
                if (_0xecbcx3['isHorizontal']()) {
                    var _0xecbcx6 = 1;
                    if (_0xecbcx3['dynamicRowHeight']) {
                        var _0xecbcxa = _0xecbcx4['record'];
                        var _0xecbcx7 = _0xecbcx3['eventLayout']['horizontal'];
                        _0xecbcx6 = _0xecbcx7['getNumberOfBands'](_0xecbcxa, function() {
                            return _0xecbcx3['getEventStore']()['filterEventsForResource'](_0xecbcxa, _0xecbcx3['timeAxis']['isRangeInAxis'], _0xecbcx3['timeAxis'])
                        })
                    };
                    var _0xecbcx9 = (_0xecbcx6 * _0xecbcx1['getRowHeight']()) - ((_0xecbcx6 - 1) * _0xecbcx3['barMargin']) - _0xecbcx3['cellTopBorderWidth'] - _0xecbcx3['cellBottomBorderWidth'];
                    _0xecbcx4['style'] = (_0xecbcx4['style'] || '') + ';height:' + _0xecbcx9 + 'px;'
                }
            }
        });
        _0xecbcx2['addCellTpl'](_0xecbcx5);
        Ext['Array']['each'](this['columns'], function(_0xecbcx4) {
            _0xecbcx4['hasCustomRenderer'] = true
        });
        Ext['Array']['each'](this['horizontalColumns'], function(_0xecbcx4) {
            _0xecbcx4['hasCustomRenderer'] = true
        })
    },
    getEventSelectionModel: function() {
        return this['getSchedulingView']()['getEventSelectionModel']()
    },
    refreshResourceColumns: function() {
        var _0xecbcx1 = this['resourceColumnWidth'] || this['timeAxisViewModel']['resourceColumnWidth'];
        this['reconfigure'](this['verticalColumns']['concat'](this['createResourceColumns'](_0xecbcx1)))
    },
    onCalendarColumnResize: function(_0xecbcx5, _0xecbcx2, _0xecbcx1) {
        if (_0xecbcx1 !== this['timeAxisViewModel']['weekViewColumnWidth']) {
            this['timeAxisViewModel']['setViewColumnWidth'](_0xecbcx1, true)
        };
        this['getSchedulingView']()['weekview']['repaintEventsForColumn'](_0xecbcx2, _0xecbcx5['columnManager']['indexOf'](_0xecbcx2))
    },
    onCalendarResourceStoreChange: function() {
        this['getSchedulingView']()['refreshView']()
    },
    refreshCalendarColumns: function() {
        var _0xecbcx2 = this['createCalendarRows']();
        var _0xecbcx1 = this['createCalendarColumns']();
        this['reconfigure'](_0xecbcx2, this['calendarColumns']['concat'](_0xecbcx1))
    },
    setGroupingFeatureDisabled: function(_0xecbcx2) {
        var _0xecbcx5 = this,
            _0xecbcx1 = _0xecbcx5['normalGrid']['view'];
        if (!_0xecbcx1['groupingFeature']) {
            return
        };
        _0xecbcx1['groupingFeature'][_0xecbcx2 ? 'disable' : 'enable']();
        _0xecbcx1 = _0xecbcx5['lockedGrid']['view'];
        _0xecbcx1['groupingFeature'][_0xecbcx2 ? 'disable' : 'enable']()
    },
    refreshGroupingStore: function() {
        var _0xecbcx1 = this['normalGrid']['view']['groupingFeature'];
        if (_0xecbcx1) {
            _0xecbcx1['dataSource']['processStore'](this['timeAxis'])
        }
    },
    bindGroupingFeatureListener: function() {
        this['mon'](this['timeAxis'], 'reconfigure', this['refreshGroupingStore'], this, {
            priority: 10
        })
    },
    unbindGroupingFeatureListener: function() {
        this['mun'](this['timeAxis'], 'reconfigure', this['refreshGroupingStore'])
    },
    setMode: function(_0xecbcx11, _0xecbcx3) {
        var _0xecbcxd = this;
        if (!_0xecbcxd['normalGrid']) {
            _0xecbcxd['on']('afterrender', function() {
                _0xecbcxd['setMode'](_0xecbcx11, true)
            });
            return
        };
        var _0xecbcx7 = typeof _0xecbcx11 === 'string' ? _0xecbcx11 : _0xecbcx11['mode'];
        if (!_0xecbcx7) {
            throw new Error('Mode is undefined')
        };
        if (_0xecbcx7 === 'calendar') {
            _0xecbcx7 = 'weekview'
        };
        var _0xecbcx1;
        if (_0xecbcx11['viewPreset']) {
            _0xecbcx1 = [_0xecbcx11['viewPreset'], _0xecbcx11['startDate'] || null, _0xecbcx11['endDate'] || null]
        };
        if (_0xecbcx7 === _0xecbcxd['mode'] && !_0xecbcx3) {
            _0xecbcx1 && _0xecbcxd['setViewPreset']['apply'](_0xecbcxd, _0xecbcx1);
            return
        };
        if (_0xecbcxd['fireEvent']('beforemodechange', _0xecbcxd, _0xecbcx11) !== false) {
            _0xecbcxd['mode'] = _0xecbcx7;
            if (_0xecbcxd['isHorizontal']()) {
                _0xecbcxd['removeCls'](_0xecbcxd['verticalCls'])['removeCls'](_0xecbcxd['weekviewCls'])['addCls'](_0xecbcxd['horizontalCls'])
            } else {
                if (_0xecbcxd['isVertical']()) {
                    _0xecbcxd['removeCls'](_0xecbcxd['horizontalCls'])['removeCls'](_0xecbcxd['weekviewCls'])['addCls'](_0xecbcxd['verticalCls'])
                } else {
                    if (_0xecbcxd['isWeekView']()) {
                        _0xecbcxd['removeCls'](_0xecbcxd['horizontalCls'])['removeCls'](_0xecbcxd['verticalCls'])['addCls'](_0xecbcxd['weekviewCls'])
                    }
                }
            };
            var _0xecbcx8 = _0xecbcxd['normalGrid'],
                _0xecbcxf = _0xecbcxd['lockedGrid']['getView'](),
                _0xecbcxa = _0xecbcxd['getSchedulingView'](),
                _0xecbcx9 = _0xecbcx8['headerCt'];
            _0xecbcxd['suspendRefresh']();
            Ext['suspendLayouts']();
            _0xecbcxd['setGroupingFeatureDisabled'](!_0xecbcxd['isHorizontal']());
            _0xecbcxd['unbindGroupingFeatureListener']();
            var _0xecbcxe = _0xecbcxd['isWeekView']();
            var _0xecbcx4 = _0xecbcxa['isWeekView']();
            if ((_0xecbcx4 && !_0xecbcxe) || (!_0xecbcx4 && _0xecbcxe)) {
                _0xecbcx1 = _0xecbcx1 || _0xecbcxd['_oldViewPresetArgs'] || [_0xecbcxe ? 'week' : 'weekAndDay'];
                _0xecbcxd['_oldViewPresetArgs'] = [_0xecbcxd['viewPreset'], _0xecbcxd['timeAxis']['getStart'](), _0xecbcxd['timeAxis']['getEnd']()]
            };
            _0xecbcxa['setMode'](_0xecbcx7);
            _0xecbcx9['removeAll'](true);
            _0xecbcxd['reconfigureBufferedRendering']();
            if (!_0xecbcxd['isWeekView']()) {
                _0xecbcxd['timeAxis']['setMode']('plain');
                _0xecbcxd['mun'](_0xecbcxd['timeAxis'], _0xecbcxd['calendarListeners'])
            } else {
                _0xecbcxd['timeAxis']['setMode']('week');
                _0xecbcxd['mon'](_0xecbcxd['timeAxis'], _0xecbcxd['calendarListeners'])
            };
            _0xecbcx1 && _0xecbcxd['setViewPreset']['apply'](_0xecbcxd, _0xecbcx1);
            if (_0xecbcxd['isHorizontal']()) {
                _0xecbcxd['mun'](_0xecbcxd['resourceStore'], _0xecbcxd['verticalListeners']);
                _0xecbcxd['mun'](_0xecbcxd['resourceStore'], _0xecbcxd['calendarResourceStoreListeners']);
                _0xecbcxd['normalGrid']['un'](_0xecbcxd['calendarNormalGridListeners']);
                _0xecbcxa['setRowHeight'](_0xecbcxd['rowHeight'] || _0xecbcxd['timeAxisViewModel']['rowHeightHorizontal'], true);
                _0xecbcxd['reconfigure'](_0xecbcxd['resourceStore'], _0xecbcxd['horizontalColumns']);
                if (_0xecbcxd['horizontalLockedWidth'] !== null) {
                    _0xecbcxd['lockedGrid']['setWidth'](_0xecbcxd['horizontalLockedWidth'])
                }
            } else {
                if (_0xecbcxd['isWeekView']()) {
                    _0xecbcxd['mun'](_0xecbcxd['resourceStore'], _0xecbcxd['verticalListeners']);
                    _0xecbcxd['mon'](_0xecbcxd['resourceStore'], _0xecbcxd['calendarResourceStoreListeners']);
                    _0xecbcxd['normalGrid']['on'](_0xecbcxd['calendarNormalGridListeners']);
                    _0xecbcxd['bindGroupingFeatureListener']();
                    _0xecbcxd['refreshCalendarColumns']();
                    _0xecbcxa['setRowHeight'](_0xecbcxd['rowHeight'] || _0xecbcxd['timeAxisViewModel']['rowHeightVertical'], true);
                    _0xecbcxa['setColumnWidth'](_0xecbcxd['timeAxisViewModel']['weekViewColumnWidth'] || 100, true)
                } else {
                    _0xecbcxd['normalGrid']['un'](_0xecbcxd['calendarNormalGridListeners']);
                    _0xecbcxd['mun'](_0xecbcxd['resourceStore'], _0xecbcxd['calendarResourceStoreListeners']);
                    var _0xecbcx6 = 0;
                    _0xecbcxd['horizontalLockedWidth'] = _0xecbcxd['lockedGrid']['getWidth']();
                    _0xecbcxd['mon'](_0xecbcxd['resourceStore'], _0xecbcxd['verticalListeners']);
                    _0xecbcxd['bindGroupingFeatureListener']();
                    _0xecbcxd['reconfigure'](_0xecbcxd['timeAxis'], _0xecbcxd['verticalColumns']['concat'](_0xecbcxd['createResourceColumns'](_0xecbcxd['resourceColumnWidth'] || _0xecbcxd['timeAxisViewModel']['resourceColumnWidth'])));
                    Ext['Array']['each'](_0xecbcxd['lockedGrid']['query']('gridcolumn'), function(_0xecbcxc) {
                        _0xecbcx6 += _0xecbcxc['rendered'] ? _0xecbcxc['getWidth']() : _0xecbcxc['width'] || 100
                    });
                    _0xecbcxa['setColumnWidth'](_0xecbcxd['timeAxisViewModel']['resourceColumnWidth'] || 100, true);
                    _0xecbcxd['lockedGrid']['setWidth'](_0xecbcx6)
                }
            };
            var _0xecbcx5 = _0xecbcxd['resourceStore']['groupField'];
            if (_0xecbcx5) {
                _0xecbcxd['store']['group'](_0xecbcx5)
            };
            _0xecbcxd['resumeRefresh'](false);
            var _0xecbcx2 = _0xecbcxd['getSplitter']();
            if (_0xecbcx2) {
                _0xecbcx2['setVisible'](_0xecbcx7 === 'horizontal')
            };
            _0xecbcxd['refreshViews'](false);
            Ext['resumeLayouts'](true);
            _0xecbcxd['fireEvent']('modechange', _0xecbcxd, _0xecbcx11)
        }
    },
    reconfigureBufferedRendering: function(_0xecbcx5) {
        if (this['bufferedRenderer']) {
            var _0xecbcx2 = this['lockedGrid']['bufferedRenderer'],
                _0xecbcx3 = this['normalGrid']['bufferedRenderer'],
                _0xecbcx4;
            if (!this['isHorizontal']()) {
                _0xecbcx4 = this['timeAxis']['getCount']();
                this['__oldLeadingBufferZone'] = _0xecbcx2['leadingBufferZone']
            } else {
                if (this['__oldLeadingBufferZone']) {
                    _0xecbcx4 = this['__oldLeadingBufferZone'];
                    this['__oldLeadingBufferZone'] = null
                }
            };
            if (!_0xecbcx5 && _0xecbcx2['scroller'] && _0xecbcx2['scroller']['getLockedScroller']()) {
                var _0xecbcx1 = this['lockedGrid']['view']['getHeight'](),
                    _0xecbcx6 = Math['ceil'](_0xecbcx1 / _0xecbcx2['rowHeight']) + _0xecbcx2['trailingBufferZone'] + _0xecbcx4;
                _0xecbcx2['setViewSize'](_0xecbcx6, true);
                _0xecbcx3['setViewSize'](_0xecbcx6, true)
            };
            _0xecbcx2['leadingBufferZone'] = _0xecbcx3['leadingBufferZone'] = _0xecbcx4
        }
    },
    createCalendarRows: function() {
        var _0xecbcx1 = this,
            _0xecbcx2 = _0xecbcx1['timeAxis']['getRowTicks']();
        _0xecbcx1['timeAxisViewModel']['calendarRowsAmount'] = _0xecbcx2['length'];
        return new Ext['data'].Store({
            model: 'Ext.ux.Scheduler.model.TimeAxisTick',
            data: _0xecbcx2
        })
    },
    createCalendarColumns: function() {
        var _0xecbcx3 = this,
            _0xecbcx4 = _0xecbcx3['timeAxis'],
            _0xecbcx6 = _0xecbcx4['headerConfig']['middle'],
            _0xecbcx2 = [],
            _0xecbcx9;
        var _0xecbcx5 = _0xecbcx3['startTime'] = _0xecbcx4['startTime'];
        var _0xecbcx1 = _0xecbcx3['endTime'] = _0xecbcx4['endTime'];
        _0xecbcx4['each'](function(_0xecbcxa) {
            var _0xecbcxd = _0xecbcxa['getStartDate']();
            if (_0xecbcx9 !== _0xecbcxd['getDay']()) {
                _0xecbcx9 = _0xecbcxd['getDay']();
                _0xecbcxd['setHours'](_0xecbcx5);
                var _0xecbcx7 = new Date(_0xecbcxd);
                _0xecbcx7['setHours'](_0xecbcx1);
                var _0xecbcx8 = {
                    xclass: _0xecbcx3['calendarColumnClass'] || _0xecbcx3['weekViewColumnClass'],
                    renderer: _0xecbcx3['mainRenderer'],
                    scope: _0xecbcx3,
                    start: _0xecbcxd,
                    end: _0xecbcx7
                };
                if (_0xecbcx6['renderer']) {
                    _0xecbcx8['text'] = _0xecbcx6['renderer']['call'](_0xecbcx6['scope'] || _0xecbcx3, _0xecbcxd, _0xecbcx7, _0xecbcx8, _0xecbcx2['length'], _0xecbcx3['getEventStore']())
                } else {
                    _0xecbcx8['text'] = Ext['Date']['format'](_0xecbcxd, _0xecbcx6['dateFormat'])
                };
                _0xecbcx2['push'](_0xecbcx8)
            }
        });
        _0xecbcx3['timeAxisViewModel']['updateCalendarColumnDates'](_0xecbcx2);
        return _0xecbcx2
    },
    setRowHeight: function(_0xecbcx1, _0xecbcx2) {
        _0xecbcx2 = _0xecbcx2 || !this['lockedGrid'];
        this['timeAxisViewModel']['setViewRowHeight'](_0xecbcx1, _0xecbcx2)
    },
    onNormalViewItemUpdate: function(_0xecbcx1) {
        if (this['lockedGridDependsOnSchedule']) {
            var _0xecbcx2 = this['lockedGrid']['getView']();
            _0xecbcx2['suspendEvents']();
            _0xecbcx2['refreshNode'](_0xecbcx2['indexOf'](_0xecbcx1));
            if (this['syncRowHeight']) {
                this['syncRowHeights']()
            };
            _0xecbcx2['resumeEvents']()
        }
    },
    onLockedViewResize: function(_0xecbcx3, _0xecbcx5, _0xecbcx1, _0xecbcx2, _0xecbcx4) {
        if (!this['isHorizontal']() && _0xecbcx1 !== _0xecbcx4) {
            this['timeAxisViewModel']['update'](_0xecbcx1 - 21)
        }
    }
});
Ext.define('Ext.ux.Scheduler.plugin.CurrentTimeLine', {
    extend: 'Ext.ux.Scheduler.plugin.Lines',
    alias: 'plugin.scheduler_currenttimeline',
    mixins: ['Ext.ux.Scheduler.mixin.Localizable'],
    requires: ['Ext.data.JsonStore'],
    updateInterval: 60000,
    showHeaderElements: true,
    autoUpdate: true,
    expandToFitView: true,
    timer: null,
    init: function(_0xecbcx5) {
        if (Ext['getVersion']('touch')) {
            this['showHeaderElements'] = false
        };
        var _0xecbcx2 = new Ext['data'].JsonStore({
            autoDestroy: true,
            fields: ['Date', 'Cls', 'Text'],
            data: [{
                Date: new Date(),
                Cls: 'sch-todayLine',
                Text: this.L('tooltipText')
            }]
        });
        var _0xecbcx1 = _0xecbcx2['first']();
        if (this['autoUpdate']) {
            this['timer'] = setInterval(function() {
                _0xecbcx1['set']('Date', new Date())
            }, this['updateInterval'])
        };
        this['store'] = _0xecbcx2;
        this['callParent'](arguments)
    },
    destroy: function() {
        clearInterval(this['timer']);
        this['timer'] = null;
        if (this['store']['autoDestroy']) {
            this['store']['destroy']()
        };
        this['callParent'](arguments)
    }
});
Ext.define('Ext.ux.Scheduler.patches.LockingScroller', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.scroll.Scroller',
    minVersion: '6.2.0',
    overrides: {
        scrollTo: function() {
            if (this['getNormalScroller'] && !this['getNormalScroller']()) {
                if (Ext.ux.Scheduler['panel']['TimelineGridPanel'] && this['component'] instanceof Ext.ux.Scheduler['panel']['TimelineGridPanel'] || Ext.ux.Scheduler['panel']['TimelineTreePanel'] && this['component'] instanceof Ext.ux.Scheduler['panel']['TimelineTreePanel']) {
                    return
                }
            };
            return this['callParent'](arguments)
        }
    }
});
Ext.define('Ext.ux.Scheduler.plugin.NonWorkingTime', {
    extend: 'Ext.ux.Scheduler.plugin.Zones',
    alias: 'plugin.scheduler_nonworkingtime',
    alternateClassName: 'Gnt.feature.WorkingTime',
    requires: ['Ext.data.Store', 'Ext.ux.Scheduler.model.Range'],
    expandToFitView: true,
    calendar: {
        type: 'calendar'
    },
    timeAxis: null,
    init: function(_0xecbcx1) {
        this['calendar'] = this['calendar'] && Ext['StoreMgr']['lookup'](this['calendar']);
        if (!this['calendar']) {
            Ext['Error']['raise']('Required attribute \'calendar \' missed during initialization of \'Ext.ux.Scheduler.plugin.NonWorkingTime\' ')
        };
        this['store'] = new Ext['data'].Store({
            model: 'Ext.ux.Scheduler.model.Range',
            autoDestroy: true
        });
        this['timeAxis'] = _0xecbcx1['getTimeAxis']();
        this['callParent'](arguments);
        if (_0xecbcx1['isWeekView']()) {
            _0xecbcx1['normalGrid']['headerCt']['on']('afterlayout', this['onViewChange'], this)
        } else {
            _0xecbcx1['on']('viewchange', this['onViewChange'], this)
        };
        this['bindCalendar'](this['calendar'])
    },
    bindCalendar: function(_0xecbcx2) {
        var _0xecbcx1 = {
            datachanged: this['refresh'],
            update: this['refresh'],
            scope: this,
            delay: 1
        };
        if (this['calendar']) {
            this['calendar']['un'](_0xecbcx1)
        };
        if (_0xecbcx2) {
            _0xecbcx2['on'](_0xecbcx1)
        };
        this['calendar'] = _0xecbcx2;
        this['refresh']()
    },
    onViewReady: function() {
        this['callParent'](arguments);
        if (this['schedulerView']['isWeekView']()) {
            this['onTimelinePanelBeforeModeChange']();
            this['headerListeners'] = {}
        }
    },
    onViewChange: function() {
        var _0xecbcx2 = Ext.ux.Scheduler['util']['Date'];
        var _0xecbcx1 = _0xecbcx2['isUnitGreater'](this['timeAxis']['unit'], _0xecbcx2.WEEK);
        this['setDisabled'](_0xecbcx1);
        if (!_0xecbcx1) {
            this['refresh']()
        }
    },
    setDisabled: function(_0xecbcx2) {
        var _0xecbcx1 = this['disabled'];
        this['callParent'](arguments);
        if (_0xecbcx1 && !_0xecbcx2) {
            this['refresh']()
        }
    },
    refresh: function() {
        if (this['store'] && !this['store']['destroyed']) {
            this['store']['removeAll'](true);
            if (this['calendar']) {
                this['store']['add'](this['calendar']['getHolidaysRanges'](this['timeAxis']['getStart'](), this['timeAxis']['getEnd'](), true))
            }
        }
    },
    destroy: function() {
        this['bindCalendar'](null);
        this['callParent'](arguments)
    }
});
Ext.define('Ext.ux.Scheduler.mixin.TimelinePanel', {
    extend: 'Ext.ux.Scheduler.mixin.AbstractTimelinePanel',
    requires: ['Ext.ux.Scheduler.column.timeAxis.Horizontal', 'Ext.ux.Scheduler.preset.Manager', 'Ext.ux.Scheduler.data.Calendar', 'Ext.ux.Scheduler.plugin.CurrentTimeLine', 'Ext.ux.Scheduler.layout.TableLayout', 'Ext.ux.Scheduler.patches.LockingScroller', 'Ext.ux.Scheduler.plugin.NonWorkingTime'],
    uses: ['Ext.layout.container.Border', 'Ext.ux.Scheduler.patches.TableView', 'Ext.ux.Scheduler.patches.TableView_6_0_2', 'Ext.ux.Scheduler.patches.TableView_6_2_0', 'Ext.ux.Scheduler.patches.CellContext_6_2_0', 'Ext.ux.Scheduler.patches.TableView2', 'Ext.ux.Scheduler.patches.TablePanel', 'Ext.ux.Scheduler.patches.TablePanel_6_2_1', 'Ext.ux.Scheduler.patches.BufferedRenderer', 'Ext.ux.Scheduler.patches.BufferedRenderer_6_2_1', 'Ext.ux.Scheduler.patches.CellContext', 'Ext.ux.Scheduler.patches.RowSynchronizer', 'Ext.ux.Scheduler.patches.Explorer', 'Ext.ux.Scheduler.patches.DomScroller', 'Ext.ux.Scheduler.patches.TimelineGridView', 'Ext.ux.Scheduler.patches.TimelineGridViewScroll6_2', 'Ext.ux.Scheduler.patches.TimelinePanel', 'Ext.ux.Scheduler.patches.EXTJS_23846', 'Ext.ux.Scheduler.plugin.NonWorkingTime', 'Ext.ux.Scheduler.patches.LockableGridEmptyText'],
    mixins: ['Ext.ux.Scheduler.mixin.Zoomable', 'Ext.ux.Scheduler.mixin.PartnerTimelinePanel'],
    destroyStores: false,
    bufferCoef: 5,
    bufferThreshold: 0.2,
    infiniteScroll: false,
    showCrudManagerMask: true,
    highlightWeekends: false,
    zoomOnTimeAxisDoubleClick: true,
    showTodayLine: false,
    calendar: null,
    horizontalTimeAxisColumnCfg: null,
    waitingForAutoTimeSpan: false,
    columnLinesFeature: null,
    renderWaitListener: null,
    schedulePinchThreshold: 30,
    pinchStartDistanceX: null,
    pinchStartDistanceY: null,
    pinchDistanceX: null,
    pinchDistanceY: null,
    horizontalColumns: null,
    forceDefineTimeSpanByStore: false,
    workingTimePlugin: null,
    split: true,
    refreshSuspensionCount: 0,
    tipCfg: {
        cls: 'sch-tip',
        showDelay: 400,
        hideDelay: 0,
        constrain: true,
        autoHide: true,
        anchor: 't'
    },
    inheritables: function() {
        return {
            columnLines: true,
            enableLocking: true,
            lockable: true,
            stateEvents: ['viewchange'],
            syncRowHeight: false,
            cellTopBorderWidth: 0,
            layout: 'border',
            initComponent: function() {
                if (this['partnerTimelinePanel']) {
                    if (typeof this['partnerTimelinePanel'] === 'string') {
                        this['partnerTimelinePanel'] = Ext['getCmp'](this['partnerTimelinePanel'])
                    };
                    this['timeAxisViewModel'] = this['partnerTimelinePanel']['timeAxisViewModel'];
                    this['timeAxis'] = this['partnerTimelinePanel']['getTimeAxis']();
                    this['startDate'] = this['timeAxis']['getStart']();
                    this['endDate'] = this['timeAxis']['getEnd']()
                };
                this._initializeTimelinePanel();
                this['configureChildGrids']();
                this['forceFit'] = false;
                this['configureColumns'](this['columns']);
                if (Ext['getVersion']()['equals']('6.0.2.437')) {
                    this['viewConfig'] = Ext.apply(this['viewConfig'] || {}, {
                        componentLayout: 'timeline_tablelayout'
                    })
                };
                var _0xecbcx3 = this['normalViewConfig'] = this['normalViewConfig'] || {};
                var _0xecbcx9 = this['getId']();
                Ext.apply(this['normalViewConfig'], {
                    id: _0xecbcx9 + '-timelineview',
                    eventPrefix: this['autoGenId'] ? null : _0xecbcx9,
                    timeAxisViewModel: this['timeAxisViewModel'],
                    eventBorderWidth: this['eventBorderWidth'],
                    timeAxis: this['timeAxis'],
                    readOnly: this['readOnly'],
                    mode: this['mode'],
                    rtl: this['rtl'],
                    cellBorderWidth: this['cellBorderWidth'],
                    cellTopBorderWidth: this['cellTopBorderWidth'],
                    cellBottomBorderWidth: this['cellBottomBorderWidth'],
                    infiniteScroll: this['infiniteScroll'],
                    bufferCoef: this['bufferCoef'],
                    bufferThreshold: this['bufferThreshold']
                });
                Ext['Array']['each'](['eventRendererScope', 'eventRenderer', 'dndValidatorFn', 'resizeValidatorFn', 'createValidatorFn', 'tooltipTpl', 'validatorFnScope', 'eventResizeHandles', 'enableEventDragDrop', 'enableDragCreation', 'resizeConfig', 'createConfig', 'tipCfg', 'getDateConstraints'], function(_0xecbcx7) {
                    if (_0xecbcx7 in this) {
                        _0xecbcx3[_0xecbcx7] = this[_0xecbcx7]
                    }
                }, this);
                this['callParent'](arguments);
                this['lockedGrid']['view']['addCls']('sch-lockedview');
                if (this['rtl']) {
                    this['lockedGrid']['view']['addCls']('sch-locked-column-fixer');
                    this['addCls']('sch-rtl')
                } else {
                    this['addCls']('sch-ltr')
                };
                var _0xecbcx1 = this['plugins'] = []['concat'](this['plugins'] || []);
                if (this['highlightWeekends']) {
                    var _0xecbcx6 = this['getCalendar']();
                    _0xecbcx6 = _0xecbcx6 && Ext['StoreMgr']['lookup'](_0xecbcx6) || new Ext.ux.Scheduler['data'].Calendar();
                    this['workingTimePlugin'] = Ext['create']('Ext.ux.Scheduler.plugin.NonWorkingTime', {
                        calendar: _0xecbcx6
                    });
                    this['timeAxisViewModel']['setCalendar'](_0xecbcx6);
                    _0xecbcx1['push'](this['workingTimePlugin']);
                    this['addCls']('sch-timelinepanel-highlightweekends')
                };
                if (this['showTodayLine']) {
                    this['todayLinePlugin'] = new Ext.ux.Scheduler['plugin'].CurrentTimeLine();
                    _0xecbcx1['push'](this['todayLinePlugin'])
                };
                this['patchNavigationModel'](this);
                if (Ext['supports']['Touch']) {
                    this['timeAxisViewModel']['on']('update', this['refreshHeaderContainerScrollable'], this)
                };
                this['setViewPreset'](this['viewPreset'], this['startDate'] || this['timeAxis']['getStart'](), this['endDate'] || this['timeAxis']['getEnd'](), true);
                if (!this['startDate']) {
                    var _0xecbcx4 = this['crudManager'];
                    if (_0xecbcx4 && !_0xecbcx4['loaded']) {
                        this['bindAutoTimeSpanListeners']()
                    } else {
                        var _0xecbcx2 = this['getTimeSpanDefiningStore']();
                        if (_0xecbcx2['isTreeStore'] ? _0xecbcx2['getRoot']()['childNodes']['length'] : _0xecbcx2['getCount']()) {
                            this['applyStartEndDatesFromStore']()
                        } else {
                            if (_0xecbcx2['isLoading']() || this['forceDefineTimeSpanByStore']) {
                                this['bindAutoTimeSpanListeners']()
                            }
                        }
                    }
                };
                var _0xecbcx5 = this['columnLines'];
                if (_0xecbcx5) {
                    this['columnLinesFeature'] = new Ext.ux.Scheduler['feature'].ColumnLines(Ext['isObject'](_0xecbcx5) ? _0xecbcx5 : undefined);
                    this['columnLinesFeature']['init'](this);
                    this['columnLines'] = true
                };
                this['relayEvents'](this['getSchedulingView'](), ['beforetooltipshow', 'scheduleclick', 'scheduledblclick', 'schedulecontextmenu', 'schedulepinch', 'schedulepinchstart', 'schedulepinchend']);
                this['on']('zoomchange', function() {
                    this['normalGrid']['scrollTask']['cancel']()
                });
                if (this['crudManager']) {
                    if (!this['crudManager']['autoSync'] && this['showCrudManagerMask']) {
                        this['mon'](this['crudManager'], {
                            beforesend: this['beforeCrudOperationStart'],
                            synccanceled: this['onCrudOperationComplete'],
                            loadcanceled: this['onCrudOperationComplete'],
                            load: this['onCrudOperationComplete'],
                            sync: this['onCrudOperationComplete'],
                            requestfail: this['onCrudOperationComplete'],
                            scope: this
                        });
                        if (this['crudManager']['isLoading']()) {
                            this['beforeCrudOperationStart'](this['crudManager'], null, 'load')
                        }
                    };
                    this['mon'](this['crudManager'], {
                        beforeloadapply: this['onCrudBeforeLoad'],
                        load: this['onCrudLoad'],
                        scope: this
                    })
                };
                this['afterInitComponent']()
            },
            refreshHeaderContainerScrollable: function() {
                var _0xecbcx2 = this['getSchedulingView']()['headerCt']['getScrollable']();
                if (!_0xecbcx2) {
                    return
                };
                if (Ext['getVersion']()['isLessThan']('6.0.1')) {
                    var _0xecbcx1 = _0xecbcx2['isConfiguring'];
                    _0xecbcx2['isConfiguring'] = true;
                    _0xecbcx2['refresh']();
                    _0xecbcx2['refreshAxes']();
                    _0xecbcx2['isConfiguring'] = _0xecbcx1
                } else {
                    _0xecbcx2['refresh']()
                }
            },
            getState: function() {
                var _0xecbcx1 = this,
                    _0xecbcx2 = _0xecbcx1['callParent'](arguments);
                Ext.apply(_0xecbcx2, {
                    viewPreset: _0xecbcx1['viewPreset'],
                    startDate: _0xecbcx1['getStart'](),
                    endDate: _0xecbcx1['getEnd'](),
                    zoomMinLevel: _0xecbcx1['zoomMinLevel'],
                    zoomMaxLevel: _0xecbcx1['zoomMaxLevel'],
                    currentZoomLevel: _0xecbcx1['currentZoomLevel']
                });
                return _0xecbcx2
            },
            applyState: function(_0xecbcx2) {
                var _0xecbcx1 = this;
                _0xecbcx1['callParent'](arguments);
                if (_0xecbcx2 && _0xecbcx2['viewPreset']) {
                    _0xecbcx1['setViewPreset'](_0xecbcx2['viewPreset'], _0xecbcx2['startDate'], _0xecbcx2['endDate'])
                };
                if (_0xecbcx2 && _0xecbcx2['currentZoomLevel']) {
                    _0xecbcx1['zoomToLevel'](_0xecbcx2['currentZoomLevel'])
                }
            },
            setTimeSpan: function() {
                this['callParent'](arguments);
                if (this['waitingForAutoTimeSpan']) {
                    this['unbindAutoTimeSpanListeners'](false);
                    this['getView']()['refresh']()
                };
                if (!this['normalGrid']['getView']()['viewReady']) {
                    this['getView']()['refresh']()
                }
            },
            onBoxReady: function() {
                var _0xecbcx1 = this;
                _0xecbcx1['callParent'](arguments);
                if (_0xecbcx1['partnerTimelinePanel']) {
                    if (_0xecbcx1['partnerTimelinePanel']['rendered']) {
                        _0xecbcx1['setupPartnerTimelinePanel'](_0xecbcx1['partnerTimelinePanel'])
                    } else {
                        _0xecbcx1['partnerTimelinePanel']['on']('boxready', _0xecbcx1['setupPartnerTimelinePanel'], _0xecbcx1)
                    }
                };
                _0xecbcx1['normalGrid']['on']({
                    collapse: _0xecbcx1['onNormalGridCollapse'],
                    expand: _0xecbcx1['onNormalGridExpand'],
                    scope: _0xecbcx1
                });
                _0xecbcx1['lockedGrid']['on']({
                    collapse: _0xecbcx1['onLockedGridCollapse'],
                    expand: _0xecbcx1['onLockedGridExpand'],
                    scope: _0xecbcx1
                });
                _0xecbcx1['lockedGrid']['on']({
                    itemdblclick: _0xecbcx1['onLockedGridItemDblClick'],
                    scope: _0xecbcx1
                });
                if (Ext['supports']['Touch']) {
                    this['getSchedulingView']()['on']({
                        schedulepinchstart: this['onSchedulePinchStart'],
                        schedulepinch: this['onSchedulePinch'],
                        schedulepinchend: this['onSchedulePinchEnd'],
                        scope: this
                    })
                }
            }
        }
    },
    scrollToDate: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = this['getSchedulingView']();
        if (_0xecbcx1['isWeekView']()) {
            var _0xecbcx3 = _0xecbcx1['weekview']['getColumnsBy'](function(_0xecbcx4) {
                return _0xecbcx4['start'] <= _0xecbcx5 && _0xecbcx4['end'] > _0xecbcx5
            })[0];
            if (_0xecbcx3) {
                _0xecbcx1['scrollHorizontallyTo'](_0xecbcx3['getLocalX']());
                _0xecbcx1['scrollVerticallyTo'](_0xecbcx1['getCoordinateFromDate'](_0xecbcx5, true))
            }
        } else {
            return this['callParent'](arguments)
        }
    },
    bindAutoTimeSpanListeners: function() {
        var _0xecbcx1 = this['getTimeSpanDefiningStore']();
        this['waitingForAutoTimeSpan'] = true;
        this['suspendRefresh']();
        this['mon'](_0xecbcx1, 'load', this['applyStartEndDatesFromStore'], this);
        if (_0xecbcx1['isTreeStore']) {
            this['mon'](_0xecbcx1, 'rootchange', this['applyStartEndDatesFromStore'], this);
            this['mon'](_0xecbcx1, 'nodeappend', this['applyStartEndDatesAfterTreeAppend'], this)
        } else {
            this['mon'](_0xecbcx1, 'add', this['applyStartEndDatesFromStore'], this)
        }
    },
    getTimeSpanDefiningStore: function() {
        throw 'Abstract method called'
    },
    unbindAutoTimeSpanListeners: function(_0xecbcx2) {
        this['waitingForAutoTimeSpan'] = false;
        var _0xecbcx1 = this['getTimeSpanDefiningStore']();
        this['resumeRefresh'](_0xecbcx2);
        _0xecbcx1['un']('load', this['applyStartEndDatesFromStore'], this);
        if (_0xecbcx1['isTreeStore']) {
            _0xecbcx1['un']('rootchange', this['applyStartEndDatesFromStore'], this);
            _0xecbcx1['un']('nodeappend', this['applyStartEndDatesAfterTreeAppend'], this)
        } else {
            _0xecbcx1['un']('add', this['applyStartEndDatesFromStore'], this)
        }
    },
    applyStartEndDatesAfterTreeAppend: function() {
        var _0xecbcx1 = this['getTimeSpanDefiningStore']();
        if (!_0xecbcx1['isSettingRoot'] && !_0xecbcx1['__loading']) {
            this['applyStartEndDatesFromStore']()
        }
    },
    applyStartEndDatesFromStore: function() {
        var _0xecbcx1 = this['getTimeSpanDefiningStore']();
        var _0xecbcx2 = _0xecbcx1['getTotalTimeSpan']();
        if (_0xecbcx2['end'] && _0xecbcx2['start'] && _0xecbcx2['end'] - _0xecbcx2['start'] === 0) {
            _0xecbcx2['start'] = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx2['start'], this['timeAxis']['mainUnit'], -1);
            _0xecbcx2['end'] = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx2['end'], this['timeAxis']['mainUnit'], 1)
        };
        this['setTimeSpan'](_0xecbcx2['start'] || new Date(), _0xecbcx2['end'])
    },
    onLockedGridItemDblClick: function(_0xecbcx2, _0xecbcx1, _0xecbcx5, _0xecbcx4, _0xecbcx3) {
        if (this['isVertical']() && _0xecbcx1) {
            this['fireEvent']('timeheaderdblclick', this, _0xecbcx1['get']('start'), _0xecbcx1['get']('end'), _0xecbcx4, _0xecbcx3)
        }
    },
    getSchedulingView: function() {
        return this['normalGrid'] && this['normalGrid']['view']
    },
    getHorizontalTimeAxisColumn: function() {
        return this['getSchedulingView']()['getHorizontalTimeAxisColumn']()
    },
    configureColumns: function(_0xecbcx1) {
        var _0xecbcx5 = [];
        var _0xecbcx2 = [];
        _0xecbcx1 = _0xecbcx1 || [];
        if (_0xecbcx1['items']) {
            this['columns'] = Ext.apply({}, this['columns']);
            _0xecbcx1 = this['columns']['items'] = _0xecbcx1['items']['slice']()
        } else {
            _0xecbcx1 = this['columns'] = _0xecbcx1['slice']()
        };
        Ext['Array']['each'](_0xecbcx1, function(_0xecbcx3) {
            if (_0xecbcx3['position'] === 'right' || _0xecbcx3['locked'] === false) {
                if (!Ext['isNumber'](_0xecbcx3['width'])) {
                    Ext['Error']['raise']('"Right" columns must have a fixed width')
                };
                _0xecbcx3['locked'] = false;
                _0xecbcx2['push'](_0xecbcx3)
            } else {
                _0xecbcx3['locked'] = true;
                _0xecbcx5['push'](_0xecbcx3)
            };
            _0xecbcx3['lockable'] = false
        });
        if (_0xecbcx1['length'] === 0) {
            this['split'] = false
        };
        Ext['Array']['erase'](_0xecbcx1, 0, _0xecbcx1['length']);
        Ext['Array']['insert'](_0xecbcx1, 0, _0xecbcx5['concat'](Ext.apply({
            xtype: 'timeaxiscolumn',
            timeAxisViewModel: this['timeAxisViewModel'],
            trackHeaderOver: this['trackHeaderOver'],
            renderer: this['mainRenderer'],
            variableRowHeight: this['variableRowHeight'],
            scope: this
        }, this['horizontalTimeAxisColumnCfg'] || {}))['concat'](_0xecbcx2));
        this['horizontalColumns'] = _0xecbcx1['slice']()
    },
    mainRenderer: function(_0xecbcx2, _0xecbcx11, _0xecbcx9, _0xecbcx8, _0xecbcxd) {
        var _0xecbcx5 = this['renderers'],
            _0xecbcx3 = this['isVertical']() ? this['getResourceStore']()['getAt'](_0xecbcxd) : _0xecbcx9,
            _0xecbcx1 = '&nbsp;';
        _0xecbcx11['rowHeight'] = null;
        for (var _0xecbcx4 = 0; _0xecbcx4 < _0xecbcx5['length']; _0xecbcx4++) {
            _0xecbcx1 += _0xecbcx5[_0xecbcx4]['fn']['call'](_0xecbcx5[_0xecbcx4]['scope'] || this, _0xecbcx2, _0xecbcx11, _0xecbcx3, _0xecbcx8, _0xecbcxd) || ''
        };
        if (this['variableRowHeight']) {
            var _0xecbcx7 = this['getSchedulingView']();
            var _0xecbcx6 = this['getRowHeight']();
            _0xecbcx11['style'] = 'height:' + ((_0xecbcx11['rowHeight'] || _0xecbcx6) - _0xecbcx7['cellTopBorderWidth'] - _0xecbcx7['cellBottomBorderWidth']) + 'px'
        };
        return _0xecbcx1
    },
    onNormalGridCollapse: function() {
        var _0xecbcx1 = this;
        if (!_0xecbcx1['normalGrid']['reExpander']) {
            _0xecbcx1['normalGrid']['reExpander'] = _0xecbcx1['normalGrid']['placeholder']
        };
        if (!_0xecbcx1['lockedGrid']['rendered']) {
            _0xecbcx1['lockedGrid']['on']('render', _0xecbcx1['onNormalGridCollapse'], _0xecbcx1, {
                delay: 1
            })
        } else {
            _0xecbcx1['lockedGrid']['savedWidth'] = _0xecbcx1['lockedGrid']['getWidth']();
            if (_0xecbcx1['lockedGrid']['collapsed']) {
                _0xecbcx1['lockedGrid']['expand']()
            };
            _0xecbcx1['lockedGrid']['setWidth'](_0xecbcx1['getWidth']() - _0xecbcx1['normalGrid']['getPlaceholder']()['getWidth']());
            _0xecbcx1['addCls']('sch-normalgrid-collapsed')
        }
    },
    onNormalGridExpand: function() {
        this['removeCls']('sch-normalgrid-collapsed')
    },
    onLockedGridCollapse: function() {
        var _0xecbcx1 = this;
        if (_0xecbcx1['normalGrid']['collapsed']) {
            _0xecbcx1['normalGrid']['expand']()
        }
    },
    onLockedGridExpand: function() {
        if (this['lockedGrid']['savedWidth']) {
            this['lockedGrid']['setWidth'](this['lockedGrid']['savedWidth'])
        }
    },
    beforeCrudOperationStart: function(_0xecbcx1, _0xecbcx5, _0xecbcx2) {
        if (this['rendered']) {
            this['setLoading']({
                msg: _0xecbcx2 === 'load' ? this.L('loadingText') : this.L('savingText')
            })
        } else {
            Ext['destroy'](this['renderWaitListener']);
            this['renderWaitListener'] = this['on']('render', Ext['Function']['bind'](this['beforeCrudOperationStart'], this, Array['prototype']['slice']['apply'](arguments)), this, {
                delay: 1,
                destroyable: true
            })
        }
    },
    onCrudBeforeLoad: function() {
        this['suspendRefresh']()
    },
    onCrudLoad: function() {
        this['resumeRefresh'](true)
    },
    onCrudOperationComplete: function() {
        Ext['destroy'](this['renderWaitListener']);
        this['setLoading'](false)
    },
    onSchedulePinchStart: function(_0xecbcx1, _0xecbcx2) {
        this['pinchStartDistanceX'] = Math['abs'](_0xecbcx2['touches'][0]['pageX'] - _0xecbcx2['touches'][1]['pageX']);
        this['pinchStartDistanceY'] = Math['abs'](_0xecbcx2['touches'][0]['pageY'] - _0xecbcx2['touches'][1]['pageY'])
    },
    onSchedulePinch: function(_0xecbcx1, _0xecbcx2) {
        this['pinchDistanceX'] = Math['abs'](_0xecbcx2['touches'][0]['pageX'] - _0xecbcx2['touches'][1]['pageX']);
        this['pinchDistanceY'] = Math['abs'](_0xecbcx2['touches'][0]['pageY'] - _0xecbcx2['touches'][1]['pageY'])
    },
    onSchedulePinchEnd: function(_0xecbcx1) {
        var _0xecbcx4 = this['pinchDistanceX'];
        var _0xecbcx3 = this['pinchDistanceY'];
        var _0xecbcx6 = this['isHorizontal']();
        if (Math['abs'](_0xecbcx4 - this['pinchStartDistanceX']) > this['schedulePinchThreshold']) {
            var _0xecbcx5 = Math['abs'](_0xecbcx4 / this['pinchStartDistanceX']);
            if (_0xecbcx6) {
                _0xecbcx5 > 1 ? this['zoomIn']() : this['zoomOut']()
            } else {
                this['timeAxisViewModel']['setViewColumnWidth'](_0xecbcx5 * this['timeAxisViewModel']['resourceColumnWidth'])
            }
        };
        if (Math['abs'](_0xecbcx3 - this['pinchStartDistanceY']) > this['schedulePinchThreshold']) {
            var _0xecbcx2 = Math['abs'](_0xecbcx3 / this['pinchStartDistanceY']);
            _0xecbcx1['setRowHeight'](_0xecbcx1['getRowHeight']() * _0xecbcx2)
        };
        this['pinchStartDistanceX'] = this['pinchStartDistanceY'] = this['pinchDistanceX'] = this['pinchDistanceY'] = null
    },
    patchNavigationModel: function(_0xecbcx5) {
        _0xecbcx5['getView']()['getNavigationModel']()['focusItem'] = function(_0xecbcx3) {
            _0xecbcx3['addCls'](this['focusCls']);
            if (((Ext['isIE'] || Ext['isEdge']) && !_0xecbcx3['hasCls']('sch-timetd')) || (!(Ext['isIE'] || Ext['isEdge']) && _0xecbcx5['isHorizontal']())) {
                _0xecbcx3['focus']()
            }
        };
        var _0xecbcx2 = _0xecbcx5['lockedGrid']['getView']();
        var _0xecbcx1 = _0xecbcx5['normalGrid']['getView']();
        _0xecbcx2['on']('rowclick', function(_0xecbcx4, _0xecbcx3, _0xecbcx6, _0xecbcx9) {
            if (_0xecbcx1['lastFocused']) {
                _0xecbcx1['lastFocused']['rowIdx'] = _0xecbcx9;
                _0xecbcx1['lastFocused']['record'] = _0xecbcx3
            } else {
                if (Ext['isIE']) {
                    _0xecbcx1['lastFocused'] = this['lastFocused']
                }
            }
        });
        _0xecbcx1['on']('rowclick', function(_0xecbcx4, _0xecbcx3, _0xecbcx6, _0xecbcx9) {
            if (_0xecbcx2['lastFocused']) {
                _0xecbcx2['lastFocused']['rowIdx'] = _0xecbcx9;
                _0xecbcx2['lastFocused']['record'] = _0xecbcx3
            } else {
                if (Ext['isIE']) {
                    _0xecbcx2['lastFocused'] = this['lastFocused']
                }
            }
        })
    },
    configureChildGrids: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['lockedGridConfig'] = Ext.apply({}, _0xecbcx1['lockedGridConfig'] || {});
        _0xecbcx1['normalGridConfig'] = Ext.apply({}, _0xecbcx1['schedulerConfig'] || _0xecbcx1['normalGridConfig'] || {});
        var _0xecbcx5 = _0xecbcx1['lockedGridConfig'],
            _0xecbcx2 = _0xecbcx1['normalGridConfig'];
        if (_0xecbcx1['lockedXType']) {
            _0xecbcx5['xtype'] = _0xecbcx1['lockedXType']
        };
        if (_0xecbcx1['normalXType']) {
            _0xecbcx2['xtype'] = _0xecbcx1['normalXType']
        };
        Ext['applyIf'](_0xecbcx5, {
            useArrows: true,
            animCollapse: false,
            collapseDirection: 'left',
            trackMouseOver: false
        });
        Ext['applyIf'](_0xecbcx2, {
            viewType: _0xecbcx1['viewType'],
            enableColumnMove: false,
            enableColumnResize: false,
            enableColumnHide: false,
            trackMouseOver: false,
            collapseDirection: 'right',
            collapseMode: 'placeholder',
            animCollapse: false
        });
        if (_0xecbcx1['isVertical']()) {
            _0xecbcx5['store'] = _0xecbcx2['store'] = _0xecbcx1['timeAxis']
        };
        if (_0xecbcx5['width']) {
            _0xecbcx1['syncLockedWidth'] = Ext['emptyFn'];
            _0xecbcx5['scroll'] = Ext['supports']['Touch'] ? 'both' : 'horizontal';
            _0xecbcx5['scrollerOwner'] = true
        }
    },
    afterInitComponent: function() {
        var _0xecbcx4 = this;
        var _0xecbcx3 = _0xecbcx4['lockedGrid']['getView']();
        var _0xecbcx5 = _0xecbcx4['normalGrid']['getView']();
        var _0xecbcx2 = Ext['data']['TreeStore'] && _0xecbcx4['store'] instanceof Ext['data']['TreeStore'];
        if (_0xecbcx4['normalGrid']['collapsed']) {
            _0xecbcx4['normalGrid']['collapsed'] = false;
            _0xecbcx5['on']('boxready', function() {
                _0xecbcx4['normalGrid']['collapse']()
            }, _0xecbcx4, {
                delay: 10
            })
        };
        if (_0xecbcx4['lockedGrid']['collapsed']) {
            _0xecbcx4['lockedGrid']['collapsed'] = false;
            _0xecbcx3['on']('boxready', function() {
                _0xecbcx4['lockedGrid']['collapse']()
            }, _0xecbcx4, {
                delay: 10
            });
            if (_0xecbcx3['bufferedRenderer']) {
                _0xecbcx3['bufferedRenderer']['disabled'] = true
            }
        };
        if (_0xecbcx2) {
            this['setupLockableFilterableTree']()
        };
        var _0xecbcx6 = this['getSplitter']();
        if (_0xecbcx6) {
            _0xecbcx6['addCls']('sch-timelinepanel-splitter');
            _0xecbcx6['setVisible'](this['isHorizontal']())
        };
        var _0xecbcx1 = function(_0xecbcx7, _0xecbcx9) {
            if (!('TouchEvent' in window && (_0xecbcx7['parentEvent'] && _0xecbcx7['parentEvent']['type']['match'](/touch/i)))) {
                Ext['getBody']()['un']('mousemove', _0xecbcx1, this);
                this['setTouchEnhancementsEnabled'](false)
            }
        };
        Ext['getBody']()['on']('mousemove', _0xecbcx1, this);
        this['setTouchEnhancementsEnabled'](true);
        if (Ext['versions']['extjs']['isGreaterThan']('6.2.0')) {
            this['normalGrid']['on']('cellclick', this['onNormalGridCellClick'], this)
        };
        if (this['zoomOnTimeAxisDoubleClick']) {
            this['on']('timeheaderdblclick', function(_0xecbcxa, _0xecbcx7, _0xecbcx9) {
                if (this['isHorizontal']()) {
                    this['zoomToSpan']({
                        start: _0xecbcx7,
                        end: _0xecbcx9
                    })
                }
            })
        }
    },
    onNormalGridCellClick: function(_0xecbcx1, _0xecbcx5, _0xecbcxa, _0xecbcx3, _0xecbcx7, _0xecbcx8, _0xecbcx6) {
        if (_0xecbcx5['className']['match']('sch-timetd')) {
            var _0xecbcx2 = this['getSelectionModel']();
            var _0xecbcx9 = _0xecbcx6['ctrlKey'] && _0xecbcx2['isSelected'](_0xecbcx8);
            if (_0xecbcx9) {
                _0xecbcx2['deselect'](_0xecbcx8)
            } else {
                _0xecbcx2['select'](_0xecbcx8, _0xecbcx6['ctrlKey'])
            }
        }
    },
    getSplitter: function() {
        return this['child']('splitter')
    },
    setTouchEnhancementsEnabled: function(_0xecbcx1) {
        if (_0xecbcx1) {
            this['addCls']('sch-touch-only')
        } else {
            this['removeCls']('sch-touch-only')
        }
    },
    setupLockableFilterableTree: function() {
        var _0xecbcx5 = this;
        var _0xecbcx2 = _0xecbcx5['lockedGrid']['getView']();
        var _0xecbcx1 = Ext.ux.Scheduler['mixin']['FilterableTreeView']['prototype'];
        _0xecbcx2['initTreeFiltering'] = _0xecbcx1['initTreeFiltering'];
        _0xecbcx2['onFilterChangeStart'] = _0xecbcx1['onFilterChangeStart'];
        _0xecbcx2['onFilterChangeEnd'] = _0xecbcx1['onFilterChangeEnd'];
        _0xecbcx2['onFilterCleared'] = _0xecbcx1['onFilterCleared'];
        _0xecbcx2['onFilterSet'] = _0xecbcx1['onFilterSet'];
        _0xecbcx2['initTreeFiltering']()
    },
    showMenuBy: function(_0xecbcx2, _0xecbcx6) {
        var _0xecbcx4 = this['getMenu'](),
            _0xecbcx5 = _0xecbcx4['down']('#unlockItem'),
            _0xecbcx3 = _0xecbcx4['down']('#lockItem'),
            _0xecbcx1 = _0xecbcx5['prev']();
        _0xecbcx1['hide']();
        _0xecbcx5['hide']();
        _0xecbcx3['hide']()
    },
    zoomToFit: function(_0xecbcx1) {
        _0xecbcx1 = Ext.apply({
            adjustStart: 1,
            adjustEnd: 1
        }, _0xecbcx1);
        var _0xecbcx2 = this['getEventStore']();
        var _0xecbcx5 = this['getEventStore']()['getTotalTimeSpan']();
        if (this['zoomToSpan'](_0xecbcx5, _0xecbcx1) === null) {
            this['getSchedulingView']()['fitColumns']()
        }
    },
    refreshViews: function(_0xecbcx2) {
        if (!this['rendered']) {
            return
        };
        var _0xecbcx4 = false;
        var _0xecbcx5 = function() {
            _0xecbcx4 = true
        };
        var _0xecbcx6 = this['normalGrid']['getView']();
        var _0xecbcx3 = this['lockedGrid']['getView'](),
            _0xecbcx1 = {
                left: _0xecbcx3['getScrollX'](),
                top: _0xecbcx6['getVerticalScroll']()
            };
        _0xecbcx6['on']('refresh', _0xecbcx5);
        _0xecbcx3['refreshView']();
        _0xecbcx6['un']('refresh', _0xecbcx5);
        if (_0xecbcx2 !== false) {
            !_0xecbcx4 && this['getSchedulingView']()['refreshKeepingScroll']();
            _0xecbcx3['setScrollX'](_0xecbcx1['left']);
            _0xecbcx3['setScrollY'](_0xecbcx1['top'])
        } else {
            if (!_0xecbcx4) {
                this['getSchedulingView']()['refreshView']()
            }
        }
    },
    getCalendar: function() {
        return this['calendar']
    },
    disableWeekendHighlighting: function(_0xecbcx1) {
        this['workingTimePlugin']['setDisabled'](_0xecbcx1);
        if (_0xecbcx1) {
            this['removeCls']('sch-timelinepanel-highlightweekends')
        } else {
            this['addCls']('sch-timelinepanel-highlightweekends')
        }
    },
    preventRefresh: function() {
        return false
    },
    suspendRefresh: function() {
        var _0xecbcx1 = this;
        if (_0xecbcx1['refreshSuspensionCount']++ === 0) {
            _0xecbcx1['getView']()['on']('beforerefresh', _0xecbcx1['preventRefresh'], _0xecbcx1);
            _0xecbcx1['normalGrid']['view']['blockRefresh'] = true;
            _0xecbcx1['lockedGrid']['view']['blockRefresh'] = true
        }
    },
    resumeRefresh: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        if (_0xecbcx1['refreshSuspensionCount'] && !--_0xecbcx1['refreshSuspensionCount']) {
            _0xecbcx1['getView']()['un']('beforerefresh', _0xecbcx1['preventRefresh'], _0xecbcx1);
            _0xecbcx1['normalGrid']['view']['blockRefresh'] = false;
            _0xecbcx1['lockedGrid']['view']['blockRefresh'] = false;
            if (_0xecbcx2) {
                _0xecbcx1['refreshViews']()
            }
        }
    }
}, function() {
    var _0xecbcx1 = '6.0.0';
    Ext.apply(Ext.ux.Scheduler, {
        VERSION: '5.1.3'
    });
    if (Ext['versions']['extjs']['isLessThan'](_0xecbcx1)) {
        var _0xecbcx2 = console;
        _0xecbcx2 && _0xecbcx2['log']('The Ext JS version you are using needs to be updated to at least ' + _0xecbcx1)
    };
    if (Ext['getVersion']()['isGreaterThan']('6.0.2')) {
        Ext.define(null, {
            override: 'Ext.grid.plugin.BufferedRenderer',
            doRefreshView: function() {
                if (this['view']['ownerGrid']['is']('timelinegrid,timelinetree')) {
                    var _0xecbcx5 = Ext['Error']['ignore'];
                    Ext['Error']['ignore'] = true;
                    this['callParent'](arguments);
                    Ext['Error']['ignore'] = _0xecbcx5
                } else {
                    this['callParent'](arguments)
                }
            }
        })
    }
});
Ext.define('Ext.ux.Scheduler.panel.TimelineGridPanel', {
    extend: 'Ext.grid.Panel',
    mixins: ['Ext.ux.Scheduler.mixin.Localizable', 'Ext.ux.Scheduler.mixin.TimelinePanel'],
    alias: ['widget.timelinegrid'],
    subGridXType: 'gridpanel',
    isTimelineGridPanel: true,
    initComponent: function() {
        this['callParent'](arguments);
        this['getSchedulingView']()._initializeTimelineView()
    }
}, function() {
    this['override'](Ext.ux.Scheduler['mixin']['TimelinePanel']['prototype']['inheritables']() || {})
});
Ext.define('Ext.ux.Scheduler.template.DependencyInfo', {
    extend: 'Ext.XTemplate',
    mixins: ['Ext.ux.Scheduler.mixin.Localizable'],
    text: '<dl class="sch-dep-tip"><dt class="sch-dep-tip-from-title">__FROM__:</dt><dd class="sch-dep-tip-from-value">{[values.fromTask.getName() || "&nbsp;"]}</dd><dt class="sch-dep-tip-to-title">__TO__:</dt><dd class="sch-dep-tip-to-value">{[values.toTask && values.toTask.getName() || "&nbsp;"]}</dd></dl>',
    constructor: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['text'] = _0xecbcx1['text']['replace'](/__FROM__/, _0xecbcx1.L('fromText'))['replace'](/__TO__/, _0xecbcx1.L('toText'));
        _0xecbcx1['callParent']([_0xecbcx1['text']])
    }
});
Ext.define('Ext.ux.Scheduler.view.dependency.DropZone', {
    extend: 'Ext.dd.DropZone',
    mixins: {
        observable: 'Ext.util.Observable'
    },
    terminalSelector: null,
    dependencyStore: null,
    toText: null,
    startText: null,
    endText: null,
    view: null,
    tipTpl: null,
    constructor: function(_0xecbcx2, _0xecbcx1) {
        this['mixins']['observable']['constructor']['call'](this, _0xecbcx1);
        this['callParent'](arguments)
    },
    getTargetFromEvent: function(_0xecbcx1) {
        return _0xecbcx1['getTarget'](this['terminalSelector'])
    },
    onNodeEnter: function(_0xecbcx5, _0xecbcxa, _0xecbcx3, _0xecbcx2) {
        var _0xecbcx9 = this,
            _0xecbcx1 = _0xecbcx9['view']['resolveEventRecord'](_0xecbcx5),
            _0xecbcx8 = _0xecbcx5['className']['match'](/sch-terminal-(\w+)/)[1],
            _0xecbcx7 = _0xecbcx1['getId']() || _0xecbcx1['internalId'],
            _0xecbcx6 = Ext.apply({
                toTask: _0xecbcx1,
                toSide: _0xecbcx8
            }, _0xecbcx2['tplData']);
        _0xecbcx9['tipTpl']['overwrite'](_0xecbcxa['proxy']['el']['down']('.' + Ext['baseCSSPrefix'] + 'dd-drag-ghost', true), _0xecbcx6);
        _0xecbcx2['valid'] = _0xecbcx9['isValidLink'](_0xecbcx2['fromId'], _0xecbcx7, _0xecbcxa['dragData']['fromSide'], _0xecbcx8);
        Ext['fly'](_0xecbcx5)['addCls']('sch-terminal-' + (_0xecbcx2['valid'] ? 'valid' : 'invalid') + '-drop')
    },
    onNodeOut: function(_0xecbcx3, _0xecbcx1, _0xecbcx5, _0xecbcx2) {
        _0xecbcx2['valid'] = false;
        Ext['fly'](_0xecbcx3)['removeCls'](['sch-terminal-valid-drop', 'sch-terminal-invalid-drop']);
        this['tipTpl']['overwrite'](_0xecbcx1['proxy']['el']['down']('.' + Ext['baseCSSPrefix'] + 'dd-drag-ghost'), _0xecbcx2['tplData'])
    },
    onNodeOver: function(_0xecbcx3, _0xecbcx1, _0xecbcx5, _0xecbcx2) {
        if (_0xecbcx2['valid']) {
            return this['dropAllowed']
        } else {
            return this['dropNotAllowed']
        }
    },
    onNodeDrop: function(_0xecbcx6, _0xecbcxd, _0xecbcx9, _0xecbcx5) {
        var _0xecbcx7 = this,
            _0xecbcx3 = _0xecbcx7['view']['resolveEventRecord'](_0xecbcx6),
            _0xecbcx8 = _0xecbcx6['className']['match'](/sch-terminal-(\w+)/)[1],
            _0xecbcxa = _0xecbcx3['getId']() || _0xecbcx3['internalId'],
            _0xecbcx1 = _0xecbcx5['valid'],
            _0xecbcx2 = _0xecbcx7['createDependencyModel'](_0xecbcxd['dragData']['fromId'], _0xecbcxa, _0xecbcx5['fromSide'], _0xecbcx8);
        _0xecbcx7['fireEvent']('drop', _0xecbcx7, _0xecbcx2, _0xecbcx1);
        _0xecbcx7['fireEvent']('afterdrop', _0xecbcx7);
        return _0xecbcx1
    },
    createDependencyModel: function(_0xecbcx4, _0xecbcx2, _0xecbcx6, _0xecbcx3) {
        var _0xecbcx5 = this['dependencyStore'],
            _0xecbcx1 = new(_0xecbcx5['getModel']())();
        _0xecbcx1['setSourceId'](_0xecbcx4);
        _0xecbcx1['setTargetId'](_0xecbcx2);
        _0xecbcx1 instanceof Ext.ux.Scheduler['model']['Dependency'] && _0xecbcx1['setFromSide'](_0xecbcx6);
        _0xecbcx1 instanceof Ext.ux.Scheduler['model']['Dependency'] && _0xecbcx1['setToSide'](_0xecbcx3);
        _0xecbcx1['setType'](_0xecbcx1['getTypeFromSides'](_0xecbcx6, _0xecbcx3, this['view']['rtl']));
        return _0xecbcx1
    },
    isValidLink: function(_0xecbcx3, _0xecbcx2, _0xecbcx4, _0xecbcx5) {
        var _0xecbcx1 = this['createDependencyModel'](_0xecbcx3, _0xecbcx2, _0xecbcx4, _0xecbcx5);
        return this['dependencyStore']['isValidDependency'](_0xecbcx1)
    }
});
Ext.define('Ext.ux.Scheduler.view.dependency.DragZone', {
    extend: 'Ext.dd.DragZone',
    alias: 'schdependencydragzone.default',
    requires: ['Ext.ux.Scheduler.template.DependencyInfo', 'Ext.ux.Scheduler.view.dependency.DropZone', 'Ext.ux.Scheduler.util.ScrollManager'],
    mixins: {
        factoryable: 'Ext.mixin.Factoryable',
        observable: 'Ext.util.Observable'
    },
    terminalSelector: null,
    view: null,
    fromText: null,
    toText: null,
    startText: null,
    endText: null,
    rtl: false,
    useLineProxy: true,
    dependencyStore: null,
    tipTpl: null,
    constructor: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['mixins']['observable']['constructor']['call'](this, _0xecbcx1);
        _0xecbcx2['callParent']([_0xecbcx1['view']['getEl'](), _0xecbcx1]);
        _0xecbcx2['tipTpl'] = _0xecbcx2['tipTpl'] || new Ext.ux.Scheduler['template'].DependencyInfo();
        if (!(_0xecbcx2['tipTpl'] instanceof Ext['Template'])) {
            _0xecbcx2['tipTpl'] = new Ext.XTemplate(_0xecbcx2['tipTpl'])
        };
        _0xecbcx2['dropZone'] = _0xecbcx2['createDropZone']();
        _0xecbcx2['relayEvents'](_0xecbcx2['dropZone'], ['drop', 'afterdrop']);
        _0xecbcx2['on']({
            dragstart: _0xecbcx2['onDependencyDragStart'],
            afterdrop: _0xecbcx2['onDependencyAfterDrop'],
            scope: _0xecbcx2
        })
    },
    onDependencyDragStart: function() {
        Ext.ux.Scheduler['util']['ScrollManager']['activate'](this['view'])
    },
    onDependencyAfterDrop: function() {
        Ext.ux.Scheduler['util']['ScrollManager']['deactivate']()
    },
    createDropZone: function() {
        return new Ext.ux.Scheduler['view']['dependency'].DropZone(this['el'], this['getDropZoneConfig']())
    },
    getDropZoneConfig: function() {
        return {
            rtl: this['rtl'],
            terminalSelector: this['terminalSelector'],
            ddGroup: this['ddGroup'],
            view: this['view'],
            dependencyStore: this['dependencyStore'],
            tipTpl: this['tipTpl']
        }
    },
    initLineProxy: function(_0xecbcx2) {
        var _0xecbcx3 = this,
            _0xecbcx1 = _0xecbcx3['view']['getScroll'](),
            _0xecbcx5 = Ext['fly'](_0xecbcx2)['getOffsetsTo'](_0xecbcx3['view']['el']),
            _0xecbcx6 = Ext['fly'](_0xecbcx2)['getWidth']() / 2,
            _0xecbcx9 = _0xecbcx5[0] + _0xecbcx6,
            _0xecbcx4 = _0xecbcx5[1] + _0xecbcx6;
        _0xecbcx9 = _0xecbcx9 + _0xecbcx1['left'];
        _0xecbcx4 = Ext['getVersion']()['isLessThan']('6.2.0') ? _0xecbcx4 + _0xecbcx1['top'] : _0xecbcx4;
        _0xecbcx3['lineProxyEl'] = _0xecbcx3['el']['createChild']({
            cls: 'sch-dependency-connector-proxy',
            style: 'top:' + _0xecbcx4 + 'px;left:' + _0xecbcx9 + 'px'
        });
        Ext.apply(_0xecbcx3, {
            containerTop: _0xecbcx3['el']['getTop'](),
            containerLeft: _0xecbcx3['el']['getLeft'](),
            startXY: [_0xecbcx9, _0xecbcx4],
            startScrollLeft: _0xecbcx1['left'],
            startScrollTop: _0xecbcx1['top']
        })
    },
    updateLineProxy: function(_0xecbcx7) {
        var _0xecbcxd = this,
            _0xecbcx1 = _0xecbcxd['lineProxyEl'],
            _0xecbcxf = _0xecbcxd['view']['getScroll'](),
            _0xecbcx2 = _0xecbcxd['view']['el']['dom']['getBoundingClientRect'](),
            _0xecbcxe = _0xecbcx7[0] - _0xecbcx2['left'] - _0xecbcxd['startXY'][0] + _0xecbcxf['left'],
            _0xecbcx11 = _0xecbcx7[1] - _0xecbcx2['top'] - _0xecbcxd['startXY'][1] + (Ext['getVersion']()['isLessThan']('6.2.0') ? _0xecbcxf['top'] : 0),
            _0xecbcx5 = Math['max'](1, Math['sqrt'](Math['pow'](_0xecbcxe, 2) + Math['pow'](_0xecbcx11, 2)) - 2),
            _0xecbcx8 = Math['atan2'](_0xecbcx11, _0xecbcxe) - (Math['PI'] / 2),
            _0xecbcx6;
        if (Ext['isIE9m']) {
            var _0xecbcxc = Math['cos'](_0xecbcx8),
                _0xecbcxa = Math['sin'](_0xecbcx8),
                _0xecbcxb = 'progid:DXImageTransform.Microsoft.Matrix(sizingMethod="auto expand", M11 = ' + _0xecbcxc + ', M12 = ' + (-_0xecbcxa) + ', M21 = ' + _0xecbcxa + ', M22 = ' + _0xecbcxc + ')',
                _0xecbcx4, _0xecbcx9;
            if (_0xecbcxf['top'] !== _0xecbcxd['startScrollTop']) {
                _0xecbcx4 = _0xecbcxd['startScrollTop'] - _0xecbcxd['containerTop']
            } else {
                _0xecbcx4 = _0xecbcxf['top'] - _0xecbcxd['containerTop']
            };
            if (_0xecbcxf['left'] !== _0xecbcxd['startScrollLeft']) {
                _0xecbcx9 = _0xecbcxd['startScrollLeft'] - _0xecbcxd['containerLeft']
            } else {
                _0xecbcx9 = _0xecbcxf['left'] - _0xecbcxd['containerLeft']
            };
            _0xecbcx6 = {
                height: _0xecbcx5 + 'px',
                top: Math['min'](0, _0xecbcx11) + _0xecbcxd['startXY'][1] + _0xecbcx4 + (_0xecbcx11 < 0 ? 2 : 0) + 'px',
                left: Math['min'](0, _0xecbcxe) + _0xecbcxd['startXY'][0] + _0xecbcx9 + (_0xecbcxe < 0 ? 2 : 0) + 'px',
                filter: _0xecbcxb,
                "\x2D\x6D\x73\x2D\x66\x69\x6C\x74\x65\x72": _0xecbcxb
            }
        } else {
            var _0xecbcx3 = 'rotate(' + _0xecbcx8 + 'rad)';
            _0xecbcx6 = {
                height: _0xecbcx5 + 'px',
                "\x2D\x6F\x2D\x74\x72\x61\x6E\x73\x66\x6F\x72\x6D": _0xecbcx3,
                "\x2D\x77\x65\x62\x6B\x69\x74\x2D\x74\x72\x61\x6E\x73\x66\x6F\x72\x6D": _0xecbcx3,
                "\x2D\x6D\x73\x2D\x74\x72\x61\x6E\x73\x66\x6F\x72\x6D": _0xecbcx3,
                "\x2D\x6D\x6F\x7A\x2D\x74\x72\x61\x6E\x73\x66\x6F\x72\x6D": _0xecbcx3,
                transform: _0xecbcx3
            }
        };
        _0xecbcx1['setStyle'](_0xecbcx6)
    },
    getDragData: function(_0xecbcx9) {
        var _0xecbcx6 = this,
            _0xecbcx3 = _0xecbcx9['getTarget'](_0xecbcx6['terminalSelector']);
        if (_0xecbcx3) {
            var _0xecbcx5 = _0xecbcx6['view']['resolveEventRecord'](_0xecbcx3);
            if (_0xecbcx6['fireEvent']('beforedrag', _0xecbcx6, _0xecbcx5) === false) {
                return null
            };
            var _0xecbcx2 = _0xecbcx3['className']['match'](/sch-terminal-(\w+)/)[1],
                _0xecbcx1 = {
                    fromTask: _0xecbcx5,
                    fromSide: _0xecbcx2
                },
                _0xecbcx7 = Ext['core']['DomHelper']['createDom']({
                    html: _0xecbcx6['tipTpl']['apply'](_0xecbcx1)
                })['firstChild'];
            _0xecbcx3['style']['display'] = 'block';
            return {
                fromId: _0xecbcx5['getId']() || _0xecbcx5['internalId'],
                fromSide: _0xecbcx2,
                tplData: _0xecbcx1,
                repairXY: Ext['fly'](_0xecbcx3)['getXY'](),
                ddel: _0xecbcx7,
                valid: false,
                sourceTerminal: _0xecbcx3
            }
        };
        return false
    },
    onStartDrag: function(_0xecbcx2, _0xecbcx6) {
        var _0xecbcx3 = this,
            _0xecbcx1 = _0xecbcx3['dragData'],
            _0xecbcx5 = _0xecbcx1['sourceTerminal'],
            _0xecbcx4 = _0xecbcx5['className']['match'](/sch-terminal-(\w+)/)[0];
        _0xecbcx3['fireEvent']('dragstart', _0xecbcx3);
        if (_0xecbcx3['useLineProxy']) {
            _0xecbcx3['initLineProxy'](_0xecbcx5, _0xecbcx1['isStart']);
            _0xecbcx3['lineProxyEl']['show']()
        };
        _0xecbcx3['proxy']['addCls']('sch-create-dependency-tip');
        Ext['fly'](_0xecbcx1['sourceTerminal']['parentNode'])['select']('.sch-terminal:not(.' + _0xecbcx4 + ')')['addCls']('sch-terminal-hidden')
    },
    onDrag: function(_0xecbcx2, _0xecbcx1) {
        this['useLineProxy'] && this['updateLineProxy'](_0xecbcx2['getXY']())
    },
    afterRepair: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['dragging'] = false;
        !_0xecbcx1['destroyed'] && _0xecbcx1['fireEvent']('afterdrop', _0xecbcx1['dropZone'])
    },
    onMouseUp: function() {
        var _0xecbcx2 = this;
        _0xecbcx2['el']['removeCls']('sch-terminals-visible');
        _0xecbcx2['dragData']['sourceTerminal']['style']['display'] = '';
        if (_0xecbcx2['lineProxyEl']) {
            var _0xecbcx5 = Ext['isIE9m'] ? 0 : 400,
                _0xecbcx1 = _0xecbcx2['lineProxyEl'];
            _0xecbcx1['animate']({
                to: {
                    height: 0
                },
                duration: _0xecbcx5,
                callback: function() {
                    Ext['destroy'](_0xecbcx1)
                }
            });
            _0xecbcx2['lineProxyEl'] = null
        }
    },
    getRepairXY: function() {
        return this['dragData']['repairXY']
    },
    destroy: function() {
        var _0xecbcx1 = this;
        Ext['destroy']([_0xecbcx1['lineProxyEl'], _0xecbcx1['dropZone']]);
        _0xecbcx1['callParent'](arguments)
    }
});
Ext.define('Ext.ux.Scheduler.util.RectangularPathFinder', {
    alias: 'schpathfinder.rectangular',
    mixins: ['Ext.mixin.Factoryable'],
    uses: ['Ext.Array'],
    config: {
        startSide: 'right',
        startArrowSize: 8,
        startArrowMargin: 6,
        startShift: 0,
        endSide: 'left',
        endArrowSize: 8,
        endArrowMargin: 6,
        endShift: 0,
        verticalMargin: 2,
        horizontalMargin: 5,
        otherBoxes: null
    },
    constructor: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['callParent']([_0xecbcx1]);
        _0xecbcx2['initConfig'](_0xecbcx1)
    },
    findPath: function(_0xecbcx3, _0xecbcx24) {
        var _0xecbcx1c = this,
            _0xecbcxb, _0xecbcx6, _0xecbcx16, _0xecbcx14, _0xecbcx17, _0xecbcxd, _0xecbcx1b, _0xecbcx1f, _0xecbcx5, _0xecbcx22, _0xecbcx2, _0xecbcxc, _0xecbcx1a, _0xecbcx18, _0xecbcx11, _0xecbcxf, _0xecbcx15, _0xecbcx7, _0xecbcx23, _0xecbcxa, _0xecbcx13, _0xecbcx19, _0xecbcx12, _0xecbcx4, _0xecbcx9, _0xecbcxe, _0xecbcx1, _0xecbcx10, _0xecbcx8;
        if (_0xecbcx24 && !Ext['isArray'](_0xecbcx24)) {
            _0xecbcx24 = [_0xecbcx24]
        };
        for (_0xecbcx8 = 0; _0xecbcx3 && !_0xecbcx10;) {
            _0xecbcxb = Ext['applyIf'](_0xecbcx3, _0xecbcx1c['getConfig']());
            _0xecbcx6 = _0xecbcxb['startBox'], _0xecbcx16 = _0xecbcxb['endBox'], _0xecbcx14 = _0xecbcxb['startShift'], _0xecbcx17 = _0xecbcxb['endShift'], _0xecbcxd = _0xecbcxb['startSide'], _0xecbcx1b = _0xecbcxb['endSide'], _0xecbcx1f = _0xecbcxb['startArrowSize'], _0xecbcx5 = _0xecbcxb['endArrowSize'], _0xecbcx22 = _0xecbcxb['startArrowMargin'], _0xecbcx2 = _0xecbcxb['endArrowMargin'], _0xecbcxc = _0xecbcxb['horizontalMargin'], _0xecbcx1a = _0xecbcxb['verticalMargin'], _0xecbcx18 = _0xecbcxb.hasOwnProperty('startHorizontalMargin') ? _0xecbcxb['startHorizontalMargin'] : _0xecbcxc, _0xecbcx11 = _0xecbcxb.hasOwnProperty('startVerticalMargin') ? _0xecbcxb['startVerticalMargin'] : _0xecbcx1a, _0xecbcxf = _0xecbcxb.hasOwnProperty('endHorizontalMargin') ? _0xecbcxb['endHorizontalMargin'] : _0xecbcxc, _0xecbcx15 = _0xecbcxb.hasOwnProperty('endVerticalMargin') ? _0xecbcxb['endVerticalMargin'] : _0xecbcx1a, _0xecbcx7 = _0xecbcxb['otherBoxes'];
            _0xecbcxd = _0xecbcx1c['normalizeSide'](_0xecbcxd);
            _0xecbcx1b = _0xecbcx1c['normalizeSide'](_0xecbcx1b);
            _0xecbcx23 = _0xecbcx1c['getConnectionCoordinatesFromBoxSideShift'](_0xecbcx6, _0xecbcxd, _0xecbcx14);
            _0xecbcxa = _0xecbcx1c['getConnectionCoordinatesFromBoxSideShift'](_0xecbcx16, _0xecbcx1b, _0xecbcx17);
            _0xecbcx9 = _0xecbcx1c['calcGridBaseBoxFromBoxAndDrawParams'](_0xecbcx6, _0xecbcxd, _0xecbcx1f, _0xecbcx22, _0xecbcx18, _0xecbcx11);
            _0xecbcxe = _0xecbcx1c['calcGridBaseBoxFromBoxAndDrawParams'](_0xecbcx16, _0xecbcx1b, _0xecbcx5, _0xecbcx2, _0xecbcxf, _0xecbcx15);
            _0xecbcx7 = _0xecbcx7 && Ext['Array']['map'](_0xecbcx7, function(_0xecbcx1d) {
                return _0xecbcx1c['calcGridBaseBoxFromBoxAndDrawParams'](_0xecbcx1d, false, 0, 0, _0xecbcxc, _0xecbcx1a)
            });
            _0xecbcx13 = _0xecbcx1c['getConnectionCoordinatesFromBoxSideShift'](_0xecbcx9, _0xecbcxd, _0xecbcx14);
            _0xecbcx19 = _0xecbcx1c['getConnectionCoordinatesFromBoxSideShift'](_0xecbcxe, _0xecbcx1b, _0xecbcx17);
            _0xecbcx1 = _0xecbcx1c['buildPathGrid'](_0xecbcx9, _0xecbcxe, _0xecbcx13, _0xecbcx19, _0xecbcxd, _0xecbcx1b, _0xecbcx7);
            _0xecbcx12 = _0xecbcx1c['convertDecartPointToGridPoint'](_0xecbcx1, _0xecbcx13);
            _0xecbcx4 = _0xecbcx1c['convertDecartPointToGridPoint'](_0xecbcx1, _0xecbcx19);
            _0xecbcx10 = _0xecbcx1c['findPathOnGrid'](_0xecbcx1, _0xecbcx12, _0xecbcx4, _0xecbcxd, _0xecbcx1b);
            for (_0xecbcx3 = false; !_0xecbcx10 && !_0xecbcx3 && _0xecbcx24 && _0xecbcx8 < _0xecbcx24['length']; _0xecbcx8++) {
                _0xecbcx3 = (_0xecbcx24[_0xecbcx8])(_0xecbcxb)
            }
        };
        if (_0xecbcx10) {
            _0xecbcx10 = _0xecbcx1c['prependPathWithArrowStaffSegment'](_0xecbcx10, _0xecbcx23, _0xecbcx1f, _0xecbcxd);
            _0xecbcx10 = _0xecbcx1c['appendPathWithArrowStaffSegment'](_0xecbcx10, _0xecbcxa, _0xecbcx5, _0xecbcx1b);
            _0xecbcx10 = _0xecbcx1c['optimizePath'](_0xecbcx10)
        };
        return _0xecbcx10
    },
    getConnectionCoordinatesFromBoxSideShift: function(_0xecbcx5, _0xecbcx2, _0xecbcx1) {
        var _0xecbcx3;
        switch (_0xecbcx2) {
            case 'left':
                _0xecbcx3 = {
                    x: _0xecbcx5['start'],
                    y: (_0xecbcx5['top'] + _0xecbcx5['bottom']) / 2 + _0xecbcx1
                };
                break;
            case 'right':
                _0xecbcx3 = {
                    x: _0xecbcx5['end'],
                    y: (_0xecbcx5['top'] + _0xecbcx5['bottom']) / 2 + _0xecbcx1
                };
                break;
            case 'top':
                _0xecbcx3 = {
                    x: (_0xecbcx5['start'] + _0xecbcx5['end']) / 2 + _0xecbcx1,
                    y: _0xecbcx5['top']
                };
                break;
            case 'bottom':
                _0xecbcx3 = {
                    x: (_0xecbcx5['start'] + _0xecbcx5['end']) / 2 + _0xecbcx1,
                    y: _0xecbcx5['bottom']
                };
                break
        };
        return _0xecbcx3
    },
    calcGridBaseBoxFromBoxAndDrawParams: function(_0xecbcx6, _0xecbcx5, _0xecbcx3, _0xecbcx9, _0xecbcx2, _0xecbcx1) {
        var _0xecbcx4;
        switch (_0xecbcx5) {
            case 'left':
                _0xecbcx4 = {
                    start: _0xecbcx6['start'] - Math['max'](_0xecbcx3 + _0xecbcx9, _0xecbcx2),
                    end: _0xecbcx6['end'] + _0xecbcx2,
                    top: _0xecbcx6['top'] - _0xecbcx1,
                    bottom: _0xecbcx6['bottom'] + _0xecbcx1
                };
                break;
            case 'right':
                _0xecbcx4 = {
                    start: _0xecbcx6['start'] - _0xecbcx2,
                    end: _0xecbcx6['end'] + Math['max'](_0xecbcx3 + _0xecbcx9, _0xecbcx2),
                    top: _0xecbcx6['top'] - _0xecbcx1,
                    bottom: _0xecbcx6['bottom'] + _0xecbcx1
                };
                break;
            case 'top':
                _0xecbcx4 = {
                    start: _0xecbcx6['start'] - _0xecbcx2,
                    end: _0xecbcx6['end'] + _0xecbcx2,
                    top: _0xecbcx6['top'] - Math['max'](_0xecbcx3 + _0xecbcx9, _0xecbcx1),
                    bottom: _0xecbcx6['bottom'] + _0xecbcx1
                };
                break;
            case 'bottom':
                _0xecbcx4 = {
                    start: _0xecbcx6['start'] - _0xecbcx2,
                    end: _0xecbcx6['end'] + _0xecbcx2,
                    top: _0xecbcx6['top'] - _0xecbcx1,
                    bottom: _0xecbcx6['bottom'] + Math['max'](_0xecbcx3 + _0xecbcx9, _0xecbcx1)
                };
                break;
            default:
                _0xecbcx4 = {
                    start: _0xecbcx6['start'] - _0xecbcx2,
                    end: _0xecbcx6['end'] + _0xecbcx2,
                    top: _0xecbcx6['top'] - _0xecbcx1,
                    bottom: _0xecbcx6['bottom'] + _0xecbcx1
                }
        };
        return _0xecbcx4
    },
    buildPathGrid: function(_0xecbcx1, _0xecbcxd, _0xecbcx15, _0xecbcx14, _0xecbcx3, _0xecbcx13, _0xecbcx6) {
        var _0xecbcx9, _0xecbcxb, _0xecbcx7, _0xecbcx8, _0xecbcx5, _0xecbcx2, _0xecbcx12, _0xecbcx11, _0xecbcxf, _0xecbcx4, _0xecbcxa, _0xecbcx17, _0xecbcxc, _0xecbcx10 = {},
            _0xecbcxe = [];
        _0xecbcx9 = [_0xecbcx1['start'], (_0xecbcx3 == 'left' || _0xecbcx3 == 'right') ? (_0xecbcx1['start'] + _0xecbcx1['end']) / 2 : _0xecbcx15['x'], _0xecbcx1['end'], _0xecbcxd['start'], (_0xecbcx13 == 'left' || _0xecbcx13 == 'right') ? (_0xecbcxd['start'] + _0xecbcxd['end']) / 2 : _0xecbcx14['x'], _0xecbcxd['end']];
        _0xecbcxb = [_0xecbcx1['top'], (_0xecbcx3 == 'top' || _0xecbcx3 == 'bottom') ? (_0xecbcx1['top'] + _0xecbcx1['bottom']) / 2 : _0xecbcx15['y'], _0xecbcx1['bottom'], _0xecbcxd['top'], (_0xecbcx13 == 'top' || _0xecbcx13 == 'bottom') ? (_0xecbcxd['top'] + _0xecbcxd['bottom']) / 2 : _0xecbcx14['y'], _0xecbcxd['bottom']];
        if (_0xecbcx6) {
            Ext['Array']['forEach'](_0xecbcx6, function(_0xecbcx16) {
                _0xecbcx9['push'](_0xecbcx16['start'], (_0xecbcx16['start'] + _0xecbcx16['end']) / 2, _0xecbcx16['end']);
                _0xecbcxb['push'](_0xecbcx16['top'], (_0xecbcx16['top'] + _0xecbcx16['bottom']) / 2, _0xecbcx16['bottom'])
            })
        };
        _0xecbcx9 = Ext['Array']['unique'](Ext['Array']['sort'](_0xecbcx9, Ext['Array']['numericSortFn']));
        _0xecbcxb = Ext['Array']['unique'](Ext['Array']['sort'](_0xecbcxb, Ext['Array']['numericSortFn']));
        for (_0xecbcx2 = 0, _0xecbcx11 = _0xecbcxb['length']; _0xecbcx2 < _0xecbcx11; ++_0xecbcx2) {
            _0xecbcx10[_0xecbcx2] = _0xecbcx10[_0xecbcx2] || {};
            _0xecbcx7 = _0xecbcxb[_0xecbcx2];
            for (_0xecbcx5 = 0, _0xecbcx12 = _0xecbcx9['length']; _0xecbcx5 < _0xecbcx12; ++_0xecbcx5) {
                _0xecbcx8 = _0xecbcx9[_0xecbcx5];
                _0xecbcx17 = ((_0xecbcx8 <= _0xecbcx1['start'] || _0xecbcx8 >= _0xecbcx1['end'] || _0xecbcx7 <= _0xecbcx1['top'] || _0xecbcx7 >= _0xecbcx1['bottom']) && (_0xecbcx8 <= _0xecbcxd['start'] || _0xecbcx8 >= _0xecbcxd['end'] || _0xecbcx7 <= _0xecbcxd['top'] || _0xecbcx7 >= _0xecbcxd['bottom']));
                if (_0xecbcx6) {
                    for (_0xecbcxf = 0, _0xecbcx4 = _0xecbcx6['length']; _0xecbcx17 && _0xecbcxf < _0xecbcx4; ++_0xecbcxf) {
                        _0xecbcxa = _0xecbcx6[_0xecbcxf];
                        _0xecbcx17 = (_0xecbcx8 <= _0xecbcxa['start'] || _0xecbcx8 >= _0xecbcxa['end'] || _0xecbcx7 <= _0xecbcxa['top'] || _0xecbcx7 >= _0xecbcxa['bottom'])
                    }
                };
                _0xecbcxc = {
                    distance: Math['pow'](2, 53) - 1,
                    permitted: _0xecbcx17,
                    x: _0xecbcx8,
                    y: _0xecbcx7,
                    ix: _0xecbcx5,
                    iy: _0xecbcx2
                };
                _0xecbcx10[_0xecbcx2][_0xecbcx5] = _0xecbcxc;
                _0xecbcxe['push'](_0xecbcxc)
            }
        };
        return {
            width: _0xecbcx9['length'],
            height: _0xecbcxb['length'],
            xs: _0xecbcx9,
            ys: _0xecbcxb,
            points: _0xecbcx10,
            linearPoints: _0xecbcxe
        }
    },
    convertDecartPointToGridPoint: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = Ext['Array']['indexOf'](_0xecbcx5['xs'], _0xecbcx2['x']),
            _0xecbcx3 = Ext['Array']['indexOf'](_0xecbcx5['ys'], _0xecbcx2['y']);
        return _0xecbcx5['points'][_0xecbcx3][_0xecbcx1]
    },
    findPathOnGrid: function(_0xecbcx5, _0xecbcx9, _0xecbcx2, _0xecbcx1, _0xecbcx6) {
        var _0xecbcx3 = this,
            _0xecbcx4 = false;
        if (_0xecbcx9['permitted'] && _0xecbcx2['permitted']) {
            _0xecbcx5 = _0xecbcx3['waveForward'](_0xecbcx5, _0xecbcx9, 0);
            _0xecbcx4 = _0xecbcx3['collectPath'](_0xecbcx5, _0xecbcx2, _0xecbcx6)
        };
        return _0xecbcx4
    },
    getGridPointNeighbors: function(_0xecbcx4, _0xecbcx3, _0xecbcx9) {
        var _0xecbcx5 = _0xecbcx3['ix'],
            _0xecbcx2 = _0xecbcx3['iy'],
            _0xecbcx1 = [],
            _0xecbcx6;
        if (_0xecbcx2 < _0xecbcx4['height'] - 1) {
            _0xecbcx6 = _0xecbcx4['points'][_0xecbcx2 + 1][_0xecbcx5];
            (!_0xecbcx9 || _0xecbcx9(_0xecbcx6)) && _0xecbcx1['push'](_0xecbcx6)
        };
        if (_0xecbcx2 > 0) {
            _0xecbcx6 = _0xecbcx4['points'][_0xecbcx2 - 1][_0xecbcx5];
            (!_0xecbcx9 || _0xecbcx9(_0xecbcx6)) && _0xecbcx1['push'](_0xecbcx6)
        };
        if (_0xecbcx5 < _0xecbcx4['width'] - 1) {
            _0xecbcx6 = _0xecbcx4['points'][_0xecbcx2][_0xecbcx5 + 1];
            (!_0xecbcx9 || _0xecbcx9(_0xecbcx6)) && _0xecbcx1['push'](_0xecbcx6)
        };
        if (_0xecbcx5 > 0) {
            _0xecbcx6 = _0xecbcx4['points'][_0xecbcx2][_0xecbcx5 - 1];
            (!_0xecbcx9 || _0xecbcx9(_0xecbcx6)) && _0xecbcx1['push'](_0xecbcx6)
        };
        return _0xecbcx1
    },
    waveForward: function(_0xecbcx2, _0xecbcx4, _0xecbcx3) {
        var _0xecbcx8 = this,
            _0xecbcxe, _0xecbcx6, _0xecbcx9, _0xecbcx11, _0xecbcx1, _0xecbcx5, _0xecbcxd, _0xecbcx7;
        _0xecbcx4['distance'] = _0xecbcx3;
        _0xecbcxe = _0xecbcx8['getGridPointNeighbors'](_0xecbcx2, _0xecbcx4, function(_0xecbcxa) {
            return _0xecbcxa['permitted'] && (_0xecbcxa['distance'] > _0xecbcx3 + 1)
        });
        for (_0xecbcx6 = 0, _0xecbcx9 = _0xecbcxe['length']; _0xecbcx6 < _0xecbcx9; ++_0xecbcx6) {
            _0xecbcx11 = _0xecbcxe[_0xecbcx6];
            _0xecbcx11['distance'] = _0xecbcx3 + 1
        };
        for (_0xecbcx6 = 0, _0xecbcx9 = _0xecbcxe['length']; _0xecbcx6 < _0xecbcx9; ++_0xecbcx6) {
            _0xecbcx11 = _0xecbcxe[_0xecbcx6];
            _0xecbcx8['waveForward'](_0xecbcx2, _0xecbcx11, _0xecbcx3 + 1)
        };
        return _0xecbcx2
    },
    collectPath: function(_0xecbcx1, _0xecbcx2, _0xecbcx9) {
        var _0xecbcx4 = this,
            _0xecbcx5 = true,
            _0xecbcxa, _0xecbcx7, _0xecbcx6, _0xecbcx3, _0xecbcx8 = [];
        while (_0xecbcx5 && _0xecbcx2['distance']) {
            _0xecbcxa = _0xecbcx4['getGridPointNeighbors'](_0xecbcx1, _0xecbcx2, function(_0xecbcxd) {
                return _0xecbcxd['permitted'] && (_0xecbcxd['distance'] == _0xecbcx2['distance'] - 1)
            });
            _0xecbcx5 = _0xecbcxa['length'] > 0;
            if (_0xecbcx5) {
                _0xecbcxa = Ext['Array']['sort'](_0xecbcxa, function(_0xecbcx11, _0xecbcxd) {
                    var _0xecbcxb, _0xecbcxc;
                    _0xecbcxb = _0xecbcx11['ix'] - _0xecbcx2['ix'];
                    _0xecbcxc = _0xecbcx11['iy'] - _0xecbcx2['iy'];
                    var _0xecbcxf = (((_0xecbcx9 == 'left' || _0xecbcx9 == 'right') && _0xecbcxc === 0) || ((_0xecbcx9 == 'top' || _0xecbcx9 == 'bottom') && _0xecbcxb === 0)) ? -1 : 1;
                    _0xecbcxb = _0xecbcxd['ix'] - _0xecbcx2['ix'];
                    _0xecbcxc = _0xecbcxd['iy'] - _0xecbcx2['iy'];
                    var _0xecbcxe = (((_0xecbcx9 == 'left' || _0xecbcx9 == 'right') && _0xecbcxc === 0) || ((_0xecbcx9 == 'top' || _0xecbcx9 == 'bottom') && _0xecbcxb === 0)) ? -1 : 1;
                    if (_0xecbcxf > _0xecbcxe) {
                        return 1
                    } else {
                        if (_0xecbcxf < _0xecbcxe) {
                            return -1
                        } else {
                            if (_0xecbcxf == _0xecbcxe) {
                                return _0xecbcx11['y'] > _0xecbcxd['y'] ? -1 : 1
                            }
                        }
                    }
                });
                _0xecbcx7 = _0xecbcxa[0];
                _0xecbcx8['push']({
                    x1: _0xecbcx7['x'],
                    y1: _0xecbcx7['y'],
                    x2: _0xecbcx2['x'],
                    y2: _0xecbcx2['y']
                });
                _0xecbcx6 = _0xecbcx7['ix'] - _0xecbcx2['ix'];
                _0xecbcx3 = _0xecbcx7['iy'] - _0xecbcx2['iy'];
                switch (true) {
                    case !_0xecbcx3 && _0xecbcx6 > 0:
                        _0xecbcx9 = 'left';
                        break;
                    case !_0xecbcx3 && _0xecbcx6 < 0:
                        _0xecbcx9 = 'right';
                        break;
                    case !_0xecbcx6 && _0xecbcx3 > 0:
                        _0xecbcx9 = 'top';
                        break;
                    case !_0xecbcx6 && _0xecbcx3 < 0:
                        _0xecbcx9 = 'bottom';
                        break
                };
                _0xecbcx2 = _0xecbcx7
            }
        };
        return _0xecbcx5 && _0xecbcx8['reverse']() || false
    },
    prependPathWithArrowStaffSegment: function(_0xecbcx4, _0xecbcx5, _0xecbcx6, _0xecbcx1) {
        var _0xecbcx2, _0xecbcx3;
        if (_0xecbcx4['length'] > 0) {
            _0xecbcx3 = _0xecbcx4[0];
            _0xecbcx2 = {
                x2: _0xecbcx3['x1'],
                y2: _0xecbcx3['y1']
            };
            switch (_0xecbcx1) {
                case 'left':
                    _0xecbcx2['x1'] = _0xecbcx5['x'] - _0xecbcx6;
                    _0xecbcx2['y1'] = _0xecbcx3['y1'];
                    break;
                case 'right':
                    _0xecbcx2['x1'] = _0xecbcx5['x'] + _0xecbcx6;
                    _0xecbcx2['y1'] = _0xecbcx3['y1'];
                    break;
                case 'top':
                    _0xecbcx2['x1'] = _0xecbcx3['x1'];
                    _0xecbcx2['y1'] = _0xecbcx5['y'] - _0xecbcx6;
                    break;
                case 'bottom':
                    _0xecbcx2['x1'] = _0xecbcx3['x1'];
                    _0xecbcx2['y1'] = _0xecbcx5['y'] + _0xecbcx6;
                    break
            };
            _0xecbcx4['unshift'](_0xecbcx2)
        };
        return _0xecbcx4
    },
    appendPathWithArrowStaffSegment: function(_0xecbcx4, _0xecbcx5, _0xecbcx1, _0xecbcx6) {
        var _0xecbcx3, _0xecbcx2;
        if (_0xecbcx4['length'] > 0) {
            _0xecbcx2 = _0xecbcx4[_0xecbcx4['length'] - 1];
            _0xecbcx3 = {
                x1: _0xecbcx2['x2'],
                y1: _0xecbcx2['y2']
            };
            switch (_0xecbcx6) {
                case 'left':
                    _0xecbcx3['x2'] = _0xecbcx5['x'] - _0xecbcx1;
                    _0xecbcx3['y2'] = _0xecbcx2['y2'];
                    break;
                case 'right':
                    _0xecbcx3['x2'] = _0xecbcx5['x'] + _0xecbcx1;
                    _0xecbcx3['y2'] = _0xecbcx2['y2'];
                    break;
                case 'top':
                    _0xecbcx3['x2'] = _0xecbcx2['x2'];
                    _0xecbcx3['y2'] = _0xecbcx5['y'] - _0xecbcx1;
                    break;
                case 'bottom':
                    _0xecbcx3['x2'] = _0xecbcx2['x2'];
                    _0xecbcx3['y2'] = _0xecbcx5['y'] + _0xecbcx1;
                    break
            };
            _0xecbcx4['push'](_0xecbcx3)
        };
        return _0xecbcx4
    },
    optimizePath: function(_0xecbcx3) {
        var _0xecbcx1 = [],
            _0xecbcx2, _0xecbcx5;
        if (_0xecbcx3['length'] > 0) {
            _0xecbcx2 = _0xecbcx3['shift']();
            _0xecbcx1['push'](_0xecbcx2);
            while (_0xecbcx3['length'] > 0) {
                _0xecbcx5 = _0xecbcx3['shift']();
                if (_0xecbcx2['x1'] == _0xecbcx5['x1'] && _0xecbcx2['y1'] == _0xecbcx5['y1'] && _0xecbcx2['x2'] == _0xecbcx5['x2'] && _0xecbcx2['y2'] == _0xecbcx5['y2']) {
                    _0xecbcx2 = _0xecbcx5
                } else {
                    if ((_0xecbcx2['y1'] - _0xecbcx2['y2'] === 0) && (_0xecbcx5['y1'] - _0xecbcx5['y2'] === 0)) {
                        _0xecbcx2['x2'] = _0xecbcx5['x2']
                    } else {
                        if ((_0xecbcx2['x1'] - _0xecbcx2['x2'] === 0) && (_0xecbcx5['x1'] - _0xecbcx5['x2'] === 0)) {
                            _0xecbcx2['y2'] = _0xecbcx5['y2']
                        } else {
                            _0xecbcx1['push'](_0xecbcx5);
                            _0xecbcx2 = _0xecbcx5
                        }
                    }
                }
            }
        };
        return _0xecbcx1
    },
    normalizeSide: function(_0xecbcx1) {
        return this['self']['sideToSide'][_0xecbcx1] || _0xecbcx1
    },
    statics: {
        sideToSide: {
            l: 'left',
            r: 'right',
            t: 'top',
            b: 'bottom'
        }
    }
});
Ext.define('Ext.ux.Scheduler.template.Dependency', {
    extend: 'Ext.XTemplate',
    disableFormats: true,
    rtl: null,
    text: '<tpl if="startArrow"><div style="__SIDE__:{startArrow.side}px;top:{startArrow.top}px" class="sch-dependency sch-dependency-arrow sch-dependency-start-arrow sch-dependency-arrow-{startArrow.dir} {lineCls} {[ this.getSuffixedCls(values.cls, "-arrow") ]} {[ values.highlighted || "" ]}" <tpl if="dependencyId">data-sch-dependency-id="{[values.dependencyId]}"</tpl>></div></tpl><tpl for="segments"><div class="sch-dependency sch-dependency-line sch-dependency-line-{dir} {parent.lineCls} {[ parent.highlighted || "" ]} {[ this.getSuffixedCls(parent.cls, "-line") ]}" style="__SIDE__:{side}px;top:{top}px;<tpl if="width !== null && width !== undefined">width:{width}px;</tpl><tpl if="height !== null && height !== undefined">height:{height}px</tpl>" <tpl if="parent.dependencyId">data-sch-dependency-id="{parent.dependencyId}"</tpl>></div></tpl><tpl if="endArrow"><div style="__SIDE__:{endArrow.side}px;top:{endArrow.top}px" class="sch-dependency sch-dependency-arrow sch-dependency-end-arrow sch-dependency-arrow-{endArrow.dir} {lineCls} {[ this.getSuffixedCls(values.cls, "-arrow") ]} {[ values.highlighted || "" ]}" <tpl if="dependencyId">data-sch-dependency-id="{dependencyId}"</tpl>></div></tpl>',
    constructor: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        Ext.apply(_0xecbcx2, _0xecbcx1);
        _0xecbcx2['text'] = _0xecbcx2['text']['replace'](/__SIDE__/g, _0xecbcx2['rtl'] ? 'right' : 'left');
        _0xecbcx2['callParent']([_0xecbcx2['text']])
    },
    getSuffixedCls: function(_0xecbcx2, _0xecbcx5) {
        var _0xecbcx1 = '';
        if (_0xecbcx2 && _0xecbcx2['indexOf'](' ') != -1) {
            _0xecbcx1 = _0xecbcx2['replace'](/^\s*(.*)\s*$/, '$1')['split'](/\s+/).join(_0xecbcx5 + ' ') + _0xecbcx5
        } else {
            if (_0xecbcx2) {
                _0xecbcx1 = _0xecbcx2 + _0xecbcx5
            }
        };
        return _0xecbcx1
    }
});
Ext.define('Ext.ux.Scheduler.view.dependency.Painter', function(_0xecbcx1) {
    function _0xecbcx2(_0xecbcx6) {
        var _0xecbcx9 = false;
        if (_0xecbcx6['startArrowMargin'] > 0 || _0xecbcx6['endArrowMargin'] > 0) {
            _0xecbcx6['startArrowMargin'] = _0xecbcx6['endArrowMargin'] = 0;
            _0xecbcx9 = true
        };
        return _0xecbcx9 ? _0xecbcx6 : _0xecbcx9
    }

    function _0xecbcx3(_0xecbcx6) {
        var _0xecbcx9 = false;
        if (_0xecbcx6.hasOwnProperty('startHorizontalMargin') && _0xecbcx6['startHorizontalMargin'] > 2) {
            _0xecbcx6['startHorizontalMargin'] = Math['round'](_0xecbcx6['startHorizontalMargin'] / 2);
            _0xecbcx9 = true
        };
        if (_0xecbcx6.hasOwnProperty('startVerticalMargin') && _0xecbcx6['startVerticalMargin'] > 2) {
            _0xecbcx6['startVerticalMargin'] = Math['round'](_0xecbcx6['startVerticalMargin'] / 2);
            _0xecbcx9 = true
        };
        if (_0xecbcx6.hasOwnProperty('endHorizontalMargin') && _0xecbcx6['endHorizontalMargin'] > 2) {
            _0xecbcx6['endHorizontalMargin'] = Math['round'](_0xecbcx6['endHorizontalMargin'] / 2);
            _0xecbcx9 = true
        };
        if (_0xecbcx6.hasOwnProperty('endVerticalMargin') && _0xecbcx6['endVerticalMargin'] > 2) {
            _0xecbcx6['endVerticalMargin'] = Math['round'](_0xecbcx6['endVerticalMargin'] / 2);
            _0xecbcx9 = true
        };
        return _0xecbcx9 ? _0xecbcx6 : _0xecbcx9
    }

    function _0xecbcx5(_0xecbcx6) {
        var _0xecbcx9 = false;
        if (_0xecbcx6['startArrowSize'] > 0 || _0xecbcx6['endArrowSize'] > 0) {
            _0xecbcx6['startArrowSize'] = _0xecbcx6['endArrowSize'] = 0;
            _0xecbcx9 = true
        };
        return _0xecbcx9 ? _0xecbcx6 : _0xecbcx9
    }
    var _0xecbcx4 = [_0xecbcx2, _0xecbcx3, _0xecbcx3, _0xecbcx3, _0xecbcx5];
    return {
        alias: 'schdependencypainter.default',
        mixins: ['Ext.mixin.Factoryable'],
        requires: ['Ext.ux.Scheduler.util.RectangularPathFinder', 'Ext.ux.Scheduler.template.Dependency'],
        uses: ['Ext.Array', 'Ext.XTemplate', 'Ext.dom.Query', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.util.RectangularPathFinder', 'Ext.ux.Scheduler.template.Dependency'],
        config: {
            selectedCls: 'sch-dependency-selected',
            cls: '',
            rtl: false,
            lineTpl: null,
            canvasCls: null,
            pathFinderConfig: null,
            realLineThickness: null,
            useDependencyRowIntersectionCache: true
        },
        pathFinder: null,
        dependencyIdAttr: 'data-sch-dependency-id',
        constructor: function(_0xecbcx6) {
            var _0xecbcx9 = this;
            _0xecbcx9['initConfig'](_0xecbcx6);
            _0xecbcx9['pathFinder'] = _0xecbcx9['createPathFinder'](_0xecbcx9['getPathFinderConfig']());
            if (!_0xecbcx9['getLineTpl']()) {
                _0xecbcx9['setLineTpl'](new Ext.ux.Scheduler['template'].Dependency({
                    rtl: _0xecbcx9['getRtl']()
                }))
            };
            _0xecbcx9['resetRowIntersectionCache']()
        },
        clone: function() {
            var _0xecbcx6 = this;
            return new _0xecbcx6['self'](_0xecbcx6['getConfig']())
        },
        applyLineTpl: function(_0xecbcx6) {
            return _0xecbcx6 instanceof Ext['XTemplate'] ? _0xecbcx6 : new Ext.XTemplate(_0xecbcx6)
        },
        updatePathFinderConfig: function(_0xecbcx6) {
            var _0xecbcx9 = this;
            if (_0xecbcx9['pathFinder']) {
                if (_0xecbcx6 && 'type' in _0xecbcx6 && _0xecbcx6['type'] !== _0xecbcx9['pathFinder']['type']) {
                    Ext['destroy'](_0xecbcx9['pathFinder']);
                    _0xecbcx9['pathFinder'] = _0xecbcx9['createPathFinder'](_0xecbcx6)
                } else {
                    _0xecbcx9['pathFinder']['setConfig'](_0xecbcx6)
                }
            }
        },
        createPathFinder: function(_0xecbcx6) {
            return Ext.ux.Scheduler['util']['RectangularPathFinder']['create'](_0xecbcx6)
        },
        getCanvasSpecification: function() {
            return {
                tag: 'div',
                role: 'presentation',
                cls: this['getCanvasCls']()
            }
        },
        paint: function(_0xecbcx11, _0xecbcxa, _0xecbcxd, _0xecbcx9) {
            var _0xecbcx8 = this,
                _0xecbcxe = _0xecbcx8['getUseDependencyRowIntersectionCache']() ? _0xecbcx8['filterByRowIntersections'](_0xecbcx11, _0xecbcxd) : _0xecbcxd,
                _0xecbcx6 = _0xecbcx8['generatePaintMarkup'](_0xecbcx11, _0xecbcxe);
            _0xecbcxa = Ext['fly'](_0xecbcxa);
            if (_0xecbcx9) {
                var _0xecbcx7 = document['createElement']('div');
                _0xecbcx7['innerHTML'] = _0xecbcx6;
                _0xecbcxa['syncContent'](_0xecbcx7)
            } else {
                _0xecbcxa['insertHtml']('beforeEnd', _0xecbcx6)
            }
        },
        generatePaintMarkup: function(_0xecbcxa, _0xecbcx7) {
            var _0xecbcx9 = this,
                _0xecbcx6 = _0xecbcx9['getLineDefsForDependencies'](_0xecbcxa, _0xecbcx7);
            if (!Ext['isArray'](_0xecbcx6)) {
                _0xecbcx6 = [_0xecbcx6]
            };
            return Ext['Array']['map'](_0xecbcx6, function(_0xecbcxd) {
                var _0xecbcx8;
                _0xecbcxd['path'] = _0xecbcx9['findPath'](_0xecbcxd);
                _0xecbcx8 = _0xecbcxd['path'] && _0xecbcx9['getLineTplData'](_0xecbcxd);
                return _0xecbcx8 && _0xecbcx9['getLineTpl']()['apply'](_0xecbcx8) || ''
            }).join('')
        },
        isDependencyElement: function(_0xecbcx6) {
            return Ext['fly'](_0xecbcx6)['is']('.sch-dependency')
        },
        getElementsForDependency: function(_0xecbcx6, _0xecbcx7) {
            var _0xecbcxa = Ext['dom']['Query'],
                _0xecbcx9 = this;
            if (_0xecbcx7 && !Ext['isArray'](_0xecbcx7)) {
                _0xecbcx7 = [_0xecbcx7]
            };
            return new Ext['dom'].CompositeElementLite(Ext['Array']['reduce'](_0xecbcx7 || [], function(_0xecbcx8, _0xecbcxd) {
                return _0xecbcx8['concat'](_0xecbcxa['select']('[' + _0xecbcx9['dependencyIdAttr'] + '="' + _0xecbcxd['internalId'] + '"]', Ext['getDom'](_0xecbcx6)))
            }, []))
        },
        getDependencyElements: function(_0xecbcx9) {
            var _0xecbcx6 = Ext['getDom'](_0xecbcx9);
            return new Ext['dom'].CompositeElementLite(_0xecbcx6 && _0xecbcx6['childNodes'] || [])
        },
        getElementDependencyInternalId: function(_0xecbcx6) {
            return Ext['fly'](_0xecbcx6)['getAttribute'](this['dependencyIdAttr'])
        },
        highlightDependency: function(_0xecbcx7, _0xecbcx9, _0xecbcx6) {
            var _0xecbcxa = this;
            _0xecbcxa['getElementsForDependency'](_0xecbcx7, _0xecbcx9)['addCls'](_0xecbcx6 || _0xecbcxa['getSelectedCls']())
        },
        unhighlightDependency: function(_0xecbcx7, _0xecbcx9, _0xecbcx6) {
            var _0xecbcxa = this;
            _0xecbcxa['getElementsForDependency'](_0xecbcx7, _0xecbcx9)['removeCls'](_0xecbcx6 || _0xecbcxa['getSelectedCls']())
        },
        getSelectedDependencyElements: function(_0xecbcx6) {
            var _0xecbcx9 = this;
            return Ext['fly'](_0xecbcx6)['select']('.' + _0xecbcx9['getSelectedCls']())
        },
        clearSelectedDependencies: function(_0xecbcx6) {
            var _0xecbcx9 = this;
            _0xecbcx9['getDependencyElements'](_0xecbcx6)['removeCls'](_0xecbcx9['getSelectedCls']())
        },
        findPath: function(_0xecbcx6) {
            var _0xecbcx9;
            _0xecbcx9 = this['pathFinder']['findPath'](_0xecbcx6, _0xecbcx4);
            if (!_0xecbcx9) {
                if (_0xecbcx6['startBox']['bottom'] - _0xecbcx6['startBox']['top'] === 0 || _0xecbcx6['endBox']['bottom'] - _0xecbcx6['endBox']['top'] === 0) {
                    throw new Error('Zero height dependency line boxes detected')
                }
            };
            return _0xecbcx9
        },
        getLineTplData: function(_0xecbcx6) {
            var _0xecbcx8 = this,
                _0xecbcx11, _0xecbcx7, _0xecbcxe, _0xecbcxd, _0xecbcxc;
            _0xecbcxc = _0xecbcx6['path'];
            if (!_0xecbcx6['startBox']['rendered'] && !_0xecbcx6['endBox']['rendered']) {
                for (var _0xecbcx9 = _0xecbcxc['length'] - 1; _0xecbcx9 >= 0; _0xecbcx9--) {
                    var _0xecbcxf = _0xecbcxc[_0xecbcx9];
                    if (_0xecbcxf['x1'] === _0xecbcxf['x2']) {
                        _0xecbcxc = [_0xecbcxf];
                        _0xecbcx6['startArrowSize'] = _0xecbcx6['endArrowSize'] = 0;
                        break
                    }
                }
            };
            _0xecbcx11 = _0xecbcx8['getRtl']();
            _0xecbcx7 = _0xecbcx8['getRealLineThickness']();
            _0xecbcxe = _0xecbcxc['length'] && _0xecbcxc[0];
            _0xecbcxd = _0xecbcxc['length'] && _0xecbcxc[_0xecbcxc['length'] - 1];
            _0xecbcxc = {
                cls: _0xecbcx6['cls'] || '',
                lineCls: _0xecbcx6['lineCls'] || '',
                dependencyId: _0xecbcx6['dependencyId'] || '',
                highlighted: _0xecbcx6['highlighted'],
                segments: Ext['Array']['map'](_0xecbcxc, function(_0xecbcx10) {
                    var _0xecbcxb = _0xecbcx8['getSegmentDir'](_0xecbcx10),
                        _0xecbcxa;
                    if (_0xecbcxb == 'horizontal') {
                        _0xecbcxa = {
                            width: Math['abs'](_0xecbcx10['x1'] - _0xecbcx10['x2']) + 1,
                            height: _0xecbcx7,
                            top: Math['min'](_0xecbcx10['y1'], _0xecbcx10['y2']),
                            side: Math['min'](_0xecbcx10['x1'], _0xecbcx10['x2']),
                            dir: _0xecbcxb
                        }
                    } else {
                        _0xecbcxa = {
                            height: Math['abs'](_0xecbcx10['y1'] - _0xecbcx10['y2']) + 1,
                            width: _0xecbcx7,
                            top: Math['min'](_0xecbcx10['y1'], _0xecbcx10['y2']),
                            side: Math['min'](_0xecbcx10['x1'], _0xecbcx10['x2']),
                            dir: _0xecbcxb
                        }
                    };
                    return _0xecbcxa
                }),
                startArrow: _0xecbcx6['startArrowSize'] && {
                    side: _0xecbcxe['x1'],
                    top: _0xecbcxe['y1'],
                    dir: _0xecbcx8['convertSideToDir'](_0xecbcx6['startSide'], _0xecbcx11)
                },
                endArrow: _0xecbcx6['endArrowSize'] && {
                    side: _0xecbcxd['x2'],
                    top: _0xecbcxd['y2'],
                    dir: _0xecbcx8['convertSideToDir'](_0xecbcx6['endSide'], _0xecbcx11)
                },
                realLineThickness: _0xecbcx8['getRealLineThickness']()
            };
            return _0xecbcxc
        },
        isDependencyInTimeSpan: function(_0xecbcx9, _0xecbcx6, _0xecbcxa) {
            var _0xecbcx7 = _0xecbcx9['getDateRange']();
            return _0xecbcx7 && (!_0xecbcx6 || !_0xecbcxa || Ext.ux.Scheduler['util']['Date']['intersectSpans'](_0xecbcx7['start'], _0xecbcx7['end'], _0xecbcx6, _0xecbcxa))
        },
        addToRowIntersectionCacheIfNotPresent: function(_0xecbcx8, _0xecbcxa) {
            var _0xecbcx9 = this,
                _0xecbcxd = _0xecbcx8['getViewStartDate'](),
                _0xecbcx7 = _0xecbcx8['getViewEndDate'](),
                _0xecbcx6 = _0xecbcx9['dependencyStore']['count']() === _0xecbcxa['length'];
            if (_0xecbcx9['allInRowIntersectionCache']) {
                return
            };
            Ext['Array']['each'](_0xecbcxa, function(_0xecbcxf) {
                if (_0xecbcx6 || !_0xecbcx9['isInRowIntersectionCache'](_0xecbcxf)) {
                    var _0xecbcx10 = _0xecbcxf['getSourceEvent'](),
                        _0xecbcx17 = _0xecbcxf['getTargetEvent']();
                    if (_0xecbcx9['isDependencyInTimeSpan'](_0xecbcxf, _0xecbcxd, _0xecbcx7)) {
                        var _0xecbcx11 = _0xecbcx9['getIndexForCache'](_0xecbcx8, _0xecbcx10),
                            _0xecbcxe = _0xecbcx9['getIndexForCache'](_0xecbcx8, _0xecbcx17),
                            _0xecbcx15 = Math['min'](_0xecbcx11, _0xecbcxe),
                            _0xecbcxb = Math['max'](_0xecbcx11, _0xecbcxe);
                        if (_0xecbcx15 > -1 && _0xecbcxb > -1) {
                            _0xecbcx15 = Math['floor'](_0xecbcx15 / 10);
                            _0xecbcxb = Math['floor'](_0xecbcxb / 10);
                            for (var _0xecbcxc = _0xecbcx15; _0xecbcxc <= _0xecbcxb; _0xecbcxc++) {
                                if (!_0xecbcx9['rowIntersectionCache'][_0xecbcxc]) {
                                    _0xecbcx9['rowIntersectionCache'][_0xecbcxc] = []
                                };
                                _0xecbcx9['rowIntersectionCache'][_0xecbcxc]['push'](_0xecbcxf);
                                _0xecbcx9['cachedDependencies'][_0xecbcxf['internalId']] = true
                            }
                        }
                    }
                }
            });
            if (!_0xecbcx6) {
                _0xecbcx6 = Object['keys'](_0xecbcx9['cachedDependencies'])['length'] === _0xecbcx9['dependencyStore']['count']()
            };
            if (_0xecbcx6) {
                _0xecbcx9['allInRowIntersectionCache'] = true
            }
        },
        getIndexForCache: function(_0xecbcx7, _0xecbcx6) {
            if ('getResource' in _0xecbcx6) {
                var _0xecbcx9 = _0xecbcx6['getResource']();
                if (_0xecbcx9) {
                    return _0xecbcx7['getResourceStore']()['indexOf'](_0xecbcx9)
                };
                if (!_0xecbcx9 && _0xecbcx6['resourceIdField'] in _0xecbcx6['data']) {
                    return -1
                };
                throw new Error('Not implemented for scheduler with multi assignment')
            } else {
                if ('getTaskStore' in _0xecbcx6) {
                    return _0xecbcx6['getTaskStore']()['indexOf'](_0xecbcx6)
                }
            }
        },
        resetRowIntersectionCache: function(_0xecbcx6) {
            this['allInRowIntersectionCache'] = false;
            if (!_0xecbcx6) {
                this['rowIntersectionCache'] = {};
                this['cachedDependencies'] = {}
            }
        },
        isInRowIntersectionCache: function(_0xecbcx6) {
            return !!this['cachedDependencies'][_0xecbcx6['internalId']]
        },
        filterByRowIntersections: function(_0xecbcx8, _0xecbcxd) {
            var _0xecbcxe = this;
            if (!Ext['isArray'](_0xecbcxd)) {
                _0xecbcxd = [_0xecbcxd]
            };
            if (!_0xecbcxd['length']) {
                return []
            };
            _0xecbcxe['addToRowIntersectionCacheIfNotPresent'](_0xecbcx8, _0xecbcxd);
            var _0xecbcx11 = [],
                _0xecbcxc = _0xecbcx8['getNodes'](),
                _0xecbcx7 = _0xecbcx8['indexOf'](_0xecbcxc[0]),
                _0xecbcxf = _0xecbcx8['indexOf'](_0xecbcxc[_0xecbcxc['length'] - 1]),
                _0xecbcx6;
            _0xecbcx7 = Math['floor'](_0xecbcx7 / 10);
            _0xecbcxf = Math['floor'](_0xecbcxf / 10);
            for (var _0xecbcx9 = _0xecbcx7; _0xecbcx9 <= _0xecbcxf; _0xecbcx9++) {
                _0xecbcx6 = _0xecbcxe['rowIntersectionCache'][_0xecbcx9];
                _0xecbcx6 && _0xecbcx11['push']['apply'](_0xecbcx11, _0xecbcx6)
            };
            return Ext['Array']['unique'](_0xecbcx11)
        },
        getLineDefsForDependencies: function(_0xecbcx7, _0xecbcx8) {
            var _0xecbcx9 = Ext['Array'],
                _0xecbcxd = this,
                _0xecbcx6 = {},
                _0xecbcxe = _0xecbcx7['getViewStartDate'](),
                _0xecbcx11 = _0xecbcx7['getViewEndDate'](),
                _0xecbcxa;
            if (!Ext['isArray'](_0xecbcx8)) {
                _0xecbcx8 = [_0xecbcx8]
            };
            if (!_0xecbcx8['length']) {
                return []
            };
            var _0xecbcxf = _0xecbcx9['reduce'](_0xecbcx8 || [], function(_0xecbcxc, _0xecbcx17) {
                var _0xecbcx15 = _0xecbcx17['getSourceEvent'](),
                    _0xecbcx14 = _0xecbcx17['getTargetEvent'](),
                    _0xecbcxb, _0xecbcx10;
                if (_0xecbcxd['isDependencyInTimeSpan'](_0xecbcx17, _0xecbcxe, _0xecbcx11)) {
                    _0xecbcxa = _0xecbcx15['internalId'];
                    if (!_0xecbcx6[_0xecbcxa]) {
                        _0xecbcxb = _0xecbcxd['getItemBox'](_0xecbcx7, _0xecbcx15) || [];
                        if (!Ext['isArray'](_0xecbcxb)) {
                            _0xecbcxb = [_0xecbcxb]
                        };
                        _0xecbcx6[_0xecbcxa] = _0xecbcxb
                    } else {
                        _0xecbcxb = _0xecbcx6[_0xecbcxa]
                    };
                    _0xecbcxa = _0xecbcx14['internalId'];
                    if (!_0xecbcx6[_0xecbcxa]) {
                        _0xecbcx10 = _0xecbcxd['getItemBox'](_0xecbcx7, _0xecbcx14) || [];
                        if (!Ext['isArray'](_0xecbcx10)) {
                            _0xecbcx10 = [_0xecbcx10]
                        };
                        _0xecbcx6[_0xecbcxa] = _0xecbcx10
                    } else {
                        _0xecbcx10 = _0xecbcx6[_0xecbcxa]
                    };
                    _0xecbcxc = _0xecbcx9['reduce'](_0xecbcxb, function(_0xecbcx12, _0xecbcx16, _0xecbcx13) {
                        return _0xecbcx9['reduce'](_0xecbcx10, function(_0xecbcx18, _0xecbcx22, _0xecbcx24) {
                            if (_0xecbcx16 && _0xecbcx22 && (_0xecbcx16['rendered'] || _0xecbcx22['rendered'] || _0xecbcx16['relPos'] != _0xecbcx22['relPos'])) {
                                _0xecbcx18['push'](_0xecbcxd['createLineDef'](_0xecbcx7, _0xecbcx17, _0xecbcx15, _0xecbcx14, _0xecbcx16, _0xecbcx22, null))
                            };
                            return _0xecbcx18
                        }, _0xecbcx12)
                    }, _0xecbcxc)
                };
                return _0xecbcxc
            }, []);
            return _0xecbcxf
        },
        getItemBox: function(_0xecbcx9, _0xecbcx6) {
            return _0xecbcx9['getItemBox'](_0xecbcx6)
        },
        createLineDef: function(_0xecbcxf, _0xecbcx13, _0xecbcx16, _0xecbcx1a, _0xecbcx6, _0xecbcx10, _0xecbcxc) {
            var _0xecbcx22 = _0xecbcx13['self']['Type'],
                _0xecbcx19 = this,
                _0xecbcxe = _0xecbcx13['getType'](),
                _0xecbcx14 = _0xecbcx19['pathFinder']['getHorizontalMargin'](),
                _0xecbcx23 = _0xecbcx19['pathFinder']['getVerticalMargin'](),
                _0xecbcxd = _0xecbcx13['getBidirectional'](),
                _0xecbcx24 = _0xecbcxd ? _0xecbcx19['pathFinder']['getStartArrowMargin']() : 0,
                _0xecbcx1b = _0xecbcxd ? _0xecbcx19['pathFinder']['getStartArrowSize']() : 0,
                _0xecbcx9 = _0xecbcx19['pathFinder']['getEndArrowMargin'](),
                _0xecbcxa = _0xecbcx19['pathFinder']['getEndArrowSize'](),
                _0xecbcx17 = _0xecbcx13['getFromSide'](),
                _0xecbcx1c = _0xecbcx13['getToSide']();
            if (!_0xecbcx17) {
                switch (true) {
                    case _0xecbcxe == _0xecbcx22['StartToEnd']:
                        _0xecbcx17 = _0xecbcxf['getConnectorStartSide'](_0xecbcx16);
                        break;
                    case _0xecbcxe == _0xecbcx22['StartToStart']:
                        _0xecbcx17 = _0xecbcxf['getConnectorStartSide'](_0xecbcx16);
                        break;
                    case _0xecbcxe == _0xecbcx22['EndToStart']:
                        _0xecbcx17 = _0xecbcxf['getConnectorEndSide'](_0xecbcx16);
                        break;
                    case _0xecbcxe == _0xecbcx22['EndToEnd']:
                        _0xecbcx17 = _0xecbcxf['getConnectorEndSide'](_0xecbcx16);
                        break;
                    default:
                        throw new Error('Invalid dependency type: ' + _0xecbcx13['getType']())
                }
            };
            if (!_0xecbcx1c) {
                switch (true) {
                    case _0xecbcxe == _0xecbcx22['StartToEnd']:
                        _0xecbcx1c = _0xecbcxf['getConnectorEndSide'](_0xecbcx1a);
                        break;
                    case _0xecbcxe == _0xecbcx22['StartToStart']:
                        _0xecbcx1c = _0xecbcxf['getConnectorStartSide'](_0xecbcx1a);
                        break;
                    case _0xecbcxe == _0xecbcx22['EndToStart']:
                        _0xecbcx1c = _0xecbcxf['getConnectorStartSide'](_0xecbcx1a);
                        break;
                    case _0xecbcxe == _0xecbcx22['EndToEnd']:
                        _0xecbcx1c = _0xecbcxf['getConnectorEndSide'](_0xecbcx1a);
                        break;
                    default:
                        throw new Error('Invalid dependency type: ' + _0xecbcx13['getType']())
                }
            };
            switch (true) {
                case (_0xecbcx17 == 'left' || _0xecbcx17 == 'right') && (_0xecbcx1c == 'left' || _0xecbcx1c == 'right'):
                    _0xecbcx23 = 2;
                    _0xecbcx14 = 5;
                    break;
                case (_0xecbcx17 == 'top' || _0xecbcx17 == 'bottom') && (_0xecbcx1c == 'top' || _0xecbcx1c == 'bottom'):
                    _0xecbcx23 = 7;
                    _0xecbcx14 = 2;
                    break
            };
            var _0xecbcx11 = Number['MAX_VALUE'];
            var _0xecbcx15 = {
                from: (_0xecbcx6['start'] + _0xecbcx6['end']) / 2,
                to: (_0xecbcx10['start'] + _0xecbcx10['end']) / 2
            };
            var _0xecbcx8 = {
                from: (_0xecbcx6['top'] + _0xecbcx6['bottom']) / 2,
                to: (_0xecbcx10['top'] + _0xecbcx10['bottom']) / 2
            };
            if ((_0xecbcx17 === 'top' && _0xecbcx1c === 'bottom' || _0xecbcx17 === 'bottom' && _0xecbcx1c === 'top') && _0xecbcx15['from'] === _0xecbcx15['to']) {
                _0xecbcx11 = Math['abs'](_0xecbcx6[_0xecbcx17] - _0xecbcx10[_0xecbcx1c])
            } else {
                if ((_0xecbcx17 === 'left' && _0xecbcx1c === 'right' || _0xecbcx17 === 'right' && _0xecbcx1c === 'left') && _0xecbcx8['from'] === _0xecbcx8['to']) {
                    var _0xecbcxb = _0xecbcx17 === 'left' ? 'start' : 'end';
                    var _0xecbcx12 = _0xecbcx1c === 'left' ? 'start' : 'end';
                    if (_0xecbcxf['rtl']) {
                        _0xecbcxb = _0xecbcxb === 'start' ? 'end' : 'start';
                        _0xecbcx12 = _0xecbcx12 === 'start' ? 'end' : 'start'
                    };
                    var _0xecbcx18 = _0xecbcx6[_0xecbcxb];
                    var _0xecbcx7 = _0xecbcx10[_0xecbcx12];
                    _0xecbcx11 = Math['abs'](_0xecbcx18 - _0xecbcx7)
                }
            };
            if (_0xecbcx11 < (_0xecbcxa * _0xecbcx9) * 2) {
                _0xecbcx24 = _0xecbcx9 = 0;
                if (_0xecbcx11 <= _0xecbcxa * 2) {
                    _0xecbcx1b = _0xecbcxa = 0
                }
            };
            return Ext['applyIf']({
                startBox: _0xecbcx6,
                startSide: _0xecbcx17,
                startArrowSize: _0xecbcx1b,
                startArrowMargin: _0xecbcx24,
                endBox: _0xecbcx10,
                endSide: _0xecbcx1c,
                endArrowSize: _0xecbcxa,
                endArrowMargin: _0xecbcx9,
                top: Math['min'](_0xecbcx6['top'], _0xecbcx10['top']),
                bottom: Math['max'](_0xecbcx6['bottom'], _0xecbcx10['bottom']),
                verticalMargin: _0xecbcx23,
                horizontalMargin: _0xecbcx14,
                startVerticalMargin: _0xecbcx23,
                startHorizontalMargin: _0xecbcx14,
                endVerticalMargin: _0xecbcx23,
                endHorizontalMargin: _0xecbcx14,
                otherBoxes: _0xecbcxc,
                dependency: _0xecbcx13,
                dependencyId: _0xecbcx13['internalId'],
                lineCls: _0xecbcx19['getCls'](),
                cls: _0xecbcx13['getCls'](),
                highlighted: _0xecbcx13['getHighlighted']()
            }, _0xecbcx19['getConfig']())
        },
        convertSideToDir: function(_0xecbcx6, _0xecbcx9) {
            return this['self']['sideToDir'][_0xecbcx6 + (_0xecbcx9 && '-rtl' || '')]
        },
        getSegmentDir: function(_0xecbcx9) {
            var _0xecbcx6 = 'vertical';
            if (_0xecbcx9['y1'] === _0xecbcx9['y2']) {
                _0xecbcx6 = 'horizontal'
            };
            return _0xecbcx6
        },
        inheritableStatics: {
            sideToDir: {
                left: 'right',
                right: 'left',
                top: 'down',
                bottom: 'up',
                "\x6C\x65\x66\x74\x2D\x72\x74\x6C": 'left',
                "\x72\x69\x67\x68\x74\x2D\x72\x74\x6C": 'right',
                "\x74\x6F\x70\x2D\x72\x74\x6C": 'down',
                "\x62\x6F\x74\x74\x6F\x6D\x2D\x72\x74\x6C": 'up'
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.view.dependency.renderingstrategy.Abstract', function() {
    function _0xecbcx9(_0xecbcxa) {
        return Ext['Array']['reduce'](_0xecbcxa, function(_0xecbcx8, _0xecbcxd) {
            _0xecbcx8[_0xecbcxd['getId']()] = _0xecbcxd;
            return _0xecbcx8
        }, {})
    }

    function _0xecbcx6(_0xecbcxa) {
        return Ext['Object']['getValues'](_0xecbcx9(_0xecbcxa))
    }

    function _0xecbcx4(_0xecbcxd, _0xecbcx8) {
        var _0xecbcxe, _0xecbcx11, _0xecbcxa = [];
        _0xecbcxe = _0xecbcx9(_0xecbcxd);
        _0xecbcx11 = _0xecbcx9(_0xecbcx8);
        Ext['Object']['each'](_0xecbcxe, function(_0xecbcxc, _0xecbcxf) {
            _0xecbcx11.hasOwnProperty(_0xecbcxc) || _0xecbcxa['push'](_0xecbcxf)
        });
        return _0xecbcxa
    }
    var _0xecbcx5 = function() {
        Ext['Error']['raise']('Method is not allowed to call at this state')
    };
    var _0xecbcx2 = {
        render: _0xecbcx5,
        clear: _0xecbcx5,
        scheduledRender: _0xecbcx5,
        destroy: _0xecbcx5
    };
    var _0xecbcx1, _0xecbcx7, _0xecbcx3;
    _0xecbcx1 = Ext['applyIf']({
        render: function(_0xecbcxf, _0xecbcxd, _0xecbcxb, _0xecbcxe) {
            var _0xecbcxc, _0xecbcx8, _0xecbcx11, _0xecbcxa;
            _0xecbcxc = new Ext.Promise(function(_0xecbcx17, _0xecbcx10) {
                _0xecbcx8 = _0xecbcx17;
                _0xecbcx11 = _0xecbcx10
            });
            if (_0xecbcxd['canDrawDependencies']()) {
                _0xecbcxf['_depsToRender'] = _0xecbcxb;
                _0xecbcxf['_depsRendered'] = [];
                Ext['Array']['reduce'](_0xecbcxf._depsToRender, function(_0xecbcx10, _0xecbcx17) {
                    return _0xecbcx10 && !!_0xecbcx17['store']
                }, true) || Ext['Error']['raise']('Can\'t render unstorred dependency ');
                _0xecbcxa = _0xecbcxd['getPrimaryView']()['up']('{isHidden()}');
                if (_0xecbcxa) {
                    _0xecbcxf['_scheduledRenderDetacher'] = _0xecbcxa['on']('show', function() {
                        delete _0xecbcxf['_scheduledRenderDetacher'];
                        _0xecbcxf['_fsaState']['scheduledRender'](_0xecbcxf, _0xecbcxd)
                    }, null, {
                        single: true,
                        destroyable: true
                    })
                } else {
                    _0xecbcxf['_scheduledRenderCancelId'] = Ext['asap'](function() {
                        delete _0xecbcxf['_scheduledRenderCancelId'];
                        _0xecbcxf['_fsaState']['scheduledRender'](_0xecbcxf, _0xecbcxd)
                    })
                };
                _0xecbcxf['hasListeners']['rendering-start'] && _0xecbcxf['fireEvent']('rendering-start', _0xecbcxf);
                _0xecbcxf['_renderPromise'] = _0xecbcxc;
                _0xecbcxf['_renderPromiseResolve'] = _0xecbcx8;
                _0xecbcxf['_renderPromiseReject'] = _0xecbcx11;
                _0xecbcxf['_fsaState'] = _0xecbcx7
            } else {
                _0xecbcx11(_0xecbcxb)
            };
            return _0xecbcxc
        },
        clear: function(_0xecbcxd, _0xecbcxa, _0xecbcxe, _0xecbcx8) {
            var _0xecbcx11;
            if (_0xecbcxa['canDrawDependencies']()) {
                if (_0xecbcxa['isDependencyCanvasPresent']()) {
                    if (_0xecbcx8) {
                        _0xecbcxa['getPainter']()['paint'](_0xecbcxa['getPrimaryView'](), _0xecbcxa['getDependencyCanvas'](), [], true)
                    } else {
                        Ext['destroy'](_0xecbcxa['getPainter']()['getElementsForDependency'](_0xecbcxa['getDependencyCanvas'](), _0xecbcxe))
                    }
                };
                _0xecbcx11 = Ext['Promise']['resolve'](_0xecbcxe)
            } else {
                _0xecbcx11 = Ext['Promise']['reject'](_0xecbcxe)
            };
            return _0xecbcx11
        },
        destroy: function(_0xecbcxa) {
            _0xecbcxa['destroyed'] = true;
            _0xecbcxa['_fsaState'] = _0xecbcx3
        }
    }, _0xecbcx2);
    _0xecbcx7 = Ext['applyIf']({
        render: function(_0xecbcxd, _0xecbcxa, _0xecbcx11, _0xecbcx8) {
            _0xecbcxd['_depsToRender'] = _0xecbcx8 ? _0xecbcx11 : _0xecbcx6(_0xecbcxd['_depsToRender']['concat'](_0xecbcx11));
            Ext['Array']['reduce'](_0xecbcxd._depsToRender, function(_0xecbcxe, _0xecbcxf) {
                return _0xecbcxe && !!_0xecbcxf['store']
            }, true) || Ext['Error']['raise']('Can\'t render unstored dependency ');
            return _0xecbcxd['_renderPromise']
        },
        clear: function(_0xecbcxd, _0xecbcxa, _0xecbcxe, _0xecbcx8) {
            var _0xecbcx11;
            if (_0xecbcxa['canDrawDependencies']()) {
                if (_0xecbcxa['isDependencyCanvasPresent']()) {
                    if (_0xecbcx8) {
                        _0xecbcxa['getPainter']()['paint'](_0xecbcxa['getPrimaryView'](), _0xecbcxa['getDependencyCanvas'](), [], true)
                    } else {
                        Ext['destroy'](_0xecbcxa['getPainter']()['getElementsForDependency'](_0xecbcxa['getDependencyCanvas'](), _0xecbcxe))
                    }
                };
                if (_0xecbcx8) {
                    _0xecbcxd['_depsToRender'] = []
                } else {
                    _0xecbcxd['_depsToRender'] = _0xecbcx4(_0xecbcxd._depsToRender, _0xecbcxe)
                };
                _0xecbcx11 = Ext['Promise']['resolve'](_0xecbcxe)
            } else {
                _0xecbcx11 = Ext['Promise']['reject'](_0xecbcxe)
            };
            return _0xecbcx11
        },
        scheduledRender: function(_0xecbcx11, _0xecbcxd) {
            var _0xecbcxa, _0xecbcx8;
            if (_0xecbcxd['canDrawDependencies']()) {
                _0xecbcxa = _0xecbcxd['getPrimaryView']()['up']('{isHidden()}');
                if (_0xecbcxa) {
                    _0xecbcx11['_scheduledRenderDetacher'] = _0xecbcxa['on']('show', function() {
                        delete _0xecbcx11['_scheduledRenderDetacher'];
                        _0xecbcx11['_fsaState']['scheduledRender'](_0xecbcx11, _0xecbcxd)
                    }, null, {
                        single: true,
                        destroyable: true
                    })
                } else {
                    if (_0xecbcx11['_depsToRender']['length'] > 0) {
                        Ext['Array']['reduce'](_0xecbcx11._depsToRender, function(_0xecbcxe, _0xecbcxf) {
                            return _0xecbcxe && !!_0xecbcxf['store']
                        }, true) || Ext['Error']['raise']('Can\'t render unstorred dependency ');
                        _0xecbcx8 = _0xecbcx11['delegateRendering'](_0xecbcxd, _0xecbcx11._depsToRender, _0xecbcx11._depsRendered);
                        Ext['Assert'] && Ext['Assert']['isArray'](_0xecbcx8, 'Delegate rendering result must be an array');
                        Ext['Assert'] && Ext['Assert']['truthy'](_0xecbcx8['length'] == 2, 'Delegate rendering result array length must be 2');
                        _0xecbcx11['_depsRendered'] = _0xecbcx6(_0xecbcx11['_depsRendered']['concat'](_0xecbcx8[0]));
                        _0xecbcx11['_depsToRender'] = _0xecbcx8[1];
                        _0xecbcx11['hasListeners']['rendering-progress'] && _0xecbcx11['fireEvent']('rendering-progress', _0xecbcx11, _0xecbcx11._depsToRender, _0xecbcx11._depsRendered);
                        if (_0xecbcx11['_depsToRender']['length'] > 0) {
                            _0xecbcx11['_scheduledRenderCancelId'] = Ext['asap'](function() {
                                delete _0xecbcx11['_scheduledRenderCancelId'];
                                _0xecbcx11['_fsaState']['scheduledRender'](_0xecbcx11, _0xecbcxd)
                            })
                        } else {
                            _0xecbcx11['hasListeners']['rendering-complete'] && _0xecbcx11['fireEvent']('rendering-complete', _0xecbcx11, _0xecbcx11._depsRendered);
                            _0xecbcx11._renderPromiseResolve(_0xecbcx11._depsRendered);
                            delete _0xecbcx11['_renderPromise'];
                            delete _0xecbcx11['_renderPromiseResolve'];
                            delete _0xecbcx11['_renderPromiseReject'];
                            delete _0xecbcx11['_depsToRender'];
                            delete _0xecbcx11['_depsRendered'];
                            _0xecbcx11['_fsaState'] = _0xecbcx1
                        }
                    } else {
                        _0xecbcx11['hasListeners']['rendering-complete'] && _0xecbcx11['fireEvent']('rendering-complete', _0xecbcx11, _0xecbcx11._depsRendered);
                        _0xecbcx11._renderPromiseResolve(_0xecbcx11._depsRendered);
                        delete _0xecbcx11['_renderPromise'];
                        delete _0xecbcx11['_renderPromiseResolve'];
                        delete _0xecbcx11['_renderPromiseReject'];
                        delete _0xecbcx11['_depsToRender'];
                        delete _0xecbcx11['_depsRendered'];
                        _0xecbcx11['_fsaState'] = _0xecbcx1
                    }
                }
            } else {
                _0xecbcx11['hasListeners']['rendering-canceled'] && _0xecbcx11['fireEvent']('rendering-canceled', _0xecbcx11, _0xecbcx11._depsRendered, _0xecbcx11._depsToRender);
                _0xecbcx11._renderPromiseReject(_0xecbcx11._depsToRender);
                delete _0xecbcx11['_renderPromise'];
                delete _0xecbcx11['_renderPromiseResolve'];
                delete _0xecbcx11['_renderPromiseReject'];
                delete _0xecbcx11['_depsToRender'];
                delete _0xecbcx11['_depsRendered'];
                _0xecbcx11['_fsaState'] = _0xecbcx1
            }
        },
        destroy: function(_0xecbcxa) {
            if (_0xecbcxa['_scheduledRenderCancelId']) {
                Ext['asapCancel'](_0xecbcxa._scheduledRenderCancelId);
                delete _0xecbcxa['_scheduledRenderCancelId']
            };
            if (_0xecbcxa['_scheduledRenderDetacher']) {
                Ext['destroy'](_0xecbcxa._scheduledRenderDetacher);
                delete _0xecbcxa['_scheduledRenderDetacher']
            };
            _0xecbcxa['hasListeners']['rendering-canceled'] && _0xecbcxa['fireEvent']('rendering-canceled', _0xecbcxa, _0xecbcxa._depsRendered, _0xecbcxa._depsToRender);
            _0xecbcxa._renderPromiseReject(_0xecbcxa._depsToRender);
            delete _0xecbcxa['_renderPromise'];
            delete _0xecbcxa['_renderPromiseResolve'];
            delete _0xecbcxa['_renderPromiseReject'];
            delete _0xecbcxa['_depsToRender'];
            delete _0xecbcxa['_depsRendered'];
            _0xecbcxa['destroyed'] = true;
            _0xecbcxa['_fsaState'] = _0xecbcx3
        }
    }, _0xecbcx2);
    _0xecbcx3 = _0xecbcx2;
    return {
        alias: 'sch_dependency_rendering_strategy.abstract',
        mixins: ['Ext.mixin.Factoryable', 'Ext.mixin.Observable'],
        _fsaState: _0xecbcx1,
        constructor: function(_0xecbcxa) {
            var _0xecbcx8 = this;
            _0xecbcx8['mixins']['observable']['constructor']['call'](_0xecbcx8, _0xecbcxa)
        },
        destroy: function() {
            var _0xecbcxa = this;
            return _0xecbcxa['_fsaState']['destroy'](_0xecbcxa)
        },
        renderDependencies: function(_0xecbcxa, _0xecbcx11) {
            var _0xecbcxd = this,
                _0xecbcx8 = !_0xecbcx11;
            return _0xecbcxd['_fsaState']['render'](_0xecbcxd, _0xecbcxa, _0xecbcx11 || _0xecbcxa['getDependencyStore']()['getRange'](), _0xecbcx8)
        },
        clearDependencies: function(_0xecbcxa, _0xecbcx11) {
            var _0xecbcxd = this,
                _0xecbcx8 = !_0xecbcx11;
            return _0xecbcxd['_fsaState']['clear'](_0xecbcxd, _0xecbcxa, _0xecbcx11 || _0xecbcxa['getDependencyStore']()['getRange'](), _0xecbcx8)
        },
        updateDependencies: function(_0xecbcxa, _0xecbcx11) {
            var _0xecbcxd = this,
                _0xecbcx8 = !_0xecbcx11;
            _0xecbcx11 = _0xecbcx11 || _0xecbcxa['getDependencyStore']()['getRange']();
            return _0xecbcxd['_fsaState']['clear'](_0xecbcxd, _0xecbcxa, _0xecbcx11, _0xecbcx8)['then'](function() {
                _0xecbcx11 = _0xecbcx8 ? _0xecbcxa['getDependencyStore']()['getRange']() : Ext['Array']['reduce'](_0xecbcx11, function(_0xecbcxf, _0xecbcxe) {
                    if (_0xecbcxe['store'] && Ext['Array']['indexOf'](_0xecbcxe['store']['removed'], _0xecbcxe) === -1) {
                        _0xecbcxf['push'](_0xecbcxe)
                    };
                    return _0xecbcxf
                }, []);
                return !_0xecbcxd['destroyed'] ? _0xecbcxd['_fsaState']['render'](_0xecbcxd, _0xecbcxa, _0xecbcx11, _0xecbcx8) : _0xecbcx11
            })
        },
        delegateRendering: function(_0xecbcx8, _0xecbcxa, _0xecbcxd) {
            Ext['Error']['raise']('Abstract method call')
        },
        inheritableStatics: {
            depsToMap: _0xecbcx9,
            uniqueDeps: _0xecbcx6,
            diffDeps: _0xecbcx4
        }
    }
});
Ext.define('Ext.ux.Scheduler.view.dependency.renderingstrategy.Combined', {
    extend: 'Ext.ux.Scheduler.view.dependency.renderingstrategy.Abstract',
    alias: 'sch_dependency_rendering_strategy.combined',
    config: {
        depsPerStep: 50,
        mode: 'bulk'
    },
    delegateRendering: function(_0xecbcx2, _0xecbcx1, _0xecbcx5) {
        var _0xecbcx3 = this;
        return _0xecbcx3['getMode']() == 'bulk' ? _0xecbcx3['delegateRenderingBulk'](_0xecbcx2, _0xecbcx1, _0xecbcx5) : _0xecbcx3['delegateRenderingAsync'](_0xecbcx2, _0xecbcx1, _0xecbcx5)
    },
    delegateRenderingBulk: function(_0xecbcx2, _0xecbcx1, _0xecbcx5) {
        _0xecbcx2['getPainter']()['paint'](_0xecbcx2['getPrimaryView'](), _0xecbcx2['getDependencyCanvas'](), _0xecbcx1, false);
        return [_0xecbcx1, []]
    },
    delegateRenderingAsync: function(_0xecbcx5, _0xecbcx2, _0xecbcx3) {
        var _0xecbcx4 = this,
            _0xecbcx6 = _0xecbcx4['getDepsPerStep'](),
            _0xecbcx1 = _0xecbcx2['slice'](0, _0xecbcx6),
            _0xecbcx9 = _0xecbcx2['slice'](_0xecbcx6);
        _0xecbcx5['getPainter']()['paint'](_0xecbcx5['getPrimaryView'](), _0xecbcx5['getDependencyCanvas'](), _0xecbcx1, false);
        return [_0xecbcx1, _0xecbcx9]
    }
});
Ext.define('Ext.ux.Scheduler.view.dependency.View', {
    alias: 'schdependencyview.base',
    mixins: ['Ext.mixin.Factoryable', 'Ext.mixin.Observable'],
    requires: ['Ext.ux.Scheduler.view.dependency.DragZone', 'Ext.ux.Scheduler.view.dependency.Painter', 'Ext.ux.Scheduler.view.dependency.renderingstrategy.Combined'],
    uses: ['Ext.data.StoreManager', 'Ext.Array', 'Ext.dom.CompositeElementLite'],
    config: {
        primaryView: null,
        dependencyStore: null,
        drawDependencies: true,
        bulkRenderingDependencyLimit: 100,
        asyncRenderingDepsPerStep: 50,
        painterConfig: {
            canvasCls: 'sch-dependencyview-ct'
        },
        canvasLayer: 0,
        enableDependencyDragDrop: true,
        terminalSides: ['left', 'right', 'top', 'bottom'],
        dragTipTpl: null,
        dragZoneConfig: null,
        selectedCls: null,
        overCls: null
    },
    painter: null,
    renderingStrategy: null,
    primaryViewDetacher: null,
    primaryViewLockableDetacher: null,
    primaryViewElDetacher: null,
    dependencyStoreDetacher: null,
    dragZone: null,
    scrolling: false,
    constructor: function(_0xecbcx2) {
        var _0xecbcx5 = this,
            _0xecbcx1;
        _0xecbcx5['callParent']([_0xecbcx2]);
        _0xecbcx5['mixins']['observable']['constructor']['call'](_0xecbcx5, _0xecbcx2);
        _0xecbcx5['initConfig'](_0xecbcx2);
        Ext['Assert'] && Ext['Assert']['isObject'](_0xecbcx5['getPrimaryView'](), 'Dependency view requires a primary view to be configured in');
        Ext['Assert'] && Ext['Assert']['isFunctionProp'](_0xecbcx5['getPrimaryView'](), 'isItemCanvasAvailable', 'Dependency view requires `Ext.ux.Scheduler.mixin.GridViewCanvas` mixin to be mixed into scheduling view, or the corresponding interface to be implemented');
        Ext['Assert'] && Ext['Assert']['isFunctionProp'](_0xecbcx5['getPrimaryView'](), 'getItemCanvasEl', 'Dependency view requires `Ext.ux.Scheduler.mixin.GridViewCanvas` mixin to be mixed into scheduling view, or the corresponding interface to be implemented');
        _0xecbcx5['painter'] = _0xecbcx5['createPainter'](Ext.apply({
            rtl: _0xecbcx5['getPrimaryView']()['rtl'],
            dependencyStore: _0xecbcx5['getDependencyStore']()
        }, _0xecbcx5['getPainterConfig']()));
        if (_0xecbcx5['painter']['getUseDependencyRowIntersectionCache']()) {
            if (_0xecbcx5['getPrimaryView']()['resourceStore']) {
                _0xecbcx5['getPrimaryView']()['mon'](_0xecbcx5['getPrimaryView']()['resourceStore'], {
                    add: _0xecbcx5['resetPainterCache'],
                    remove: _0xecbcx5['resetPainterCache'],
                    clear: _0xecbcx5['resetPainterCache'],
                    refresh: _0xecbcx5['resetPainterCache'],
                    scope: _0xecbcx5
                })
            };
            if (_0xecbcx5['getDependencyStore']()) {
                _0xecbcx5['mon'](_0xecbcx5['getDependencyStore'](), {
                    add: _0xecbcx5['updatePainterCache'],
                    remove: _0xecbcx5['resetPainterCache'],
                    clear: _0xecbcx5['resetPainterCache'],
                    refresh: _0xecbcx5['resetPainterCache'],
                    scope: _0xecbcx5
                })
            }
        };
        if (!_0xecbcx5['getSelectedCls']()) {
            _0xecbcx5['setSelectedCls'](_0xecbcx5['painter']['getSelectedCls']())
        };
        if (_0xecbcx5['canDrawDependencies']()) {
            _0xecbcx5['startDrawDependencies']()
        };
        if (_0xecbcx5['getEnableDependencyDragDrop']()) {
            _0xecbcx1 = _0xecbcx5['getPrimaryView']();
            _0xecbcx5['dragZone'] = _0xecbcx5['createDragZone'](Ext.apply({
                view: _0xecbcx1,
                ddGroup: _0xecbcx1['getId']() + '-dep-dd',
                rtl: _0xecbcx1['rtl'],
                terminalSelector: '.sch-terminal',
                dependencyStore: _0xecbcx5['getDependencyStore'](),
                tipTpl: _0xecbcx5['getDragTipTpl']()
            }, _0xecbcx5['getDragZoneConfig']() || {}));
            _0xecbcx5['dragZone']['on']({
                dragstart: _0xecbcx5['onDragStart'],
                drop: _0xecbcx5['onDependencyDrop'],
                afterdrop: _0xecbcx5['onDependencyAfterDrop'],
                scope: _0xecbcx5
            });
            _0xecbcx5['relayEvents'](_0xecbcx5['dragZone'], ['beforedrag', 'dragstart', 'drop', 'afterdrop'])
        }
    },
    destroy: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['stopDrawDependencies']();
        _0xecbcx1['dragZone'] && _0xecbcx1['dragZone']['destroy']()
    },
    destroyDetachers: function() {
        var _0xecbcx1 = this;
        Ext['destroyMembers'](this, ['primaryViewDetacher', 'primaryViewLockableDetacher', 'primaryViewElDetacher', 'dependencyStoreDetacher'])
    },
    destroyDependencyCanvas: function() {
        var _0xecbcx1 = this;
        if (_0xecbcx1['isDependencyCanvasPresent']()) {
            Ext['destroy'](_0xecbcx1['getDependencyCanvas']())
        }
    },
    destroyRenderingStrategy: function() {
        var _0xecbcx1 = this;
        Ext['destroy'](_0xecbcx1['renderingStrategy']);
        _0xecbcx1['renderingStrategy'] = null
    },
    resetPainterCache: function() {
        this['painter']['resetRowIntersectionCache']()
    },
    updatePainterCache: function() {
        this['painter']['resetRowIntersectionCache'](true)
    },
    canDrawDependencies: function(_0xecbcx2, _0xecbcx1, _0xecbcx3) {
        var _0xecbcx5 = this;
        return !!(_0xecbcx5['painter'] && _0xecbcx5['getPrimaryView']() && (_0xecbcx2 || _0xecbcx5['getDrawDependencies']()) && (_0xecbcx1 || _0xecbcx5['isDependencyCanvasAvailable']()) && (_0xecbcx3 || _0xecbcx5['getDependencyStore']()))
    },
    startDrawDependencies: function() {
        var _0xecbcx2 = this,
            _0xecbcx5 = _0xecbcx2['getPrimaryView'](),
            _0xecbcx1 = _0xecbcx2['getDependencyStore'](),
            _0xecbcx3;
        _0xecbcx2['renderingStrategy'] = _0xecbcx2['createRenderingStrategy']();
        _0xecbcx2['primaryViewDetacher'] = _0xecbcx5['on'](Ext['applyIf']({
            destroyable: true
        }, _0xecbcx2['getPrimaryViewListeners']()));
        _0xecbcx2['primaryViewElDetacher'] = _0xecbcx5['getEl']()['on'](Ext['applyIf']({
            destroyable: true
        }, _0xecbcx2['getPrimaryViewElListeners']()));
        if (_0xecbcx5['grid']) {
            _0xecbcx3 = _0xecbcx5['grid']['ownerLockable'] && _0xecbcx5['grid']['ownerLockable']['getView']();
            if (_0xecbcx5 != _0xecbcx3) {
                _0xecbcx2['primaryViewLockableDetacher'] = _0xecbcx3['on'](Ext['applyIf']({
                    destroyable: true
                }, _0xecbcx2['getPrimaryViewLockableListeners']()))
            }
        };
        _0xecbcx2['dependencyStoreDetacher'] = _0xecbcx1['on'](Ext['applyIf']({
            destroyable: true
        }, _0xecbcx2['getDependencyStoreListeners']()));
        _0xecbcx2['renderAllDependencies']()['then'](null, Ext['emptyFn'])
    },
    stopDrawDependencies: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['destroyRenderingStrategy']();
        _0xecbcx1['destroyDetachers']();
        _0xecbcx1['destroyDependencyCanvas']()
    },
    createRenderingStrategy: function() {
        var _0xecbcx2 = this,
            _0xecbcx1;
        return Ext.ux.Scheduler['view']['dependency']['renderingstrategy']['Combined']['create']({
            depsPerStep: _0xecbcx2['getAsyncRenderingDepsPerStep']()
        })
    },
    maybeSwitchRenderingStrategy: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getDependencyStore']();
        if (_0xecbcx2['getDependencyStore']()['getCount']() <= _0xecbcx2['getBulkRenderingDependencyLimit']()) {
            _0xecbcx2['renderingStrategy']['setMode']('bulk')
        } else {
            _0xecbcx2['renderingStrategy']['setMode']('async')
        }
    },
    updatePrimaryView: function(_0xecbcx5, _0xecbcx1) {
        var _0xecbcx2 = this;
        if (_0xecbcx1) {
            _0xecbcx2['stopDrawDependencies']()
        };
        if (_0xecbcx5) {
            if (!_0xecbcx2['getDependencyStore']() && _0xecbcx5['getEventStore']()) {
                _0xecbcx2['setDependencyStore'](_0xecbcx5['getEventStore']()['getDependencyStore']())
            };
            if (_0xecbcx2['canDrawDependencies']()) {
                _0xecbcx2['startDrawDependencies']()
            }
        }
    },
    applyDependencyStore: function(_0xecbcx1) {
        return _0xecbcx1 && Ext['StoreMgr']['lookup'](_0xecbcx1)
    },
    updateDependencyStore: function(_0xecbcx1, _0xecbcx5) {
        var _0xecbcx2 = this;
        if (_0xecbcx5) {
            _0xecbcx2['stopDrawDependencies']()
        };
        if (_0xecbcx1 && _0xecbcx2['canDrawDependencies']()) {
            _0xecbcx2['startDrawDependencies']()
        }
    },
    updateDrawDependencies: function(_0xecbcx5, _0xecbcx1) {
        var _0xecbcx2 = this;
        if (_0xecbcx5 && _0xecbcx2['canDrawDependencies'](true)) {
            _0xecbcx2['startDrawDependencies']()
        } else {
            if (!_0xecbcx5) {
                _0xecbcx2['stopDrawDependencies']()
            }
        }
    },
    applyPainterConfig: function(_0xecbcx1) {
        return Ext['isObject'](_0xecbcx1) ? Ext.apply({}, _0xecbcx1) : _0xecbcx1
    },
    updatePainterConfig: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        if (_0xecbcx2['painter']) {
            if (_0xecbcx1) {
                _0xecbcx1 = Ext.apply({}, {
                    rtl: _0xecbcx2['getPrimaryView']()['rtl']
                }, _0xecbcx1)
            };
            if (_0xecbcx1 && 'type' in _0xecbcx1 && _0xecbcx1['type'] !== _0xecbcx2['painter']['type']) {
                Ext['destroy'](_0xecbcx2['painter']);
                _0xecbcx2['painter'] = _0xecbcx2['createPainter'](_0xecbcx1)
            } else {
                _0xecbcx2['painter']['setConfig'](_0xecbcx1)
            };
            _0xecbcx2['destroyDependencyCanvas']();
            if (_0xecbcx2['canDrawDependencies']()) {
                _0xecbcx2['renderAllDependencies']()['then'](null, Ext['emptyFn'])
            }
        }
    },
    updateCanvasLayer: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['destroyDependencyCanvas']();
        if (_0xecbcx2['canDrawDependencies']()) {
            _0xecbcx2['renderAllDependencies']()['then'](null, Ext['emptyFn'])
        }
    },
    updateSelectedCls: function(_0xecbcx1) {
        this['painter']['setSelectedCls'](_0xecbcx1)
    },
    getPrimaryViewListeners: function() {
        var _0xecbcx1 = this;
        return {
            itemadd: _0xecbcx1['onPrimaryViewItemAdd'],
            itemremove: _0xecbcx1['onPrimaryViewItemRemove'],
            itemupdate: _0xecbcx1['onPrimaryViewItemUpdate'],
            refresh: _0xecbcx1['onPrimaryViewRefresh'],
            bufferedrefresh: _0xecbcx1['onPrimaryViewRefresh'],
            expandbody: _0xecbcx1['onPrimaryViewExpandBody'],
            collapsebody: _0xecbcx1['onPrimaryViewCollapseBody'],
            eventrepaint: _0xecbcx1['onPrimaryViewEventRepaint'],
            scope: _0xecbcx1
        }
    },
    getPrimaryViewLockableListeners: function() {
        var _0xecbcx1 = this;
        return {
            expandbody: _0xecbcx1['onPrimaryViewExpandBody'],
            collapsebody: _0xecbcx1['onPrimaryViewCollapseBody'],
            scope: _0xecbcx1
        }
    },
    getPrimaryViewElListeners: function() {
        var _0xecbcx1 = this;
        return {
            dblclick: _0xecbcx1['onPrimaryViewDependencyElPointerEvent'],
            click: _0xecbcx1['onPrimaryViewDependencyElPointerEvent'],
            contextmenu: _0xecbcx1['onPrimaryViewDependencyElPointerEvent'],
            mouseover: _0xecbcx1['onPrimaryViewDependencyElPointerEvent'],
            mouseout: _0xecbcx1['onPrimaryViewDependencyElPointerEvent'],
            delegate: '.sch-dependency',
            scope: _0xecbcx1
        }
    },
    getDependencyStoreListeners: function() {
        var _0xecbcx1 = this;
        return {
            add: _0xecbcx1['onDependencyStoreAdd'],
            remove: _0xecbcx1['onDependencyStoreRemove'],
            update: _0xecbcx1['onDependencyStoreUpdate'],
            refresh: _0xecbcx1['onDependencyStoreRefresh'],
            clear: _0xecbcx1['onDependencyStoreClear'],
            scope: _0xecbcx1
        }
    },
    createPainter: function(_0xecbcx1) {
        return Ext.ux.Scheduler['view']['dependency']['Painter']['create'](_0xecbcx1)
    },
    getPainter: function() {
        return this['painter']
    },
    clonePainter: function() {
        var _0xecbcx1 = this;
        return _0xecbcx1['painter'] && _0xecbcx1['painter']['clone']() || null
    },
    createDragZone: function(_0xecbcx1) {
        return Ext.ux.Scheduler['view']['dependency']['DragZone']['create'](_0xecbcx1)
    },
    isDependencyCanvasAvailable: function() {
        var _0xecbcx1 = this['getPrimaryView']();
        return _0xecbcx1 && _0xecbcx1['isItemCanvasAvailable']()
    },
    isDependencyCanvasPresent: function() {
        var _0xecbcx1 = this,
            _0xecbcx2 = _0xecbcx1['getPrimaryView']();
        return _0xecbcx2 && _0xecbcx2['isItemCanvasPresent'](_0xecbcx1['getCanvasLayer']())
    },
    getDependencyCanvas: function() {
        var _0xecbcx1 = this;
        return _0xecbcx1['getPrimaryView']()['getItemCanvasEl'](_0xecbcx1['getCanvasLayer'](), _0xecbcx1['painter']['getCanvasSpecification']())
    },
    renderAllDependencies: function() {
        var _0xecbcx1 = this,
            _0xecbcx2;
        if (_0xecbcx1['canDrawDependencies']() && (_0xecbcx1['refreshing'] || _0xecbcx1['fireEvent']('beforerefresh', _0xecbcx1) !== false)) {
            _0xecbcx1['refreshing'] || _0xecbcx1['renderingStrategy']['on']('rendering-complete', function(_0xecbcx5, _0xecbcx3) {
                _0xecbcx1['refreshing'] = false;
                _0xecbcx1['fireEvent']('refresh', _0xecbcx1)
            }, null, {
                single: true
            });
            _0xecbcx1['refreshing'] = true;
            _0xecbcx2 = _0xecbcx1['renderingStrategy']['updateDependencies'](_0xecbcx1)
        } else {
            _0xecbcx2 = Ext['Promise']['reject'](_0xecbcx1['getDependencyStore']()['getRange']())
        };
        return _0xecbcx2
    },
    renderDependencies: function(_0xecbcx3, _0xecbcx1) {
        var _0xecbcx2 = this,
            _0xecbcx5;
        if (!Ext['isArray'](_0xecbcx3)) {
            _0xecbcx3 = [_0xecbcx3]
        };
        if (_0xecbcx2['canDrawDependencies']()) {
            if (_0xecbcx1) {
                _0xecbcx5 = _0xecbcx2['renderingStrategy']['clearDependencies'](_0xecbcx2)['then'](function() {
                    return !_0xecbcx2['renderingStrategy']['destroyed'] ? _0xecbcx2['renderingStrategy']['renderDependencies'](_0xecbcx2, _0xecbcx3) : _0xecbcx3
                })
            } else {
                _0xecbcx5 = _0xecbcx2['renderingStrategy']['renderDependencies'](_0xecbcx2, _0xecbcx3)
            }
        } else {
            _0xecbcx5 = Ext['Promise']['reject'](_0xecbcx3)
        };
        return _0xecbcx5
    },
    updateDependencies: function(_0xecbcx5) {
        var _0xecbcx1 = this,
            _0xecbcx2;
        if (!Ext['isArray'](_0xecbcx5)) {
            _0xecbcx5 = [_0xecbcx5]
        };
        if (_0xecbcx1['canDrawDependencies']()) {
            _0xecbcx2 = _0xecbcx1['renderingStrategy']['updateDependencies'](_0xecbcx1, _0xecbcx5)
        } else {
            _0xecbcx2 = Ext['Promise']['reject'](_0xecbcx5)
        };
        return _0xecbcx2
    },
    clearDependencies: function(_0xecbcx5) {
        var _0xecbcx1 = this,
            _0xecbcx2;
        if (!Ext['isArray'](_0xecbcx5)) {
            _0xecbcx5 = [_0xecbcx5]
        };
        if (_0xecbcx1['canDrawDependencies']()) {
            _0xecbcx2 = _0xecbcx1['renderingStrategy']['clearDependencies'](_0xecbcx1, _0xecbcx5)
        } else {
            _0xecbcx2 = Ext['Promise']['reject'](_0xecbcx5)
        };
        return _0xecbcx2
    },
    clearAllDependencies: function() {
        var _0xecbcx1 = this,
            _0xecbcx2;
        if (_0xecbcx1['canDrawDependencies']()) {
            _0xecbcx2 = _0xecbcx1['renderingStrategy']['clearDependencies'](_0xecbcx1)
        } else {
            _0xecbcx2 = Ext['Promise']['reject']()
        };
        return _0xecbcx2
    },
    getElementsForDependency: function(_0xecbcx5) {
        var _0xecbcx2 = this,
            _0xecbcx1 = false;
        if (_0xecbcx2['canDrawDependencies']() && _0xecbcx2['isDependencyCanvasPresent']()) {
            _0xecbcx1 = _0xecbcx2['painter']['getElementsForDependency'](_0xecbcx2['getDependencyCanvas'](), _0xecbcx5)
        };
        return _0xecbcx1
    },
    getDependencyForElement: function(_0xecbcx5) {
        var _0xecbcx4 = this,
            _0xecbcx2 = _0xecbcx4['getDependencyStore'](),
            _0xecbcx1 = null,
            _0xecbcx3;
        if (_0xecbcx2) {
            _0xecbcx3 = _0xecbcx4['painter']['getElementDependencyInternalId'](_0xecbcx5);
            _0xecbcx1 = _0xecbcx2['getByInternalId'](_0xecbcx3)
        };
        return _0xecbcx1
    },
    getDependencyElements: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = false;
        if (_0xecbcx2['canDrawDependencies']() && _0xecbcx2['isDependencyCanvasPresent']()) {
            _0xecbcx1 = _0xecbcx2['painter']['getDependencyElements'](_0xecbcx2['getDependencyCanvas']())
        };
        return _0xecbcx1
    },
    highlightDependency: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = this;
        if (!(_0xecbcx2 instanceof Ext['data']['Model'])) {
            _0xecbcx2 = _0xecbcx5['getDependencyStore']()['getById'](_0xecbcx2)
        };
        _0xecbcx2 && _0xecbcx2['highlight'](_0xecbcx1 || _0xecbcx5['getSelectedCls']())
    },
    unhighlightDependency: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = this;
        if (!(_0xecbcx2 instanceof Ext['data']['Model'])) {
            _0xecbcx2 = _0xecbcx5['getDependencyStore']()['getById'](_0xecbcx2)
        };
        _0xecbcx2 && _0xecbcx2['unhighlight'](_0xecbcx1 || _0xecbcx5['getSelectedCls']())
    },
    getHighlightedDependencies: function(_0xecbcx1) {
        var _0xecbcx2 = this['getDependencyStore']();
        return _0xecbcx2 && _0xecbcx2['getHighlightedDependencies']() || []
    },
    getSelectedDependencyElements: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = false;
        if (_0xecbcx2['canDrawDependencies']() && _0xecbcx2['isDependencyCanvasPresent']()) {
            _0xecbcx1 = _0xecbcx2['painter']['getSelectedDependencyElements'](_0xecbcx2['getDependencyCanvas']())
        };
        return _0xecbcx1
    },
    clearSelectedDependencies: function() {
        var _0xecbcx1 = this;
        if (_0xecbcx1['canDrawDependencies']() && _0xecbcx1['isDependencyCanvasPresent']()) {
            _0xecbcx1['painter']['clearSelectedDependencies'](_0xecbcx1['getDependencyCanvas']());
            _0xecbcx1['getDependencyStore']()['each'](function(_0xecbcx2) {
                _0xecbcx1['unhighlightDependency'](_0xecbcx2)
            })
        }
    },
    onPrimaryViewItemAdd: function(_0xecbcx2, _0xecbcx5, _0xecbcx3, _0xecbcx1) {
        this['renderAllDependencies']()['then'](null, Ext['emptyFn'])
    },
    onPrimaryViewItemUpdate: function(_0xecbcx2, _0xecbcx5, _0xecbcx3, _0xecbcx1) {
        this['renderAllDependencies']()['then'](null, Ext['emptyFn'])
    },
    onPrimaryViewItemRemove: function(_0xecbcx2, _0xecbcx5, _0xecbcx3, _0xecbcx1) {
        this['renderAllDependencies']()['then'](null, Ext['emptyFn'])
    },
    onPrimaryViewRefresh: function(_0xecbcx1) {
        this['renderAllDependencies']()['then'](null, Ext['emptyFn'])
    },
    onPrimaryViewExpandBody: function() {
        this['renderAllDependencies']()['then'](null, Ext['emptyFn'])
    },
    onPrimaryViewCollapseBody: function() {
        this['renderAllDependencies']()['then'](null, Ext['emptyFn'])
    },
    onPrimaryViewEventRepaint: function() {
        this['renderAllDependencies']()['then'](null, Ext['emptyFn'])
    },
    onPrimaryViewDependencyElPointerEvent: function(_0xecbcx9, _0xecbcx2, _0xecbcx3) {
        var _0xecbcx6 = this,
            _0xecbcx1, _0xecbcx5;
        _0xecbcx1 = _0xecbcx6['painter']['getElementDependencyInternalId'](_0xecbcx2);
        _0xecbcx5 = _0xecbcx6['getDependencyStore']()['getByInternalId'](_0xecbcx1);
        if (_0xecbcx5) {
            var _0xecbcx7 = this['getOverCls']();
            _0xecbcx6['fireEvent']('dependency' + _0xecbcx9['type'], _0xecbcx6, _0xecbcx5, _0xecbcx9, _0xecbcx2);
            if (_0xecbcx7) {
                if (_0xecbcx9['type'] === 'mouseover' || _0xecbcx9['type'] === 'mouseout') {
                    var _0xecbcx4 = _0xecbcx6['painter']['getElementsForDependency'](_0xecbcx6['getDependencyCanvas'](), _0xecbcx5);
                    if (_0xecbcx9['type'] === 'mouseover') {
                        _0xecbcx4['addCls'](_0xecbcx7)
                    } else {
                        if (_0xecbcx9['type'] === 'mouseout') {
                            _0xecbcx4['removeCls'](_0xecbcx7)
                        }
                    }
                }
            }
        }
    },
    onDependencyStoreAdd: function(_0xecbcx1, _0xecbcx5) {
        var _0xecbcx2 = this;
        _0xecbcx2['maybeSwitchRenderingStrategy']();
        _0xecbcx2['renderDependencies'](_0xecbcx5)['then'](null, Ext['emptyFn'])
    },
    onDependencyStoreRemove: function(_0xecbcx1, _0xecbcx5) {
        var _0xecbcx2 = this;
        _0xecbcx2['maybeSwitchRenderingStrategy']();
        _0xecbcx2['clearDependencies'](_0xecbcx5)['then'](null, Ext['emptyFn'])
    },
    onDependencyStoreUpdate: function(_0xecbcx1, _0xecbcx2) {
        this['updateDependencies'](_0xecbcx2)['then'](null, Ext['emptyFn'])
    },
    onDependencyStoreRefresh: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['maybeSwitchRenderingStrategy']();
        _0xecbcx2['renderAllDependencies']()['then'](null, Ext['emptyFn'])
    },
    onDependencyStoreClear: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['maybeSwitchRenderingStrategy']();
        _0xecbcx2['renderAllDependencies']()['then'](null, Ext['emptyFn'])
    },
    onDragStart: function() {
        var _0xecbcx1 = this,
            _0xecbcx2 = _0xecbcx1['getPrimaryView']();
        _0xecbcx2['onDragDropStart'] && _0xecbcx2['onDragDropStart']();
        _0xecbcx1['getPrimaryView']()['getEl']()['addCls']('sch-terminals-visible')
    },
    onDependencyDrop: function(_0xecbcx5, _0xecbcx1, _0xecbcx2) {
        _0xecbcx2 && this['getDependencyStore']()['add'](_0xecbcx1)
    },
    onDependencyAfterDrop: function() {
        var _0xecbcx1 = this['getPrimaryView']();
        if (!_0xecbcx1['destroyed']) {
            _0xecbcx1['onDragDropEnd'] && _0xecbcx1['onDragDropEnd']();
            _0xecbcx1['getEl']()['removeCls']('sch-terminals-visible');
            _0xecbcx1['getEl']()['select']('.sch-terminal-hidden')['removeCls']('sch-terminal-hidden')
        }
    }
});
Ext.define('Ext.ux.Scheduler.view.dependency.Mixin', {
    extend: 'Ext.Mixin',
    requires: ['Ext.ux.Scheduler.view.dependency.View'],
    mixinConfig: {
        after: {
            initComponent: 'initComponent',
            destroy: 'destroy'
        }
    },
    dependencyViewConfig: null,
    dependencyView: null,
    dependencyViewRelayDetacher: null,
    dependencyDragRelayDetacher: null,
    initComponent: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['on']('viewready', function() {
            if (_0xecbcx1['getEventStore']()) {
                _0xecbcx1['setupDependencyView'](_0xecbcx1['getDependencyViewConfig'](), _0xecbcx1['getSchedulingView']())
            }
        })
    },
    getDependencyViewConfig: function() {
        return this['dependencyViewConfig']
    },
    setDependencyViewConfig: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        if (_0xecbcx2['dependencyViewConfig'] !== _0xecbcx1) {
            _0xecbcx2['dependencyViewConfig'] = _0xecbcx1;
            if (_0xecbcx2['dependencyView']) {
                if (_0xecbcx1 && 'type' in _0xecbcx1 && _0xecbcx1['type'] !== _0xecbcx2['dependencyView']['type']) {
                    _0xecbcx2['setupDependencyView'](_0xecbcx1, _0xecbcx2['getSchedulingView']())
                } else {
                    _0xecbcx2['dependencyView']['setConfig'](_0xecbcx1)
                }
            }
        }
    },
    hasDependencyView: function() {
        return !!this['dependencyView']
    },
    getDependencyView: function() {
        return this['dependencyView']
    },
    createDependencyView: function(_0xecbcx1, _0xecbcx2) {
        return Ext.ux.Scheduler['view']['dependency']['View']['create'](Ext['applyIf']({
            primaryView: _0xecbcx2
        }, _0xecbcx1))
    },
    destroy: function() {
        Ext['destroyMembers'](this, 'dependencyViewRelayDetacher', 'dependencyDragRelayDetacher', 'dependencyView')
    },
    setupDependencyView: function(_0xecbcx1, _0xecbcx5) {
        var _0xecbcx2 = this;
        Ext['destroy'](_0xecbcx2['dependencyView']);
        _0xecbcx2['dependencyView'] = _0xecbcx2['createDependencyView'](_0xecbcx1, _0xecbcx5);
        _0xecbcx2['setupDependencyViewRelay']();
        _0xecbcx2['fireEvent']('dependencyviewready', _0xecbcx2, _0xecbcx2['dependencyView']);
        if (_0xecbcx2['dependencyView']['canDrawDependencies']()) {
            _0xecbcx2['dependencyView']['renderAllDependencies']()['then'](null, Ext['emptyFn'])
        }
    },
    setupDependencyViewRelay: function() {
        var _0xecbcx1 = this;
        Ext['destroy'](_0xecbcx1['dependencyViewRelayDetacher'], _0xecbcx1['dependencyDragRelayDetacher']);
        _0xecbcx1['dependencyViewRelayDetacher'] = _0xecbcx1['relayEvents'](_0xecbcx1['getDependencyView'](), ['dependencyclick', 'dependencydblclick', 'dependencycontextmenu', 'dependencymouseover', 'dependencymouseout']);
        _0xecbcx1['dependencyDragRelayDetacher'] = _0xecbcx1['relayEvents'](_0xecbcx1['getDependencyView'](), ['beforedrag', 'dragstart', 'drop', 'afterdrop'], 'dependency')
    }
});
Ext.define('Ext.ux.Scheduler.panel.SchedulerGrid', {
    extend: 'Ext.ux.Scheduler.panel.TimelineGridPanel',
    mixins: ['Ext.ux.Scheduler.mixin.SchedulerPanel', 'Ext.ux.Scheduler.view.dependency.Mixin'],
    alias: ['widget.schedulergrid', 'widget.schedulerpanel'],
    alternateClassName: 'Ext.ux.Scheduler.SchedulerPanel',
    viewType: 'schedulergridview',
    initComponent: function() {
        this['callParent'](arguments);
        this['getSchedulingView']()._initializeSchedulerView()
    }
}, function() {
    this['override'](Ext.ux.Scheduler['mixin']['SchedulerPanel']['prototype']['inheritables']() || {})
});
Ext.define('Ext.ux.Scheduler.patches.TreeNavigationModel', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.tree.NavigationModel',
    minVersion: '6.0.0',
    maxVersion: '6.0.2',
    overrides: {
        onAsterisk: function() {
            if (!this['view']['ownerCt']['expandAll']) {
                this['view']['lockingPartner']['ownerCt']['expandAll']();
                return
            };
            this['callParent'](arguments)
        }
    }
});
Ext.define('Ext.ux.Scheduler.panel.TimelineTreePanel', {
    extend: 'Ext.tree.Panel',
    requires: ['Ext.grid.Panel', 'Ext.data.TreeStore', 'Ext.ux.Scheduler.mixin.FilterableTreeView', 'Ext.ux.Scheduler.patches.TreeNavigationModel'],
    mixins: ['Ext.ux.Scheduler.mixin.Localizable', 'Ext.ux.Scheduler.mixin.TimelinePanel'],
    alias: ['widget.timelinetree'],
    useArrows: true,
    rootVisible: false,
    lockedXType: 'treepanel',
    isTimelineTreePanel: true,
    initComponent: function() {
        this['callParent'](arguments);
        this['getSchedulingView']()._initializeTimelineView()
    }
}, function() {
    this['override'](Ext.ux.Scheduler['mixin']['TimelinePanel']['prototype']['inheritables']() || {})
});
Ext.define('Ext.ux.Scheduler.panel.SchedulerTree', {
    extend: 'Ext.ux.Scheduler.panel.TimelineTreePanel',
    mixins: ['Ext.ux.Scheduler.mixin.SchedulerPanel', 'Ext.ux.Scheduler.view.dependency.Mixin'],
    alias: ['widget.schedulertree'],
    viewType: 'schedulergridview',
    setMode: function(_0xecbcx1) {
        if (_0xecbcx1 !== 'horizontal') {
            Ext['Error']['raise']('Ext.ux.Scheduler.panel.SchedulerTree only support horizontal mode')
        }
    },
    initComponent: function() {
        this['callParent'](arguments);
        this['getSchedulingView']()._initializeSchedulerView()
    }
}, function() {
    this['override'](Ext.ux.Scheduler['mixin']['SchedulerPanel']['prototype']['inheritables']() || {})
});
Ext.define('Ext.ux.Scheduler.patches.BufferedRenderer', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.grid.plugin.BufferedRenderer',
    minVersion: '6.0.2',
    overrides: {
        onRangeFetched: function(_0xecbcx4, _0xecbcx9, _0xecbcx5, _0xecbcx6, _0xecbcx3) {
            if (this['view']['all']['endIndex'] < this['view']['all']['startIndex']) {
                return
            };
            var _0xecbcx2 = this['view']['onFocusLeave'];
            this['view']['onFocusLeave'] = function() {
                _0xecbcx2['call'](this, {
                    isScroll: true
                })
            };
            var _0xecbcx1 = this['callParent'](arguments);
            this['view']['onFocusLeave'] = _0xecbcx2;
            return _0xecbcx1
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.BufferedRenderer_6_2_1', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.grid.plugin.BufferedRenderer',
    minVersion: '6.2.1',
    applyFn: function() {
        if (Ext['isIE11']) {
            Ext.define(null, {
                override: 'Ext.grid.plugin.BufferedRenderer',
                getFirstVisibleRowIndex: function(_0xecbcxd, _0xecbcx5, _0xecbcx2, _0xecbcx9) {
                    var _0xecbcx7 = this,
                        _0xecbcxa = _0xecbcx7['view'],
                        _0xecbcxe = _0xecbcxa['all'],
                        _0xecbcx1 = _0xecbcxe['elements'],
                        _0xecbcx3 = _0xecbcx7['viewClientHeight'],
                        _0xecbcx6, _0xecbcx11, _0xecbcx8 = _0xecbcx7['bodyTop'];
                    if (_0xecbcxe['getCount']() && _0xecbcx7['variableRowHeight']) {
                        if (!arguments['length']) {
                            _0xecbcxd = _0xecbcxe['startIndex'];
                            _0xecbcx5 = _0xecbcxe['endIndex'];
                            _0xecbcx2 = _0xecbcx7['scrollTop'];
                            _0xecbcx9 = _0xecbcx2 + _0xecbcx3;
                            if (_0xecbcx8 > _0xecbcx9 || _0xecbcx8 + _0xecbcx7['bodyHeight'] < _0xecbcx2) {
                                _0xecbcx7['teleported'] = true;
                                return Math['floor'](_0xecbcx7['scrollTop'] / _0xecbcx7['rowHeight'])
                            };
                            _0xecbcx6 = _0xecbcxd + Math['min'](_0xecbcx7['numFromEdge'] + ((_0xecbcx7['lastScrollDirection'] === -1) ? _0xecbcx7['leadingBufferZone'] : _0xecbcx7['trailingBufferZone']), Math['floor']((_0xecbcx5 - _0xecbcxd) / 2))
                        } else {
                            if (_0xecbcxd === _0xecbcx5) {
                                return _0xecbcx5
                            };
                            _0xecbcx6 = _0xecbcxd + Math['floor']((_0xecbcx5 - _0xecbcxd) / 2)
                        };
                        var _0xecbcx4 = _0xecbcx1[_0xecbcx6];
                        _0xecbcx11 = _0xecbcx8 + _0xecbcx4['offsetTop'];
                        if (_0xecbcx11 + _0xecbcx4['offsetHeight'] <= _0xecbcx2 && _0xecbcx4['offsetHeight']) {
                            return _0xecbcx7['getFirstVisibleRowIndex'](_0xecbcx6 + 1, _0xecbcx5, _0xecbcx2, _0xecbcx9)
                        };
                        if (_0xecbcx11 <= _0xecbcx2) {
                            return _0xecbcx6
                        } else {
                            if (_0xecbcx6 !== _0xecbcxd) {
                                return _0xecbcx7['getFirstVisibleRowIndex'](_0xecbcxd, _0xecbcx6 - 1, _0xecbcx2, _0xecbcx9)
                            }
                        }
                    };
                    return Math['floor'](_0xecbcx7['scrollTop'] / _0xecbcx7['rowHeight'])
                }
            })
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.CellContext', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.grid.CellContext',
    minVersion: '6.0.0',
    maxVersion: '6.2.0',
    applyFn: function() {
        var _0xecbcx1 = {
            setAll: function(_0xecbcx5, _0xecbcx3, _0xecbcx4, _0xecbcx2, _0xecbcx9) {
                var _0xecbcx6 = this;
                if (_0xecbcx9 && _0xecbcx4 == -1 && _0xecbcx5 !== _0xecbcx6['view']) {
                    _0xecbcx5 = _0xecbcx6['view'];
                    _0xecbcx4 = _0xecbcx5['getVisibleColumnManager']()['indexOf'](_0xecbcx9)
                };
                return this['callParent'](arguments)
            }
        };
        if (Ext['getVersion']()['isGreaterThanOrEqual']('6.0.1')) {
            _0xecbcx1['setPosition'] = function(_0xecbcx5, _0xecbcx2) {
                _0xecbcx5 = _0xecbcx5 || 0;
                _0xecbcx2 = _0xecbcx2 || 0;
                return this['callParent'](arguments)
            }
        };
        Ext['override'](Ext['grid'].CellContext, _0xecbcx1)
    }
});
Ext.define('Ext.ux.Scheduler.patches.CellContext_6_2_0', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    minVersion: '6.2.0',
    maxVersion: '6.2.1',
    target: 'Ext.grid.CellContext',
    overrides: {
        setView: function(_0xecbcx1) {
            this['view'] = _0xecbcx1;
            this['refresh']()
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.CellEditing', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.grid.plugin.CellEditing',
    maxVersion: '6.0.2',
    overrides: {
        activateCell: function(_0xecbcx1) {
            var _0xecbcx5 = this['callParent'](arguments);
            if (!!_0xecbcx5) {
                var _0xecbcx2 = this['getEditor'](_0xecbcx1['record'], _0xecbcx1['column']);
                if (_0xecbcx2) {
                    _0xecbcx2['el']['skipGarbageCollection'] = true;
                    _0xecbcx2['el']['select']('*')['each'](function(_0xecbcx3) {
                        Ext['get'](_0xecbcx3)['skipGarbageCollection'] = true
                    })
                }
            };
            return _0xecbcx5
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.CellEditor', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.grid.CellEditor',
    minVersion: '6.0.2',
    maxVersion: '6.2.1',
    overrides: {
        onEditComplete: function(_0xecbcx2, _0xecbcx1) {
            var _0xecbcx3 = this,
                _0xecbcx5 = Ext['Element']['getActiveElement']();
            _0xecbcx3['editing'] = false;
            _0xecbcx3['boundEl'] = _0xecbcx3['context']['getCell']();
            if (_0xecbcx3['boundEl']) {
                _0xecbcx3['restoreCell']();
                if (_0xecbcx3['boundEl']['contains'](_0xecbcx5) && _0xecbcx3['boundEl']['dom'] !== _0xecbcx5) {
                    _0xecbcx3['boundEl']['focus']()
                }
            };
            if (!_0xecbcx2) {
                _0xecbcx3['cacheElement']()
            };
            _0xecbcx3['superclass']['onEditComplete']['apply'](_0xecbcx3, arguments);
            if (_0xecbcx1) {
                _0xecbcx3['editingPlugin']['cancelEdit'](_0xecbcx3)
            } else {
                _0xecbcx3['editingPlugin']['onEditComplete'](_0xecbcx3, _0xecbcx3['getValue'](), _0xecbcx3['startValue'])
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.DomScroller', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.scroll.DomScroller',
    maxVersion: '6.2.0',
    overrides: {
        privates: {
            convertX: function(_0xecbcx1) {
                if (_0xecbcx1 == null) {
                    return null
                };
                return this['callParent'](arguments)
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.DragZone', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.dd.DragZone',
    minVersion: '6.2.0',
    overrides: {
        unreg: function() {
            try {
                this['callParent'](arguments)
            } catch (a) {}
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.DragZoneDupIds', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.dd.DragZone',
    minVersion: '6.0.2',
    reportUrl: 'https://www.sencha.com/forum/showthread.php?338467-DragZone-duplicates-DOM-ids-which-leads-to-error-if-one-Ext-get()s-duplicated-element',
    obsoleteTestName: 'patches/005_dragzone_dup_ids.t.js',
    description: ['Drag zone clones dragged element into drag status proxy without substituting cloned element id, thus we might', 'hit the case when there are two or more elements with the same id in the DOM. If such original element has been', 'accessed before via Ext.get(), i.e. it is cached in Ext.dom.Element cache, then accessing the similar element', 'inside drag proxy with Ext.get() will lead to duplicate ids exception thrown from Ext.get()'].join(' '),
    overrides: {
        onInitDrag: function(_0xecbcx1, _0xecbcx3) {
            var _0xecbcx2 = this,
                _0xecbcx5 = _0xecbcx2['dragData']['ddel']['cloneNode'](true);
            _0xecbcx5['id'] = Ext['id']();
            _0xecbcx2['proxy']['update'](_0xecbcx5);
            _0xecbcx2['onStartDrag'](_0xecbcx1, _0xecbcx3);
            return true
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.Element', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: ['Ext.dom.Element'],
    applyFn: function() {
        Ext['override'](Ext['dom'].Element, {
            pxRe: /^-?\d+(?:\.\d*)?px$/i,
            getLocalX: function() {
                var _0xecbcx5 = this,
                    _0xecbcx2, _0xecbcx1 = _0xecbcx5['getStyle']('left');
                if (!_0xecbcx1 || _0xecbcx1 === 'auto') {
                    _0xecbcx1 = 0
                } else {
                    if (this['pxRe']['test'](_0xecbcx1)) {
                        _0xecbcx1 = parseFloat(_0xecbcx1)
                    } else {
                        _0xecbcx1 = _0xecbcx5['getX']();
                        _0xecbcx2 = _0xecbcx5['dom']['offsetParent'];
                        if (_0xecbcx2) {
                            _0xecbcx1 -= Ext['fly'](_0xecbcx2)['getX']()
                        }
                    }
                };
                return _0xecbcx1
            }
        })
    }
});
Ext.define('Ext.ux.Scheduler.patches.Element_6_5', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: ['Ext.dom.Element'],
    minVersion: '6.5.0',
    maxVersion: '6.5.1',
    applyFn: function() {
        if (Ext['isIE10p']) {
            Ext['override'](Ext['dom'].Element, {
                selectText: function() {
                    try {
                        this['callParent'](arguments)
                    } catch (a) {}
                }
            })
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.Explorer', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: ['Ext.util.CSS'],
    minVersion: '6.0.0',
    maxVersion: '6.0.1',
    applyFn: function() {
        if (Ext['isIE9m']) {
            Ext['util']['CSS']['createStyleSheet']('.' + Ext['baseCSSPrefix'] + 'column-header-trigger { z-index: 10; }')
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.LockableGridEmptyText', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.grid.locking.Lockable',
    minVersion: '6.2.0',
    maxVersion: '6.4.9',
    reportUrl: 'https://www.sencha.com/forum/showthread.php?338759-Lockable-grid-empty-text-is-not-visible-due-to-lockable-sync-skipping&p=1177730',
    obsoleteTestName: 'patches/006_lockable_grid_empty_text.t.js',
    description: ['Lockable grid skips locked/normal grid layout synchronization in case there no rows rendered ', 'This breaks empty text display, the element is attached to corresponding grid view but it \'s occluded', 'and thus isn\'t visible, due to layout synchronization syncking skip.'].join(''),
    overrides: {
        syncLockableLayout: function() {
            var _0xecbcx1 = this;
            _0xecbcx1['callParent']();
            if (!_0xecbcx1['store']['getCount']() && (_0xecbcx1['lockedGrid']['getEmptyText']() || _0xecbcx1['normalGrid']['getEmptyText']()) && !_0xecbcx1['afterLayoutListener']) {
                _0xecbcx1['afterLayoutListener'] = Ext['on']({
                    afterlayout: _0xecbcx1['doSyncLockableLayout'],
                    scope: _0xecbcx1,
                    single: true
                })
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.Region', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.util.Region',
    maxVersion: '6.2.0',
    obsoleteTestName: 'patches/007_region.t.js',
    overrides: {
        getOffsetsTo: function(_0xecbcx1) {
            return {
                x: this['x'] - _0xecbcx1['x'],
                y: this['y'] - _0xecbcx1['y']
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.RowSynchronizer', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.grid.locking.RowSynchronizer',
    minVersion: '6.0.0',
    maxVersion: '6.0.1',
    overrides: {
        finish: function(_0xecbcx1) {
            if (!_0xecbcx1) {
                return
            };
            return this['callParent'](arguments)
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TablePanel', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.panel.Table',
    applyFn: function() {
        var _0xecbcx1 = {};
        if (Ext['getVersion']()['equals']('6.0.1.250')) {
            _0xecbcx1['ensureVisible'] = function(_0xecbcx2, _0xecbcx5) {
                if (_0xecbcx5 && _0xecbcx5['column'] && this['getVisibleColumnManager']()['indexOf'](_0xecbcx5['column']) === -1) {
                    return
                };
                this['callParent'](arguments)
            }
        };
        Ext['ClassManager']['get'](this['target'])['override'](_0xecbcx1)
    }
});
Ext.define('Ext.ux.Scheduler.patches.TablePanelScroll6.2', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.panel.Table',
    minVersion: '6.2.0',
    overrides: {
        afterRender: function() {
            this['callParent'](arguments);
            if (this['lockedGrid']) {
                this['lockedGrid']['getView']()['relayEvents'](this['getScrollable'](), ['scrollend']);
                this['normalGrid']['getView']()['relayEvents'](this['getScrollable'](), ['scrollend'])
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TablePanel_6_2_1', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.panel.Table',
    minVersion: '6.2.1',
    overrides: {
        privates: {
            initFocusableElement: function() {},
            doEnsureVisible: function(_0xecbcx6, _0xecbcxb) {
                if (this['lockable']) {
                    return this['ensureLockedVisible'](_0xecbcx6, _0xecbcxb)
                };
                if (typeof _0xecbcx6 !== 'number' && !_0xecbcx6['isEntity']) {
                    _0xecbcx6 = this['store']['getById'](_0xecbcx6)
                };
                var _0xecbcxa = this,
                    _0xecbcx8 = _0xecbcxa['getView'](),
                    _0xecbcx3 = _0xecbcx8['getNode'](_0xecbcx6),
                    _0xecbcx9 = _0xecbcxa['ownerGrid']['lockable'],
                    _0xecbcxe, _0xecbcxf, _0xecbcx1, _0xecbcx2, _0xecbcxd, _0xecbcxc, _0xecbcx7, _0xecbcx4, _0xecbcx5, _0xecbcx11;
                if (_0xecbcxb) {
                    _0xecbcxe = _0xecbcxb['callback'];
                    _0xecbcxf = _0xecbcxb['scope'];
                    _0xecbcx1 = _0xecbcxb['animate'];
                    _0xecbcx2 = _0xecbcxb['highlight'];
                    _0xecbcxd = _0xecbcxb['select'];
                    _0xecbcxc = _0xecbcxb['focus'];
                    _0xecbcx5 = _0xecbcxb['column']
                };
                if (_0xecbcxa['deferredEnsureVisible']) {
                    _0xecbcxa['deferredEnsureVisible']['destroy']()
                };
                if (!_0xecbcx8['componentLayoutCounter']) {
                    _0xecbcxa['deferredEnsureVisible'] = _0xecbcx8['on']({
                        resize: _0xecbcxa['doEnsureVisible'],
                        args: Ext['Array']['slice'](arguments),
                        scope: _0xecbcxa,
                        single: true,
                        destroyable: true
                    });
                    return
                };
                if (typeof _0xecbcx5 === 'number') {
                    _0xecbcx5 = _0xecbcxa['ownerGrid']['getVisibleColumnManager']()['getColumns']()[_0xecbcx5]
                };
                if (_0xecbcx3) {
                    _0xecbcx7 = _0xecbcx9 ? _0xecbcxa['ownerGrid']['getScrollable']() : _0xecbcx8['getScrollable']();
                    if (_0xecbcx7) {
                        if (_0xecbcx5) {
                            _0xecbcx11 = Ext['fly'](_0xecbcx3)['selectNode'](_0xecbcx5['getCellSelector']())
                        };
                        if (_0xecbcx9 && _0xecbcx5) {
                            _0xecbcx7['scrollIntoView'](_0xecbcx3, false);
                            _0xecbcx8['getScrollable']()['scrollIntoView'](_0xecbcx11 || _0xecbcx3, true, _0xecbcx1, _0xecbcx2)
                        } else {
                            _0xecbcx7['scrollIntoView'](_0xecbcx11 || _0xecbcx3, !!_0xecbcx5, _0xecbcx1, _0xecbcx2)
                        }
                    };
                    if (!_0xecbcx6['isEntity']) {
                        _0xecbcx6 = _0xecbcx8['getRecord'](_0xecbcx3)
                    };
                    if (_0xecbcxd) {
                        _0xecbcx8['getSelectionModel']()['select'](_0xecbcx6)
                    };
                    if (_0xecbcxc) {
                        _0xecbcx8['getNavigationModel']()['setPosition'](_0xecbcx6, 0)
                    };
                    Ext['callback'](_0xecbcxe, _0xecbcxf || _0xecbcxa, [true, _0xecbcx6, _0xecbcx3])
                } else {
                    if (_0xecbcx8['bufferedRenderer']) {
                        _0xecbcx8['bufferedRenderer']['scrollTo'](_0xecbcx6, {
                            animate: _0xecbcx1,
                            highlight: _0xecbcx2,
                            select: _0xecbcxd,
                            focus: _0xecbcxc,
                            column: _0xecbcx5,
                            callback: function(_0xecbcx15, _0xecbcx10, _0xecbcx17) {
                                Ext['callback'](_0xecbcxe, _0xecbcxf || _0xecbcxa, [true, _0xecbcx10, _0xecbcx17])
                            }
                        })
                    } else {
                        Ext['callback'](_0xecbcxe, _0xecbcxf || _0xecbcxa, [false, null])
                    }
                }
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TableView', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.view.Table',
    minVersion: '6.0.1',
    maxVersion: '6.0.1.9999',
    overrides: {
        suspendCellEditing: function(_0xecbcx1) {
            var _0xecbcx5 = _0xecbcx1,
                _0xecbcx2 = _0xecbcx5['activeEditor'];
            if (_0xecbcx2 && _0xecbcx2['editing']) {
                _0xecbcx5['suspendedEditor'] = _0xecbcx2;
                _0xecbcx5['suspendEvents']();
                _0xecbcx2['suspendEvents']();
                _0xecbcx2['cancelEdit'](true);
                _0xecbcx2['resumeEvents']();
                _0xecbcx5['resumeEvents']()
            }
        },
        resumeCellEditing: function(_0xecbcx5, _0xecbcx2) {
            var _0xecbcx4 = _0xecbcx5,
                _0xecbcx3 = _0xecbcx4['activeEditor'] = _0xecbcx4['suspendedEditor'],
                _0xecbcx1;
            if (_0xecbcx3) {
                _0xecbcx4['suspendEvents']();
                _0xecbcx3['suspendEvents']();
                _0xecbcx1 = _0xecbcx4['activateCell'](_0xecbcx2, true, true);
                _0xecbcx3['field'] && _0xecbcx3['field']['focus'](false, true);
                _0xecbcx3['resumeEvents']();
                _0xecbcx4['resumeEvents']()
            };
            return _0xecbcx1
        },
        suspendActionableMode: function() {
            var _0xecbcx4 = this,
                _0xecbcx2 = _0xecbcx4['grid']['actionables'],
                _0xecbcx1 = _0xecbcx2['length'],
                _0xecbcx3;
            for (_0xecbcx3 = 0; _0xecbcx3 < _0xecbcx1; _0xecbcx3++) {
                var _0xecbcx5 = _0xecbcx2[_0xecbcx3];
                if (Ext['grid']['plugin']['CellEditing'] && _0xecbcx5 instanceof Ext['grid']['plugin']['CellEditing']) {
                    _0xecbcx4['suspendCellEditing'](_0xecbcx5)
                }
            }
        },
        resumeActionableMode: function(_0xecbcx5) {
            var _0xecbcx9 = this,
                _0xecbcx3 = _0xecbcx9['grid']['actionables'],
                _0xecbcx2 = _0xecbcx3['length'],
                _0xecbcx6, _0xecbcx1;
            _0xecbcx9['toggleChildrenTabbability'](false);
            for (_0xecbcx6 = 0; _0xecbcx6 < _0xecbcx2; _0xecbcx6++) {
                var _0xecbcx4 = _0xecbcx3[_0xecbcx6];
                if (!_0xecbcx1 && Ext['grid']['plugin']['CellEditing'] && _0xecbcx4 instanceof Ext['grid']['plugin']['CellEditing']) {
                    _0xecbcx1 = _0xecbcx9['resumeCellEditing'](_0xecbcx4, _0xecbcx5)
                }
            };
            if (!_0xecbcx1) {
                _0xecbcx9['activateCell'](_0xecbcx5)
            }
        },
        saveFocusState: function() {
            var _0xecbcx6 = this,
                _0xecbcx9 = _0xecbcx6['dataSource'],
                _0xecbcx1 = _0xecbcx6['actionableMode'],
                _0xecbcx5 = _0xecbcx6['getNavigationModel'](),
                _0xecbcx3 = _0xecbcx1 ? _0xecbcx6['actionPosition'] : _0xecbcx5['getPosition'](true),
                _0xecbcx2 = Ext['Element']['getActiveElement'](true),
                _0xecbcxa = _0xecbcx3 && _0xecbcx3['view'] === _0xecbcx6 && _0xecbcx3['getCell'](),
                _0xecbcx4, _0xecbcx7;
            if (_0xecbcxa && _0xecbcxa['contains'](_0xecbcx2)) {
                _0xecbcx3 = _0xecbcx3['clone']();
                _0xecbcx2['suspendFocusEvents']();
                if (_0xecbcx1) {
                    _0xecbcx6['suspendActionableMode']()
                } else {
                    _0xecbcx5['setPosition']()
                };
                _0xecbcx2['resumeFocusEvents']();
                return function() {
                    if (_0xecbcx9['getCount']()) {
                        _0xecbcx4 = Math['min'](_0xecbcx3['rowIdx'], _0xecbcx6['all']['getCount']() - 1);
                        _0xecbcx7 = Math['min'](_0xecbcx3['colIdx'], _0xecbcx6['getVisibleColumnManager']()['getColumns']()['length'] - 1);
                        _0xecbcx3 = new Ext['grid'].CellContext(_0xecbcx6)['setPosition'](_0xecbcx9['contains'](_0xecbcx3['record']) ? _0xecbcx3['record'] : _0xecbcx4, _0xecbcx7);
                        if (_0xecbcx1) {
                            _0xecbcx6['resumeActionableMode'](_0xecbcx3)
                        } else {
                            _0xecbcx5['setPosition'](_0xecbcx3, null, null, null, true)
                        }
                    } else {
                        _0xecbcx3['column']['focus']()
                    }
                }
            };
            return Ext['emptyFn']
        },
        activateCell: function() {
            return true
        },
        onFocusEnter: function(_0xecbcx1) {
            if (!Ext['fly'](_0xecbcx1['target'])['hasCls']('sch-event')) {
                this['callParent'](arguments)
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TableView2', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.view.Table',
    minVersion: '6.0.2',
    maxVersion: '6.2.0',
    overrides: {
        privates: {
            setActionableMode: function(_0xecbcx7, _0xecbcx6) {
                var _0xecbcxd = this,
                    _0xecbcx1 = _0xecbcxd['getNavigationModel'](),
                    _0xecbcx5, _0xecbcx11 = _0xecbcxd['grid']['actionables'],
                    _0xecbcx9 = _0xecbcx11['length'],
                    _0xecbcx3, _0xecbcx4, _0xecbcx2, _0xecbcxe = false,
                    _0xecbcx8;
                if (_0xecbcxd['actionableMode'] === _0xecbcx7) {
                    if (!_0xecbcx7 || _0xecbcx6['isEqual'](_0xecbcxd['actionPosition'])) {
                        return false
                    }
                };
                if (_0xecbcx7) {
                    if (_0xecbcx6 && (_0xecbcx6['view'] === _0xecbcxd || (_0xecbcx6['view'] === (_0xecbcx8 = _0xecbcxd['lockingPartner']) && _0xecbcx8['actionableMode']))) {
                        _0xecbcxe = _0xecbcxd['activateCell'](_0xecbcx6)
                    };
                    return _0xecbcxe
                } else {
                    _0xecbcx5 = Ext['fly'](Ext['Element']['getActiveElement']());
                    if (_0xecbcxd['el']['contains'](_0xecbcx5)) {
                        _0xecbcx4 = (_0xecbcxd['actionPosition'] && _0xecbcxd['actionPosition']['record']) || _0xecbcxd['getRecord'](_0xecbcx5);
                        _0xecbcx2 = _0xecbcxd['getHeaderByCell'](_0xecbcx5['findParent'](_0xecbcxd['getCellSelector']()));
                        if (!_0xecbcx6) {
                            _0xecbcx6 = new Ext['grid'].CellContext(_0xecbcxd)['setPosition'](_0xecbcx4 || 0, _0xecbcx2 || 0)
                        };
                        _0xecbcxd['_leavingActionableMode'] = true;
                        _0xecbcx6['getCell']()['focus']();
                        _0xecbcxd['_leavingActionableMode'] = false;
                        _0xecbcx5 = Ext['fly'](Ext['Element']['getActiveElement']());
                        if (!(_0xecbcxd['el']['contains'](_0xecbcx5) && _0xecbcx5['is'](_0xecbcxd['getCellSelector']()))) {
                            _0xecbcx6 = null
                        }
                    };
                    for (_0xecbcx3 = 0; _0xecbcx3 < _0xecbcx9; _0xecbcx3++) {
                        if (_0xecbcx11[_0xecbcx3]['deactivate']) {
                            _0xecbcx11[_0xecbcx3]['deactivate']()
                        }
                    };
                    if (_0xecbcxd['actionRow']) {
                        _0xecbcxd['actionRow']['saveTabbableState']({
                            skipSelf: true,
                            includeSaved: false
                        })
                    };
                    if (_0xecbcxd['destroyed']) {
                        return false
                    };
                    _0xecbcxd['actionableMode'] = _0xecbcxd['ownerGrid']['actionableMode'] = false;
                    _0xecbcxd['actionPosition'] = _0xecbcx1['actionPosition'] = _0xecbcxd['actionRow'] = null;
                    if (_0xecbcx6) {
                        _0xecbcx1['setPosition'](_0xecbcx6)
                    }
                }
            }
        },
        saveFocusState: function() {
            var _0xecbcx6 = this,
                _0xecbcx9 = _0xecbcx6['dataSource'],
                _0xecbcx1 = _0xecbcx6['actionableMode'],
                _0xecbcx5 = _0xecbcx6['getNavigationModel'](),
                _0xecbcx3 = _0xecbcx1 ? _0xecbcx6['actionPosition'] : _0xecbcx5['getPosition'](true),
                _0xecbcx2 = Ext['Element']['getActiveElement'](true),
                _0xecbcxa = _0xecbcx3 && _0xecbcx3['view'] === _0xecbcx6 && _0xecbcx3['getCell'](),
                _0xecbcx4, _0xecbcx7;
            if (_0xecbcxa && _0xecbcxa['contains'](_0xecbcx2)) {
                _0xecbcx3 = _0xecbcx3['clone']();
                _0xecbcx2['suspendFocusEvents']();
                if (_0xecbcx1) {
                    _0xecbcx6['suspendActionableMode']()
                } else {
                    _0xecbcx5['setPosition']()
                };
                _0xecbcx2['resumeFocusEvents']();
                return function() {
                    if (_0xecbcx9['getCount']()) {
                        _0xecbcx4 = Math['min'](_0xecbcx3['rowIdx'], _0xecbcx6['all']['getCount']() - 1);
                        _0xecbcx7 = Math['min'](_0xecbcx3['colIdx'], _0xecbcx6['getVisibleColumnManager']()['getColumns']()['length'] - 1);
                        _0xecbcx3 = new Ext['grid'].CellContext(_0xecbcx6)['setPosition'](_0xecbcx9['contains'](_0xecbcx3['record']) ? _0xecbcx3['record'] : _0xecbcx4, _0xecbcx7);
                        if (_0xecbcx1 && !_0xecbcx6['_leavingActionableMode']) {
                            _0xecbcx6['resumeActionableMode'](_0xecbcx3)
                        } else {
                            _0xecbcx5['setPosition'](_0xecbcx3, null, null, null, true)
                        }
                    } else {
                        _0xecbcx3['column']['focus']()
                    }
                }
            };
            return Ext['emptyFn']
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TableView_6_0_2', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.view.Table',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        handleUpdate: function(_0xecbcx5, _0xecbcx23, _0xecbcx13, _0xecbcx17, _0xecbcx25, _0xecbcx1f) {
            _0xecbcx13 = _0xecbcx13 || Ext['data']['Model']['EDIT'];
            var _0xecbcx7 = this,
                _0xecbcx26 = _0xecbcx7['store']['indexOf'](_0xecbcx23),
                _0xecbcx21 = _0xecbcx7['rowTpl'],
                _0xecbcx18 = _0xecbcx7['markDirty'],
                _0xecbcx14 = _0xecbcx7['dirtyCls'],
                _0xecbcx24 = _0xecbcx13 !== Ext['data']['Model']['EDIT'],
                _0xecbcx12 = [],
                _0xecbcxf = _0xecbcx7['variableRowHeight'],
                _0xecbcx2 = 0,
                _0xecbcx19 = _0xecbcx7['ownerCt'],
                _0xecbcx10 = _0xecbcx7['cellFly'] || (_0xecbcx7['self']['prototype']['cellFly'] = new Ext['dom'].Fly()),
                _0xecbcx1b, _0xecbcx4, _0xecbcx3, _0xecbcx6, _0xecbcx1, _0xecbcxb, _0xecbcx20, _0xecbcx1d, _0xecbcx9, _0xecbcx1c, _0xecbcxd, _0xecbcx1e, _0xecbcxc, _0xecbcx15, _0xecbcxe, _0xecbcx1a, _0xecbcx16, _0xecbcx22, _0xecbcx8, _0xecbcx11;
            if (_0xecbcx7['viewReady']) {
                _0xecbcx1b = _0xecbcx7['getNodeByRecord'](_0xecbcx23);
                if (_0xecbcx1b) {
                    if (_0xecbcx23['isCollapsedPlaceholder']) {
                        Ext['fly'](_0xecbcx1b)['syncContent'](_0xecbcx7['createRowElement'](_0xecbcx23, _0xecbcx7['indexOfRow'](_0xecbcx23)));
                        return
                    };
                    _0xecbcx1d = _0xecbcx7['overItemCls'];
                    _0xecbcx9 = _0xecbcx7['ownerCt']['getVisibleColumnManager']()['getColumns']();
                    if (_0xecbcx1f) {
                        _0xecbcx12 = _0xecbcx9;
                        _0xecbcx2 = 1
                    } else {
                        for (_0xecbcx1e = 0, _0xecbcxd = _0xecbcx9['length']; _0xecbcx1e < _0xecbcxd; _0xecbcx1e++) {
                            _0xecbcx1c = _0xecbcx9[_0xecbcx1e];
                            if (_0xecbcx1c['preventUpdate']) {
                                _0xecbcx15 = Ext['fly'](_0xecbcx1b)['down'](_0xecbcx1c['getCellSelector'](), true);
                                if (_0xecbcx15 && !_0xecbcx24 && _0xecbcx18) {
                                    _0xecbcx10['attach'](_0xecbcx15);
                                    if (_0xecbcx23['isModified'](_0xecbcx1c['dataIndex'])) {
                                        _0xecbcx10['addCls'](_0xecbcx14)
                                    } else {
                                        _0xecbcx10['removeCls'](_0xecbcx14)
                                    }
                                }
                            } else {
                                _0xecbcxc = _0xecbcx7['shouldUpdateCell'](_0xecbcx23, _0xecbcx1c, _0xecbcx17);
                                if (_0xecbcxc) {
                                    _0xecbcx2 = _0xecbcx2 | _0xecbcxc;
                                    _0xecbcx12[_0xecbcx12['length']] = _0xecbcx1c;
                                    _0xecbcxf = _0xecbcxf || _0xecbcx1c['variableRowHeight']
                                }
                            }
                        }
                    };
                    _0xecbcx7['fireEvent']('beforeitemupdate', _0xecbcx23, _0xecbcx26, _0xecbcx1b, _0xecbcx12);
                    if (_0xecbcx7['getRowClass'] || !_0xecbcx7['getRowFromItem'](_0xecbcx1b) || (_0xecbcx2 & 1) || (_0xecbcx1b['tBodies'][0]['childNodes']['length'] > 1)) {
                        _0xecbcx8 = _0xecbcx1b['_extData'];
                        _0xecbcx3 = _0xecbcx7['createRowElement'](_0xecbcx23, _0xecbcx7['indexOfRow'](_0xecbcx23), _0xecbcx12);
                        if (Ext['fly'](_0xecbcx1b, '_internal')['hasCls'](_0xecbcx1d)) {
                            Ext['fly'](_0xecbcx3)['addCls'](_0xecbcx1d)
                        };
                        if (Ext['isIE9m'] && _0xecbcx1b['mergeAttributes']) {
                            _0xecbcx1b['mergeAttributes'](_0xecbcx3, true)
                        } else {
                            _0xecbcx6 = _0xecbcx3['attributes'];
                            _0xecbcx1 = _0xecbcx6['length'];
                            for (_0xecbcx20 = 0; _0xecbcx20 < _0xecbcx1; _0xecbcx20++) {
                                _0xecbcxb = _0xecbcx6[_0xecbcx20]['name'];
                                if (_0xecbcxb !== 'id') {
                                    _0xecbcx1b['setAttribute'](_0xecbcxb, _0xecbcx6[_0xecbcx20]['value'])
                                }
                            }
                        };
                        if (_0xecbcx8) {
                            _0xecbcx8['isSynchronized'] = false
                        };
                        if (_0xecbcx9['length'] && (_0xecbcx4 = _0xecbcx7['getRow'](_0xecbcx1b))) {
                            _0xecbcx7['updateColumns'](_0xecbcx4, Ext['fly'](_0xecbcx3)['down'](_0xecbcx7['rowSelector'], true), _0xecbcx12)
                        };
                        while (_0xecbcx21) {
                            if (_0xecbcx21['syncContent']) {
                                if (_0xecbcx21['syncContent'](_0xecbcx1b, _0xecbcx3, _0xecbcx17 ? _0xecbcx12 : null) === false) {
                                    break
                                }
                            };
                            _0xecbcx21 = _0xecbcx21['nextTpl']
                        }
                    } else {
                        for (_0xecbcx1e = 0, _0xecbcxd = _0xecbcx12['length']; _0xecbcx1e < _0xecbcxd; _0xecbcx1e++) {
                            _0xecbcx1c = _0xecbcx12[_0xecbcx1e];
                            _0xecbcxe = _0xecbcx1c['dataIndex'];
                            _0xecbcx1a = _0xecbcx23['get'](_0xecbcxe);
                            _0xecbcx15 = Ext['fly'](_0xecbcx1b)['down'](_0xecbcx1c['getCellSelector'](), true);
                            _0xecbcx10['attach'](_0xecbcx15);
                            if (!_0xecbcx24 && _0xecbcx18) {
                                if (_0xecbcx23['isModified'](_0xecbcx1c['dataIndex'])) {
                                    _0xecbcx10['addCls'](_0xecbcx14)
                                } else {
                                    _0xecbcx10['removeCls'](_0xecbcx14)
                                }
                            };
                            _0xecbcx16 = _0xecbcx1c['usingDefaultRenderer'];
                            _0xecbcx22 = _0xecbcx16 ? _0xecbcx1c : _0xecbcx1c['scope'];
                            if (_0xecbcx1c['updater']) {
                                Ext['callback'](_0xecbcx1c['updater'], _0xecbcx22, [_0xecbcx15, _0xecbcx1a, _0xecbcx23, _0xecbcx7, _0xecbcx7['dataSource']], 0, _0xecbcx1c, _0xecbcx19)
                            } else {
                                if (_0xecbcx1c['renderer']) {
                                    _0xecbcx1a = Ext['callback'](_0xecbcx1c['renderer'], _0xecbcx22, [_0xecbcx1a, null, _0xecbcx23, 0, 0, _0xecbcx7['dataSource'], _0xecbcx7], 0, _0xecbcx1c, _0xecbcx19)
                                };
                                _0xecbcx11 = _0xecbcx1a == null || _0xecbcx1a === '';
                                _0xecbcx1a = _0xecbcx11 ? _0xecbcx1c['emptyCellText'] : _0xecbcx1a;
                                if (_0xecbcx1c['producesHTML'] || _0xecbcx11) {
                                    _0xecbcx10['down'](_0xecbcx7['innerSelector'], true)['innerHTML'] = _0xecbcx1a
                                } else {
                                    _0xecbcx10['down'](_0xecbcx7['innerSelector'], true)['childNodes'][0]['data'] = _0xecbcx1a
                                }
                            };
                            if (_0xecbcx7['highlightClass']) {
                                Ext['fly'](_0xecbcx15)['addCls'](_0xecbcx7['highlightClass']);
                                if (!_0xecbcx7['changedCells']) {
                                    _0xecbcx7['self']['prototype']['changedCells'] = [];
                                    _0xecbcx7['prototype']['clearChangedTask'] = new Ext['util'].DelayedTask(_0xecbcx7['clearChangedCells'], _0xecbcx7['prototype']);
                                    _0xecbcx7['clearChangedTask']['delay'](_0xecbcx7['unhighlightDelay'])
                                };
                                _0xecbcx7['changedCells']['push']({
                                    cell: _0xecbcx15,
                                    cls: _0xecbcx7['highlightClass'],
                                    expires: Ext['Date']['now']() + 1000
                                })
                            }
                        }
                    };
                    if (_0xecbcx24 && _0xecbcx18 && !_0xecbcx23['dirty']) {
                        Ext['fly'](_0xecbcx1b, '_internal')['select']('.' + _0xecbcx14)['removeCls'](_0xecbcx14)
                    };
                    if (_0xecbcxf) {
                        Ext['suspendLayouts']()
                    };
                    _0xecbcx7['fireEvent']('itemupdate', _0xecbcx23, _0xecbcx26, _0xecbcx1b);
                    if (_0xecbcxf) {
                        _0xecbcx7['ownerGrid']['updateLayout']();
                        Ext['resumeLayouts'](true)
                    }
                }
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TableView_6_2_0', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    minVersion: '6.2.0',
    maxVersion: '6.2.1',
    target: 'Ext.view.Table',
    overrides: {
        getDefaultFocusPosition: function(_0xecbcx2) {
            var _0xecbcx9 = this,
                _0xecbcx3 = _0xecbcx9['dataSource'],
                _0xecbcx6 = _0xecbcx9['lastFocused'],
                _0xecbcx4 = new Ext['grid'].CellContext(_0xecbcx9)['setPosition'](0, 0),
                _0xecbcx5, _0xecbcx1;
            if (_0xecbcx2) {
                if (_0xecbcx2['isColumn'] && _0xecbcx2['cellFocusable'] !== false) {
                    if (!_0xecbcx6) {
                        _0xecbcx6 = _0xecbcx4
                    };
                    _0xecbcx6['setColumn'](_0xecbcx2);
                    _0xecbcx6['setView'](_0xecbcx2['getView']())
                } else {
                    if (_0xecbcx2['isTableView'] && _0xecbcx2['lastFocused']) {
                        _0xecbcx6 = new Ext['grid'].CellContext(_0xecbcx9)['setPosition'](_0xecbcx2['lastFocused']['record'], 0)
                    }
                }
            };
            if (_0xecbcx6) {
                _0xecbcx1 = _0xecbcx9['getScrollable']();
                if (!_0xecbcx3['contains'](_0xecbcx6['record']) || (_0xecbcx1 && !_0xecbcx1['isInView'](_0xecbcx6['getRow']())['y'])) {
                    _0xecbcx6['setRow'](_0xecbcx3['getAt'](Math['min'](_0xecbcx6['rowIdx'], _0xecbcx3['getCount']() - 1)))
                }
            } else {
                _0xecbcx6 = _0xecbcx4;
                _0xecbcx5 = _0xecbcx9['el']['down'](_0xecbcx9['getCellSelector']() + '[tabIndex="-1"]');
                if (_0xecbcx5) {
                    _0xecbcx6['setPosition'](_0xecbcx9['getRecord'](_0xecbcx5), _0xecbcx9['getHeaderByCell'](_0xecbcx5))
                } else {
                    _0xecbcx6 = null
                }
            };
            return _0xecbcx6
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TimelineGridView', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.ux.Scheduler.view.TimelineGridView',
    minVersion: '6.0.1',
    overrides: {
        initComponent: function() {
            this['callParent'](arguments);
            if (this['rtl']) {
                this['headerCt']['on']('afterlayout', function(_0xecbcx1) {
                    _0xecbcx1['scrollTo'](this['getScrollX']())
                }, this)
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TimelineGridViewScroll6_2', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.ux.Scheduler.view.TimelineGridView',
    minVersion: '6.2.0',
    overrides: {
        scrollVerticallyTo: function(_0xecbcx2, _0xecbcx1) {
            this['up']('timelinegrid,timelinetree')['getScrollable']()['scrollTo'](null, _0xecbcx2, _0xecbcx1)
        },
        getVerticalScroll: function() {
            var _0xecbcx1 = this['up']('timelinegrid,timelinetree')['getScrollable']();
            if (_0xecbcx1['getNormalScroller']) {
                if (_0xecbcx1['getNormalScroller']()) {
                    return _0xecbcx1['getPosition']()['y']
                } else {
                    return 0
                }
            } else {
                return _0xecbcx1['getPosition']()['y']
            }
        }
    }
});
Ext.define('Ext.ux.Scheduler.patches.TimelinePanel', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    target: 'Ext.ux.Scheduler.mixin.TimelinePanel',
    minVersion: '6.2.0',
    applyFn: function() {
        Ext.ux.Scheduler['panel']['TimelineGridPanel'] && Ext.ux.Scheduler['panel']['TimelineGridPanel']['override']({
            hideHeaders: false
        });
        Ext.ux.Scheduler['panel']['TimelineTreePanel'] && Ext.ux.Scheduler['panel']['TimelineTreePanel']['override']({
            hideHeaders: false
        })
    }
});
Ext.define('Ext.ux.Scheduler.patches.TreeModel_6_2_0_981', {
    extend: 'Ext.ux.Scheduler.util.Patch',
    minVersion: '6.2.0.981',
    maxVersion: '6.2.1',
    reportUrl: 'https://www.sencha.com/forum/showthread.php?332274-Ext-data-NodeInterface-appendChild()-is-broken-in-ExtJS-6-2-0-981',
    target: 'Ext.data.TreeModel',
    overrides: {
        updateInfo: function(_0xecbcx6, _0xecbcx2) {
            var _0xecbcx9 = this,
                _0xecbcx5 = _0xecbcx9['phantom'],
                _0xecbcx8;
            _0xecbcx6 = {
                silent: true,
                commit: _0xecbcx6
            };
            if (_0xecbcx2['depth'] != null && _0xecbcx2['depth'] !== _0xecbcx9['data']['depth']) {
                var _0xecbcx7 = {
                        depth: _0xecbcx2['depth'] + 1
                    },
                    _0xecbcx1 = _0xecbcx9['childNodes'],
                    _0xecbcx3 = _0xecbcx1['length'],
                    _0xecbcx4;
                for (_0xecbcx4 = 0; _0xecbcx4 < _0xecbcx3; _0xecbcx4++) {
                    _0xecbcx1[_0xecbcx4]['updateInfo'](_0xecbcx6, _0xecbcx7)
                }
            };
            _0xecbcx8 = _0xecbcx9['set'](_0xecbcx2, _0xecbcx6);
            _0xecbcx9['phantom'] = _0xecbcx5;
            return _0xecbcx8
        }
    }
});
Ext.define('Ext.ux.Scheduler.plugin.CellPlugin', {
    extend: 'Ext.AbstractPlugin',
    alias: 'plugin.scheduler_cellplugin',
    requires: ['Ext.form.field.Base', 'Ext.ux.Scheduler.field.CellEditor', 'Ext.ux.Scheduler.util.Date', 'Ext.ux.Scheduler.eventlayout.Table'],
    mixins: {
        observable: 'Ext.util.Observable'
    },
    frameCls: 'sch-cellplugin-highlighter',
    editingCls: 'sch-cellplugin-highlighter-editing',
    activeCls: 'sch-cellplugin-active',
    frameTemplate: new Ext.Template(['<div class="{cls}" style="width: {width}px; height: {height}px;">', '<div class="sch-cellplugin-border sch-cellplugin-border-horizontal sch-cellplugin-border-top"></div>', '<div class="sch-cellplugin-border sch-cellplugin-border-horizontal sch-cellplugin-border-bottom"></div>', '<div class="sch-cellplugin-border sch-cellplugin-border-vertical sch-cellplugin-border-left"></div>', '<div class="sch-cellplugin-border sch-cellplugin-border-vertical sch-cellplugin-border-right"></div>', '</div>']),
    editor: 'Ext.ux.Scheduler.field.CellEditor',
    singleClickEditing: true,
    dblClickTimeout: 100,
    editing: false,
    context: {},
    position: {},
    selContext: [],
    lockedView: null,
    schedulingView: null,
    timeAxisViewModel: null,
    keyNav: null,
    constructor: function(_0xecbcx1) {
        this['mixins']['observable']['constructor']['call'](this);
        this['callParent'](arguments);
        this['context'] = {};
        this['position'] = {}
    },
    init: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['schedulingView'] = _0xecbcx1['getSchedulingView']();
        _0xecbcx2['lockedView'] = _0xecbcx1['lockedGrid']['getView']();
        _0xecbcx1['getNavigationModel']()['disable']();
        _0xecbcx2['timeAxisViewModel'] = _0xecbcx1['timeAxisViewModel'];
        _0xecbcx2['keyNav'] = new Ext['util'].KeyNav({
            target: _0xecbcx2['lockedView'],
            eventName: 'itemkeydown',
            processEvent: function(_0xecbcx3, _0xecbcx5, _0xecbcx9, _0xecbcx4, _0xecbcx6) {
                _0xecbcx6['stopEvent']();
                return _0xecbcx6
            },
            ignoreInputFields: true,
            up: _0xecbcx2['onKeyUp'],
            down: _0xecbcx2['onKeyDown'],
            right: _0xecbcx2['onKeyRight'],
            left: _0xecbcx2['onKeyLeft'],
            tab: _0xecbcx2['onKeyTab'],
            enter: _0xecbcx2['onKeyEnter'],
            esc: _0xecbcx2['onKeyEsc'],
            scope: _0xecbcx2
        });
        if (_0xecbcx1['bufferedRenderer']) {
            _0xecbcx2['schedulingView']['on']('afterrender', function() {
                _0xecbcx2['schedulingView']['getScrollable']()['on']('scroll', _0xecbcx2['onViewScroll'], _0xecbcx2)
            });
            _0xecbcx2['schedulingView']['on']('itemadd', _0xecbcx2['onItemAdd'], _0xecbcx2)
        };
        _0xecbcx2['handleSingleClickTask'] = new Ext['util'].DelayedTask(_0xecbcx2['handleCellClick'], _0xecbcx2);
        _0xecbcx1['on']({
            headerclick: _0xecbcx2['onContainerClick'],
            zoomchange: _0xecbcx2['destroyHighlighter'],
            scope: _0xecbcx2
        });
        _0xecbcx2['schedulingView']['on']({
            containerclick: _0xecbcx2['onContainerClick'],
            scheduleclick: _0xecbcx2['onCellClick'],
            scheduledblclick: _0xecbcx2['onCellDblClick'],
            eventclick: _0xecbcx2['onEventClick'],
            eventdblclick: _0xecbcx2['onEventDblClick'],
            containerkeydown: _0xecbcx2['onEditorKeyDown'],
            groupcollapse: _0xecbcx2['onGroupCollapse'],
            groupexpand: _0xecbcx2['onGroupExpand'],
            scope: _0xecbcx2
        });
        if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
            _0xecbcx2['schedulingView']['on']('refresh', _0xecbcx2['moveContainerElToSecondaryCanvas'], _0xecbcx2);
            _0xecbcx2['mon'](_0xecbcx2['timeAxisViewModel'], 'update', _0xecbcx2['moveContainerElToSecondaryCanvas'], _0xecbcx2)
        };
        _0xecbcx2['mon'](_0xecbcx2['timeAxisViewModel'], {
            update: _0xecbcx2['onViewModelUpdate'],
            scope: _0xecbcx2
        });
        _0xecbcx2['mon'](_0xecbcx1['getTimeAxis'](), {
            beforereconfigure: _0xecbcx2['onBeforeReconfigure'],
            scope: _0xecbcx2
        });
        _0xecbcx2['bindResourceStore'](_0xecbcx1['getResourceStore']());
        _0xecbcx2['bindEventStore'](_0xecbcx1['getEventStore']());
        _0xecbcx2['lockedView']['on']({
            cellclick: _0xecbcx2['onLockedCellClick'],
            beforeitemkeydown: _0xecbcx2['onBeforeItemKeyDown'],
            scope: _0xecbcx2
        });
        _0xecbcx1['on']('eventstorechange', function(_0xecbcx5, _0xecbcx3, _0xecbcx4) {
            _0xecbcx2['bindEventStore'](_0xecbcx4, true);
            _0xecbcx2['bindEventStore'](_0xecbcx3)
        });
        _0xecbcx1['on']('resourcestorechange', function(_0xecbcx5, _0xecbcx3, _0xecbcx4) {
            _0xecbcx2['bindResourceStore'](_0xecbcx4, true);
            _0xecbcx2['bindResourceStore'](_0xecbcx3)
        })
    },
    moveContainerElToSecondaryCanvas: function() {
        if (this['containerEl']) {
            this['schedulingView']['getSecondaryCanvasEl']()['appendChild'](this['containerEl'])
        }
    },
    getNbrOfTicks: function() {
        return this['schedulingView']['timeAxis']['getCount']()
    },
    onEditorKeyDown: function(_0xecbcx1, _0xecbcx2) {
        switch (_0xecbcx2['getKey']()) {
            case _0xecbcx2['TAB']:
                _0xecbcx2['stopEvent']();
                if (_0xecbcx2['shiftKey']) {
                    this['editPrevious'](_0xecbcx2)
                } else {
                    this['editNext'](_0xecbcx2)
                };
                break;
            case _0xecbcx2['ENTER']:
                this['onEditorKeyEnter']();
                break;
            case _0xecbcx2['ESC']:
                this['cancelEdit'](_0xecbcx2);
                break;
            default:
                break
        }
    },
    onEditorKeyEnter: function() {
        if (this['completeEdit']()) {
            this['beginEditBelow']()
        } else {
            this['showEditorInCell'](this['getEventOrCell'](this['getPosition'](), true))
        }
    },
    destroy: function() {
        this['keyNav']['destroy']();
        this['editor'] && this['editor']['destroy'] && this['editor']['destroy']();
        this['destroyHighlighter']();
        this['callParent'](arguments)
    },
    destroyHighlighter: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['clearSelection']();
        if (_0xecbcx1['editor'] && _0xecbcx1['editor']['el'] && !_0xecbcx1['schedulingView']['destroyed']) {
            _0xecbcx1['schedulingView']['getSecondaryCanvasEl']()['appendChild'](_0xecbcx1['editor']['el']);
            _0xecbcx1['editor']['hide']()
        };
        if (_0xecbcx1['containerEl']) {
            _0xecbcx1['containerEl']['destroy']();
            delete _0xecbcx1['containerEl']
        };
        _0xecbcx1['context'] = {};
        _0xecbcx1['position'] = {}
    },
    onGroupCollapse: function() {
        var _0xecbcx1 = this;
        if (_0xecbcx1['getResourceIndex']() === -1) {
            _0xecbcx1['destroyHighlighter']()
        } else {
            _0xecbcx1['refreshCell']()
        }
    },
    onGroupExpand: function() {
        this['refreshCell']()
    },
    onViewScroll: function() {
        var _0xecbcx2 = this;
        if (_0xecbcx2['containerEl']) {
            var _0xecbcx1 = _0xecbcx2['schedulingView']['getNodeByRecord'](_0xecbcx2['getPosition']()['resource']);
            if (_0xecbcx1) {
                _0xecbcx2['containerEl']['setY'](Ext['fly'](_0xecbcx1)['getY']() - 1)
            }
        }
    },
    onItemAdd: function() {
        var _0xecbcx2 = this,
            _0xecbcx5 = _0xecbcx2['getPosition']()['resource'];
        if (_0xecbcx5) {
            var _0xecbcx1 = _0xecbcx2['schedulingView']['getNodeByRecord'](_0xecbcx5);
            if (_0xecbcx1) {
                _0xecbcx2['containerEl']['show']()
            } else {
                _0xecbcx2['containerEl']['hide']()
            }
        }
    },
    getResourceIndex: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        _0xecbcx2 = _0xecbcx2 || _0xecbcx1['getPosition']()['resource'];
        return _0xecbcx1['schedulingView']['indexOf'](_0xecbcx2)
    },
    getResource: function(_0xecbcx1) {
        return this['schedulingView']['dataSource']['getAt'](_0xecbcx1)
    },
    onResourceAdd: function(_0xecbcx2, _0xecbcx1) {
        this['refreshCell']()
    },
    onResourceRemove: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = this;
        if (_0xecbcx2['getCount']() === 0 || Ext['Array']['indexOf'](_0xecbcx1, _0xecbcx5['getPosition']()['resource']) !== -1) {
            _0xecbcx5['destroyHighlighter']()
        } else {
            _0xecbcx5['refreshCell']()
        }
    },
    onBeforeReconfigure: function(_0xecbcx2) {
        var _0xecbcx1 = this['getPosition']();
        if (!this['startDate'] && Ext['isNumber'](_0xecbcx1['tickIndex'])) {
            this['startDate'] = _0xecbcx2['getAt'](_0xecbcx1['tickIndex'])['getStartDate']()
        }
    },
    onLockedCellClick: function(_0xecbcx5, _0xecbcx7, _0xecbcx2, _0xecbcx1, _0xecbcx3, _0xecbcx9, _0xecbcx6) {
        this['showEditorInCell']({
            tickIndex: this['getPosition']()['tickIndex'] || 0,
            resourceIndex: _0xecbcx9
        }, _0xecbcx6)
    },
    onBeforeItemKeyDown: function(_0xecbcx3, _0xecbcx1, _0xecbcx5, _0xecbcx2, _0xecbcx6) {
        if (!_0xecbcx6['isSpecialKey']()) {
            this['beginEdit']()
        }
    },
    onViewModelUpdate: function(_0xecbcx3) {
        var _0xecbcx2 = this,
            _0xecbcx5 = _0xecbcx3['timeAxis'];
        if (_0xecbcx2['startDate']) {
            var _0xecbcx1 = _0xecbcx5['getTickFromDate'](_0xecbcx2['startDate']);
            if (_0xecbcx1 >= 0) {
                delete _0xecbcx2['startDate'];
                _0xecbcx2['position']['tickIndex'] = _0xecbcx1;
                if (!_0xecbcx2['containerEl']) {
                    _0xecbcx2['renderElement']()
                };
                _0xecbcx2['refreshCell']()
            } else {
                _0xecbcx2['destroyHighlighter']()
            }
        } else {
            _0xecbcx2['refreshCell']()
        }
    },
    refreshCell: function() {
        var _0xecbcx2 = this;
        var _0xecbcx1 = _0xecbcx2['timeAxisViewModel']['getTickWidth']();
        if (_0xecbcx2['containerEl']) {
            _0xecbcx2['containerEl']['setWidth'](_0xecbcx1);
            _0xecbcx2['containerEl']['setLeft'](_0xecbcx1);
            _0xecbcx2['showEditorInCell']({
                tickIndex: _0xecbcx2['getPosition']()['tickIndex'],
                resourceIndex: _0xecbcx2['getResourceIndex']()
            })
        };
        if (_0xecbcx2['editor'] instanceof Ext['form']['field']['Base']) {
            _0xecbcx2['editor']['setMaxWidth'](_0xecbcx1)
        }
    },
    clearSelection: function() {
        var _0xecbcx1 = this;
        if (_0xecbcx1['schedulingView']['rendered']) {
            _0xecbcx1['schedulingView']['getSecondaryCanvasEl']()['select']('.' + _0xecbcx1['frameCls'] + '.sch-cellplugin-clone')['remove']()
        };
        _0xecbcx1['selContext'] = []
    },
    addSelection: function() {
        var _0xecbcx1 = this;
        var _0xecbcx2 = _0xecbcx1['frameTemplate']['apply']({
            cls: [_0xecbcx1['frameCls'], 'sch-cellplugin-clone'].join(' '),
            width: _0xecbcx1['containerEl']['getWidth'](),
            height: _0xecbcx1['containerEl']['getHeight']()
        });
        _0xecbcx2 = Ext['get'](Ext['DomHelper']['append'](_0xecbcx1['containerEl']['parent'](), _0xecbcx2));
        _0xecbcx2['setStyle']('top', _0xecbcx1['containerEl']['getStyle']('top'));
        _0xecbcx2['setStyle']('left', _0xecbcx1['containerEl']['getStyle']('left'));
        _0xecbcx1['selContext']['push'](Ext.apply({}, _0xecbcx1['context']))
    },
    applyVisibilityMode: function(_0xecbcx1) {
        _0xecbcx1['setVisibilityMode'](Ext['dom']['Element'].OFFSETS)
    },
    renderElement: function() {
        var _0xecbcx4 = this;
        var _0xecbcx3 = _0xecbcx4['timeAxisViewModel']['getTickWidth']();
        var _0xecbcx1 = _0xecbcx4['timeAxisViewModel']['getViewRowHeight']();
        var _0xecbcx5 = _0xecbcx4['frameTemplate']['apply']({
            cls: [_0xecbcx4['frameCls'], _0xecbcx4['activeCls']].join(' '),
            width: _0xecbcx3,
            height: _0xecbcx1
        });
        _0xecbcx4['containerEl'] = Ext['get'](Ext['DomHelper']['append'](_0xecbcx4['schedulingView']['getSecondaryCanvasEl'](), _0xecbcx5));
        _0xecbcx4['applyVisibilityMode'](_0xecbcx4['containerEl']);
        var _0xecbcx2 = {
            height: _0xecbcx1,
            maxHeight: _0xecbcx1,
            width: _0xecbcx3,
            maxWidth: _0xecbcx3,
            listeners: {
                render: function(_0xecbcx6) {
                    _0xecbcx4['applyVisibilityMode'](_0xecbcx6['el'])
                }
            },
            renderTo: _0xecbcx4['containerEl']
        };
        if (Ext['isObject'](_0xecbcx4['editor']) && !(_0xecbcx4['editor'] instanceof Ext['Base'])) {
            _0xecbcx4['editor'] = Ext['create'](Ext.apply(_0xecbcx2, _0xecbcx4['editor'], {
                xclass: 'Ext.ux.Scheduler.field.CellEditor'
            }))
        } else {
            if (typeof _0xecbcx4['editor'] === 'string') {
                _0xecbcx4['editor'] = Ext['create'](_0xecbcx4['editor'], _0xecbcx2)
            } else {
                _0xecbcx4['containerEl']['appendChild'](_0xecbcx4['editor']['el']);
                _0xecbcx4['applyVisibilityMode'](_0xecbcx4['editor']['el'])
            }
        };
        _0xecbcx4['editor']['inputEl']['setHeight'](_0xecbcx1 - 3)
    },
    onContainerClick: function() {
        var _0xecbcx1 = this;
        if (_0xecbcx1['lockedView']['getSelectionModel']()['getSelection']()['length'] > 0) {
            if (_0xecbcx1['editor']['isVisible'] && _0xecbcx1['editor']['isVisible']()) {
                _0xecbcx1['editor']['focus']()
            }
        }
    },
    onCellClick: function() {
        this['handleSingleClickTask']['delay'](this['dblClickTimeout'], null, null, arguments)
    },
    handleCellClick: function(_0xecbcx1, _0xecbcx5, _0xecbcx7, _0xecbcx6, _0xecbcx9) {
        var _0xecbcx3 = this;
        var _0xecbcx2 = Math['floor'](_0xecbcx3['schedulingView']['timeAxis']['getTickFromDate'](_0xecbcx5));
        if (_0xecbcx3['fireEvent']('cellclick', _0xecbcx3, _0xecbcx2, _0xecbcx7) !== false) {
            _0xecbcx3['showEditorInCell']({
                tickIndex: _0xecbcx2,
                resourceIndex: _0xecbcx7
            }, _0xecbcx9);
            if (_0xecbcx3['singleClickEditing']) {
                _0xecbcx3['beginEdit']()
            }
        }
    },
    onCellDblClick: function(_0xecbcx1, _0xecbcx2, _0xecbcx6, _0xecbcx5, _0xecbcx3) {
        this['handleSingleClickTask']['cancel']();
        this['handleCellDblClick'](_0xecbcx1, _0xecbcx2, _0xecbcx6, _0xecbcx5, _0xecbcx3)
    },
    handleCellDblClick: function(_0xecbcx1, _0xecbcx5, _0xecbcx7, _0xecbcx6, _0xecbcx9) {
        var _0xecbcx3 = this;
        var _0xecbcx2 = Math['floor'](_0xecbcx3['schedulingView']['timeAxis']['getTickFromDate'](_0xecbcx5));
        if (_0xecbcx3['fireEvent']('celldblclick', _0xecbcx3, _0xecbcx2, _0xecbcx7) !== false) {
            _0xecbcx3['showEditorInCell']({
                tickIndex: _0xecbcx2,
                resourceIndex: _0xecbcx7
            }, _0xecbcx9);
            _0xecbcx3['beginEdit']()
        }
    },
    onEventClick: function(_0xecbcx2, _0xecbcx1, _0xecbcx9) {
        var _0xecbcx6 = this;
        var _0xecbcx3 = _0xecbcx6['schedulingView']['getDateFromDomEvent'](_0xecbcx9);
        var _0xecbcx5 = Math['floor'](_0xecbcx6['schedulingView']['timeAxis']['getTickFromDate'](_0xecbcx3));
        var _0xecbcx7 = _0xecbcx6['getResourceIndex'](_0xecbcx1['getResource']());
        _0xecbcx6['showEditorInCell']({
            tickIndex: _0xecbcx5,
            resourceIndex: _0xecbcx7,
            eventRecord: _0xecbcx1
        }, _0xecbcx9)
    },
    onEventDblClick: function(_0xecbcx2, _0xecbcx1, _0xecbcx9) {
        var _0xecbcx6 = this;
        var _0xecbcx3 = _0xecbcx6['schedulingView']['getDateFromDomEvent'](_0xecbcx9);
        var _0xecbcx5 = Math['floor'](_0xecbcx6['schedulingView']['timeAxis']['getTickFromDate'](_0xecbcx3));
        var _0xecbcx7 = _0xecbcx6['getResourceIndex'](_0xecbcx1['getResource']());
        _0xecbcx6['showEditorInCell']({
            tickIndex: _0xecbcx5,
            resourceIndex: _0xecbcx7,
            eventRecord: _0xecbcx1
        }, _0xecbcx9);
        _0xecbcx6['beginEdit']()
    },
    showEditorInCell: function(_0xecbcx2, _0xecbcxa) {
        var _0xecbcx3 = this;
        if (_0xecbcx2['tickIndex'] === -1 || _0xecbcx2['resourceIndex'] === -1) {
            return
        };
        if (!_0xecbcx2['isCellContext']) {
            _0xecbcx2 = _0xecbcx3['getEventOrCell'](_0xecbcx2)
        };
        var _0xecbcx1 = _0xecbcx2['startDate'],
            _0xecbcx7 = _0xecbcx2['endDate'],
            _0xecbcx9 = _0xecbcx2['resourceIndex'],
            _0xecbcx6 = _0xecbcx2['resource'],
            _0xecbcx5 = _0xecbcx2['eventRecord'];
        if (_0xecbcxa && _0xecbcxa['type'] === 'click' && !_0xecbcx5) {
            _0xecbcx2['eventRecord'] = _0xecbcx5 = _0xecbcx3['getCellEvents'](_0xecbcx2)['getAt'](0)
        };
        if (_0xecbcx3['fireEvent']('beforeselect', _0xecbcx3, _0xecbcx6, _0xecbcx1, _0xecbcx7, _0xecbcx5) === false) {
            return
        };
        _0xecbcx3['onBeforeSelect'](_0xecbcxa);
        if (!_0xecbcx3['containerEl']) {
            _0xecbcx3['renderElement']()
        } else {
            if (_0xecbcxa && _0xecbcxa['ctrlKey']) {
                _0xecbcx3['addSelection']()
            } else {
                _0xecbcx3['clearSelection']()
            }
        };
        _0xecbcx3['setPosition'](_0xecbcx2);
        _0xecbcx3['alignEditor']();
        _0xecbcx3['onAfterSelect'](_0xecbcxa);
        _0xecbcx3['fireEvent']('select', _0xecbcx3, _0xecbcx6, _0xecbcx1, _0xecbcx7);
        _0xecbcx3['fireEvent']('selectionchange', _0xecbcx3, _0xecbcx3['getSelection']())
    },
    getContextFromPosition: function(_0xecbcx1) {
        var _0xecbcx2 = {
            startDate: _0xecbcx1['startDate'],
            endDate: _0xecbcx1['endDate'],
            resource: _0xecbcx1['resource']
        };
        if (_0xecbcx1['eventRecord']) {
            _0xecbcx2['eventRecord'] = _0xecbcx1['eventRecord']
        };
        return _0xecbcx2
    },
    getPosition: function() {
        return Ext.apply({}, this['position'])
    },
    setPosition: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['context'] = _0xecbcx2['getContextFromPosition'](_0xecbcx1);
        Ext.apply(_0xecbcx2['position'], _0xecbcx1)
    },
    stripPosition: function(_0xecbcx1) {
        return {
            tickIndex: _0xecbcx1['tickIndex'],
            resourceIndex: _0xecbcx1['resourceIndex']
        }
    },
    alignEditor: function() {
        var _0xecbcx1 = this['getPosition'](),
            _0xecbcx2 = _0xecbcx1['eventRecord'];
        if (_0xecbcx2) {
            this['alignEditorWithRecord'](_0xecbcx2, _0xecbcx1['resource'])
        } else {
            this['alignEditorWithCell']()
        }
    },
    alignEditorWithRecord: function(_0xecbcx1, _0xecbcx4) {
        var _0xecbcx3 = this;
        var _0xecbcx2 = _0xecbcx3['schedulingView']['getElementsFromEventRecord'](_0xecbcx1, _0xecbcx4),
            _0xecbcx5 = _0xecbcx2[0]['getBox']();
        _0xecbcx5['y']--;
        _0xecbcx5['x']--;
        _0xecbcx3['alignEditorToBox'](_0xecbcx5)
    },
    alignEditorWithCell: function() {
        var _0xecbcx5 = this,
            _0xecbcx1 = _0xecbcx5['getPosition']();
        var _0xecbcx2 = Ext['get'](_0xecbcx5['schedulingView']['getRowByRecord'](_0xecbcx1['resource']));
        _0xecbcx2 && _0xecbcx5['alignEditorToBox']({
            left: _0xecbcx5['timeAxisViewModel']['getTickWidth']() * _0xecbcx1['tickIndex'],
            y: _0xecbcx2['getTop']() - 1,
            height: _0xecbcx2['getHeight'](),
            width: _0xecbcx5['timeAxisViewModel']['getTickWidth']()
        })
    },
    alignEditorToBox: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        _0xecbcx1['containerEl']['setY'](_0xecbcx2['y']);
        if ('x' in _0xecbcx2) {
            _0xecbcx1['containerEl']['setX'](_0xecbcx2['x'])
        } else {
            _0xecbcx1['containerEl']['setLeft'](_0xecbcx2['left'])
        };
        _0xecbcx1['containerEl']['setWidth'](_0xecbcx2['width']);
        _0xecbcx1['containerEl']['setHeight'](_0xecbcx2['height']);
        if (Ext['isIE9m']) {
            _0xecbcx1['containerEl']['setHeight'](_0xecbcx2['height'] + 1);
            _0xecbcx1['containerEl']['setStyle']('padding-top', 1);
            _0xecbcx1['containerEl']['select']('.sch-cellplugin-border-top')['setStyle']('top', 1);
            _0xecbcx1['containerEl']['select']('.sch-cellplugin-border-vertical')['setHeight'](_0xecbcx2['height']);
            _0xecbcx1['containerEl']['select']('.sch-cellplugin-border-horizontal')['setWidth'](_0xecbcx2['width'])
        };
        _0xecbcx1['containerEl']['show']()
    },
    getSelection: function() {
        return this['selContext']['concat'](this['context'])
    },
    getEventRecord: function(_0xecbcx1) {
        return (_0xecbcx1 || this['context'])['eventRecord']
    },
    getResourceRecord: function(_0xecbcx1) {
        return (_0xecbcx1 || this['context'])['resource']
    },
    onKeyUp: function(_0xecbcx1) {
        this['moveUp'](_0xecbcx1)
    },
    onKeyDown: function(_0xecbcx1) {
        this['moveDown'](_0xecbcx1)
    },
    onKeyLeft: function(_0xecbcx1) {
        this['moveLeft'](_0xecbcx1)
    },
    onKeyRight: function(_0xecbcx1) {
        this['moveRight'](_0xecbcx1)
    },
    onKeyTab: function(_0xecbcx1) {
        if (_0xecbcx1['shiftKey']) {
            this['moveLeft'](_0xecbcx1)
        } else {
            this['moveRight'](_0xecbcx1)
        }
    },
    onKeyEnter: function() {
        this['beginEdit']()
    },
    onKeyEsc: function() {
        this['destroyHighlighter']()
    },
    findPreviousIndex: function() {
        var _0xecbcx5 = this,
            _0xecbcx2 = _0xecbcx5['getPosition']();
        var _0xecbcx1 = _0xecbcx5['schedulingView']['walkRecs'](_0xecbcx2['resource'], -1);
        if (_0xecbcx1 !== _0xecbcx2['resource']) {
            return _0xecbcx5['getResourceIndex'](_0xecbcx1)
        } else {
            return -1
        }
    },
    findNextIndex: function() {
        var _0xecbcx5 = this,
            _0xecbcx2 = _0xecbcx5['getPosition']();
        var _0xecbcx1 = _0xecbcx5['schedulingView']['walkRecs'](_0xecbcx2['resource'], 1);
        if (_0xecbcx1 !== _0xecbcx2['resource']) {
            return _0xecbcx5['getResourceIndex'](_0xecbcx1)
        } else {
            return -1
        }
    },
    getCellEvents: function(_0xecbcx1) {
        var _0xecbcx3 = this,
            _0xecbcx2 = _0xecbcx3['schedulingView'];
        _0xecbcx1 = _0xecbcx1 || _0xecbcx3['getPosition']();
        if (_0xecbcx1['resourceIndex'] === -1 || _0xecbcx1['tickIndex'] === -1) {
            return new Ext['util'].MixedCollection()
        };
        var _0xecbcx5 = _0xecbcx2['getEventStore']()['queryBy'](function(_0xecbcx4) {
            return _0xecbcx4['getResourceId']() === _0xecbcx1['resource']['getId']() && _0xecbcx4['getStartDate']() >= _0xecbcx1['startDate'] && _0xecbcx4['getStartDate']() < _0xecbcx1['endDate']
        });
        _0xecbcx5['sortBy'](function(_0xecbcx9, _0xecbcx6) {
            var _0xecbcx7 = _0xecbcx2['getElementsFromEventRecord'](_0xecbcx9, _0xecbcx1['resource'])[0],
                _0xecbcx4 = _0xecbcx2['getElementsFromEventRecord'](_0xecbcx6, _0xecbcx1['resource'])[0];
            return _0xecbcx7['getY']() < _0xecbcx4['getY']() ? -1 : 1
        });
        return _0xecbcx5
    },
    getAbove: function(_0xecbcx1) {
        var _0xecbcx6 = this;
        _0xecbcx1 = _0xecbcx1 || _0xecbcx6['getPosition']();
        if (_0xecbcx1['eventRecord']) {
            var _0xecbcx3 = _0xecbcx6['getCellEvents'](_0xecbcx1);
            var _0xecbcx4 = _0xecbcx3['indexOf'](_0xecbcx1['eventRecord']);
            if (_0xecbcx4 > 0) {
                var _0xecbcx2 = _0xecbcx4 - 1;
                return {
                    tickIndex: _0xecbcx1['tickIndex'],
                    resourceIndex: _0xecbcx1['resourceIndex'],
                    eventIndexInCell: _0xecbcx2,
                    eventRecord: _0xecbcx3['getAt'](_0xecbcx2)
                }
            }
        };
        var _0xecbcx5 = _0xecbcx6['findPreviousIndex']();
        if (_0xecbcx5 === -1) {
            return {
                resourceIndex: -1
            }
        };
        return _0xecbcx6['getEventOrCell']({
            tickIndex: _0xecbcx1['tickIndex'],
            resourceIndex: _0xecbcx5
        }, true)
    },
    getBelow: function(_0xecbcx1) {
        var _0xecbcx6 = this;
        _0xecbcx1 = _0xecbcx1 || _0xecbcx6['getPosition']();
        if (_0xecbcx1['eventRecord']) {
            var _0xecbcx3 = _0xecbcx6['getCellEvents'](_0xecbcx1);
            var _0xecbcx4 = _0xecbcx3['indexOf'](_0xecbcx1['eventRecord']);
            var _0xecbcx2 = _0xecbcx4 + 1;
            if (_0xecbcx4 >= 0 && _0xecbcx3['getCount']() > _0xecbcx2) {
                return {
                    tickIndex: _0xecbcx1['tickIndex'],
                    resourceIndex: _0xecbcx1['resourceIndex'],
                    eventIndexInCell: _0xecbcx2,
                    eventRecord: _0xecbcx3['getAt'](_0xecbcx2)
                }
            }
        };
        var _0xecbcx5 = _0xecbcx6['findNextIndex']();
        if (_0xecbcx5 === -1) {
            return {
                resourceIndex: -1
            }
        };
        return _0xecbcx6['getEventOrCell']({
            resourceIndex: _0xecbcx5,
            tickIndex: _0xecbcx1['tickIndex']
        })
    },
    getEventOrCell: function(_0xecbcx4, _0xecbcx1) {
        var _0xecbcxa = this;
        if (_0xecbcx4['tickIndex'] === -1 || _0xecbcx4['resourceIndex'] === -1) {
            return _0xecbcx4
        };
        var _0xecbcx8 = this['schedulingView'],
            _0xecbcx3 = _0xecbcx8['timeAxis']['getAt'](_0xecbcx4['tickIndex']),
            _0xecbcx2 = _0xecbcx3['getStartDate'](),
            _0xecbcx6 = _0xecbcx3['getEndDate'](),
            _0xecbcx5 = _0xecbcx8['dataSource']['getAt'](_0xecbcx4['resourceIndex']),
            _0xecbcx7 = _0xecbcx4['eventRecord'],
            _0xecbcx9 = _0xecbcx4['eventIndexInCell'];
        var _0xecbcxd = _0xecbcxa['getCellEvents']({
            resource: _0xecbcx5,
            startDate: _0xecbcx2,
            endDate: _0xecbcx6
        });
        if (_0xecbcxd['getCount']()) {
            if (_0xecbcx1 === true) {
                _0xecbcx9 = _0xecbcxd['getCount']() - 1;
                _0xecbcx7 = _0xecbcxd['getAt'](_0xecbcx9)
            } else {
                if (_0xecbcx7) {
                    _0xecbcx9 = Ext['Array']['indexOf'](_0xecbcxd, _0xecbcx7)
                } else {
                    _0xecbcx9 = 0;
                    _0xecbcx7 = _0xecbcxd['getAt'](0)
                }
            }
        };
        return {
            tickIndex: _0xecbcx4['tickIndex'],
            startDate: _0xecbcx2,
            endDate: _0xecbcx6,
            resourceIndex: _0xecbcx4['resourceIndex'],
            resource: _0xecbcx5,
            eventRecord: _0xecbcx7,
            eventIndexInCell: _0xecbcx9,
            isCellContext: true
        }
    },
    getPrevious: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx1 = _0xecbcx2['stripPosition'](_0xecbcx1 || _0xecbcx2['getPosition']());
        if (_0xecbcx1['tickIndex'] > 0) {
            return _0xecbcx2['getEventOrCell']({
                tickIndex: _0xecbcx1['tickIndex'] - 1,
                resourceIndex: _0xecbcx1['resourceIndex']
            })
        } else {
            return _0xecbcx2['getEventOrCell']({
                tickIndex: _0xecbcx2['getNbrOfTicks']() - 1,
                resourceIndex: _0xecbcx2['findPreviousIndex']()
            })
        }
    },
    getNext: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx1 = _0xecbcx2['stripPosition'](_0xecbcx1 || _0xecbcx2['getPosition']());
        if (_0xecbcx1['tickIndex'] < _0xecbcx2['getNbrOfTicks']() - 1) {
            return _0xecbcx2['getEventOrCell']({
                tickIndex: _0xecbcx1['tickIndex'] + 1,
                resourceIndex: _0xecbcx1['resourceIndex']
            })
        } else {
            return _0xecbcx2['getEventOrCell']({
                tickIndex: 0,
                resourceIndex: _0xecbcx2['findNextIndex']()
            })
        }
    },
    moveUp: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        if (!_0xecbcx1['containerEl']) {
            return
        };
        _0xecbcx1['showEditorInCell'](_0xecbcx1['getAbove'](), _0xecbcx2)
    },
    moveDown: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        if (!_0xecbcx1['containerEl']) {
            return
        };
        _0xecbcx1['showEditorInCell'](_0xecbcx1['getBelow'](), _0xecbcx2)
    },
    moveLeft: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        if (!_0xecbcx1['containerEl']) {
            return
        };
        _0xecbcx1['showEditorInCell'](_0xecbcx1['getPrevious'](), _0xecbcx2)
    },
    moveRight: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        if (!_0xecbcx1['containerEl']) {
            return
        };
        _0xecbcx1['showEditorInCell'](_0xecbcx1['getNext'](), _0xecbcx2)
    },
    editNext: function(_0xecbcx3) {
        var _0xecbcx5 = this,
            _0xecbcx1 = _0xecbcx5['getPosition'](),
            _0xecbcx2 = _0xecbcx5['getNext'](_0xecbcx1);
        while (!_0xecbcx5['beginEdit'](_0xecbcx2) && _0xecbcx2['resourceIndex'] !== -1) {
            _0xecbcx1 = _0xecbcx2;
            _0xecbcx2 = _0xecbcx5['getNext'](_0xecbcx1)
        }
    },
    editPrevious: function(_0xecbcx3) {
        var _0xecbcx5 = this,
            _0xecbcx1 = _0xecbcx5['getPosition'](),
            _0xecbcx2 = _0xecbcx5['getPrevious'](_0xecbcx1);
        while (!_0xecbcx5['beginEdit'](_0xecbcx2) && _0xecbcx2['resourceIndex'] !== -1) {
            _0xecbcx1 = _0xecbcx2;
            _0xecbcx2 = _0xecbcx5['getPrevious'](_0xecbcx1)
        }
    },
    expandResourceRow: function(_0xecbcx3, _0xecbcx5, _0xecbcx1) {
        var _0xecbcx2 = this;
        Ext['fly'](_0xecbcx3)['setHeight'](_0xecbcx5['height'] + _0xecbcx1);
        Ext['fly'](_0xecbcx2['lockedView']['getNodeByRecord'](_0xecbcx2['getPosition']()['resource']))['setHeight'](_0xecbcx5['height'] + _0xecbcx1);
        _0xecbcx2['__oldHeight'] = _0xecbcx5['height']
    },
    getNewBottomEditorCoordinate: function(_0xecbcx2) {
        var _0xecbcx9 = this,
            _0xecbcx3 = _0xecbcx9['getCellEvents']()['last']();
        if (_0xecbcx3) {
            var _0xecbcx1 = _0xecbcx9['getPosition'](),
                _0xecbcx5 = _0xecbcx9['schedulingView'],
                _0xecbcx7 = _0xecbcx5['getNodeByRecord'](_0xecbcx1['resource']),
                _0xecbcx6 = Ext['fly'](_0xecbcx7)['getBox'](),
                _0xecbcx4 = _0xecbcx5['getElementsFromEventRecord'](_0xecbcx3, _0xecbcx1['resource'])[0]['getBox']();
            if (Math['abs'](_0xecbcx4['bottom'] - _0xecbcx6['bottom']) < _0xecbcx2 - 1) {
                _0xecbcx9['expandResourceRow'](_0xecbcx7, _0xecbcx6, _0xecbcx2);
                return _0xecbcx6['bottom']
            } else {
                return _0xecbcx4['bottom']
            }
        }
    },
    collapseResourceRow: function() {
        var _0xecbcx2 = this;
        if (_0xecbcx2['__oldHeight']) {
            var _0xecbcx1 = _0xecbcx2['getPosition']();
            Ext['fly'](_0xecbcx2['schedulingView']['getNodeByRecord'](_0xecbcx1['resource']))['setHeight'](_0xecbcx2.__oldHeight);
            Ext['fly'](_0xecbcx2['lockedView']['getNodeByRecord'](_0xecbcx1['resource']))['setHeight'](_0xecbcx2.__oldHeight);
            delete _0xecbcx2['__oldHeight']
        }
    },
    beginEditBelow: function() {
        var _0xecbcx5 = this;
        if (!_0xecbcx5['containerEl']) {
            return
        };
        delete _0xecbcx5['context']['eventRecord'];
        _0xecbcx5['beginEdit']();
        var _0xecbcx1 = _0xecbcx5['timeAxisViewModel']['getViewRowHeight']();
        var _0xecbcx2 = _0xecbcx5['getNewBottomEditorCoordinate'](_0xecbcx1);
        _0xecbcx5['alignEditorToBox']({
            left: _0xecbcx5['timeAxisViewModel']['getTickWidth']() * _0xecbcx5['getPosition']()['tickIndex'],
            y: _0xecbcx2,
            width: _0xecbcx5['timeAxisViewModel']['getTickWidth'](),
            height: _0xecbcx1
        })
    },
    beginEdit: function(_0xecbcx2) {
        var _0xecbcx4 = this;
        if (!_0xecbcx4['containerEl'] || (_0xecbcx2 && _0xecbcx2['resourceIndex'] === -1)) {
            return false
        };
        if (_0xecbcx4['fireEvent']('beforecelledit', _0xecbcx4, _0xecbcx2 ? [_0xecbcx4['getContextFromPosition'](_0xecbcx2)] : _0xecbcx4['getSelection']()) === false) {
            return false
        };
        if (_0xecbcx2) {
            _0xecbcx4['showEditorInCell'](_0xecbcx2)
        };
        _0xecbcx4['editing'] = true;
        _0xecbcx4['editor']['startDate'] = _0xecbcx4['getPosition']()['startDate'];
        _0xecbcx4['editor']['bottomUnit'] = Ext.ux.Scheduler['util']['Date']['getSubUnit'](_0xecbcx4['timeAxisViewModel']['getBottomHeader']()['unit']);
        _0xecbcx4['containerEl']['select']('.sch-cellplugin-border')['hide']();
        _0xecbcx4['containerEl']['addCls'](_0xecbcx4['editingCls']);
        var _0xecbcx3 = _0xecbcx4['getEventRecord'](),
            _0xecbcx6 = _0xecbcx4['getResourceRecord']();
        if (_0xecbcx3) {
            var _0xecbcx5 = Ext['Date'];
            var _0xecbcx7 = Ext['isArray'](_0xecbcx4['editor']['dateFormat']) ? _0xecbcx4['editor']['dateFormat'][0] : _0xecbcx4['editor']['dateFormat'];
            var _0xecbcx1 = _0xecbcx5['format'](_0xecbcx3['getStartDate'](), _0xecbcx7);
            var _0xecbcx9 = _0xecbcx5['format'](_0xecbcx3['getEndDate'](), _0xecbcx7);
            _0xecbcx4['editor']['record'] = _0xecbcx3;
            _0xecbcx4['editor']['setValue']([_0xecbcx1, _0xecbcx9].join(_0xecbcx4['editor']['divider']));
            _0xecbcx4['editor']['recordNode'] = _0xecbcx4['schedulingView']['getElementsFromEventRecord'](_0xecbcx3, _0xecbcx6)[0];
            Ext['fly'](_0xecbcx4['editor']['recordNode'])['hide']()
        };
        _0xecbcx4['editor']['show']();
        _0xecbcx4['editor']['setWidth'](_0xecbcx4['editor']['getMaxWidth']());
        _0xecbcx4['editor']['focus']();
        _0xecbcx4['fireEvent']('begincelledit', _0xecbcx4, _0xecbcx4['getSelection']());
        return _0xecbcx4['editing']
    },
    cancelEdit: function() {
        var _0xecbcx2 = this;
        if (_0xecbcx2['editor'] && _0xecbcx2['editor']['getValue']) {
            var _0xecbcx5 = _0xecbcx2['editor']['getValue']();
            var _0xecbcx1 = _0xecbcx2['getSelection']();
            if (_0xecbcx2['fireEvent']('beforecancelcelledit', _0xecbcx2, _0xecbcx5, _0xecbcx1) === false) {
                return
            };
            _0xecbcx2['stopEditing']();
            _0xecbcx2['fireEvent']('cancelcelledit', _0xecbcx2, _0xecbcx5, _0xecbcx1)
        }
    },
    completeEdit: function() {
        var _0xecbcxa = this,
            _0xecbcx3 = false;
        if (!_0xecbcxa['editing'] || !_0xecbcxa['containerEl']) {
            return
        };
        var _0xecbcx9 = _0xecbcxa['editor'],
            _0xecbcxd = _0xecbcxa['editor']['getValue'](),
            _0xecbcx11 = _0xecbcxa['getSelection']();
        if (_0xecbcxa['fireEvent']('beforecompletecelledit', _0xecbcxa, _0xecbcxd, _0xecbcx11) === false) {
            return
        };
        if (_0xecbcxd && _0xecbcx9['isValid']()) {
            var _0xecbcx8 = _0xecbcxa['schedulingView'],
                _0xecbcx4 = _0xecbcx9['record'],
                _0xecbcx1 = _0xecbcx9['getDates'](_0xecbcxd),
                _0xecbcx2 = _0xecbcx1[0],
                _0xecbcx6 = _0xecbcx1[1];
            if (_0xecbcx4) {
                _0xecbcx4['setStartEndDate'](_0xecbcx2, _0xecbcx6);
                delete _0xecbcx9['record']
            } else {
                var _0xecbcx5 = _0xecbcxa['context']['resource'],
                    _0xecbcx7 = Ext['create'](_0xecbcx8['getEventStore']()['getModel'](), {
                        StartDate: _0xecbcx2,
                        EndDate: _0xecbcx6,
                        ResourceId: _0xecbcx5['getId']()
                    });
                _0xecbcx8['onEventCreated'](_0xecbcx7, [_0xecbcx5]);
                _0xecbcx8['getEventStore']()['add'](_0xecbcx7)
            };
            _0xecbcx3 = true
        };
        _0xecbcxa['stopEditing']();
        _0xecbcxa['fireEvent']('completecelledit', _0xecbcxa, _0xecbcxd, _0xecbcx11);
        return _0xecbcx3
    },
    stopEditing: function() {
        var _0xecbcx5 = this,
            _0xecbcx1 = _0xecbcx5['editor'];
        if (_0xecbcx1['recordNode']) {
            Ext['fly'](_0xecbcx1['recordNode'])['show']();
            delete _0xecbcx1['recordNode']
        };
        _0xecbcx5['collapseResourceRow']();
        _0xecbcx1['setValue']('');
        _0xecbcx5['editing'] = false;
        _0xecbcx5['clearSelection']();
        _0xecbcx5['containerEl']['select']('.sch-cellplugin-border')['show']();
        _0xecbcx5['containerEl']['removeCls'](_0xecbcx5['editingCls']);
        _0xecbcx1['hide']();
        var _0xecbcx2 = _0xecbcx5['lockedView']['getRow'](_0xecbcx5['getPosition']()['resource']);
        _0xecbcx2 && Ext['fly'](_0xecbcx2)['down'](_0xecbcx5['lockedView']['getCellSelector']())['focus']()
    },
    onBeforeSelect: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        _0xecbcx2 && _0xecbcx2['isNavKeyPress'] && _0xecbcx2['isNavKeyPress']() && _0xecbcx1['clearSelection']();
        _0xecbcx1['completeEdit']()
    },
    onAfterSelect: function(_0xecbcx5) {
        var _0xecbcx1 = this,
            _0xecbcx2 = _0xecbcx1['getPosition']()['resource'];
        _0xecbcx1['lockedView']['getSelectionModel']()['select'](_0xecbcx2);
        Ext['fly'](_0xecbcx1['lockedView']['getRow'](_0xecbcx2))['down'](_0xecbcx1['lockedView']['getCellSelector']())['focus']();
        _0xecbcx1['editor']['setValue']('');
        _0xecbcx1['containerEl']['scrollIntoView'](_0xecbcx1['schedulingView']['getEl']())
    },
    bindResourceStore: function(_0xecbcx2, _0xecbcx1) {
        if (_0xecbcx2) {
            var _0xecbcx5 = this;
            _0xecbcx5[_0xecbcx1 ? 'mun' : 'mon'](_0xecbcx2, {
                add: _0xecbcx5['onResourceAdd'],
                remove: _0xecbcx5['onResourceRemove'],
                clear: _0xecbcx5['destroyHighlighter'],
                scope: _0xecbcx5
            })
        }
    },
    bindEventStore: function(_0xecbcx2, _0xecbcx1) {
        if (_0xecbcx2) {
            var _0xecbcx5 = this;
            _0xecbcx5[_0xecbcx1 ? 'mun' : 'mon'](_0xecbcx2, {
                load: _0xecbcx5['destroyHighlighter'],
                scope: _0xecbcx5
            })
        }
    }
});
Ext.define('Ext.ux.Scheduler.plugin.DragSelector', {
    extend: 'Ext.ux.Scheduler.util.DragTracker',
    alias: 'plugin.scheduler_dragselector',
    mixins: ['Ext.AbstractPlugin'],
    requires: ['Ext.ux.Scheduler.util.ScrollManager'],
    lockableScope: 'top',
    schedulerView: null,
    eventData: null,
    sm: null,
    proxy: null,
    bodyRegion: null,
    constructor: function(_0xecbcx1) {
        _0xecbcx1 = _0xecbcx1 || {};
        Ext['applyIf'](_0xecbcx1, {
            onBeforeStart: this['onBeforeStart'],
            onStart: this['onStart'],
            onDrag: this['onDrag'],
            onEnd: this['onEnd']
        });
        this['callParent'](arguments)
    },
    bindListenersOnDragStart: function() {
        if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
            var _0xecbcx1 = this['getCmp']()['getScrollable']()['getElement']();
            _0xecbcx1 && _0xecbcx1['on']('scroll', this['onMouseMove'], this)
        };
        this['callParent'](arguments)
    },
    unbindListenersOnDragEnd: function() {
        if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
            var _0xecbcx1 = this['getCmp']()['getScrollable']()['getElement']();
            _0xecbcx1 && _0xecbcx1['un']('scroll', this['onMouseMove'], this)
        };
        this['callParent'](arguments)
    },
    init: function(_0xecbcx2) {
        this['setCmp'](_0xecbcx2);
        var _0xecbcx1 = this['schedulerView'] = _0xecbcx2['getSchedulingView']();
        _0xecbcx1['on']({
            afterrender: this['onSchedulingViewRender'],
            scope: this
        })
    },
    onBeforeStart: function(_0xecbcx1) {
        return !_0xecbcx1['getTarget']('.sch-event') && _0xecbcx1['ctrlKey']
    },
    onStart: function(_0xecbcx5) {
        var _0xecbcx6 = this['schedulerView'];
        this['proxy']['show']();
        this['bodyRegion'] = _0xecbcx6['getScheduleRegion']();
        var _0xecbcx2 = _0xecbcx6['getVerticalScroll']();
        var _0xecbcx3 = _0xecbcx6['getScrollX']();
        var _0xecbcx1 = [];
        _0xecbcx6['getEventNodes']()['each'](function(_0xecbcx4) {
            var _0xecbcx9 = _0xecbcx4['getRegion']();
            _0xecbcx9['adjust'](_0xecbcx2, _0xecbcx3, _0xecbcx2, _0xecbcx3);
            _0xecbcx1[_0xecbcx1['length']] = {
                region: _0xecbcx9,
                node: _0xecbcx4['dom']
            }
        });
        this['eventData'] = _0xecbcx1;
        this['sm']['deselectAll']();
        Ext.ux.Scheduler['util']['ScrollManager']['activate'](_0xecbcx6);
        this['mon'](_0xecbcx6['getScrollable'](), 'scroll', this['updateSelection'], this)
    },
    onDrag: function() {
        var _0xecbcx1 = this['getRegion']()['constrainTo'](this['bodyRegion']);
        this['proxy']['setBox'](_0xecbcx1);
        this['updateSelection']()
    },
    getCurrentScroll: function() {
        return this['schedulerView']['getScroll']()
    },
    updateSelection: function() {
        var _0xecbcx1 = this['sm'],
            _0xecbcx7 = this['eventData'],
            _0xecbcx9 = this['getRegion']()['constrainTo'](this['bodyRegion']),
            _0xecbcx2, _0xecbcx6, _0xecbcx3, _0xecbcx4;
        var _0xecbcx8 = this['schedulerView']['getVerticalScroll']();
        var _0xecbcx5 = this['schedulerView']['getScrollX']();
        _0xecbcx9['adjust'](_0xecbcx8, _0xecbcx5, _0xecbcx8, _0xecbcx5);
        for (_0xecbcx2 = 0, _0xecbcx3 = _0xecbcx7['length']; _0xecbcx2 < _0xecbcx3; _0xecbcx2++) {
            _0xecbcx6 = _0xecbcx7[_0xecbcx2];
            _0xecbcx4 = _0xecbcx9['intersect'](_0xecbcx6['region']);
            if (_0xecbcx4 && !_0xecbcx6['selected']) {
                _0xecbcx6['selected'] = true;
                _0xecbcx1['selectNode'](_0xecbcx6['node'], true)
            } else {
                if (!_0xecbcx4 && _0xecbcx6['selected']) {
                    _0xecbcx6['selected'] = false;
                    _0xecbcx1['deselectNode'](_0xecbcx6['node'])
                }
            }
        }
    },
    onEnd: function(_0xecbcx1) {
        if (this['proxy']) {
            this['proxy']['setDisplayed'](false)
        };
        this['mun'](this['schedulerView']['getScrollable'](), 'scroll', this['updateSelection'], this);
        Ext.ux.Scheduler['util']['ScrollManager']['deactivate']()
    },
    onSchedulingViewRender: function(_0xecbcx1) {
        this['sm'] = _0xecbcx1['getEventSelectionModel']();
        this['initEl'](this['schedulerView']['el']);
        this['proxy'] = _0xecbcx1['el']['createChild']({
            cls: 'sch-drag-selector'
        })
    },
    destroy: function() {
        if (this['proxy']) {
            Ext['destroy'](this['proxy'])
        };
        this['callParent'](arguments)
    }
});
Ext.define('Ext.ux.Scheduler.plugin.mixin.Editor', {
    lockableScope: 'normal',
    width: 400,
    hideOnBlur: true,
    saveAndCloseOnEnter: true,
    triggerEvent: 'eventdblclick',
    record: null,
    schedulerView: null,
    dragProxyEl: null,
    ignoreCls: 'sch-event-editor-ignore-click',
    ignoreCheckMaxDepth: 9,
    initEditor: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = _0xecbcx5['getView'] && _0xecbcx5['getView']() || _0xecbcx5;
        this['schedulerView'] = _0xecbcx1;
        _0xecbcx2['setEventStore'](_0xecbcx1['getEventStore']());
        _0xecbcx2['setResourceStore'] && _0xecbcx1['getResourceStore'] && _0xecbcx2['setResourceStore'](_0xecbcx1['getResourceStore']());
        _0xecbcx2['setAssignmentStore'] && _0xecbcx1['getAssignmentStore'] && _0xecbcx2['setAssignmentStore'](_0xecbcx1['getAssignmentStore']());
        _0xecbcx2['setDependencyStore'] && _0xecbcx1['getDependencyStore'] && _0xecbcx2['setDependencyStore'](_0xecbcx1['getDependencyStore']());
        _0xecbcx2['saveOnEnter'] = this['saveAndCloseOnEnter'];
        _0xecbcx2['allowOverlap'] = this['schedulerView']['allowOverlap'];
        if (_0xecbcx2['allowOverlap'] === undefined) {
            _0xecbcx2['allowOverlap'] = true
        };
        if (_0xecbcx1['rendered']) {
            this['onSchedulerRender']()
        } else {
            _0xecbcx1['on']({
                afterrender: this['onSchedulerRender'],
                scope: this
            })
        };
        _0xecbcx1['on']({
            dragcreateend: this['onDragCreateEnd'],
            scope: this
        });
        _0xecbcx2['on']('aftereventsave', function() {
            this['hideEditor']()
        }, this);
        this['on']('hide', this['hideDragProxy'], this);
        if (this['triggerEvent']) {
            _0xecbcx1['on'](this['triggerEvent'], this['onActivateEditor'], this)
        };
        _0xecbcx1['registerEventEditor'] && this['schedulerView']['registerEventEditor'](this)
    },
    onSchedulerRender: function() {
        if (!this['isWindow']) {
            this['render'](document['body'])
        };
        if (this['hideOnBlur']) {
            this['mon'](Ext['getDoc'](), 'mousedown', this['mouseDownAction'], this)
        }
    },
    onDragCreateEnd: function(_0xecbcx6, _0xecbcx5, _0xecbcx9, _0xecbcxa, _0xecbcx2) {
        var _0xecbcx3 = this['editor'] || this,
            _0xecbcx7 = [];
        if (_0xecbcx9 instanceof Ext.ux.Scheduler['model']['Resource']) {
            _0xecbcx3['resourceRecord'] = _0xecbcx9;
            _0xecbcx7 = [_0xecbcx9]
        };
        this['schedulerView']['onEventCreated'](_0xecbcx5, _0xecbcx7);
        this['showForEvent'](_0xecbcx5, _0xecbcx2);
        var _0xecbcx1 = _0xecbcx2['dom']['cloneNode'](true);
        _0xecbcx1['id'] = '';
        _0xecbcx2['dom']['parentNode']['appendChild'](_0xecbcx1);
        this['dragProxyEl'] = Ext['get'](_0xecbcx1)
    },
    addIgnoreCls: function() {
        var _0xecbcx2;
        var _0xecbcx1 = this['query']('pickerfield');
        for (_0xecbcx2 = 0; _0xecbcx2 < _0xecbcx1['length']; _0xecbcx2++) {
            _0xecbcx1[_0xecbcx2]['getPicker']()
        };
        Ext['Array']['forEach'](this['query']('[floating]'), function(_0xecbcx5) {
            _0xecbcx5['addCls'](this['ignoreCls'])
        }, this)
    },
    setIgnoreClsOnParent: function() {
        var _0xecbcx1 = this['schedulerView']['up']('[floating=true]');
        if (_0xecbcx1) {
            _0xecbcx1['addCls'](this['ignoreCls'])
        }
    },
    mouseDownAction: function(_0xecbcx3) {
        var _0xecbcx2 = this['schedulerView'],
            _0xecbcx1 = (this['editor'] || this)['eventRecord'],
            _0xecbcx5;
        if (!this['isHidden']() && !_0xecbcx3['within'](this['getEl']()) && !_0xecbcx3['getTarget']('.' + this['ignoreCls'], this['ignoreCheckMaxDepth']) && (!(_0xecbcx5 = _0xecbcx3['getTarget'](_0xecbcx2['eventSelector'])) || _0xecbcx2['getEventRecordFromDomId'](_0xecbcx5['id']) != _0xecbcx1)) {
            this['hide']()
        }
    },
    onActivateEditor: function(_0xecbcx2, _0xecbcx1) {
        this['showRecord'](_0xecbcx1)
    },
    hideDragProxy: function() {
        var _0xecbcx1 = this['dragProxyEl'];
        if (_0xecbcx1 && _0xecbcx1['dom']['parentNode']) {
            _0xecbcx1['dom']['parentNode']['removeChild'](_0xecbcx1['dom']);
            delete this['dragProxyEl']
        }
    },
    hideEditor: function() {
        this['hide']()
    },
    setRecord: function(_0xecbcx1) {
        this['record'] = _0xecbcx1
    },
    getRecord: function() {
        return this['record']
    }
});
Ext.define('Ext.ux.Scheduler.widget.EventEditor', {
    extend: 'Ext.form.Panel',
    mixins: ['Ext.ux.Scheduler.mixin.Localizable'],
    alias: ['widget.eventeditorform', 'plugin.scheduler_eventeditorform'],
    requires: ['Ext.util.Region', 'Ext.form.Label', 'Ext.form.field.ComboBox', 'Ext.form.field.Date', 'Ext.form.field.Time', 'Ext.Button', 'Ext.ux.Scheduler.util.Date'],
    eventStore: null,
    saveOnEnter: true,
    showDeleteButton: true,
    startDateField: null,
    startTimeField: null,
    endDateField: null,
    endTimeField: null,
    nameField: null,
    resourceField: null,
    startTimeConfig: null,
    startDateConfig: null,
    endTimeConfig: null,
    endDateConfig: null,
    resourceFieldConfig: null,
    flipDatesOnSave: true,
    showResourceField: false,
    border: false,
    bodyPadding: 6,
    fieldsPanelConfig: null,
    dateFormat: 'Y-m-d',
    timeFormat: 'H:i',
    cls: 'sch-eventeditor',
    dynamicForm: true,
    eventRecord: null,
    resourceRecord: null,
    currentForm: null,
    allowOverlap: true,
    readOnly: false,
    typeField: 'EventType',
    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    initComponent: function() {
        Ext.apply(this, {
            buttons: this['buttons'] || this['buildButtons'](),
            items: [{
                xtype: 'container',
                margin: '5 5 5 5',
                defaults: {
                    width: '100%'
                },
                border: false,
                items: this['getDefaultFields']()
            }, Ext['applyIf'](this['fieldsPanelConfig'], {
                flex: 1,
                activeItem: 0
            })]
        });
        this['callParent'](arguments)
    },
    afterRender: function() {
        this['callParent'](arguments);
        if (this['saveOnEnter']) {
            this['el']['on']({
                keyup: function(_0xecbcx2, _0xecbcx1) {
                    if (_0xecbcx2['getKey']() === _0xecbcx2['ENTER'] && _0xecbcx1['tagName']['toLowerCase']() === 'input') {
                        this['save']()
                    }
                },
                scope: this
            })
        }
    },
    getDefaultFields: function() {
        this['nameField'] = new Ext['form']['field'].Text({
            fieldLabel: this.L('nameText'),
            selectOnFocus: true,
            allowBlank: false
        });
        if (this['showResourceField']) {
            this['resourceField'] = Ext['create'](Ext.apply({
                xtype: 'combo',
                fieldLabel: this.L('resourceText'),
                queryMode: 'local',
                valueField: 'Id',
                displayField: 'Name',
                allowBlank: false,
                editable: false
            }, this['resourceFieldConfig']))
        };
        this['buildDurationFields']();
        return [this['nameField'], this['resourceField'], {
            xtype: 'container',
            layout: 'hbox',
            margin: '0 0 10 0',
            items: [this['startDateField'], this['startTimeField']]
        }, {
            xtype: 'container',
            layout: 'hbox',
            margin: '0 0 10 0',
            items: [this['endDateField'], this['endTimeField']]
        }]
    },
    setReadOnly: function(_0xecbcx1) {
        if (_0xecbcx1 !== this['readOnly']) {
            Ext['Array']['each'](this['query']('field'), function(_0xecbcx2) {
                _0xecbcx2['setReadOnly'](_0xecbcx1)
            });
            this['saveButton']['setVisible'](!_0xecbcx1);
            this['deleteButton'] && this['deleteButton']['setVisible'](!_0xecbcx1);
            this['readOnly'] = _0xecbcx1
        }
    },
    loadRecord: function(_0xecbcx2, _0xecbcx7) {
        this['setReadOnly'](_0xecbcx7);
        if (this['deleteButton']) {
            this['deleteButton']['setVisible'](!_0xecbcx7 && !this['isNewRecord'](_0xecbcx2))
        };
        this['eventRecord'] = _0xecbcx2;
        var _0xecbcx1 = _0xecbcx2['getStartDate']();
        this['startDateField']['setValue'](_0xecbcx1);
        this['startTimeField']['setValue'](_0xecbcx1);
        var _0xecbcx9 = _0xecbcx2['getEndDate']();
        this['endDateField']['setValue'](_0xecbcx9);
        this['endTimeField']['setValue'](_0xecbcx9);
        this['nameField']['setValue'](_0xecbcx2['getName']());
        this['resourceField'] && this['resourceField']['setValue'](_0xecbcx2['getResourceId']() || this['resourceRecord']);
        var _0xecbcx4 = this,
            _0xecbcx3 = _0xecbcx2['get'](this['typeField']);
        if (_0xecbcx3 && this['dynamicForm']) {
            var _0xecbcx6 = this['items']['getAt'](1),
                _0xecbcx5 = _0xecbcx6['query']('> component[EventType=' + _0xecbcx3 + ']');
            if (!_0xecbcx5['length']) {
                throw 'Can\'t find form for EventType = ' + _0xecbcx3
            };
            if (!_0xecbcx6['getLayout']()['setActiveItem']) {
                throw 'Can\'t switch active component in the fieldsPanel'
            };
            _0xecbcx4 = _0xecbcx5[0];
            if (!(_0xecbcx4 instanceof Ext['form']['Panel'])) {
                throw 'Each child component of fieldsPanel should be a form'
            };
            _0xecbcx6['getLayout']()['setActiveItem'](_0xecbcx4)
        };
        this['currentForm'] = _0xecbcx4;
        _0xecbcx4['getForm']()['loadRecord'](_0xecbcx2);
        this['nameField']['focus']()
    },
    setEventStore: function(_0xecbcx1) {
        this['eventStore'] = _0xecbcx1
    },
    setResourceStore: function(_0xecbcx1) {
        this['resourceStore'] = _0xecbcx1;
        this['resourceField'] && this['resourceField']['bindStore'](_0xecbcx1)
    },
    getEventStore: function() {
        return this['eventStore']
    },
    getResourceStore: function() {
        return this['resourceStore']
    },
    isNewRecord: function(_0xecbcx1) {
        var _0xecbcx2 = this['getEventStore']();
        if (!_0xecbcx2) {
            return true
        };
        return _0xecbcx2['indexOf'](_0xecbcx1) === -1
    },
    onSaveClick: function() {
        this['save']()
    },
    save: function() {
        var _0xecbcx6 = this,
            _0xecbcx4 = _0xecbcx6['eventRecord'],
            _0xecbcx1 = _0xecbcx6['currentForm']['getForm']();
        if (!_0xecbcx4 || !this['isValid']()) {
            return
        };
        var _0xecbcxa = _0xecbcx6['getEventStore'](),
            _0xecbcx8 = _0xecbcx6['getValues'](),
            _0xecbcx5 = _0xecbcx6['resourceField'] && _0xecbcx6['resourceField']['getSelection']() || _0xecbcx6['resourceRecord'];
        if (this['flipDatesOnSave']) {
            var _0xecbcx9 = Ext.ux.Scheduler['util']['Date']['min'](_0xecbcx8['startDate'], _0xecbcx8['endDate']);
            this['startDateField']['setValue'](_0xecbcx9);
            this['startTimeField']['setValue'](_0xecbcx9);
            var _0xecbcx7 = Ext.ux.Scheduler['util']['Date']['max'](_0xecbcx8['startDate'], _0xecbcx8['endDate']);
            this['endDateField']['setValue'](_0xecbcx7);
            this['endTimeField']['setValue'](_0xecbcx7);
            _0xecbcx8 = _0xecbcx6['getValues']()
        };
        if (!_0xecbcx6['allowOverlap'] && _0xecbcxa) {
            var _0xecbcx2 = _0xecbcx4['getResources'](_0xecbcxa);
            _0xecbcx2 = _0xecbcx2['length'] > 0 ? _0xecbcx2 : [_0xecbcx5];
            var _0xecbcx3 = false;
            Ext['each'](_0xecbcx2, function(_0xecbcxd) {
                return _0xecbcx3 = !_0xecbcxa['isDateRangeAvailable'](_0xecbcx8['startDate'], _0xecbcx8['endDate'], _0xecbcx4, _0xecbcxd)
            });
            if (_0xecbcx3) {
                return
            }
        };
        if (_0xecbcx6['fireEvent']('beforeeventsave', _0xecbcx6, _0xecbcx4, _0xecbcx8) !== false) {
            _0xecbcx6['onBeforeSave'](_0xecbcx4);
            _0xecbcx4['beginEdit']();
            _0xecbcx1['updateRecord'](_0xecbcx4);
            _0xecbcx4['setStartEndDate'](_0xecbcx8['startDate'], _0xecbcx8['endDate']);
            _0xecbcx4['setName'](_0xecbcx8['name']);
            if (!_0xecbcx6['isNewRecord'](_0xecbcx4) && _0xecbcx6['resourceField']) {
                _0xecbcx4['setResourceId'](_0xecbcx6['resourceField']['getValue']())
            };
            _0xecbcx4['endEdit']();
            if (_0xecbcxa && _0xecbcx6['isNewRecord'](_0xecbcx4)) {
                if (_0xecbcx6['fireEvent']('beforeeventadd', _0xecbcx6, _0xecbcx4, [_0xecbcx5]) !== false) {
                    if (_0xecbcx6['getEventStore']()['isTreeStore']) {
                        _0xecbcx4['set']('leaf', true)
                    };
                    _0xecbcx4['assign'](_0xecbcx5);
                    _0xecbcx6['getEventStore']()['append'](_0xecbcx4)
                }
            };
            this['fireEvent']('aftereventsave', _0xecbcx6, _0xecbcx4);
            _0xecbcx6['onAfterSave'](_0xecbcx4)
        };
        return _0xecbcx4
    },
    isValid: function() {
        var _0xecbcx1 = true;
        Ext['each'](this['query']('[isFormField]:not([excludeForm])'), function(_0xecbcx2) {
            return _0xecbcx1 = _0xecbcx2['isValid']()
        });
        return _0xecbcx1
    },
    getValues: function() {
        var _0xecbcx6 = this,
            _0xecbcx5 = _0xecbcx6['currentForm'] != this ? _0xecbcx6['currentForm']['getValues']() : _0xecbcx6['callParent'](arguments),
            _0xecbcx1 = Ext['Date']['clone'](_0xecbcx6['startDateField']['getValue']()),
            _0xecbcx9 = Ext['Date']['clone'](_0xecbcx6['endDateField']['getValue']()),
            _0xecbcx4 = _0xecbcx6['startTimeField']['getValue'](),
            _0xecbcx3 = _0xecbcx6['nameField']['getValue'](),
            _0xecbcx2 = _0xecbcx6['endTimeField']['getValue']();
        if (_0xecbcx1 && _0xecbcx4) {
            Ext.ux.Scheduler['util']['Date']['copyTimeValues'](_0xecbcx1, _0xecbcx4)
        };
        if (_0xecbcx9 && _0xecbcx2) {
            Ext.ux.Scheduler['util']['Date']['copyTimeValues'](_0xecbcx9, _0xecbcx2)
        };
        return Ext.apply(_0xecbcx5, {
            startDate: _0xecbcx1,
            endDate: _0xecbcx9,
            name: _0xecbcx3,
            resource: _0xecbcx6['resourceField'] && _0xecbcx6['resourceField']['getSelection']() || _0xecbcx6['resourceRecord']
        })
    },
    onBeforeSave: function(_0xecbcx1) {},
    onAfterSave: function(_0xecbcx1) {},
    onDeleteClick: function() {
        this['deleteEvent']()
    },
    deleteEvent: function() {
        if (this['fireEvent']('beforeeventdelete', this, this['eventRecord']) !== false) {
            var _0xecbcx1 = this['getEventStore']();
            _0xecbcx1 && _0xecbcx1['remove'](this['eventRecord']);
            return true
        };
        return false
    },
    onCancelClick: Ext['emptyFn'],
    buildButtons: function() {
        var _0xecbcx1 = [];
        this['saveButton'] = new Ext.Button({
            text: this.L('saveText'),
            scope: this,
            handler: this['onSaveClick']
        });
        _0xecbcx1['push'](this['saveButton']);
        if (this['showDeleteButton']) {
            this['deleteButton'] = new Ext.Button({
                text: this.L('deleteText'),
                scope: this,
                handler: this['onDeleteClick']
            });
            _0xecbcx1['push'](this['deleteButton'])
        };
        this['cancelButton'] = new Ext.Button({
            text: this.L('cancelText'),
            scope: this,
            handler: this['onCancelClick']
        });
        _0xecbcx1['push'](this['cancelButton']);
        return _0xecbcx1
    },
    buildDurationFields: function() {
        this['startDateField'] = new Ext['form']['field'].Date(Ext.apply({
            fieldLabel: this.L('startDateText'),
            allowBlank: false,
            format: this['dateFormat'],
            flex: 1,
            margin: '0 10 0 0'
        }, this['startDateConfig'] || {}));
        this['startTimeField'] = new Ext['form']['field'].Time(Ext.apply({
            format: this['timeFormat'],
            increment: 30,
            width: 90,
            allowBlank: false
        }, this['startTimeConfig'] || {}));
        this['endDateField'] = new Ext['form']['field'].Date(Ext.apply({
            fieldLabel: this.L('endDateText'),
            allowBlank: false,
            format: this['dateFormat'],
            flex: 1,
            margin: '0 10 0 0'
        }, this['endDateConfig'] || {}));
        this['endTimeField'] = new Ext['form']['field'].Time(Ext.apply({
            format: this['timeFormat'],
            increment: 30,
            width: 90,
            allowBlank: false
        }, this['endTimeConfig'] || {}));
        return [this['startDateField'], this['startTimeField'], this['endDateField'], this['endTimeField']]
    }
});
Ext.define('Ext.ux.Scheduler.plugin.EditorWindow', {
    extend: 'Ext.window.Window',
    mixins: ['Ext.AbstractPlugin', 'Ext.ux.Scheduler.plugin.mixin.Editor'],
    requires: ['Ext.ux.Scheduler.widget.EventEditor'],
    alias: ['widget.scheduler_editorwindow', 'plugin.scheduler_editorwindow'],
    cls: 'sch-eventeditor-window',
    layout: 'fit',
    closeAction: 'hide',
    constrain: true,
    editorConfig: null,
    privates: {
        alignOnResize: function() {}
    },
    initComponent: function() {
        var _0xecbcx1 = this;
        if (!_0xecbcx1['editor']) {
            _0xecbcx1['editor'] = Ext['create'](Ext.apply({
                xtype: 'eventeditorform',
                saveOnEnter: _0xecbcx1['saveAndCloseOnEnter'],
                onDeleteClick: function() {
                    if (this['deleteEvent']()) {
                        _0xecbcx1['hide']()
                    }
                },
                onCancelClick: function() {
                    if (this['deleteOnCancel']) {
                        this['deleteEvent']()
                    };
                    _0xecbcx1['hide']()
                }
            }, _0xecbcx1['editorConfig']));
            _0xecbcx1['items'] = _0xecbcx1['editor']
        };
        _0xecbcx1['callParent'](arguments)
    },
    init: function(_0xecbcx1) {
        this['initEditor'](_0xecbcx1, this['editor'])
    },
    afterRender: function() {
        this['callParent'](arguments);
        var _0xecbcx1 = this['getCmp']()['up']('[floating=true]');
        if (_0xecbcx1) {
            _0xecbcx1['on']({
                activate: this['floatAboveFloatingContainer'],
                move: this['floatAboveFloatingContainer'],
                scope: this
            })
        };
        this['addIgnoreCls']()
    },
    showForEvent: function(_0xecbcx2, _0xecbcx5, _0xecbcx3) {
        var _0xecbcx1 = this['dragProxyEl'];
        if (_0xecbcx1 && _0xecbcx1['dom']['parentNode']) {
            _0xecbcx1['dom']['parentNode']['removeChild'](_0xecbcx1['dom']);
            delete this['dragProxyEl']
        };
        this['showRecord'](_0xecbcx2, {
            alignToEl: _0xecbcx5,
            deleteOnCancel: _0xecbcx3
        })
    },
    showRecord: function(_0xecbcx1, _0xecbcx2) {
        _0xecbcx2 = _0xecbcx2 || {};
        this['setRecord'](_0xecbcx1);
        this['show']();
        this['floatAboveFloatingContainer']();
        if (_0xecbcx2['alignToEl']) {
            this['alignTo'](_0xecbcx2['alignToEl'])
        } else {
            this['center']()
        };
        this['setTitle'](_0xecbcx1['getName']());
        this['setIgnoreClsOnParent']();
        var _0xecbcx5 = this['schedulerView'],
            _0xecbcx3 = _0xecbcx5 && _0xecbcx5['isReadOnly'] && _0xecbcx5['isReadOnly']();
        this['editor']['deleteOnCancel'] = _0xecbcx2['deleteOnCancel'];
        this['editor']['loadRecord'](_0xecbcx1, _0xecbcx3)
    },
    floatAboveFloatingContainer: function() {
        var _0xecbcx1 = this['getCmp']()['up']('[floating=true]');
        if (this['isVisible']() && _0xecbcx1) {
            this['setZIndex'](_0xecbcx1['getEl']()['getZIndex']() + 1)
        }
    }
});
Ext.define('Ext.ux.Scheduler.plugin.EventEditor', {
    extend: 'Ext.ux.Scheduler.widget.EventEditor',
    mixins: ['Ext.AbstractPlugin', 'Ext.ux.Scheduler.plugin.mixin.Editor'],
    alias: ['widget.eventeditor', 'plugin.scheduler_eventeditor'],
    requires: ['Ext.util.Region'],
    border: false,
    shadow: false,
    hidden: true,
    collapsed: true,
    preventHeader: true,
    floating: true,
    hideMode: 'offsets',
    constrain: false,
    floatingCls: 'sch-eventeditor-floating-container',
    constructor: function(_0xecbcx1) {
        this['callParent'](arguments);
        this['addCls'](this['floatingCls'])
    },
    init: function(_0xecbcx1) {
        this['ownerCt'] = _0xecbcx1;
        this['initEditor'](_0xecbcx1, this)
    },
    afterRender: function() {
        this['callParent'](arguments);
        this['addIgnoreCls']()
    },
    show: function(_0xecbcx1, _0xecbcx2) {
        if (_0xecbcx1 && _0xecbcx1['isModel']) {
            this['showRecord'](_0xecbcx1, {
                alignToEl: _0xecbcx2
            })
        } else {
            this['callParent']()
        }
    },
    showForEvent: function(_0xecbcx1, _0xecbcx2) {
        return this['showRecord'](_0xecbcx1, {
            alignToEl: _0xecbcx2
        })
    },
    showRecord: function(_0xecbcx1, _0xecbcx2) {
        _0xecbcx2 = _0xecbcx2 || {};
        this['setRecord'](_0xecbcx1);
        this['schedulerView']['on']('eventrepaint', this['onEventRepaint'], this);
        this['show']();
        var _0xecbcx5 = _0xecbcx2['alignToEl'] || this['schedulerView']['getElementsFromEventRecord'](_0xecbcx1)[0];
        this['alignTo'](_0xecbcx5, this['schedulerView']['isHorizontal']() ? 'bl' : 'tl-tr', [0, 0]);
        if (this['constrain']) {
            this['doConstrain'](Ext['util']['Region']['getRegion'](Ext['getBody']()))
        };
        this['expand'](!this['constrain']);
        this['setIgnoreClsOnParent']();
        this['loadRecord'](_0xecbcx1, this['schedulerView']['isReadOnly']())
    },
    onDeleteClick: function() {
        this['callParent'](arguments);
        this['hideEditor']()
    },
    onCancelClick: function() {
        this['hideEditor']()
    },
    hideEditor: function() {
        this['collapse'](null, true)
    },
    hide: function() {
        this['schedulerView']['un']('eventrepaint', this['onEventRepaint'], this);
        this['callParent'](arguments)
    },
    afterCollapse: function() {
        this['hide']();
        this['callParent'](arguments)
    },
    onEventRepaint: function(_0xecbcx2, _0xecbcx1) {
        if (!this['getCollapsed']() && _0xecbcx1 === this['eventRecord']) {
            this['showForEvent'](_0xecbcx1)
        }
    }
});
Ext.define('Ext.ux.Scheduler.plugin.EventTools', {
    extend: 'Ext.Container',
    mixins: ['Ext.AbstractPlugin'],
    lockableScope: 'top',
    alias: 'plugin.scheduler_eventtools',
    hideDelay: 500,
    align: 'right',
    defaults: {
        xtype: 'tool',
        baseCls: 'sch-tool',
        overCls: 'sch-tool-over',
        width: 24,
        height: 24,
        visibleFn: Ext['emptyFn']
    },
    hideTimer: null,
    cachedSize: null,
    layout: 'hbox',
    autoRender: true,
    floating: true,
    shadow: false,
    hideMode: 'offsets',
    hidden: true,
    record: null,
    targetNode: null,
    getRecord: function() {
        return this['record']
    },
    init: function(_0xecbcx1) {
        if (!this['items']) {
            throw 'Must define an items property for this plugin to function correctly'
        };
        this['addCls']('sch-event-tools');
        this['scheduler'] = _0xecbcx1;
        _0xecbcx1['on']({
            eventresizestart: this['onOperationStart'],
            eventresizeend: this['onOperationEnd'],
            eventdragstart: this['onOperationStart'],
            eventdrop: this['onOperationEnd'],
            eventmouseenter: this['onEventMouseEnter'],
            eventmouseleave: this['onContainerMouseLeave'],
            scope: this
        })
    },
    onRender: function() {
        this['callParent'](arguments);
        this['scheduler']['mon'](this['el'], {
            mouseenter: this['onContainerMouseEnter'],
            mouseover: this['onContainerMouseEnter'],
            mouseleave: this['onContainerMouseLeave'],
            scope: this
        })
    },
    onEventMouseEnter: function(_0xecbcx2, _0xecbcx1, _0xecbcx3) {
        window['clearTimeout'](this['hideTimer']);
        var _0xecbcx5 = false;
        var _0xecbcx6;
        this['record'] = _0xecbcx1;
        this['items']['each'](function(_0xecbcx4) {
            _0xecbcx6 = _0xecbcx4['visibleFn'](_0xecbcx1) !== false;
            _0xecbcx4['setVisible'](_0xecbcx6);
            if (_0xecbcx6) {
                _0xecbcx5 = true
            }
        }, this);
        if (!_0xecbcx5) {
            return
        };
        if (!this['rendered']) {
            this['doAutoRender']()
        };
        this['targetNode'] = _0xecbcx3['getTarget'](_0xecbcx2['eventSelector']);
        this['showBy'](this['targetNode'], 'bl-tl')
    },
    onContainerMouseEnter: function() {
        window['clearTimeout'](this['hideTimer'])
    },
    onContainerMouseLeave: function() {
        window['clearTimeout'](this['hideTimer']);
        this['hideTimer'] = Ext['defer'](this['hide'], this['hideDelay'], this)
    },
    onOperationStart: function() {
        this['scheduler']['un']('eventmouseenter', this['onEventMouseEnter'], this);
        window['clearTimeout'](this['hideTimer']);
        this['hide']()
    },
    onOperationEnd: function() {
        this['scheduler']['on']('eventmouseenter', this['onEventMouseEnter'], this)
    },
    destroy: function() {
        clearTimeout(this['hideTimer']);
        this['callParent'](arguments)
    }
});
Ext.define('Ext.ux.Scheduler.plugin.exporter.AbstractExporter', {
    extend: 'Ext.util.Observable',
    requires: ['Ext.XTemplate'],
    mixins: ['Ext.ux.Scheduler.mixin.Localizable'],
    pageHeaderHeight: 41,
    pageFooterHeight: 41,
    bufferedHeightMargin: 25,
    isExporter: true,
    paperWidth: 0,
    paperHeight: 0,
    printHeight: 0,
    lockedRowsHeight: 0,
    normalRowsHeight: 0,
    iterateTimeout: 10,
    tableSelector: undefined,
    currentPage: undefined,
    headerTplDataFn: null,
    footerTplDataFn: null,
    headerTplDataFnScope: null,
    footerTplDataFnScope: null,
    config: {
        exporterId: 'abstractexporter',
        name: '',
        translateURLsToAbsolute: true,
        expandAllBeforeExport: false,
        headerTpl: '<div class="sch-export-header" style="height:{height}px; width:{width}px"><h2>{pageNo}/{totalPages}</h2></div>',
        tpl: '<!DOCTYPE html><html class="' + Ext['baseCSSPrefix'] + 'border-box {htmlClasses}"><head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type" /><title>{title}</title>{styles}</head><body class="' + Ext['baseCSSPrefix'] + 'webkit sch-export {bodyClasses}">{header}<div id="{id}" class="{componentClasses}" style="height:{bodyHeight}px; width:{totalWidth}px; position: relative !important">{HTML}</div>{footer}</body></html>',
        footerTpl: '<div class="sch-export-header" style="height:{height}px; width:{width}px"><h2>{pageNo}/{totalPages}</h2></div>',
        rowVisibilityThreshold: 0.6
    },
    callbacks: undefined,
    error: undefined,
    extractedPages: undefined,
    numberOfPages: 0,
    firstExportedRowOffset: 0,
    secondaryCanvasOffset: 0,
    eventBoxes: null,
    dependencyPainter: null,
    dependenciesHtml: '',
    depViewBeforeRefreshDetacher: null,
    depView: null,
    collectRowsTimer: null,
    collectRowsTimerTimeout: 1,
    collectRowsStepTimer: null,
    scrollToTimer: null,
    timer1: null,
    timer2: null,
    stylesheets: null,
    constructor: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx1 = _0xecbcx1 || {};
        _0xecbcx2['callParent'](arguments);
        delete _0xecbcx1['getUserHeaderTplData'];
        delete _0xecbcx1['getUserFooterTplData'];
        _0xecbcx2['initConfig'](_0xecbcx1);
        if (!_0xecbcx1['tableSelector']) {
            _0xecbcx2['tableSelector'] = '.' + Ext['baseCSSPrefix'] + 'grid-item-container'
        };
        if (!_0xecbcx1['name']) {
            _0xecbcx2['setName'](_0xecbcx2.L('name'))
        }
    },
    destroy: function() {
        clearTimeout(this['collectRowsStepTimer']);
        clearTimeout(this['collectRowsTimer']);
        clearTimeout(this['scrollToTimer']);
        clearTimeout(this['timer1']);
        clearTimeout(this['timer2']);
        this['callParent'](arguments)
    },
    setHeaderTpl: function(_0xecbcx1) {
        this['headerTpl'] = this['getTplInstance'](_0xecbcx1)
    },
    getHeaderTpl: function() {
        return this['headerTpl']
    },
    setTpl: function(_0xecbcx1) {
        this['tpl'] = this['getTplInstance'](_0xecbcx1)
    },
    getTpl: function() {
        return this['tpl']
    },
    setFooterTpl: function(_0xecbcx1) {
        this['footerTpl'] = this['getTplInstance'](_0xecbcx1)
    },
    getFooterTpl: function() {
        return this['footerTpl']
    },
    getTplInstance: function(_0xecbcx1) {
        return (_0xecbcx1 && !_0xecbcx1['isTemplate']) ? new Ext.XTemplate(_0xecbcx1, {
            disableFormats: true
        }) : _0xecbcx1
    },
    getBodyClasses: function() {
        var _0xecbcx2 = new RegExp(Ext['baseCSSPrefix'] + 'ie\d?|' + Ext['baseCSSPrefix'] + 'gecko', 'g'),
            _0xecbcx1 = document['body']['className']['replace'](_0xecbcx2, '');
        if (Ext['isIE']) {
            _0xecbcx1 += ' sch-ie-export'
        };
        return _0xecbcx1
    },
    getComponentClasses: function() {
        return this['getComponent']()['el']['dom']['className']
    },
    setComponent: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['component'] = _0xecbcx1;
        _0xecbcx2['view'] = _0xecbcx1['getSchedulingView']();
        _0xecbcx2['normalGrid'] = _0xecbcx1['normalGrid'];
        _0xecbcx2['lockedGrid'] = _0xecbcx1['lockedGrid'];
        _0xecbcx2['normalView'] = _0xecbcx1['normalGrid']['getView']();
        _0xecbcx2['lockedView'] = _0xecbcx1['lockedGrid']['getView']();
        _0xecbcx2['lockedBodySelector'] = '#' + _0xecbcx2['lockedView']['getId']();
        _0xecbcx2['normalBodySelector'] = '#' + _0xecbcx2['normalView']['getId']();
        _0xecbcx2['lockedHeader'] = _0xecbcx2['lockedGrid']['headerCt'];
        _0xecbcx2['normalHeader'] = _0xecbcx2['normalGrid']['headerCt'];
        _0xecbcx2['headerHeight'] = _0xecbcx2['normalHeader']['getHeight']();
        _0xecbcx2['printHeight'] = Math['floor'](_0xecbcx2['paperHeight']) - _0xecbcx2['headerHeight'] - (_0xecbcx2['exportConfig']['showHeader'] ? _0xecbcx2['pageHeaderHeight'] : 0) - (_0xecbcx2['exportConfig']['showFooter'] ? _0xecbcx2['pageFooterHeight'] : 0);
        _0xecbcx2['saveComponentState'](_0xecbcx1);
        _0xecbcx2['initDependencyPainter'](_0xecbcx1)
    },
    getComponent: function() {
        return this['component']
    },
    setPaperSize: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx5 = this;
        if (_0xecbcx2 === 'landscape') {
            _0xecbcx5['paperWidth'] = _0xecbcx1['height'];
            _0xecbcx5['paperHeight'] = _0xecbcx1['width']
        } else {
            _0xecbcx5['paperWidth'] = _0xecbcx1['width'];
            _0xecbcx5['paperHeight'] = _0xecbcx1['height']
        }
    },
    getPaperFormat: function() {
        return this['exportConfig']['format']
    },
    isBuffered: function() {
        return !!this['getBufferedRenderer']()
    },
    getBufferedRenderer: function() {
        return this['view']['bufferedRenderer']
    },
    setComponentRange: function(_0xecbcx3) {
        var _0xecbcx9 = this,
            _0xecbcx5 = _0xecbcx9['getComponent']();
        if (_0xecbcx3['range'] !== 'complete') {
            var _0xecbcx2 = _0xecbcx9['view'],
                _0xecbcx1, _0xecbcx6;
            switch (_0xecbcx3['range']) {
                case 'date':
                    _0xecbcx1 = new Date(_0xecbcx3['dateFrom']);
                    _0xecbcx6 = new Date(_0xecbcx3['dateTo']);
                    if (Ext.ux.Scheduler['util']['Date']['getDurationInDays'](_0xecbcx1, _0xecbcx6) < 1) {
                        _0xecbcx6 = Ext.ux.Scheduler['util']['Date']['add'](_0xecbcx6, Ext.ux.Scheduler['util']['Date'].DAY, 1)
                    };
                    break;
                case 'current':
                    var _0xecbcx7 = _0xecbcx2['getVisibleDateRange']();
                    _0xecbcx1 = _0xecbcx7['startDate'];
                    _0xecbcx6 = _0xecbcx7['endDate'] || _0xecbcx2['timeAxis']['getEnd']();
                    break;
                case 'completedata':
                    var _0xecbcx4 = _0xecbcx5['getEventStore']()['getTotalTimeSpan']();
                    _0xecbcx1 = _0xecbcx4['start'];
                    _0xecbcx6 = _0xecbcx4['end'];
                    break
            };
            if (_0xecbcx1 && _0xecbcx6) {
                _0xecbcx5['setTimeSpan'](_0xecbcx1, _0xecbcx6)
            }
        };
        _0xecbcx9['ticks'] = _0xecbcx5['timeAxis']['getTicks']();
        if (_0xecbcx3['rowsRange'] == 'visible') {
            _0xecbcx3['rowsRange'] = _0xecbcx9['findVisibleRowsRange']()
        } else {
            _0xecbcx3['rowsRange'] = null
        }
    },
    getStylesheets: function() {
        var _0xecbcx5 = this['getTranslateURLsToAbsolute'](),
            _0xecbcx1 = Ext['getHead']()['select']('link[rel="stylesheet"], style', true),
            _0xecbcx2 = '';
        _0xecbcx1['each'](function(_0xecbcx4) {
            var _0xecbcx3 = _0xecbcx4['dom']['cloneNode'](true);
            if (_0xecbcx5 && _0xecbcx3['href']) {
                _0xecbcx3['setAttribute']('href', _0xecbcx3['href'])
            };
            _0xecbcx2 += _0xecbcx3['outerHTML'];
            if (Ext['isIE'] && _0xecbcx3['styleSheet'] && /style/i ['test'](_0xecbcx3['tagName'])) {
                _0xecbcx2 += '<style type="text/css">' + _0xecbcx4['dom']['styleSheet']['cssText'] + '</style>'
            }
        });
        return _0xecbcx2
    },
    forEachTimeSpanPlugin: function(_0xecbcx5, _0xecbcx6, _0xecbcx4) {
        if (Ext.ux.Scheduler['feature'] && Ext.ux.Scheduler['feature']['AbstractTimeSpan']) {
            var _0xecbcx7 = this;
            var _0xecbcx2 = []['concat'](_0xecbcx5['plugins'], _0xecbcx5['normalGrid']['plugins'], _0xecbcx5['columnLinesFeature']);
            for (var _0xecbcx3 = 0, _0xecbcx1 = _0xecbcx2['length']; _0xecbcx3 < _0xecbcx1; _0xecbcx3++) {
                var _0xecbcx9 = _0xecbcx2[_0xecbcx3];
                if (_0xecbcx9 instanceof Ext.ux.Scheduler['feature']['AbstractTimeSpan']) {
                    _0xecbcx6['call'](_0xecbcx4 || _0xecbcx7, _0xecbcx9)
                }
            }
        }
    },
    setCellSize: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        _0xecbcx1['timeColumnWidth'] = _0xecbcx2[0];
        if (_0xecbcx1['timeColumnWidth']) {
            this['getComponent']()['setTimeColumnWidth'](_0xecbcx1['timeColumnWidth'])
        };
        if (_0xecbcx2['length'] > 1) {
            _0xecbcx1['view']['setRowHeight'](_0xecbcx2[1])
        }
    },
    findVisibleRowsRange: function() {
        var _0xecbcx6 = this,
            _0xecbcx7 = _0xecbcx6['lockedView']['all'],
            _0xecbcx8 = _0xecbcx7['startIndex'],
            _0xecbcx4 = _0xecbcx7['endIndex'];
        var _0xecbcx9 = false,
            _0xecbcx5 = -1,
            _0xecbcx1 = -1;
        for (var _0xecbcx3 = _0xecbcx8; _0xecbcx3 <= _0xecbcx4; _0xecbcx3++) {
            var _0xecbcx2 = _0xecbcx7['item'](_0xecbcx3, true);
            if (_0xecbcx6['isRowVisible'](_0xecbcx2, _0xecbcx6['lockedBox'])) {
                if (!_0xecbcx9) {
                    _0xecbcx5 = _0xecbcx3;
                    _0xecbcx9 = true
                };
                _0xecbcx1 = _0xecbcx3
            } else {
                if (_0xecbcx9) {
                    break
                }
            }
        };
        return [_0xecbcx5, _0xecbcx1]
    },
    prepareComponent: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = this;
        _0xecbcx2 = _0xecbcx2 || _0xecbcx5['getComponent']();
        _0xecbcx5['suspendInfiniteScroll'](_0xecbcx2);
        _0xecbcx5['forEachTimeSpanPlugin'](_0xecbcx2, function(_0xecbcx3) {
            _0xecbcx3['_renderDelay'] = _0xecbcx3['renderDelay'];
            _0xecbcx3['renderDelay'] = 0
        });
        _0xecbcx2['getSchedulingView']()['timeAxisViewModel']['suppressFit'] = true;
        _0xecbcx2['timeAxis']['autoAdjust'] = false;
        _0xecbcx2['normalGrid']['expand']();
        _0xecbcx2['lockedGrid']['expand']();
        if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
            _0xecbcx5['lockedBox'] = _0xecbcx5['lockedGrid']['body']['getBox']();
            _0xecbcx5['normalBox'] = _0xecbcx5['normalGrid']['body']['getBox']()
        } else {
            _0xecbcx5['lockedBox'] = _0xecbcx5['lockedView']['getBox']();
            _0xecbcx5['normalBox'] = _0xecbcx5['normalView']['getBox']()
        };
        _0xecbcx5['setComponentRange'](_0xecbcx1);
        _0xecbcx1['cellSize'] && _0xecbcx5['setCellSize'](_0xecbcx1['cellSize']);
        _0xecbcx1['beforeExport'] && _0xecbcx1['beforeExport'](_0xecbcx2, _0xecbcx5['ticks']);
        _0xecbcx5['prepareColumns'](_0xecbcx1['columns']);
        if (_0xecbcx5['expandAllBeforeExport'] && _0xecbcx2['expandAll']) {
            _0xecbcx2['expandAll']()
        };
        _0xecbcx5['fitComponentIntoPage'](_0xecbcx1);
        _0xecbcx5['view']['timeAxisViewModel']['setTickWidth'](_0xecbcx5['view']['timeAxisViewModel']['getTickWidth']());
        if (_0xecbcx5['isBuffered']() && Ext['isIE8']) {
            _0xecbcx5['normalView']['bufferedRenderer']['variableRowHeight'] = false;
            _0xecbcx5['lockedView']['bufferedRenderer']['variableRowHeight'] = false
        };
        _0xecbcx5['stylesheets'] = _0xecbcx5['getStylesheets']()
    },
    prepareColumns: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        if (_0xecbcx1 && _0xecbcx1['length']) {
            _0xecbcx2['lockedGrid']['headerCt']['items']['each'](function(_0xecbcx5) {
                if (Ext['Array']['contains'](_0xecbcx1, _0xecbcx5)) {
                    _0xecbcx5['show']()
                } else {
                    _0xecbcx5['hide']()
                }
            })
        }
    },
    restoreComponent: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx1 = _0xecbcx1 || _0xecbcx2['getComponent']();
        _0xecbcx2['forEachTimeSpanPlugin'](_0xecbcx1, function(_0xecbcx5) {
            _0xecbcx5['renderDelay'] = _0xecbcx5['_renderDelay'];
            delete _0xecbcx5['_renderDelay']
        });
        if (_0xecbcx2['depViewBeforeRefreshDetacher']) {
            _0xecbcx2['depViewBeforeRefreshDetacher']['destroy']();
            _0xecbcx2['depViewBeforeRefreshDetacher'] = null;
            _0xecbcx2['depView']['updateCanvasLayer']()
        };
        _0xecbcx2['restoreComponentState'](_0xecbcx1);
        _0xecbcx2['restoreInfiniteScroll'](_0xecbcx1);
        _0xecbcx2['exportConfig']['afterExport'] && _0xecbcx2['exportConfig']['afterExport'](_0xecbcx1)
    },
    saveComponentState: function(_0xecbcx9) {
        _0xecbcx9 = _0xecbcx9 || this['getComponent']();
        var _0xecbcx4 = this,
            _0xecbcx6 = _0xecbcx9['getSchedulingView'](),
            _0xecbcx3 = _0xecbcx9['normalGrid'],
            _0xecbcx1 = _0xecbcx9['lockedGrid'];
        var _0xecbcx2 = [];
        _0xecbcx1['headerCt']['items']['each'](function(_0xecbcx8) {
            _0xecbcx2['push']({
                column: _0xecbcx8,
                visible: !_0xecbcx8['isHidden']()
            })
        });
        var _0xecbcx7 = _0xecbcx6['timeAxisViewModel'];
        var _0xecbcxa = _0xecbcx7['originalTickWidth'];
        var _0xecbcx5 = _0xecbcx7['getTickWidth']();
        _0xecbcx7['setTickWidth'](_0xecbcx5, true);
        _0xecbcx4['restoreSettings'] = {
            width: _0xecbcx9['getWidth'](),
            height: _0xecbcx9['getHeight'](),
            rowHeight: _0xecbcx7['getViewRowHeight'](),
            originalTickWidth: _0xecbcxa,
            columnWidth: _0xecbcx5,
            startDate: _0xecbcx9['getStart'](),
            endDate: _0xecbcx9['getEnd'](),
            normalWidth: _0xecbcx3['getWidth'](),
            normalLeft: _0xecbcx3['getEl']()['getStyle']('left'),
            lockedWidth: _0xecbcx1['getWidth'](),
            lockedCollapse: _0xecbcx1['collapsed'],
            normalCollapse: _0xecbcx3['collapsed'],
            columns: _0xecbcx2,
            autoAdjust: _0xecbcx9['timeAxis']['autoAdjust'],
            suppressFit: _0xecbcx7['suppressFit'],
            startIndex: _0xecbcx6['all']['startIndex'],
            lockedScrollX: _0xecbcx4['lockedView']['getScrollX'](),
            normalScrollX: _0xecbcx6['getScrollX'](),
            scrollY: _0xecbcx6['getVerticalScroll']()
        }
    },
    restoreComponentState: function(_0xecbcx5) {
        var _0xecbcx3 = this;
        _0xecbcx5 = _0xecbcx5 || _0xecbcx3['getComponent']();
        var _0xecbcx2 = _0xecbcx3['restoreSettings'],
            _0xecbcx1 = _0xecbcx5['getSchedulingView']();
        _0xecbcx5['timeAxis']['autoAdjust'] = _0xecbcx2['autoAdjust'];
        _0xecbcx5['normalGrid']['show']();
        _0xecbcx5['setWidth'](_0xecbcx2['width']);
        _0xecbcx5['setHeight'](_0xecbcx2['height']);
        _0xecbcx5['setTimeSpan'](_0xecbcx2['startDate'], _0xecbcx2['endDate']);
        _0xecbcx5['setTimeColumnWidth'](_0xecbcx2['columnWidth'], true);
        _0xecbcx5['setRowHeight'](_0xecbcx2['rowHeight']);
        Ext['Array']['each'](_0xecbcx2['columns'], function(_0xecbcx4) {
            _0xecbcx4['column']['setVisible'](_0xecbcx4['visible'])
        });
        _0xecbcx5['lockedGrid']['show']();
        _0xecbcx5['normalGrid']['setWidth'](_0xecbcx2['normalWidth']);
        _0xecbcx5['normalGrid']['getEl']()['setStyle']('left', _0xecbcx2['normalLeft']);
        _0xecbcx5['lockedGrid']['setWidth'](_0xecbcx2['lockedWidth']);
        _0xecbcx1['timeAxisViewModel']['suppressFit'] = _0xecbcx2['suppressFit'];
        _0xecbcx1['timeAxisViewModel']['setTickWidth'](_0xecbcx2['columnWidth']);
        _0xecbcx1['timeAxisViewModel']['originalTickWidth'] = _0xecbcx2['originalTickWidth'];
        if (_0xecbcx2['lockedCollapse']) {
            _0xecbcx5['lockedGrid']['collapse']()
        };
        if (_0xecbcx2['normalCollapse']) {
            _0xecbcx5['normalGrid']['collapse']()
        };
        _0xecbcx3['restoreComponentScroll'](_0xecbcx2);
        if (_0xecbcx3['getBufferedRenderer']()) {
            if (Ext['isIE8']) {
                _0xecbcx3['normalView']['bufferedRenderer']['variableRowHeight'] = true;
                _0xecbcx3['lockedView']['bufferedRenderer']['variableRowHeight'] = true
            }
        }
    },
    restoreComponentScroll: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['lockedView']['setScrollX'](_0xecbcx1['lockedScrollX']);
        _0xecbcx2['normalView']['scrollTo'](_0xecbcx1['normalScrollX'], _0xecbcx1['scrollY'])
    },
    extractPages: function(_0xecbcx2, _0xecbcx1, _0xecbcx4, _0xecbcx5) {
        var _0xecbcx3 = this;
        if (!_0xecbcx4) {
            throw 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter: [extractPages] "callback" has to be provided.'
        };
        _0xecbcx3['enableGarbageCollector'] = Ext['enableGarbageCollector'];
        Ext['enableGarbageCollector'] = false;
        Ext['dom']['GarbageCollector']['pause']();
        _0xecbcx3['exportConfig'] = _0xecbcx1;
        _0xecbcx3['normalRows'] = [];
        _0xecbcx3['lockedRows'] = [];
        _0xecbcx3['extractedPages'] = [];
        _0xecbcx3['numberOfPages'] = 0;
        _0xecbcx3['lockedRowsHeight'] = 0;
        _0xecbcx3['normalRowsHeight'] = 0;
        _0xecbcx3['firstExportedRowOffset'] = 0;
        _0xecbcx3['secondaryCanvasOffset'] = 0;
        _0xecbcx3['_abort'] = false;
        _0xecbcx3['stylesheets'] = null;
        _0xecbcx3['setPaperSize'](_0xecbcx1['pageSize'], _0xecbcx1['orientation']);
        _0xecbcx3['setComponent'](_0xecbcx2, _0xecbcx1);
        _0xecbcx3['prepareComponent'](_0xecbcx2, _0xecbcx1);
        _0xecbcx3['callbacks'] = {
            success: _0xecbcx4,
            scope: _0xecbcx5 || _0xecbcx3
        };
        _0xecbcx3['collectRowsTimer'] = setTimeout(function() {
            _0xecbcx3['collectRows'](_0xecbcx3._onRowsCollected, _0xecbcx3, _0xecbcx1)
        }, _0xecbcx3['collectRowsTimerTimeout'])
    },
    onPagesExtracted: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx1 = _0xecbcx2['renderPages'](_0xecbcx1);
        _0xecbcx2['restoreComponent']();
        _0xecbcx2['submitPages'](_0xecbcx1)
    },
    submitPages: function(_0xecbcx1) {
        var _0xecbcx5 = this,
            _0xecbcx2 = _0xecbcx5['callbacks'];
        _0xecbcx2['success']['call'](_0xecbcx2['scope'], _0xecbcx1);
        Ext['enableGarbageCollector'] = _0xecbcx5['enableGarbageCollector'];
        Ext['dom']['GarbageCollector']['resume']()
    },
    getCurrentPage: function() {
        return this['currentPage']
    },
    setCurrentPage: function(_0xecbcx1) {
        this['currentPage'] = _0xecbcx1
    },
    getExpectedNumberOfPages: function() {
        throw 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter: [getExpectedNumberOfPages] Abstract method called.'
    },
    commitPage: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['numberOfPages']++;
        var _0xecbcx3 = _0xecbcx2['preparePageToCommit'](_0xecbcx1);
        _0xecbcx2['fireEvent']('beforecommitpage', _0xecbcx2, _0xecbcx3, _0xecbcx2['numberOfPages'], _0xecbcx2['getExpectedNumberOfPages']());
        var _0xecbcx5 = Ext.apply({
            html: _0xecbcx3['dom']['outerHTML'],
            number: _0xecbcx2['numberOfPages']
        }, _0xecbcx1);
        _0xecbcx2['extractedPages']['push'](_0xecbcx5);
        _0xecbcx2['fireEvent']('commitpage', _0xecbcx2, _0xecbcx5, _0xecbcx2['numberOfPages'], _0xecbcx2['getExpectedNumberOfPages']())
    },
    collectLockedRow: function(_0xecbcx4, _0xecbcx5, _0xecbcx6) {
        var _0xecbcx3 = Ext['get'](_0xecbcx4),
            _0xecbcx2 = _0xecbcx3['getHeight']() - (_0xecbcx6 ? _0xecbcx3['getBorderWidth']('b') : 0);
        this['lockedRowsHeight'] += _0xecbcx2;
        var _0xecbcx1 = {
            height: _0xecbcx2,
            row: _0xecbcx4['cloneNode'](true),
            record: this['lockedView']['getRecord'](_0xecbcx5)
        };
        this['lockedRows']['push'](_0xecbcx1);
        return _0xecbcx1
    },
    collectNormalRow: function(_0xecbcx4, _0xecbcx5, _0xecbcx6) {
        var _0xecbcx3 = Ext['get'](_0xecbcx4),
            _0xecbcx2 = _0xecbcx3['getHeight']() - (_0xecbcx6 ? _0xecbcx3['getBorderWidth']('b') : 0);
        this['normalRowsHeight'] += _0xecbcx2;
        var _0xecbcx1 = {
            height: _0xecbcx2,
            row: _0xecbcx4['cloneNode'](true),
            record: this['normalView']['getRecord'](_0xecbcx5)
        };
        this['normalRows']['push'](_0xecbcx1);
        if (this['depView'] && this['depView']['getDependencyStore']()) {
            this['fillRecordRelatedBoxes'](_0xecbcx1['record'])
        };
        return _0xecbcx1
    },
    _onRowsCollected: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['depView'];
        if (_0xecbcx1 && _0xecbcx1['getDependencyStore']()) {
            _0xecbcx2['renderDependencies']()
        };
        _0xecbcx2['onRowsCollected']['apply'](_0xecbcx2, arguments)
    },
    onRowsCollected: function() {
        throw 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter: [onRowsCollected] Abstract method called.'
    },
    _abort: false,
    abort: function() {
        this['_abort'] = function() {
            this['restoreComponent']()
        }
    },
    iterateAsync: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx3 = this;
        _0xecbcx2 = _0xecbcx2 || _0xecbcx3;
        var _0xecbcx1 = function() {
            var _0xecbcx4 = arguments;
            _0xecbcx3['timer2'] = setTimeout(function() {
                !_0xecbcx3['_abort'] ? _0xecbcx5['apply'](_0xecbcx2, []['concat']['apply']([_0xecbcx1], _0xecbcx4)) : _0xecbcx3._abort()
            }, _0xecbcx3['iterateTimeout'])
        };
        _0xecbcx1['apply'](_0xecbcx3, Ext['Array']['slice'](arguments, 2))
    },
    callAsync: function(_0xecbcx2, _0xecbcx1) {
        _0xecbcx1 = _0xecbcx1 || this;
        this['timer1'] = setTimeout(function() {
            _0xecbcx2['apply'](_0xecbcx1, Ext['Array']['slice'](arguments, 2))
        }, this['iterateTimeout'])
    },
    canStartRowsCollecting: function() {
        var _0xecbcx2 = this['getComponent'](),
            _0xecbcx1 = _0xecbcx2['getDependencyView']();
        return !_0xecbcx1 || _0xecbcx1['getDependencyCanvas']()
    },
    depViewRefreshBlocker: function() {
        return false
    },
    collectRows: function(_0xecbcx7, _0xecbcx3, _0xecbcx2) {
        var _0xecbcx6 = this,
            _0xecbcx9 = 0;
        if (!_0xecbcx6['canStartRowsCollecting']()) {
            var _0xecbcx1 = Ext['Array']['slice'](arguments, 0);
            _0xecbcx6['collectRowsTimer'] = setTimeout(function() {
                _0xecbcx6['collectRows']['apply'](_0xecbcx6, _0xecbcx1)
            }, _0xecbcx6['collectRowsTimerTimeout']);
            return
        };
        var _0xecbcx4 = _0xecbcx6['getComponent']()['getDependencyView']();
        if (_0xecbcx6['depView']) {
            _0xecbcx6['depViewBeforeRefreshDetacher'] = _0xecbcx4['on']({
                beforerefresh: _0xecbcx6['depViewRefreshBlocker'],
                destroyable: true
            })
        };
        var _0xecbcx5 = _0xecbcx6['isBuffered']();
        if (_0xecbcx2['rowsRange']) {
            _0xecbcx9 = _0xecbcx2['rowsRange'][0];
            _0xecbcx5 = !(_0xecbcx2['rowsRange'][0] >= _0xecbcx6['view']['all']['startIndex'] && _0xecbcx2['rowsRange'][1] <= _0xecbcx6['view']['all']['endIndex'])
        };
        if (_0xecbcx5) {
            _0xecbcx6['scrollToTimer'] = setTimeout(function() {
                _0xecbcx6['scrollTo'](_0xecbcx9, function() {
                    _0xecbcx9 && _0xecbcx6['initFirstExportedRowOffset'](_0xecbcx9);
                    _0xecbcx6['iterateAsync'](_0xecbcx6['collectRowsStep'], _0xecbcx6, _0xecbcx9, _0xecbcx7, _0xecbcx3, _0xecbcx2)
                })
            }, 1)
        } else {
            _0xecbcx9 && _0xecbcx6['initFirstExportedRowOffset'](_0xecbcx9);
            _0xecbcx6['collectRowsStepTimer'] = setTimeout(function() {
                _0xecbcx6['collectRowsStep'](null, _0xecbcx9, _0xecbcx7, _0xecbcx3, _0xecbcx2)
            }, 1)
        }
    },
    initFirstExportedRowOffset: function(_0xecbcx1) {
        this['firstExportedRowOffset'] = this['view']['el']['getScrollTop']() - this['view']['el']['getTop']() + Ext['fly'](this['view']['getNode'](_0xecbcx1))['getTop']()
    },
    isRowVisible: function(_0xecbcx3, _0xecbcx1) {
        var _0xecbcx2 = Ext['fly'](_0xecbcx3),
            _0xecbcx6 = _0xecbcx2['getTop'](),
            _0xecbcx4 = _0xecbcx2['getHeight'](),
            _0xecbcx9 = _0xecbcx6 + _0xecbcx4,
            _0xecbcx5 = (1 - this['getRowVisibilityThreshold']()) * _0xecbcx4;
        return _0xecbcx6 + _0xecbcx5 > _0xecbcx1['top'] && _0xecbcx9 - _0xecbcx5 < _0xecbcx1['bottom']
    },
    collectRowsStep: function(_0xecbcx9, _0xecbcxb, _0xecbcx10, _0xecbcx17, _0xecbcx1) {
        var _0xecbcxc = this,
            _0xecbcx6 = _0xecbcxc['normalView']['all']['endIndex'],
            _0xecbcxd = _0xecbcxc['component']['store']['getCount'](),
            _0xecbcx3 = _0xecbcx1['rowsRange'],
            _0xecbcxe = _0xecbcxc['normalView']['all']['slice'](_0xecbcxb),
            _0xecbcx2 = _0xecbcxc['lockedView']['all']['slice'](_0xecbcxb),
            _0xecbcx4 = 0;
        var _0xecbcx7;
        if (_0xecbcx3) {
            _0xecbcx7 = _0xecbcx3[1]
        };
        var _0xecbcxf = false;
        for (var _0xecbcx8 = _0xecbcxb, _0xecbcx5 = _0xecbcxe['length']; _0xecbcx4 < _0xecbcx5; _0xecbcx4++) {
            if (_0xecbcx8 > _0xecbcx7) {
                _0xecbcxf = true;
                break
            };
            _0xecbcx2[_0xecbcx4] && _0xecbcxc['collectLockedRow'](_0xecbcx2[_0xecbcx4], _0xecbcx8, _0xecbcx4 + 1 === _0xecbcx5);
            _0xecbcxc['collectNormalRow'](_0xecbcxe[_0xecbcx4], _0xecbcx8, _0xecbcx4 + 1 === _0xecbcx5);
            _0xecbcx8++
        };
        _0xecbcxc['fireEvent']('collectrows', _0xecbcxc, _0xecbcxb, _0xecbcx8, _0xecbcxd);
        if (!_0xecbcxf && _0xecbcxc['isBuffered']()) {
            if (_0xecbcx6 + 1 < _0xecbcxd) {
                _0xecbcxc['callAsync'](function() {
                    _0xecbcxc['scrollTo'](_0xecbcx6 + 1, function() {
                        _0xecbcx9(_0xecbcx6 + 1, _0xecbcx10, _0xecbcx17, _0xecbcx1)
                    })
                })
            } else {
                _0xecbcxc['callAsync'](function() {
                    _0xecbcxc['scrollTo'](0, function() {
                        _0xecbcx10['call'](_0xecbcx17 || _0xecbcxc, _0xecbcxc['lockedRows'], _0xecbcxc['normalRows'])
                    })
                })
            }
        } else {
            _0xecbcx10['call'](_0xecbcx17 || _0xecbcxc, _0xecbcxc['lockedRows'], _0xecbcxc['normalRows'])
        }
    },
    renderPages: function(_0xecbcx1) {
        var _0xecbcx3 = this;
        _0xecbcx1 = _0xecbcx1 || _0xecbcx3['extractedPages'];
        for (var _0xecbcx5 = 0, _0xecbcx2 = _0xecbcx1['length']; _0xecbcx5 < _0xecbcx2; _0xecbcx5++) {
            var _0xecbcx4 = _0xecbcx1[_0xecbcx5];
            _0xecbcx4['html'] = _0xecbcx3['applyPageTpl'](_0xecbcx4)
        };
        return _0xecbcx1
    },
    applyPageTpl: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        return _0xecbcx2['getTpl']()['apply'](_0xecbcx2['getPageTplData'](_0xecbcx1))
    },
    applyHeaderTpl: function(_0xecbcx2) {
        var _0xecbcx5 = this,
            _0xecbcx4 = _0xecbcx5['getHeaderTpl']();
        if (_0xecbcx5['exportConfig']['showHeader'] && _0xecbcx4) {
            var _0xecbcx1 = _0xecbcx5['headerTplDataFn'];
            var _0xecbcx3 = _0xecbcx1 && _0xecbcx1['call'](_0xecbcx5['headerTplDataFnScope'] || _0xecbcx5, _0xecbcx2);
            return _0xecbcx4['apply'](Ext.apply(_0xecbcx5['getHeaderTplData'](_0xecbcx2), _0xecbcx3))
        };
        return ''
    },
    applyFooterTpl: function(_0xecbcx2) {
        var _0xecbcx5 = this,
            _0xecbcx4 = _0xecbcx5['getFooterTpl']();
        if (_0xecbcx5['exportConfig']['showFooter'] && _0xecbcx4) {
            var _0xecbcx1 = _0xecbcx5['footerTplDataFn'];
            var _0xecbcx3 = _0xecbcx1 && _0xecbcx1['call'](_0xecbcx5['footerTplDataFnScope'] || _0xecbcx5, _0xecbcx2);
            return _0xecbcx4['apply'](Ext.apply(_0xecbcx5['getFooterTplData'](_0xecbcx2), _0xecbcx3))
        };
        return ''
    },
    getHeaderTplData: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        return {
            width: _0xecbcx2['paperWidth'],
            height: _0xecbcx2['pageHeaderHeight'],
            totalPages: _0xecbcx2['numberOfPages'],
            pageNo: _0xecbcx1['number']
        }
    },
    getFooterTplData: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        return {
            width: _0xecbcx2['paperWidth'],
            height: _0xecbcx2['pageFooterHeight'],
            totalPages: _0xecbcx2['numberOfPages'],
            pageNo: _0xecbcx1['number']
        }
    },
    getPageTplData: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        return {
            id: _0xecbcx2['getComponent']()['id'],
            bodyClasses: _0xecbcx2['getBodyClasses'](),
            bodyHeight: _0xecbcx2['printHeight'] + _0xecbcx2['headerHeight'],
            componentClasses: _0xecbcx2['getComponentClasses'](),
            styles: _0xecbcx2['stylesheets'],
            showHeader: _0xecbcx2['exportConfig']['showHeader'],
            showFooter: _0xecbcx2['exportConfig']['showFooter'],
            header: _0xecbcx2['applyHeaderTpl'](_0xecbcx1),
            HTML: _0xecbcx1['html'],
            footer: _0xecbcx2['applyFooterTpl'](_0xecbcx1),
            totalWidth: _0xecbcx2['paperWidth'],
            pageNo: _0xecbcx1['number'],
            totalPages: _0xecbcx2['numberOfPages'],
            title: _0xecbcx1['number'] + ' of ' + _0xecbcx2['numberOfPages']
        }
    },
    fitComponentIntoPage: Ext['emptyFn'],
    getLockedGridBody: function(_0xecbcx1) {
        _0xecbcx1 = _0xecbcx1 || this['getCurrentPage']();
        return _0xecbcx1['down'](this['lockedBodySelector'] + ' ' + this['tableSelector'], true)
    },
    getNormalGridBody: function(_0xecbcx1) {
        _0xecbcx1 = _0xecbcx1 || this['getCurrentPage']();
        return _0xecbcx1['down'](this['normalBodySelector'] + ' ' + this['tableSelector'], true)
    },
    emptyLockedGrid: function(_0xecbcx1) {
        Ext['fly'](this['getLockedGridBody'](_0xecbcx1))['select'](this['lockedView']['getItemSelector']())['remove']()
    },
    fillGrids: function(_0xecbcx5, _0xecbcx2, _0xecbcx4, _0xecbcx1) {
        var _0xecbcx3 = this;
        _0xecbcx3['fillLockedGrid'](_0xecbcx5, _0xecbcx4, _0xecbcx1);
        _0xecbcx3['fillNormalGrid'](_0xecbcx2, _0xecbcx4, _0xecbcx1)
    },
    fillLockedGrid: function(_0xecbcx5, _0xecbcx3, _0xecbcx1) {
        var _0xecbcx2 = this;
        if (!_0xecbcx1) {
            _0xecbcx2['emptyLockedGrid']()
        };
        _0xecbcx2['appendRows'](_0xecbcx2['getLockedGridBody'](), _0xecbcx5 || _0xecbcx2['lockedRows'], _0xecbcx3)
    },
    fillNormalGrid: function(_0xecbcx5, _0xecbcx3, _0xecbcx1) {
        var _0xecbcx2 = this;
        if (!_0xecbcx1) {
            _0xecbcx2['emptyNormalGrid']()
        };
        _0xecbcx2['appendRows'](_0xecbcx2['getNormalGridBody'](), _0xecbcx5 || _0xecbcx2['normalRows'], _0xecbcx3)
    },
    appendRows: function(_0xecbcx3, _0xecbcx5, _0xecbcx4) {
        for (var _0xecbcx2 = 0, _0xecbcx1 = _0xecbcx5['length']; _0xecbcx2 < _0xecbcx1; _0xecbcx2++) {
            _0xecbcx3['appendChild'](_0xecbcx4 ? _0xecbcx5[_0xecbcx2]['row']['cloneNode'](true) : _0xecbcx5[_0xecbcx2]['row'])
        }
    },
    emptyNormalGrid: function(_0xecbcx1) {
        Ext['fly'](this['getNormalGridBody'](_0xecbcx1))['select'](this['normalView']['getItemSelector']())['remove']()
    },
    getRowHeight: function() {
        return this['view']['timeAxisViewModel']['getViewRowHeight']()
    },
    getTotalSize: function() {
        return {
            width: this['getTotalWidth'](),
            height: this['getTotalHeight']()
        }
    },
    getTotalHeight: function() {
        var _0xecbcx2 = this,
            _0xecbcx1;
        if (_0xecbcx2['isBuffered']()) {
            _0xecbcx1 = _0xecbcx2['bufferedHeightMargin'] + _0xecbcx2['normalRowsHeight']
        } else {
            _0xecbcx1 = _0xecbcx2['lockedView']['getEl']()['down'](_0xecbcx2['tableSelector'])['getHeight']()
        };
        return _0xecbcx2['headerHeight'] + _0xecbcx1
    },
    getTotalWidth: function() {
        var _0xecbcx1;
        if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
            _0xecbcx1 = this['component']['lockedGrid']['split'] ? this['component']['down']('splitter')['getWidth']() : 0
        } else {
            _0xecbcx1 = this['component']['split'] ? this['component']['down']('splitter')['getWidth']() : 0
        };
        return this['getLockedGridWidth']() + _0xecbcx1 + this['normalView']['getEl']()['down'](this['tableSelector'])['getWidth']()
    },
    getLockedGridWidth: function() {
        return this['lockedHeader']['getEl']()['down']('.' + Ext['baseCSSPrefix'] + 'box-inner')['getWidth']()
    },
    getNormalGridWidth: function() {
        return this['normalHeader']['getEl']()['down']('.' + Ext['baseCSSPrefix'] + 'box-inner')['getWidth']()
    },
    preparePageToCommit: function(_0xecbcx10) {
        var _0xecbcx5 = this['getCurrentPage'](),
            _0xecbcx9 = this['component'],
            _0xecbcxf = _0xecbcx9['lockedGrid'],
            _0xecbcxa = _0xecbcx9['normalGrid'],
            _0xecbcxc = _0xecbcx5['down']('.sch-secondary-canvas', true);
        _0xecbcx5['select']('.sch-remove')['remove']();
        var _0xecbcxe = function(_0xecbcx14) {
                return _0xecbcx5['down']('#' + _0xecbcx14, true)
            },
            _0xecbcx2 = function(_0xecbcx14) {
                if (_0xecbcx14) {
                    _0xecbcx14['style']['width'] = '100%'
                }
            },
            _0xecbcx8 = function(_0xecbcx14) {
                if (_0xecbcx14) {
                    _0xecbcx14['style']['height'] = '100%'
                }
            };
        var _0xecbcx17 = _0xecbcx5['down'](this['normalBodySelector'], true);
        _0xecbcx17['style']['top'] = '0px';
        var _0xecbcx6 = _0xecbcx5['down'](this['lockedBodySelector'], true);
        _0xecbcx6['style']['top'] = '0px';
        var _0xecbcx11;
        if (_0xecbcx11 = this['getLockedGridBody']()) {
            if (Ext['isIE9m']) {
                _0xecbcx11['style']['top'] = ''
            } else {
                _0xecbcx11['style']['transform'] = ''
            }
        };
        var _0xecbcx7;
        if (_0xecbcx7 = this['getNormalGridBody']()) {
            if (Ext['isIE9m']) {
                _0xecbcx7['style']['top'] = ''
            } else {
                _0xecbcx7['style']['transform'] = ''
            }
        };
        if (_0xecbcxc) {
            _0xecbcxc['style']['top'] = this['secondaryCanvasOffset'] + 'px';
            Ext['fly'](_0xecbcxc)['select']('.sch-column-line')['setHeight'](this['normalRowsHeight'])
        };
        var _0xecbcxb = [_0xecbcxe(_0xecbcx9['id'] + '-targetEl'), _0xecbcxe(_0xecbcx9['id'] + '-innerCt'), _0xecbcxe(_0xecbcxf['id']), _0xecbcxe(_0xecbcxf['body']['id']), _0xecbcxe(_0xecbcxf['view']['el']['id'])];
        if (Ext['getVersion']()['isGreaterThan']('6.2.0')) {
            var _0xecbcx4 = '.' + Ext['baseCSSPrefix'];
            var _0xecbcxd = _0xecbcx5['down'](_0xecbcx4 + 'grid-scroll-container', true);
            _0xecbcxd['style']['top'] = this['headerHeight'] + 1 + 'px';
            _0xecbcxd['style']['left'] = 0;
            _0xecbcx8(_0xecbcxd);
            _0xecbcx2(_0xecbcxd);
            var _0xecbcx15 = _0xecbcx5['down'](_0xecbcx4 + 'grid-scroll-body', true);
            _0xecbcx8(_0xecbcx15);
            _0xecbcx15['style']['overflow-y'] = 'hidden';
            Ext['Array']['each'](_0xecbcx5['query'](_0xecbcx4 + 'grid-view', true), function(_0xecbcx14) {
                _0xecbcx8(_0xecbcx14)
            });
            _0xecbcx6['style']['margin'] = _0xecbcx17['style']['margin'] = 0;
            Ext['Array']['each'](_0xecbcx5['query'](_0xecbcx4 + 'grid-scroll-container ' + _0xecbcx4 + 'scroller-spacer', true), function(_0xecbcx14) {
                _0xecbcx14['parentNode']['removeChild'](_0xecbcx14)
            });
            var _0xecbcx3 = _0xecbcx5['down']('.' + Ext['baseCSSPrefix'] + 'splitter', true);
            if (_0xecbcx3) {
                Ext['fly'](_0xecbcx3)['setZIndex'](2)
            }
        };
        Ext['Array']['each'](_0xecbcxb, _0xecbcx8);
        _0xecbcx2(_0xecbcxb[0]);
        _0xecbcx2(_0xecbcxb[1]);
        if (!Ext['isIE']) {
            _0xecbcx2(_0xecbcxe(_0xecbcxa['headerCt']['id']))
        } else {
            var _0xecbcx1 = _0xecbcxe(_0xecbcxa['headerCt']['id']);
            if (_0xecbcx1) {
                _0xecbcx1['style']['width'] = ''
            }
        };
        Ext['Array']['each']([_0xecbcxe(_0xecbcxa['id']), _0xecbcxe(_0xecbcxa['body']['id']), _0xecbcxe(_0xecbcxa['getView']()['id'])], function(_0xecbcx14) {
            if (_0xecbcx14) {
                _0xecbcx14['style']['height'] = _0xecbcx14['style']['width'] = '100%'
            }
        });
        _0xecbcx5['dom']['style']['height'] = '100%';
        _0xecbcx5['dom']['style']['width'] = '';
        _0xecbcx5['dom']['style']['top'] = '';
        return _0xecbcx5
    },
    startPage: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        var _0xecbcx5 = (_0xecbcx2 || _0xecbcx1['getComponent']()['body'])['dom']['cloneNode'](true);
        _0xecbcx5['id'] = '';
        _0xecbcx1['setCurrentPage'](Ext['get'](_0xecbcx5))
    },
    scrollTo: function(_0xecbcx1, _0xecbcx4, _0xecbcx5) {
        var _0xecbcx3 = this;
        if (_0xecbcx3['component']['ensureVisible']) {
            var _0xecbcx2 = _0xecbcx3['component']['store']['getAt'](_0xecbcx1);
            if (_0xecbcx2) {
                _0xecbcx3['component']['ensureVisible'](_0xecbcx2, {
                    callback: function() {
                        if (_0xecbcx4 && (this['isLocked'] === false || Ext['versions']['extjs']['isGreaterThanOrEqual']('6.5.0'))) {
                            _0xecbcx4['apply'](_0xecbcx5 || _0xecbcx3)
                        }
                    },
                    select: false,
                    focus: false,
                    animate: false
                })
            } else {
                _0xecbcx4['apply'](_0xecbcx5 || _0xecbcx3)
            }
        } else {
            _0xecbcx3['lockedView']['bufferedRenderer']['scrollTo'](_0xecbcx1, false, function() {
                _0xecbcx3['normalView']['bufferedRenderer']['scrollTo'](_0xecbcx1, false, _0xecbcx4, _0xecbcx5 || _0xecbcx3)
            })
        }
    },
    removeNode: function(_0xecbcx2) {
        if (_0xecbcx2 && _0xecbcx2['parentNode']) {
            _0xecbcx2['parentNode']['removeChild'](_0xecbcx2)
        } else {
            if (_0xecbcx2['elements']) {
                for (var _0xecbcx1 = 0; _0xecbcx1 < _0xecbcx2['elements']['length']; _0xecbcx1++) {
                    var _0xecbcx5 = _0xecbcx2['elements'][_0xecbcx1];
                    _0xecbcx5['parentNode']['removeChild'](_0xecbcx5)
                }
            }
        }
    },
    restoreInfiniteScroll: function(_0xecbcx2) {
        var _0xecbcx1 = _0xecbcx2['getSchedulingView']();
        if (_0xecbcx2['infiniteScroll'] && _0xecbcx1['rendered']) {
            _0xecbcx2['timeAxis']['setTimeSpan'](this._oldStart, this._oldEnd);
            _0xecbcx1['setScrollX'](this._oldScrollX);
            _0xecbcx1['bindInfiniteScrollListeners']()
        }
    },
    suspendInfiniteScroll: function(_0xecbcx2) {
        var _0xecbcx1 = _0xecbcx2['getSchedulingView']();
        if (_0xecbcx2['infiniteScroll'] && _0xecbcx1['rendered']) {
            _0xecbcx1['unbindInfiniteScrollListeners']();
            this['_oldStart'] = _0xecbcx2['timeAxis']['getStart']();
            this['_oldEnd'] = _0xecbcx2['timeAxis']['getEnd']();
            this['_oldScrollX'] = _0xecbcx1['getScrollX']();
            var _0xecbcx5 = _0xecbcx2['getEventStore']()['getTotalTimeSpan']();
            _0xecbcx2['setTimeSpan'](_0xecbcx5['start'], _0xecbcx5['end'])
        }
    },
    dependencyPainterMembers: {
        getItemBox: function(_0xecbcx3, _0xecbcx1) {
            var _0xecbcx5 = this,
                _0xecbcx2 = _0xecbcx5['exporter']['eventBoxes'][_0xecbcx1['internalId']];
            return _0xecbcx2 || this['callParent'](arguments)
        }
    },
    initDependencyPainter: function(_0xecbcx1) {
        var _0xecbcx5 = this,
            _0xecbcx2 = _0xecbcx1['getDependencyView']();
        if (_0xecbcx2) {
            _0xecbcx5['dependencyPainter'] = _0xecbcx2['clonePainter']();
            Ext['override'](_0xecbcx5['dependencyPainter'], Ext.apply({}, {
                exporter: _0xecbcx5
            }, _0xecbcx5['dependencyPainterMembers']))
        };
        _0xecbcx5['depView'] = _0xecbcx2;
        _0xecbcx5['eventBoxes'] = {}
    },
    fillRecordRelatedBoxes: function(_0xecbcx6) {
        var _0xecbcx9 = this,
            _0xecbcx7 = _0xecbcx9['normalView'],
            _0xecbcxd = _0xecbcx9['depView']['painter'],
            _0xecbcx1 = _0xecbcx9['depView']['getDependencyStore']();
        var _0xecbcx11 = _0xecbcx6['getEvents']();
        for (var _0xecbcx5 = 0; _0xecbcx5 < _0xecbcx11['length']; _0xecbcx5++) {
            var _0xecbcx2 = _0xecbcx11[_0xecbcx5];
            if (_0xecbcx7['timeAxis']['isRangeInAxis'](_0xecbcx2) && _0xecbcx1['getEventDependencies'](_0xecbcx2)['length']) {
                var _0xecbcx4 = _0xecbcxd['getItemBox'](_0xecbcx7, _0xecbcx2);
                for (var _0xecbcx3 = 0; _0xecbcx3 < _0xecbcx4['length']; _0xecbcx3++) {
                    if (_0xecbcx7['bufferedRenderer']) {
                        _0xecbcx4[_0xecbcx3]['top'] += _0xecbcx7['bufferedRenderer']['bodyTop'];
                        _0xecbcx4[_0xecbcx3]['bottom'] += _0xecbcx7['bufferedRenderer']['bodyTop']
                    };
                    _0xecbcx4[_0xecbcx3]['rendered'] = true
                };
                _0xecbcx9['eventBoxes'][_0xecbcx2['internalId']] = _0xecbcx4
            }
        }
    },
    renderDependencies: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['depView'];
        if (_0xecbcx1['getDrawDependencies']()) {
            _0xecbcx2['dependenciesHtml'] = _0xecbcx2['dependencyPainter']['generatePaintMarkup'](_0xecbcx1['getPrimaryView'](), _0xecbcx1['getDependencyStore']()['getRange']())
        } else {
            _0xecbcx2['dependenciesHtml'] = ''
        }
    }
});
Ext.define('Ext.ux.Scheduler.plugin.exporter.SinglePage', {
    extend: 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter',
    config: {
        exporterId: 'singlepage'
    },
    getExpectedNumberOfPages: function() {
        return 1
    },
    getPaperFormat: function() {
        var _0xecbcx4 = this,
            _0xecbcx5 = _0xecbcx4['getTotalSize'](),
            _0xecbcx2 = _0xecbcx4['exportConfig']['DPI'],
            _0xecbcx3 = Ext['Number']['toFixed'](_0xecbcx5['width'] / _0xecbcx2, 1),
            _0xecbcx1 = Ext['Number']['toFixed'](_0xecbcx5['height'] / _0xecbcx2, 1);
        return _0xecbcx3 + 'in*' + _0xecbcx1 + 'in'
    },
    onRowsCollected: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['startPage']();
        _0xecbcx1['fillGrids']();
        _0xecbcx1['commitPage']();
        _0xecbcx1['onPagesExtracted']()
    },
    getPageTplData: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getTotalSize']();
        return Ext.apply(_0xecbcx2['callParent'](arguments), {
            bodyHeight: _0xecbcx1['height'],
            totalWidth: _0xecbcx1['width']
        })
    },
    getHeaderTplData: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        return Ext.apply(_0xecbcx2['callParent'](arguments), {
            width: _0xecbcx2['getTotalWidth'](),
            height: _0xecbcx2['pageHeaderHeight']
        })
    },
    getFooterTplData: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        return Ext.apply(_0xecbcx2['callParent'](arguments), {
            width: _0xecbcx2['getTotalWidth'](),
            height: _0xecbcx2['pageHeaderHeight']
        })
    },
    fitComponentIntoPage: function(_0xecbcx1) {
        var _0xecbcx2 = this,
            _0xecbcx5 = _0xecbcx2['lockedGrid'];
        if (_0xecbcx1['columns'] && !_0xecbcx1['columns']['length']) {
            _0xecbcx5['setWidth'](0)
        } else {
            _0xecbcx5['setWidth'](Ext['fly'](_0xecbcx5['getView']()['getNodeContainer']())['getWidth']())
        }
    },
    preparePageToCommit: function() {
        var _0xecbcx8 = this,
            _0xecbcx11 = _0xecbcx8['callParent'](arguments),
            _0xecbcxa = _0xecbcx11['select']('.sch-secondary-canvas')['first'](),
            _0xecbcx3 = _0xecbcxa['select']('.sch-zone'),
            _0xecbcxe = _0xecbcxa['select']('.sch-column-line'),
            _0xecbcxd = _0xecbcx8['getTotalHeight']();
        _0xecbcxa['setTop'](-this['firstExportedRowOffset']);
        _0xecbcx3['setHeight'](_0xecbcxd);
        _0xecbcxe['setHeight'](_0xecbcxd);
        var _0xecbcx6 = _0xecbcx11['selectNode']('.sch-dependencyview-ct');
        if (_0xecbcx6) {
            _0xecbcx6['innerHTML'] = _0xecbcx8['dependenciesHtml'];
            _0xecbcx6['style']['top'] = -this['firstExportedRowOffset'] + 'px';
            _0xecbcx6['style']['left'] = '0px';
            _0xecbcx6['style']['visibility'] = 'visible'
        };
        var _0xecbcx4 = _0xecbcx8['normalView'],
            _0xecbcx9 = _0xecbcx4['getEl']()['down'](_0xecbcx8['tableSelector'])['getWidth'](),
            _0xecbcx2 = _0xecbcx4['id'],
            _0xecbcx5 = _0xecbcx11['select']('#' + _0xecbcx2)['first']()['dom'];
        _0xecbcx5['style']['width'] = _0xecbcx9 + 'px';
        var _0xecbcx7 = _0xecbcx11['selectNode']('#' + _0xecbcx8['normalView']['id']);
        _0xecbcx7['style']['overflow'] = 'hidden';
        var _0xecbcx1 = _0xecbcx11['selectNode']('.' + Ext['baseCSSPrefix'] + 'splitter');
        if (_0xecbcx1) {
            _0xecbcx1['style']['height'] = '100%'
        };
        return _0xecbcx11
    }
});
Ext.define('Ext.ux.Scheduler.plugin.exporter.MultiPage', {
    extend: 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter',
    config: {
        exporterId: 'multipage'
    },
    rowPageIndex: 0,
    columnPageIndex: 0,
    pagesPerColumn: 0,
    depsTopOffset: 0,
    onRowsCollected: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = this;
        _0xecbcx5['depsTopOffset'] = -_0xecbcx5['firstExportedRowOffset'];
        _0xecbcx5['rowPageIndex'] = 0;
        _0xecbcx5['columnPageIndex'] = 0;
        _0xecbcx5['pagesPerColumn'] = 0;
        _0xecbcx5['buildPageFrames'](function() {
            _0xecbcx5['buildPages'](_0xecbcx5['onPagesExtracted'], _0xecbcx5, _0xecbcx2, _0xecbcx1)
        })
    },
    buildPages: function(_0xecbcx6, _0xecbcx5, _0xecbcx2, _0xecbcx1) {
        var _0xecbcx3 = this,
            _0xecbcx4 = _0xecbcx3['pageFrames'][0];
        _0xecbcx3['startPage'](_0xecbcx4, true);
        this['iterateAsync'](_0xecbcx3['rowIteratorStep'], _0xecbcx3, {
            rowIndex: 0,
            pageFrame: _0xecbcx4,
            rowsHeight: 0,
            leftHeight: this['printHeight'],
            lockeds: [],
            normals: [],
            lockedRows: _0xecbcx2,
            normalRows: _0xecbcx1,
            callback: _0xecbcx6,
            scope: _0xecbcx5 || _0xecbcx3
        })
    },
    rowIteratorStep: function(_0xecbcx9, _0xecbcx1) {
        var _0xecbcx8 = this,
            _0xecbcxd = _0xecbcx1['rowIndex'],
            _0xecbcx2 = _0xecbcx1['lockedRows'],
            _0xecbcx7 = _0xecbcx1['normalRows'],
            _0xecbcxa = _0xecbcx1['leftHeight'],
            _0xecbcx3 = _0xecbcx1['lockeds'],
            _0xecbcx11 = _0xecbcx1['normals'],
            _0xecbcx5 = true;
        if (_0xecbcxd < _0xecbcx7['length']) {
            var _0xecbcx6 = _0xecbcx2[_0xecbcxd],
                _0xecbcx4 = _0xecbcx7[_0xecbcxd];
            if (_0xecbcx4['height'] <= _0xecbcxa) {
                _0xecbcx3['push'](_0xecbcx6);
                _0xecbcx11['push'](_0xecbcx4);
                _0xecbcx1['leftHeight'] -= _0xecbcx4['height'];
                _0xecbcx1['rowsHeight'] += _0xecbcx4['height'];
                _0xecbcx5 = false
            } else {
                _0xecbcx8['fillGrids'](_0xecbcx3, _0xecbcx11, _0xecbcx1['pageFrame']);
                _0xecbcx8['commitPage']({
                    rowsHeight: _0xecbcx1['rowsHeight']
                });
                _0xecbcx8['startPage'](_0xecbcx1['pageFrame']);
                _0xecbcx1['lockeds'] = [_0xecbcx6];
                _0xecbcx1['normals'] = [_0xecbcx4];
                _0xecbcx1['leftHeight'] = _0xecbcx8['printHeight'] - _0xecbcx4['height'];
                _0xecbcx1['rowsHeight'] = _0xecbcx4['height']
            };
            _0xecbcx1['rowIndex']++
        } else {
            if (_0xecbcx8['columnPageIndex'] < _0xecbcx8['pageFrames']['length']) {
                _0xecbcx8['fillGrids'](_0xecbcx3, _0xecbcx11, _0xecbcx1['pageFrame']);
                _0xecbcx8['commitPage']({
                    rowsHeight: _0xecbcx1['rowsHeight']
                });
                _0xecbcx1['pageFrame'] = _0xecbcx8['pageFrames'][_0xecbcx8['columnPageIndex']];
                _0xecbcx8['startPage'](_0xecbcx1['pageFrame'], true);
                _0xecbcx1['leftHeight'] = _0xecbcx8['printHeight'];
                _0xecbcx1['rowsHeight'] = 0;
                _0xecbcx1['lockeds'] = [];
                _0xecbcx1['normals'] = [];
                _0xecbcx1['rowIndex'] = 0
            } else {
                _0xecbcx8['fillGrids'](_0xecbcx3, _0xecbcx11, _0xecbcx1['pageFrame']);
                _0xecbcx8['commitPage']({
                    rowsHeight: _0xecbcx1['rowsHeight']
                });
                _0xecbcx1['callback']['call'](_0xecbcx1['scope']);
                return
            }
        };
        if (_0xecbcx5) {
            _0xecbcx9(_0xecbcx1)
        } else {
            _0xecbcx8['rowIteratorStep'](_0xecbcx9, _0xecbcx1)
        }
    },
    fillGrids: function(_0xecbcx4, _0xecbcx3, _0xecbcx6) {
        var _0xecbcx5 = this,
            _0xecbcx2 = _0xecbcx5['lockedColumnPages'][_0xecbcx5['columnPageIndex'] - 1],
            _0xecbcx1 = !_0xecbcx2 || (_0xecbcx2 && _0xecbcx2['leftWidth']);
        if (_0xecbcx2) {
            _0xecbcx5['fillLockedGrid'](_0xecbcx4, true);
            _0xecbcx5['removeHiddenLockedColumns'](_0xecbcx2)
        };
        if (_0xecbcx1) {
            _0xecbcx5['fillNormalGrid'](_0xecbcx3, true);
            _0xecbcx5['removeInvisibleEvents'](-_0xecbcx6['normalGridOffset'], -_0xecbcx6['normalGridOffset'] + _0xecbcx6['normalGridWidth'])
        }
    },
    buildPageFrame: function(_0xecbcxa, _0xecbcx2) {
        var _0xecbcx9 = this,
            _0xecbcxd = _0xecbcx9['lockedColumnPages'][_0xecbcxa];
        if (_0xecbcxd) {
            _0xecbcx9['lockedGrid']['setWidth'](_0xecbcx9['showLockedColumns'](_0xecbcxd['start'], _0xecbcxd['end']) + (_0xecbcxd['startOffset'] || 0));
            if (_0xecbcxd['leftWidth']) {
                _0xecbcx9['normalGrid']['show']()
            } else {
                var _0xecbcx5 = _0xecbcx9['lockedGrid']['headerCt']['getHeight']();
                _0xecbcx9['lockedGrid']['getVisibleColumns']()[0]['setHeight'](_0xecbcx5);
                _0xecbcx9['normalGrid']['hide']()
            }
        } else {
            _0xecbcx9['lockedGrid']['setWidth'](0);
            _0xecbcx9['lockedGrid']['hide']();
            _0xecbcx9['normalGrid']['show']()
        };
        var _0xecbcx1 = _0xecbcx9['getComponent']()['body']['dom']['cloneNode'](true);
        _0xecbcx1['id'] = '';
        _0xecbcx1 = Ext['get'](_0xecbcx1);
        _0xecbcx1['normalGridOffset'] = _0xecbcx2;
        _0xecbcx1['lockedGridOffset'] = _0xecbcxd && _0xecbcxd['startOffset'] || 0;
        _0xecbcx1['normalGridWidth'] = _0xecbcx9['normalGrid']['getWidth']();
        _0xecbcx1['lockedGridWidth'] = _0xecbcx9['lockedGrid']['getWidth']();
        _0xecbcx1['down'](_0xecbcx9['lockedBodySelector'], true)['style']['position'] = '';
        _0xecbcx1['down']('#' + _0xecbcx9['lockedView']['id'], true)['style']['overflow'] = 'visible';
        if (!_0xecbcx9['normalGrid']['hidden']) {
            var _0xecbcx8 = _0xecbcx1['select'](_0xecbcx9['normalBodySelector'])['first']();
            _0xecbcx8['dom']['style']['position'] = '';
            _0xecbcx8['dom']['style']['top'] = '0px';
            var _0xecbcx4 = _0xecbcx9['getNormalGridBody'](_0xecbcx1);
            var _0xecbcx3 = _0xecbcx1['down']('#' + _0xecbcx9['normalView']['headerCt']['id'], true);
            var _0xecbcx6 = _0xecbcx1['down']('.sch-secondary-canvas', true);
            var _0xecbcx7 = _0xecbcx1['down']('#' + _0xecbcx9['normalView']['id'], true);
            _0xecbcx4['style']['left'] = _0xecbcx2 + 'px';
            _0xecbcx3['style']['left'] = _0xecbcx2 + 'px';
            _0xecbcx3['style']['overflow'] = 'visible';
            _0xecbcx6['style']['left'] = _0xecbcx2 + 'px';
            _0xecbcx7['style']['overflow'] = 'visible'
        };
        return _0xecbcx1
    },
    buildPageFrames: function(_0xecbcx4, _0xecbcx5) {
        var _0xecbcx3 = this;
        _0xecbcx5 = _0xecbcx5 || _0xecbcx3;
        _0xecbcx3['lockedColumnPages'] = _0xecbcx3['calculateLockedColumnPages']();
        var _0xecbcx1 = Math['ceil'](_0xecbcx3['getTotalWidth']() / _0xecbcx3['paperWidth']),
            _0xecbcx2 = _0xecbcx3['pageFrames'] = [];
        _0xecbcx3['iterateAsync'](function(_0xecbcx7, _0xecbcx9, _0xecbcxa) {
            if (_0xecbcx9 >= _0xecbcx1) {
                _0xecbcx4['call'](_0xecbcx5, _0xecbcx2);
                return
            };
            _0xecbcx2['push'](_0xecbcx3['buildPageFrame'](_0xecbcx9, _0xecbcxa));
            var _0xecbcx6 = _0xecbcx3['lockedColumnPages'][_0xecbcx9];
            if (_0xecbcx6) {
                _0xecbcxa -= _0xecbcx6['leftWidth'] || 0
            } else {
                _0xecbcxa -= _0xecbcx3['paperWidth']
            };
            _0xecbcx7(_0xecbcx9 + 1, _0xecbcxa)
        }, _0xecbcx3, 0, 0)
    },
    startPage: function(_0xecbcx5, _0xecbcx1) {
        var _0xecbcx2 = this;
        if (_0xecbcx1) {
            _0xecbcx2['depsTopOffset'] = -_0xecbcx2['firstExportedRowOffset'];
            if (_0xecbcx2['columnPageIndex'] == 1) {
                _0xecbcx2['pagesPerColumn'] = _0xecbcx2['extractedPages']['length']
            };
            _0xecbcx2['rowPageIndex'] = 0;
            _0xecbcx2['columnPageIndex']++;
            _0xecbcx2['secondaryCanvasOffset'] = _0xecbcx2['firstExportedRowOffset']
        };
        _0xecbcx2['rowPageIndex']++;
        _0xecbcx2['callParent'](arguments);
        _0xecbcx2['emptyNormalGrid']();
        _0xecbcx2['emptyLockedGrid']()
    },
    commitPage: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['callParent']([Ext.apply({
            row: _0xecbcx2['rowPageIndex'],
            column: _0xecbcx2['columnPageIndex']
        }, _0xecbcx1)]);
        _0xecbcx2['secondaryCanvasOffset'] -= _0xecbcx1['rowsHeight'];
        _0xecbcx2['depsTopOffset'] -= _0xecbcx1['rowsHeight']
    },
    getExpectedPagesPerColumn: function() {
        return this['pagesPerColumn'] || Math['ceil']((this['normalRowsHeight'] || this['component']['store']['count']() * this['component']['getRowHeight']()) / this['printHeight'])
    },
    getExpectedColumnsNumber: function() {
        return this['pageFrames'] ? this['pageFrames']['length'] : Math['ceil']((this['lockedGrid']['getWidth']() + this['ticks']['length'] * this['view']['timeAxisViewModel']['getTickWidth']()) / this['paperWidth'])
    },
    getExpectedNumberOfPages: function() {
        return this['getExpectedColumnsNumber']() * this['getExpectedPagesPerColumn']()
    },
    calculateLockedColumnPages: function() {
        var _0xecbcx7 = this,
            _0xecbcx8 = [],
            _0xecbcx5 = _0xecbcx7['lockedColumns'],
            _0xecbcx4 = _0xecbcx7['paperWidth'],
            _0xecbcx9;
        for (var _0xecbcx6 = 0, _0xecbcx3 = _0xecbcx5['length']; _0xecbcx6 < _0xecbcx3; _0xecbcx6++) {
            var _0xecbcx2 = _0xecbcx5[_0xecbcx6],
                _0xecbcx1 = _0xecbcx2['width'];
            _0xecbcx9 = _0xecbcx9 || {
                start: _0xecbcx6,
                end: _0xecbcx6
            };
            _0xecbcx4 -= _0xecbcx1;
            if (_0xecbcx4 < 0) {
                _0xecbcx8['push'](_0xecbcx9);
                if (_0xecbcx4) {
                    _0xecbcx9 = {
                        start: _0xecbcx6,
                        end: _0xecbcx6
                    }
                };
                _0xecbcx4 = _0xecbcx7['paperWidth'] - _0xecbcx1 + _0xecbcx4
            } else {
                _0xecbcx9['end'] = _0xecbcx6
            }
        };
        if (_0xecbcx9) {
            _0xecbcx9['leftWidth'] = _0xecbcx4;
            _0xecbcx8['push'](_0xecbcx9)
        };
        return _0xecbcx8
    },
    getPageTplData: function(_0xecbcx1) {
        return Ext.apply(this['callParent'](arguments), {
            title: _0xecbcx1['number'] + ' of ' + this['numberOfPages'] + ' (column: ' + _0xecbcx1['column'] + ', row: ' + _0xecbcx1['row'] + ')'
        })
    },
    showLockedColumns: function(_0xecbcx4, _0xecbcx9) {
        var _0xecbcx6 = this,
            _0xecbcx2 = _0xecbcx6['lockedColumns'],
            _0xecbcx3 = 0;
        _0xecbcx4 = _0xecbcx4 || 0;
        _0xecbcx9 = _0xecbcx9 || _0xecbcx2['length'] - 1;
        for (var _0xecbcx1 = 0; _0xecbcx1 < _0xecbcx2['length']; _0xecbcx1++) {
            var _0xecbcx5 = _0xecbcx2[_0xecbcx1];
            if (_0xecbcx1 >= _0xecbcx4 && _0xecbcx1 <= _0xecbcx9) {
                _0xecbcx5['column']['show']();
                _0xecbcx3 += _0xecbcx5['width']
            } else {
                _0xecbcx5['column']['hide']()
            }
        };
        return _0xecbcx3
    },
    removeInvisibleEvents: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx4 = this,
            _0xecbcx5 = _0xecbcx4['getNormalGridBody'](),
            _0xecbcx3 = _0xecbcx4['normalView']['eventSelector'];
        Ext['Array']['each'](Ext['fly'](_0xecbcx5)['select'](_0xecbcx3)['elements'], function(_0xecbcx9) {
            var _0xecbcx7 = parseInt(_0xecbcx9['style']['left'], 10),
                _0xecbcx6 = _0xecbcx7 + parseInt(_0xecbcx9['style']['width'], 10);
            if (_0xecbcx6 < _0xecbcx1 || _0xecbcx7 > _0xecbcx2) {
                _0xecbcx4['removeNode'](_0xecbcx9)
            }
        })
    },
    removeHiddenLockedColumns: function(_0xecbcx2) {
        var _0xecbcx8 = this,
            _0xecbcx7 = _0xecbcx8['getCurrentPage'](),
            _0xecbcx1 = _0xecbcx8['getLockedGridBody']();
        for (var _0xecbcx6 = 0; _0xecbcx6 < _0xecbcx8['lockedColumns']['length']; _0xecbcx6++) {
            var _0xecbcx5 = _0xecbcx8['lockedColumns'][_0xecbcx6]['column'];
            if (_0xecbcx6 < _0xecbcx2['start'] || _0xecbcx6 > _0xecbcx2['end']) {
                var _0xecbcx3 = '#' + _0xecbcx5['getId']();
                var _0xecbcx9 = _0xecbcx7['select'](_0xecbcx3);
                _0xecbcx8['removeNode'](_0xecbcx9);
                var _0xecbcx4 = _0xecbcx5['getCellSelector']();
                var _0xecbcxd = Ext['fly'](_0xecbcx1)['select'](_0xecbcx4);
                _0xecbcx8['removeNode'](_0xecbcxd)
            }
        }
    },
    fitComponentIntoPage: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getComponent']();
        _0xecbcx1['setWidth'](_0xecbcx2['paperWidth'])
    },
    prepareComponent: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx3 = this,
            _0xecbcx5 = _0xecbcx3['lockedColumns'] = [];
        _0xecbcx3['callParent'](arguments);
        if (!(_0xecbcx1['columns'] && _0xecbcx1['columns']['length'] === 0)) {
            _0xecbcx3['lockedGrid']['headerCt']['items']['each'](function(_0xecbcx4) {
                if (!_0xecbcx4['hidden']) {
                    _0xecbcx5['push']({
                        column: _0xecbcx4,
                        width: _0xecbcx4['getWidth']()
                    })
                }
            })
        }
    },
    restoreComponentState: function() {
        this['callParent'](arguments);
        this['showLockedColumns']()
    },
    preparePageToCommit: function(_0xecbcx2) {
        var _0xecbcx6 = this,
            _0xecbcx7 = _0xecbcx6['callParent'](arguments),
            _0xecbcx1 = _0xecbcx7['down']('.' + Ext['baseCSSPrefix'] + 'splitter', true),
            _0xecbcx3 = _0xecbcx7['selectNode']('.sch-dependencyview-ct'),
            _0xecbcx9 = _0xecbcx6['pageFrames'][_0xecbcx6['columnPageIndex'] - 1];
        if (_0xecbcx1) {
            if (_0xecbcx9['lockedHidden']) {
                _0xecbcx1['style']['display'] = 'none';
                _0xecbcx7['down']('.' + Ext['baseCSSPrefix'] + 'grid-inner-normal', true)['style']['left'] = 0
            } else {
                Ext['fly'](_0xecbcx1)['setHeight']('100%')
            }
        };
        if (!_0xecbcx9['normalHidden']) {
            if (_0xecbcx3) {
                _0xecbcx3['innerHTML'] = _0xecbcx6['dependenciesHtml'];
                _0xecbcx3['style']['top'] = _0xecbcx6['depsTopOffset'] + 'px';
                _0xecbcx3['style']['visibility'] = 'visible'
            };
            var _0xecbcx5 = _0xecbcx7['selectNode']('#' + _0xecbcx6['normalView']['id']);
            if (_0xecbcx5) {
                var _0xecbcx4 = _0xecbcx6['normalView']['getEl']()['down'](_0xecbcx6['tableSelector'])['getWidth']();
                _0xecbcx5['style']['width'] = _0xecbcx4 + 'px';
                _0xecbcx5['style']['overflow'] = 'hidden'
            }
        };
        if (!_0xecbcx9['lockedHidden']) {
            var _0xecbcxa = _0xecbcx7['selectNode']('#' + _0xecbcx6['lockedView']['id']);
            if (_0xecbcxa) {
                _0xecbcxa['style']['overflow'] = 'hidden'
            }
        };
        return _0xecbcx7
    }
});
Ext.define('Ext.ux.Scheduler.plugin.exporter.MultiPageVertical', {
    extend: 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter',
    config: {
        exporterId: 'multipagevertical'
    },
    minRowHeight: 20,
    minAverageColumnWidth: 100,
    visibleColumns: null,
    visibleColumnsWidth: 0,
    depsTopOffset: 0,
    onRowsCollected: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = this;
        _0xecbcx5['depsTopOffset'] = -_0xecbcx5['firstExportedRowOffset'];
        _0xecbcx5['iterateAsync'](function(_0xecbcx7, _0xecbcxd) {
            if (_0xecbcxd === _0xecbcx1['length']) {
                _0xecbcx5['onPagesExtracted']();
                return
            };
            var _0xecbcxa = _0xecbcxd,
                _0xecbcx9 = _0xecbcx5['printHeight'],
                _0xecbcxe = 0,
                _0xecbcx4 = [],
                _0xecbcx11 = [],
                _0xecbcx3 = false,
                _0xecbcx8, _0xecbcx6;
            _0xecbcx5['startPage']();
            while (!_0xecbcx3 && _0xecbcxa < _0xecbcx1['length']) {
                _0xecbcx8 = _0xecbcx1[_0xecbcxa];
                _0xecbcx6 = _0xecbcx2[_0xecbcxa];
                _0xecbcx9 -= _0xecbcx8['height'];
                if (_0xecbcx9 > 0) {
                    _0xecbcxe += _0xecbcx8['height'];
                    _0xecbcx6 && _0xecbcx4['push'](_0xecbcx6);
                    _0xecbcx11['push'](_0xecbcx8);
                    _0xecbcxa++
                } else {
                    _0xecbcx3 = true
                }
            };
            _0xecbcx5['fillGrids'](_0xecbcx4, _0xecbcx11);
            _0xecbcx5['commitPage']({
                rowIndex: _0xecbcxa,
                rowsHeight: _0xecbcxe
            });
            _0xecbcx5['secondaryCanvasOffset'] -= _0xecbcxe;
            _0xecbcx7(_0xecbcxa)
        }, _0xecbcx5, 0)
    },
    startPage: function() {
        var _0xecbcx2 = this;
        _0xecbcx2['callParent'](arguments);
        var _0xecbcx1 = _0xecbcx2['getCurrentPage']()['select']('#' + _0xecbcx2['lockedView']['id'])['first']();
        _0xecbcx1['dom']['style']['overflow'] = 'visible'
    },
    commitPage: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['callParent'](arguments);
        if (_0xecbcx2['depView'] && _0xecbcx2['depView']['getDependencyStore']()) {
            _0xecbcx2['depsTopOffset'] -= _0xecbcx1['rowsHeight']
        }
    },
    getExpectedNumberOfPages: function() {
        return Math['ceil'](this['normalRowsHeight'] / this['printHeight'])
    },
    prepareColumns: function(_0xecbcx2) {
        this['callParent'](arguments);
        var _0xecbcx5 = this,
            _0xecbcx1 = _0xecbcx5['visibleColumns'] = [];
        _0xecbcx5['visibleColumnsWidth'] = 0;
        if (_0xecbcx2 && _0xecbcx2['length'] === 0) {
            return
        };
        _0xecbcx5['lockedGrid']['headerCt']['items']['each'](function(_0xecbcx3) {
            if (!_0xecbcx3['hidden']) {
                _0xecbcx1['push']({
                    column: _0xecbcx3,
                    width: _0xecbcx3['getWidth']()
                });
                _0xecbcx5['visibleColumnsWidth'] += _0xecbcx3['getWidth']()
            }
        })
    },
    fitComponentIntoPage: function() {
        var _0xecbcx8 = this,
            _0xecbcxd = _0xecbcx8['getComponent'](),
            _0xecbcx11 = _0xecbcxd['getSchedulingView'](),
            _0xecbcxa = _0xecbcxd['normalGrid'],
            _0xecbcx3 = _0xecbcxd['lockedGrid'],
            _0xecbcx9 = _0xecbcx8['getTotalWidth'](),
            _0xecbcxe = _0xecbcx8['ticks'],
            _0xecbcx6 = _0xecbcx8['timeColumnWidth'] || _0xecbcx11['timeAxisViewModel']['getTickWidth']();
        var _0xecbcx4 = Math['floor']((_0xecbcx8['visibleColumnsWidth'] / _0xecbcx9) * _0xecbcx8['paperWidth']);
        var _0xecbcx5 = _0xecbcx8['visibleColumns']['length'],
            _0xecbcx2 = _0xecbcx5 * _0xecbcx8['minAverageColumnWidth'];
        _0xecbcx2 = _0xecbcx2 > _0xecbcx8['paperWidth'] / 2 ? Math['floor'](_0xecbcx8['paperWidth'] / 2) : _0xecbcx2;
        _0xecbcx4 = _0xecbcx2 > _0xecbcx4 ? _0xecbcx2 : _0xecbcx4;
        var _0xecbcx1 = _0xecbcx8['paperWidth'] - _0xecbcx4;
        var _0xecbcx7 = _0xecbcx1 / _0xecbcxe['length'];
        _0xecbcx8['setRowHeight']((_0xecbcx7 / _0xecbcx6) * _0xecbcx8['getRowHeight']());
        _0xecbcxd['setWidth'](_0xecbcx8['paperWidth']);
        _0xecbcxa['setWidth'](_0xecbcx1);
        _0xecbcx3['setWidth'](_0xecbcx4);
        _0xecbcx8['fitLockedColumnWidth'](_0xecbcx4);
        _0xecbcxd['setTimeColumnWidth'](_0xecbcx7)
    },
    setRowHeight: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        _0xecbcx1['component']['setRowHeight'](_0xecbcx2 < _0xecbcx1['minRowHeight'] ? _0xecbcx1['minRowHeight'] : _0xecbcx2)
    },
    fitLockedColumnWidth: function(_0xecbcx1) {
        var _0xecbcx7 = this,
            _0xecbcx5 = this['visibleColumns'];
        var _0xecbcx9 = _0xecbcx1 / _0xecbcx7['visibleColumnsWidth'];
        if (_0xecbcx5['length']) {
            for (var _0xecbcx3 = 0; _0xecbcx3 < _0xecbcx5['length']; _0xecbcx3++) {
                var _0xecbcx6 = _0xecbcx5[_0xecbcx3],
                    _0xecbcx2 = _0xecbcx6['width'],
                    _0xecbcx4 = Math['floor'](_0xecbcx2 * _0xecbcx9);
                _0xecbcx6['column']['setWidth'](_0xecbcx4)
            };
            this['_restoreColumnWidth'] = true
        }
    },
    restoreComponentState: function(_0xecbcx5) {
        var _0xecbcx4 = this;
        _0xecbcx5 = _0xecbcx5 || _0xecbcx4['getComponent']();
        if (this['_restoreColumnWidth']) {
            var _0xecbcx2 = this['visibleColumns'];
            for (var _0xecbcx3 = 0; _0xecbcx3 < _0xecbcx2['length']; _0xecbcx3++) {
                var _0xecbcx1 = _0xecbcx2[_0xecbcx3];
                _0xecbcx1['column']['setWidth'](_0xecbcx1['width'])
            }
        };
        this['callParent'](arguments)
    },
    preparePageToCommit: function() {
        var _0xecbcx4 = this,
            _0xecbcx9 = _0xecbcx4['callParent'](arguments),
            _0xecbcx2 = _0xecbcx9['selectNode']('.sch-dependencyview-ct');
        if (_0xecbcx2) {
            _0xecbcx2['innerHTML'] = _0xecbcx4['dependenciesHtml'];
            _0xecbcx2['style']['top'] = _0xecbcx4['depsTopOffset'] + 'px';
            _0xecbcx2['style']['left'] = '0px';
            _0xecbcx2['style']['visibility'] = 'visible'
        };
        var _0xecbcx1 = _0xecbcx4['normalView']['getEl']()['down'](_0xecbcx4['tableSelector'])['getWidth']();
        var _0xecbcx5 = _0xecbcx9['selectNode']('#' + _0xecbcx4['normalView']['id']);
        _0xecbcx5['style']['width'] = _0xecbcx1 + 'px';
        _0xecbcx5['style']['overflow'] = 'hidden';
        var _0xecbcx3 = _0xecbcx9['selectNode']('#' + _0xecbcx4['lockedView']['id']);
        _0xecbcx3['style']['overflow'] = 'hidden';
        var _0xecbcx6 = _0xecbcx9['selectNode']('.' + Ext['baseCSSPrefix'] + 'splitter');
        if (_0xecbcx6) {
            _0xecbcx6['style']['height'] = '100%'
        };
        return _0xecbcx9
    }
});
Ext.define('Ext.ux.Scheduler.widget.ResizePicker', {
    extend: 'Ext.Panel',
    alias: 'widget.dualrangepicker',
    width: 200,
    height: 200,
    border: true,
    collapsible: false,
    bodyStyle: 'position:absolute; margin:5px',
    verticalCfg: {
        height: 120,
        value: 24,
        increment: 2,
        minValue: 20,
        maxValue: 80,
        reverse: true,
        disabled: true
    },
    horizontalCfg: {
        width: 120,
        value: 100,
        minValue: 25,
        increment: 5,
        maxValue: 200,
        disable: true
    },
    initComponent: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['horizontalCfg']['value'] = _0xecbcx1['dialogConfig']['columnWidth'];
        _0xecbcx1['verticalCfg']['value'] = _0xecbcx1['dialogConfig']['rowHeight'];
        _0xecbcx1['verticalCfg']['disabled'] = _0xecbcx1['dialogConfig']['scrollerDisabled'] || false;
        _0xecbcx1['dockedItems'] = [_0xecbcx1['vertical'] = new Ext['slider'].Single(Ext.apply({
            dock: 'left',
            style: 'margin-top:10px',
            vertical: true,
            stateful: _0xecbcx1['dialogConfig']['stateful'],
            stateId: 'exporter_resize_vertical',
            stateEvents: ['change'],
            listeners: {
                change: _0xecbcx1['onSliderChange'],
                changecomplete: _0xecbcx1['onSliderChangeComplete'],
                scope: _0xecbcx1
            }
        }, _0xecbcx1['verticalCfg'])), _0xecbcx1['horizontal'] = new Ext['slider'].Single(Ext.apply({
            dock: 'top',
            style: 'margin-left:28px',
            stateful: _0xecbcx1['dialogConfig']['stateful'],
            stateId: 'exporter_resize_horizontal',
            stateEvents: ['change'],
            listeners: {
                change: _0xecbcx1['onSliderChange'],
                changecomplete: _0xecbcx1['onSliderChangeComplete'],
                scope: _0xecbcx1
            }
        }, _0xecbcx1['horizontalCfg']))];
        _0xecbcx1['callParent'](arguments)
    },
    afterRender: function() {
        var _0xecbcx2 = this;
        _0xecbcx2['addCls']('sch-ux-range-picker');
        _0xecbcx2['valueHandle'] = _0xecbcx2['body']['createChild']({
            cls: 'sch-ux-range-value',
            cn: {
                tag: 'span'
            }
        });
        _0xecbcx2['valueSpan'] = _0xecbcx2['valueHandle']['down']('span');
        var _0xecbcx1 = new Ext['dd'].DD(_0xecbcx2['valueHandle']);
        Ext.apply(_0xecbcx1, {
            startDrag: function() {
                _0xecbcx2['dragging'] = true;
                this['constrainTo'](_0xecbcx2['body'])
            },
            onDrag: function() {
                _0xecbcx2['updateValuesFromHandles']()
            },
            endDrag: function() {
                _0xecbcx2['updateValuesFromHandles']();
                _0xecbcx2['dragging'] = false
            }
        });
        _0xecbcx2['setValues'](_0xecbcx2['getValues']());
        _0xecbcx2['callParent'](arguments);
        _0xecbcx2['body']['on']('click', _0xecbcx2['onBodyClick'], _0xecbcx2)
    },
    onBodyClick: function(_0xecbcx5, _0xecbcx1) {
        var _0xecbcx2 = [_0xecbcx5['getXY']()[0] - 8 - this['body']['getX'](), _0xecbcx5['getXY']()[1] - 8 - this['body']['getY']()];
        this['valueHandle']['setLeft'](Ext['Number']['constrain'](_0xecbcx2[0], 0, this['getAvailableWidth']()));
        this['valueHandle']['setTop'](Ext['Number']['constrain'](_0xecbcx2[1], 0, this['getAvailableHeight']()));
        this['updateValuesFromHandles']();
        this['onSliderChangeComplete']()
    },
    updateValuesFromHandles: function() {
        this['setValues'](this['getValuesFromXY']())
    },
    getAvailableWidth: function() {
        return this['body']['getWidth']() - 18
    },
    getAvailableHeight: function() {
        return this['body']['getHeight']() - 18
    },
    getValuesFromXY: function(_0xecbcx3) {
        _0xecbcx3 = _0xecbcx3 || [this['valueHandle']['getLeft'](true), this['valueHandle']['getTop'](true)];
        var _0xecbcx5 = _0xecbcx3[0] / this['getAvailableWidth']();
        var _0xecbcx1 = _0xecbcx3[1] / this['getAvailableHeight']();
        var _0xecbcx4 = Math['round']((this['horizontalCfg']['maxValue'] - this['horizontalCfg']['minValue']) * _0xecbcx5);
        var _0xecbcx2 = Math['round']((this['verticalCfg']['maxValue'] - this['verticalCfg']['minValue']) * _0xecbcx1) + this['verticalCfg']['minValue'];
        return [_0xecbcx4 + this['horizontalCfg']['minValue'], _0xecbcx2]
    },
    getXYFromValues: function(_0xecbcx3) {
        var _0xecbcx2 = this['horizontalCfg']['maxValue'] - this['horizontalCfg']['minValue'];
        var _0xecbcx6 = this['verticalCfg']['maxValue'] - this['verticalCfg']['minValue'];
        var _0xecbcx1 = Math['round']((_0xecbcx3[0] - this['horizontalCfg']['minValue']) * this['getAvailableWidth']() / _0xecbcx2);
        var _0xecbcx5 = _0xecbcx3[1] - this['verticalCfg']['minValue'];
        var _0xecbcx4 = Math['round'](_0xecbcx5 * this['getAvailableHeight']() / _0xecbcx6);
        return [_0xecbcx1, _0xecbcx4]
    },
    updatePosition: function() {
        var _0xecbcx1 = this['getValues']();
        var _0xecbcx2 = this['getXYFromValues'](_0xecbcx1);
        this['valueHandle']['setLeft'](Ext['Number']['constrain'](_0xecbcx2[0], 0, this['getAvailableWidth']()));
        if (this['verticalCfg']['disabled']) {
            this['valueHandle']['setTop'](this['dialogConfig']['rowHeight'])
        } else {
            this['valueHandle']['setTop'](Ext['Number']['constrain'](_0xecbcx2[1], 0, this['getAvailableHeight']()))
        };
        this['positionValueText']();
        this['setValueText'](_0xecbcx1)
    },
    positionValueText: function() {
        var _0xecbcx1 = this['valueHandle']['getTop'](true);
        var _0xecbcx2 = this['valueHandle']['getLeft'](true);
        this['valueSpan']['setLeft'](_0xecbcx2 > 30 ? -30 : 10);
        this['valueSpan']['setTop'](_0xecbcx1 > 10 ? -20 : 20)
    },
    setValueText: function(_0xecbcx1) {
        if (this['verticalCfg']['disabled']) {
            _0xecbcx1[1] = this['dialogConfig']['rowHeight']
        };
        this['valueSpan']['update']('[' + _0xecbcx1.toString() + ']')
    },
    setValues: function(_0xecbcx1) {
        this['horizontal']['setValue'](_0xecbcx1[0]);
        if (this['verticalCfg']['reverse']) {
            if (!this['verticalCfg']['disabled']) {
                this['vertical']['setValue'](this['verticalCfg']['maxValue'] + this['verticalCfg']['minValue'] - _0xecbcx1[1])
            }
        } else {
            if (!this['verticalCfg']['disabled']) {
                this['vertical']['setValue'](_0xecbcx1[1])
            }
        };
        if (!this['dragging']) {
            this['updatePosition']()
        };
        this['positionValueText']();
        this['setValueText'](_0xecbcx1)
    },
    getValues: function() {
        if (!this['verticalCfg']['disabled']) {
            var _0xecbcx1 = this['vertical']['getValue']();
            if (this['verticalCfg']['reverse']) {
                _0xecbcx1 = this['verticalCfg']['maxValue'] - _0xecbcx1 + this['verticalCfg']['minValue']
            };
            return [this['horizontal']['getValue'](), _0xecbcx1]
        };
        return [this['horizontal']['getValue']()]
    },
    onSliderChange: function() {
        if (!this['rendered']) {
            return
        };
        this['fireEvent']('change', this, this['getValues']());
        if (!this['dragging']) {
            this['updatePosition']()
        }
    },
    onSliderChangeComplete: function() {
        this['fireEvent']('changecomplete', this, this['getValues']())
    },
    afterLayout: function() {
        this['callParent'](arguments);
        this['updatePosition']()
    }
});
Ext.define('Ext.ux.Scheduler.widget.ColumnPicker', {
    extend: 'Ext.form.field.ComboBox',
    requires: ['Ext.data.Store'],
    multiSelect: true,
    valueField: 'id',
    displayField: 'name',
    forceSelection: true,
    editable: false,
    listConfig: {
        cls: 'sch-columnpicker-list',
        selectedItemCls: Ext['baseCSSPrefix'] + 'fa fa-check'
    },
    columns: null,
    columnEmptyText: null,
    columnEmptyRegExp: /^(\s*|&(nbsp|#160);)$/,
    initComponent: function() {
        this['store'] = new Ext['data'].Store({
            proxy: 'memory',
            fields: ['id', 'name', 'column'],
            data: this['processColumns'](this['columns'])
        });
        this['callParent'](arguments)
    },
    processColumns: function(_0xecbcx1) {
        var _0xecbcx2 = this,
            _0xecbcx3 = [],
            _0xecbcx5 = Ext['Array']['map'](_0xecbcx1 || [], function(_0xecbcx4) {
                if (!_0xecbcx4['isHidden']()) {
                    _0xecbcx3['push'](_0xecbcx4['id'])
                };
                return {
                    id: _0xecbcx4['id'],
                    name: _0xecbcx2['getColumnTitle'](_0xecbcx4),
                    column: _0xecbcx4
                }
            });
        this['value'] = this['value'] || _0xecbcx3;
        return _0xecbcx5
    },
    getColumnTitle: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        return (!Ext['String']['trim'](_0xecbcx1['text']) || _0xecbcx1['text']['match'](_0xecbcx2['columnEmptyRegExp'])) ? _0xecbcx2['columnEmptyText'] : _0xecbcx1['text']
    },
    getPicker: function() {
        var _0xecbcx1 = this['callParent'](arguments);
        _0xecbcx1['selectedItemCls'] += ' ' + Ext['baseCSSPrefix'] + 'fa fa-check';
        return _0xecbcx1
    },
    getSelectedColumns: function() {
        var _0xecbcx1 = this,
            _0xecbcx2 = _0xecbcx1['getValue']();
        if (!Ext['isArray'](_0xecbcx2)) {
            _0xecbcx2 = [_0xecbcx2]
        };
        return Ext['Array']['map'](_0xecbcx2, function(_0xecbcx5) {
            return _0xecbcx1['store']['getById'](_0xecbcx5)['get']('column')
        })
    }
});
Ext.define('Ext.ux.Scheduler.widget.ExportDialogForm', {
    extend: 'Ext.form.Panel',
    requires: ['Ext.data.Store', 'Ext.XTemplate', 'Ext.form.field.Number', 'Ext.form.field.ComboBox', 'Ext.form.field.Date', 'Ext.form.FieldContainer', 'Ext.form.field.Checkbox', 'Ext.ux.Scheduler.widget.ResizePicker', 'Ext.ux.Scheduler.widget.ColumnPicker'],
    mixins: ['Ext.ux.Scheduler.mixin.Localizable'],
    alias: 'widget.export_dialog_form',
    border: false,
    bodyPadding: '10 10 0 10',
    autoHeight: true,
    stateful: true,
    rangeField: null,
    resizerHolder: null,
    resizePicker: null,
    dateFromField: null,
    dateToField: null,
    datesHolder: null,
    columnPicker: null,
    rowsRangeField: null,
    exportersField: null,
    formatField: null,
    orientationField: null,
    dpiField: null,
    showHeaderField: null,
    showFooterField: null,
    dateRangeFormat: '',
    columnPickerConfig: null,
    dpiFieldConfig: null,
    dateRangeRestriction: true,
    rangeFieldConfig: null,
    rowsRangeFieldConfig: null,
    formatFieldConfig: null,
    orientationFieldConfig: null,
    exportersFieldConfig: null,
    showHeaderFieldConfig: null,
    showFooterFieldConfig: null,
    dateFromFieldConfig: null,
    dateToFieldConfig: null,
    showResizePicker: false,
    showColumnPicker: true,
    showDPIField: true,
    showShowHeaderField: true,
    showShowFooterField: false,
    showRowsRangeField: true,
    initComponent: function() {
        var _0xecbcx1 = this;
        _0xecbcx1['fieldDefaults'] = Ext.apply({
            labelAlign: 'left',
            labelWidth: 120,
            anchor: '99%'
        }, _0xecbcx1['fieldDefaults']);
        _0xecbcx1['items'] = _0xecbcx1['createFields']();
        _0xecbcx1['callParent'](arguments);
        _0xecbcx1['onRangeChange'](_0xecbcx1['rangeField'], _0xecbcx1['rangeField']['getValue']());
        _0xecbcx1['onExporterChange'](_0xecbcx1['exportersField'], _0xecbcx1['exportersField']['getValue']())
    },
    isValid: function() {
        var _0xecbcx1 = this;
        if (_0xecbcx1['rangeField']['getValue']() == 'date') {
            return _0xecbcx1['dateFromField']['isValid']() && _0xecbcx1['dateToField']['isValid']()
        };
        return true
    },
    getValues: function(_0xecbcx4, _0xecbcx5, _0xecbcx3, _0xecbcx2) {
        var _0xecbcx1 = this['callParent'](arguments);
        _0xecbcx1['showHeader'] = !!_0xecbcx1['showHeader'];
        _0xecbcx1['showFooter'] = !!_0xecbcx1['showFooter'];
        _0xecbcx1['onlyVisibleRows'] = !!_0xecbcx1['onlyVisibleRows'];
        if (this['resizePicker'] && this['rangeField']['getValue']() == 'current') {
            var _0xecbcx6 = this['resizePicker']['getValues']();
            if (_0xecbcx4) {
                _0xecbcx1 += '&cellSize[0]=' + _0xecbcx6[0] + '&cellSize[1]=' + _0xecbcx6[1]
            } else {
                _0xecbcx1['cellSize'] = _0xecbcx6
            }
        };
        if (this['columnPicker']) {
            _0xecbcx1['columns'] = this['columnPicker']['getSelectedColumns']()
        };
        return _0xecbcx1
    },
    createFields: function() {
        var _0xecbcx2 = this,
            _0xecbcx3 = '<table class="sch-fieldcontainer-label-wrap"><td width="1" class="sch-fieldcontainer-label">',
            _0xecbcx5 = '<td><div class="sch-fieldcontainer-separator"></div></table>';
        if (_0xecbcx2['showResizePicker']) {
            _0xecbcx2['resizePicker'] = new Ext.ux.Scheduler['widget'].ResizePicker({
                dialogConfig: _0xecbcx2,
                margin: '10 20'
            });
            _0xecbcx2['resizerHolder'] = new Ext['form'].FieldContainer({
                fieldLabel: _0xecbcx2['scrollerDisabled'] ? _0xecbcx2.L('adjustCols') : _0xecbcx2.L('adjustColsAndRows'),
                labelAlign: 'top',
                hidden: true,
                labelSeparator: '',
                beforeLabelTextTpl: _0xecbcx3,
                afterLabelTextTpl: _0xecbcx5,
                layout: 'vbox',
                defaults: {
                    flex: 1,
                    allowBlank: false
                },
                items: [_0xecbcx2['resizePicker']]
            })
        };
        _0xecbcx2['dateFromField'] = Ext['ComponentManager']['create'](Ext.apply(_0xecbcx2['applyStateful']({
            xtype: 'datefield',
            fieldLabel: _0xecbcx2.L('dateRangeFromText'),
            baseBodyCls: 'sch-exportdialogform-date',
            name: 'dateFrom',
            format: _0xecbcx2['dateRangeFormat'] || Ext['Date']['defaultFormat'],
            allowBlank: false,
            maxValue: _0xecbcx2['dateRangeRestriction'] && _0xecbcx2['endDate'] || null,
            minValue: _0xecbcx2['dateRangeRestriction'] && _0xecbcx2['startDate'] || null,
            value: _0xecbcx2['startDate']
        }), _0xecbcx2['dateFromFieldConfig']));
        _0xecbcx2['dateToField'] = Ext['ComponentManager']['create'](Ext.apply(_0xecbcx2['applyStateful']({
            xtype: 'datefield',
            fieldLabel: _0xecbcx2.L('dateRangeToText'),
            name: 'dateTo',
            format: _0xecbcx2['dateRangeFormat'] || Ext['Date']['defaultFormat'],
            baseBodyCls: 'sch-exportdialogform-date',
            allowBlank: false,
            maxValue: _0xecbcx2['dateRangeRestriction'] && _0xecbcx2['endDate'] || null,
            minValue: _0xecbcx2['dateRangeRestriction'] && _0xecbcx2['startDate'] || null,
            value: _0xecbcx2['endDate']
        }), _0xecbcx2['dateToFieldConfig']));
        _0xecbcx2['datesHolder'] = new Ext['form'].FieldContainer({
            fieldLabel: _0xecbcx2.L('specifyDateRange'),
            labelAlign: 'top',
            hidden: true,
            labelSeparator: '',
            beforeLabelTextTpl: _0xecbcx3,
            afterLabelTextTpl: _0xecbcx5,
            layout: 'vbox',
            defaults: {
                flex: 1,
                allowBlank: false
            },
            items: [_0xecbcx2['dateFromField'], _0xecbcx2['dateToField']]
        });
        if (_0xecbcx2['showColumnPicker']) {
            _0xecbcx2['columnPicker'] = new Ext.ux.Scheduler['widget'].ColumnPicker(_0xecbcx2['applyStateful'](Ext.apply({
                fieldLabel: _0xecbcx2.L('columnPickerLabel'),
                columnEmptyText: _0xecbcx2.L('columnEmptyText'),
                cls: 'sch-export-dialog-columns'
            }, _0xecbcx2['columnPickerConfig'])))
        };
        if (_0xecbcx2['showDPIField']) {
            _0xecbcx2['dpiField'] = Ext['ComponentManager']['create'](Ext.apply(_0xecbcx2['applyStateful']({
                xtype: 'numberfield',
                fieldLabel: _0xecbcx2.L('dpiFieldLabel'),
                cls: 'sch-export-dialog-dpi',
                minValue: 65,
                name: 'DPI',
                value: _0xecbcx2['exportConfig']['DPI'],
                maxValue: 200
            }), _0xecbcx2['dpiFieldConfig']))
        };
        if (_0xecbcx2['showShowHeaderField']) {
            _0xecbcx2['showHeaderField'] = Ext['ComponentManager']['create'](Ext.apply(_0xecbcx2['applyStatefulFull']({
                xtype: 'checkbox',
                fieldLabel: _0xecbcx2.L('showHeaderLabel'),
                cls: 'sch-export-dialog-header',
                name: 'showHeader',
                checked: !!_0xecbcx2['exportConfig']['showHeader'],
                checkedValue: true,
                uncheckedValue: false
            }), _0xecbcx2['showHeaderFieldConfig']))
        };
        if (_0xecbcx2['showShowFooterField']) {
            _0xecbcx2['showFooterField'] = Ext['ComponentManager']['create'](Ext.apply(_0xecbcx2['applyStatefulFull']({
                xtype: 'checkbox',
                fieldLabel: _0xecbcx2.L('showFooterLabel'),
                cls: 'sch-export-dialog-footer',
                name: 'showFooter',
                checked: !!_0xecbcx2['exportConfig']['showFooter'],
                checkedValue: true,
                uncheckedValue: false
            }), _0xecbcx2['showFooterFieldConfig']))
        };
        _0xecbcx2['formatField'] = Ext['ComponentManager']['create'](Ext.apply(_0xecbcx2['applyStateful']({
            xtype: 'combobox',
            fieldLabel: _0xecbcx2.L('formatFieldLabel'),
            value: _0xecbcx2['exportConfig']['format'],
            triggerAction: 'all',
            forceSelection: true,
            editable: false,
            name: 'format',
            queryMode: 'local',
            store: _0xecbcx2['pageFormats'] || ['A5', 'A4', 'A3', 'Letter', 'Legal']
        }), _0xecbcx2['formatFieldConfig']));
        _0xecbcx2['orientationField'] = Ext['ComponentManager']['create'](Ext.apply(_0xecbcx2['applyStateful']({
            xtype: 'combobox',
            fieldLabel: _0xecbcx2.L('orientationFieldLabel'),
            value: _0xecbcx2['exportConfig']['orientation'],
            triggerAction: 'all',
            forceSelection: true,
            editable: false,
            name: 'orientation',
            displayField: 'name',
            valueField: 'value',
            queryMode: 'local',
            store: {
                fields: ['name', 'value'],
                data: [{
                    name: _0xecbcx2.L('orientationPortraitText'),
                    value: 'portrait'
                }, {
                    name: _0xecbcx2.L('orientationLandscapeText'),
                    value: 'landscape'
                }]
            }
        }), _0xecbcx2['orientationFieldConfig']));
        _0xecbcx2['rangeField'] = Ext['ComponentManager']['create'](Ext.apply(_0xecbcx2['applyStateful']({
            xtype: 'combobox',
            fieldLabel: _0xecbcx2.L('rangeFieldLabel'),
            value: _0xecbcx2['exportConfig']['range'],
            triggerAction: 'all',
            cls: 'sch-export-dialog-range',
            forceSelection: true,
            editable: false,
            name: 'range',
            queryMode: 'local',
            displayField: 'name',
            valueField: 'value',
            store: {
                fields: ['name', 'value'],
                data: [{
                    name: _0xecbcx2.L('completeViewText'),
                    value: 'complete'
                }, {
                    name: _0xecbcx2.L('completeDataText'),
                    value: 'completedata'
                }, {
                    name: _0xecbcx2.L('dateRangeText'),
                    value: 'date'
                }, {
                    name: _0xecbcx2.L('currentViewText'),
                    value: 'current'
                }]
            }
        }), _0xecbcx2['rangeFieldConfig']));
        _0xecbcx2['mon'](_0xecbcx2['rangeField'], 'change', _0xecbcx2['onRangeChange'], _0xecbcx2);
        _0xecbcx2['exportersField'] = Ext['ComponentManager']['create'](Ext.apply(_0xecbcx2['applyStateful']({
            xtype: 'combobox',
            fieldLabel: _0xecbcx2.L('exportersFieldLabel'),
            value: _0xecbcx2['defaultExporter'],
            triggerAction: 'all',
            cls: 'sch-export-dialog-exporter',
            forceSelection: true,
            editable: false,
            name: 'exporterId',
            queryMode: 'local',
            displayField: 'name',
            valueField: 'value',
            store: {
                fields: ['name', 'value'],
                data: Ext['Array']['map'](_0xecbcx2['exporters'], function(_0xecbcx4) {
                    return {
                        name: _0xecbcx4['getName'](),
                        value: _0xecbcx4['getExporterId']()
                    }
                })
            }
        }), _0xecbcx2['exportersFieldConfig']));
        _0xecbcx2['mon'](_0xecbcx2['exportersField'], 'change', _0xecbcx2['onExporterChange'], _0xecbcx2);
        if (_0xecbcx2['showRowsRangeField']) {
            _0xecbcx2['rowsRangeField'] = Ext['ComponentManager']['create'](Ext.apply(_0xecbcx2['applyStateful']({
                xtype: 'combobox',
                fieldLabel: _0xecbcx2.L('rowsRangeLabel'),
                value: _0xecbcx2['exportConfig']['rowsRange'],
                triggerAction: 'all',
                cls: 'sch-export-dialog-rowsrange',
                forceSelection: true,
                editable: false,
                name: 'rowsRange',
                queryMode: 'local',
                displayField: 'name',
                valueField: 'value',
                store: {
                    fields: ['name', 'value'],
                    data: [{
                        name: _0xecbcx2.L('allRowsLabel'),
                        value: 'all'
                    }, {
                        name: _0xecbcx2.L('visibleRowsLabel'),
                        value: 'visible'
                    }]
                }
            }), _0xecbcx2['rowsRangeFieldConfig']))
        };
        var _0xecbcx1 = [];
        _0xecbcx1['push'](_0xecbcx2['rangeField']);
        if (_0xecbcx2['resizerHolder']) {
            _0xecbcx1['push'](_0xecbcx2['resizerHolder'])
        };
        _0xecbcx1['push'](_0xecbcx2['datesHolder']);
        if (_0xecbcx2['columnPicker']) {
            _0xecbcx1['push'](_0xecbcx2['columnPicker'])
        };
        if (_0xecbcx2['rowsRangeField']) {
            _0xecbcx1['push'](_0xecbcx2['rowsRangeField'])
        };
        _0xecbcx1['push'](_0xecbcx2['exportersField'], _0xecbcx2['formatField'], _0xecbcx2['orientationField']);
        if (_0xecbcx2['dpiField']) {
            _0xecbcx1['push'](_0xecbcx2['dpiField'])
        };
        if (_0xecbcx2['showHeaderField']) {
            _0xecbcx1['push'](_0xecbcx2['showHeaderField'])
        };
        if (_0xecbcx2['showFooterField']) {
            _0xecbcx1['push'](_0xecbcx2['showFooterField'])
        };
        return _0xecbcx1
    },
    applyStateful: function(_0xecbcx1) {
        if (!this['stateful']) {
            return _0xecbcx1
        };
        var _0xecbcx2 = this,
            _0xecbcx5 = _0xecbcx2['stateId'] || 'exporter';
        return Ext['applyIf'](_0xecbcx1, {
            stateful: true,
            stateId: _0xecbcx5 + '_' + _0xecbcx1['name']
        })
    },
    applyStatefulFull: function(_0xecbcx1) {
        if (!this['stateful']) {
            return _0xecbcx1
        };
        var _0xecbcx2 = this;
        return Ext.apply(_0xecbcx2['applyStateful'](_0xecbcx1), {
            stateEvents: ['change'],
            applyState: _0xecbcx2['applyFieldState'],
            getState: _0xecbcx2['getFieldState']
        })
    },
    getFieldState: function() {
        return {
            value: this['getValue']()
        }
    },
    applyFieldState: function(_0xecbcx1) {
        if ('value' in _0xecbcx1) {
            this['setValue'](_0xecbcx1['value'])
        }
    },
    onRangeChange: function(_0xecbcx2, _0xecbcx1) {
        switch (_0xecbcx1) {
            case 'complete':
                ;
            case 'completedata':
                this['datesHolder']['hide']();
                this['resizerHolder'] && this['resizerHolder']['hide']();
                break;
            case 'date':
                this['datesHolder']['show']();
                this['resizerHolder'] && this['resizerHolder']['hide']();
                break;
            case 'current':
                this['datesHolder']['hide']();
                if (this['resizerHolder']) {
                    this['resizerHolder']['show']();
                    this['resizePicker']['expand'](true)
                };
                break
        }
    },
    onExporterChange: function(_0xecbcx2, _0xecbcx1) {
        switch (_0xecbcx1) {
            case 'singlepage':
                this['disableFields'](true);
                break;
            default:
                this['disableFields'](false)
        }
    },
    disableFields: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        _0xecbcx1['formatField']['setDisabled'](_0xecbcx2);
        _0xecbcx1['orientationField']['setDisabled'](_0xecbcx2)
    }
});
Ext.define('Ext.ux.Scheduler.widget.ExportDialog', {
    alternateClassName: 'Ext.ux.Scheduler.widget.PdfExportDialog',
    extend: 'Ext.window.Window',
    requires: ['Ext.ProgressBar', 'Ext.ux.Scheduler.widget.ExportDialogForm'],
    mixins: ['Ext.ux.Scheduler.mixin.Localizable'],
    alias: 'widget.exportdialog',
    width: 450,
    cls: 'sch-exportdialog',
    frame: false,
    layout: 'fit',
    draggable: true,
    constrain: true,
    progressBar: null,
    buttonsPanel: null,
    buttonsPanelScope: null,
    doExportFnScope: null,
    doExportFn: function(_0xecbcx5, _0xecbcx1, _0xecbcx2) {
        throw 'Ext.ux.Scheduler.widget.ExportDialog: doExportFn needs to be set in the config'
    },
    form: null,
    defaultFormXType: 'export_dialog_form',
    exportButtonConfig: null,
    cancelButtonConfig: null,
    formConfigs: 'pageFormats,startDate,endDate,rowHeight,columnWidth,defaultExporter,exporters,dateRangeFormat,exportConfig,showColumnPicker,columnPickerConfig,showDPIField,dpiFieldConfig,showShowHeaderField,showShowFooterField,showResizePicker,stateful,stateId,dateRangeRestriction,showRowsRangeField,rowsRangeFieldConfig,rangeFieldConfig,formatFieldConfig,orientationFieldConfig,exportersFieldConfig',
    constructor: function(_0xecbcx1) {
        Ext.apply(this, _0xecbcx1);
        this['title'] = this['title'] || this.L('title');
        this['callParent'](arguments)
    },
    mapFormConfigs: function() {
        this['form'] = this['form'] || {};
        var _0xecbcx5 = this['form'];
        var _0xecbcx3 = this['formConfigs']['split'](',');
        for (var _0xecbcx2 = 0, _0xecbcx4 = _0xecbcx3['length']; _0xecbcx2 < _0xecbcx4; _0xecbcx2++) {
            var _0xecbcx1 = _0xecbcx3[_0xecbcx2];
            if (this.hasOwnProperty(_0xecbcx1) && !_0xecbcx5.hasOwnProperty(_0xecbcx1)) {
                _0xecbcx5[_0xecbcx1] = this[_0xecbcx1]
            }
        };
        if (this.hasOwnProperty('showFooterField') && !_0xecbcx5.hasOwnProperty('showShowFooterField')) {
            _0xecbcx5['showShowFooterField'] = this['showFooterField']
        };
        if (this.hasOwnProperty('showHeaderField') && !_0xecbcx5.hasOwnProperty('showShowHeaderField')) {
            _0xecbcx5['showShowHeaderField'] = this['showHeaderField']
        };
        if (_0xecbcx5['stateId']) {
            _0xecbcx5['stateId'] = 'form_' + _0xecbcx5['stateId']
        }
    },
    initComponent: function() {
        var _0xecbcx1 = this;
        if (!_0xecbcx1['form'] || !_0xecbcx1['form']['isForm']) {
            _0xecbcx1['mapFormConfigs']();
            _0xecbcx1['form'] = _0xecbcx1['buildForm']()
        };
        Ext.apply(_0xecbcx1, {
            items: {
                items: [_0xecbcx1['form'], _0xecbcx1['progressBar'] || _0xecbcx1['buildProgressBar']()]
            },
            fbar: _0xecbcx1['buildButtons'](_0xecbcx1['buttonsPanelScope'] || _0xecbcx1)
        });
        _0xecbcx1['callParent'](arguments)
    },
    afterRender: function() {
        var _0xecbcx1 = this;
        if (_0xecbcx1['form']['resizePicker']) {
            _0xecbcx1['relayEvents'](_0xecbcx1['form']['resizePicker'], ['change', 'changecomplete', 'select'])
        };
        _0xecbcx1['callParent'](arguments)
    },
    buildButtons: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        return [Ext.apply({
            xtype: 'button',
            scale: 'medium',
            itemId: 'export',
            text: _0xecbcx1.L('exportButtonText'),
            handler: _0xecbcx1['onExportButtonPress'],
            scope: _0xecbcx2 || _0xecbcx1
        }, _0xecbcx1['exportButtonConfig']), Ext.apply({
            xtype: 'button',
            scale: 'medium',
            itemId: 'cancel',
            text: _0xecbcx1.L('cancelButtonText'),
            handler: _0xecbcx1['onCancelButtonPress'],
            scope: _0xecbcx2 || _0xecbcx1
        }, _0xecbcx1['cancelButtonConfig'])]
    },
    onExportButtonPress: function() {
        if (this['form']['isValid']()) {
            var _0xecbcx2 = this['form']['getValues']();
            this['beforeExport']();
            var _0xecbcx1 = this['dateRangeFormat'] || Ext['Date']['defaultFormat'];
            if (_0xecbcx2['dateFrom'] && !Ext['isDate'](_0xecbcx2['dateFrom'])) {
                _0xecbcx2['dateFrom'] = Ext['Date']['parse'](_0xecbcx2['dateFrom'], _0xecbcx1)
            };
            if (_0xecbcx2['dateTo'] && !Ext['isDate'](_0xecbcx2['dateTo'])) {
                _0xecbcx2['dateTo'] = Ext['Date']['parse'](_0xecbcx2['dateTo'], _0xecbcx1)
            };
            this['doExportFn']['call'](this['doExportFnScope'] || this, _0xecbcx2, this['onExportSuccess'], this['onExportFailure'])
        }
    },
    afterExport: function() {
        var _0xecbcx1 = this['down']('#export');
        _0xecbcx1 && _0xecbcx1['enable']();
        this['progressBar'] && this['progressBar']['hide']()
    },
    beforeExport: function() {
        var _0xecbcx1 = this['down']('#export');
        _0xecbcx1 && _0xecbcx1['disable']();
        this['progressBar'] && this['progressBar']['show']()
    },
    onExportSuccess: function() {
        this['afterExport']()
    },
    onExportFailure: function() {
        this['afterExport']()
    },
    onCancelButtonPress: function() {
        this['destroy']()
    },
    buildForm: function(_0xecbcx1) {
        this['form'] = Ext.apply(this['form'] || {}, _0xecbcx1);
        return Ext['ComponentManager']['create'](this['form'], this['defaultFormXType'])
    },
    buildProgressBar: function() {
        return this['progressBar'] = new Ext.ProgressBar({
            text: this.L('progressBarText'),
            animate: true,
            hidden: true,
            margin: '4px 10px 10px 10px'
        })
    }
});
Ext.define('Ext.ux.Scheduler.plugin.Export', {
    extend: 'Ext.util.Observable',
    alternateClassName: 'Ext.ux.Scheduler.plugin.PdfExport',
    alias: 'plugin.scheduler_export',
    mixins: ['Ext.AbstractPlugin', 'Ext.ux.Scheduler.mixin.Localizable'],
    requires: ['Ext.XTemplate', 'Ext.ux.Scheduler.plugin.exporter.SinglePage', 'Ext.ux.Scheduler.plugin.exporter.MultiPage', 'Ext.ux.Scheduler.plugin.exporter.MultiPageVertical', 'Ext.ux.Scheduler.widget.ExportDialog'],
    lockableScope: 'top',
    pageSizes: {
        A5: {
            width: 5.8,
            height: 8.3
        },
        A4: {
            width: 8.3,
            height: 11.7
        },
        A3: {
            width: 11.7,
            height: 16.5
        },
        Letter: {
            width: 8.5,
            height: 11
        },
        Legal: {
            width: 8.5,
            height: 14
        }
    },
    DPI: 72,
    printServer: undefined,
    timeout: 60000,
    headerTpl: null,
    headerTplDataFn: null,
    headerTplDataFnScope: null,
    tpl: null,
    footerTpl: null,
    footerTplDataFn: null,
    footerTplDataFnScope: null,
    exportDialogClassName: 'Ext.ux.Scheduler.widget.ExportDialog',
    exportDialogConfig: {},
    exporterConfig: null,
    exportConfig: {
        format: 'A4',
        orientation: 'portrait',
        range: 'complete',
        rowsRange: 'all',
        showHeader: true,
        showFooter: false
    },
    expandAllBeforeExport: false,
    translateURLsToAbsolute: true,
    openAfterExport: true,
    beforeExport: Ext['emptyFn'],
    afterExport: Ext['emptyFn'],
    fileFormat: 'pdf',
    defaultExporter: 'multipage',
    exporters: undefined,
    callbacks: undefined,
    currentAjaxRequest: undefined,
    hideExportDialogTimeout: 1000,
    constructor: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx1 = _0xecbcx1 || {};
        _0xecbcx2['exportersIndex'] = {};
        if (_0xecbcx1['exportDialogConfig']) {
            Ext['Object']['each'](this['exportConfig'], function(_0xecbcx3, _0xecbcx5, _0xecbcx6) {
                var _0xecbcx4 = _0xecbcx1['exportDialogConfig'][_0xecbcx3];
                if (_0xecbcx4) {
                    _0xecbcx6[_0xecbcx3] = _0xecbcx4
                }
            })
        };
        _0xecbcx2['callParent']([_0xecbcx1]);
        _0xecbcx2['setFileFormat'](_0xecbcx2['fileFormat']);
        if (!_0xecbcx2['exporters']) {
            _0xecbcx2['exporters'] = _0xecbcx2['buildExporters']()
        };
        _0xecbcx2['initExporters']();
        _0xecbcx2['bindExporters']()
    },
    init: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx1['showExportDialog'] = Ext['Function']['bind'](_0xecbcx2['showExportDialog'], _0xecbcx2);
        _0xecbcx1['doExport'] = Ext['Function']['bind'](_0xecbcx2['doExport'], _0xecbcx2);
        _0xecbcx2['scheduler'] = _0xecbcx1
    },
    initExporters: function() {
        var _0xecbcx5 = this,
            _0xecbcx2 = _0xecbcx5['exporters'];
        for (var _0xecbcx1 = 0; _0xecbcx1 < _0xecbcx2['length']; _0xecbcx1++) {
            if (!_0xecbcx2[_0xecbcx1]['isExporter']) {
                _0xecbcx2[_0xecbcx1] = _0xecbcx5['createExporter'](_0xecbcx2[_0xecbcx1])
            }
        }
    },
    bindExporters: function() {
        var _0xecbcx2 = this['exporters'];
        for (var _0xecbcx1 = 0; _0xecbcx1 < _0xecbcx2['length']; _0xecbcx1++) {
            this['bindExporter'](_0xecbcx2[_0xecbcx1])
        }
    },
    bindExporter: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        _0xecbcx1['mon'](_0xecbcx2, {
            commitpage: _0xecbcx1['onPageCommit'],
            collectrows: _0xecbcx1['onRowCollected'],
            scope: _0xecbcx1
        })
    },
    unbindExporter: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        _0xecbcx1['mun'](_0xecbcx2, {
            commitpage: _0xecbcx1['onPageCommit'],
            collectrows: _0xecbcx1['onRowCollected'],
            scope: _0xecbcx1
        })
    },
    buildExporters: function() {
        return ['Ext.ux.Scheduler.plugin.exporter.SinglePage', 'Ext.ux.Scheduler.plugin.exporter.MultiPage', 'Ext.ux.Scheduler.plugin.exporter.MultiPageVertical']
    },
    getExporterConfig: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx3 = this;
        var _0xecbcx1 = Ext.apply({
            translateURLsToAbsolute: _0xecbcx3['translateURLsToAbsolute'],
            expandAllBeforeExport: _0xecbcx3['expandAllBeforeExport'],
            DPI: _0xecbcx3['DPI']
        }, _0xecbcx3['exporterConfig']);
        if (_0xecbcx3['headerTpl']) {
            _0xecbcx1['headerTpl'] = _0xecbcx3['headerTpl']
        };
        if (_0xecbcx3['headerTplDataFn']) {
            _0xecbcx1['headerTplDataFn'] = _0xecbcx3['headerTplDataFn'];
            _0xecbcx1['headerTplDataFnScope'] = _0xecbcx3['headerTplDataFnScope']
        };
        if (_0xecbcx3['tpl']) {
            _0xecbcx1['tpl'] = _0xecbcx3['tpl']
        };
        if (_0xecbcx3['footerTpl']) {
            _0xecbcx1['footerTpl'] = _0xecbcx3['footerTpl']
        };
        if (_0xecbcx3['footerTplDataFn']) {
            _0xecbcx1['footerTplDataFn'] = _0xecbcx3['footerTplDataFn'];
            _0xecbcx1['footerTplDataFnScope'] = _0xecbcx3['footerTplDataFnScope']
        };
        return _0xecbcx1
    },
    createExporter: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = this,
            _0xecbcx3 = _0xecbcx5['getExporterConfig'](_0xecbcx2, _0xecbcx1);
        if (Ext['isObject'](_0xecbcx2)) {
            return Ext['create'](Ext.apply(_0xecbcx3, _0xecbcx2))
        } else {
            return Ext['create'](_0xecbcx2, Ext.apply(_0xecbcx3, _0xecbcx1))
        }
    },
    registerExporter: function(_0xecbcx2, _0xecbcx1) {
        if (!(_0xecbcx2 instanceof Ext.ux.Scheduler['plugin']['exporter']['AbstractExporter'])) {
            _0xecbcx2 = this['createExporter']['apply'](this, arguments)
        };
        this['exporters']['push'](_0xecbcx2);
        this['bindExporter'](_0xecbcx2)
    },
    getExporter: function(_0xecbcx2) {
        if (!_0xecbcx2) {
            return
        };
        var _0xecbcx1 = this['exportersIndex'][_0xecbcx2];
        if (_0xecbcx1) {
            return _0xecbcx1
        };
        _0xecbcx1 = this['exportersIndex'][_0xecbcx2] = Ext['Array']['findBy'](this['exporters'], function(_0xecbcx5) {
            return _0xecbcx5['getExporterId']() == _0xecbcx2
        });
        return _0xecbcx1
    },
    getExporters: function() {
        return this['exporters']
    },
    setFileFormat: function(_0xecbcx1) {
        this['fileFormat'] = _0xecbcx1
    },
    showExportDialog: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getActiveExportDialog']();
        if (_0xecbcx1) {
            _0xecbcx1['destroy']()
        };
        _0xecbcx2['setActiveExportDialog'](_0xecbcx2['buildExportDialog']());
        _0xecbcx1 = _0xecbcx2['getActiveExportDialog']();
        _0xecbcx1['on']('destroy', _0xecbcx2['onExportDialogDestroy'], _0xecbcx2);
        if (_0xecbcx1['progressBar']) {
            _0xecbcx1['mon'](_0xecbcx2, {
                progressupdate: _0xecbcx2['onExportProgress'],
                scope: _0xecbcx2
            })
        };
        _0xecbcx1['show']()
    },
    buildExportDialog: function() {
        return Ext['create'](this['exportDialogClassName'], this['buildExportDialogConfig']())
    },
    buildExportDialogConfig: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['scheduler']['getSchedulingView']();
        return Ext.apply({
            doExportFn: _0xecbcx2['doExport'],
            doExportFnScope: _0xecbcx2,
            startDate: _0xecbcx2['scheduler']['getStart'](),
            endDate: _0xecbcx2['scheduler']['getEnd'](),
            rowHeight: _0xecbcx1['timeAxisViewModel']['getViewRowHeight'](),
            columnWidth: _0xecbcx1['timeAxisViewModel']['getTickWidth'](),
            defaultExporter: _0xecbcx2['defaultExporter'],
            exportConfig: Ext.apply(_0xecbcx2['exportConfig'], {
                DPI: _0xecbcx2['DPI']
            }),
            exporters: _0xecbcx2['exporters'],
            pageFormats: _0xecbcx2['getPageFormats'](),
            columnPickerConfig: {
                columns: _0xecbcx2['scheduler']['lockedGrid']['query']('gridcolumn[ignoreInExport!=true]')
            }
        }, _0xecbcx2['exportDialogConfig'])
    },
    onExportDialogDestroy: function() {
        this['cancelExport']();
        this['setActiveExportDialog'](null)
    },
    onExportProgress: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx1 = this['getActiveExportDialog'](),
            _0xecbcx3 = _0xecbcx1 && _0xecbcx1['progressBar'];
        if (_0xecbcx3) {
            _0xecbcx3['updateProgress'](_0xecbcx5);
            if (typeof _0xecbcx2 == 'string') {
                _0xecbcx3['updateText'](_0xecbcx2)
            }
        }
    },
    showError: function(_0xecbcx1) {
        Ext['Msg']['alert']('', _0xecbcx1 || this.L('generalError'))
    },
    getPageFormats: function() {
        var _0xecbcx1 = this['pageSizes'],
            _0xecbcx2 = [];
        Ext['Object']['each'](_0xecbcx1, function(_0xecbcx5, _0xecbcx3) {
            _0xecbcx2['push']({
                width: _0xecbcx3['width'],
                height: _0xecbcx3['height'],
                name: _0xecbcx5
            })
        });
        return Ext['Array']['map'](_0xecbcx2['sort'](function(_0xecbcx3, _0xecbcx5) {
            return _0xecbcx3['width'] - _0xecbcx5['width']
        }), function(_0xecbcx5) {
            return _0xecbcx5['name']
        })
    },
    getExportConfig: function(_0xecbcx2) {
        var _0xecbcx5 = this;
        var _0xecbcx1 = Ext.apply({
            fileFormat: _0xecbcx5['fileFormat'],
            exporterId: _0xecbcx5['defaultExporter'],
            beforeExport: Ext['Function']['bind'](_0xecbcx5['beforeExport'], _0xecbcx5),
            afterExport: Ext['Function']['bind'](_0xecbcx5['afterExport'], _0xecbcx5)
        }, _0xecbcx2, _0xecbcx5['exportConfig']);
        _0xecbcx1['DPI'] = _0xecbcx1['DPI'] || _0xecbcx5['DPI'];
        _0xecbcx1['pageSize'] = Ext.apply({}, _0xecbcx5['pageSizes'][_0xecbcx1['format']]);
        _0xecbcx1['pageSize']['width'] *= _0xecbcx1['DPI'];
        _0xecbcx1['pageSize']['height'] *= _0xecbcx1['DPI'];
        return _0xecbcx1
    },
    doExport: function(_0xecbcx3, _0xecbcx7, _0xecbcx1, _0xecbcx4) {
        var _0xecbcx6 = this,
            _0xecbcx5 = _0xecbcx6['scheduler'],
            _0xecbcx2 = _0xecbcx6['getExportConfig'](_0xecbcx3);
        _0xecbcx6['callbacks'] = {
            success: _0xecbcx7,
            failure: _0xecbcx1,
            scope: _0xecbcx4 || _0xecbcx6
        };
        var _0xecbcx9 = _0xecbcx6['exporter'] = _0xecbcx6['getExporter'](_0xecbcx2['exporterId']);
        if (_0xecbcx6['fireEvent']('beforeexport', _0xecbcx5, _0xecbcx9, _0xecbcx2) !== false) {
            _0xecbcx6['myBeforeExport']();
            _0xecbcx6['exporter']['extractPages'](_0xecbcx5, _0xecbcx2, function(_0xecbcxa) {
                _0xecbcx6['onPagesExtracted'](_0xecbcxa, _0xecbcx5, _0xecbcx9, _0xecbcx2)
            }, _0xecbcx6)
        }
    },
    cancelExport: function() {
        if (this['currentAjaxRequest']) {
            Ext['Ajax']['abort'](this['currentAjaxRequest']);
            this['currentAjaxRequest'] = null
        } else {
            if (this['exporter']) {
                this['exporter']['abort']()
            }
        };
        this['scheduler']['getEl']()['unmask']()
    },
    onPagesExtracted: function(_0xecbcx1, _0xecbcx5, _0xecbcx3, _0xecbcx2) {
        this['fireEvent']('progressupdate', 0.8, this.L('requestingPrintServer'));
        this['doRequest'](_0xecbcx1, _0xecbcx2)
    },
    onRowCollected: function(_0xecbcx5, _0xecbcx3, _0xecbcx2, _0xecbcx1) {
        this['fireEvent']('progressupdate', 0.2 * (_0xecbcx2 + 1) / _0xecbcx1, Ext['String']['format'](this.L('fetchingRows'), _0xecbcx2 + 1, _0xecbcx1))
    },
    onPageCommit: function(_0xecbcx3, _0xecbcx5, _0xecbcx2, _0xecbcx1) {
        _0xecbcx1 = Math['max'](_0xecbcx2, _0xecbcx1);
        this['fireEvent']('progressupdate', 0.2 + 0.6 * _0xecbcx2 / _0xecbcx1, Ext['String']['format'](this.L('builtPage'), _0xecbcx2, _0xecbcx1))
    },
    onExportSuccess: function(_0xecbcx1) {
        var _0xecbcx6 = this,
            _0xecbcx3 = _0xecbcx6['getActiveExportDialog'](),
            _0xecbcx4 = _0xecbcx6['callbacks'],
            _0xecbcx5 = _0xecbcx4 && _0xecbcx4['success'],
            _0xecbcx2 = _0xecbcx4 && _0xecbcx4['scope'] || _0xecbcx6;
        _0xecbcx6['fireEvent']('progressupdate', 1);
        _0xecbcx6['myAfterExport'](true, _0xecbcx1['url']);
        _0xecbcx5 && _0xecbcx5['apply'](_0xecbcx2, arguments);
        _0xecbcx6['hideExportDialogTimer'] = setTimeout(function() {
            _0xecbcx3 && _0xecbcx3['destroy']()
        }, _0xecbcx6['hideExportDialogTimeout']);
        if (_0xecbcx6['openAfterExport']) {
            _0xecbcx6['openAfterExportTimer'] = setTimeout(function() {
                window['open'](_0xecbcx1['url'], 'ExportedPanel')
            }, 0)
        }
    },
    onExportFailure: function(_0xecbcx9, _0xecbcx1) {
        var _0xecbcx6 = this,
            _0xecbcx2 = this['getActiveExportDialog'](),
            _0xecbcx4 = _0xecbcx6['callbacks'],
            _0xecbcx3 = _0xecbcx4 && _0xecbcx4['failure'],
            _0xecbcx5 = _0xecbcx4 && _0xecbcx4['scope'] || _0xecbcx6;
        _0xecbcx3 && _0xecbcx3['call'](_0xecbcx5, _0xecbcx9);
        _0xecbcx6['fireEvent']('error', _0xecbcx2, _0xecbcx9, _0xecbcx1);
        _0xecbcx6['showError'](_0xecbcx9);
        _0xecbcx6['myAfterExport'](false, null)
    },
    doRequest: function(_0xecbcx1, _0xecbcx2) {
        var _0xecbcx6 = this,
            _0xecbcx9 = _0xecbcx6['scheduler'];
        if (!_0xecbcx6['test'] && !_0xecbcx6['debug']) {
            if (_0xecbcx6['printServer']) {
                var _0xecbcx8 = {
                    method: 'POST',
                    url: _0xecbcx6['printServer'],
                    timeout: _0xecbcx6['timeout'],
                    params: Ext.apply({
                        html: {
                            array: Ext['JSON']['encode'](_0xecbcx1)
                        },
                        startDate: _0xecbcx9['getStartDate'](),
                        endDate: _0xecbcx9['getEndDate'](),
                        format: _0xecbcx6['exporter']['getPaperFormat'](),
                        orientation: _0xecbcx2['orientation'],
                        range: _0xecbcx2['range'],
                        fileFormat: _0xecbcx6['fileFormat']
                    }, this['getParameters']()),
                    success: _0xecbcx6['onRequestSuccess'],
                    failure: _0xecbcx6['onRequestFailure'],
                    scope: _0xecbcx6
                };
                Ext.apply(_0xecbcx8, this['getAjaxConfig'](_0xecbcx8));
                this['currentAjaxRequest'] = Ext['Ajax']['request'](_0xecbcx8)
            } else {
                _0xecbcx6['onExportFailure']('Print server URL is not defined, please specify printServer config')
            }
        } else {
            if (_0xecbcx6['debug']) {
                var _0xecbcx5 = _0xecbcx1 || [];
                for (var _0xecbcx4 = 0, _0xecbcx3 = _0xecbcx5['length']; _0xecbcx4 < _0xecbcx3; _0xecbcx4++) {
                    var _0xecbcx7 = window['open']();
                    _0xecbcx7['document']['write'](_0xecbcx5[_0xecbcx4]['html']);
                    _0xecbcx7['document']['close']()
                }
            };
            _0xecbcx6['onExportSuccess'](_0xecbcx6['testResponse'] || {
                success: true,
                url: 'foo',
                htmlArray: _0xecbcx1
            })
        }
    },
    onRequestSuccess: function(_0xecbcx2) {
        this['currentAjaxRequest'] = null;
        var _0xecbcx5 = this,
            _0xecbcx1;
        try {
            _0xecbcx1 = Ext['JSON']['decode'](_0xecbcx2['responseText'])
        } catch (d) {
            _0xecbcx5['onExportFailure']('Wrong server response received');
            return
        };
        if (_0xecbcx1['success']) {
            _0xecbcx5['onExportSuccess'](_0xecbcx1)
        } else {
            _0xecbcx5['onExportFailure'](_0xecbcx1['msg'], _0xecbcx1)
        }
    },
    onRequestFailure: function(_0xecbcx1) {
        this['currentAjaxRequest'] = null;
        var _0xecbcx2 = this,
            _0xecbcx5 = _0xecbcx1['status'] === 200 ? _0xecbcx1['responseText'] : _0xecbcx1['statusText'];
        _0xecbcx2['onExportFailure'](_0xecbcx5, _0xecbcx1)
    },
    getParameters: function() {
        return {}
    },
    getAjaxConfig: function(_0xecbcx1) {
        return {}
    },
    getActiveExportDialog: function() {
        return this['win']
    },
    setActiveExportDialog: function(_0xecbcx1) {
        this['win'] = _0xecbcx1
    },
    myBeforeExport: function() {
        this['fireEvent']('exportstart', this);
        var _0xecbcx1 = this['scheduler']['getEl']()['mask']();
        _0xecbcx1['addCls']('sch-export-mask');
        var _0xecbcx2 = this['getActiveExportDialog'](),
            _0xecbcx5 = _0xecbcx2 && _0xecbcx2['progressBar'];
        if (_0xecbcx5) {
            _0xecbcx5['show']()
        }
    },
    myAfterExport: function(_0xecbcx2, _0xecbcx1) {
        this['fireEvent']('afterexport', this, _0xecbcx2, _0xecbcx1);
        this['scheduler']['getEl']()['unmask']()
    },
    destroy: function() {
        var _0xecbcx1 = this['getActiveExportDialog']();
        _0xecbcx1 && _0xecbcx1['destroy']();
        this['callParent'](arguments);
        clearTimeout(this['openAfterExportTimer']);
        clearTimeout(this['hideExportDialogTimer']);
        if (this['getActiveExportDialog']()) {
            this['getActiveExportDialog']()['destroy']()
        }
    }
});
Ext.define('Ext.ux.Scheduler.plugin.HeaderZoom', {
    extend: 'Ext.ux.Scheduler.util.DragTracker',
    mixins: ['Ext.AbstractPlugin'],
    alias: 'plugin.scheduler_headerzoom',
    lockableScope: 'top',
    scheduler: null,
    proxy: null,
    headerRegion: null,
    init: function(_0xecbcx1) {
        this['scheduler'] = _0xecbcx1;
        this['onModeChange']();
        _0xecbcx1['on']('modechange', this['onModeChange'], this)
    },
    onOrientationChange: function() {
        return this['onModeChange']['apply'](this, arguments)
    },
    onModeChange: function() {
        var _0xecbcx1 = this['scheduler']['down']('timeaxiscolumn');
        if (_0xecbcx1) {
            if (_0xecbcx1['rendered']) {
                this['onTimeAxisColumnRender'](_0xecbcx1)
            } else {
                _0xecbcx1['on']({
                    afterrender: this['onTimeAxisColumnRender'],
                    scope: this
                })
            }
        }
    },
    onTimeAxisColumnRender: function(_0xecbcx1) {
        this['proxy'] = _0xecbcx1['el']['createChild']({
            cls: 'sch-drag-selector'
        });
        this['initEl'](_0xecbcx1['el'])
    },
    onStart: function(_0xecbcx1) {
        this['proxy']['show']();
        this['headerRegion'] = this['scheduler']['normalGrid']['headerCt']['getRegion']()
    },
    onDrag: function(_0xecbcx2) {
        var _0xecbcx5 = this['headerRegion'];
        var _0xecbcx1 = this['getRegion']()['constrainTo'](_0xecbcx5);
        _0xecbcx1['top'] = _0xecbcx5['top'];
        _0xecbcx1['bottom'] = _0xecbcx5['bottom'];
        this['proxy']['setBox'](_0xecbcx1)
    },
    onEnd: function(_0xecbcx7) {
        if (this['proxy']) {
            this['proxy']['setDisplayed'](false);
            var _0xecbcx5 = this['scheduler'];
            var _0xecbcx9 = this['getRegion']();
            var _0xecbcx2 = _0xecbcx5['getSchedulingView']()['getStartEndDatesFromRegion'](_0xecbcx9);
            if (_0xecbcx2) {
                var _0xecbcx6 = _0xecbcx5['timeAxis'];
                var _0xecbcx3 = _0xecbcx5['getSchedulingView']()['timeAxisViewModel']['getBottomHeader']()['unit'];
                var _0xecbcxa = _0xecbcx6['floorDate'](_0xecbcx2['start'], false, _0xecbcx3, 1);
                var _0xecbcx1 = _0xecbcx6['ceilDate'](_0xecbcx2['end'], false, _0xecbcx3, 1);
                if (this['fireEvent']('beforeheaderzoom', this, _0xecbcx5, _0xecbcxa, _0xecbcx1) !== false) {
                    _0xecbcx5['zoomToSpan']({
                        start: _0xecbcxa,
                        end: _0xecbcx1
                    })
                }
            }
        }
    },
    destroy: function() {
        if (this['proxy']) {
            Ext['destroy'](this['proxy']);
            this['proxy'] = null
        };
        this['callParent'](arguments)
    }
});
Ext.define('Ext.ux.Scheduler.plugin.Pan', {
    extend: 'Ext.AbstractPlugin',
    alias: 'plugin.scheduler_pan',
    lockableScope: 'top',
    enableVerticalPan: true,
    statics: {
        KEY_SHIFT: 1,
        KEY_CTRL: 2,
        KEY_ALT: 4,
        KEY_ALL: 7
    },
    disableOnKey: 0,
    constructor: function(_0xecbcx1) {
        Ext.apply(this, _0xecbcx1)
    },
    init: function(_0xecbcx1) {
        this['view'] = _0xecbcx1['getSchedulingView']();
        this['view']['on']('afterrender', this['onRender'], this)
    },
    onRender: function(_0xecbcx1) {
        this['view']['el']['on']('mousedown', this['onMouseDown'], this)
    },
    onMouseDown: function(_0xecbcx3, _0xecbcx5) {
        if ((_0xecbcx3['event']['touches'] && _0xecbcx3['event']['touches']['length'] > 0) || (!_0xecbcx3['event']['touches'] && _0xecbcx3['button'] !== 0)) {
            return
        };
        var _0xecbcx2 = this['self'],
            _0xecbcx1 = this['disableOnKey'];
        if ((_0xecbcx3['shiftKey'] && (_0xecbcx1 & _0xecbcx2['KEY_SHIFT'])) || (_0xecbcx3['ctrlKey'] && (_0xecbcx1 & _0xecbcx2['KEY_CTRL'])) || (_0xecbcx3['altKey'] && (_0xecbcx1 & _0xecbcx2['KEY_ALT']))) {
            return
        };
        if (_0xecbcx3['getTarget'](this['view']['timeCellSelector'], 10) && !_0xecbcx3['getTarget'](this['view']['timeCellSelector'] + ' > div > *')) {
            this['mouseX'] = _0xecbcx3['getX']();
            this['mouseY'] = _0xecbcx3['getY']();
            Ext['getBody']()['on']('mousemove', this['onMouseMove'], this);
            Ext['getDoc']()['on']('mouseup', this['onMouseUp'], this);
            if (Ext['isIE'] || Ext['isGecko']) {
                Ext['getBody']()['on']('mouseenter', this['onMouseUp'], this)
            };
            _0xecbcx3['stopEvent']()
        }
    },
    onMouseMove: function(_0xecbcx6) {
        if (this['disabled']) {
            return
        };
        _0xecbcx6['stopEvent']();
        var _0xecbcx1 = _0xecbcx6['getX']();
        var _0xecbcx7 = _0xecbcx6['getY']();
        var _0xecbcx5 = 0,
            _0xecbcx3 = this['mouseX'] - _0xecbcx1;
        if (this['enableVerticalPan']) {
            _0xecbcx5 = this['mouseY'] - _0xecbcx7
        };
        this['mouseX'] = _0xecbcx1;
        this['mouseY'] = _0xecbcx7;
        var _0xecbcx9 = this['view']['getScroll']();
        _0xecbcx5 && this['view']['scrollVerticallyTo'](Math['max'](0, _0xecbcx5 + _0xecbcx9['top']), false);
        _0xecbcx3 && this['view']['scrollHorizontallyTo'](Math['max'](0, _0xecbcx3 + _0xecbcx9['left']), false);
        var _0xecbcx2 = this['view']['headerCt']['getScrollable']();
        _0xecbcx2 && _0xecbcx2['scrollBy'](_0xecbcx3, 0, false)
    },
    onMouseUp: function(_0xecbcx1) {
        Ext['getBody']()['un']('mousemove', this['onMouseMove'], this);
        Ext['getDoc']()['un']('mouseup', this['onMouseUp'], this);
        if (Ext['isIE'] || Ext['isGecko']) {
            Ext['getBody']()['un']('mouseenter', this['onMouseUp'], this)
        }
    }
});
Ext.define('Ext.ux.Scheduler.plugin.Printable', {
    extend: 'Ext.ux.Scheduler.plugin.Export',
    requires: ['Ext.XTemplate'],
    alternateClassName: ['Ext.ux.Scheduler.plugin.Print'],
    alias: ['plugin.scheduler_printable', 'plugin.scheduler_print'],
    docType: '<!DOCTYPE HTML>',
    beforePrint: function() {},
    afterPrint: function() {},
    exportDialogConfig: {
        showDPIField: true
    },
    removeSecondaryCanvas: false,
    wrapHeaders: false,
    autoPrintAndClose: true,
    mainTpl: '{docType}<html class="' + Ext['baseCSSPrefix'] + 'border-box {htmlClasses}"><head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type" /><title>{title}</title>{styles}</head><body class="sch-print-body {bodyClasses}"><div class="sch-print-ct" style="width:{totalWidth}px"><tpl for="pages">{html}</tpl></div><script type="text/javascript">{setupScript}</script></body></html>',
    pageTpl: '{header}<div id="{id}" class="{componentClasses}" style="height:{bodyHeight}px; width:{totalWidth}px; position: relative !important">{HTML}</div>{footer}<div style="page-break-after:always;"></div>',
    setupScriptTpl: 'window.onload = function(){ document._loaded  = true;if ({autoPrintAndClose}) {window.print();if (!{isChrome}) window.close();}}',
    openAfterExport: false,
    DPI: 72,
    fakeBackgroundColor: false,
    doRequest: function() {},
    constructor: function(_0xecbcx1) {
        Ext.apply(this, _0xecbcx1);
        if (!this['mainTpl']['isTemplate']) {
            this['mainTpl'] = new Ext.XTemplate(this['mainTpl'])
        };
        this['callParent'](arguments);
        this['exportDialogConfig'] = Ext['applyIf']({
            l10n: {
                title: this.L('dialogTitle'),
                exportButtonText: this.L('exportButtonText')
            }
        }, this['exportDialogConfig'])
    },
    init: function(_0xecbcx1) {
        this['callParent'](arguments);
        _0xecbcx1['print'] = Ext['Function']['bind'](this['print'], this)
    },
    getExporterConfig: function(_0xecbcx5, _0xecbcx2) {
        var _0xecbcx3 = this,
            _0xecbcx1 = _0xecbcx3['callParent'](arguments);
        return Ext.apply(_0xecbcx1, {
            tpl: _0xecbcx3['pageTpl']
        })
    },
    getExportConfig: function(_0xecbcx2) {
        var _0xecbcx5 = this,
            _0xecbcx1 = _0xecbcx5['callParent'](arguments);
        return Ext.apply(_0xecbcx1, {
            beforeExport: Ext['Function']['bind'](_0xecbcx5['beforePrint'], _0xecbcx5),
            afterExport: Ext['Function']['bind'](_0xecbcx5['afterPrint'], _0xecbcx5)
        })
    },
    buildExporters: function() {
        return ['Ext.ux.Scheduler.plugin.exporter.MultiPage', 'Ext.ux.Scheduler.plugin.exporter.MultiPageVertical']
    },
    onPagesExtracted: function(_0xecbcx1, _0xecbcx5, _0xecbcx3, _0xecbcx2) {
        this['fireEvent']('progressupdate', 0.8, this.L('requestingPrintServer'));
        this['printPages'](_0xecbcx1, _0xecbcx5, _0xecbcx3, _0xecbcx2)
    },
    print: function() {
        this['showExportDialog']()
    },
    onBeforePageCommit: function(_0xecbcx5, _0xecbcx3, _0xecbcx8, _0xecbcxd) {
        var _0xecbcx7 = this['scheduler'],
            _0xecbcx6 = _0xecbcx7['lockedGrid'],
            _0xecbcx9 = _0xecbcx7['normalGrid'],
            _0xecbcx4 = function(_0xecbcxc) {
                return _0xecbcx3['select']('#' + _0xecbcxc)['first']()
            };
        var _0xecbcx1 = _0xecbcx3['select'](_0xecbcx5['normalBodySelector'])['first'](),
            _0xecbcxf = _0xecbcx4(_0xecbcx9['headerCt']['id']),
            _0xecbcxa = _0xecbcx3['select'](_0xecbcx5['lockedBodySelector'])['first'](),
            _0xecbcx2 = _0xecbcx4(_0xecbcx6['headerCt']['id']);
        _0xecbcx1['addCls'](['sch-print-normal-rows-ct', this['fakeBackgroundColor'] ? ' sch-print-fake-background' : '']);
        _0xecbcxa['addCls']('sch-print-locked-rows-ct');
        if (this['removeSecondaryCanvas']) {
            _0xecbcx3['select']('.sch-secondary-canvas')['remove']()
        };
        if (this['fakeBackgroundColor']) {
            var _0xecbcxe = _0xecbcx1['select']('.sch-event');
            _0xecbcxe['each'](function(_0xecbcxc) {
                _0xecbcxc['setStyle']('border-right-width', _0xecbcxc['dom']['style']['width'])
            })
        };
        _0xecbcxf['addCls']('sch-print-normalheader');
        _0xecbcx2['addCls']('sch-print-lockedheader');
        if (this['wrapHeaders']) {
            _0xecbcxf['wrap']('<div class="sch-print-header-wrap"></div>');
            _0xecbcx2['wrap']('<div class="sch-print-header-wrap"></div>')
        };
        if (Ext['isIE'] && _0xecbcx9['bodyWrap']) {
            var _0xecbcx11 = _0xecbcx9['bodyWrap']['getHeight']();
            Ext['fly'](_0xecbcx2['el']['dom']['parentNode'])['setStyle']({
                position: 'absolute',
                height: _0xecbcx11 + 'px'
            });
            Ext['fly'](_0xecbcxf['el']['dom']['parentNode'])['setStyle']({
                position: 'absolute',
                height: _0xecbcx11 + 'px'
            })
        }
    },
    prepareMainTplData: function(_0xecbcx1) {
        return _0xecbcx1
    },
    printPages: function(_0xecbcx2, _0xecbcx3, _0xecbcx9, _0xecbcx5) {
        if (!this['mainTpl'] || !this['mainTpl']['isTemplate']) {
            this['mainTpl'] = new Ext.XTemplate(this['mainTpl'], {
                compiled: true,
                disableFormats: true
            })
        };
        var _0xecbcx6 = _0xecbcx9['stylesheets'],
            _0xecbcx1 = document['body'];
        var _0xecbcx4 = this['mainTpl']['apply'](this['prepareMainTplData']({
            docType: this['docType'],
            htmlClasses: _0xecbcx1['parentNode']['className'],
            bodyClasses: _0xecbcx1['className'],
            title: _0xecbcx3['title'] || '',
            styles: _0xecbcx6,
            totalWidth: _0xecbcx9['paperWidth'],
            setupScript: this['setupScriptTpl']['replace']('{autoPrintAndClose}', this['autoPrintAndClose'])['replace']('{isChrome}', Ext['isChrome']),
            pages: _0xecbcx2
        }));
        var _0xecbcx7 = window['open']('', 'printgrid');
        if (!_0xecbcx7 || !_0xecbcx7['document']) {
            return false
        };
        this['printWindow'] = _0xecbcx7;
        _0xecbcx7['document']['write'](_0xecbcx4);
        _0xecbcx7['document']['close']();
        this['onExportSuccess']({
            success: true,
            url: 'foo',
            htmlArray: [_0xecbcx4]
        })
    },
    bindExporter: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        _0xecbcx1['callParent'](arguments);
        _0xecbcx1['mon'](_0xecbcx2, {
            beforecommitpage: _0xecbcx1['onBeforePageCommit'],
            scope: _0xecbcx1
        })
    },
    unbindExporter: function(_0xecbcx2) {
        var _0xecbcx1 = this;
        _0xecbcx1['callParent'](arguments);
        _0xecbcx1['mun'](_0xecbcx2, {
            beforecommitpage: _0xecbcx1['onBeforePageCommit'],
            scope: _0xecbcx1
        })
    }
});
Ext.define('Ext.ux.Scheduler.plugin.SimpleEditor', {
    extend: 'Ext.Editor',
    alias: 'plugin.scheduler_simpleeditor',
    requires: ['Ext.form.TextField'],
    mixins: ['Ext.AbstractPlugin', 'Ext.ux.Scheduler.mixin.Localizable'],
    lockableScope: 'top',
    cls: 'sch-simpleeditor',
    allowBlur: false,
    delegate: '.sch-event-inner',
    dataIndex: null,
    completeOnEnter: true,
    cancelOnEsc: true,
    height: 19,
    dragProxyEl: null,
    resourceRecord: null,
    newEventText: null,
    autoSize: {
        width: 'boundEl'
    },
    initComponent: function() {
        this['field'] = this['field'] || {
            xtype: 'textfield',
            selectOnFocus: true
        };
        this['callParent'](arguments)
    },
    init: function(_0xecbcx1) {
        this['scheduler'] = _0xecbcx1['getSchedulingView']();
        _0xecbcx1['on']('afterrender', this['onSchedulerRender'], this);
        this['scheduler']['registerEventEditor'](this);
        this['dataIndex'] = this['dataIndex'] || this['scheduler']['getEventStore']()['model']['prototype']['nameField']
    },
    edit: function(_0xecbcx1, _0xecbcx2) {
        _0xecbcx2 = _0xecbcx2 || this['scheduler']['getElementsFromEventRecord'](_0xecbcx1)[0];
        this['record'] = _0xecbcx1;
        this['startEdit'](_0xecbcx2['child'](this['delegate']), this['record']['get'](this['dataIndex']));
        this['realign']()
    },
    onSchedulerRender: function(_0xecbcx1) {
        var _0xecbcx2 = this;
        _0xecbcx2['on']({
            startedit: _0xecbcx2['onStartEdit'],
            complete: function(_0xecbcx6, _0xecbcx9, _0xecbcx4) {
                var _0xecbcx5 = _0xecbcx2['record'];
                var _0xecbcx3 = _0xecbcx2['scheduler']['getEventStore']();
                _0xecbcx5['set'](_0xecbcx2['dataIndex'], _0xecbcx9);
                if (_0xecbcx3['indexOf'](_0xecbcx5) < 0) {
                    if (_0xecbcx2['scheduler']['fireEvent']('beforeeventadd', _0xecbcx2['scheduler'], _0xecbcx5, [_0xecbcx2['resourceRecord']]) !== false) {
                        this['scheduler']['onEventCreated'](_0xecbcx5, [_0xecbcx2['resourceRecord']]);
                        _0xecbcx3['append'](_0xecbcx5);
                        _0xecbcx5['assign'](_0xecbcx2['resourceRecord']);
                        _0xecbcx2['resourceRecord'] = null
                    }
                };
                _0xecbcx2['onAfterEdit']()
            },
            canceledit: _0xecbcx2['onAfterEdit'],
            hide: function() {
                var _0xecbcx5 = _0xecbcx2['dragProxyEl'];
                if (_0xecbcx5 && _0xecbcx5['dom'] && _0xecbcx5['dom']['parentNode']) {
                    _0xecbcx5['dom']['parentNode']['removeChild'](_0xecbcx5['dom'])
                }
            },
            scope: _0xecbcx2
        });
        _0xecbcx1['on']({
            eventdblclick: function(_0xecbcx5, _0xecbcx3, _0xecbcx6) {
                if (!_0xecbcx1['isReadOnly']()) {
                    _0xecbcx2['edit'](_0xecbcx3)
                }
            },
            dragcreateend: _0xecbcx2['onDragCreateEnd'],
            scope: _0xecbcx2
        })
    },
    onStartEdit: function() {
        if (!this['allowBlur']) {
            Ext['getBody']()['on']('mousedown', this['onMouseDown'], this);
            this['scheduler']['on']('eventmousedown', function() {
                this['cancelEdit']()
            }, this)
        }
    },
    onAfterEdit: function() {
        if (!this['allowBlur']) {
            Ext['getBody']()['un']('mousedown', this['onMouseDown'], this);
            this['scheduler']['un']('eventmousedown', function() {
                this['cancelEdit']()
            }, this)
        }
    },
    onMouseDown: function(_0xecbcx2, _0xecbcx1) {
        if (this['editing'] && this['el'] && !_0xecbcx2['within'](this['el'])) {
            this['cancelEdit']()
        }
    },
    onDragCreateEnd: function(_0xecbcx3, _0xecbcx5, _0xecbcx6, _0xecbcx9, _0xecbcx2) {
        var _0xecbcx1 = _0xecbcx2['dom']['cloneNode'](true);
        _0xecbcx1['id'] = '';
        _0xecbcx2['dom']['parentNode']['appendChild'](_0xecbcx1);
        this['dragProxyEl'] = Ext['get'](_0xecbcx1);
        this['resourceRecord'] = _0xecbcx6;
        if (_0xecbcx5['get'](this['dataIndex']) === '') {
            _0xecbcx5['set'](this['dataIndex'], this['newEventText'] || this.L('newEventText'))
        };
        this['edit'](_0xecbcx5, this['dragProxyEl'])
    }
});
Ext.define('Ext.ux.Scheduler.plugin.TimeGap', {
    extend: 'Ext.ux.Scheduler.plugin.Zones',
    alias: 'plugin.scheduler_timegap',
    requires: ['Ext.data.JsonStore', 'Ext.ux.Scheduler.model.Range'],
    getZoneCls: Ext['emptyFn'],
    eventStoreListeners: null,
    init: function(_0xecbcx1) {
        this['store'] = new Ext['data'].JsonStore({
            autoDestroy: true,
            model: 'Ext.ux.Scheduler.model.Range'
        });
        this['scheduler'] = _0xecbcx1;
        this['setEventStore'](_0xecbcx1['getEventStore']());
        _0xecbcx1['on']({
            afterrender: this['populateStore'],
            eventstorechange: function(_0xecbcx2, _0xecbcx5) {
                this['setEventStore'](_0xecbcx5);
                this['populateStore']()
            },
            scope: this
        });
        this['schedulerView'] = _0xecbcx1['getSchedulingView']();
        this['callParent'](arguments)
    },
    setEventStore: function(_0xecbcx1) {
        this['eventStoreListeners'] && this['eventStoreListeners']['destroy']();
        this['eventStoreListeners'] = this['mon'](_0xecbcx1, {
            load: this['populateStore'],
            update: this['populateStore'],
            remove: this['populateStore'],
            add: this['populateStore'],
            datachanged: this['populateStore'],
            destroyable: true,
            scope: this
        })
    },
    populateStore: function(_0xecbcx5) {
        var _0xecbcx2 = this['schedulerView']['getEventsInView'](),
            _0xecbcx6 = [],
            _0xecbcx4 = this['scheduler']['getStart'](),
            _0xecbcxa = this['scheduler']['getEnd'](),
            _0xecbcx3 = _0xecbcx2['getCount'](),
            _0xecbcx8 = _0xecbcx4,
            _0xecbcx9 = 0,
            _0xecbcx7, _0xecbcx1;
        _0xecbcx2['sortBy'](function(_0xecbcx11, _0xecbcxd) {
            return _0xecbcx11['getStartDate']() - _0xecbcxd['getStartDate']()
        });
        _0xecbcx1 = _0xecbcx2['getAt'](0);
        while (_0xecbcx8 < _0xecbcxa && _0xecbcx9 < _0xecbcx3) {
            _0xecbcx7 = _0xecbcx1['getStartDate']();
            if (!Ext.ux.Scheduler['util']['Date']['betweenLesser'](_0xecbcx8, _0xecbcx7, _0xecbcx1['getEndDate']()) && _0xecbcx8 < _0xecbcx7) {
                _0xecbcx6['push'](new this['store']['model']({
                    StartDate: _0xecbcx8,
                    EndDate: _0xecbcx7,
                    Cls: this['getZoneCls'](_0xecbcx8, _0xecbcx7) || ''
                }))
            };
            _0xecbcx8 = Ext.ux.Scheduler['util']['Date']['max'](_0xecbcx1['getEndDate'](), _0xecbcx8);
            _0xecbcx9++;
            _0xecbcx1 = _0xecbcx2['getAt'](_0xecbcx9)
        };
        if (_0xecbcx8 < _0xecbcxa) {
            _0xecbcx6['push']({
                StartDate: _0xecbcx8,
                EndDate: _0xecbcxa,
                Cls: this['getZoneCls'](_0xecbcx8, _0xecbcxa) || ''
            })
        };
        this['store']['removeAll'](_0xecbcx6['length'] > 0);
        this['store']['add'](_0xecbcx6)
    }
});
Ext.define('Ext.ux.Scheduler.plugin.TreeCellEditing', {
    extend: 'Ext.grid.plugin.CellEditing',
    alias: 'plugin.scheduler_treecellediting',
    requires: ['Ext.ux.Scheduler.patches.CellEditing', 'Ext.ux.Scheduler.patches.CellEditor', 'Ext.ux.Scheduler.patches.Element_6_5'],
    lockableScope: 'locked',
    editorsStarted: 0,
    init: function() {
        this['on']('beforeedit', this['onMyBeforeEdit'], this);
        this['callParent'](arguments)
    },
    activateCell: function(_0xecbcx1) {
        var _0xecbcx2 = this['callParent'](arguments);
        if (_0xecbcx2) {
            var _0xecbcx5 = this['getEditor'](_0xecbcx1['record'], _0xecbcx1['column']);
            if (!_0xecbcx5['_cancelEdit']) {
                _0xecbcx5['_cancelEdit'] = _0xecbcx5['cancelEdit'];
                _0xecbcx5['cancelEdit'] = this['myCancelEdit']
            };
            this['fireEvent']('editingstart', this, _0xecbcx5)
        };
        return _0xecbcx2
    },
    checkReadOnly: function() {
        var _0xecbcx1 = this['getCmp']();
        if (_0xecbcx1) {
            if (!_0xecbcx1['isTimelineTreePanel'] && !_0xecbcx1['isTimelineGridPanel']) {
                _0xecbcx1 = _0xecbcx1['up']('tablepanel')
            };
            return !_0xecbcx1['isReadOnly']()
        }
    },
    onEditComplete: function(_0xecbcx2, _0xecbcx3, _0xecbcx1) {
        var _0xecbcx5 = this;
        if (_0xecbcx2['field']['applyChanges']) {
            if ((_0xecbcx3 instanceof Date && (_0xecbcx3 - _0xecbcx1)) || !(_0xecbcx3 instanceof Date) && _0xecbcx3 !== _0xecbcx1) {
                _0xecbcx2['field']['applyChanges'](_0xecbcx2['field']['task'] || _0xecbcx5['context']['record'])
            };
            return _0xecbcx5['callParent']([_0xecbcx2, _0xecbcx3, _0xecbcx3])
        } else {
            return _0xecbcx5['callParent']([_0xecbcx2, _0xecbcx3, _0xecbcx1])
        }
    },
    myCancelEdit: function() {
        var _0xecbcx2 = this,
            _0xecbcx3 = _0xecbcx2['field'];
        if (_0xecbcx3 && _0xecbcx3['applyChanges']) {
            var _0xecbcx5 = _0xecbcx3['instantUpdate'];
            _0xecbcx3['instantUpdate'] = true;
            var _0xecbcx1 = _0xecbcx2['_cancelEdit']['apply'](this, arguments);
            _0xecbcx3['instantUpdate'] = _0xecbcx5;
            return _0xecbcx1
        } else {
            return _0xecbcx2['_cancelEdit']['apply'](this, arguments)
        }
    },
    onMyBeforeEdit: function(_0xecbcx2, _0xecbcx1) {
        var _0xecbcx5 = _0xecbcx1['column']['getEditor']();
        if (_0xecbcx5 && _0xecbcx5['setTask']) {
            _0xecbcx5['setTask'](_0xecbcx1['record']);
            _0xecbcx1['_valueFromTaskField'] = _0xecbcx5['getValue']()
        };
        return this['checkReadOnly']()
    },
    setEditingContext: function(_0xecbcx1) {
        if (_0xecbcx1.hasOwnProperty('_valueFromTaskField')) {
            _0xecbcx1['value'] = _0xecbcx1['originalValue'] = _0xecbcx1['_valueFromTaskField'];
            delete _0xecbcx1['_valueFromTaskField']
        };
        this['callParent'](arguments)
    }
});
Ext.define('Ext.ux.Scheduler.preset.ViewPresetHeaderRow', {});
Ext.define('Ext.ux.Scheduler.util.Debug', {
    singleton: true,
    runDiagnostics: function() {
        var _0xecbcx3;
        var _0xecbcxd = this;
        var _0xecbcx2 = window['console'];
        if (_0xecbcx2 && _0xecbcx2['log']) {
            _0xecbcx3 = function() {
                _0xecbcx2['log']['apply'](_0xecbcx2, arguments)
            }
        } else {
            if (!_0xecbcxd['schedulerDebugWin']) {
                _0xecbcxd['schedulerDebugWin'] = new Ext.Window({
                    height: 400,
                    width: 500,
                    bodyStyle: 'padding:10px',
                    closeAction: 'hide',
                    autoScroll: true
                })
            };
            _0xecbcxd['schedulerDebugWin']['show']();
            _0xecbcxd['schedulerDebugWin']['update']('');
            _0xecbcx3 = function(_0xecbcxa) {
                _0xecbcxd['schedulerDebugWin']['update']((_0xecbcxd['schedulerDebugWin']['body']['dom']['innerHTML'] || '') + _0xecbcxa + '<br/>')
            }
        };
        var _0xecbcx4 = Ext['select']('.sch-schedulerpanel');
        if (_0xecbcx4['getCount']() === 0) {
            _0xecbcx3('No scheduler component found')
        };
        var _0xecbcxb = Ext['getCmp'](_0xecbcx4['elements'][0]['id']),
            _0xecbcxf = _0xecbcxb['getResourceStore'](),
            _0xecbcx5 = _0xecbcxb['getEventStore']();
        if (!_0xecbcx5['isEventStore']) {
            _0xecbcx3('Your event store must be or extend Ext.ux.Scheduler.data.EventStore')
        };
        _0xecbcx3('Scheduler view start: ' + _0xecbcxb['getStart']() + ', end: ' + _0xecbcxb['getEnd']());
        if (!_0xecbcxf) {
            _0xecbcx3('No store configured');
            return
        };
        if (!_0xecbcx5) {
            _0xecbcx3('No event store configured');
            return
        };
        var _0xecbcx9 = new Ext['util'].MixedCollection(),
            _0xecbcx8 = new Ext['util'].MixedCollection();
        for (var _0xecbcx6 = 0; _0xecbcx6 < _0xecbcx5['model']['prototype']['fields']['length']; _0xecbcx6++) {
            _0xecbcx9['add'](_0xecbcx5['model']['prototype']['fields'][_0xecbcx6]['name'], _0xecbcx5['model']['prototype']['fields'][_0xecbcx6])
        };
        for (_0xecbcx6 = 0; _0xecbcx6 < _0xecbcxf['model']['prototype']['fields']['length']; _0xecbcx6++) {
            _0xecbcx8['add'](_0xecbcxf['model']['prototype']['fields'][_0xecbcx6]['name'], _0xecbcxf['model']['prototype']['fields'][_0xecbcx6])
        };
        _0xecbcx3(_0xecbcxf['getCount']() + ' records in the resource store');
        _0xecbcx3(_0xecbcx5['getCount']() + ' records in the eventStore');
        var _0xecbcxc = _0xecbcx5['model']['prototype']['idProperty'];
        var _0xecbcx1 = _0xecbcxf['model']['prototype']['idProperty'];
        var _0xecbcxe = _0xecbcx9['getByKey'](_0xecbcxc);
        var _0xecbcx7 = _0xecbcx8['getByKey'](_0xecbcx1);
        if (!(new _0xecbcx5['model']() instanceof Ext.ux.Scheduler['model']['Event'])) {
            _0xecbcx3('Your event model must extend Ext.ux.Scheduler.model.Event')
        };
        if (!(new _0xecbcxf['model']() instanceof Ext.ux.Scheduler['model']['Resource'])) {
            _0xecbcx3('Your resource model must extend Ext.ux.Scheduler.model.Resource')
        };
        if (!_0xecbcxe) {
            _0xecbcx3('idProperty on the event model is incorrectly setup, value: ' + _0xecbcxc)
        };
        if (!_0xecbcx7) {
            _0xecbcx3('idProperty on the resource model is incorrectly setup, value: ' + _0xecbcx1)
        };
        var _0xecbcx11 = _0xecbcxb['getSchedulingView']();
        _0xecbcx3(_0xecbcx11['el']['select'](_0xecbcx11['eventSelector'])['getCount']() + ' events present in the DOM');
        if (_0xecbcx5['getCount']() > 0) {
            if (!_0xecbcx5['first']()['getStartDate']() || !(_0xecbcx5['first']()['getStartDate']() instanceof Date)) {
                _0xecbcx3('The eventStore reader is misconfigured - The StartDate field is not setup correctly, please investigate');
                _0xecbcx3('StartDate is configured with dateFormat: ' + _0xecbcx9['getByKey'](_0xecbcx5['model']['prototype']['startDateField'])['dateFormat']);
                _0xecbcx3('See Ext JS docs for information about different date formats: http://docs.sencha.com/extjs/#!/api/Ext.Date')
            };
            if (!_0xecbcx5['first']()['getEndDate']() || !(_0xecbcx5['first']()['getEndDate']() instanceof Date)) {
                _0xecbcx3('The eventStore reader is misconfigured - The EndDate field is not setup correctly, please investigate');
                _0xecbcx3('EndDate is configured with dateFormat: ' + _0xecbcx9['getByKey'](_0xecbcx5['model']['prototype']['endDateField'])['dateFormat']);
                _0xecbcx3('See Ext JS docs for information about different date formats: http://docs.sencha.com/extjs/#!/api/Ext.Date')
            };
            if (_0xecbcx5['proxy'] && _0xecbcx5['proxy']['reader'] && _0xecbcx5['proxy']['reader']['jsonData']) {
                _0xecbcx3('Dumping jsonData to console');
                console && console['dir'] && console['dir'](_0xecbcx5['proxy']['reader']['rawData'])
            };
            _0xecbcx3('Records in the event store:');
            _0xecbcx5['each'](function(_0xecbcx15, _0xecbcx10) {
                _0xecbcx3((_0xecbcx10 + 1) + '. ' + _0xecbcx15['startDateField'] + ':' + _0xecbcx15['getStartDate']() + ', ' + _0xecbcx15['endDateField'] + ':' + _0xecbcx15['getEndDate']() + ', ' + _0xecbcx15['resourceIdField'] + ':' + _0xecbcx15['getResourceId']());
                if (!_0xecbcx15['getStartDate']()) {
                    _0xecbcx3(_0xecbcx15['getStartDate']())
                }
            })
        } else {
            _0xecbcx3('Event store has no data. Has it been loaded properly?')
        };
        if (Ext['data']['TreeStore'] && _0xecbcxf instanceof Ext['data']['TreeStore']) {
            _0xecbcxf = _0xecbcxf['nodeStore']
        };
        if (_0xecbcxf['getCount']() > 0) {
            _0xecbcx3('Records in the resource store:');
            _0xecbcxf['each'](function(_0xecbcx15, _0xecbcx10) {
                _0xecbcx3((_0xecbcx10 + 1) + '. ' + _0xecbcx15['idProperty'] + ':' + _0xecbcx15['getId']());
                return
            })
        } else {
            _0xecbcx3('Resource store has no data.');
            return
        };
        _0xecbcx3('Everything seems to be setup ok!')
    }
});
Ext.define('Ext.ux.Scheduler.view.dependency.renderingstrategy.Async', {
    extend: 'Ext.ux.Scheduler.view.dependency.renderingstrategy.Abstract',
    alias: 'sch_dependency_rendering_strategy.async',
    config: {
        depsPerStep: 50
    },
    delegateRendering: function(_0xecbcx5, _0xecbcx2, _0xecbcx3) {
        var _0xecbcx4 = this,
            _0xecbcx6 = _0xecbcx4['getDepsPerStep'](),
            _0xecbcx1 = _0xecbcx2['slice'](0, _0xecbcx6),
            _0xecbcx9 = _0xecbcx2['slice'](_0xecbcx6);
        _0xecbcx5['getPainter']()['paint'](_0xecbcx5['getPrimaryView'](), _0xecbcx5['getDependencyCanvas'](), _0xecbcx1, false);
        return [_0xecbcx1, _0xecbcx9]
    }
});
Ext.define('Ext.ux.Scheduler.view.dependency.renderingstrategy.Bulk', {
    extend: 'Ext.ux.Scheduler.view.dependency.renderingstrategy.Abstract',
    alias: 'sch_dependency_rendering_strategy.bulk',
    delegateRendering: function(_0xecbcx2, _0xecbcx1, _0xecbcx5) {
        _0xecbcx2['getPainter']()['paint'](_0xecbcx2['getPrimaryView'](), _0xecbcx2['getDependencyCanvas'](), _0xecbcx1, false);
        return [_0xecbcx1, []]
    }
});
Ext.define('Ext.ux.Scheduler.widget.PagingToolbar', {
    extend: 'Ext.toolbar.Paging',
    alias: 'widget.sch_pagingtoolbar',
    getStoreId: function() {
        if (this['storeId']) {
            return this['storeId']
        };
        var _0xecbcx1 = this['store']['storeId'];
        if (!_0xecbcx1) {
            var _0xecbcx5 = this['store']['crudManager'];
            var _0xecbcx2 = _0xecbcx5 && _0xecbcx5['getStore'](this['store']);
            _0xecbcx1 = _0xecbcx2 && _0xecbcx2['storeId']
        };
        this['storeId'] = _0xecbcx1;
        return _0xecbcx1
    },
    loadPage: function(_0xecbcx5) {
        var _0xecbcx2 = this;
        if (_0xecbcx2['store']['crudManager']) {
            var _0xecbcx1 = _0xecbcx2['getStoreId']();
            if (_0xecbcx1) {
                var _0xecbcx3 = {};
                _0xecbcx3[_0xecbcx1] = {
                    pageSize: _0xecbcx2['store']['pageSize'],
                    page: _0xecbcx5
                };
                _0xecbcx2['store']['crudManager']['load'](_0xecbcx3)
            }
        } else {
            _0xecbcx2['store']['loadPage'](_0xecbcx5)
        }
    },
    onPagingKeyDown: function(_0xecbcx7, _0xecbcx9) {
        var _0xecbcx3 = this,
            _0xecbcx2 = _0xecbcx9['getKey'](),
            _0xecbcx5 = _0xecbcx3['getPageData'](),
            _0xecbcx1 = _0xecbcx9['shiftKey'] ? 10 : 1,
            _0xecbcx6;
        if (_0xecbcx2 == _0xecbcx9['RETURN']) {
            _0xecbcx9['stopEvent']();
            _0xecbcx6 = _0xecbcx3['readPageFromInput'](_0xecbcx5);
            if (_0xecbcx6 !== false) {
                _0xecbcx6 = Math['min'](Math['max'](1, _0xecbcx6), _0xecbcx5['pageCount']);
                if (_0xecbcx3['fireEvent']('beforechange', _0xecbcx3, _0xecbcx6) !== false) {
                    _0xecbcx3['loadPage'](_0xecbcx6)
                }
            }
        } else {
            if (_0xecbcx2 == _0xecbcx9['HOME'] || _0xecbcx2 == _0xecbcx9['END']) {
                _0xecbcx9['stopEvent']();
                _0xecbcx6 = _0xecbcx2 == _0xecbcx9['HOME'] ? 1 : _0xecbcx5['pageCount'];
                _0xecbcx7['setValue'](_0xecbcx6)
            } else {
                if (_0xecbcx2 == _0xecbcx9['UP'] || _0xecbcx2 == _0xecbcx9['PAGE_UP'] || _0xecbcx2 == _0xecbcx9['DOWN'] || _0xecbcx2 == _0xecbcx9['PAGE_DOWN']) {
                    _0xecbcx9['stopEvent']();
                    _0xecbcx6 = _0xecbcx3['readPageFromInput'](_0xecbcx5);
                    if (_0xecbcx6) {
                        if (_0xecbcx2 == _0xecbcx9['DOWN'] || _0xecbcx2 == _0xecbcx9['PAGE_DOWN']) {
                            _0xecbcx1 *= -1
                        };
                        _0xecbcx6 += _0xecbcx1;
                        if (_0xecbcx6 >= 1 && _0xecbcx6 <= _0xecbcx5['pageCount']) {
                            _0xecbcx7['setValue'](_0xecbcx6)
                        }
                    }
                }
            }
        }
    },
    moveFirst: function() {
        if (this['fireEvent']('beforechange', this, 1) !== false) {
            this['loadPage'](1)
        }
    },
    movePrevious: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['store']['currentPage'] - 1;
        if (_0xecbcx1 > 0) {
            if (_0xecbcx2['fireEvent']('beforechange', _0xecbcx2, _0xecbcx1) !== false) {
                _0xecbcx2['loadPage'](_0xecbcx1)
            }
        }
    },
    moveNext: function() {
        var _0xecbcx5 = this,
            _0xecbcx2 = _0xecbcx5['getPageData']()['pageCount'],
            _0xecbcx1 = _0xecbcx5['store']['currentPage'] + 1;
        if (_0xecbcx1 <= _0xecbcx2) {
            if (_0xecbcx5['fireEvent']('beforechange', _0xecbcx5, _0xecbcx1) !== false) {
                _0xecbcx5['loadPage'](_0xecbcx1)
            }
        }
    },
    moveLast: function() {
        var _0xecbcx2 = this,
            _0xecbcx1 = _0xecbcx2['getPageData']()['pageCount'];
        if (_0xecbcx2['fireEvent']('beforechange', _0xecbcx2, _0xecbcx1) !== false) {
            _0xecbcx2['loadPage'](_0xecbcx1)
        }
    },
    doRefresh: function() {
        var _0xecbcx1 = this,
            _0xecbcx2 = _0xecbcx1['store']['currentPage'];
        if (_0xecbcx1['fireEvent']('beforechange', _0xecbcx1, _0xecbcx2) !== false) {
            _0xecbcx1['loadPage'](_0xecbcx2)
        }
    }
});
(function() {

    Ext['data']['Connection']['override']({
        parseStatus: function(_0xecbcx6) {
            var _0xecbcx4 = this['callOverridden'](arguments);
            if (_0xecbcx6 === 0) {
                _0xecbcx4['success'] = true
            };
            return _0xecbcx4
        }
    })
})()
