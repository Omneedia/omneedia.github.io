Ext.define('Ext.ux.Scheduler.crud.AbstractManager', {
    mixins: {
        observable: Ext.util['Observable']
    },
    revision: null,
    stores: null,
    storeIdProperty: 'storeId',
    filterParam: 'filter',
    storesIndex: null,
    activeRequests: null,
    delayedSyncs: null,
    transport: null,
    trackResponseType: false,
    phantomIdField: '$PhantomId',
    autoLoad: false,
    autoSyncTimeout: 100,
    autoSync: false,
    resetIdsBeforeSync: true,
    syncApplySequence: null,
    writeAllFields: false,
    ignoreUpdates: 0,
    createMissingRecords: false,
    autoSyncTimerId: null,
    constructor: function(_0x33f5x1) {
        _0x33f5x1 = _0x33f5x1 || {};
        this['mixins']['observable']['constructor']['call'](this, _0x33f5x1);
        this['activeRequests'] = {};
        this['delayedSyncs'] = [];
        this['transport'] = _0x33f5x1['transport'] || this['transport'] || {};
        var _0x33f5x2 = _0x33f5x1['stores'] || this['stores'];
        this['stores'] = [];
        this['addStore'](_0x33f5x2);
        var _0x33f5x3 = _0x33f5x1['syncApplySequence'] || this['syncApplySequence'];
        if (_0x33f5x3) {
            this['syncApplySequence'] = null;
            this['addStoreToApplySequence'](_0x33f5x3);
        }
        if (this['autoLoad']) {
            this['load']();
        }
    },
    updateStoreIndex: function() {
        var _0x33f5x1 = {};
        for (var _0x33f5x4 = 0, _0x33f5x2 = this['stores']['length']; _0x33f5x4 < _0x33f5x2; _0x33f5x4++) {
            var _0x33f5x3 = this['stores'][_0x33f5x4];
            if (_0x33f5x3['storeId']) {
                _0x33f5x1[_0x33f5x3['storeId']] = this['stores'][_0x33f5x4];
            }
        }
        this['storesIndex'] = _0x33f5x1;
    },
    getStoreDescriptor: function(_0x33f5x1) {
        if (!_0x33f5x1) {
            return;
        }
        if (_0x33f5x1['isStore']) {
            for (var _0x33f5x3 = 0, _0x33f5x2 = this['stores']['length']; _0x33f5x3 < _0x33f5x2; _0x33f5x3++) {
                if (this['stores'][_0x33f5x3]['store'] === _0x33f5x1) {
                    return this['stores'][_0x33f5x3];
                }
            }
        } else {
            if (typeof _0x33f5x1 == 'object') {
                return this['storesIndex'][_0x33f5x1['storeId']];
            } else {
                return this['storesIndex'][_0x33f5x1] || this['getStoreDescriptor'](Ext.data['StoreManager']['get'](_0x33f5x1));
            }
        }
    },
    getStore: function(_0x33f5x2) {
        var _0x33f5x1 = this['getStoreDescriptor'](_0x33f5x2);
        return _0x33f5x1 && _0x33f5x1['store'];
    },
    forEachStore: function(_0x33f5x5, _0x33f5x4) {
        if (!_0x33f5x5) {
            return;
        }
        var _0x33f5x1 = this['stores'];
        for (var _0x33f5x3 = 0, _0x33f5x2 = _0x33f5x1['length']; _0x33f5x3 < _0x33f5x2; _0x33f5x3++) {
            if (_0x33f5x5['call'](_0x33f5x4 || this, _0x33f5x1[_0x33f5x3]['store'], _0x33f5x1[_0x33f5x3]['storeId'], _0x33f5x1[_0x33f5x3]) === false) {
                break;
            }
        }
    },
    addStore: function(_0x33f5x6, _0x33f5x7, _0x33f5x2) {
        if (!_0x33f5x6) {
            return;
        }
        if (!Ext.isArray(_0x33f5x6)) {
            _0x33f5x6 = [ _0x33f5x6 ];
        }
        var _0x33f5x8 = [];
        for (var _0x33f5x9 = 0, _0x33f5x3 = _0x33f5x6['length']; _0x33f5x9 < _0x33f5x3; _0x33f5x9++) {
            var _0x33f5xa = _0x33f5x6[_0x33f5x9];
            if (_0x33f5xa['isStore']) {
                _0x33f5xa = {
                    store: _0x33f5xa
                };
            } else {
                if (typeof _0x33f5xa == 'object') {
                    if (_0x33f5xa['stores']) {
                        if (!Ext.isArray(_0x33f5xa['stores'])) {
                            _0x33f5xa['stores'] = [ _0x33f5xa['stores'] ];
                        }
                        for (var _0x33f5x4 = 0, _0x33f5x1 = _0x33f5xa['stores']['length']; _0x33f5x4 < _0x33f5x1; _0x33f5x4++) {
                            var _0x33f5xb = _0x33f5xa['stores'][_0x33f5x4], _0x33f5x5 = _0x33f5xb;
                            if ('string' === typeof _0x33f5xb) {
                                _0x33f5x5 = {
                                    storeId: _0x33f5xb
                                };
                            }
                            _0x33f5x5['masterStoreInfo'] = _0x33f5xa;
                            _0x33f5xa['stores'][_0x33f5x4] = _0x33f5x5;
                        }
                    }
                } else {
                    _0x33f5xa = {
                        store: Ext.data['StoreManager']['get'](_0x33f5xa)
                    };
                }
            }
            _0x33f5x8['push'](this['fillStoreDescriptor'](_0x33f5xa));
            _0x33f5xa['store']['crudManager'] = this;
            if (_0x33f5xa['store']['isTreeStore']) {
                _0x33f5xa['store']['setProxy']({
                    type: 'memory'
                });
            }
            this['bindStoreListeners'](_0x33f5xa['store']);
        }
        if (typeof _0x33f5x7 === 'undefined') {
            this['stores']['push']['apply'](this['stores'], _0x33f5x8);
        } else {
            var _0x33f5xc = _0x33f5x7;
            if (_0x33f5x2) {
                if (_0x33f5x2['isStore'] || typeof _0x33f5x2 !== 'object') {
                    _0x33f5x2 = this['getStoreDescriptor'](_0x33f5x2);
                }
                _0x33f5xc += Ext.Array.indexOf(this['stores'], _0x33f5x2);
            }
            this['stores']['splice']['apply'](this['stores'], []['concat']([ _0x33f5xc, 0 ], _0x33f5x8));
        }
        this['updateStoreIndex']();
    },
    bindStoreListeners: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = {
            update: this['onStoreUpdate'],
            clear: this['onStoreChange'],
            scope: this
        };
        if (_0x33f5x1['isTreeStore']) {
            Ext.apply(_0x33f5x3, {
                nodeappend: this['onStoreChange'],
                nodeinsert: this['onStoreChange'],
                noderemove: this['onNodeRemove']
            });
        } else {
            Ext.apply(_0x33f5x3, {
                add: this['onStoreChange'],
                remove: this['onStoreChange']
            });
        }
        if (_0x33f5x2) {
            this['mun'](_0x33f5x1, _0x33f5x3);
        } else {
            this['mon'](_0x33f5x1, _0x33f5x3);
        }
    },
    unbindStoreListeners: function(_0x33f5x2) {
        this['bindStoreListeners'](_0x33f5x2, true);
    },
    fillStoreDescriptor: function(_0x33f5x4) {
        var _0x33f5x2 = _0x33f5x4['store'], _0x33f5x3 = _0x33f5x2['storeIdProperty'] || this['storeIdProperty'], _0x33f5x1 = _0x33f5x2['getModel'] && _0x33f5x2['getModel']() || _0x33f5x2['model'];
        _0x33f5x1 = _0x33f5x1 && _0x33f5x1['prototype'];
        Ext.applyIf(_0x33f5x4, {
            storeId: _0x33f5x2[_0x33f5x3],
            phantomIdField: _0x33f5x1 && _0x33f5x1['phantomIdField'],
            idProperty: _0x33f5x1 && _0x33f5x1['idProperty'],
            writeAllFields: _0x33f5x2['writeAllFields']
        });
        return _0x33f5x4;
    },
    removeStore: function(_0x33f5x1) {
        for (var _0x33f5x3 = 0, _0x33f5x2 = this['stores']['length']; _0x33f5x3 < _0x33f5x2; _0x33f5x3++) {
            var _0x33f5x4 = this['stores'][_0x33f5x3];
            if (_0x33f5x4 === _0x33f5x1 || _0x33f5x4['store'] === _0x33f5x1 || _0x33f5x4['storeId'] === _0x33f5x1) {
                this['unbindStoreListeners'](_0x33f5x4['store']);
                delete this['storesIndex'][_0x33f5x4['storeId']];
                this['stores']['splice'](_0x33f5x3, 1);
                if (this['syncApplySequence']) {
                    this['removeStoreFromApplySequence'](_0x33f5x1);
                }
                break;
            }
        }
    },
    addStoreToApplySequence: function(_0x33f5x3, _0x33f5x2, _0x33f5x5) {
        if (!_0x33f5x3) {
            return;
        }
        if (!Ext.isArray(_0x33f5x3)) {
            _0x33f5x3 = [ _0x33f5x3 ];
        }
        var _0x33f5x9 = [];
        for (var _0x33f5x4 = 0, _0x33f5x1 = _0x33f5x3['length']; _0x33f5x4 < _0x33f5x1; _0x33f5x4++) {
            var _0x33f5x8 = this['getStoreDescriptor'](_0x33f5x3[_0x33f5x4]);
            if (_0x33f5x8) {
                _0x33f5x9['push'](_0x33f5x8);
            }
        }
        if (!this['syncApplySequence']) {
            this['syncApplySequence'] = [];
        }
        if (typeof _0x33f5x2 === 'undefined') {
            this['syncApplySequence']['push']['apply'](this['syncApplySequence'], _0x33f5x9);
        } else {
            var _0x33f5x7 = _0x33f5x2;
            if (_0x33f5x5) {
                if (_0x33f5x5['isStore'] || typeof _0x33f5x5 !== 'object') {
                    _0x33f5x5 = this['getStoreDescriptor'](_0x33f5x5);
                }
                _0x33f5x7 += Ext.Array.indexOf(this['syncApplySequence'], _0x33f5x5);
            }
            this['syncApplySequence']['splice']['apply'](this['syncApplySequence'], []['concat']([ _0x33f5x7, 0 ], _0x33f5x9));
        }
    },
    removeStoreFromApplySequence: function(_0x33f5x1) {
        for (var _0x33f5x3 = 0, _0x33f5x2 = this['syncApplySequence']['length']; _0x33f5x3 < _0x33f5x2; _0x33f5x3++) {
            var _0x33f5x4 = this['syncApplySequence'][_0x33f5x3];
            if (_0x33f5x4 === _0x33f5x1 || _0x33f5x4['store'] === _0x33f5x1 || _0x33f5x4['storeId'] === _0x33f5x1) {
                this['syncApplySequence']['splice'](_0x33f5x3, 1);
                break;
            }
        }
    },
    onNodeRemove: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x3 = _0x33f5x2 && _0x33f5x2['getTreeStore']();
        _0x33f5x3 && _0x33f5x3['on']('endupdate', this['onStoreChange'], this, {
            single: true
        });
    },
    onStoreUpdate: function(_0x33f5x5, _0x33f5x3, _0x33f5x4, _0x33f5x1) {
        if (!_0x33f5x5['isTreeStore'] || _0x33f5x3 !== _0x33f5x5['getRoot']()) {
            var _0x33f5x2 = _0x33f5x1 && _0x33f5x1['length'] === 1 && _0x33f5x3['getField'](_0x33f5x1[0]) && !_0x33f5x3['getField'](_0x33f5x1[0])['persist'];
            if (!_0x33f5x2) {
                this['onStoreChange']();
            }
        }
    },
    onStoreChange: function() {
        if (this['ignoreUpdates']) {
            return;
        }
        var _0x33f5x2 = this;
        this['fireEvent'](this['hasChanges']() ? 'haschanges' : 'nochanges', this);
        if (this['autoSync']) {
            if (!this['autoSyncTimerId']) {
                this['autoSyncTimerId'] = setTimeout(function() {
                    _0x33f5x2['autoSyncTimerId'] = null;
                    _0x33f5x2['sync']();
                }, this['autoSyncTimeout']);
            }
        }
    },
    hasChanges: function(_0x33f5x1) {
        var _0x33f5x3;
        if (_0x33f5x1) {
            _0x33f5x3 = this['getStore'](_0x33f5x1);
            if (!_0x33f5x3) {
                return false;
            }
            return this['isStoreDirty'](_0x33f5x3);
        }
        for (var _0x33f5x4 = 0, _0x33f5x2 = this['stores']['length']; _0x33f5x4 < _0x33f5x2; _0x33f5x4++) {
            if (this['isStoreDirty'](this['stores'][_0x33f5x4]['store'])) {
                return true;
            }
        }
        return false;
    },
    isStoreDirty: function(_0x33f5x4) {
        if (_0x33f5x4['getRemovedRecords']()['length']) {
            return true;
        }
        if (_0x33f5x4['isTreeStore']) {
            for (var _0x33f5x8 in _0x33f5x4['byIdMap']) {
                var _0x33f5x1 = _0x33f5x4['byIdMap'][_0x33f5x8];
                if (_0x33f5x1['dirty'] === true && (!_0x33f5x1['get']('root') || Ext['Object']['getKeys'](_0x33f5x1['modified'])['length'] !== 1 || !('expanded' in _0x33f5x1['modified']))) {
                    return true;
                } else {
                    if (!_0x33f5x1['get']('root') && _0x33f5x1['phantom'] && _0x33f5x1['isValid']()) {
                        return true;
                    }
                }
            }
        } else {
            var _0x33f5x3 = _0x33f5x4['getData']()['items'];
            for (var _0x33f5x5 = 0, _0x33f5x2 = _0x33f5x3['length']; _0x33f5x5 < _0x33f5x2; _0x33f5x5++) {
                if (_0x33f5x3[_0x33f5x5]['dirty'] || _0x33f5x3[_0x33f5x5]['phantom']) {
                    return true;
                }
            }
        }
        return false;
    },
    getLoadPackage: function(_0x33f5xd) {
        var _0x33f5xe = {
            type: 'load',
            requestId: this['getRequestId'](),
            stores: []
        };
        var _0x33f5xc = this['stores'], _0x33f5x4 = _0x33f5xe['stores'];
        for (var _0x33f5x9 = 0, _0x33f5x5 = _0x33f5xc['length']; _0x33f5x9 < _0x33f5x5; _0x33f5x9++) {
            var _0x33f5xb = _0x33f5xc[_0x33f5x9], _0x33f5x1 = _0x33f5xb['filterParam'] || _0x33f5xb['store']['filterParam'] || this['filterParam'], _0x33f5x2 = _0x33f5xd && _0x33f5xd[_0x33f5xb['storeId']], _0x33f5x7 = _0x33f5xb['pageSize'] || _0x33f5xb['store']['pageSize'];
            if (_0x33f5xb['store']['remoteFilter'] && _0x33f5x1) {
                _0x33f5x2 = _0x33f5x2 || {};
                var _0x33f5x3 = [];
                _0x33f5xb['store']['getFilters']()['each'](function(_0x33f5xf) {
                    _0x33f5x3['push'](_0x33f5xf['serialize']());
                });
                _0x33f5x2[_0x33f5x1] = _0x33f5x3;
            }
            if (_0x33f5x2 || _0x33f5x7) {
                var _0x33f5x8 = Ext.apply({
                    storeId: _0x33f5xb['storeId'],
                    page: 1,
                    pageSize: _0x33f5x7
                }, _0x33f5x2);
                _0x33f5xc[_0x33f5x9]['currentPage'] = _0x33f5x8['page'];
                _0x33f5x4['push'](_0x33f5x8);
            } else {
                _0x33f5x4['push'](_0x33f5xb['storeId']);
            }
        }
        return _0x33f5xe;
    },
    prepareAdded: function(_0x33f5x7, _0x33f5xc, _0x33f5xb) {
        var _0x33f5xa = [];
        for (var _0x33f5x3 = 0, _0x33f5x2 = _0x33f5x7['length']; _0x33f5x3 < _0x33f5x2; _0x33f5x3++) {
            var _0x33f5x4 = _0x33f5x7[_0x33f5x3], _0x33f5x1 = {}, _0x33f5x5 = _0x33f5x4['getFields']();
            if (!_0x33f5x1['hasOwnProperty'](_0x33f5xc)) {
                _0x33f5x1[_0x33f5xc] = _0x33f5x4['getId']();
            }
            for (var _0x33f5x9 = 0, _0x33f5xd = _0x33f5x5['length']; _0x33f5x9 < _0x33f5xd; _0x33f5x9++) {
                var _0x33f5xe = _0x33f5x5[_0x33f5x9];
                if (_0x33f5xe) {
                    if (_0x33f5xe['persist'] && (_0x33f5x4['data']['hasOwnProperty'](_0x33f5xe['name']) || _0x33f5xe['critical'])) {
                        if (_0x33f5xe['serialize']) {
                            _0x33f5x1[_0x33f5xe['name']] = _0x33f5xe['serialize'](_0x33f5x4['data'][_0x33f5xe['name']], _0x33f5x4);
                        } else {
                            _0x33f5x1[_0x33f5xe['name']] = _0x33f5x4['data'][_0x33f5xe['name']];
                        }
                    }
                }
            }
            if (this['resetIdsBeforeSync']) {
                delete _0x33f5x1[_0x33f5x4['idProperty']];
            }
            if (_0x33f5xb) {
                this['processSubStores'](_0x33f5x4, _0x33f5x1, _0x33f5xb);
            }
            _0x33f5xa['push'](_0x33f5x1);
        }
        return _0x33f5xa;
    },
    prepareUpdated: function(_0x33f5xc, _0x33f5x6, _0x33f5xa) {
        var _0x33f5x10 = [], _0x33f5x1 = _0x33f5xa['writeAllFields'] || _0x33f5xa['writeAllFields'] !== false && this['writeAllFields'], _0x33f5x5, _0x33f5xd;
        for (var _0x33f5x9 = 0, _0x33f5x3 = _0x33f5xc['length']; _0x33f5x9 < _0x33f5x3; _0x33f5x9++) {
            var _0x33f5x7 = _0x33f5xc[_0x33f5x9], _0x33f5xb;
            if (_0x33f5x1) {
                _0x33f5x5 = _0x33f5x7['getData']();
                _0x33f5x5[_0x33f5x7['idProperty']] = _0x33f5x7['getId']();
                for (_0x33f5xb in _0x33f5x5) {
                    _0x33f5xd = _0x33f5x7['getField'](_0x33f5xb);
                    if (!_0x33f5xd || !_0x33f5xd['persist'] && !_0x33f5xd['critical']) {
                        delete _0x33f5x5[_0x33f5xb];
                    } else {
                        if (_0x33f5xd['serialize']) {
                            _0x33f5x5[_0x33f5xb] = _0x33f5xd['serialize'](_0x33f5x5[_0x33f5xb], _0x33f5x7);
                        } else {
                            _0x33f5x5[_0x33f5xb] = _0x33f5x7['get'](_0x33f5xb);
                        }
                    }
                }
            } else {
                _0x33f5x5 = _0x33f5x7['getChanges']();
                _0x33f5x5[_0x33f5x7['idProperty']] = _0x33f5x7['getId']();
                for (_0x33f5xb in _0x33f5x5) {
                    _0x33f5xd = _0x33f5x7['getField'](_0x33f5xb);
                    if (!_0x33f5xd || !_0x33f5xd['persist']) {
                        delete _0x33f5x5[_0x33f5xb];
                    } else {
                        if (_0x33f5xd['serialize']) {
                            _0x33f5x5[_0x33f5xb] = _0x33f5xd['serialize'](_0x33f5x5[_0x33f5xb], _0x33f5x7);
                        } else {
                            _0x33f5x5[_0x33f5xb] = _0x33f5x7['get'](_0x33f5xb);
                        }
                    }
                }
                var _0x33f5x2 = _0x33f5x7['getCriticalFields']();
                for (var _0x33f5x4 = 0; _0x33f5x4 < _0x33f5x2['length']; _0x33f5x4++) {
                    _0x33f5xd = _0x33f5x2[_0x33f5x4];
                    if (_0x33f5xd['serialize']) {
                        _0x33f5x5[_0x33f5xd['getName']()] = _0x33f5xd['serialize'](_0x33f5x7['get'](_0x33f5xd['getName']()), _0x33f5x7);
                    } else {
                        _0x33f5x5[_0x33f5xd['getName']()] = _0x33f5x7['get'](_0x33f5xd['getName']());
                    }
                }
            }
            if (_0x33f5x6) {
                this['processSubStores'](_0x33f5x7, _0x33f5x5, _0x33f5x6);
            }
            _0x33f5x10['push'](_0x33f5x5);
        }
        return _0x33f5x10;
    },
    prepareRemoved: function(_0x33f5x5) {
        var _0x33f5x2 = [], _0x33f5x4;
        for (var _0x33f5x3 = 0, _0x33f5x1 = _0x33f5x5['length']; _0x33f5x3 < _0x33f5x1; _0x33f5x3++) {
            _0x33f5x4 = {};
            _0x33f5x4[_0x33f5x5[_0x33f5x3]['idProperty']] = _0x33f5x5[_0x33f5x3]['getId']();
            _0x33f5x2['push'](_0x33f5x4);
        }
        return _0x33f5x2;
    },
    processSubStores: function(_0x33f5x1, _0x33f5x8, _0x33f5x2) {
        for (var _0x33f5x4 = 0, _0x33f5x7 = _0x33f5x2['length']; _0x33f5x4 < _0x33f5x7; _0x33f5x4++) {
            var _0x33f5x9 = _0x33f5x2[_0x33f5x4]['storeId'], _0x33f5x3 = _0x33f5x1['get'](_0x33f5x9);
            if (_0x33f5x3) {
                var _0x33f5x5 = this['getStoreChanges'](Ext.apply({
                    store: _0x33f5x3
                }, _0x33f5x2[_0x33f5x4]));
                if (_0x33f5x5) {
                    _0x33f5x8[_0x33f5x9] = Ext.apply(_0x33f5x5, {
                        $store: true
                    });
                } else {
                    delete _0x33f5x8[_0x33f5x9];
                }
            } else {
                delete _0x33f5x8[_0x33f5x9];
            }
        }
    },
    getStoreChanges: function(_0x33f5x4, _0x33f5x9) {
        _0x33f5x9 = _0x33f5x9 || _0x33f5x4['phantomIdField'] || this['phantomIdField'];
        var _0x33f5x8 = _0x33f5x4['store'], _0x33f5x5 = _0x33f5x8['getNewRecords'](), _0x33f5x3 = _0x33f5x8['getUpdatedRecords'](), _0x33f5x7 = _0x33f5x8['getRemovedRecords'](), _0x33f5x1 = _0x33f5x4['stores'];
        var _0x33f5x2;
        if (_0x33f5x5['length']) {
            _0x33f5x5 = this['prepareAdded'](_0x33f5x5, _0x33f5x9, _0x33f5x1);
        }
        if (_0x33f5x3['length']) {
            _0x33f5x3 = this['prepareUpdated'](_0x33f5x3, _0x33f5x1, _0x33f5x4);
        }
        if (_0x33f5x7['length']) {
            _0x33f5x7 = this['prepareRemoved'](_0x33f5x7);
        }
        if (_0x33f5x5['length'] || _0x33f5x3['length'] || _0x33f5x7['length']) {
            _0x33f5x2 = {};
            if (_0x33f5x5['length']) {
                _0x33f5x2['added'] = _0x33f5x5;
            }
            if (_0x33f5x3['length']) {
                _0x33f5x2['updated'] = _0x33f5x3;
            }
            if (_0x33f5x7['length']) {
                _0x33f5x2['removed'] = _0x33f5x7;
            }
        }
        return _0x33f5x2;
    },
    getChangeSetPackage: function() {
        var _0x33f5x4 = {
            type: 'sync',
            requestId: this['getRequestId'](),
            revision: this['revision']
        };
        var _0x33f5x8 = this['stores'], _0x33f5xe = 0;
        for (var _0x33f5x1 = 0, _0x33f5x2 = _0x33f5x8['length']; _0x33f5x1 < _0x33f5x2; _0x33f5x1++) {
            var _0x33f5x5 = _0x33f5x8[_0x33f5x1], _0x33f5x9 = _0x33f5x5['phantomIdField'] || this['phantomIdField'], _0x33f5x7 = _0x33f5x5['storeId'];
            var _0x33f5x3 = this['getStoreChanges'](_0x33f5x5, _0x33f5x9);
            if (_0x33f5x3) {
                _0x33f5xe++;
                _0x33f5x4[_0x33f5x7] = _0x33f5x3;
            }
        }
        return _0x33f5xe ? _0x33f5x4 : null;
    },
    getSubStoresData: function(_0x33f5x7, _0x33f5x8, _0x33f5x9, _0x33f5x5) {
        if (!_0x33f5x7) {
            return;
        }
        var _0x33f5xe = [];
        var _0x33f5x2 = function(_0x33f5xd, _0x33f5xa) {
            for (var _0x33f5x11 = 0, _0x33f5xf = _0x33f5xa['length']; _0x33f5x11 < _0x33f5xf; _0x33f5x11++) {
                var _0x33f5xb = _0x33f5xa[_0x33f5x11]['storeId'];
                if (_0x33f5xd[_0x33f5xb]) {
                    _0x33f5xe['push']({
                        id: _0x33f5xd[_0x33f5x9],
                        storeDesc: _0x33f5xa[_0x33f5x11],
                        data: _0x33f5xd[_0x33f5xb]
                    });
                    delete _0x33f5xd[_0x33f5xb];
                }
            }
        };
        var _0x33f5x4 = 0, _0x33f5x3 = _0x33f5x7['length'];
        if (_0x33f5x5) {
            for (;_0x33f5x4 < _0x33f5x3; _0x33f5x4++) {
                _0x33f5x2(_0x33f5x7[_0x33f5x4], _0x33f5x8);
                var _0x33f5x1 = this['getSubStoresData'](_0x33f5x7[_0x33f5x4]['children'], _0x33f5x8, _0x33f5x9, true);
                if (_0x33f5x1) {
                    _0x33f5xe = _0x33f5xe['concat'](_0x33f5x1);
                }
            }
        } else {
            for (;_0x33f5x4 < _0x33f5x3; _0x33f5x4++) {
                _0x33f5x2(_0x33f5x7[_0x33f5x4], _0x33f5x8);
            }
        }
        return _0x33f5xe;
    },
    loadDataToTreeStore: function(_0x33f5x2, _0x33f5x4, _0x33f5x1, _0x33f5x5) {
        var _0x33f5x3 = _0x33f5x4 && _0x33f5x4['rows'];
        _0x33f5x2['proxy']['data'] = _0x33f5x3;
        _0x33f5x2['load']();
    },
    loadDataToFlatStore: function(_0x33f5x1, _0x33f5x5, _0x33f5x3, _0x33f5x8) {
        var _0x33f5x4 = _0x33f5x5 && _0x33f5x5['rows'];
        _0x33f5x1['totalCount'] = _0x33f5x5['total'];
        _0x33f5x1['currentPage'] = _0x33f5x8['currentPage'];
        var _0x33f5x2 = Ext.Array.map(_0x33f5x4, function(_0x33f5x9) {
            return new _0x33f5x1['model'](_0x33f5x9);
        });
        _0x33f5x1['loadData'](_0x33f5x2, _0x33f5x3 && _0x33f5x3['append'] || _0x33f5x5['append']);
        _0x33f5x1['fireEvent']('load', _0x33f5x1, _0x33f5x2, true);
    },
    loadDataToStore: function(_0x33f5x2, _0x33f5x5, _0x33f5x6) {
        var _0x33f5xb = _0x33f5x2['store'], _0x33f5x8 = _0x33f5xb['getModel'](), _0x33f5xc = _0x33f5x2['stores'], _0x33f5xd = _0x33f5x2['idProperty'] || _0x33f5x8 && _0x33f5x8['prototype'] && _0x33f5x8['prototype']['idProperty'] || 'id', _0x33f5x7 = _0x33f5xb['isTreeStore'], _0x33f5xe;
        var _0x33f5xa = _0x33f5x5 && _0x33f5x5['rows'];
        _0x33f5xb['metaData'] = _0x33f5x5 && _0x33f5x5['metaData'];
        if (_0x33f5xa) {
            if (_0x33f5xc) {
                _0x33f5xe = this['getSubStoresData'](_0x33f5xa, _0x33f5xc, _0x33f5xd, _0x33f5x7);
            }
            _0x33f5xb['__loading'] = true;
            var _0x33f5x3 = _0x33f5x7 ? this['loadDataToTreeStore'] : this['loadDataToFlatStore'];
            _0x33f5x3['call'](this, _0x33f5xb, _0x33f5x5, _0x33f5x6, _0x33f5x2);
            if (_0x33f5xe) {
                for (var _0x33f5x4 = 0, _0x33f5x1 = _0x33f5xe['length']; _0x33f5x4 < _0x33f5x1; _0x33f5x4++) {
                    var _0x33f5x9 = _0x33f5xe[_0x33f5x4];
                    this['loadDataToStore'](Ext.apply({
                        store: _0x33f5xb[_0x33f5x7 ? 'getNodeById' : 'getById'](_0x33f5x9['id'])['get'](_0x33f5x9['storeDesc']['storeId'])
                    }, _0x33f5x9['storeDesc']), _0x33f5x9['data']);
                }
            }
            _0x33f5xb['__loading'] = false;
        }
    },
    loadData: function(_0x33f5x3, _0x33f5x4) {
        _0x33f5x4 = _0x33f5x4 || {};
        this['ignoreUpdates']++;
        for (var _0x33f5x5 = 0, _0x33f5x1 = this['stores']['length']; _0x33f5x5 < _0x33f5x1; _0x33f5x5++) {
            var _0x33f5x9 = this['stores'][_0x33f5x5], _0x33f5x2 = _0x33f5x9['storeId'], _0x33f5x8 = _0x33f5x3[_0x33f5x2];
            if (_0x33f5x8) {
                this['loadDataToStore'](_0x33f5x9, _0x33f5x8, _0x33f5x4[_0x33f5x2]);
            }
        }
        this['ignoreUpdates']--;
    },
    applyChangesToRecord: function(_0x33f5x9, _0x33f5xf, _0x33f5xa, _0x33f5xc) {
        var _0x33f5x8 = _0x33f5x9['data'], _0x33f5x5 = {}, _0x33f5x3 = false, _0x33f5x2;
        if (_0x33f5xa) {
            for (var _0x33f5x4 = 0, _0x33f5x1 = _0x33f5xa['length']; _0x33f5x4 < _0x33f5x1; _0x33f5x4++) {
                _0x33f5x2 = _0x33f5xa[_0x33f5x4]['storeId'];
                if (_0x33f5xf['hasOwnProperty'](_0x33f5x2)) {
                    _0x33f5x5[_0x33f5x2] = true;
                    var _0x33f5x7 = _0x33f5x9['get'](_0x33f5x2);
                    if (_0x33f5x7) {
                        this['applyChangesToStore'](Ext.apply({
                            store: _0x33f5x7
                        }, _0x33f5xa[_0x33f5x4]), _0x33f5xf[_0x33f5x2]);
                    } else {
                        Ext['log']('Can\'t find store for the response sub-package');
                    }
                }
            }
        }
        for (_0x33f5x2 in _0x33f5xf) {
            if (_0x33f5xf['hasOwnProperty'](_0x33f5x2) && !_0x33f5x5[_0x33f5x2]) {
                var _0x33f5x11 = _0x33f5xf[_0x33f5x2];
                if (!_0x33f5x9['isEqual'](_0x33f5x8[_0x33f5x2], _0x33f5x11)) {
                    if (!_0x33f5x3) {
                        _0x33f5x3 = true;
                        _0x33f5x9['beginEdit']();
                    }
                    if (_0x33f5x2 === _0x33f5x9['idProperty']) {
                        _0x33f5x9['setId'](_0x33f5x11);
                    } else {
                        if (_0x33f5x2 == 'parentId' && _0x33f5xc['isTreeStore']) {
                            var _0x33f5xb = _0x33f5x11 && _0x33f5xc['getNodeById'](_0x33f5x11) || _0x33f5xc['getRoot']();
                            _0x33f5xb['appendChild'](_0x33f5x9);
                        } else {
                            _0x33f5x9['set'](_0x33f5x2, _0x33f5x11);
                        }
                    }
                }
            }
        }
        this['ignoreUpdates']++;
        if (_0x33f5x3) {
            _0x33f5x9['endEdit']();
        }
        this['ignoreUpdates']--;
        _0x33f5x9['commit']();
    },
    applyRemovals: function(_0x33f5xa, _0x33f5xc, _0x33f5x4) {
        var _0x33f5x6 = _0x33f5x4['idProperty'], _0x33f5xd = _0x33f5xa['isTreeStore'] ? _0x33f5xa['removedNodes'] : _0x33f5xa['removed'], _0x33f5x10 = _0x33f5x4['findByIdFn'], _0x33f5x2 = _0x33f5x4['removeRecordFn'], _0x33f5x7 = 0;
        for (var _0x33f5x9 = 0, _0x33f5x5 = _0x33f5xc['length']; _0x33f5x9 < _0x33f5x5; _0x33f5x9++) {
            var _0x33f5x8 = false;
            var _0x33f5x3 = _0x33f5xc[_0x33f5x9][_0x33f5x6];
            for (var _0x33f5x11 = 0, _0x33f5x1 = _0x33f5xd['length']; _0x33f5x11 < _0x33f5x1; _0x33f5x11++) {
                if (_0x33f5xd[_0x33f5x11]['getId']() == _0x33f5x3) {
                    _0x33f5xd['splice'](_0x33f5x11, 1);
                    _0x33f5x8 = true;
                    _0x33f5x7++;
                    break;
                }
            }
            if (!_0x33f5x8) {
                var _0x33f5xf = _0x33f5x10(_0x33f5x3);
                if (_0x33f5xf) {
                    this['ignoreUpdates']++;
                    _0x33f5x2(_0x33f5xf);
                    Ext.Array['remove'](_0x33f5xd, _0x33f5xf);
                    _0x33f5x7++;
                    this['ignoreUpdates']--;
                } else {
                    Ext['log']('Can\'t find record to remove from the response package');
                }
            }
        }
        return _0x33f5x7;
    },
    getApplyChangesToStoreHelpers: function(_0x33f5x2) {
        if (_0x33f5x2['isTreeStore']) {
            var _0x33f5x1 = function(_0x33f5x3) {
                return _0x33f5x2['getNodeById'](_0x33f5x3);
            };
            return {
                findByPhantomFn: _0x33f5x1,
                findByIdFn: _0x33f5x1,
                addRecordFn: function(_0x33f5x4) {
                    var _0x33f5x3 = _0x33f5x4['parentId'] && _0x33f5x2['getNodeById'](_0x33f5x4['parentId']) || _0x33f5x2['getRoot']();
                    return _0x33f5x3['appendChild'](_0x33f5x4);
                },
                removeRecordFn: function(_0x33f5x3) {
                    return _0x33f5x3['parentNode']['removeChild'](_0x33f5x3);
                }
            };
        } else {
            return {
                findByPhantomFn: function(_0x33f5x3) {
                    return _0x33f5x2['data']['getByKey'](_0x33f5x3);
                },
                findByIdFn: function(_0x33f5x3) {
                    return _0x33f5x2['getById'](_0x33f5x3);
                },
                addRecordFn: function(_0x33f5x3) {
                    return _0x33f5x2['add'](_0x33f5x3)[0];
                },
                removeRecordFn: function(_0x33f5x3) {
                    return _0x33f5x2['remove'](_0x33f5x3);
                }
            };
        }
    },
    applyChangesToStore: function(_0x33f5x11, _0x33f5x12) {
        var _0x33f5x13 = this, _0x33f5x1 = _0x33f5x11['phantomIdField'] || _0x33f5x13['phantomIdField'], _0x33f5x7 = _0x33f5x11['idProperty'], _0x33f5x9 = _0x33f5x11['store'];
        if (!_0x33f5x7) {
            var _0x33f5x5 = _0x33f5x9['getModel'] && _0x33f5x9['getModel']() || _0x33f5x9['model'];
            _0x33f5x5 = _0x33f5x5 && _0x33f5x5['prototype'];
            _0x33f5x7 = _0x33f5x5 && _0x33f5x5['idProperty'] || 'id';
        }
        var _0x33f5x6 = _0x33f5x13['getApplyChangesToStoreHelpers'](_0x33f5x9), _0x33f5xd = _0x33f5x6['findByPhantomFn'], _0x33f5xc = _0x33f5x6['findByIdFn'], _0x33f5x2 = _0x33f5x6['addRecordFn'], _0x33f5x14 = _0x33f5x6['removeRecordFn'];
        var _0x33f5xf = _0x33f5x12['rows'], _0x33f5x15 = _0x33f5x12['removed'], _0x33f5x3;
        if (_0x33f5xf) {
            var _0x33f5x16, _0x33f5xa, _0x33f5x4, _0x33f5x8 = _0x33f5x11['stores'];
            for (var _0x33f5x17 = 0, _0x33f5x10 = _0x33f5xf['length']; _0x33f5x17 < _0x33f5x10; _0x33f5x17++) {
                _0x33f5x16 = _0x33f5xf[_0x33f5x17];
                _0x33f5x4 = _0x33f5x16[_0x33f5x1];
                _0x33f5xa = _0x33f5x16[_0x33f5x7];
                _0x33f5x3 = null;
                if (_0x33f5x4 != null) {
                    _0x33f5x3 = _0x33f5xd(_0x33f5x4);
                } else {
                    if (_0x33f5x7) {
                        _0x33f5x3 = _0x33f5xc(_0x33f5xa);
                    }
                }
                if (_0x33f5x3) {
                    _0x33f5x13['applyChangesToRecord'](_0x33f5x3, _0x33f5x16, _0x33f5x8, _0x33f5x9);
                } else {
                    _0x33f5x13['ignoreUpdates']++;
                    _0x33f5x3 = _0x33f5x2(_0x33f5x16);
                    _0x33f5x13['ignoreUpdates']--;
                    _0x33f5x3['commit']();
                }
            }
        }
        if (_0x33f5x15 && _0x33f5x13['applyRemovals'](_0x33f5x9, _0x33f5x15, {
            idProperty: _0x33f5x7,
            findByIdFn: _0x33f5xc,
            removeRecordFn: _0x33f5x14
        })) {
            _0x33f5x9['fireEvent']('datachanged', _0x33f5x9);
        }
    },
    applySyncResponse: function(_0x33f5x3) {
        var _0x33f5x1 = this['syncApplySequence'] || this['stores'];
        for (var _0x33f5x4 = 0, _0x33f5x2 = _0x33f5x1['length']; _0x33f5x4 < _0x33f5x2; _0x33f5x4++) {
            var _0x33f5x5 = _0x33f5x3[_0x33f5x1[_0x33f5x4]['storeId']];
            if (_0x33f5x5) {
                this['applyChangesToStore'](_0x33f5x1[_0x33f5x4], _0x33f5x5);
            }
        }
    },
    applyLoadResponse: function(_0x33f5x2, _0x33f5x1) {
        this['loadData'](_0x33f5x2, _0x33f5x1);
    },
    applyResponse: function(_0x33f5x2, _0x33f5x1, _0x33f5x3) {
        if (this['trackResponseType']) {
            _0x33f5x2 = _0x33f5x1['type'] || _0x33f5x2;
        }
        switch (_0x33f5x2) {
          case 'load':
            this['applyLoadResponse'](_0x33f5x1, _0x33f5x3);
            break;

          case 'sync':
            this['applySyncResponse'](_0x33f5x1);
            break;
        }
    },
    getRequestId: function() {
        return Ext.Date['now']();
    },
    onResponse: function(_0x33f5x2, _0x33f5x4, _0x33f5x5, _0x33f5x3) {
        this['activeRequests'][_0x33f5x2] = null;
        var _0x33f5x1 = this['decode'](_0x33f5x4);
        if (!_0x33f5x1 || !_0x33f5x1['success']) {
            this['fireEvent']('requestfail', this, _0x33f5x2, _0x33f5x1, _0x33f5x5);
            this['fireEvent'](_0x33f5x2 + 'fail', this, _0x33f5x1, _0x33f5x5, _0x33f5x3);
            this['warn']('CrudManager: ' + _0x33f5x2 + ' failed, please inspect the server response', _0x33f5x4);
            return _0x33f5x1;
        }
        if (this['fireEvent']('beforeresponseapply', this, _0x33f5x2, _0x33f5x1) !== false && this['fireEvent']('before' + _0x33f5x2 + 'apply', this, _0x33f5x1, _0x33f5x3) !== false) {
            this['revision'] = _0x33f5x1['revision'];
            this['applyResponse'](_0x33f5x2, _0x33f5x1, _0x33f5x3);
            this['fireEvent']('requestdone', this, _0x33f5x2, _0x33f5x1, _0x33f5x5);
            this['fireEvent'](_0x33f5x2, this, _0x33f5x1, _0x33f5x5, _0x33f5x3);
            if (!this['hasChanges']()) {
                this['fireEvent']('nochanges', this);
            }
        }
        return _0x33f5x1;
    },
    onLoad: function(_0x33f5x1, _0x33f5x3, _0x33f5x2) {
        return this['onResponse']('load', _0x33f5x1, _0x33f5x3, _0x33f5x2);
    },
    onSync: function(_0x33f5x1, _0x33f5x3, _0x33f5x2) {
        return this['onResponse']('sync', _0x33f5x1, _0x33f5x3, _0x33f5x2);
    },
    load: function(_0x33f5x5, _0x33f5x2, _0x33f5x4) {
        var _0x33f5x1;
        if (typeof _0x33f5x5 === 'object') {
            _0x33f5x1 = _0x33f5x5;
            _0x33f5x5 = _0x33f5x2;
            _0x33f5x2 = _0x33f5x4;
            _0x33f5x4 = arguments[3];
        }
        var _0x33f5x3 = this['getLoadPackage'](_0x33f5x1);
        if (this['fireEvent']('beforeload', this, _0x33f5x3) !== false) {
            _0x33f5x4 = _0x33f5x4 || this;
            if (this['activeRequests']['load']) {
                this['cancelRequest'](this['activeRequests']['load']['desc']);
                this['fireEvent']('loadcanceled', this, _0x33f5x3);
            }
            this['activeRequests']['load'] = {
                id: _0x33f5x3['requestId']
            };
            this['activeRequests']['load']['desc'] = this['sendRequest']({
                data: this['encode'](_0x33f5x3),
                type: 'load',
                success: function(_0x33f5x9, _0x33f5x7) {
                    var _0x33f5x8 = this['onLoad'](_0x33f5x9, _0x33f5x7, _0x33f5x1);
                    if (_0x33f5x2 && (!_0x33f5x8 || !_0x33f5x8['success'])) {
                        _0x33f5x2['call'](_0x33f5x4, _0x33f5x8, _0x33f5x9, _0x33f5x1);
                    } else {
                        if (_0x33f5x5) {
                            _0x33f5x5['call'](_0x33f5x4, _0x33f5x8, _0x33f5x9, _0x33f5x1);
                        }
                    }
                },
                failure: function(_0x33f5x8, _0x33f5x9) {
                    this['onLoad'](_0x33f5x8, _0x33f5x9);
                    if (_0x33f5x2) {
                        _0x33f5x2['apply'](_0x33f5x4, arguments);
                    }
                },
                scope: this
            });
        } else {
            this['fireEvent']('loadcanceled', this, _0x33f5x3);
        }
    },
    sync: function(_0x33f5x4, _0x33f5x2, _0x33f5x3) {
        if (this['activeRequests']['sync']) {
            this['delayedSyncs']['push'](arguments);
            this['fireEvent']('syncdelayed', this, arguments);
            return;
        }
        var _0x33f5x1 = this['getChangeSetPackage']();
        _0x33f5x3 = _0x33f5x3 || this;
        if (!_0x33f5x1) {
            if (_0x33f5x4) {
                _0x33f5x4['call'](_0x33f5x3, null, null);
            }
            return;
        }
        if (this['fireEvent']('beforesync', this, _0x33f5x1) === false) {
            this['fireEvent']('synccanceled', this, _0x33f5x1);
            return;
        }
        this['activeRequests']['sync'] = {
            id: _0x33f5x1['requestId']
        };
        this['activeRequests']['sync']['desc'] = this['sendRequest']({
            data: this['encode'](_0x33f5x1),
            type: 'sync',
            success: function(_0x33f5x7, _0x33f5x8) {
                var _0x33f5x9 = this['activeRequests']['sync'];
                var _0x33f5x5 = this['onSync'](_0x33f5x7, _0x33f5x8);
                if (_0x33f5x2 && (!_0x33f5x5 || !_0x33f5x5['success'])) {
                    _0x33f5x2['call'](_0x33f5x3, _0x33f5x5, _0x33f5x7, _0x33f5x9);
                } else {
                    if (_0x33f5x4) {
                        _0x33f5x4['call'](_0x33f5x3, _0x33f5x5, _0x33f5x7, _0x33f5x9);
                    }
                }
                this['runDelayedSync']();
            },
            failure: function(_0x33f5x8, _0x33f5x5) {
                this['onSync'](_0x33f5x8, _0x33f5x5);
                if (_0x33f5x2) {
                    _0x33f5x2['apply'](_0x33f5x3, arguments);
                }
                this['runDelayedSync']();
            },
            scope: this
        });
    },
    runDelayedSync: function() {
        var _0x33f5x2 = this['delayedSyncs']['shift']();
        if (!_0x33f5x2) {
            return;
        }
        this['sync']['apply'](this, _0x33f5x2);
    },
    commit: function() {
        for (var _0x33f5x1 = 0, _0x33f5x2 = this['stores']['length']; _0x33f5x1 < _0x33f5x2; _0x33f5x1++) {
            this['stores'][_0x33f5x1]['store']['commitChanges']();
        }
    },
    reject: function() {
        for (var _0x33f5x1 = 0, _0x33f5x2 = this['stores']['length']; _0x33f5x1 < _0x33f5x2; _0x33f5x1++) {
            this['stores'][_0x33f5x1]['store']['rejectChanges']();
        }
    },
    warn: function() {
        if ('console' in window) {
            var _0x33f5x2 = console;
            _0x33f5x2['log'] && _0x33f5x2['log']['apply'] && _0x33f5x2['log']['apply'](_0x33f5x2, arguments);
        }
    },
    isLoading: function() {
        return !!this['activeRequests']['load'];
    }
});

Ext.define('Ext.ux.Scheduler.app.CrudManagerDomain', {
    extend: Ext['app']['EventDomain'],
    singleton: true,
    type: 'crudmanager',
    prefix: 'crudmanager.',
    constructor: function() {
        var _0x33f5x2 = this;
        _0x33f5x2['callParent']();
        _0x33f5x2['monitor'](Ext.ux.Scheduler.crud.AbstractManager);
    },
    match: function(_0x33f5x4, _0x33f5x1) {
        var _0x33f5x2 = false, _0x33f5x3 = _0x33f5x4['alias'];
        if (_0x33f5x1 === '*') {
            _0x33f5x2 = true;
        } else {
            if (_0x33f5x3) {
                _0x33f5x2 = Ext.Array.indexOf(_0x33f5x3, this['prefix'] + _0x33f5x1) > -1;
            }
        }
        return _0x33f5x2;
    }
});

Ext.define('Ext.ux.Scheduler.column.Day', {
    extend: Ext.grid.column.Column,
    alias: 'widget.weekview-day',
    align: 'center',
    start: null,
    end: null,
    draggable: false,
    groupable: false,
    hideable: false,
    sortable: false,
    menuDisabled: true,
    enableLocking: false,
    flex: 1,
    resizable: false,
    tdCls: 'sch-timetd',
    initComponent: function() {
        var _0x33f5x2 = new Date();
        this['addCls']('sch-daycolumn-header');
        if (this['isWeekend']()) {
            this['addCls']('sch-daycolumn-header-weekend');
            this['tdCls'] = (this['tdCls'] || '') + ' sch-daycolumn-weekend';
        }
        if (this['start']['getDate']() === _0x33f5x2['getDate']() && this['start']['getMonth']() === _0x33f5x2['getMonth']() && this['start']['getYear']() === _0x33f5x2['getYear']()) {
            this['addCls']('sch-daycolumn-header-today');
            this['tdCls'] = (this['tdCls'] || '') + ' sch-daycolumn-today';
        }
        this['callParent'](arguments);
    },
    isWeekend: function() {
        var _0x33f5x2 = this['start']['getDay']();
        return _0x33f5x2 === 6 || _0x33f5x2 === 0;
    }
});

Ext.define('Ext.ux.Scheduler.column.Resource', {
    extend: Ext['grid']['Column'],
    alias: 'widget.resourcecolumn',
    align: 'center',
    menuDisabled: true,
    hideable: false,
    sortable: false,
    locked: false,
    lockable: false,
    draggable: false,
    enableLocking: false,
    model: null,
    initComponent: function() {
        this['tdCls'] = (this['tdCls'] || '') + ' sch-timetd';
        this['cls'] = (this['cls'] || '') + ' sch-resourcecolumn-header';
        this['callParent'](arguments);
    }
});

Ext.define('Ext.ux.Scheduler.column.Summary', {
    extend: Ext.grid.column.Column,
    alias: [ 'widget.summarycolumn' ],
    lockableScope: 'top',
    showPercent: false,
    nbrDecimals: 1,
    sortable: false,
    fixed: true,
    menuDisabled: true,
    width: 80,
    dataIndex: '_sch_not_used',
    schedulerPanel: null,
    init: Ext.emptyFn,
    constructor: function(_0x33f5x2) {
        this['scope'] = this;
        this['callParent'](arguments);
        this['on']('beforerender', this['onMyBeforeRender'], this);
    },
    onMyBeforeRender: function() {
        this['schedulerPanel'] = this['up']('tablepanel[lockable=true]');
    },
    getTimeAxis: function() {
        return this['schedulerPanel']['getTimeAxis']();
    },
    getEventStore: function() {
        return this['schedulerPanel']['getEventStore']();
    },
    renderer: function(_0x33f5xf, _0x33f5x2, _0x33f5x8) {
        var _0x33f5x9 = this['getTimeAxis'](), _0x33f5x4 = this['getEventStore'](), _0x33f5x5 = _0x33f5x9['getStart'](), _0x33f5x7 = _0x33f5x9['getEnd'](), _0x33f5x1 = this['calculate'](_0x33f5x4['getEventsForResource'](_0x33f5x8), _0x33f5x5, _0x33f5x7);
        if (_0x33f5x1 <= 0) {
            return '';
        }
        if (this['showPercent']) {
            var _0x33f5x3 = Ext.ux.Scheduler.util.Date.getDurationInMinutes(_0x33f5x5, _0x33f5x7);
            return Math['round'](_0x33f5x1 * 100 / _0x33f5x3) + ' %';
        } else {
            if (_0x33f5x1 > 1440) {
                return (_0x33f5x1 / 1440)['toFixed'](this['nbrDecimals']) + ' ' + Ext.ux.Scheduler.util.Date.getShortNameOfUnit('DAY');
            }
            if (_0x33f5x1 >= 30) {
                return (_0x33f5x1 / 60)['toFixed'](this['nbrDecimals']) + ' ' + Ext.ux.Scheduler.util.Date['getShortNameOfUnit']('HOUR');
            }
            return _0x33f5x1 + ' ' + Ext.ux.Scheduler.util.Date['getShortNameOfUnit']('MINUTE');
        }
    },
    calculate: function(_0x33f5x3, _0x33f5x9, _0x33f5x4) {
        var _0x33f5x5 = 0, _0x33f5x1, _0x33f5x2, _0x33f5x8 = Ext.ux.Scheduler.util.Date;
        Ext.Array['each'](_0x33f5x3, function(_0x33f5x7) {
            _0x33f5x1 = _0x33f5x7['getStartDate']();
            _0x33f5x2 = _0x33f5x7['getEndDate']();
            if (_0x33f5x8['intersectSpans'](_0x33f5x9, _0x33f5x4, _0x33f5x1, _0x33f5x2)) {
                _0x33f5x5 += _0x33f5x8['getDurationInMinutes'](_0x33f5x8['max'](_0x33f5x1, _0x33f5x9), _0x33f5x8['min'](_0x33f5x2, _0x33f5x4));
            }
        });
        return _0x33f5x5;
    }
});

Ext.define('Ext.ux.Scheduler.view.HorizontalTimeAxis', {
    extend: Ext.util['Observable'],
    trackHeaderOver: true,
    compactCellWidthThreshold: 15,
    baseCls: 'sch-column-header',
    tableCls: 'sch-header-row',
    headerHtmlRowTpl: '<table border="0" cellspacing="0" cellpadding="0" style="width: {totalWidth}px; {tstyle}" class="{{tableCls}} sch-header-row-{position} {cls}"><thead><tr><tpl for="cells"><td class="{{baseCls}} {headerCls} sch-header-cell-{align}" data-date="{[fm.date(values.start, \'Ymd_His\')]}" style="position : static; text-align: {align}; width: {width}px; {style}" tabIndex="0" headerPosition="{parent.position}" headerIndex="{[xindex-1]}"><div class="sch-simple-timeheader">{header}</div></td></tpl></tr></thead></table>',
    model: null,
    hoverCls: '',
    containerEl: null,
    height: null,
    constructor: function(_0x33f5x3) {
        var _0x33f5x4 = this;
        var _0x33f5x2 = !!Ext['versions']['touch'];
        Ext.apply(this, _0x33f5x3);
        _0x33f5x4['callParent'](arguments);
        _0x33f5x4['model']['on']('update', _0x33f5x4['onModelUpdate'], this, {
            priority: 5
        });
        _0x33f5x4['containerEl'] = Ext.get(_0x33f5x4['containerEl']);
        if (!(_0x33f5x4['headerHtmlRowTpl'] instanceof Ext['Template'])) {
            _0x33f5x4['headerHtmlRowTpl'] = _0x33f5x4['headerHtmlRowTpl']['replace']('{{baseCls}}', this['baseCls'])['replace']('{{tableCls}}', this['tableCls']);
            _0x33f5x4['headerHtmlRowTpl'] = new Ext.XTemplate(_0x33f5x4['headerHtmlRowTpl']);
        }
        if (_0x33f5x4['trackHeaderOver'] && _0x33f5x4['hoverCls']) {
            _0x33f5x4['containerEl']['on']({
                mousemove: _0x33f5x4['highlightCell'],
                delegate: '.sch-column-header',
                scope: _0x33f5x4
            });
            _0x33f5x4['containerEl']['on']({
                mouseleave: _0x33f5x4['clearHighlight'],
                scope: _0x33f5x4
            });
        }
        var _0x33f5x1 = {
            scope: this,
            delegate: '.sch-column-header'
        };
        if (_0x33f5x2) {
            _0x33f5x1['tap'] = this['onElClick']('tap');
            _0x33f5x1['doubletap'] = this['onElClick']('doubletap');
        } else {
            _0x33f5x1['click'] = this['onElClick']('click');
            _0x33f5x1['dblclick'] = this['onElClick']('dblclick');
            _0x33f5x1['contextmenu'] = this['onElClick']('contextmenu');
        }
        _0x33f5x4['_listenerCfg'] = _0x33f5x1;
        if (_0x33f5x4['containerEl']) {
            _0x33f5x4['containerEl']['on'](_0x33f5x1);
        }
    },
    destroy: function() {
        var _0x33f5x2 = this;
        if (_0x33f5x2['containerEl']) {
            _0x33f5x2['containerEl']['un'](_0x33f5x2._listenerCfg);
            _0x33f5x2['containerEl']['un']({
                mousemove: _0x33f5x2['highlightCell'],
                delegate: '.sch-simple-timeheader',
                scope: _0x33f5x2
            });
            _0x33f5x2['containerEl']['un']({
                mouseleave: _0x33f5x2['clearHighlight'],
                scope: _0x33f5x2
            });
        }
        _0x33f5x2['model']['un']({
            update: _0x33f5x2['onModelUpdate'],
            scope: _0x33f5x2
        });
    },
    onModelUpdate: function() {
        this['render']();
    },
    getHTML: function(_0x33f5x7, _0x33f5x9, _0x33f5x5) {
        var _0x33f5x3 = this['model']['getColumnConfig']();
        var _0x33f5x1 = this['model']['getTotalWidth']();
        var _0x33f5x2 = Ext['Object']['getKeys'](_0x33f5x3)['length'];
        var _0x33f5x8 = this['height'] ? this['height'] / _0x33f5x2 : 0;
        var _0x33f5x4 = '';
        if (_0x33f5x3['top']) {
            this['embedCellWidths'](_0x33f5x3['top']);
            _0x33f5x4 += this['headerHtmlRowTpl']['apply']({
                totalWidth: _0x33f5x1,
                cells: _0x33f5x3['top'],
                position: 'top',
                tstyle: 'border-top : 0;' + (_0x33f5x8 ? 'height:' + _0x33f5x8 + 'px' : '')
            });
        }
        if (_0x33f5x3['middle']) {
            this['embedCellWidths'](_0x33f5x3['middle']);
            _0x33f5x4 += this['headerHtmlRowTpl']['apply']({
                totalWidth: _0x33f5x1,
                cells: _0x33f5x3['middle'],
                position: 'middle',
                tstyle: (_0x33f5x3['top'] ? '' : 'border-top : 0;') + (_0x33f5x8 ? 'height:' + _0x33f5x8 + 'px' : ''),
                cls: !_0x33f5x3['bottom'] && this['model']['getTickWidth']() <= this['compactCellWidthThreshold'] ? 'sch-header-row-compact' : ''
            });
        }
        if (_0x33f5x3['bottom']) {
            this['embedCellWidths'](_0x33f5x3['bottom']);
            _0x33f5x4 += this['headerHtmlRowTpl']['apply']({
                totalWidth: _0x33f5x1,
                cells: _0x33f5x3['bottom'],
                position: 'bottom',
                tstyle: _0x33f5x8 ? 'height:' + _0x33f5x8 + 'px' : '',
                cls: this['model']['getTickWidth']() <= this['compactCellWidthThreshold'] ? 'sch-header-row-compact' : ''
            });
        }
        return _0x33f5x4 + '<div class="sch-header-secondary-canvas"></div>';
    },
    render: function() {
        if (!this['containerEl']) {
            return;
        }
        var _0x33f5x5 = this['containerEl'], _0x33f5x8 = _0x33f5x5['dom'], _0x33f5x4 = _0x33f5x8['style']['display'], _0x33f5x2 = this['model']['getColumnConfig'](), _0x33f5x1 = _0x33f5x8['parentNode'];
        _0x33f5x8['style']['display'] = 'none';
        _0x33f5x1['removeChild'](_0x33f5x8);
        var _0x33f5x3 = this['getHTML']();
        _0x33f5x8['innerHTML'] = _0x33f5x3;
        if (!_0x33f5x2['top'] && !_0x33f5x2['middle']) {
            this['containerEl']['addCls']('sch-header-single-row');
        } else {
            this['containerEl']['removeCls']('sch-header-single-row');
        }
        _0x33f5x1 && _0x33f5x1['appendChild'](_0x33f5x8);
        _0x33f5x8['style']['display'] = _0x33f5x4;
        this['fireEvent']('refresh', this);
    },
    embedCellWidths: function(_0x33f5x1) {
        var _0x33f5x5 = Ext['isIE7'] || Ext['isSafari'] && !Ext['supports']['Touch'] ? 1 : 0;
        for (var _0x33f5x3 = 0; _0x33f5x3 < _0x33f5x1['length']; _0x33f5x3++) {
            var _0x33f5x2 = _0x33f5x1[_0x33f5x3];
            var _0x33f5x4 = this['model']['getDistanceBetweenDates'](_0x33f5x2['start'], _0x33f5x2['end']);
            if (_0x33f5x4) {
                _0x33f5x2['width'] = _0x33f5x4 - (_0x33f5x3 ? _0x33f5x5 : 0);
            } else {
                _0x33f5x2['width'] = 0;
                _0x33f5x2['style'] = 'display: none';
            }
        }
    },
    onElClick: function(_0x33f5x2) {
        return function(_0x33f5x5, _0x33f5x8) {
            _0x33f5x8 = _0x33f5x5['delegatedTarget'] || _0x33f5x8;
            var _0x33f5x1 = Ext.fly(_0x33f5x8)['getAttribute']('headerPosition'), _0x33f5x3 = Ext.fly(_0x33f5x8)['getAttribute']('headerIndex'), _0x33f5x4 = this['model']['getColumnConfig']()[_0x33f5x1][_0x33f5x3];
            this['fireEvent']('timeheader' + _0x33f5x2, this, _0x33f5x4['start'], _0x33f5x4['end'], _0x33f5x5);
        };
    },
    highlightCell: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x1 = this;
        if (_0x33f5x2 !== _0x33f5x1['highlightedCell']) {
            _0x33f5x1['clearHighlight']();
            _0x33f5x1['highlightedCell'] = _0x33f5x2;
            Ext.fly(_0x33f5x2)['addCls'](_0x33f5x1['hoverCls']);
        }
    },
    clearHighlight: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['highlightedCell'];
        if (_0x33f5x2) {
            Ext.fly(_0x33f5x2)['removeCls'](_0x33f5x1['hoverCls']);
            delete _0x33f5x1['highlightedCell'];
        }
    }
});

Ext.define('Ext.ux.Scheduler.column.timeAxis.Horizontal', {
    extend: Ext.grid.column.Column,
    alias: 'widget.timeaxiscolumn',
    draggable: false,
    groupable: false,
    hideable: false,
    sortable: false,
    resizable: false,
    menuDisabled: true,
    cls: 'sch-simple-timeaxis',
    tdCls: 'sch-timetd',
    enableLocking: false,
    locked: false,
    timeAxisViewModel: null,
    headerView: null,
    hoverCls: '',
    ownHoverCls: 'sch-column-header-over',
    trackHeaderOver: true,
    compactCellWidthThreshold: Ext['theme'] && Ext['theme']['name']['toLowerCase']() === 'classic' ? 15 : 35,
    afterRender: function() {
        var _0x33f5x1 = this;
        var _0x33f5x2 = _0x33f5x1['titleEl']['createChild']({
            cls: 'sch-horizontaltimeaxis-ct'
        });
        _0x33f5x1['headerView'] = new Ext.ux.Scheduler.view.HorizontalTimeAxis({
            model: _0x33f5x1['timeAxisViewModel'],
            containerEl: _0x33f5x2,
            hoverCls: _0x33f5x1['ownHoverCls'],
            trackHeaderOver: _0x33f5x1['trackHeaderOver'],
            compactCellWidthThreshold: _0x33f5x1['compactCellWidthThreshold']
        });
        _0x33f5x1['headerView']['on']('refresh', _0x33f5x1['onTimeAxisViewRefresh'], _0x33f5x1);
        _0x33f5x1['ownerCt']['on']('afterlayout', function() {
            if (!_0x33f5x1['ownerCt']) {
                return;
            }
            _0x33f5x1['mon'](_0x33f5x1['ownerCt'], 'resize', _0x33f5x1['onHeaderContainerResize'], _0x33f5x1);
            if (this['getWidth']() > 0) {
                if (_0x33f5x1['getAvailableWidthForSchedule']() === _0x33f5x1['timeAxisViewModel']['getAvailableWidth']()) {
                    _0x33f5x1['headerView']['render']();
                } else {
                    _0x33f5x1['timeAxisViewModel']['update'](_0x33f5x1['getAvailableWidthForSchedule']());
                }
                _0x33f5x1['setWidth'](_0x33f5x1['timeAxisViewModel']['getTotalWidth']());
            }
        }, null, {
            single: true
        });
        this['enableBubble']('timeheaderclick', 'timeheaderdblclick', 'timeheadercontextmenu');
        _0x33f5x1['relayEvents'](_0x33f5x1['headerView'], [ 'timeheaderclick', 'timeheaderdblclick', 'timeheadercontextmenu' ]);
        _0x33f5x1['callParent'](arguments);
        _0x33f5x1['focusable'] = false;
    },
    initRenderData: function() {
        var _0x33f5x2 = this;
        _0x33f5x2['renderData']['headerCls'] = _0x33f5x2['renderData']['headerCls'] || _0x33f5x2['headerCls'];
        return _0x33f5x2['callParent'](arguments);
    },
    destroy: function() {
        if (this['headerView']) {
            this['headerView']['destroy']();
        }
        this['callParent'](arguments);
    },
    onTimeAxisViewRefresh: function() {
        this['headerView']['un']('refresh', this['onTimeAxisViewRefresh'], this);
        this['setWidth'](this['timeAxisViewModel']['getTotalWidth']());
        this['headerView']['on']('refresh', this['onTimeAxisViewRefresh'], this);
    },
    getAvailableWidthForSchedule: function() {
        var _0x33f5x4 = this['ownerCt']['isVisible'](true) ? this['ownerCt']['getWidth']() : this['ownerCt']['lastBox'] && this['ownerCt']['lastBox']['width'] || 0, _0x33f5x2 = this['ownerCt']['items'], _0x33f5x3;
        for (var _0x33f5x1 = 1; _0x33f5x1 < _0x33f5x2['length']; _0x33f5x1++) {
            _0x33f5x3 = _0x33f5x2['get'](_0x33f5x1);
            if (!_0x33f5x3['hidden']) {
                _0x33f5x4 -= _0x33f5x3['isVisible'](true) ? _0x33f5x3['getWidth']() : _0x33f5x3['lastBox'] && _0x33f5x3['lastBox']['width'] || 0;
            }
        }
        return _0x33f5x4 - Ext['getScrollbarSize']()['width'] - 1;
    },
    onResize: function() {
        this['callParent'](arguments);
        this['timeAxisViewModel']['setAvailableWidth'](this['getAvailableWidthForSchedule']());
    },
    onHeaderContainerResize: function() {
        this['timeAxisViewModel']['setAvailableWidth'](this['getAvailableWidthForSchedule']());
        this['headerView']['render']();
    },
    refresh: function() {
        if (this['rendered']) {
            this['timeAxisViewModel']['update'](null, true);
            this['headerView']['render']();
        }
    }
});

Ext.define('Ext.ux.Scheduler.column.timeAxis.Vertical', {
    extend: Ext.grid.column.Column,
    alias: 'widget.verticaltimeaxis',
    align: 'right',
    width: 100,
    draggable: false,
    groupable: false,
    hideable: false,
    sortable: false,
    menuDisabled: true,
    timeAxis: null,
    timeAxisViewModel: null,
    cellTopBorderWidth: null,
    cellBottomBorderWidth: null,
    totalBorderWidth: null,
    enableLocking: false,
    locked: true,
    flex: 1,
    dataIndex: 'start',
    initComponent: function() {
        this['callParent'](arguments);
        this['tdCls'] = (this['tdCls'] || '') + ' sch-verticaltimeaxis-cell';
        this['scope'] = this;
        this['totalBorderWidth'] = this['cellTopBorderWidth'] + this['cellBottomBorderWidth'];
    },
    renderer: function(_0x33f5x4, _0x33f5x1, _0x33f5x2, _0x33f5x5) {
        var _0x33f5x3 = this['timeAxisViewModel']['getBottomHeader']();
        _0x33f5x1['style'] = 'height:' + (this['timeAxisViewModel']['getTickWidth']() - this['totalBorderWidth']) + 'px';
        if (_0x33f5x3['renderer']) {
            return _0x33f5x3['renderer']['call'](_0x33f5x3['scope'] || this, _0x33f5x2['data']['start'], _0x33f5x2['data']['end'], _0x33f5x1, _0x33f5x5);
        } else {
            return Ext.Date['format'](_0x33f5x4, _0x33f5x3['dateFormat']);
        }
    }
});

Ext.define('Ext.ux.Scheduler.crud.encoder.Json', {
    format: 'json',
    encode: function(_0x33f5x2) {
        return Ext.JSON.encode(_0x33f5x2);
    },
    decode: function(_0x33f5x2) {
        if (typeof _0x33f5x2 == 'object') {
            return _0x33f5x2;
        }
        return Ext.JSON.decode(_0x33f5x2, true);
    }
});

Ext.define('Ext.ux.Scheduler.crud.encoder.Xml', {
    format: 'xml',
    stringReplaces: [ [ /&/g, '&amp;' ], [ /</g, '&lt;' ], [ />/g, '&gt;' ], [ /"/g, '&quot;' ] ],
    encodeString: function(_0x33f5x5) {
        if (!_0x33f5x5) {
            return _0x33f5x5;
        }
        var _0x33f5x2 = _0x33f5x5.toString(), _0x33f5x3 = this['stringReplaces'];
        for (var _0x33f5x4 = 0, _0x33f5x1 = _0x33f5x3['length']; _0x33f5x4 < _0x33f5x1; _0x33f5x4++) {
            _0x33f5x2 = _0x33f5x2['replace'](_0x33f5x3[_0x33f5x4][0], _0x33f5x3[_0x33f5x4][1]);
        }
        return _0x33f5x2;
    },
    encodeRecords: function(_0x33f5x3) {
        var _0x33f5x2 = '';
        for (var _0x33f5x4 = 0, _0x33f5x1 = _0x33f5x3['length']; _0x33f5x4 < _0x33f5x1; _0x33f5x4++) {
            _0x33f5x2 += this['encodeRecord'](_0x33f5x3[_0x33f5x4]);
        }
        return _0x33f5x2;
    },
    encodeRecord: function(_0x33f5x1) {
        var _0x33f5x2 = '<record>';
        for (var _0x33f5x3 in _0x33f5x1) {
            var _0x33f5x4 = _0x33f5x1[_0x33f5x3];
            _0x33f5x2 += '<field id="' + this['encodeString'](_0x33f5x3) + '">' + (_0x33f5x4 && _0x33f5x4['$store'] ? this['encodeStoreChanges']({
                storeId: _0x33f5x3
            }, _0x33f5x4) : this['encodeString'](_0x33f5x4)) + '</field>';
        }
        _0x33f5x2 += '</record>';
        return _0x33f5x2;
    },
    encodeStoreChanges: function(_0x33f5x1, _0x33f5x3) {
        var _0x33f5x2 = '<store id="' + this['encodeString'](_0x33f5x1['storeId']) + '">';
        if (_0x33f5x3['added']) {
            _0x33f5x2 += '<added>' + this['encodeRecords'](_0x33f5x3['added']) + '</added>';
        }
        if (_0x33f5x3['updated']) {
            _0x33f5x2 += '<updated>' + this['encodeRecords'](_0x33f5x3['updated']) + '</updated>';
        }
        if (_0x33f5x3['removed']) {
            _0x33f5x2 += '<removed>' + this['encodeRecords'](_0x33f5x3['removed']) + '</removed>';
        }
        _0x33f5x2 += '</store>';
        return _0x33f5x2;
    },
    encode: function(_0x33f5x5) {
        var _0x33f5x2, _0x33f5x4, _0x33f5x1, _0x33f5x3;
        switch (_0x33f5x5['type']) {
          case 'load':
            _0x33f5x2 = '<load requestId="' + this['encodeString'](_0x33f5x5['requestId']) + '">';
            for (_0x33f5x4 = 0, _0x33f5x1 = _0x33f5x5['stores']['length']; _0x33f5x4 < _0x33f5x1; _0x33f5x4++) {
                _0x33f5x3 = _0x33f5x5['stores'][_0x33f5x4];
                if (typeof _0x33f5x3 === 'string') {
                    _0x33f5x2 += '<store id="' + this['encodeString'](_0x33f5x3) + '"/>';
                } else {
                    _0x33f5x2 += '<store id="' + this['encodeString'](_0x33f5x3['storeId']) + '" page="' + this['encodeString'](_0x33f5x3['page']) + '" pageSize="' + this['encodeString'](_0x33f5x3['pageSize']) + '"/>';
                }
            }
            ;
            _0x33f5x2 += '</load>';
            return _0x33f5x2;

          case 'sync':
            _0x33f5x2 = '<sync requestId="' + this['encodeString'](_0x33f5x5['requestId']) + '" revision="' + this['encodeString'](_0x33f5x5['revision']) + '">';
            for (_0x33f5x4 in _0x33f5x5) {
                if (_0x33f5x5['hasOwnProperty'](_0x33f5x4)) {
                    _0x33f5x3 = this['getStore'](_0x33f5x4);
                    if (_0x33f5x3) {
                        _0x33f5x2 += this['encodeStoreChanges'](_0x33f5x3, _0x33f5x5[_0x33f5x4]);
                    }
                }
            }
            ;
            _0x33f5x2 += '</sync>';
            break;
        }
        return _0x33f5x2;
    },
    stringToXML: function(_0x33f5x1) {
        if (!_0x33f5x1) {
            return;
        }
        var _0x33f5x2;
        if (window['DOMParser']) {
            _0x33f5x2 = new DOMParser()['parseFromString'](_0x33f5x1, 'text/xml');
        } else {
            if (window['ActiveXObject']) {
                _0x33f5x2 = new ActiveXObject('Microsoft.XMLDOM');
                _0x33f5x2['async'] = false;
                _0x33f5x2['loadXML'](_0x33f5x1);
            }
        }
        return _0x33f5x2;
    },
    decodeRecords: function(_0x33f5x4) {
        var _0x33f5x1 = [];
        for (var _0x33f5x3 = 0, _0x33f5x2 = _0x33f5x4['length']; _0x33f5x3 < _0x33f5x2; _0x33f5x3++) {
            _0x33f5x1['push'](this['decodeRecord'](_0x33f5x4[_0x33f5x3]));
        }
        return _0x33f5x1;
    },
    decodeRecord: function(_0x33f5x8) {
        var _0x33f5x1 = _0x33f5x8['childNodes'], _0x33f5x2 = {}, _0x33f5x9;
        for (var _0x33f5x5 = 0, _0x33f5x3 = _0x33f5x1['length']; _0x33f5x5 < _0x33f5x3; _0x33f5x5++) {
            var _0x33f5x7 = _0x33f5x1[_0x33f5x5];
            if (_0x33f5x7['nodeName'] == 'field') {
                _0x33f5x9 = '';
                if (_0x33f5x7['firstChild']) {
                    var _0x33f5x4 = this['getElementByTagName'](_0x33f5x7, 'store');
                    _0x33f5x9 = _0x33f5x4 ? this['decodeStore'](_0x33f5x4) : _0x33f5x7['firstChild']['nodeValue'];
                }
                _0x33f5x2[_0x33f5x7['getAttribute']('id')] = _0x33f5x9;
            }
        }
        return _0x33f5x2;
    },
    getElementsByTagName: function(_0x33f5x8, _0x33f5x3) {
        var _0x33f5x5 = _0x33f5x8['childNodes'], _0x33f5x1 = [];
        for (var _0x33f5x4 = 0, _0x33f5x2 = _0x33f5x5['length']; _0x33f5x4 < _0x33f5x2; _0x33f5x4++) {
            if (_0x33f5x5[_0x33f5x4]['nodeName'] == _0x33f5x3) {
                _0x33f5x1['push'](_0x33f5x5[_0x33f5x4]);
            }
        }
        return _0x33f5x1;
    },
    getElementByTagName: function(_0x33f5x5, _0x33f5x1) {
        var _0x33f5x4 = _0x33f5x5['childNodes'];
        for (var _0x33f5x3 = 0, _0x33f5x2 = _0x33f5x4['length']; _0x33f5x3 < _0x33f5x2; _0x33f5x3++) {
            if (_0x33f5x4[_0x33f5x3]['nodeName'] == _0x33f5x1) {
                return _0x33f5x4[_0x33f5x3];
            }
        }
    },
    decodeStore: function(_0x33f5x2) {
        var _0x33f5x4 = {}, _0x33f5x3 = this['getElementsByTagName'](_0x33f5x2, 'rows');
        if (_0x33f5x3['length']) {
            _0x33f5x4['rows'] = this['decodeRecords'](this['getElementsByTagName'](_0x33f5x3[0], 'record'));
            var _0x33f5x1 = parseInt(_0x33f5x3[0]['getAttribute']('total'), 10);
            if (isNaN(_0x33f5x1) || _0x33f5x1 < _0x33f5x4['rows']['length']) {
                _0x33f5x1 = _0x33f5x4['rows']['length'];
            }
            _0x33f5x4['total'] = _0x33f5x1;
        }
        var _0x33f5x5 = this['getElementByTagName'](_0x33f5x2, 'removed');
        if (_0x33f5x5) {
            _0x33f5x4['removed'] = this['decodeRecords'](this['getElementsByTagName'](_0x33f5x5, 'record'));
        }
        return _0x33f5x4;
    },
    decode: function(_0x33f5x2) {
        var _0x33f5x4 = typeof _0x33f5x2 == 'string' ? this['stringToXML'](_0x33f5x2) : _0x33f5x2;
        if (!_0x33f5x4) {
            return;
        }
        var _0x33f5xb = {}, _0x33f5x5 = _0x33f5x4['documentElement'], _0x33f5x9 = _0x33f5x5['getElementsByTagName']('store'), _0x33f5x8, _0x33f5x7;
        _0x33f5xb['requestId'] = _0x33f5x5['getAttribute']('requestId');
        _0x33f5xb['revision'] = _0x33f5x5['getAttribute']('revision');
        _0x33f5xb['success'] = _0x33f5x5['getAttribute']('success') || 'false';
        _0x33f5xb['success'] = _0x33f5xb['success']['toLowerCase']() == 'true';
        if (!_0x33f5xb['success']) {
            _0x33f5xb['code'] = _0x33f5x5['getAttribute']('code');
            var _0x33f5xe = _0x33f5x5['getElementsByTagName']('message')[0];
            _0x33f5xb['message'] = _0x33f5xe && _0x33f5xe['firstChild'] && _0x33f5xe['firstChild']['nodeValue'];
        }
        for (var _0x33f5x3 = 0, _0x33f5x1 = _0x33f5x9['length']; _0x33f5x3 < _0x33f5x1; _0x33f5x3++) {
            _0x33f5x8 = _0x33f5x9[_0x33f5x3];
            _0x33f5x7 = _0x33f5x8['getAttribute']('id');
            if (this['getStore'](_0x33f5x7)) {
                _0x33f5xb[_0x33f5x7] = this['decodeStore'](_0x33f5x8);
            }
        }
        return _0x33f5xb;
    }
});

Ext.define('Ext.ux.Scheduler.crud.transport.Ajax', {
    defaultMethod: {
        load: 'GET',
        sync: 'POST'
    },
    cancelRequest: function(_0x33f5x2) {
        Ext['Ajax']['abort'](_0x33f5x2);
    },
    sendRequest: function(_0x33f5x1) {
        var _0x33f5x3 = _0x33f5x1['data'], _0x33f5x4 = this['transport'][_0x33f5x1['type']], _0x33f5x5 = _0x33f5x4['paramName'], _0x33f5x8 = Ext.apply({}, _0x33f5x4 && _0x33f5x4['params']), _0x33f5x9 = _0x33f5x4['method'] || this['defaultMethod'][_0x33f5x1['type']];
        var _0x33f5x2 = Ext.apply({
            url: _0x33f5x4['url'],
            method: _0x33f5x9,
            params: _0x33f5x8,
            failure: _0x33f5x1['failure'],
            success: function(_0x33f5x7, _0x33f5xf) {
                if (_0x33f5x1['success']) {
                    _0x33f5x1['success']['call'](_0x33f5x1['scope'] || this, _0x33f5x7['responseXml'] || _0x33f5x7['responseText']);
                }
            },
            scope: _0x33f5x1['scope']
        }, _0x33f5x4['requestConfig']);
        if (!_0x33f5x5) {
            if (this['format'] === 'xml') {
                Ext.apply(_0x33f5x2, {
                    xmlData: _0x33f5x3
                });
            } else {
                Ext.apply(_0x33f5x2, {
                    jsonData: _0x33f5x3
                });
            }
        } else {
            _0x33f5x2['params'] = _0x33f5x2['params'] || {};
            _0x33f5x2['params'][_0x33f5x5] = _0x33f5x3;
        }
        this['fireEvent']('beforesend', this, _0x33f5x8, _0x33f5x1['type'], _0x33f5x2);
        return Ext['Ajax']['request'](_0x33f5x2);
    }
});

Ext.define('Ext.ux.Scheduler.util.Patch', {
    target: null,
    minVersion: null,
    maxVersion: null,
    reportUrl: null,
    description: null,
    applyFn: null,
    ieOnly: false,
    macOnly: false,
    overrides: null,
    onClassExtended: function(_0x33f5x2, _0x33f5x1) {
        if (Ext.ux.Scheduler.disableOverrides) {
            return;
        }
        if (_0x33f5x1['ieOnly'] && !Ext['isIE']) {
            return;
        }
        if (_0x33f5x1['macOnly'] && !Ext['isMac']) {
            return;
        }
        if ((!_0x33f5x1['minVersion'] || Ext['versions']['extjs']['equals'](_0x33f5x1['minVersion']) || Ext['versions']['extjs']['isGreaterThan'](_0x33f5x1['minVersion'])) && (!_0x33f5x1['maxVersion'] || Ext['versions']['extjs']['equals'](_0x33f5x1['maxVersion']) || Ext['versions']['extjs']['isLessThan'](_0x33f5x1['maxVersion']))) {
            if (_0x33f5x1['applyFn']) {
                _0x33f5x1['applyFn']();
            } else {
                if (_0x33f5x1['overrides']) {
                    Ext.ClassManager['get'](_0x33f5x1['target'])['override'](_0x33f5x1['overrides']);
                }
            }
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.CollectionKey', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.util.CollectionKey',
    minVersion: '6.0.0',
    maxVersion: '6.0.3',
    reportUrl: 'https://www.sencha.com/forum/showthread.php?310532-Ext.util.Collection-key-configuration-application-and-cloning-is-broken',
    description: [ 'Ext.util.CollectionKey::clone() is broken due to wrong usage of Ext\'s configuration facility.', 'We relay on the (though) private Ext.data.LocalStore::extraKeys configuration, we use it to define additional', 'unique but complex keys for Assignment and Dependency stores. Upon store filtering such keys are being cloned', 'but due to the broken config key\'s clone() method throws an exception' ]['join'](' '),
    applyFn: function() {
        var _0x33f5x2;
        _0x33f5x2 = Ext.util['CollectionKey']['prototype']['applyKeyFn'];
        Ext.util['CollectionKey']['prototype']['applyKeyFn'] = Ext.identifyFn;
        Ext.util['CollectionKey']['prototype']['updateKeyFn'] = _0x33f5x2;
    }
});

Ext.define('Ext.ux.Scheduler.data.mixin.UniversalModelGetter', {
    getModelById: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        return _0x33f5x2['getNodeById'] ? _0x33f5x2['getNodeById'](_0x33f5x1) : _0x33f5x2['getById'](_0x33f5x1);
    },
    getModelByInternalId: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        return _0x33f5x2['byInternalIdMap'] ? _0x33f5x2['byInternalIdMap'][_0x33f5x1] : _0x33f5x2['getByInternalId'](_0x33f5x1);
    }
});

Ext.define('Ext.ux.Scheduler.data.mixin.CacheHintHelper', {
    extend: Ext.Mixin,
    mixinConfig: {
        before: {
            loadRecords: 'loadRecords',
            removeAll: 'removeAll'
        }
    },
    loadRecords: function() {
        this['fireEvent']('cacheresethint', this);
    },
    removeAll: function(_0x33f5x2) {
        if (_0x33f5x2) {
            this['fireEvent']('cacheresethint', this);
        }
    }
});

Ext.define('Robo.data.Store', {
    extend: Ext.Mixin,
    undoRedoPostponed: null,
    inUndoRedoTransaction: false,
    undoRedoEventBus: null,
    mixinConfig: {
        before: {
            constructor: 'constructor',
            destroy: 'destroy',
            fireEventArgs: 'fireEventArgs',
            setRoot: 'beforeSetRoot',
            fillNode: 'beforeFillNode'
        },
        after: {
            setRoot: 'afterSetRoot',
            fillNode: 'afterFillNode'
        }
    },
    constructor: function() {
        var _0x33f5x2 = this;
        _0x33f5x2['undoRedoEventBus'] = new Ext.util.Observable();
    },
    destroy: function() {
        Ext.destroy(this['undoRedoEventBus']);
    },
    fireEventArgs: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x3 = this;
        if (!_0x33f5x1['hasOwnProperty']('$undoRedoEventBusFired')) {
            _0x33f5x1['$undoRedoEventBusFired'] = {};
        }
        if (!_0x33f5x1['$undoRedoEventBusFired'][_0x33f5x2]) {
            _0x33f5x1['$undoRedoEventBusFired'][_0x33f5x2] = true;
            _0x33f5x3['undoRedoEventBus']['hasListener'](_0x33f5x2) && _0x33f5x3['undoRedoEventBus']['fireEventArgs'](_0x33f5x2, _0x33f5x1);
        }
    },
    isInUndoRedoTransaction: function() {
        return this['inUndoRedoTransaction'];
    },
    onUndoRedoTransactionStart: function(_0x33f5x2, _0x33f5x1) {
        this['inUndoRedoTransaction'] = true;
    },
    onUndoRedoTransactionEnd: function(_0x33f5x2, _0x33f5x1) {
        this['inUndoRedoTransaction'] = false;
    },
    isUndoingOrRedoing: function() {
        return !!this['undoRedoPostponed'];
    },
    beforeUndoRedo: function(_0x33f5x2) {
        this['undoRedoPostponed'] = [];
    },
    afterUndoRedo: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        Ext.Array['forEach'](_0x33f5x1['undoRedoPostponed'], function(_0x33f5x3) {
            _0x33f5x3();
        });
        _0x33f5x1['undoRedoPostponed'] = null;
    },
    postponeAfterUndoRedo: function(_0x33f5x2) {
        Ext.Assert && Ext.Assert.isFunction(_0x33f5x2, 'Parameter must be a function');
        this['undoRedoPostponed']['push'](_0x33f5x2);
    },
    beforeSetRoot: function() {
        this['__isSettingRoot'] = true;
    },
    afterSetRoot: function() {
        this['__isSettingRoot'] = false;
        if (!this['getRoot']()) {
            this['fireEvent']('clear', this);
        }
    },
    beforeFillNode: function(_0x33f5x2) {
        if (_0x33f5x2['isRoot']()) {
            this['beforeSetRoot']();
        }
    },
    afterFillNode: function(_0x33f5x2) {
        if (_0x33f5x2['isRoot']()) {
            this['afterSetRoot']();
        }
    },
    isRootSettingOrLoading: function() {
        return this['isLoading']() || this['isTreeStore'] && this['__isSettingRoot'];
    }
});

Ext.define('Robo.data.Model', {
    extend: Ext.Mixin,
    modelName: null,
    editMementoFix: null,
    mixinConfig: {
        before: {
            endEdit: 'onBeforeEndEdit'
        },
        after: {
            endEdit: 'onAfterEndEdit'
        }
    },
    onBeforeEndEdit: function(_0x33f5x1, _0x33f5x3) {
        var _0x33f5x2 = this['editMemento'];
        if (_0x33f5x2) {
            this['editMementoFix'] = _0x33f5x2;
            if (!_0x33f5x3) {
                _0x33f5x3 = this['getModifiedFieldNames'](_0x33f5x2['data']);
            }
            if (!_0x33f5x2['previousValues']) {
                _0x33f5x2['previousValues'] = {};
            }
            Ext.Array['each'](_0x33f5x3, function(_0x33f5x4) {
                _0x33f5x2['previousValues'][_0x33f5x4] = _0x33f5x2['data'][_0x33f5x4];
            });
        }
    },
    onAfterEndEdit: function(_0x33f5x2, _0x33f5x1) {
        delete this['editMementoFix'];
    },
    getTitle: function() {
        return '';
    }
});

Ext.define('Ext.ux.Scheduler.model.Customizable', function(_0x33f5x2) {
    return {
        extend: Ext.data.Model,
        mixins: {
            robo: Robo['data']['Model']
        },
        isCustomizableModel: true,
        customizableFields: null,
        previous: null,
        __editing: null,
        __editCounter: 0,
        constructor: function() {
            var _0x33f5x1 = this['callParent'](arguments);
            return _0x33f5x1;
        },
        set: function(_0x33f5x9, _0x33f5x3) {
            var _0x33f5x1;
            var _0x33f5x5;
            this['previous'] = this['previous'] || {};
            if (typeof _0x33f5x9 === 'string') {
                _0x33f5x1 = this['get'](_0x33f5x9);
                if (_0x33f5x1 instanceof Date && !(_0x33f5x3 instanceof Date)) {
                    _0x33f5x3 = this['getField'](_0x33f5x9)['convert'](_0x33f5x3, this);
                }
                if (_0x33f5x1 instanceof Date && _0x33f5x1 - _0x33f5x3 || !(_0x33f5x1 instanceof Date) && _0x33f5x1 !== _0x33f5x3) {
                    this['previous'][_0x33f5x9] = _0x33f5x1;
                } else {
                    return null;
                }
            } else {
                for (var _0x33f5x8 in _0x33f5x9) {
                    _0x33f5x1 = this['get'](_0x33f5x8);
                    var _0x33f5x4 = _0x33f5x9[_0x33f5x8];
                    if (_0x33f5x1 instanceof Date && !(_0x33f5x4 instanceof Date)) {
                        _0x33f5x4 = this['getField'](_0x33f5x8)['convert'](_0x33f5x4, this);
                    }
                    if (_0x33f5x1 instanceof Date && _0x33f5x1 - _0x33f5x4 || !(_0x33f5x1 instanceof Date) && _0x33f5x1 !== _0x33f5x4) {
                        this['previous'][_0x33f5x8] = _0x33f5x1;
                    }
                }
            }
            _0x33f5x5 = this['callParent'](arguments);
            if (!this['__editing']) {
                delete this['previous'];
            }
            return _0x33f5x5;
        },
        reject: function() {
            var _0x33f5x3 = this, _0x33f5x1 = _0x33f5x3['modified'] || {}, _0x33f5x4;
            _0x33f5x3['__editing'] = true;
            _0x33f5x3['previous'] = _0x33f5x3['previous'] || {};
            for (_0x33f5x4 in _0x33f5x1) {
                if (_0x33f5x1['hasOwnProperty'](_0x33f5x4)) {
                    if (typeof _0x33f5x1[_0x33f5x4] != 'function') {
                        _0x33f5x3['previous'][_0x33f5x4] = _0x33f5x3['get'](_0x33f5x4);
                    }
                }
            }
            _0x33f5x3['callParent'](arguments);
            delete _0x33f5x3['previous'];
            _0x33f5x3['__editing'] = false;
        },
        beginEdit: function() {
            this['__editCounter']++;
            this['__editing'] = true;
            this['callParent'](arguments);
        },
        cancelEdit: function() {
            this['__editCounter'] = 0;
            this['__editing'] = false;
            this['callParent'](arguments);
            delete this['previous'];
        },
        endEdit: function(_0x33f5x3, _0x33f5x4) {
            if (--this['__editCounter'] === 0) {
                if (!_0x33f5x3 && this['getModifiedFieldNames']) {
                    var _0x33f5x1 = this['editMemento'];
                    if (!_0x33f5x4) {
                        _0x33f5x4 = this['getModifiedFieldNames'](_0x33f5x1['data']);
                    }
                    if (_0x33f5x4 && _0x33f5x4['length'] === 0) {
                        _0x33f5x3 = true;
                    }
                }
                this['callParent']([ _0x33f5x3 ]['concat'](Array['prototype']['slice']['call'](arguments, 1)));
                this['__editing'] = false;
                delete this['previous'];
            }
        }
    };
}, function(_0x33f5x2) {
    _0x33f5x2['$onExtended']['unshift']({
        fn: function(_0x33f5x1, _0x33f5x3) {
            if (_0x33f5x3) {
                if (Ext.isArray(_0x33f5x3)) {
                    _0x33f5x1['fieldsInitialValue'] = _0x33f5x3['slice']();
                } else {
                    if (_0x33f5x3['fields']) {
                        if (!Ext.isArray(_0x33f5x3['fields'])) {
                            _0x33f5x1['fieldsInitialValue'] = [ _0x33f5x3['fields'] ];
                        } else {
                            _0x33f5x1['fieldsInitialValue'] = _0x33f5x3['fields']['slice']();
                        }
                    }
                }
            }
        }
    });
    _0x33f5x2['onExtended'](function(_0x33f5x3, _0x33f5x5, _0x33f5x1) {
        var _0x33f5x4 = _0x33f5x1['onBeforeCreated'];
        _0x33f5x1['onBeforeCreated'] = function(_0x33f5xa, _0x33f5xb) {
            _0x33f5x4['apply'](this, arguments);
            var _0x33f5x11 = _0x33f5xa['prototype'];
            if (!_0x33f5x11['customizableFields']) {
                return;
            }
            _0x33f5x11['allCustomizableFields'] = (_0x33f5xa['superclass']['allCustomizableFields'] || [])['concat'](_0x33f5x11['customizableFields']);
            var _0x33f5xf = {};
            Ext.Array['each'](_0x33f5x11['allCustomizableFields'], function(_0x33f5x6) {
                if (typeof _0x33f5x6 == 'string') {
                    _0x33f5x6 = {
                        name: _0x33f5x6
                    };
                }
                _0x33f5xf[_0x33f5x6['name']] = _0x33f5x6;
            });
            var _0x33f5x7 = Ext.Array['findBy'](_0x33f5xa['fields'], function(_0x33f5x6) {
                return _0x33f5x6['name'] === _0x33f5x11['idProperty'];
            });
            this['idField'] = _0x33f5x11['idField'] = _0x33f5x7;
            if (!_0x33f5xa['fieldsMap'][_0x33f5x11['idProperty']]) {
                _0x33f5xa['fieldsMap'][_0x33f5x11['idProperty']] = _0x33f5x7;
            }
            var _0x33f5xc = _0x33f5x11['fields'];
            var _0x33f5xd = [];
            var _0x33f5x9 = [];
            Ext.Array['each'](_0x33f5xc, function(_0x33f5x6) {
                if (_0x33f5x6['isCustomizableField']) {
                    _0x33f5x9['push'](_0x33f5x6['getName']());
                }
            });
            if (_0x33f5x11['idProperty'] !== 'id' && _0x33f5x11['getField']('id')) {
                if (!_0x33f5x11['getField']('id')['hasOwnProperty']('name')) {
                    _0x33f5x9['push']('id');
                }
            }
            if (_0x33f5x11['idProperty'] !== 'Id' && _0x33f5x11['getField']('Id')) {
                if (!_0x33f5x11['getField']('Id')['hasOwnProperty']('name')) {
                    _0x33f5x9['push']('Id');
                }
            }
            _0x33f5xa['removeFields'](_0x33f5x9);
            function _0x33f5x8(_0x33f5x10, _0x33f5x6, _0x33f5x14) {
                if (!_0x33f5x6) {
                    return;
                }
                if (!Ext.isArray(_0x33f5x6)) {
                    _0x33f5x6 = [ _0x33f5x6 ];
                }
                var _0x33f5x15;
                for (var _0x33f5x17 = _0x33f5x6['length'] - 1; _0x33f5x17 >= 0; _0x33f5x17--) {
                    if (_0x33f5x6[_0x33f5x17]['name'] == _0x33f5x14) {
                        _0x33f5x15 = _0x33f5x6[_0x33f5x17];
                        break;
                    }
                }
                Ext.applyIf(_0x33f5x10, _0x33f5x15);
            }
            function _0x33f5xe(_0x33f5x10) {
                var _0x33f5x12 = _0x33f5xa, _0x33f5x17 = _0x33f5x12['prototype'], _0x33f5x15 = _0x33f5x10 === 'Id' ? 'idProperty' : _0x33f5x10['charAt'](0)['toLowerCase']() + _0x33f5x10['substr'](1) + 'Field', _0x33f5x6 = {
                    name: _0x33f5x17[_0x33f5x15] || _0x33f5x10,
                    isCustomizableField: true
                }, _0x33f5x14;
                while (_0x33f5x17 && _0x33f5x17['isCustomizableModel']) {
                    _0x33f5x14 = _0x33f5x17[_0x33f5x15] || _0x33f5x10;
                    _0x33f5x17['hasOwnProperty']('customizableFields') && _0x33f5x8(_0x33f5x6, _0x33f5x17['customizableFields'], _0x33f5x10);
                    _0x33f5x8(_0x33f5x6, _0x33f5x12['fieldsInitialValue'], _0x33f5x14);
                    _0x33f5x17 = _0x33f5x12['superclass'];
                    _0x33f5x12 = _0x33f5x17 && _0x33f5x17['self'];
                }
                return _0x33f5x6;
            }
            _0x33f5x9 = [];
            Ext['Object']['each'](_0x33f5xf, function(_0x33f5x6, _0x33f5x15) {
                var _0x33f5x14 = _0x33f5x15['name'] || _0x33f5x15['getName']();
                var _0x33f5x18 = _0x33f5x14 === 'Id' ? 'idProperty' : _0x33f5x14['charAt'](0)['toLowerCase']() + _0x33f5x14['substr'](1) + 'Field';
                var _0x33f5x16 = _0x33f5x11[_0x33f5x18] || _0x33f5x14;
                _0x33f5x11['getField'](_0x33f5x16) && _0x33f5x9['push'](_0x33f5x16);
                var _0x33f5x13 = _0x33f5xe(_0x33f5x14);
                _0x33f5xd['push'](Ext.create('data.field.' + (_0x33f5x13['type'] || 'auto'), _0x33f5x13));
                var _0x33f5x17 = Ext.String['capitalize'](_0x33f5x14);
                if (_0x33f5x17 != 'Id') {
                    var _0x33f5x12 = 'get' + _0x33f5x17;
                    var _0x33f5x10 = 'set' + _0x33f5x17;
                    if (!_0x33f5x11[_0x33f5x12] || _0x33f5x11[_0x33f5x12]['__getterFor__'] && _0x33f5x11[_0x33f5x12]['__getterFor__'] != _0x33f5x16) {
                        _0x33f5x11[_0x33f5x12] = function() {
                            return this['get'](this[_0x33f5x18] || _0x33f5x16);
                        };
                        _0x33f5x11[_0x33f5x12]['__getterFor__'] = _0x33f5x16;
                    }
                    if (!_0x33f5x11[_0x33f5x10] || _0x33f5x11[_0x33f5x10]['__setterFor__'] && _0x33f5x11[_0x33f5x10]['__setterFor__'] != _0x33f5x16) {
                        _0x33f5x11[_0x33f5x10] = function(_0x33f5x19) {
                            return this['set'](this[_0x33f5x18] || _0x33f5x16, _0x33f5x19);
                        };
                        _0x33f5x11[_0x33f5x10]['__setterFor__'] = _0x33f5x16;
                    }
                }
            });
            _0x33f5xa['replaceFields'](_0x33f5xd, _0x33f5x9);
        };
    });
});

Ext.define('Ext.ux.Scheduler.model.Assignment', {
    extend: Ext.ux.Scheduler.model.Customizable,
    idProperty: 'Id',
    customizableFields: [ {
        name: 'ResourceId'
    }, {
        name: 'EventId'
    } ],
    resourceIdField: 'ResourceId',
    eventIdField: 'EventId',
    getInternalId: function() {
        return this['internalId'];
    },
    getAssignmentStore: function() {
        return this['joined'] && this['joined'][0];
    },
    getEventStore: function() {
        var _0x33f5x2 = this['getAssignmentStore']();
        return _0x33f5x2 && _0x33f5x2['getEventStore']();
    },
    getResourceStore: function() {
        var _0x33f5x2 = this['getEventStore']();
        return _0x33f5x2 && _0x33f5x2['getResourceStore']();
    },
    getEvent: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x2 = _0x33f5x2 || _0x33f5x1['getEventStore']();
        return _0x33f5x2 && _0x33f5x2['getModelById'](_0x33f5x1['getEventId']());
    },
    getResource: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x1 = _0x33f5x1 || _0x33f5x2['getResourceStore']();
        return _0x33f5x1 && _0x33f5x1['getModelById'](_0x33f5x2['getResourceId']());
    },
    getEventName: function(_0x33f5x2) {
        var _0x33f5x1 = this['getEvent'](_0x33f5x2);
        return _0x33f5x1 && _0x33f5x1['getName']() || '';
    },
    getResourceName: function(_0x33f5x2) {
        var _0x33f5x1 = this['getResource'](_0x33f5x2);
        return _0x33f5x1 && _0x33f5x1['getName']() || '';
    },
    isPersistable: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getEvent'](), _0x33f5x3 = _0x33f5x1['getResource']();
        return _0x33f5x2 && !_0x33f5x2['phantom'] && _0x33f5x3 && !_0x33f5x3['phantom'];
    },
    fullCopy: function() {
        return this['copy']['apply'](this, arguments);
    }
});

Ext.define('Ext.ux.Scheduler.data.AssignmentStore', {
    extend: Ext.data['Store'],
    mixins: [ Ext.ux.Scheduler.data.mixin.UniversalModelGetter, Ext.ux.Scheduler.data.mixin.CacheHintHelper, Robo.data.Store ],
    config: {
        extraKeys: {
            byEventIdResourceId: {
                keyFn: function(_0x33f5x2) {
                    return Ext.ux.Scheduler.data.AssignmentStore.makeAssignmentEventResourceCompositeKey(_0x33f5x2['getEventId'](), _0x33f5x2['getResourceId']());
                }
            }
        }
    },
    model: 'Ext.ux.Scheduler.model.Assignment',
    alias: 'store.assignmentstore',
    storeId: 'assignments',
    eventResourceCache: null,
    resourceEventsCache: null,
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    eventStore: null,
    constructor: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['callParent']([ _0x33f5x2 ]);
        _0x33f5x1['eventAssignmentsCache'] = _0x33f5x1['eventAssignmentsCache'] || _0x33f5x1['createEventAssignmentCache']();
        _0x33f5x1['resourceAssignmentsCache'] = _0x33f5x1['resourceAssignmentsCache'] || _0x33f5x1['createResourceAssignmentCache']();
    },
    destroy: function() {
        var _0x33f5x2 = this;
        Ext.destroyMembers(_0x33f5x2, 'eventResourceCache', 'resourceEventsCache', 'eventAssignmentsCache', 'resourceEventsCache', 'eventStoreDetacher', 'resourceStoreDetacher');
        _0x33f5x2['callParent']();
    },
    createEventAssignmentCache: function() {
        return new Ext.ux.Scheduler.data.util.EventAssignmentsCache(this);
    },
    createResourceAssignmentCache: function() {
        return new Ext.ux.Scheduler.data.util.ResourceAssignmentsCache(this);
    },
    createAssignmentStoreEventResourcesCache: function() {
        return new Ext.ux.Scheduler.data.util.AssignmentStoreEventResourcesCache(this);
    },
    createAssignmentStoreResourceEventsCache: function() {
        return new Ext.ux.Scheduler.data.util.AssignmentStoreResourceEventsCache(this);
    },
    getEventStore: function() {
        return this['eventStore'];
    },
    setEventStore: function(_0x33f5x2) {
        var _0x33f5x1 = this, _0x33f5x3 = _0x33f5x1['eventStore'];
        _0x33f5x1['eventStore'] = _0x33f5x2 && Ext.StoreMgr.lookup(_0x33f5x2) || null;
        _0x33f5x1['attachToEventStore'](_0x33f5x1['eventStore']);
        if ((_0x33f5x3 || _0x33f5x2) && _0x33f5x3 !== _0x33f5x2) {
            _0x33f5x1['fireEvent']('eventstorechange', _0x33f5x1, _0x33f5x2, _0x33f5x3);
        }
    },
    attachToEventStore: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        Ext.destroy(_0x33f5x1['eventStoreDetacher']);
        if (_0x33f5x2 && _0x33f5x2['isTreeStore']) {
            _0x33f5x1['eventStoreDetacher'] = _0x33f5x2['on']({
                noderemove: _0x33f5x1['onEventNodeRemove'],
                resourcestorechange: _0x33f5x1['onEventStoreResourceStoreChange'],
                scope: _0x33f5x1,
                destroyable: true,
                priority: 200
            });
        } else {
            if (_0x33f5x2) {
                _0x33f5x1['eventStoreDetacher'] = _0x33f5x2['on']({
                    remove: _0x33f5x1['onEventRemove'],
                    resourcestorechange: _0x33f5x1['onEventStoreResourceStoreChange'],
                    scope: _0x33f5x1,
                    destroyable: true,
                    priority: 200
                });
            }
        }
        _0x33f5x1['attachToResourceStore'](_0x33f5x2 && _0x33f5x2['getResourceStore']());
    },
    attachToResourceStore: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        Ext.destroy(_0x33f5x2['resourceStoreDetacher']);
        if (_0x33f5x1) {
            if (_0x33f5x1['isTreeStore']) {
                _0x33f5x2['resourceStoreDetacher'] = _0x33f5x1['on']({
                    noderemove: _0x33f5x2['onResourceNodeRemove'],
                    scope: _0x33f5x2,
                    destroyable: true,
                    priority: 200
                });
            } else {
                _0x33f5x2['resourceStoreDetacher'] = _0x33f5x1['on']({
                    remove: _0x33f5x2['onResourceRemove'],
                    scope: _0x33f5x2,
                    destroyable: true,
                    priority: 200
                });
            }
        }
    },
    onEventStoreResourceStoreChange: function(_0x33f5x1, _0x33f5x2, _0x33f5x3) {
        this['attachToResourceStore'](_0x33f5x2);
    },
    onEventRemove: function(_0x33f5x5, _0x33f5x4, _0x33f5x3, _0x33f5x1) {
        var _0x33f5x8 = this, _0x33f5x2;
        if (!_0x33f5x1) {
            _0x33f5x2 = [];
            Ext.Array['each'](_0x33f5x4, function(_0x33f5x9) {
                _0x33f5x2 = _0x33f5x2['concat'](_0x33f5x8['getAssignmentsForEvent'](_0x33f5x9));
            });
            _0x33f5x2['length'] && _0x33f5x8['remove'](_0x33f5x2);
        }
    },
    onEventNodeRemove: function(_0x33f5x3, _0x33f5x5, _0x33f5x1) {
        var _0x33f5x4 = this, _0x33f5x2;
        if (!_0x33f5x1) {
            _0x33f5x2 = [];
            _0x33f5x5['cascadeBy'](function(_0x33f5x8) {
                _0x33f5x2 = _0x33f5x2['concat'](_0x33f5x4['getAssignmentsForEvent'](_0x33f5x8));
            });
            _0x33f5x2['length'] && _0x33f5x4['remove'](_0x33f5x2);
        }
    },
    onResourceRemove: function(_0x33f5x5, _0x33f5x8, _0x33f5x3, _0x33f5x1) {
        var _0x33f5x4 = this, _0x33f5x2;
        if (!_0x33f5x1) {
            _0x33f5x2 = [];
            Ext.Array['each'](_0x33f5x8, function(_0x33f5x9) {
                _0x33f5x2 = _0x33f5x2['concat'](_0x33f5x4['getAssignmentsForResource'](_0x33f5x9));
            });
            _0x33f5x2['length'] && _0x33f5x4['remove'](_0x33f5x2);
        }
    },
    onResourceNodeRemove: function(_0x33f5x4, _0x33f5x5, _0x33f5x1) {
        var _0x33f5x3 = this, _0x33f5x2;
        if (!_0x33f5x1) {
            _0x33f5x2 = [];
            _0x33f5x5['cascadeBy'](function(_0x33f5x8) {
                _0x33f5x2 = _0x33f5x2['concat'](_0x33f5x3['getAssignmentsForResource'](_0x33f5x8));
            });
            _0x33f5x2['length'] && _0x33f5x3['remove'](_0x33f5x2);
        }
    },
    mapAssignmentsForEvent: function(_0x33f5x4, _0x33f5x1, _0x33f5x5) {
        var _0x33f5x3 = this, _0x33f5x2 = [];
        _0x33f5x1 = _0x33f5x1 || Ext.identifyFn;
        _0x33f5x5 = _0x33f5x5 || Ext.returnTrue;
        if (_0x33f5x1 !== Ext.identifyFn || _0x33f5x5 !== Ext.returnTrue) {
            Ext.Array['each'](_0x33f5x3['eventAssignmentsCache']['get'](_0x33f5x4), function(_0x33f5x9) {
                var _0x33f5x8 = _0x33f5x1(_0x33f5x9);
                _0x33f5x5(_0x33f5x8) && _0x33f5x2['push'](_0x33f5x8);
            });
        } else {
            _0x33f5x2 = _0x33f5x2['concat'](_0x33f5x3['eventAssignmentsCache']['get'](_0x33f5x4));
        }
        return _0x33f5x2;
    },
    mapAssignmentsForResource: function(_0x33f5x4, _0x33f5x1, _0x33f5x5) {
        var _0x33f5x3 = this, _0x33f5x2 = [];
        _0x33f5x1 = _0x33f5x1 || Ext.identifyFn;
        _0x33f5x5 = _0x33f5x5 || Ext.returnTrue;
        if (_0x33f5x1 !== Ext.identifyFn || _0x33f5x5 !== Ext.returnTrue) {
            Ext.Array['each'](_0x33f5x3['resourceAssignmentsCache']['get'](_0x33f5x4), function(_0x33f5x9) {
                var _0x33f5x8 = _0x33f5x1(_0x33f5x9);
                _0x33f5x5(_0x33f5x8) && _0x33f5x2['push'](_0x33f5x8);
            });
        } else {
            _0x33f5x2 = []['concat'](_0x33f5x3['resourceAssignmentsCache']['get'](_0x33f5x4));
        }
        return _0x33f5x2;
    },
    getAssignmentsForEvent: function(_0x33f5x2) {
        return this['mapAssignmentsForEvent'](_0x33f5x2);
    },
    removeAssignmentsForEvent: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x2['remove'](_0x33f5x2['getAssignmentsForEvent'](_0x33f5x1));
    },
    getAssignmentsForResource: function(_0x33f5x2) {
        return this['mapAssignmentsForResource'](_0x33f5x2);
    },
    removeAssignmentsForResource: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x2['remove'](_0x33f5x2['getAssignmentsForResource'](_0x33f5x1));
    },
    getResourcesForEvent: function(_0x33f5x4) {
        var _0x33f5x3 = this, _0x33f5x2;
        if (_0x33f5x3['eventResourceCache']) {
            _0x33f5x2 = _0x33f5x3['eventResourceCache']['get'](_0x33f5x4);
        } else {
            _0x33f5x2 = _0x33f5x3['mapAssignmentsForEvent'](_0x33f5x4, function _0x33f5x5(_0x33f5x8) {
                return _0x33f5x8['getResource']();
            }, function _0x33f5x1(_0x33f5x8) {
                return !!_0x33f5x8;
            });
        }
        return _0x33f5x2;
    },
    getEventsForResource: function(_0x33f5x4) {
        var _0x33f5x3 = this, _0x33f5x2;
        if (_0x33f5x3['resourceEventsCache']) {
            _0x33f5x2 = _0x33f5x3['resourceEventsCache']['get'](_0x33f5x4);
        } else {
            _0x33f5x2 = _0x33f5x3['mapAssignmentsForResource'](_0x33f5x4, function _0x33f5x5(_0x33f5x8) {
                return _0x33f5x8['getEvent']();
            }, function _0x33f5x1(_0x33f5x8) {
                return !!_0x33f5x8;
            });
        }
        return _0x33f5x2;
    },
    assignEventToResource: function(_0x33f5x3, _0x33f5x5, _0x33f5x4) {
        var _0x33f5x1 = this, _0x33f5x2 = [];
        _0x33f5x4 = _0x33f5x4 || Ext.identifyFn;
        var _0x33f5x8 = Ext.isArray(_0x33f5x5) ? _0x33f5x5 : [ _0x33f5x5 ];
        Ext.Array['each'](_0x33f5x8, function(_0x33f5x9) {
            if (!_0x33f5x1['isEventAssignedToResource'](_0x33f5x3, _0x33f5x9)) {
                var _0x33f5x7 = new _0x33f5x1['model']();
                _0x33f5x7['setEventId'](_0x33f5x3 instanceof Ext.data.Model && _0x33f5x3['getId']() || _0x33f5x3);
                _0x33f5x7['setResourceId'](_0x33f5x9 instanceof Ext.data.Model && _0x33f5x9['getId']() || _0x33f5x9);
                _0x33f5x7 = _0x33f5x4(_0x33f5x7);
                _0x33f5x2['push'](_0x33f5x7);
            }
        });
        _0x33f5x1['add'](_0x33f5x2);
        return _0x33f5x2;
    },
    unassignEventFromResource: function(_0x33f5x1, _0x33f5x3) {
        var _0x33f5x2 = this, _0x33f5x4;
        if (!_0x33f5x3) {
            this['removeAssignmentsForEvent'](_0x33f5x1);
        } else {
            if (_0x33f5x2['isEventAssignedToResource'](_0x33f5x1, _0x33f5x3)) {
                _0x33f5x4 = _0x33f5x2['getAssignmentForEventAndResource'](_0x33f5x1, _0x33f5x3);
                _0x33f5x2['remove'](_0x33f5x4);
            }
        }
        return _0x33f5x4;
    },
    isEventAssignedToResource: function(_0x33f5x8, _0x33f5x9) {
        var _0x33f5x5 = this, _0x33f5x3 = _0x33f5x5['getResourcesForEvent'](_0x33f5x8), _0x33f5x1 = false, _0x33f5x4, _0x33f5x2;
        _0x33f5x9 = _0x33f5x9 instanceof Ext.data.Model && _0x33f5x9['getId']() || _0x33f5x9;
        for (_0x33f5x4 = 0, _0x33f5x2 = _0x33f5x3['length']; !_0x33f5x1 && _0x33f5x4 < _0x33f5x2; _0x33f5x4++) {
            _0x33f5x1 = _0x33f5x3[_0x33f5x4];
            _0x33f5x1 = _0x33f5x1['getId']() == _0x33f5x9;
        }
        return _0x33f5x1;
    },
    getAssignmentForEventAndResource: function(_0x33f5x1, _0x33f5x3) {
        var _0x33f5x2 = this;
        _0x33f5x1 = _0x33f5x1 instanceof Ext.data.Model && _0x33f5x1['getId']() || _0x33f5x1;
        _0x33f5x3 = _0x33f5x3 instanceof Ext.data.Model && _0x33f5x3['getId']() || _0x33f5x3;
        return _0x33f5x2['byEventIdResourceId']['get'](_0x33f5x2['self']['makeAssignmentEventResourceCompositeKey'](_0x33f5x1, _0x33f5x3));
    },
    inheritableStatics: {
        makeAssignmentEventResourceCompositeKey: function() {
            var _0x33f5x2 = [];
            return function(_0x33f5x1, _0x33f5x3) {
                _0x33f5x2['length'] = 0;
                _0x33f5x2['push']('event(', _0x33f5x1, ')-resource(', _0x33f5x3, ')');
                return _0x33f5x2['join']('');
            };
        }()
    }
});

Ext.define('Ext.ux.Scheduler.model.CalendarDay', {
    extend: Ext.ux.Scheduler.model.Customizable,
    idProperty: 'Id',
    customizableFields: [ {
        name: 'Date',
        type: 'date',
        dateFormat: 'c',
        persist: true,
        convert: function(_0x33f5x1, _0x33f5x2) {
            if (!_0x33f5x1) {
                return;
            }
            var _0x33f5x3 = Ext.data['Types']['DATE']['convert']['call'](this, _0x33f5x1);
            if (_0x33f5x3) {
                Ext.Date['clearTime'](_0x33f5x3);
            }
            return _0x33f5x3;
        }
    }, {
        name: 'Weekday',
        type: 'int'
    }, {
        name: 'OverrideStartDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'OverrideEndDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'Type',
        defaultValue: 'DAY'
    }, {
        name: 'IsWorkingDay',
        type: 'boolean',
        defaultValue: false
    }, {
        name: 'Cls',
        defaultValue: 'sch-nonworkingtime'
    }, 'Name', {
        name: 'Availability',
        persist: true,
        convert: function(_0x33f5x1, _0x33f5x2) {
            if (_0x33f5x1) {
                return typeof _0x33f5x1 === 'string' ? [ _0x33f5x1 ] : _0x33f5x1;
            } else {
                return [];
            }
        }
    } ],
    availabilityCache: null,
    weekDayField: 'Weekday',
    overrideStartDateField: 'OverrideStartDate',
    overrideEndDateField: 'OverrideEndDate',
    typeField: 'Type',
    dateField: 'Date',
    isWorkingDayField: 'IsWorkingDay',
    clsField: 'Cls',
    nameField: 'Name',
    availabilityField: 'Availability',
    setDate: function(_0x33f5x2) {
        if (_0x33f5x2) {
            _0x33f5x2 = Ext.Date['clearTime'](_0x33f5x2, true);
        }
        this['set'](this['dateField'], _0x33f5x2);
    },
    clearDate: function() {
        this['set'](this['dateField'], null);
    },
    getAvailability: function(_0x33f5x1) {
        var _0x33f5x3 = this;
        if (_0x33f5x1) {
            return this['get'](this['availabilityField']);
        }
        if (this['availabilityCache']) {
            return this['availabilityCache'];
        }
        var _0x33f5x2 = Ext.Array.map(this['get'](this['availabilityField']), function(_0x33f5x4) {
            return typeof _0x33f5x4 === 'string' ? _0x33f5x3['parseInterval'](_0x33f5x4) : _0x33f5x4;
        });
        this['verifyAvailability'](_0x33f5x2);
        return this['availabilityCache'] = _0x33f5x2;
    },
    setAvailability: function(_0x33f5x2) {
        this['availabilityCache'] = null;
        this['set'](this['availabilityField'], this['stringifyIntervals'](_0x33f5x2));
        this['getAvailability']();
    },
    verifyAvailability: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x2['sort'](function(_0x33f5x4, _0x33f5x3) {
            return _0x33f5x4['startTime'] - _0x33f5x3['startTime'];
        });
        Ext.Array['each'](_0x33f5x2, function(_0x33f5x3, _0x33f5x4) {
            if (_0x33f5x3['startTime'] > _0x33f5x3['endTime']) {
                throw new Error('Start time ' + Ext.Date['format'](_0x33f5x3['startTime'], 'H:i') + ' is greater than end time ' + Ext.Date['format'](_0x33f5x3['endTime'], 'H:i'));
            }
            if (_0x33f5x4 > 0 && _0x33f5x2[_0x33f5x4 - 1]['endTime'] > _0x33f5x3['startTime']) {
                throw new Error('Availability intervals should not intersect: [' + _0x33f5x1['stringifyInterval'](_0x33f5x2[_0x33f5x4 - 1]) + '] and [' + _0x33f5x1['stringifyInterval'](_0x33f5x3) + ']');
            }
        });
    },
    prependZero: function(_0x33f5x2) {
        return _0x33f5x2 < 10 ? '0' + _0x33f5x2 : _0x33f5x2;
    },
    stringifyInterval: function(_0x33f5x1) {
        var _0x33f5x3 = _0x33f5x1['startTime'];
        var _0x33f5x2 = _0x33f5x1['endTime'];
        return this['prependZero'](_0x33f5x3['getHours']()) + ':' + this['prependZero'](_0x33f5x3['getMinutes']()) + '-' + (_0x33f5x2['getDate']() == 1 ? 24 : this['prependZero'](_0x33f5x2['getHours']())) + ':' + this['prependZero'](_0x33f5x2['getMinutes']());
    },
    stringifyIntervals: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return Ext.Array.map(_0x33f5x2, function(_0x33f5x3) {
            if (typeof _0x33f5x3 === 'string') {
                return _0x33f5x3;
            }
            return _0x33f5x1['stringifyInterval'](_0x33f5x3);
        });
    },
    parseInterval: function(_0x33f5x1) {
        var _0x33f5x2 = /(\d\d):(\d\d)-(\d\d):(\d\d)/['exec'](_0x33f5x1);
        if (!_0x33f5x2) {
            throw 'Invalid format for availability string: ' + _0x33f5x1 + '. It should have exact format: hh:mm-hh:mm';
        }
        return {
            startTime: new Date(0, 0, 0, _0x33f5x2[1], _0x33f5x2[2]),
            endTime: new Date(0, 0, 0, _0x33f5x2[3], _0x33f5x2[4])
        };
    },
    getTotalHours: function() {
        return this['getTotalMS']() / 1e3 / 60 / 60;
    },
    getTotalMS: function() {
        var _0x33f5x2 = 0;
        Ext.Array['each'](this['getAvailability'](), function(_0x33f5x1) {
            _0x33f5x2 += _0x33f5x1['endTime'] - _0x33f5x1['startTime'];
        });
        return _0x33f5x2;
    },
    addAvailabilityInterval: function(_0x33f5x4, _0x33f5x1) {
        var _0x33f5x2;
        if (_0x33f5x4 instanceof Date) {
            _0x33f5x2 = {
                startTime: _0x33f5x4,
                endTime: _0x33f5x1
            };
        } else {
            _0x33f5x2 = this['parseInterval'](_0x33f5x4 + (_0x33f5x1 ? '-' + _0x33f5x1 : ''));
        }
        var _0x33f5x3 = this['getAvailability']()['concat'](_0x33f5x2);
        this['verifyAvailability'](_0x33f5x3);
        this['setAvailability'](_0x33f5x3);
    },
    removeAvailabilityInterval: function(_0x33f5x2) {
        var _0x33f5x1 = this['getAvailability']();
        _0x33f5x1['splice'](_0x33f5x2, 1);
        this['setAvailability'](_0x33f5x1);
    },
    getAvailabilityIntervalsFor: function(_0x33f5x3) {
        _0x33f5x3 = typeof _0x33f5x3 == 'number' ? new Date(_0x33f5x3) : _0x33f5x3;
        var _0x33f5x1 = _0x33f5x3['getFullYear']();
        var _0x33f5x4 = _0x33f5x3['getMonth']();
        var _0x33f5x2 = _0x33f5x3['getDate']();
        return Ext.Array.map(this['getAvailability'](), function(_0x33f5x5) {
            var _0x33f5x8 = _0x33f5x5['endTime']['getDate']();
            return {
                startDate: new Date(_0x33f5x1, _0x33f5x4, _0x33f5x2, _0x33f5x5['startTime']['getHours'](), _0x33f5x5['startTime']['getMinutes']()),
                endDate: new Date(_0x33f5x1, _0x33f5x4, _0x33f5x2 + (_0x33f5x8 == 1 ? 1 : 0), _0x33f5x5['endTime']['getHours'](), _0x33f5x5['endTime']['getMinutes']())
            };
        });
    },
    getAvailabilityStartFor: function(_0x33f5x1) {
        var _0x33f5x2 = this['getAvailabilityIntervalsFor'](_0x33f5x1);
        if (!_0x33f5x2['length']) {
            return null;
        }
        return _0x33f5x2[0]['startDate'];
    },
    getAvailabilityEndFor: function(_0x33f5x1) {
        var _0x33f5x2 = this['getAvailabilityIntervalsFor'](_0x33f5x1);
        if (!_0x33f5x2['length']) {
            return null;
        }
        return _0x33f5x2[_0x33f5x2['length'] - 1]['endDate'];
    }
});

Ext.define('Ext.ux.Scheduler.locale.Locale', {
    l10n: null,
    legacyMode: true,
    localeName: null,
    namespaceId: null,
    constructor: function() {
        if (!Ext.ux.Scheduler.locale.Active) {
            Ext.ux.Scheduler.locale.Active = {};
            this['bindRequire']();
        }
        var _0x33f5x1 = this['self']['getName']()['split']('.');
        var _0x33f5x2 = this['localeName'] = _0x33f5x1['pop']();
        this['namespaceId'] = _0x33f5x1['join']('.');
        var _0x33f5x3 = Ext.ux.Scheduler.locale.Active[this['namespaceId']];
        if (!(_0x33f5x2 == 'En' && _0x33f5x3 && _0x33f5x3['localeName'] != 'En')) {
            this['apply']();
        }
    },
    bindRequire: function() {
        var _0x33f5x2 = Ext.ClassManager['triggerCreated'];
        Ext.ClassManager['triggerCreated'] = function(_0x33f5x4) {
            _0x33f5x2['apply'](this, arguments);
            if (_0x33f5x4) {
                var _0x33f5x3 = Ext.ClassManager['get'](_0x33f5x4);
                for (var _0x33f5x1 in Ext.ux.Scheduler.locale.Active) {
                    Ext.ux.Scheduler.locale.Active[_0x33f5x1]['apply'](_0x33f5x3);
                }
            }
        };
    },
    applyToClass: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x4 = this, _0x33f5x9 = _0x33f5x4['self']['getName']();
        _0x33f5x1 = _0x33f5x1 || Ext.ClassManager['get'](_0x33f5x3);
        if (_0x33f5x1 && _0x33f5x1['activeLocaleId'] !== _0x33f5x9) {
            var _0x33f5x2 = _0x33f5x4['l10n'][_0x33f5x3];
            if (typeof _0x33f5x2 === 'function') {
                _0x33f5x2(_0x33f5x3);
            } else {
                if (_0x33f5x1['singleton']) {
                    _0x33f5x1['l10n'] = Ext.apply({}, _0x33f5x2, _0x33f5x1['prototype'] && _0x33f5x1['prototype']['l10n']);
                } else {
                   Ext.override(_0x33f5x1, {
                        l10n: _0x33f5x2
                    });
                }
            }
            if (_0x33f5x4['legacyMode']) {
                var _0x33f5x8;
                if (_0x33f5x1['prototype']) {
                    _0x33f5x8 = _0x33f5x1['prototype'];
                } else {
                    if (_0x33f5x1['singleton']) {
                        _0x33f5x8 = _0x33f5x1;
                    }
                }
                if (_0x33f5x8 && _0x33f5x8['legacyMode']) {
                    if (_0x33f5x8['legacyHolderProp']) {
                        if (!_0x33f5x8[_0x33f5x8['legacyHolderProp']]) {
                            _0x33f5x8[_0x33f5x8['legacyHolderProp']] = {};
                        }
                        _0x33f5x8 = _0x33f5x8[_0x33f5x8['legacyHolderProp']];
                    }
                    for (var _0x33f5x5 in _0x33f5x2) {
                        if (typeof _0x33f5x8[_0x33f5x5] !== 'function') {
                            _0x33f5x8[_0x33f5x5] = _0x33f5x2[_0x33f5x5];
                        }
                    }
                }
            }
            _0x33f5x1['activeLocaleId'] = _0x33f5x9;
            if (_0x33f5x1['onLocalized']) {
                _0x33f5x1['onLocalized']();
            }
        }
    },
    apply: function(_0x33f5x9) {
        if (this['l10n']) {
            var _0x33f5x8 = this;
            if (_0x33f5x9) {
                if (!Ext.isArray(_0x33f5x9)) {
                    _0x33f5x9 = [ _0x33f5x9 ];
                }
                var _0x33f5x3, _0x33f5x1;
                for (var _0x33f5x4 = 0, _0x33f5x2 = _0x33f5x9['length']; _0x33f5x4 < _0x33f5x2; _0x33f5x4++) {
                    if (Ext.isObject(_0x33f5x9[_0x33f5x4])) {
                        if (_0x33f5x9[_0x33f5x4]['singleton']) {
                            _0x33f5x1 = _0x33f5x9[_0x33f5x4];
                            _0x33f5x3 = Ext['getClassName'](Ext['getClass'](_0x33f5x1));
                        } else {
                            _0x33f5x1 = Ext['getClass'](_0x33f5x9[_0x33f5x4]);
                            _0x33f5x3 = Ext['getClassName'](_0x33f5x1);
                        }
                    } else {
                        _0x33f5x1 = null;
                        _0x33f5x3 = 'string' === typeof _0x33f5x9[_0x33f5x4] ? _0x33f5x9[_0x33f5x4] : Ext['getClassName'](_0x33f5x9[_0x33f5x4]);
                    }
                    if (_0x33f5x3) {
                        if (_0x33f5x3 in this['l10n']) {
                            _0x33f5x8['applyToClass'](_0x33f5x3, _0x33f5x1);
                        }
                    }
                }
            } else {
                Ext.ux.Scheduler.locale.Active[this['namespaceId']] = this;
                for (var _0x33f5x5 in this['l10n']) {
                    _0x33f5x8['applyToClass'](_0x33f5x5);
                }
            }
        }
    }
});

Ext.define('Ext.ux.Scheduler.locale.En', {
    extend: Ext.ux.Scheduler.locale.Locale,
    singleton: true,
    constructor: function(_0x33f5x2) {
        Ext.apply(this, {
            l10n: {
                "Ext.ux.Scheduler.util.Date": {
                    unitNames: {
                        YEAR: {
                            single: 'year',
                            plural: 'years',
                            abbrev: 'yr'
                        },
                        QUARTER: {
                            single: 'quarter',
                            plural: 'quarters',
                            abbrev: 'q'
                        },
                        MONTH: {
                            single: 'month',
                            plural: 'months',
                            abbrev: 'mon'
                        },
                        WEEK: {
                            single: 'week',
                            plural: 'weeks',
                            abbrev: 'w'
                        },
                        DAY: {
                            single: 'day',
                            plural: 'days',
                            abbrev: 'd'
                        },
                        HOUR: {
                            single: 'hour',
                            plural: 'hours',
                            abbrev: 'h'
                        },
                        MINUTE: {
                            single: 'minute',
                            plural: 'minutes',
                            abbrev: 'min'
                        },
                        SECOND: {
                            single: 'second',
                            plural: 'seconds',
                            abbrev: 's'
                        },
                        MILLI: {
                            single: 'ms',
                            plural: 'ms',
                            abbrev: 'ms'
                        }
                    }
                },
                "Ext.ux.Scheduler.panel.TimelineGridPanel": {
                    weekStartDay: 1,
                    loadingText: 'Loading, please wait...',
                    savingText: 'Saving changes, please wait...'
                },
                "Ext.ux.Scheduler.panel.TimelineTreePanel": {
                    weekStartDay: 1,
                    loadingText: 'Loading, please wait...',
                    savingText: 'Saving changes, please wait...'
                },
                "Ext.ux.Scheduler.mixin.SchedulerView": {
                    loadingText: 'Loading events...'
                },
                "Ext.ux.Scheduler.plugin.CurrentTimeLine": {
                    tooltipText: 'Current time'
                },
                "Ext.ux.Scheduler.plugin.EventEditor": {
                    saveText: 'Save',
                    deleteText: 'Delete',
                    cancelText: 'Cancel'
                },
                "Ext.ux.Scheduler.plugin.SimpleEditor": {
                    newEventText: 'New booking...'
                },
                "Ext.ux.Scheduler.widget.ExportDialogForm": {
                    formatFieldLabel: 'Paper format',
                    orientationFieldLabel: 'Orientation',
                    rangeFieldLabel: 'Schedule range',
                    showHeaderLabel: 'Show header',
                    showFooterLabel: 'Show footer',
                    orientationPortraitText: 'Portrait',
                    orientationLandscapeText: 'Landscape',
                    completeViewText: 'Complete schedule',
                    currentViewText: 'Visible schedule',
                    dateRangeText: 'Date range',
                    dateRangeFromText: 'Export from',
                    dateRangeToText: 'Export to',
                    exportersFieldLabel: 'Control pagination',
                    adjustCols: 'Adjust column width',
                    adjustColsAndRows: 'Adjust column width and row height',
                    specifyDateRange: 'Specify date range',
                    columnPickerLabel: 'Select columns',
                    completeDataText: 'Complete schedule (for all events)',
                    dpiFieldLabel: 'DPI (dots per inch)',
                    rowsRangeLabel: 'Rows range',
                    allRowsLabel: 'All rows',
                    visibleRowsLabel: 'Visible rows',
                    columnEmptyText: '[no title]'
                },
                "Ext.ux.Scheduler.widget.ExportDialog": {
                    title: 'Export Settings',
                    exportButtonText: 'Export',
                    cancelButtonText: 'Cancel',
                    progressBarText: 'Exporting...'
                },
                "Ext.ux.Scheduler.plugin.Export": {
                    generalError: 'An error occurred',
                    fetchingRows: 'Fetching row {0} of {1}',
                    builtPage: 'Built page {0} of {1}',
                    requestingPrintServer: 'Please wait...'
                },
                "Ext.ux.Scheduler.plugin.Printable": {
                    dialogTitle: 'Print settings',
                    exportButtonText: 'Print'
                },
                "Ext.ux.Scheduler.plugin.exporter.AbstractExporter": {
                    name: 'Exporter'
                },
                "Ext.ux.Scheduler.plugin.exporter.SinglePage": {
                    name: 'Single page'
                },
                "Ext.ux.Scheduler.plugin.exporter.MultiPageVertical": {
                    name: 'Multiple pages (vertically)'
                },
                "Ext.ux.Scheduler.plugin.exporter.MultiPage": {
                    name: 'Multiple pages'
                },
                "Ext.ux.Scheduler.preset.Manager": {
                    hourAndDay: {
                        displayDateFormat: 'G:i',
                        middleDateFormat: 'G:i',
                        topDateFormat: 'D d/m'
                    },
                    secondAndMinute: {
                        displayDateFormat: 'g:i:s',
                        topDateFormat: 'D, d g:iA'
                    },
                    dayAndWeek: {
                        displayDateFormat: 'm/d h:i A',
                        middleDateFormat: 'D d M'
                    },
                    weekAndDay: {
                        displayDateFormat: 'm/d',
                        bottomDateFormat: 'd M',
                        middleDateFormat: 'Y F d'
                    },
                    weekAndMonth: {
                        displayDateFormat: 'm/d/Y',
                        middleDateFormat: 'm/d',
                        topDateFormat: 'm/d/Y'
                    },
                    weekAndDayLetter: {
                        displayDateFormat: 'm/d/Y',
                        middleDateFormat: 'D d M Y'
                    },
                    weekDateAndMonth: {
                        displayDateFormat: 'm/d/Y',
                        middleDateFormat: 'd',
                        topDateFormat: 'Y F'
                    },
                    monthAndYear: {
                        displayDateFormat: 'm/d/Y',
                        middleDateFormat: 'M Y',
                        topDateFormat: 'Y'
                    },
                    year: {
                        displayDateFormat: 'm/d/Y',
                        middleDateFormat: 'Y'
                    },
                    manyYears: {
                        displayDateFormat: 'm/d/Y',
                        middleDateFormat: 'Y'
                    }
                }
            }
        });
        this['callParent'](arguments);
    }
});

Ext.define('Ext.ux.Scheduler.mixin.Localizable', {
    legacyMode: false,
    activeLocaleId: '',
    l10n: null,
    isLocaleApplied: function() {
        var _0x33f5x1 = this['singleton'] && this['activeLocaleId'] || this['self']['activeLocaleId'];
        if (!_0x33f5x1) {
            return false;
        }
        for (var _0x33f5x2 in Ext.ux.Scheduler.locale.Active) {
            if (_0x33f5x1 === Ext.ux.Scheduler.locale.Active[_0x33f5x2]['self']['getName']()) {
                return true;
            }
        }
        return false;
    },
    applyLocale: function() {
        for (var _0x33f5x2 in Ext.ux.Scheduler.locale.Active) {
            Ext.ux.Scheduler.locale.Active[_0x33f5x2]['apply'](this['singleton'] ? this : this['self']['getName']());
        }
    },
    L: function() {
        return this['localize']['apply'](this, arguments);
    },
    localize: function(_0x33f5x1, _0x33f5x4, _0x33f5x9) {
        if (!this['isLocaleApplied']() && !_0x33f5x9) {
            this['applyLocale']();
        }
        if (this['hasOwnProperty']('l10n') && this['l10n']['hasOwnProperty'](_0x33f5x1) && 'function' != typeof this['l10n'][_0x33f5x1]) {
            return this['l10n'][_0x33f5x1];
        }
        var _0x33f5x3 = this['self'] && this['self']['prototype'];
        if (this['legacyMode']) {
            var _0x33f5x2 = _0x33f5x4 || this['legacyHolderProp'];
            var _0x33f5x7 = _0x33f5x2 ? this[_0x33f5x2] : this;
            if (_0x33f5x7 && _0x33f5x7['hasOwnProperty'](_0x33f5x1) && 'function' != typeof _0x33f5x7[_0x33f5x1]) {
                return _0x33f5x7[_0x33f5x1];
            }
            if (_0x33f5x3) {
                var _0x33f5x5 = _0x33f5x2 ? _0x33f5x3[_0x33f5x2] : _0x33f5x3;
                if (_0x33f5x5 && _0x33f5x5['hasOwnProperty'](_0x33f5x1) && 'function' != typeof _0x33f5x5[_0x33f5x1]) {
                    return _0x33f5x5[_0x33f5x1];
                }
            }
        }
        var _0x33f5xf = _0x33f5x3['l10n'] && _0x33f5x3['l10n'][_0x33f5x1];
        if (_0x33f5xf === null || _0x33f5xf === undefined) {
            var _0x33f5x8 = _0x33f5x3 && _0x33f5x3['superclass'];
            if (_0x33f5x8 && _0x33f5x8['localize']) {
                _0x33f5xf = _0x33f5x8['localize'](_0x33f5x1, _0x33f5x4, _0x33f5x9);
            }
            if (_0x33f5xf === null || _0x33f5xf === undefined) {
                throw 'Cannot find locale: ' + _0x33f5x1 + ' [' + this['self']['getName']() + ']';
            }
        }
        return _0x33f5xf;
    }
});

Ext.define('Ext.ux.Scheduler.util.Date', {
    mixins: [ Ext.ux.Scheduler.mixin.Localizable ],
    singleton: true,
    stripEscapeRe: /(\\.)/g,
    hourInfoRe: /([gGhHisucUOPZ]|MS)/,
    unitHash: null,
    unitsByName: {},
    constructor: function() {
        var _0x33f5x2 = Ext.Date;
        var _0x33f5x3 = this['unitHash'] = {
            MILLI: _0x33f5x2['MILLI'],
            SECOND: _0x33f5x2['SECOND'],
            MINUTE: _0x33f5x2['MINUTE'],
            HOUR: _0x33f5x2['HOUR'],
            DAY: _0x33f5x2['DAY'],
            WEEK: 'w',
            MONTH: _0x33f5x2['MONTH'],
            QUARTER: 'q',
            YEAR: _0x33f5x2['YEAR']
        };
        Ext.apply(this, _0x33f5x3);
        var _0x33f5x1 = this;
        this['units'] = [ _0x33f5x1['MILLI'], _0x33f5x1['SECOND'], _0x33f5x1['MINUTE'], _0x33f5x1['HOUR'], _0x33f5x1['DAY'], _0x33f5x1['WEEK'], _0x33f5x1['MONTH'], _0x33f5x1['QUARTER'], _0x33f5x1['YEAR'] ];
    },
    onLocalized: function() {
        this['setUnitNames'](this.L('unitNames'));
    },
    setUnitNames: function(_0x33f5x5) {
        var _0x33f5x4 = this['unitsByName'] = {};
        this['l10n']['unitNames'] = _0x33f5x5;
        this['_unitNames'] = Ext.apply({}, _0x33f5x5);
        var _0x33f5x1 = this['unitHash'];
        for (var _0x33f5x2 in _0x33f5x1) {
            if (_0x33f5x1['hasOwnProperty'](_0x33f5x2)) {
                var _0x33f5x3 = _0x33f5x1[_0x33f5x2];
                this['_unitNames'][_0x33f5x3] = this['_unitNames'][_0x33f5x2];
                _0x33f5x4[_0x33f5x2] = _0x33f5x3;
                _0x33f5x4[_0x33f5x3] = _0x33f5x3;
            }
        }
    },
    betweenLesser: function(_0x33f5x1, _0x33f5x4, _0x33f5x2) {
        var _0x33f5x3 = _0x33f5x1['getTime']();
        return _0x33f5x4['getTime']() <= _0x33f5x3 && _0x33f5x3 < _0x33f5x2['getTime']();
    },
    constrain: function(_0x33f5x1, _0x33f5x3, _0x33f5x2) {
        return this['min'](this['max'](_0x33f5x1, _0x33f5x3), _0x33f5x2);
    },
    compareUnits: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = Ext.Array.indexOf(this['units'], _0x33f5x3), _0x33f5x4 = Ext.Array.indexOf(this['units'], _0x33f5x1);
        return _0x33f5x2 > _0x33f5x4 ? 1 : _0x33f5x2 < _0x33f5x4 ? -1 : 0;
    },
    isUnitGreater: function(_0x33f5x1, _0x33f5x2) {
        return this['compareUnits'](_0x33f5x1, _0x33f5x2) > 0;
    },
    copyTimeValues: function(_0x33f5x1, _0x33f5x2) {
        _0x33f5x1['setHours'](_0x33f5x2['getHours']());
        _0x33f5x1['setMinutes'](_0x33f5x2['getMinutes']());
        _0x33f5x1['setSeconds'](_0x33f5x2['getSeconds']());
        _0x33f5x1['setMilliseconds'](_0x33f5x2['getMilliseconds']());
    },
    add: function(_0x33f5x1, _0x33f5x3, _0x33f5x5) {
        var _0x33f5x8 = Ext.Date['clone'](_0x33f5x1);
        if (!_0x33f5x3 || _0x33f5x5 === 0) {
            return _0x33f5x8;
        }
        switch (_0x33f5x3['toLowerCase']()) {
          case this['MILLI']:
            _0x33f5x8 = new Date(_0x33f5x1['getTime']() + _0x33f5x5);
            break;

          case this['SECOND']:
            _0x33f5x8 = new Date(_0x33f5x1['getTime']() + _0x33f5x5 * 1e3);
            break;

          case this['MINUTE']:
            _0x33f5x8 = new Date(_0x33f5x1['getTime']() + _0x33f5x5 * 6e4);
            break;

          case this['HOUR']:
            _0x33f5x8 = new Date(_0x33f5x1['getTime']() + _0x33f5x5 * 36e5);
            break;

          case this['DAY']:
            _0x33f5x8['setDate'](_0x33f5x1['getDate']() + _0x33f5x5);
            if (_0x33f5x8['getHours']() === 23 && _0x33f5x1['getHours']() === 0) {
                _0x33f5x8 = Ext.Date['add'](_0x33f5x8, Ext.Date.HOUR, 1);
            }
            ;
            break;

          case this['WEEK']:
            _0x33f5x8['setDate'](_0x33f5x1['getDate']() + _0x33f5x5 * 7);
            break;

          case this['MONTH']:
            var _0x33f5x2 = _0x33f5x1['getDate']();
            if (_0x33f5x2 > 28) {
                _0x33f5x2 = Math['min'](_0x33f5x2, Ext.Date['getLastDateOfMonth'](this['add'](Ext.Date['getFirstDateOfMonth'](_0x33f5x1), this.MONTH, _0x33f5x5))['getDate']());
            }
            ;
            _0x33f5x8['setDate'](_0x33f5x2);
            _0x33f5x8['setMonth'](_0x33f5x8['getMonth']() + _0x33f5x5);
            break;

          case this['QUARTER']:
            _0x33f5x8 = this['add'](_0x33f5x1, this.MONTH, _0x33f5x5 * 3);
            break;

          case this['YEAR']:
            _0x33f5x8['setFullYear'](_0x33f5x1['getFullYear']() + _0x33f5x5);
            break;
        }
        return _0x33f5x8;
    },
    getUnitDurationInMs: function(_0x33f5x2) {
        return this['add'](new Date(1, 0, 1), _0x33f5x2, 1) - new Date(1, 0, 1);
    },
    getMeasuringUnit: function(_0x33f5x2) {
        if (_0x33f5x2 === this['WEEK']) {
            return this['DAY'];
        }
        return _0x33f5x2;
    },
    getDurationInUnit: function(_0x33f5x5, _0x33f5x2, _0x33f5x3, _0x33f5x4) {
        var _0x33f5x1;
        switch (_0x33f5x3) {
          case this['YEAR']:
            _0x33f5x1 = this['getDurationInYears'](_0x33f5x5, _0x33f5x2);
            break;

          case this['QUARTER']:
            _0x33f5x1 = this['getDurationInMonths'](_0x33f5x5, _0x33f5x2) / 3;
            break;

          case this['MONTH']:
            _0x33f5x1 = this['getDurationInMonths'](_0x33f5x5, _0x33f5x2);
            break;

          case this['WEEK']:
            _0x33f5x1 = this['getDurationInDays'](_0x33f5x5, _0x33f5x2) / 7;
            break;

          case this['DAY']:
            _0x33f5x1 = this['getDurationInDays'](_0x33f5x5, _0x33f5x2);
            break;

          case this['HOUR']:
            _0x33f5x1 = this['getDurationInHours'](_0x33f5x5, _0x33f5x2);
            break;

          case this['MINUTE']:
            _0x33f5x1 = this['getDurationInMinutes'](_0x33f5x5, _0x33f5x2);
            break;

          case this['SECOND']:
            _0x33f5x1 = this['getDurationInSeconds'](_0x33f5x5, _0x33f5x2);
            break;

          case this['MILLI']:
            _0x33f5x1 = this['getDurationInMilliseconds'](_0x33f5x5, _0x33f5x2);
            break;
        }
        return _0x33f5x4 ? _0x33f5x1 : Math['round'](_0x33f5x1);
    },
    getUnitToBaseUnitRatio: function(_0x33f5x1, _0x33f5x2) {
        if (_0x33f5x1 === _0x33f5x2) {
            return 1;
        }
        switch (_0x33f5x1) {
          case this['YEAR']:
            switch (_0x33f5x2) {
              case this['QUARTER']:
                return 1 / 4;

              case this['MONTH']:
                return 1 / 12;
            }
            ;
            break;

          case this['QUARTER']:
            switch (_0x33f5x2) {
              case this['YEAR']:
                return 4;

              case this['MONTH']:
                return 1 / 3;
            }
            ;
            break;

          case this['MONTH']:
            switch (_0x33f5x2) {
              case this['YEAR']:
                return 12;

              case this['QUARTER']:
                return 3;
            }
            ;
            break;

          case this['WEEK']:
            switch (_0x33f5x2) {
              case this['DAY']:
                return 1 / 7;

              case this['HOUR']:
                return 1 / 168;
            }
            ;
            break;

          case this['DAY']:
            switch (_0x33f5x2) {
              case this['WEEK']:
                return 7;

              case this['HOUR']:
                return 1 / 24;

              case this['MINUTE']:
                return 1 / 1440;
            }
            ;
            break;

          case this['HOUR']:
            switch (_0x33f5x2) {
              case this['DAY']:
                return 24;

              case this['MINUTE']:
                return 1 / 60;
            }
            ;
            break;

          case this['MINUTE']:
            switch (_0x33f5x2) {
              case this['HOUR']:
                return 60;

              case this['SECOND']:
                return 1 / 60;

              case this['MILLI']:
                return 1 / 6e4;
            }
            ;
            break;

          case this['SECOND']:
            switch (_0x33f5x2) {
              case this['MILLI']:
                return 1 / 1e3;
            }
            ;
            break;

          case this['MILLI']:
            switch (_0x33f5x2) {
              case this['SECOND']:
                return 1e3;
            }
            ;
            break;
        }
        return -1;
    },
    getDurationInMilliseconds: function(_0x33f5x1, _0x33f5x2) {
        return _0x33f5x2 - _0x33f5x1;
    },
    getDurationInSeconds: function(_0x33f5x1, _0x33f5x2) {
        return (_0x33f5x2 - _0x33f5x1) / 1e3;
    },
    getDurationInMinutes: function(_0x33f5x1, _0x33f5x2) {
        return (_0x33f5x2 - _0x33f5x1) / 6e4;
    },
    getDurationInHours: function(_0x33f5x1, _0x33f5x2) {
        return (_0x33f5x2 - _0x33f5x1) / 36e5;
    },
    getDurationInDays: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = _0x33f5x3['getTimezoneOffset']() - _0x33f5x1['getTimezoneOffset']();
        return (_0x33f5x1 - _0x33f5x3 + _0x33f5x2 * 60 * 1e3) / 864e5;
    },
    getDurationInMonths: function(_0x33f5x1, _0x33f5x2) {
        return (_0x33f5x2['getFullYear']() - _0x33f5x1['getFullYear']()) * 12 + (_0x33f5x2['getMonth']() - _0x33f5x1['getMonth']());
    },
    getDurationInYears: function(_0x33f5x1, _0x33f5x2) {
        return this['getDurationInMonths'](_0x33f5x1, _0x33f5x2) / 12;
    },
    min: function(_0x33f5x1, _0x33f5x2) {
        return (_0x33f5x1 && _0x33f5x1.valueOf() || _0x33f5x1) < (_0x33f5x2 && _0x33f5x2.valueOf() || _0x33f5x2) ? _0x33f5x1 : _0x33f5x2;
    },
    max: function(_0x33f5x1, _0x33f5x2) {
        return (_0x33f5x1 && _0x33f5x1.valueOf() || _0x33f5x1) > (_0x33f5x2 && _0x33f5x2.valueOf() || _0x33f5x2) ? _0x33f5x1 : _0x33f5x2;
    },
    intersectSpans: function(_0x33f5x3, _0x33f5x4, _0x33f5x1, _0x33f5x2) {
        return this['betweenLesser'](_0x33f5x3, _0x33f5x1, _0x33f5x2) || this['betweenLesser'](_0x33f5x1, _0x33f5x3, _0x33f5x4);
    },
    getNameOfUnit: function(_0x33f5x2) {
        _0x33f5x2 = this['getUnitByName'](_0x33f5x2);
        switch (_0x33f5x2['toLowerCase']()) {
          case this['YEAR']:
            return 'YEAR';

          case this['QUARTER']:
            return 'QUARTER';

          case this['MONTH']:
            return 'MONTH';

          case this['WEEK']:
            return 'WEEK';

          case this['DAY']:
            return 'DAY';

          case this['HOUR']:
            return 'HOUR';

          case this['MINUTE']:
            return 'MINUTE';

          case this['SECOND']:
            return 'SECOND';

          case this['MILLI']:
            return 'MILLI';
        }
        throw 'Incorrect UnitName';
    },
    getReadableNameOfUnit: function(_0x33f5x1, _0x33f5x2) {
        if (!this['isLocaleApplied']()) {
            this['applyLocale']();
        }
        return this['_unitNames'][_0x33f5x1][_0x33f5x2 ? 'plural' : 'single'];
    },
    getShortNameOfUnit: function(_0x33f5x2) {
        if (!this['isLocaleApplied']()) {
            this['applyLocale']();
        }
        return this['_unitNames'][_0x33f5x2]['abbrev'];
    },
    getUnitByName: function(_0x33f5x2) {
        if (!this['isLocaleApplied']()) {
            this['applyLocale']();
        }
        if (!this['unitsByName'][_0x33f5x2]) {
            Ext['Error']['raise']('Unknown unit name: ' + _0x33f5x2);
        }
        return this['unitsByName'][_0x33f5x2];
    },
    getNext: function(_0x33f5x3, _0x33f5x9, _0x33f5x2, _0x33f5x8) {
        var _0x33f5x5 = Ext.Date['clone'](_0x33f5x3);
        _0x33f5x8 = arguments['length'] < 4 ? 1 : _0x33f5x8;
        _0x33f5x2 = _0x33f5x2 == null ? 1 : _0x33f5x2;
        switch (_0x33f5x9) {
          case this['MILLI']:
            _0x33f5x5 = this['add'](_0x33f5x3, _0x33f5x9, _0x33f5x2);
            break;

          case this['SECOND']:
            _0x33f5x5 = this['add'](_0x33f5x3, _0x33f5x9, _0x33f5x2);
            if (_0x33f5x5['getMilliseconds']() > 0) {
                _0x33f5x5['setMilliseconds'](0);
            }
            ;
            break;

          case this['MINUTE']:
            _0x33f5x5 = this['add'](_0x33f5x3, _0x33f5x9, _0x33f5x2);
            if (_0x33f5x5['getSeconds']() > 0) {
                _0x33f5x5['setSeconds'](0);
            }
            ;
            if (_0x33f5x5['getMilliseconds']() > 0) {
                _0x33f5x5['setMilliseconds'](0);
            }
            ;
            break;

          case this['HOUR']:
            _0x33f5x5 = this['add'](_0x33f5x3, _0x33f5x9, _0x33f5x2);
            if (_0x33f5x5['getMinutes']() > 0) {
                _0x33f5x5['setMinutes'](0);
            }
            ;
            if (_0x33f5x5['getSeconds']() > 0) {
                _0x33f5x5['setSeconds'](0);
            }
            ;
            if (_0x33f5x5['getMilliseconds']() > 0) {
                _0x33f5x5['setMilliseconds'](0);
            }
            ;
            break;

          case this['DAY']:
            var _0x33f5x4 = _0x33f5x3['getHours']() === 23 && this['add'](_0x33f5x5, this.HOUR, 1)['getHours']() === 1;
            if (_0x33f5x4) {
                _0x33f5x5 = this['add'](_0x33f5x5, this.DAY, 2);
                this['clearTime'](_0x33f5x5);
                return _0x33f5x5;
            }
            ;
            this['clearTime'](_0x33f5x5);
            _0x33f5x5 = this['add'](_0x33f5x5, this.DAY, _0x33f5x2);
            if (_0x33f5x5['getHours']() === 1) {
                this['clearTime'](_0x33f5x5);
            }
            ;
            break;

          case this['WEEK']:
            this['clearTime'](_0x33f5x5);
            var _0x33f5x1 = _0x33f5x5['getDay']();
            _0x33f5x5 = this['add'](_0x33f5x5, this.DAY, _0x33f5x8 - _0x33f5x1 + 7 * (_0x33f5x2 - (_0x33f5x8 <= _0x33f5x1 ? 0 : 1)));
            if (_0x33f5x5['getDay']() !== _0x33f5x8) {
                _0x33f5x5 = this['add'](_0x33f5x5, this.HOUR, 1);
            } else {
                this['clearTime'](_0x33f5x5);
            }
            ;
            break;

          case this['MONTH']:
            _0x33f5x5 = this['add'](_0x33f5x5, this.MONTH, _0x33f5x2);
            _0x33f5x5['setDate'](1);
            this['clearTime'](_0x33f5x5);
            break;

          case this['QUARTER']:
            _0x33f5x5 = this['add'](_0x33f5x5, this.MONTH, (_0x33f5x2 - 1) * 3 + (3 - _0x33f5x5['getMonth']() % 3));
            this['clearTime'](_0x33f5x5);
            _0x33f5x5['setDate'](1);
            break;

          case this['YEAR']:
            _0x33f5x5 = new Date(_0x33f5x5['getFullYear']() + _0x33f5x2, 0, 1);
            break;

          default:
            throw 'Invalid date unit';
        }
        return _0x33f5x5;
    },
    getNumberOfMsFromTheStartOfDay: function(_0x33f5x2) {
        return _0x33f5x2 - this['clearTime'](_0x33f5x2, true) || 864e5;
    },
    getNumberOfMsTillTheEndOfDay: function(_0x33f5x2) {
        return this['getStartOfNextDay'](_0x33f5x2, true) - _0x33f5x2;
    },
    getStartOfNextDay: function(_0x33f5x1, _0x33f5x8, _0x33f5x5) {
        var _0x33f5x4 = this['add'](_0x33f5x5 ? _0x33f5x1 : this['clearTime'](_0x33f5x1, _0x33f5x8), this.DAY, 1);
        if (_0x33f5x4['getDate']() == _0x33f5x1['getDate']()) {
            var _0x33f5x3 = this['add'](this['clearTime'](_0x33f5x1, _0x33f5x8), this.DAY, 2)['getTimezoneOffset']();
            var _0x33f5x2 = _0x33f5x1['getTimezoneOffset']();
            _0x33f5x4 = this['add'](_0x33f5x4, this.MINUTE, _0x33f5x2 - _0x33f5x3);
        }
        return _0x33f5x4;
    },
    getEndOfPreviousDay: function(_0x33f5x1, _0x33f5x3) {
        var _0x33f5x2 = _0x33f5x3 ? _0x33f5x1 : this['clearTime'](_0x33f5x1, true);
        if (_0x33f5x2 - _0x33f5x1) {
            return _0x33f5x2;
        } else {
            return this['add'](_0x33f5x2, this.DAY, -1);
        }
    },
    timeSpanContains: function(_0x33f5x3, _0x33f5x1, _0x33f5x4, _0x33f5x2) {
        return _0x33f5x4 - _0x33f5x3 >= 0 && _0x33f5x1 - _0x33f5x2 >= 0;
    },
    compareWithPrecision: function(_0x33f5x5, _0x33f5x3, _0x33f5x8) {
        var _0x33f5x4 = Ext.ux.Scheduler.util.Date, _0x33f5x1 = Ext.Date, _0x33f5x2;
        switch (_0x33f5x8) {
          case _0x33f5x4['DAY']:
            _0x33f5x5 = Number(_0x33f5x1['format'](_0x33f5x5, 'Ymd'));
            _0x33f5x3 = Number(_0x33f5x1['format'](_0x33f5x3, 'Ymd'));
            break;

          case _0x33f5x4['WEEK']:
            _0x33f5x5 = Number(_0x33f5x1['format'](_0x33f5x5, 'YmW'));
            _0x33f5x3 = Number(_0x33f5x1['format'](_0x33f5x3, 'YmW'));
            break;

          case _0x33f5x4['MONTH']:
            _0x33f5x5 = Number(_0x33f5x1['format'](_0x33f5x5, 'Ym'));
            _0x33f5x3 = Number(_0x33f5x1['format'](_0x33f5x3, 'Ym'));
            break;

          case _0x33f5x4['QUARTER']:
            _0x33f5x5 = _0x33f5x5['getFullYear']() * 4 + Math['floor'](_0x33f5x5['getMonth']() / 3);
            _0x33f5x3 = _0x33f5x3['getFullYear']() * 4 + Math['floor'](_0x33f5x3['getMonth']() / 3);
            break;

          case _0x33f5x4['YEAR']:
            _0x33f5x5 = _0x33f5x5['getFullYear']();
            _0x33f5x3 = _0x33f5x3['getFullYear']();
            break;

          default:
            ;

          case _0x33f5x4['MILLI']:
            ;

          case _0x33f5x4['SECOND']:
            ;

          case _0x33f5x4['MINUTE']:
            ;

          case _0x33f5x4['HOUR']:
            _0x33f5x8 = _0x33f5x8 && this['getUnitDurationInMs'](_0x33f5x8) || 1;
            _0x33f5x5 = Math['floor'](_0x33f5x5.valueOf() / _0x33f5x8);
            _0x33f5x3 = Math['floor'](_0x33f5x3.valueOf() / _0x33f5x8);
            break;
        }
        _0x33f5x5 < _0x33f5x3 && (_0x33f5x2 = -1) || _0x33f5x5 > _0x33f5x3 && (_0x33f5x2 = +1) || (_0x33f5x2 = 0);
        return _0x33f5x2;
    },
    getValueInUnits: function(_0x33f5x2, _0x33f5x1) {
        switch (_0x33f5x1) {
          case this['MONTH']:
            return _0x33f5x2['getMonth']();

          case this['DAY']:
            return _0x33f5x2['getDate']();

          case this['HOUR']:
            return _0x33f5x2['getHours']();

          case this['MINUTE']:
            return _0x33f5x2['getMinutes']();

          case this['SECOND']:
            return _0x33f5x2['getSeconds']();
        }
    },
    setValueInUnits: function(_0x33f5x1, _0x33f5x3, _0x33f5x5) {
        var _0x33f5x2 = Ext.Date['clone'](_0x33f5x1), _0x33f5x4;
        switch (_0x33f5x3) {
          case this['YEAR']:
            _0x33f5x4 = 'setFullYear';
            break;

          case this['MONTH']:
            _0x33f5x4 = 'setMonth';
            break;

          case this['DAY']:
            _0x33f5x4 = 'setDate';
            break;

          case this['HOUR']:
            _0x33f5x4 = 'setHours';
            break;

          case this['MINUTE']:
            _0x33f5x4 = 'setMinutes';
            break;

          case this['SECOND']:
            _0x33f5x4 = 'setSeconds';
            break;

          case this['MILLI']:
            _0x33f5x4 = 'setMilliseconds';
            break;
        }
        _0x33f5x2[_0x33f5x4](_0x33f5x5);
        return _0x33f5x2;
    },
    getSubUnit: function(_0x33f5x2) {
        switch (_0x33f5x2) {
          case this['YEAR']:
            return this['MONTH'];

          case this['MONTH']:
            return this['DAY'];

          case this['DAY']:
            return this['HOUR'];

          case this['HOUR']:
            return this['MINUTE'];

          case this['MINUTE']:
            return this['SECOND'];

          case this['SECOND']:
            return this['MILLI'];
        }
    },
    setValueInSubUnits: function(_0x33f5x2, _0x33f5x1, _0x33f5x3) {
        _0x33f5x1 = this['getSubUnit'](_0x33f5x1);
        return this['setValueInUnits'](_0x33f5x2, _0x33f5x1, _0x33f5x3);
    },
    mergeDates: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
        var _0x33f5x4 = Ext.Date['clone'](_0x33f5x3);
        switch (_0x33f5x2) {
          case this['YEAR']:
            _0x33f5x4['setFullYear'](_0x33f5x1['getFullYear']());

          case this['MONTH']:
            _0x33f5x4['setMonth'](_0x33f5x1['getMonth']());

          case this['WEEK']:
            ;

          case this['DAY']:
            if (_0x33f5x2 === this['WEEK']) {
                _0x33f5x4 = this['add'](_0x33f5x4, this.DAY, _0x33f5x1['getDay']() - _0x33f5x4['getDay']());
            } else {
                _0x33f5x4['setDate'](_0x33f5x1['getDate']());
            }
            ;

          case this['HOUR']:
            _0x33f5x4['setHours'](_0x33f5x1['getHours']());

          case this['MINUTE']:
            _0x33f5x4['setMinutes'](_0x33f5x1['getMinutes']());

          case this['SECOND']:
            _0x33f5x4['setSeconds'](_0x33f5x1['getSeconds']());

          case this['MILLI']:
            _0x33f5x4['setMilliseconds'](_0x33f5x1['getMilliseconds']());
        }
        return _0x33f5x4;
    },
    splitToSubUnits: function(_0x33f5x4, _0x33f5x3, _0x33f5x2, _0x33f5x1) {
        _0x33f5x2 = _0x33f5x2 || 1;
        _0x33f5x1 = arguments['length'] < 4 ? 1 : _0x33f5x1;
        switch (_0x33f5x3) {
          case this['MONTH']:
            return this['splitMonth'](_0x33f5x4, _0x33f5x2, _0x33f5x1);

          case this['WEEK']:
            ;

          case this['DAY']:
            return this['splitDay'](_0x33f5x4, _0x33f5x2);

          default:
            break;
        }
    },
    splitYear: function(_0x33f5x5, _0x33f5x3) {
        var _0x33f5x1 = this['clearTime'](_0x33f5x5, true);
        _0x33f5x1['setMonth'](0);
        _0x33f5x1['setDate'](1);
        var _0x33f5x2 = [];
        for (var _0x33f5x4 = 0; _0x33f5x4 <= 12; _0x33f5x4 = _0x33f5x4 + _0x33f5x3) {
            _0x33f5x2['push'](this['add'](_0x33f5x1, this.MONTH, _0x33f5x4));
        }
        return _0x33f5x2;
    },
    splitMonth: function(_0x33f5x7, _0x33f5x3, _0x33f5x9) {
        var _0x33f5x1 = this['clearTime'](_0x33f5x7, true);
        _0x33f5x1['setDate'](1);
        _0x33f5x1 = this['add'](_0x33f5x1, this.DAY, _0x33f5x9 - _0x33f5x1['getDay']());
        var _0x33f5x4 = Ext.Date['clone'](_0x33f5x1);
        var _0x33f5x8 = this['add'](_0x33f5x1, this.MONTH, 1);
        var _0x33f5x2 = [];
        for (var _0x33f5x5 = 0; _0x33f5x4['getTime']() < _0x33f5x8['getTime'](); _0x33f5x5 = _0x33f5x5 + _0x33f5x3) {
            _0x33f5x4 = this['add'](_0x33f5x1, this.WEEK, _0x33f5x5);
            _0x33f5x2['push'](_0x33f5x4);
        }
        return _0x33f5x2;
    },
    splitWeek: function(_0x33f5x8, _0x33f5x3, _0x33f5x5) {
        var _0x33f5x1 = this['add'](_0x33f5x8, this.DAY, _0x33f5x5 - _0x33f5x8['getDay']());
        _0x33f5x1 = this['clearTime'](_0x33f5x1);
        var _0x33f5x2 = [];
        for (var _0x33f5x4 = 0; _0x33f5x4 <= 7; _0x33f5x4 = _0x33f5x4 + _0x33f5x3) {
            _0x33f5x2['push'](this['add'](_0x33f5x1, this.DAY, _0x33f5x4));
        }
        return _0x33f5x2;
    },
    splitDay: function(_0x33f5x5, _0x33f5x1) {
        var _0x33f5x4 = this['clearTime'](_0x33f5x5, true);
        var _0x33f5x2 = [];
        for (var _0x33f5x3 = 0; _0x33f5x3 <= 24; _0x33f5x3 = _0x33f5x3 + _0x33f5x1) {
            _0x33f5x2['push'](this['add'](_0x33f5x4, this.HOUR, _0x33f5x3));
        }
        return _0x33f5x2;
    },
    splitHour: function(_0x33f5x5, _0x33f5x1) {
        var _0x33f5x4 = new Date(_0x33f5x5['getTime']());
        _0x33f5x4['setMinutes'](0);
        _0x33f5x4['setSeconds'](0);
        _0x33f5x4['setMilliseconds'](0);
        var _0x33f5x2 = [];
        for (var _0x33f5x3 = 0; _0x33f5x3 <= 60; _0x33f5x3 = _0x33f5x3 + _0x33f5x1) {
            _0x33f5x2['push'](this['add'](_0x33f5x4, this.MINUTE, _0x33f5x3));
        }
        return _0x33f5x2;
    },
    splitMinute: function(_0x33f5x5, _0x33f5x1) {
        var _0x33f5x4 = Ext.Date['clone'](_0x33f5x5);
        _0x33f5x4['setSeconds'](0);
        _0x33f5x4['setMilliseconds'](0);
        var _0x33f5x2 = [];
        for (var _0x33f5x3 = 0; _0x33f5x3 <= 60; _0x33f5x3 = _0x33f5x3 + _0x33f5x1) {
            _0x33f5x2['push'](this['add'](_0x33f5x4, this.SECOND, _0x33f5x3));
        }
        return _0x33f5x2;
    },
    clearTime: function(_0x33f5x2, _0x33f5x1) {
        if (_0x33f5x2['getHours']() > 0 || _0x33f5x2['getMinutes']() > 0 || _0x33f5x2['getSeconds']() > 0) {
            return Ext.Date['clearTime'](_0x33f5x2, _0x33f5x1);
        }
        return _0x33f5x1 ? Ext.Date['clone'](_0x33f5x2) : _0x33f5x2;
    }
});

Ext.define('Ext.ux.Scheduler.model.Range', {
    extend: Ext.ux.Scheduler.model.Customizable,
    idProperty: 'Id',
    startDateField: 'StartDate',
    endDateField: 'EndDate',
    nameField: 'Name',
    clsField: 'Cls',
    customizableFields: [ {
        name: 'StartDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'EndDate',
        type: 'date',
        dateFormat: 'c'
    }, {
        name: 'Cls',
        type: 'string'
    }, {
        name: 'Name',
        type: 'string'
    } ],
    setStartDate: function(_0x33f5x2, _0x33f5x4) {
        var _0x33f5x3 = this['getEndDate']();
        var _0x33f5x1 = this['getStartDate']();
        this['beginEdit']();
        this['set'](this['startDateField'], _0x33f5x2);
        if (_0x33f5x4 === true && _0x33f5x3 && _0x33f5x1) {
            this['setEndDate'](Ext.ux.Scheduler.util.Date.add(_0x33f5x2, Ext.ux.Scheduler.util.Date.MILLI, _0x33f5x3 - _0x33f5x1));
        }
        this['endEdit']();
    },
    setEndDate: function(_0x33f5x1, _0x33f5x4) {
        var _0x33f5x2 = this['getStartDate']();
        var _0x33f5x3 = this['getEndDate']();
        this['beginEdit']();
        this['set'](this['endDateField'], _0x33f5x1);
        if (_0x33f5x4 === true && _0x33f5x2 && _0x33f5x3) {
            this['setStartDate'](Ext.ux.Scheduler.util.Date.add(_0x33f5x1, Ext.ux.Scheduler.util.Date.MILLI, -(_0x33f5x3 - _0x33f5x2)));
        }
        this['endEdit']();
    },
    setStartEndDate: function(_0x33f5x1, _0x33f5x2) {
        this['beginEdit']();
        this['set'](this['startDateField'], _0x33f5x1);
        this['set'](this['endDateField'], _0x33f5x2);
        this['endEdit']();
    },
    getDates: function() {
        var _0x33f5x3 = [], _0x33f5x1 = this['getEndDate']();
        for (var _0x33f5x2 = Ext.Date['clearTime'](this['getStartDate'](), true); _0x33f5x2 < _0x33f5x1; _0x33f5x2 = Ext.ux.Scheduler.util.Date.add(_0x33f5x2, Ext.ux.Scheduler.util.Date.DAY, 1)) {
            _0x33f5x3['push'](_0x33f5x2);
        }
        return _0x33f5x3;
    },
    forEachDate: function(_0x33f5x1, _0x33f5x2) {
        return Ext.Array['each'](this['getDates'](), _0x33f5x1, _0x33f5x2);
    },
    isScheduled: function() {
        var _0x33f5x2 = this;
        return _0x33f5x2['getStartDate']() && _0x33f5x2['getEndDate']() && _0x33f5x2['areDatesValid']();
    },
    isValid: function() {
        var _0x33f5x3 = this, _0x33f5x2 = _0x33f5x3['callParent'](), _0x33f5x4, _0x33f5x1;
        if (_0x33f5x2) {
            _0x33f5x4 = _0x33f5x3['getStartDate'](), _0x33f5x1 = _0x33f5x3['getEndDate']();
            _0x33f5x2 = !_0x33f5x4 || !_0x33f5x1 || _0x33f5x1 - _0x33f5x4 >= 0;
        }
        return _0x33f5x2;
    },
    areDatesValid: function() {
        var _0x33f5x1 = this, _0x33f5x3 = _0x33f5x1['getStartDate'](), _0x33f5x2 = _0x33f5x1['getEndDate']();
        return !_0x33f5x3 || !_0x33f5x2 || _0x33f5x2 - _0x33f5x3 >= 0;
    },
    shift: function(_0x33f5x1, _0x33f5x2) {
        this['setStartEndDate'](Ext.ux.Scheduler.util.Date.add(this['getStartDate'](), _0x33f5x1, _0x33f5x2), Ext.ux.Scheduler.util.Date.add(this['getEndDate'](), _0x33f5x1, _0x33f5x2));
    },
    fullCopy: function() {
        return this['copy']['apply'](this, arguments);
    },
    intersectsRange: function(_0x33f5x4, _0x33f5x2) {
        var _0x33f5x3 = this['getStartDate']();
        var _0x33f5x1 = this['getEndDate']();
        return _0x33f5x3 && _0x33f5x1 && Ext.ux.Scheduler.util.Date['intersectSpans'](_0x33f5x3, _0x33f5x1, _0x33f5x4, _0x33f5x2);
    }
});

Ext.define('Ext.ux.Scheduler.data.Calendar', {
    extend: Ext.data['Store'],
    alias: 'store.calendar',
    mixins: [ Ext.ux.Scheduler.data.mixin.UniversalModelGetter, Robo.data.Store ],
    model: 'Ext.ux.Scheduler.model.CalendarDay',
    daysPerMonth: 30,
    daysPerWeek: 7,
    hoursPerDay: 24,
    unitsInMs: null,
    defaultNonWorkingTimeCssCls: 'sch-nonworkingtime',
    weekendsAreWorkdays: false,
    weekendFirstDay: 6,
    weekendSecondDay: 0,
    holidaysCache: null,
    availabilityIntervalsCache: null,
    daysIndex: null,
    weekAvailability: null,
    defaultWeekAvailability: null,
    nonStandardWeeksByStartDate: null,
    nonStandardWeeksStartDates: null,
    calendarId: null,
    parent: null,
    defaultAvailability: [ '00:00-24:00' ],
    name: null,
    suspendCacheUpdate: 0,
    availabilitySearchLimit: 1825,
    inheritableStatics: {
        getCalendar: function(_0x33f5x2) {
            if (_0x33f5x2 instanceof Ext.ux.Scheduler.data.Calendar) {
                return _0x33f5x2;
            }
            return Ext.data['StoreManager']['lookup']('GNT_CALENDAR:' + _0x33f5x2);
        },
        getAllCalendars: function() {
            var _0x33f5x2 = [];
            Ext.data['StoreManager']['each'](function(_0x33f5x1) {
                if (_0x33f5x1 instanceof Ext.ux.Scheduler.data.Calendar) {
                    _0x33f5x2['push'](_0x33f5x1);
                }
            });
            return _0x33f5x2;
        },
        removeAll: function() {
            var _0x33f5x2 = Ext.data['StoreManager'];
            _0x33f5x2['each'](function(_0x33f5x1) {
                if (_0x33f5x1 instanceof Ext.ux.Scheduler.data.Calendar) {
                    _0x33f5x2['unregister'](_0x33f5x1);
                    Ext.destroy(_0x33f5x1);
                }
            });
        }
    },
    constructor: function(_0x33f5x2) {
        _0x33f5x2 = _0x33f5x2 || {};
        var _0x33f5x1 = _0x33f5x2['parent'];
        delete _0x33f5x2['parent'];
        var _0x33f5x3 = _0x33f5x2['calendarId'];
        delete _0x33f5x2['calendarId'];
        this['callParent'](arguments);
        this['setParent'](_0x33f5x1);
        this['setCalendarId'](_0x33f5x3);
        this['unitsInMs'] = {
            MILLI: 1,
            SECOND: 1e3,
            MINUTE: 60 * 1e3,
            HOUR: 60 * 60 * 1e3,
            DAY: this['hoursPerDay'] * 60 * 60 * 1e3,
            WEEK: this['daysPerWeek'] * this['hoursPerDay'] * 60 * 60 * 1e3,
            MONTH: this['daysPerMonth'] * this['hoursPerDay'] * 60 * 60 * 1e3,
            QUARTER: 3 * this['daysPerMonth'] * 24 * 60 * 60 * 1e3,
            YEAR: 4 * 3 * this['daysPerMonth'] * 24 * 60 * 60 * 1e3
        };
        this['defaultWeekAvailability'] = this['getDefaultWeekAvailability']();
        this['on']({
            update: this['clearCache'],
            datachanged: this['clearCache'],
            clear: this['clearCache'],
            scope: this
        });
        this['clearCache']();
    },
    getCalendarId: function() {
        return this['calendarId'];
    },
    setCalendarId: function(_0x33f5x1) {
        if (this['calendarId'] != null) {
            Ext.data['StoreManager']['unregister'](this);
        }
        this['calendarId'] = _0x33f5x1;
        if (_0x33f5x1 != null) {
            this['storeId'] = 'GNT_CALENDAR:' + _0x33f5x1;
            Ext.data['StoreManager']['register'](this);
        } else {
            this['storeId'] = null;
        }
        var _0x33f5x2 = this['proxy'];
        if (_0x33f5x2 && _0x33f5x2['extraParams']) {
            _0x33f5x2['extraParams']['calendarId'] = _0x33f5x1;
        }
    },
    getDefaultWeekAvailability: function() {
        var _0x33f5x5 = this['defaultAvailability'];
        var _0x33f5x4 = this['weekendFirstDay'];
        var _0x33f5x2 = this['weekendSecondDay'];
        var _0x33f5x3 = [];
        for (var _0x33f5x1 = 0; _0x33f5x1 < 7; _0x33f5x1++) {
            _0x33f5x3['push'](this['weekendsAreWorkdays'] || _0x33f5x1 != _0x33f5x4 && _0x33f5x1 != _0x33f5x2 ? new this['model']({
                Type: 'WEEKDAY',
                Weekday: _0x33f5x1,
                Availability: _0x33f5x5 && _0x33f5x5['slice']() || [],
                IsWorkingDay: true
            }) : new this['model']({
                Type: 'WEEKDAY',
                Weekday: _0x33f5x1,
                Availability: []
            }));
        }
        return _0x33f5x3;
    },
    clearCache: function() {
        if (this['suspendCacheUpdate'] > 0) {
            return;
        }
        this['holidaysCache'] = {};
        this['availabilityIntervalsCache'] = {};
        var _0x33f5x3 = this['daysIndex'] = {};
        var _0x33f5x2 = this['weekAvailability'] = [];
        var _0x33f5x4 = this['nonStandardWeeksStartDates'] = [];
        var _0x33f5x1 = this['nonStandardWeeksByStartDate'] = {};
        this['each'](function(_0x33f5xb) {
            var _0x33f5x5 = _0x33f5xb['getId']();
            var _0x33f5xd = /^(\d)-(\d\d\d\d\/\d\d\/\d\d)-(\d\d\d\d\/\d\d\/\d\d)$/['exec'](_0x33f5x5);
            var _0x33f5xe = /^WEEKDAY:(\d+)$/['exec'](_0x33f5x5);
            var _0x33f5xc = _0x33f5xb['getType']();
            var _0x33f5x11 = _0x33f5xb['getWeekday']();
            if (_0x33f5xc == 'WEEKDAYOVERRIDE' || _0x33f5xd) {
                var _0x33f5x8, _0x33f5xf;
                if (_0x33f5xc == 'WEEKDAYOVERRIDE') {
                    _0x33f5x8 = _0x33f5xb['getOverrideStartDate']();
                    _0x33f5xf = _0x33f5xb['getOverrideEndDate']();
                }
                if (_0x33f5xd) {
                    _0x33f5x8 = Ext.Date['parse'](_0x33f5xd[2], 'Y/m/d');
                    _0x33f5xf = Ext.Date['parse'](_0x33f5xd[3], 'Y/m/d');
                    _0x33f5x11 = _0x33f5xd[1];
                }
                if (_0x33f5x8 && _0x33f5xf && _0x33f5x11 != null) {
                    var _0x33f5x7 = _0x33f5x8 - 0;
                    if (!_0x33f5x1[_0x33f5x7]) {
                        _0x33f5x1[_0x33f5x7] = {
                            startDate: new Date(_0x33f5x8),
                            endDate: new Date(_0x33f5xf),
                            name: _0x33f5xb['getName'](),
                            weekAvailability: [],
                            mainDay: null
                        };
                        _0x33f5x4['push'](_0x33f5x7);
                    }
                    if (_0x33f5x11 >= 0) {
                        _0x33f5x1[_0x33f5x7]['weekAvailability'][_0x33f5x11] = _0x33f5xb;
                    } else {
                        _0x33f5x1[_0x33f5x7]['mainDay'] = _0x33f5xb;
                    }
                }
            } else {
                if (_0x33f5xc == 'WEEKDAY' || _0x33f5xe) {
                    if (_0x33f5xe) {
                        _0x33f5x11 = _0x33f5xe[1];
                    }
                    if (_0x33f5x11 != null) {
                        if (_0x33f5x11 < 0 || _0x33f5x11 > 6) {
                            throw new Error('Incorrect week day index');
                        }
                        _0x33f5x2[_0x33f5x11] = _0x33f5xb;
                    }
                } else {
                    var _0x33f5x9 = _0x33f5xb['getDate']();
                    if (_0x33f5x9) {
                        _0x33f5x3[_0x33f5x9 - 0] = _0x33f5xb;
                    }
                }
            }
        });
        _0x33f5x4['sort'](function(_0x33f5x8, _0x33f5x5) {
            return _0x33f5x8 - _0x33f5x5;
        });
        this['fireEvent']('calendarchange', this);
    },
    intersectsWithCurrentWeeks: function(_0x33f5x1, _0x33f5x3) {
        var _0x33f5x2 = false;
        this['forEachNonStandardWeek'](function(_0x33f5x8) {
            var _0x33f5x4 = _0x33f5x8['startDate'];
            var _0x33f5x5 = _0x33f5x8['endDate'];
            if (_0x33f5x4 <= _0x33f5x1 && _0x33f5x1 < _0x33f5x5 || _0x33f5x4 < _0x33f5x3 && _0x33f5x3 <= _0x33f5x5) {
                _0x33f5x2 = true;
                return false;
            }
        });
        return _0x33f5x2;
    },
    addNonStandardWeek: function(_0x33f5x1, _0x33f5x8, _0x33f5x2, _0x33f5x3) {
        _0x33f5x1 = Ext.Date['clearTime'](new Date(_0x33f5x1));
        _0x33f5x8 = Ext.Date['clearTime'](new Date(_0x33f5x8));
        if (this['intersectsWithCurrentWeeks'](_0x33f5x1, _0x33f5x8)) {
            throw new Error('Can not add intersecting week');
        }
        var _0x33f5x5 = this['model'];
        var _0x33f5x9 = [];
        Ext.Array['each'](_0x33f5x2, function(_0x33f5x7, _0x33f5xf) {
            if (_0x33f5x7 instanceof Ext.ux.Scheduler.model.CalendarDay) {
                _0x33f5x7['setType']('WEEKDAYOVERRIDE');
                _0x33f5x7['setOverrideStartDate'](_0x33f5x1);
                _0x33f5x7['setOverrideEndDate'](_0x33f5x8);
                _0x33f5x7['setWeekday'](_0x33f5xf);
                _0x33f5x7['setName'](_0x33f5x3 || 'Week override');
                _0x33f5x9['push'](_0x33f5x7);
            } else {
                if (Ext.isArray(_0x33f5x7)) {
                    var _0x33f5xe = new _0x33f5x5();
                    _0x33f5xe['setType']('WEEKDAYOVERRIDE');
                    _0x33f5xe['setOverrideStartDate'](_0x33f5x1);
                    _0x33f5xe['setOverrideEndDate'](_0x33f5x8);
                    _0x33f5xe['setWeekday'](_0x33f5xf);
                    _0x33f5xe['setName'](_0x33f5x3 || 'Week override');
                    _0x33f5xe['setAvailability'](_0x33f5x7);
                    _0x33f5x9['push'](_0x33f5xe);
                }
            }
        });
        var _0x33f5x4 = new _0x33f5x5();
        _0x33f5x4['setType']('WEEKDAYOVERRIDE');
        _0x33f5x4['setOverrideStartDate'](_0x33f5x1);
        _0x33f5x4['setOverrideEndDate'](_0x33f5x8);
        _0x33f5x4['setWeekday'](-1);
        _0x33f5x4['setName'](_0x33f5x3 || 'Week override');
        _0x33f5x9['push'](_0x33f5x4);
        this['add'](_0x33f5x9);
    },
    getNonStandardWeekByStartDate: function(_0x33f5x2) {
        return this['nonStandardWeeksByStartDate'][Ext.Date['clearTime'](new Date(_0x33f5x2)) - 0] || null;
    },
    getNonStandardWeekByDate: function(_0x33f5x4) {
        _0x33f5x4 = Ext.Date['clearTime'](new Date(_0x33f5x4)) - 0;
        var _0x33f5x5 = this['nonStandardWeeksStartDates'];
        var _0x33f5x2 = this['nonStandardWeeksByStartDate'];
        for (var _0x33f5x3 = 0; _0x33f5x3 < _0x33f5x5['length']; _0x33f5x3++) {
            var _0x33f5x1 = _0x33f5x2[_0x33f5x5[_0x33f5x3]];
            if (_0x33f5x1['startDate'] > _0x33f5x4) {
                break;
            }
            if (_0x33f5x1['startDate'] <= _0x33f5x4 && _0x33f5x4 <= _0x33f5x1['endDate']) {
                return _0x33f5x1;
            }
        }
        return null;
    },
    removeNonStandardWeek: function(_0x33f5x2) {
        _0x33f5x2 = Ext.Date['clearTime'](new Date(_0x33f5x2)) - 0;
        var _0x33f5x1 = this['getNonStandardWeekByStartDate'](_0x33f5x2);
        if (!_0x33f5x1) {
            return;
        }
        this['remove'](Ext.Array['clean'](_0x33f5x1['weekAvailability'])['concat'](_0x33f5x1['mainDay']));
    },
    forEachNonStandardWeek: function(_0x33f5x5, _0x33f5x3) {
        var _0x33f5x4 = this;
        var _0x33f5x8 = this['nonStandardWeeksStartDates'];
        var _0x33f5x2 = this['nonStandardWeeksByStartDate'];
        for (var _0x33f5x1 = 0; _0x33f5x1 < _0x33f5x8['length']; _0x33f5x1++) {
            if (_0x33f5x5['call'](_0x33f5x3 || _0x33f5x4, _0x33f5x2[_0x33f5x8[_0x33f5x1]]) === false) {
                return false;
            }
        }
    },
    setWeekendsAreWorkDays: function(_0x33f5x2) {
        if (_0x33f5x2 !== this['weekendsAreWorkdays']) {
            this['weekendsAreWorkdays'] = _0x33f5x2;
            this['defaultWeekAvailability'] = this['getDefaultWeekAvailability']();
            this['clearCache']();
        }
    },
    areWeekendsWorkDays: function() {
        return this['weekendsAreWorkdays'];
    },
    getCalendarDay: function(_0x33f5x2) {
        _0x33f5x2 = typeof _0x33f5x2 == 'number' ? new Date(_0x33f5x2) : _0x33f5x2;
        return this['getOverrideDay'](_0x33f5x2) || this['getWeekDay'](_0x33f5x2['getDay'](), _0x33f5x2) || this['getDefaultCalendarDay'](_0x33f5x2['getDay']());
    },
    getOverrideDay: function(_0x33f5x2) {
        return this['getOwnCalendarDay'](_0x33f5x2) || this['parent'] && this['parent']['getOverrideDay'](_0x33f5x2) || null;
    },
    getOwnCalendarDay: function(_0x33f5x2) {
        _0x33f5x2 = typeof _0x33f5x2 == 'number' ? new Date(_0x33f5x2) : _0x33f5x2;
        return this['daysIndex'][Ext.Date['clearTime'](_0x33f5x2, true) - 0];
    },
    getWeekDay: function(_0x33f5x3, _0x33f5x1) {
        if (_0x33f5x1) {
            var _0x33f5x2 = this['getNonStandardWeekByDate'](_0x33f5x1);
            if (_0x33f5x2 && _0x33f5x2['weekAvailability'][_0x33f5x3]) {
                return _0x33f5x2['weekAvailability'][_0x33f5x3];
            }
        }
        return this['weekAvailability'][_0x33f5x3] || this['parent'] && this['parent']['getWeekDay'](_0x33f5x3, _0x33f5x1) || null;
    },
    getDefaultCalendarDay: function(_0x33f5x2) {
        if (!this['hasOwnProperty']('defaultAvailability') && !this['hasOwnProperty']('weekendsAreWorkdays') && this['parent']) {
            return this['parent']['getDefaultCalendarDay'](_0x33f5x2);
        }
        return this['defaultWeekAvailability'][_0x33f5x2];
    },
    isHoliday: function(_0x33f5x3) {
        var _0x33f5x1 = _0x33f5x3 - 0;
        var _0x33f5x4 = this['holidaysCache'];
        if (_0x33f5x4[_0x33f5x1] != null) {
            return _0x33f5x4[_0x33f5x1];
        }
        _0x33f5x3 = typeof _0x33f5x3 == 'number' ? new Date(_0x33f5x3) : _0x33f5x3;
        var _0x33f5x2 = this['getCalendarDay'](_0x33f5x3);
        if (!_0x33f5x2) {
            throw 'Can\'t find day for ' + _0x33f5x3;
        }
        return _0x33f5x4[_0x33f5x1] = !_0x33f5x2['getIsWorkingDay']();
    },
    isWeekend: function(_0x33f5x1) {
        var _0x33f5x2 = _0x33f5x1['getDay']();
        return _0x33f5x2 === this['weekendFirstDay'] || _0x33f5x2 === this['weekendSecondDay'];
    },
    isWorkingDay: function(_0x33f5x2) {
        return !this['isHoliday'](_0x33f5x2);
    },
    convertMSDurationToUnit: function(_0x33f5x2, _0x33f5x1) {
        return _0x33f5x2 / this['unitsInMs'][Ext.ux.Scheduler.util.Date['getNameOfUnit'](_0x33f5x1)];
    },
    convertDurationToMs: function(_0x33f5x1, _0x33f5x2) {
        return _0x33f5x1 * this['unitsInMs'][Ext.ux.Scheduler.util.Date['getNameOfUnit'](_0x33f5x2)];
    },
    getHolidaysRanges: function(_0x33f5x3, _0x33f5x8, _0x33f5x2) {
        if (_0x33f5x3 > _0x33f5x8) {
            Ext['Error']['raise']('startDate can\'t be bigger than endDate');
        }
        _0x33f5x3 = Ext.Date['clearTime'](_0x33f5x3, true);
        _0x33f5x8 = Ext.Date['clearTime'](_0x33f5x8, true);
        var _0x33f5x1 = [], _0x33f5x9, _0x33f5x4;
        for (_0x33f5x4 = _0x33f5x3; _0x33f5x4 < _0x33f5x8; _0x33f5x4 = Ext.ux.Scheduler.util.Date['getNext'](_0x33f5x4, Ext.ux.Scheduler.util.Date.DAY, 1)) {
            if (this['isHoliday'](_0x33f5x4) || this['weekendsAreWorkdays'] && _0x33f5x2 && this['isWeekend'](_0x33f5x4)) {
                var _0x33f5x7 = this['getCalendarDay'](_0x33f5x4);
                var _0x33f5xf = _0x33f5x7 && _0x33f5x7['getCls']() || this['defaultNonWorkingTimeCssCls'];
                var _0x33f5x5 = Ext.ux.Scheduler.util.Date['getNext'](_0x33f5x4, Ext.ux.Scheduler.util.Date.DAY, 1);
                if (!_0x33f5x9) {
                    _0x33f5x9 = new Ext.ux.Scheduler.model.Range({
                        StartDate: _0x33f5x4,
                        EndDate: _0x33f5x5,
                        Cls: _0x33f5xf
                    });
                } else {
                    if (_0x33f5x9['getCls']() == _0x33f5xf) {
                        _0x33f5x9['setEndDate'](_0x33f5x5);
                    } else {
                        _0x33f5x1['push'](_0x33f5x9);
                        _0x33f5x9 = new Ext.ux.Scheduler.model.Range({
                            StartDate: _0x33f5x4,
                            EndDate: _0x33f5x5,
                            Cls: _0x33f5xf
                        });
                    }
                }
            } else {
                if (_0x33f5x9) {
                    _0x33f5x1['push'](_0x33f5x9);
                    _0x33f5x9 = null;
                }
            }
        }
        if (_0x33f5x9) {
            _0x33f5x1['push'](_0x33f5x9);
        }
        return _0x33f5x1;
    },
    forEachAvailabilityInterval: function(_0x33f5x17, _0x33f5x8, _0x33f5x10) {
        _0x33f5x10 = _0x33f5x10 || this;
        var _0x33f5xc = this;
        var _0x33f5x4 = _0x33f5x17['startDate'];
        var _0x33f5xb = _0x33f5x17['endDate'];
        var _0x33f5x6 = _0x33f5x17['isForward'] !== false;
        if (_0x33f5x6 ? !_0x33f5x4 : !_0x33f5xb) {
            throw new Error('At least `startDate` or `endDate` is required, depending from the `isForward` option');
        }
        var _0x33f5x2 = new Date(_0x33f5x6 ? _0x33f5x4 : _0x33f5xb);
        var _0x33f5x3 = Ext.ux.Scheduler.util.Date;
        if (_0x33f5x6) {
            if (!_0x33f5xb) {
                _0x33f5xb = _0x33f5x3['add'](_0x33f5x4, 'd', _0x33f5x17['availabilitySearchLimit'] || this['availabilitySearchLimit'] || 5 * 365);
            }
        } else {
            if (!_0x33f5x4) {
                _0x33f5x4 = _0x33f5x3['add'](_0x33f5xb, 'd', -(_0x33f5x17['availabilitySearchLimit'] || this['availabilitySearchLimit'] || 5 * 365));
            }
        }
        var _0x33f5x9 = false;
        while (_0x33f5x6 ? _0x33f5x2 < _0x33f5xb : _0x33f5x2 > _0x33f5x4) {
            var _0x33f5xe = this['getAvailabilityIntervalsFor'](_0x33f5x2 - (_0x33f5x6 ? 0 : 1), _0x33f5x6 ? _0x33f5x9 : false);
            for (var _0x33f5x7 = _0x33f5x6 ? 0 : _0x33f5xe['length'] - 1; _0x33f5x6 ? _0x33f5x7 < _0x33f5xe['length'] : _0x33f5x7 >= 0; _0x33f5x6 ? _0x33f5x7++ : _0x33f5x7--) {
                var _0x33f5x1 = _0x33f5xe[_0x33f5x7];
                var _0x33f5x11 = _0x33f5x1['startDate'];
                var _0x33f5xa = _0x33f5x1['endDate'];
                if (_0x33f5x11 >= _0x33f5xb || _0x33f5xa <= _0x33f5x4) {
                    continue;
                }
                var _0x33f5x5 = _0x33f5x11 < _0x33f5x4 ? _0x33f5x4 : _0x33f5x11;
                var _0x33f5xd = _0x33f5xa > _0x33f5xb ? _0x33f5xb : _0x33f5xa;
                if (_0x33f5x8['call'](_0x33f5x10, _0x33f5x5, _0x33f5xd) === false) {
                    return false;
                }
            }
            _0x33f5x2 = _0x33f5x6 ? _0x33f5x3['getStartOfNextDay'](_0x33f5x2, false, _0x33f5x9) : _0x33f5x3['getEndOfPreviousDay'](_0x33f5x2, _0x33f5x9);
            _0x33f5x9 = true;
        }
    },
    calculateDuration: function(_0x33f5x2, _0x33f5x4, _0x33f5x1) {
        var _0x33f5x3 = 0;
        this['forEachAvailabilityInterval']({
            startDate: _0x33f5x2,
            endDate: _0x33f5x4
        }, function(_0x33f5x9, _0x33f5x8) {
            var _0x33f5x5 = _0x33f5x9['getTimezoneOffset']() - _0x33f5x8['getTimezoneOffset']();
            _0x33f5x3 += _0x33f5x8 - _0x33f5x9 + _0x33f5x5 * 60 * 1e3;
        });
        return this['convertMSDurationToUnit'](_0x33f5x3, _0x33f5x1);
    },
    calculateEndDate: function(_0x33f5x2, _0x33f5x8, _0x33f5x1) {
        if (!_0x33f5x8) {
            return new Date(_0x33f5x2);
        }
        var _0x33f5x5 = Ext.ux.Scheduler.util.Date, _0x33f5x4;
        _0x33f5x8 = this['convertDurationToMs'](_0x33f5x8, _0x33f5x1);
        var _0x33f5x3 = _0x33f5x8 === 0 && Ext.Date['clearTime'](_0x33f5x2, true) - _0x33f5x2 === 0 ? _0x33f5x5['add'](_0x33f5x2, Ext.ux.Scheduler.util.Date.DAY, -1) : _0x33f5x2;
        this['forEachAvailabilityInterval']({
            startDate: _0x33f5x3
        }, function(_0x33f5xf, _0x33f5x7) {
            var _0x33f5xe = _0x33f5x7 - _0x33f5xf;
            var _0x33f5x9 = _0x33f5xf['getTimezoneOffset']() - _0x33f5x7['getTimezoneOffset']();
            if (_0x33f5xe >= _0x33f5x8) {
                _0x33f5x4 = new Date(_0x33f5xf - 0 + _0x33f5x8);
                return false;
            } else {
                _0x33f5x8 -= _0x33f5xe + _0x33f5x9 * 60 * 1e3;
            }
        });
        return _0x33f5x4;
    },
    calculateStartDate: function(_0x33f5x4, _0x33f5x3, _0x33f5x1) {
        if (!_0x33f5x3) {
            return new Date(_0x33f5x4);
        }
        var _0x33f5x2;
        _0x33f5x3 = this['convertDurationToMs'](_0x33f5x3, _0x33f5x1);
        this['forEachAvailabilityInterval']({
            endDate: _0x33f5x4,
            isForward: false
        }, function(_0x33f5x8, _0x33f5x5) {
            var _0x33f5x9 = _0x33f5x5 - _0x33f5x8;
            if (_0x33f5x9 >= _0x33f5x3) {
                _0x33f5x2 = new Date(_0x33f5x5 - _0x33f5x3);
                return false;
            } else {
                _0x33f5x3 -= _0x33f5x9;
            }
        });
        return _0x33f5x2;
    },
    skipNonWorkingTime: function(_0x33f5x2, _0x33f5x3) {
        var _0x33f5x1 = false;
        this['forEachAvailabilityInterval'](_0x33f5x3 ? {
            startDate: _0x33f5x2
        } : {
            endDate: _0x33f5x2,
            isForward: false
        }, function(_0x33f5x5, _0x33f5x4) {
            _0x33f5x2 = _0x33f5x3 ? _0x33f5x5 : _0x33f5x4;
            _0x33f5x1 = true;
            return false;
        });
        if (!_0x33f5x1) {
            throw 'skipNonWorkingTime: Cannot skip non-working time, please ensure that this calendar has any working period of time specified';
        }
        return new Date(_0x33f5x2);
    },
    skipWorkingTime: function(_0x33f5x2, _0x33f5x3, _0x33f5x1) {
        return _0x33f5x3 >= 0 ? this['calculateEndDate'](_0x33f5x2, _0x33f5x3, _0x33f5x1) : this['calculateStartDate'](_0x33f5x2, -_0x33f5x3, _0x33f5x1);
    },
    getAvailabilityIntervalsFor: function(_0x33f5x2, _0x33f5x1) {
        if (_0x33f5x1) {
            _0x33f5x2 = _0x33f5x2.valueOf();
        } else {
            if (_0x33f5x2 instanceof Date) {
                _0x33f5x2 = new Date(_0x33f5x2['getFullYear'](), _0x33f5x2['getMonth'](), _0x33f5x2['getDate']()).valueOf();
            } else {
                _0x33f5x2 = Ext.Date['clearTime'](new Date(_0x33f5x2)).valueOf();
            }
        }
        return this['availabilityIntervalsCache'][_0x33f5x2] = this['availabilityIntervalsCache'][_0x33f5x2] || this['getCalendarDay'](_0x33f5x2)['getAvailabilityIntervalsFor'](_0x33f5x2);
    },
    isChildOf: function(_0x33f5x3) {
        var _0x33f5x2 = this, _0x33f5x1 = false;
        while (_0x33f5x2 && !_0x33f5x1) {
            _0x33f5x1 = _0x33f5x2 === _0x33f5x3;
            _0x33f5x2 = _0x33f5x2['parent'];
        }
        return _0x33f5x1;
    },
    getParentableCalendars: function() {
        var _0x33f5x1 = this, _0x33f5x2 = [], _0x33f5x3 = Ext.ux.Scheduler.data.Calendar['getAllCalendars']();
        Ext.Array['each'](_0x33f5x3, function(_0x33f5x4) {
            if (_0x33f5x4 !== _0x33f5x1 && !_0x33f5x4['isChildOf'](_0x33f5x1)) {
                _0x33f5x2['push']({
                    Id: _0x33f5x4['calendarId'],
                    Name: _0x33f5x4['name'] || _0x33f5x4['calendarId']
                });
            }
        });
        return _0x33f5x2;
    },
    setParent: function(_0x33f5x5) {
        var _0x33f5x4 = Ext.ux.Scheduler.data.Calendar['getCalendar'](_0x33f5x5);
        if (_0x33f5x5 && !_0x33f5x4) {
            throw new Error('Invalid parent specified for the calendar');
        }
        if (this['parent'] != _0x33f5x4) {
            var _0x33f5x1 = this['proxy'];
            var _0x33f5x3 = {
                calendarchange: this['clearCache'],
                destroy: this['onParentDestroy'],
                scope: this
            };
            var _0x33f5x2 = this['parent'];
            if (_0x33f5x2) {
                _0x33f5x2['un'](_0x33f5x3);
            }
            this['parent'] = _0x33f5x4;
            if (_0x33f5x4) {
                _0x33f5x4['on'](_0x33f5x3);
            }
            if (_0x33f5x1 && _0x33f5x1['extraParams']) {
                _0x33f5x1['extraParams']['parentId'] = _0x33f5x4 ? _0x33f5x4['calendarId'] : null;
            }
            this['clearCache']();
            this['fireEvent']('parentchange', this, _0x33f5x4, _0x33f5x2);
        }
    },
    onParentDestroy: function() {
        this['setParent'](null);
    },
    isAvailabilityIntersected: function(_0x33f5x6, _0x33f5x1, _0x33f5xc) {
        var _0x33f5xd, _0x33f5x2, _0x33f5x5, _0x33f5x7;
        for (var _0x33f5x9 = 0; _0x33f5x9 < 7; _0x33f5x9++) {
            _0x33f5xd = this['getWeekDay'](_0x33f5x9) || this['getDefaultCalendarDay'](_0x33f5x9);
            _0x33f5x5 = _0x33f5x6['getWeekDay'](_0x33f5x9) || _0x33f5x6['getDefaultCalendarDay'](_0x33f5x9);
            if (!_0x33f5xd || !_0x33f5x5) {
                continue;
            }
            _0x33f5x2 = _0x33f5xd['getAvailability']();
            _0x33f5x7 = _0x33f5x5['getAvailability']();
            for (var _0x33f5x8 = 0, _0x33f5x3 = _0x33f5x2['length']; _0x33f5x8 < _0x33f5x3; _0x33f5x8++) {
                for (var _0x33f5x4 = 0, _0x33f5xa = _0x33f5x7['length']; _0x33f5x4 < _0x33f5xa; _0x33f5x4++) {
                    if (_0x33f5x7[_0x33f5x4]['startTime'] < _0x33f5x2[_0x33f5x8]['endTime'] && _0x33f5x7[_0x33f5x4]['endTime'] > _0x33f5x2[_0x33f5x8]['startTime']) {
                        return true;
                    }
                }
            }
        }
        var _0x33f5x10 = false;
        this['forEachNonStandardWeek'](function(_0x33f5xf) {
            if (_0x33f5xf['startDate'] >= _0x33f5xc) {
                return false;
            }
            if (_0x33f5x1 < _0x33f5xf['endDate']) {
                _0x33f5x10 = true;
                return false;
            }
        });
        return _0x33f5x10;
    }
});

Ext.define('Ext.ux.Scheduler.data.CrudManager', {
    extend: Ext.ux.Scheduler.crud.AbstractManager,
    mixins: [ Ext.ux.Scheduler.crud.encoder.Json, Ext.ux.Scheduler.crud.transport.Ajax ],
    resourceStore: null,
    eventStore: null,
    assignmentStore: null,
    dependencyStore: null,
    addRelatedStores: true,
    constructor: function(_0x33f5x3) {
        _0x33f5x3 = _0x33f5x3 || {};
        var _0x33f5x7 = _0x33f5x3['resourceStore'] || this['resourceStore'] || new Ext.ux.Scheduler.data.ResourceStore(), _0x33f5x4 = _0x33f5x3['eventStore'] || this['eventStore'] || new Ext.ux.Scheduler.data.EventStore(), _0x33f5x9 = _0x33f5x3['assignmentStore'] || this['assignmentStore'], _0x33f5x2 = _0x33f5x3['dependencyStore'] || this['dependencyStore'], _0x33f5xf = [];
        if (_0x33f5x4 && _0x33f5x3['addRelatedStores'] !== false) {
            var _0x33f5x8 = this['getEventStoreInfo'](_0x33f5x4, _0x33f5x3);
            _0x33f5x9 = _0x33f5x9 || _0x33f5x8['assignmentStore'];
            _0x33f5x7 = _0x33f5x7 || _0x33f5x8['resourceStore'];
            _0x33f5x2 = _0x33f5x2 || _0x33f5x8['dependencyStore'];
        }
        _0x33f5x4 && _0x33f5xf['push'](_0x33f5x4);
        _0x33f5x7 && _0x33f5xf['push'](_0x33f5x7);
        _0x33f5x9 && _0x33f5xf['push'](_0x33f5x9);
        _0x33f5x2 && _0x33f5xf['push'](_0x33f5x2);
        if (_0x33f5xf['length']) {
            var _0x33f5x1 = [];
            _0x33f5x7 && _0x33f5x1['push'](_0x33f5x7);
            _0x33f5x4 && _0x33f5x1['push'](_0x33f5x4);
            _0x33f5x9 && _0x33f5x1['push'](_0x33f5x9);
            _0x33f5x2 && _0x33f5x1['push'](_0x33f5x2);
            if (_0x33f5x1['length']) {
                _0x33f5x3['syncApplySequence'] = (_0x33f5x3['syncApplySequence'] || _0x33f5x3['stores'] || [])['concat'](_0x33f5x1);
            }
            var _0x33f5x5 = _0x33f5x3['stores'] || this['stores'];
            if (_0x33f5x5 && !Ext.isArray(_0x33f5x5)) {
                _0x33f5x5 = [ _0x33f5x5 ];
            }
            _0x33f5x3['stores'] = (_0x33f5x5 || [])['concat'](_0x33f5xf);
        }
        this['callParent']([ _0x33f5x3 ]);
        this['eventStore'] = this['getStoreDescriptor'](_0x33f5x4);
        this['resourceStore'] = this['getStoreDescriptor'](_0x33f5x7);
        this['assignmentStore'] = this['getStoreDescriptor'](_0x33f5x9);
        this['dependencyStore'] = this['getStoreDescriptor'](_0x33f5x2);
    },
    getEventStoreInfo: function(_0x33f5x4, _0x33f5x3) {
        if (!_0x33f5x4['isStore']) {
            if (typeof _0x33f5x4 == 'string') {
                _0x33f5x4 = Ext.data['StoreManager']['get'](_0x33f5x4);
            } else {
                _0x33f5x4 = _0x33f5x4['store'];
            }
        }
        var _0x33f5x2 = {}, _0x33f5x8 = _0x33f5x3['assignmentStore'], _0x33f5x5 = _0x33f5x3['resourceStore'], _0x33f5x1 = _0x33f5x3['dependencyStore'];
        !_0x33f5x8 && (_0x33f5x2['assignmentStore'] = _0x33f5x4['getAssignmentStore']());
        !_0x33f5x5 && (_0x33f5x2['resourceStore'] = _0x33f5x4['getResourceStore']());
        !_0x33f5x1 && (_0x33f5x2['dependencyStore'] = _0x33f5x4['getDependencyStore']());
        return _0x33f5x2;
    },
    getResourceStore: function() {
        return this['resourceStore'] && this['resourceStore']['store'];
    },
    setResourceStore: function(_0x33f5x2) {
        if (this['getResourceStore']()) {
            this['removeStore'](this['getResourceStore']());
        }
        this['addStore'](_0x33f5x2);
        this['resourceStore'] = {
            store: _0x33f5x2
        };
    },
    getEventStore: function() {
        return this['eventStore'] && this['eventStore']['store'];
    },
    setEventStore: function(_0x33f5x2) {
        if (this['getEventStore']()) {
            this['removeStore'](this['getEventStore']());
        }
        this['addStore'](_0x33f5x2);
        this['eventStore'] = {
            store: _0x33f5x2
        };
    },
    getAssignmentStore: function() {
        return this['assignmentStore'] && this['assignmentStore']['store'];
    },
    setAssignmentStore: function(_0x33f5x2) {
        if (this['getAssignmentStore']()) {
            this['removeStore'](this['getAssignmentStore']());
        }
        this['addStore'](_0x33f5x2);
        this['assignmentStore'] = {
            store: _0x33f5x2
        };
    },
    getDependencyStore: function() {
        return this['dependencyStore'] && this['dependencyStore']['store'];
    },
    setDependencyStore: function(_0x33f5x2) {
        if (this['getDependencyStore']()) {
            this['removeStore'](this['getDependencyStore']());
        }
        this['addStore'](_0x33f5x2);
        this['dependencyStore'] = {
            store: _0x33f5x2
        };
    }
});

Ext.define('Ext.ux.Scheduler.model.Dependency', {
    extend: Ext.ux.Scheduler.model.Customizable,
    inheritableStatics: {
        Type: {
            StartToStart: 0,
            StartToEnd: 1,
            EndToStart: 2,
            EndToEnd: 3
        }
    },
    idProperty: 'Id',
    customizableFields: [ {
        name: 'From'
    }, {
        name: 'To'
    }, {
        name: 'Type',
        type: 'int',
        defaultValue: 2
    }, {
        name: 'Cls',
        defaultValue: ''
    }, {
        name: 'Bidirectional',
        type: 'boolean'
    } ],
    fromField: 'From',
    toField: 'To',
    typeField: 'Type',
    clsField: 'Cls',
    bidirectionalField: 'Bidirectional',
    constructor: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['callParent'](arguments);
        if (_0x33f5x2) {
            if (_0x33f5x2[_0x33f5x1['fromField']] && _0x33f5x2[_0x33f5x1['fromField']] instanceof Ext.ux.Scheduler.model.Range) {
                _0x33f5x1['setSourceEvent'](_0x33f5x2[_0x33f5x1['fromField']]);
                delete _0x33f5x2['fromField'];
            }
            if (_0x33f5x2[_0x33f5x1['toField']] && _0x33f5x2[_0x33f5x1['toField']] instanceof Ext.ux.Scheduler.model.Range) {
                _0x33f5x1['setTargetEvent'](_0x33f5x2[_0x33f5x1['toField']]);
                delete _0x33f5x2['toField'];
            }
        }
    },
    getEventStore: function() {
        return this['store']['getEventStore']();
    },
    getSourceEvent: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return (_0x33f5x2 || _0x33f5x1['getEventStore']())['getModelById'](_0x33f5x1['getSourceId']());
    },
    setSourceEvent: function(_0x33f5x2) {
        this['setSourceId'](_0x33f5x2['getId']());
    },
    getTargetEvent: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return (_0x33f5x2 || _0x33f5x1['getEventStore']())['getModelById'](_0x33f5x1['getTargetId']());
    },
    setTargetEvent: function(_0x33f5x2) {
        this['setTargetId'](_0x33f5x2['getId']());
    },
    getSourceId: function() {
        return this['getFrom']();
    },
    setSourceId: function(_0x33f5x2) {
        return this['setFrom'](_0x33f5x2);
    },
    getTargetId: function() {
        return this['getTo']();
    },
    setTargetId: function(_0x33f5x2) {
        return this['setTo'](_0x33f5x2);
    },
    isPersistable: function() {
        var _0x33f5x2 = this, _0x33f5x1 = _0x33f5x2['getSourceEvent'](), _0x33f5x3 = _0x33f5x2['getTargetEvent']();
        return _0x33f5x1 && !_0x33f5x1['phantom'] && _0x33f5x3 && !_0x33f5x3['phantom'];
    },
    isValid: function(_0x33f5x1) {
        var _0x33f5x5 = this, _0x33f5x4 = _0x33f5x5['callParent'](arguments), _0x33f5x8 = _0x33f5x5['getSourceId'](), _0x33f5x2 = _0x33f5x5['getTargetId'](), _0x33f5x3 = _0x33f5x5['getType']();
        return Ext['isNumber'](_0x33f5x3) && !Ext['isEmpty'](_0x33f5x8) && !Ext['isEmpty'](_0x33f5x2) && _0x33f5x8 != _0x33f5x2;
    }
});

Ext.define('Ext.ux.Scheduler.data.DependencyStore', {
    extend: Ext.data['Store'],
    mixins: [ Ext.ux.Scheduler.data.mixin.UniversalModelGetter, Ext.ux.Scheduler.data.mixin.CacheHintHelper, Robo.data.Store ],
    config: {
        extraKeys: {
            bySourceTargetId: {
                keyFn: function(_0x33f5x2) {
                    return Ext.ux.Scheduler.data['DependencyStore']['makeDependencySourceTargetCompositeKey'](_0x33f5x2['getSourceId'](), _0x33f5x2['getTargetId']());
                }
            }
        }
    },
    model: 'Ext.ux.Scheduler.model.Dependency',
    alias: 'store.sch_dependencystore',
    storeId: 'dependencies',
    eventDependencyCache: null,
    eventStoreDetacher: null,
    eventStore: null,
    constructor: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['callParent']([ _0x33f5x2 ]);
        _0x33f5x1['eventDependencyCache'] = _0x33f5x1['eventDependencyCache'] || _0x33f5x1['createEventDependencyCache']();
    },
    destroy: function() {
        var _0x33f5x2 = this;
        Ext.destroyMembers(_0x33f5x2, 'eventDependencyCache', 'eventStoreDetacher');
        _0x33f5x2['callParent']();
    },
    createEventDependencyCache: function() {
        return new Ext.ux.Scheduler.data.util.EventDependencyCache(this);
    },
    getEventStore: function() {
        return this['eventStore'];
    },
    setEventStore: function(_0x33f5x2) {
        var _0x33f5x1 = this, _0x33f5x3 = _0x33f5x1['eventStore'];
        _0x33f5x1['eventStore'] = _0x33f5x2 && Ext.StoreMgr.lookup(_0x33f5x2) || null;
        _0x33f5x1['attachToEventStore'](_0x33f5x1['eventStore']);
        if ((_0x33f5x3 || _0x33f5x2) && _0x33f5x3 !== _0x33f5x2) {
            _0x33f5x1['fireEvent']('eventstorechange', _0x33f5x1, _0x33f5x2, _0x33f5x3);
        }
    },
    attachToEventStore: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        Ext.destroy(_0x33f5x1['eventStoreDetacher']);
        if (_0x33f5x2 && _0x33f5x2['isTreeStore']) {
            _0x33f5x1['eventStoreDetacher'] = _0x33f5x2['on']({
                noderemove: _0x33f5x1['onEventNodeRemove'],
                scope: _0x33f5x1,
                destroyable: true,
                priority: 200
            });
        } else {
            if (_0x33f5x2) {
                _0x33f5x1['eventStoreDetacher'] = _0x33f5x2['on']({
                    remove: _0x33f5x1['onEventRemove'],
                    scope: _0x33f5x1,
                    destroyable: true,
                    priority: 200
                });
            }
        }
    },
    onEventRemove: function(_0x33f5x4, _0x33f5x3, _0x33f5x1, _0x33f5x2) {
        !_0x33f5x2 && this['removeEventDependencies'](_0x33f5x3, false);
    },
    onEventNodeRemove: function(_0x33f5x1, _0x33f5x3, _0x33f5x2) {
        !_0x33f5x2 && this['removeEventDependencies'](_0x33f5x3, false);
    },
    reduceEventDependencies: function(_0x33f5x4, _0x33f5x5, _0x33f5x2, _0x33f5x8, _0x33f5x1) {
        var _0x33f5x3 = this;
        _0x33f5x1 = _0x33f5x1 || function(_0x33f5x9) {
            return _0x33f5x3['eventDependencyCache']['get'](_0x33f5x9);
        };
        _0x33f5x4 = Ext.isArray(_0x33f5x4) ? _0x33f5x4 : [ _0x33f5x4 ];
        _0x33f5x8 = _0x33f5x8 === undefined ? true : false;
        Ext.Array['reduce'](_0x33f5x4, function(_0x33f5x9, _0x33f5x7) {
            if (_0x33f5x7['isNode'] && !_0x33f5x8) {
                _0x33f5x7['cascadeBy'](function(_0x33f5xf) {
                    _0x33f5x9 = Ext.Array['reduce'](_0x33f5x1(_0x33f5xf), _0x33f5x5, _0x33f5x9);
                });
            } else {
                _0x33f5x9 = Ext.Array['reduce'](_0x33f5x1(_0x33f5x7), _0x33f5x5, _0x33f5x9);
            }
        }, _0x33f5x2);
        return _0x33f5x2;
    },
    reduceEventIncomingDependencies: function(_0x33f5x3, _0x33f5x4, _0x33f5x2, _0x33f5x5) {
        var _0x33f5x1 = this;
        return _0x33f5x1['reduceEventDependencies'](_0x33f5x3, _0x33f5x4, _0x33f5x2, _0x33f5x5, function(_0x33f5x8) {
            return _0x33f5x1['eventDependencyCache']['getPredecessors'](_0x33f5x8);
        });
    },
    reduceEventOutgoingDependencies: function(_0x33f5x3, _0x33f5x4, _0x33f5x2, _0x33f5x5) {
        var _0x33f5x1 = this;
        return _0x33f5x1['reduceEventDependencies'](_0x33f5x3, _0x33f5x4, _0x33f5x2, _0x33f5x5, function(_0x33f5x8) {
            return _0x33f5x1['eventDependencyCache']['getSuccessors'](_0x33f5x8);
        });
    },
    mapEventDependencies: function(_0x33f5x3, _0x33f5x1, _0x33f5x4, _0x33f5x5, _0x33f5x2) {
        return this['reduceEventDependencies'](_0x33f5x3, function(_0x33f5x8, _0x33f5x9) {
            _0x33f5x4(_0x33f5x9) && _0x33f5x8['push'](_0x33f5x9);
            return _0x33f5x8;
        }, [], _0x33f5x5, _0x33f5x2);
    },
    mapEventIncomingDependencies: function(_0x33f5x1, _0x33f5x2, _0x33f5x3, _0x33f5x4) {
        return this['reduceEventIncomingDependencies'](_0x33f5x1, function(_0x33f5x5, _0x33f5x8) {
            _0x33f5x3(_0x33f5x8) && _0x33f5x5['push'](_0x33f5x8);
            return _0x33f5x5;
        }, [], _0x33f5x4);
    },
    mapEventOutgoingDependencies: function(_0x33f5x1, _0x33f5x2, _0x33f5x3, _0x33f5x4) {
        return this['reduceEventOutgoingDependencies'](_0x33f5x1, function(_0x33f5x5, _0x33f5x8) {
            _0x33f5x3(_0x33f5x8) && _0x33f5x5['push'](_0x33f5x8);
            return _0x33f5x5;
        }, [], _0x33f5x4);
    },
    getEventDependencies: function(_0x33f5x2, _0x33f5x1) {
        return this['mapEventDependencies'](_0x33f5x2, Ext.identifyFn, Ext.returnTrue, _0x33f5x1);
    },
    getEventIncomingDependencies: function(_0x33f5x2, _0x33f5x1) {
        return this['mapEventIncomingDependencies'](_0x33f5x2, Ext.identifyFn, Ext.returnTrue, _0x33f5x1);
    },
    getEventOutgoingDependencies: function(_0x33f5x2, _0x33f5x1) {
        return this['mapEventOutgoingDependencies'](_0x33f5x2, Ext.identifyFn, Ext.returnTrue, _0x33f5x1);
    },
    getEventPredecessors: function(_0x33f5x3, _0x33f5x4) {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getEventStore']();
        Ext.Assert && Ext.Assert.truthy(_0x33f5x2, 'Can\'t get event predecessors, no event store configured');
        return _0x33f5x1['reduceEventDependencies'](_0x33f5x3, function(_0x33f5x5, _0x33f5x9) {
            var _0x33f5x8 = _0x33f5x9['getFrom'](), _0x33f5x7 = _0x33f5x8 && _0x33f5x2['getModelById'](_0x33f5x8);
            if (_0x33f5x7) {
                _0x33f5x5['push'](_0x33f5x7);
            }
            return _0x33f5x5;
        }, [], _0x33f5x4, function(_0x33f5x5) {
            return _0x33f5x1['eventDependencyCache']['getPredecessors'](_0x33f5x5);
        });
    },
    getEventSuccessors: function(_0x33f5x3, _0x33f5x4) {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getEventStore']();
        Ext.Assert && Ext.Assert.truthy(_0x33f5x2, 'Can\'t get event successors, no event store configured');
        return _0x33f5x1['reduceEventDependencies'](_0x33f5x3, function(_0x33f5x5, _0x33f5x9) {
            var _0x33f5x7 = _0x33f5x9['getTo'](), _0x33f5x8 = _0x33f5x7 && _0x33f5x2['getModelById'](_0x33f5x7);
            if (_0x33f5x8) {
                _0x33f5x5['push'](_0x33f5x8);
            }
            return _0x33f5x5;
        }, [], _0x33f5x4, function(_0x33f5x5) {
            return _0x33f5x1['eventDependencyCache']['getSuccessors'](_0x33f5x5);
        });
    },
    removeEventDependencies: function(_0x33f5x1, _0x33f5x4) {
        var _0x33f5x2 = this, _0x33f5x3;
        _0x33f5x3 = _0x33f5x2['getEventDependencies'](_0x33f5x1, _0x33f5x4);
        _0x33f5x3['length'] && _0x33f5x2['remove'](Ext.Array['unique'](_0x33f5x3));
    },
    removeEventIncomingDependencies: function(_0x33f5x1, _0x33f5x4) {
        var _0x33f5x2 = this, _0x33f5x3;
        _0x33f5x3 = _0x33f5x2['getEventIncomingDependencies'](_0x33f5x1, _0x33f5x4);
        _0x33f5x3['length'] && _0x33f5x2['remove'](Ext.Array['unique'](_0x33f5x3));
    },
    removeEventOutgoingDependencies: function(_0x33f5x1, _0x33f5x4) {
        var _0x33f5x2 = this, _0x33f5x3;
        _0x33f5x3 = _0x33f5x2['getEventOutgoingDependencies'](_0x33f5x1, _0x33f5x4);
        _0x33f5x3['length'] && _0x33f5x2['remove'](Ext.Array['unique'](_0x33f5x3));
    },
    getDependencyForSourceAndTargetEvents: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x3 = this;
        _0x33f5x2 = _0x33f5x2 instanceof Ext.data.Model && _0x33f5x2['getId']() || _0x33f5x2;
        _0x33f5x1 = _0x33f5x1 instanceof Ext.data.Model && _0x33f5x1['getId']() || _0x33f5x1;
        return _0x33f5x3['bySourceTargetId']['get'](_0x33f5x3['self']['makeDependencySourceTargetCompositeKey'](_0x33f5x2, _0x33f5x1));
    },
    getEventsLinkingDependency: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this;
        return _0x33f5x3['getDependencyForSourceAndTargetEvents'](_0x33f5x1, _0x33f5x2) || _0x33f5x3['getDependencyForSourceAndTargetEvents'](_0x33f5x2, _0x33f5x1);
    },
    inheritableStatics: {
        makeDependencySourceTargetCompositeKey: function() {
            var _0x33f5x2 = [];
            return function(_0x33f5x3, _0x33f5x1) {
                _0x33f5x2['length'] = 0;
                _0x33f5x2['push']('source(', _0x33f5x3, ')-target(', _0x33f5x1, ')');
                return _0x33f5x2['join']('');
            };
        }()
    }
});

Ext.define('Ext.ux.Scheduler.data.util.IdConsistencyManager', {
    config: {
        eventStore: null,
        resourceStore: null,
        assignmentStore: null,
        dependencyStore: null
    },
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    constructor: function(_0x33f5x2) {
        this['initConfig'](_0x33f5x2);
    },
    updateEventStore: function(_0x33f5x2, _0x33f5x3) {
        var _0x33f5x1 = this;
        Ext.destroyMembers(_0x33f5x1, 'eventStoreDetacher');
        if (_0x33f5x2) {
            _0x33f5x1['eventStoreDetacher'] = _0x33f5x2['on']({
                idchanged: _0x33f5x1['onEventIdChanged'],
                scope: _0x33f5x1,
                destroyable: true,
                priority: 200
            });
        }
    },
    updateResourceStore: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x3 = this;
        Ext.destroyMembers(_0x33f5x3, 'resourceStoreDetacher');
        if (_0x33f5x2) {
            _0x33f5x3['resourceStoreDetacher'] = _0x33f5x2['on']({
                idchanged: _0x33f5x3['onResourceIdChanged'],
                scope: _0x33f5x3,
                destroyable: true,
                priority: 200
            });
        }
    },
    onEventIdChanged: function(_0x33f5x8, _0x33f5x2, _0x33f5x4, _0x33f5x5) {
        var _0x33f5xf = this, _0x33f5x9 = _0x33f5xf['getAssignmentStore'](), _0x33f5x3 = _0x33f5xf['getDependencyStore'](), _0x33f5x1, _0x33f5x7;
        if (_0x33f5x9) {
            _0x33f5x1 = _0x33f5xf['getUpdateAssignmentEventIdFieldFn'](_0x33f5x9, _0x33f5x4, _0x33f5x5);
        }
        if (_0x33f5x3) {
            _0x33f5x7 = _0x33f5xf['getUpdateDependencySourceTargedIdFieldFn'](_0x33f5x3, _0x33f5x4, _0x33f5x5);
        }
        if (_0x33f5x1 || _0x33f5x7) {
            _0x33f5x8['on']('update', function() {
                _0x33f5x1 && _0x33f5x1();
                _0x33f5x7 && _0x33f5x7();
            }, null, {
                single: true,
                priority: 200
            });
        }
    },
    onResourceIdChanged: function(_0x33f5xf, _0x33f5x5, _0x33f5x1, _0x33f5x4) {
        var _0x33f5x7 = this, _0x33f5x8 = _0x33f5x7['getEventStore'](), _0x33f5x9 = _0x33f5x7['getAssignmentStore'](), _0x33f5x3, _0x33f5x2;
        if (_0x33f5x8 && !_0x33f5x9) {
            _0x33f5x3 = _0x33f5x7['getUpdateEventResourceIdFieldFn'](_0x33f5x8, _0x33f5x1, _0x33f5x4);
        }
        if (_0x33f5x9) {
            _0x33f5x2 = _0x33f5x7['undefined'](_0x33f5x9, _0x33f5x1, _0x33f5x4);
        }
        if (_0x33f5x3 || _0x33f5x9) {
            _0x33f5xf['on']('update', function() {
                _0x33f5x3 && _0x33f5x3();
                _0x33f5x2 && _0x33f5x2();
            }, null, {
                single: true,
                priority: 200
            });
        }
    },
    getUpdateEventResourceIdFieldFn: function(_0x33f5x3, _0x33f5x4, _0x33f5x2) {
        var _0x33f5x1 = _0x33f5x3['getRange']();
        return function() {
            Ext.Array['each'](_0x33f5x1, function(_0x33f5x5) {
                _0x33f5x5['getResourceId']() == _0x33f5x4 && _0x33f5x5['setResourceId'](_0x33f5x2);
            });
        };
    },
    getUpdateAssignmentEventIdFieldFn: function(_0x33f5x3, _0x33f5x4, _0x33f5x1) {
        var _0x33f5x2 = _0x33f5x3['getAssignmentsForEvent'](_0x33f5x4);
        return function() {
            Ext.Array['each'](_0x33f5x2, function(_0x33f5x5) {
                _0x33f5x5['getEventId']() == _0x33f5x4 && _0x33f5x5['setEventId'](_0x33f5x1);
            });
        };
    },
    getUpdateAssignmentResourceIdFieldFn: function(_0x33f5x3, _0x33f5x4, _0x33f5x1) {
        var _0x33f5x2 = _0x33f5x3['getAssignmentsForResource'](_0x33f5x4);
        return function() {
            Ext.Array['each'](_0x33f5x2, function(_0x33f5x5) {
                _0x33f5x5['getResourceId']() == _0x33f5x4 && _0x33f5x5['setResourceId'](_0x33f5x1);
            });
        };
    },
    getUpdateDependencySourceTargedIdFieldFn: function(_0x33f5x1, _0x33f5x4, _0x33f5x2) {
        var _0x33f5x3 = _0x33f5x1['getEventDependencies'](_0x33f5x4);
        return function() {
            Ext.Array['each'](_0x33f5x3, function(_0x33f5x5) {
                _0x33f5x5['getSourceId']() == _0x33f5x4 && _0x33f5x5['setSourceId'](_0x33f5x2);
                _0x33f5x5['getTargetId']() == _0x33f5x4 && _0x33f5x5['setTargetId'](_0x33f5x2);
            });
        };
    }
});

Ext.define('Ext.ux.Scheduler.data.util.ModelPersistencyManager', {
    config: {
        eventStore: null,
        resourceStore: null,
        assignmentStore: null,
        dependencyStore: null
    },
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    assignmentStoreDetacher: null,
    dependencyStoreDetacher: null,
    constructor: function(_0x33f5x2) {
        this['initConfig'](_0x33f5x2);
    },
    updateEventStore: function(_0x33f5x2, _0x33f5x3) {
        var _0x33f5x1 = this;
        Ext.destroyMembers(_0x33f5x1, 'eventStoreDetacher');
        if (_0x33f5x2 && _0x33f5x2['autoSync']) {
            _0x33f5x1['eventStoreDetacher'] = _0x33f5x2['on']({
                beforesync: _0x33f5x1['onEventStoreBeforeSync'],
                scope: _0x33f5x1,
                destroyable: true,
                priority: 100
            });
        }
    },
    updateResourceStore: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x3 = this;
        Ext.destroyMembers(_0x33f5x3, 'resourceStoreDetacher');
        if (_0x33f5x2 && _0x33f5x2['autoSync']) {
            _0x33f5x3['resourceStoreDetacher'] = _0x33f5x2['on']({
                beforesync: _0x33f5x3['onResourceStoreBeforeSync'],
                scope: _0x33f5x3,
                destroyable: true,
                priority: 100
            });
        }
    },
    updateAssignmentStore: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x3 = this;
        Ext.destroyMembers(_0x33f5x3, 'assignmentStoreDetacher');
        if (_0x33f5x2 && _0x33f5x2['autoSync']) {
            _0x33f5x3['assignmentStoreDetacher'] = _0x33f5x2['on']({
                beforesync: _0x33f5x3['onAssignmentStoreBeforeSync'],
                scope: _0x33f5x3,
                destroyable: true,
                priority: 100
            });
        }
    },
    updateDependencyStore: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x1 = this;
        Ext.destroyMembers(_0x33f5x1, 'dependencyStoreDetacher');
        if (_0x33f5x3 && _0x33f5x3['autoSync']) {
            _0x33f5x1['dependencyStoreDetacher'] = _0x33f5x3['on']({
                beforesync: _0x33f5x1['onDependencyStoreBeforeSync'],
                scope: _0x33f5x1,
                destroyable: true,
                priority: 100
            });
        }
    },
    onEventStoreBeforeSync: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['removeNonPersistableRecordsToCreate'](_0x33f5x2);
        return _0x33f5x1['shallContinueSync'](_0x33f5x2);
    },
    onResourceStoreBeforeSync: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['removeNonPersistableRecordsToCreate'](_0x33f5x2);
        return _0x33f5x1['shallContinueSync'](_0x33f5x2);
    },
    onAssignmentStoreBeforeSync: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['removeNonPersistableRecordsToCreate'](_0x33f5x2);
        return _0x33f5x1['shallContinueSync'](_0x33f5x2);
    },
    onDependencyStoreBeforeSync: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['removeNonPersistableRecordsToCreate'](_0x33f5x2);
        return _0x33f5x1['shallContinueSync'](_0x33f5x2);
    },
    removeNonPersistableRecordsToCreate: function(_0x33f5x1) {
        var _0x33f5x2 = _0x33f5x1['create'] || [], _0x33f5x4, _0x33f5x3;
        for (_0x33f5x3 = _0x33f5x2['length'] - 1; _0x33f5x3 >= 0; --_0x33f5x3) {
            _0x33f5x4 = _0x33f5x2[_0x33f5x3];
            if (!_0x33f5x4['isPersistable']()) {
                Ext.Array['remove'](_0x33f5x2, _0x33f5x4);
            }
        }
        if (_0x33f5x2['length'] === 0) {
            delete _0x33f5x1['create'];
        }
    },
    shallContinueSync: function(_0x33f5x2) {
        return Boolean(_0x33f5x2['create'] && _0x33f5x2['create']['length'] > 0 || _0x33f5x2['update'] && _0x33f5x2['update']['length'] > 0 || _0x33f5x2['destroy'] && _0x33f5x2['destroy']['length'] > 0);
    }
});

Ext.define('Ext.ux.Scheduler.util.Cache', {
    cache: null,
    constructor: function() {
        this['cache'] = {};
    },
    key: function(_0x33f5x1) {
        var _0x33f5x2;
        if (_0x33f5x1 instanceof Ext.data.Model) {
            _0x33f5x2 = _0x33f5x1['getId']().toString();
        } else {
            if (_0x33f5x1 === undefined || _0x33f5x1 === null) {
                _0x33f5x2 = '[ undefined / null ]';
            } else {
                _0x33f5x2 = _0x33f5x1.toString();
            }
        }
        return _0x33f5x2;
    },
    get: function(_0x33f5x1, _0x33f5x3) {
        var _0x33f5x4 = this, _0x33f5x2;
        _0x33f5x1 = _0x33f5x4['key'](_0x33f5x1);
        _0x33f5x2 = _0x33f5x4['cache']['hasOwnProperty'](_0x33f5x1) && _0x33f5x4['cache'][_0x33f5x1];
        if (!_0x33f5x2 && _0x33f5x3) {
            _0x33f5x2 = _0x33f5x3();
        } else {
            if (!_0x33f5x2) {
                _0x33f5x2 = [];
            }
        }
        _0x33f5x4['cache'][_0x33f5x1] = _0x33f5x2;
        return _0x33f5x2;
    },
    add: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x4 = this, _0x33f5x2 = _0x33f5x4['key'](_0x33f5x3);
        if (!_0x33f5x4['cache']['hasOwnProperty'](_0x33f5x2)) {
            _0x33f5x4['cache'][_0x33f5x2] = _0x33f5x4['get'](_0x33f5x3);
        }
        Ext.Array['include'](_0x33f5x4['cache'][_0x33f5x2], _0x33f5x1);
        return _0x33f5x4;
    },
    remove: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this;
        _0x33f5x1 = _0x33f5x3['key'](_0x33f5x1);
        if (_0x33f5x3['cache']['hasOwnProperty'](_0x33f5x1)) {
            Ext.Array['remove'](_0x33f5x3['cache'][_0x33f5x1], _0x33f5x2);
        }
        return _0x33f5x3;
    },
    move: function(_0x33f5x3, _0x33f5x4, _0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x3 = _0x33f5x1['key'](_0x33f5x3);
        _0x33f5x4 = _0x33f5x1['key'](_0x33f5x4);
        if (_0x33f5x3 != _0x33f5x4 && arguments['length'] >= 3) {
            _0x33f5x1['remove'](_0x33f5x3, _0x33f5x2);
            _0x33f5x1['add'](_0x33f5x4, _0x33f5x2);
        } else {
            if (_0x33f5x3 != _0x33f5x4 && _0x33f5x1['cache']['hasOwnProperty'](_0x33f5x3) && _0x33f5x1['cache']['hasOwnProperty'](_0x33f5x4)) {
                _0x33f5x1['cache'][_0x33f5x4] = Ext.Array['union'](_0x33f5x1['cache'][_0x33f5x4], _0x33f5x1['cache'][_0x33f5x3]);
                _0x33f5x1['cache'][_0x33f5x3] = [];
            } else {
                if (_0x33f5x3 != _0x33f5x4 && _0x33f5x1['cache']['hasOwnProperty'](_0x33f5x3)) {
                    _0x33f5x1['cache'][_0x33f5x4] = _0x33f5x1['cache'][_0x33f5x3];
                    _0x33f5x1['cache'][_0x33f5x3] = [];
                }
            }
        }
        return _0x33f5x1;
    },
    clear: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        if (!arguments['length']) {
            _0x33f5x1['cache'] = {};
        } else {
            _0x33f5x2 = _0x33f5x1['key'](_0x33f5x2);
            if (_0x33f5x1['cache']['hasOwnProperty'](_0x33f5x2)) {
                delete _0x33f5x1['cache'][_0x33f5x2];
            }
        }
        return _0x33f5x1;
    },
    uncache: function(_0x33f5x1) {
        var _0x33f5x3 = this, _0x33f5x2;
        for (_0x33f5x2 in _0x33f5x3['cache']) {
            if (_0x33f5x3['cache']['hasOwnProperty'](_0x33f5x2)) {
                _0x33f5x3['cache'][_0x33f5x2] = Ext.Array['remove'](_0x33f5x3['cache'][_0x33f5x2], _0x33f5x1);
            }
        }
        return _0x33f5x3;
    }
});

Ext.define('Ext.ux.Scheduler.data.util.ResourceEventsCache', {
    extend: Ext.ux.Scheduler.util.Cache,
    eventStore: null,
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    constructor: function(_0x33f5x3) {
        var _0x33f5xf = this, _0x33f5xe = _0x33f5x3['getResourceStore']();
        _0x33f5xf['callParent']();
        function _0x33f5x11(_0x33f5xd, _0x33f5xc) {
            Ext.Array['each'](_0x33f5xc, function(_0x33f5xa) {
                _0x33f5xf['add'](_0x33f5xa['getResourceId'](), _0x33f5xa);
            });
        }
        function _0x33f5x5(_0x33f5xd, _0x33f5xc) {
            Ext.Array['each'](_0x33f5xc, function(_0x33f5xa) {
                _0x33f5xf['remove'](_0x33f5xa['getResourceId'](), _0x33f5xa);
            });
        }
        function _0x33f5x4(_0x33f5xa, _0x33f5x17, _0x33f5xd, _0x33f5x10) {
            var _0x33f5x15 = _0x33f5x17['resourceIdField'], _0x33f5x6 = _0x33f5x17['previous'] && _0x33f5x15 in _0x33f5x17['previous'], _0x33f5xc = _0x33f5x6 && _0x33f5x17['previous'][_0x33f5x15];
            if (_0x33f5x6) {
                _0x33f5xf['move'](_0x33f5xc, _0x33f5x17['getResourceId'](), _0x33f5x17);
            }
        }
        function _0x33f5x9() {
            _0x33f5xf['clear']();
        }
        function _0x33f5xb(_0x33f5xd, _0x33f5xc, _0x33f5xa) {
            _0x33f5xf['clear']();
            _0x33f5x2(_0x33f5xc);
        }
        function _0x33f5x7(_0x33f5xd, _0x33f5xa, _0x33f5x6, _0x33f5xc) {
            _0x33f5xf['move'](_0x33f5x6, _0x33f5xc);
        }
        function _0x33f5x8(_0x33f5xc, _0x33f5xd) {
            Ext.Array['each'](_0x33f5xd, function(_0x33f5xa) {
                _0x33f5xf['clear'](_0x33f5xa);
            });
        }
        function _0x33f5x1() {
            _0x33f5xf['clear']();
        }
        function _0x33f5x2(_0x33f5xc) {
            Ext.destroy(_0x33f5xf['resourceStoreDetacher']);
            _0x33f5xf['resourceStoreDetacher'] = _0x33f5xc && _0x33f5xc['on']({
                idchanged: _0x33f5x7,
                remove: _0x33f5x8,
                clear: _0x33f5x1,
                cacheresethint: _0x33f5x1,
                rootchange: _0x33f5x1,
                priority: 100,
                destroyable: true
            });
        }
        _0x33f5xf['eventStoreDetacher'] = _0x33f5x3['on']({
            add: _0x33f5x11,
            remove: _0x33f5x5,
            update: _0x33f5x4,
            clear: _0x33f5x9,
            cacheresethint: _0x33f5x9,
            rootchange: _0x33f5x9,
            resourcestorechange: _0x33f5xb,
            priority: 100,
            destroyable: true
        });
        _0x33f5xf['eventStoreFiltersDetacher'] = _0x33f5x3['getFilters']()['on']('endupdate', _0x33f5x9, this, {
            priority: 1002,
            destroyable: true
        });
        _0x33f5x2(_0x33f5xe);
        _0x33f5xf['eventStore'] = _0x33f5x3;
    },
    destroy: function() {
        var _0x33f5x2 = this;
        Ext.destroyMembers(_0x33f5x2, 'eventStoreDetacher', 'eventStoreFiltersDetacher', 'resourceStoreDetacher');
        _0x33f5x2['eventStore'] = null;
    },
    get: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x3 = this;
        _0x33f5x2 = _0x33f5x3['key'](_0x33f5x2);
        _0x33f5x1 = _0x33f5x1 || function() {
            return Ext.Array['filter'](_0x33f5x3['eventStore']['getRange'](), function(_0x33f5x4) {
                return _0x33f5x4['getResourceId']() == _0x33f5x2;
            });
        };
        return _0x33f5x3['callParent']([ _0x33f5x2, _0x33f5x1 ]);
    }
});

Ext.define('Ext.ux.Scheduler.data.mixin.EventStore', {
    extend: Ext.Mixin,
    isEventStore: true,
    resourceStore: null,
    resourceStoreDetacher: null,
    assignmentStore: null,
    resourceEventsCache: null,
    idConsistencyManager: null,
    modelPersistencyManager: null,
    mixinConfig: {
        after: {
            constructor: 'constructor',
            destroy: 'destroy'
        }
    },
    constructor: function() {
        var _0x33f5x2 = this;
        _0x33f5x2['resourceEventsCache'] = _0x33f5x2['createResourceEventsCache']();
        _0x33f5x2['idConsistencyManager'] = _0x33f5x2['createIdConsistencyManager']();
        _0x33f5x2['modelPersistencyManager'] = _0x33f5x2['createModelPersistencyManager']();
    },
    destroy: function() {
        var _0x33f5x2 = this;
        Ext.destroyMembers(_0x33f5x2, 'resourceEventsCache', 'idConsistencyManager', 'modelPersistencyManager');
    },
    createResourceEventsCache: function() {
        return new Ext.ux.Scheduler.data.util.ResourceEventsCache(this);
    },
    createIdConsistencyManager: function() {
        var _0x33f5x2 = this;
        return new Ext.ux.Scheduler.data.util.IdConsistencyManager({
            eventStore: _0x33f5x2,
            resourceStore: _0x33f5x2['getResourceStore'](),
            assignmentStore: _0x33f5x2['getAssignmentStore'](),
            dependencyStore: _0x33f5x2['getDependencyStore']()
        });
    },
    createModelPersistencyManager: function() {
        var _0x33f5x2 = this;
        return new Ext.ux.Scheduler.data.util.ModelPersistencyManager({
            eventStore: _0x33f5x2,
            resourceStore: _0x33f5x2['getResourceStore'](),
            assignmentStore: _0x33f5x2['getAssignmentStore'](),
            dependencyStore: _0x33f5x2['getDependencyStore']()
        });
    },
    getResourceStore: function() {
        return this['resourceStore'];
    },
    setResourceStore: function(_0x33f5x1) {
        var _0x33f5x2 = this, _0x33f5x3 = _0x33f5x2['resourceStore'];
        if (_0x33f5x2['resourceStore']) {
            _0x33f5x2['resourceStore']['setEventStore'](null);
            _0x33f5x2['idConsistencyManager'] && _0x33f5x2['idConsistencyManager']['setResourceStore'](null);
            _0x33f5x2['modelPersistencyManager'] && _0x33f5x2['modelPersistencyManager']['setResourceStore'](null);
        }
        _0x33f5x2['resourceStore'] = _0x33f5x1 && Ext.StoreMgr.lookup(_0x33f5x1) || null;
        if (_0x33f5x2['resourceStore']) {
            _0x33f5x2['modelPersistencyManager'] && _0x33f5x2['modelPersistencyManager']['setResourceStore'](_0x33f5x2['resourceStore']);
            _0x33f5x2['idConsistencyManager'] && _0x33f5x2['idConsistencyManager']['setResourceStore'](_0x33f5x2['resourceStore']);
            _0x33f5x1['setEventStore'](_0x33f5x2);
        }
        if ((_0x33f5x3 || _0x33f5x1) && _0x33f5x3 !== _0x33f5x1) {
            _0x33f5x2['fireEvent']('resourcestorechange', _0x33f5x2, _0x33f5x1, _0x33f5x3);
        }
    },
    getAssignmentStore: function() {
        return this['assignmentStore'];
    },
    setAssignmentStore: function(_0x33f5x1) {
        var _0x33f5x2 = this, _0x33f5x3 = _0x33f5x2['assignmentStore'];
        if (_0x33f5x2['assignmentStore']) {
            _0x33f5x2['assignmentStore']['setEventStore'](null);
            _0x33f5x2['idConsistencyManager'] && _0x33f5x2['idConsistencyManager']['setAssignmentStore'](null);
            _0x33f5x2['modelPersistencyManager'] && _0x33f5x2['modelPersistencyManager']['setAssignmentStore'](null);
        }
        _0x33f5x2['assignmentStore'] = _0x33f5x1 && Ext.StoreMgr.lookup(_0x33f5x1) || null;
        if (_0x33f5x2['assignmentStore']) {
            _0x33f5x2['modelPersistencyManager'] && _0x33f5x2['modelPersistencyManager']['setAssignmentStore'](_0x33f5x2['assignmentStore']);
            _0x33f5x2['idConsistencyManager'] && _0x33f5x2['idConsistencyManager']['setAssignmentStore'](_0x33f5x2['assignmentStore']);
            _0x33f5x2['assignmentStore']['setEventStore'](_0x33f5x2);
            Ext.destroy(_0x33f5x2['resourceEventsCache']);
        } else {
            _0x33f5x2['resourceEventsCache'] = _0x33f5x2['createResourceEventsCache']();
        }
        if ((_0x33f5x3 || _0x33f5x1) && _0x33f5x3 !== _0x33f5x1) {
            _0x33f5x2['fireEvent']('assignmentstorechange', _0x33f5x2, _0x33f5x1, _0x33f5x3);
        }
    },
    getDependencyStore: function() {
        return this['dependencyStore'];
    },
    setDependencyStore: function(_0x33f5x2) {
        var _0x33f5x1 = this, _0x33f5x3 = _0x33f5x1['DependencyStore'];
        if (_0x33f5x1['dependencyStore']) {
            _0x33f5x1['dependencyStore']['setEventStore'](null);
            _0x33f5x1['idConsistencyManager'] && _0x33f5x1['idConsistencyManager']['setDependencyStore'](null);
            _0x33f5x1['modelPersistencyManager'] && _0x33f5x1['modelPersistencyManager']['setDependencyStore'](null);
        }
        _0x33f5x1['dependencyStore'] = _0x33f5x2 && Ext.StoreMgr.lookup(_0x33f5x2) || null;
        if (_0x33f5x1['dependencyStore']) {
            _0x33f5x1['modelPersistencyManager'] && _0x33f5x1['modelPersistencyManager']['setDependencyStore'](_0x33f5x1['dependencyStore']);
            _0x33f5x1['idConsistencyManager'] && _0x33f5x1['idConsistencyManager']['setDependencyStore'](_0x33f5x1['dependencyStore']);
            _0x33f5x1['dependencyStore']['setEventStore'](_0x33f5x1);
        }
        if ((_0x33f5x3 || _0x33f5x2) && _0x33f5x3 !== _0x33f5x2) {
            _0x33f5x1['fireEvent']('dependencystorechange', _0x33f5x1, _0x33f5x2, _0x33f5x3);
        }
    },
    isDateRangeAvailable: function(_0x33f5x9, _0x33f5x2, _0x33f5x3, _0x33f5x5) {
        var _0x33f5x8 = Ext.ux.Scheduler.util.Date, _0x33f5x1 = this['getEventsForResource'](_0x33f5x5), _0x33f5x4 = true;
        Ext.each(_0x33f5x1, function(_0x33f5x7) {
            _0x33f5x4 = _0x33f5x3 === _0x33f5x7 || !_0x33f5x8['intersectSpans'](_0x33f5x9, _0x33f5x2, _0x33f5x7['getStartDate'](), _0x33f5x7['getEndDate']());
            return _0x33f5x4;
        });
        return _0x33f5x4;
    },
    getEventsInTimeSpan: function(_0x33f5x8, _0x33f5x1, _0x33f5x2) {
        var _0x33f5x4 = new Ext.util.MixedCollection();
        var _0x33f5x3 = [];
        if (_0x33f5x2 !== false) {
            var _0x33f5x5 = Ext.ux.Scheduler.util.Date;
            this['forEachScheduledEvent'](function(_0x33f5xf, _0x33f5x7, _0x33f5x9) {
                if (_0x33f5x5['intersectSpans'](_0x33f5x7, _0x33f5x9, _0x33f5x8, _0x33f5x1)) {
                    _0x33f5x3['push'](_0x33f5xf);
                }
            });
        } else {
            this['forEachScheduledEvent'](function(_0x33f5xf, _0x33f5x7, _0x33f5x9) {
                if (_0x33f5x7 - _0x33f5x8 >= 0 && _0x33f5x1 - _0x33f5x9 >= 0) {
                    _0x33f5x3['push'](_0x33f5xf);
                }
            });
        }
        _0x33f5x4['addAll'](_0x33f5x3);
        return _0x33f5x4;
    },
    forEachScheduledEvent: function(_0x33f5x1, _0x33f5x2) {
        this['each'](function(_0x33f5x5) {
            var _0x33f5x4 = _0x33f5x5['getStartDate'](), _0x33f5x3 = _0x33f5x5['getEndDate']();
            if (_0x33f5x4 && _0x33f5x3) {
                return _0x33f5x1['call'](_0x33f5x2 || this, _0x33f5x5, _0x33f5x4, _0x33f5x3);
            }
        }, this);
    },
    getTotalTimeSpan: function() {
        var _0x33f5x2 = new Date(9999, 0, 1), _0x33f5x1 = new Date(0), _0x33f5x3 = Ext.ux.Scheduler.util.Date;
        this['each'](function(_0x33f5x4) {
            if (_0x33f5x4['getStartDate']()) {
                _0x33f5x2 = _0x33f5x3['min'](_0x33f5x4['getStartDate'](), _0x33f5x2);
            }
            if (_0x33f5x4['getEndDate']()) {
                _0x33f5x1 = _0x33f5x3['max'](_0x33f5x4['getEndDate'](), _0x33f5x1);
            }
        });
        _0x33f5x2 = _0x33f5x2 < new Date(9999, 0, 1) ? _0x33f5x2 : null;
        _0x33f5x1 = _0x33f5x1 > new Date(0) ? _0x33f5x1 : null;
        this['lastTotalTimeSpan'] = {
            start: _0x33f5x2 || null,
            end: _0x33f5x1 || _0x33f5x2 || null
        };
        return this['lastTotalTimeSpan'];
    },
    filterEventsForResource: function(_0x33f5x4, _0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = _0x33f5x4['getEvents'](this);
        return Ext.Array['filter'](_0x33f5x2, _0x33f5x3, _0x33f5x1 || this);
    },
    append: function(_0x33f5x2) {
        throw 'Must be implemented by consuming class';
    },
    getResourcesForEvent: function(_0x33f5x4) {
        var _0x33f5x3 = this, _0x33f5x5 = _0x33f5x3['getAssignmentStore'](), _0x33f5x1 = _0x33f5x3['getResourceStore'](), _0x33f5x2;
        if (_0x33f5x5) {
            _0x33f5x2 = _0x33f5x5['getResourcesForEvent'](_0x33f5x4);
        } else {
            if (_0x33f5x1) {
                _0x33f5x4 = _0x33f5x4 instanceof Ext.ux.Scheduler.model.Event && _0x33f5x4 || _0x33f5x3['getModelById'](_0x33f5x4);
                _0x33f5x2 = _0x33f5x4 && _0x33f5x1['getModelById'](_0x33f5x4['getResourceId']());
                _0x33f5x2 = _0x33f5x2 && [ _0x33f5x2 ] || [];
            } else {
                _0x33f5x2 = [];
            }
        }
        return _0x33f5x2;
    },
    getEventsForResource: function(_0x33f5x3) {
        var _0x33f5x1 = this, _0x33f5x4 = _0x33f5x1['getAssignmentStore'](), _0x33f5x2;
        if (_0x33f5x4) {
            _0x33f5x2 = _0x33f5x4['getEventsForResource'](_0x33f5x3);
        } else {
            if (_0x33f5x1['resourceEventsCache']) {
                _0x33f5x2 = _0x33f5x1['resourceEventsCache']['get'](_0x33f5x3);
            } else {
                _0x33f5x2 = [];
            }
        }
        return _0x33f5x2;
    },
    getAssignmentsForEvent: function(_0x33f5x1) {
        var _0x33f5x2 = this, _0x33f5x3 = _0x33f5x2['getAssignmentStore']();
        return _0x33f5x3 && _0x33f5x3['getAssignmentsForEvent'](_0x33f5x1) || [];
    },
    getAssignmentsForResource: function(_0x33f5x1) {
        var _0x33f5x2 = this, _0x33f5x3 = _0x33f5x2['getAssignmentStore']();
        return _0x33f5x3 && _0x33f5x3['getAssignmentsForResource'](_0x33f5x1) || [];
    },
    assignEventToResource: function(_0x33f5x1, _0x33f5x3) {
        var _0x33f5x2 = this, _0x33f5x4 = _0x33f5x2['getAssignmentStore']();
        if (_0x33f5x4) {
            _0x33f5x4['assignEventToResource'](_0x33f5x1, _0x33f5x3);
        } else {
            _0x33f5x1 = _0x33f5x1 instanceof Ext.ux.Scheduler.model.Event && _0x33f5x1 || _0x33f5x2['getModelById'](_0x33f5x1);
            _0x33f5x3 = _0x33f5x3 instanceof Ext.ux.Scheduler.model.Resource ? _0x33f5x3['getId']() : _0x33f5x3;
            _0x33f5x1 && _0x33f5x1['setResourceId'](_0x33f5x3);
        }
    },
    unassignEventFromResource: function(_0x33f5x1, _0x33f5x3) {
        var _0x33f5x2 = this, _0x33f5x4 = _0x33f5x2['getAssignmentStore']();
        if (_0x33f5x4) {
            _0x33f5x4['unassignEventFromResource'](_0x33f5x1, _0x33f5x3);
        } else {
            _0x33f5x1 = _0x33f5x1 instanceof Ext.ux.Scheduler.model.Event && _0x33f5x1 || _0x33f5x2['getModelById'](_0x33f5x1);
            _0x33f5x3 = _0x33f5x3 instanceof Ext.ux.Scheduler.model.Resource ? _0x33f5x3['getId']() : _0x33f5x3;
            if (_0x33f5x1 && _0x33f5x1['getResourceId']() == _0x33f5x3) {
                _0x33f5x1['setResourceId'](null);
            }
        }
    },
    reassignEventFromResourceToResource: function(_0x33f5x4, _0x33f5x2, _0x33f5x1) {
        var _0x33f5x3 = this, _0x33f5x5 = _0x33f5x3['getAssignmentStore']();
        if (_0x33f5x5) {
            _0x33f5x5['unassignEventFromResource'](_0x33f5x4, _0x33f5x2);
            _0x33f5x5['assignEventToResource'](_0x33f5x4, _0x33f5x1);
        } else {
            _0x33f5x4 = _0x33f5x4 instanceof Ext.ux.Scheduler.model.Event && _0x33f5x4 || _0x33f5x3['getModelById'](_0x33f5x4);
            _0x33f5x2 = _0x33f5x2 instanceof Ext.ux.Scheduler.model.Resource ? _0x33f5x2['getId']() : _0x33f5x2;
            _0x33f5x1 = _0x33f5x1 instanceof Ext.ux.Scheduler.model.Resource ? _0x33f5x1['getId']() : _0x33f5x1;
            if (_0x33f5x4['getResourceId']() == _0x33f5x2) {
                _0x33f5x4['setResourceId'](_0x33f5x1);
            }
        }
    },
    isEventAssignedToResource: function(_0x33f5x3, _0x33f5x4) {
        var _0x33f5x1 = this, _0x33f5x5 = _0x33f5x1['getAssignmentStore'](), _0x33f5x2;
        if (_0x33f5x5) {
            _0x33f5x2 = _0x33f5x5['isEventAssignedToResource'](_0x33f5x3, _0x33f5x4);
        } else {
            _0x33f5x3 = _0x33f5x3 instanceof Ext.ux.Scheduler.model.Event && _0x33f5x3 || _0x33f5x1['getModelById'](_0x33f5x3);
            _0x33f5x4 = _0x33f5x4 instanceof Ext.ux.Scheduler.model.Resource ? _0x33f5x4['getId']() : _0x33f5x4;
            _0x33f5x2 = _0x33f5x3 && _0x33f5x3['getResourceId']() == _0x33f5x4 || false;
        }
        return _0x33f5x2;
    },
    removeAssignmentsForEvent: function(_0x33f5x1) {
        var _0x33f5x2 = this, _0x33f5x3 = _0x33f5x2['getAssignmentStore']();
        if (_0x33f5x3) {
            _0x33f5x3['removeAssignmentsForEvent'](_0x33f5x1);
        } else {
            _0x33f5x1 = _0x33f5x1 instanceof Ext.ux.Scheduler.model.Event && _0x33f5x1 || _0x33f5x2['getModelById'](_0x33f5x1);
            _0x33f5x1 && _0x33f5x1['setResourceId'](null);
        }
    },
    removeAssignmentsForResource: function(_0x33f5x3) {
        var _0x33f5x1 = this, _0x33f5x4 = _0x33f5x1['getAssignmentStore'](), _0x33f5x2 = _0x33f5x1['getResourceStore']();
        if (_0x33f5x4) {
            _0x33f5x4['removeAssignmentsForResource'](_0x33f5x3);
        } else {
            if (_0x33f5x2) {
                _0x33f5x3 = _0x33f5x3 instanceof Ext.ux.Scheduler.model.Resource && _0x33f5x3 || _0x33f5x2['getModelById'](_0x33f5x3);
                _0x33f5x3 && Ext.Array['each'](_0x33f5x1['resourceEventsCache']['get'](_0x33f5x3), function(_0x33f5x5) {
                    _0x33f5x5['setResourceId'](null);
                });
            } else {
                _0x33f5x3 = _0x33f5x3 instanceof Ext.ux.Scheduler.model.Resource ? _0x33f5x3['getId']() : _0x33f5x3;
                Ext.Array['each'](_0x33f5x1['getRange'](), function(_0x33f5x5) {
                    _0x33f5x5['getResourceId']() == _0x33f5x3 && _0x33f5x5['setResourceId'](null);
                });
            }
        }
    },
    isEventPersistable: function(_0x33f5x5) {
        var _0x33f5x4 = this, _0x33f5x9 = _0x33f5x4['getAssignmentStore'](), _0x33f5x8, _0x33f5x3, _0x33f5x1, _0x33f5x2 = true;
        if (!_0x33f5x9) {
            _0x33f5x8 = _0x33f5x5['getResources']();
            for (_0x33f5x3 = 0, _0x33f5x1 = _0x33f5x8['length']; _0x33f5x2 && _0x33f5x3 < _0x33f5x1; ++_0x33f5x3) {
                _0x33f5x2 = _0x33f5x8[_0x33f5x3]['phantom'] !== true;
            }
        }
        return _0x33f5x2;
    }
});

Ext.define('Ext.ux.Scheduler.model.Event', {
    extend: Ext.ux.Scheduler.model.Range,
    idProperty: 'Id',
    customizableFields: [ {
        name: 'IconCls'
    }, {
        name: 'ResourceId'
    }, {
        name: 'Draggable',
        type: 'boolean',
        persist: false,
        defaultValue: true
    }, {
        name: 'Resizable',
        persist: false,
        defaultValue: true
    } ],
    resourceIdField: 'ResourceId',
    draggableField: 'Draggable',
    resizableField: 'Resizable',
    iconClsField: 'IconCls',
    getInternalId: function() {
        return this['internalId'];
    },
    getEventStore: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['joined'] && _0x33f5x1['joined'][0];
        if (_0x33f5x2 && !_0x33f5x2['isEventStore']) {
            Ext.Array['sort'](_0x33f5x1['joined'], function(_0x33f5x4, _0x33f5x3) {
                return (_0x33f5x4['isEventStore'] || false) > (_0x33f5x3['isEventStore'] || false) && -1 || 1;
            });
            _0x33f5x2 = _0x33f5x1['joined'][0];
            _0x33f5x2 = _0x33f5x2['isEventStore'] ? _0x33f5x2 : null;
        }
        return _0x33f5x2;
    },
    getResourceStore: function() {
        var _0x33f5x2 = this['getEventStore']();
        return _0x33f5x2 && _0x33f5x2['getResourceStore']();
    },
    getAssignmentStore: function() {
        var _0x33f5x2 = this['getEventStore']();
        return _0x33f5x2 && _0x33f5x2['getAssignmentStore']();
    },
    getResources: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getEventStore']();
        return _0x33f5x2 && _0x33f5x2['getResourcesForEvent'](_0x33f5x1) || [];
    },
    forEachResource: function(_0x33f5x4, _0x33f5x3) {
        var _0x33f5x2 = this['getResources']();
        for (var _0x33f5x1 = 0; _0x33f5x1 < _0x33f5x2['length']; _0x33f5x1++) {
            if (_0x33f5x4['call'](_0x33f5x3 || this, _0x33f5x2[_0x33f5x1]) === false) {
                return;
            }
        }
    },
    getResource: function(_0x33f5x5) {
        var _0x33f5x4 = this, _0x33f5x2 = null, _0x33f5x1 = _0x33f5x4['getEventStore'](), _0x33f5x3 = _0x33f5x1 && _0x33f5x1['getResourceStore']();
        _0x33f5x5 = _0x33f5x5 == null ? _0x33f5x4['getResourceId']() : _0x33f5x5;
        if (_0x33f5x1 && (_0x33f5x5 === null || _0x33f5x5 === undefined)) {
            _0x33f5x2 = _0x33f5x1['getResourcesForEvent'](_0x33f5x4);
            if (_0x33f5x2['length'] == 1) {
                _0x33f5x2 = _0x33f5x2[0];
            } else {
                if (_0x33f5x2['length'] > 1) {
                    Ext['Error']['raise']('Event::getResource() is not applicable for events with multiple assignments, please use Event::getResources() instead.');
                } else {
                    _0x33f5x2 = null;
                }
            }
        } else {
            if (_0x33f5x3) {
                _0x33f5x2 = _0x33f5x3['getModelById'](_0x33f5x5);
            }
        }
        return _0x33f5x2;
    },
    setResource: function(_0x33f5x3) {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getEventStore']();
        _0x33f5x2 && _0x33f5x2['removeAssignmentsForEvent'](_0x33f5x1);
        _0x33f5x1['assign'](_0x33f5x3);
    },
    assign: function(_0x33f5x3) {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getEventStore']();
        _0x33f5x3 = _0x33f5x3 instanceof Ext.ux.Scheduler.model.Resource ? _0x33f5x3['getId']() : _0x33f5x3;
        if (_0x33f5x2) {
            _0x33f5x2['assignEventToResource'](_0x33f5x1, _0x33f5x3);
        } else {
            _0x33f5x1['setResourceId'](_0x33f5x3);
        }
    },
    unassign: function(_0x33f5x3) {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getEventStore']();
        _0x33f5x3 = _0x33f5x3 instanceof Ext.ux.Scheduler.model.Resource ? _0x33f5x3['getId']() : _0x33f5x3;
        if (_0x33f5x2) {
            _0x33f5x2['unassignEventFromResource'](_0x33f5x1, _0x33f5x3);
        } else {
            if (_0x33f5x1['getResourceId']() == _0x33f5x3) {
                _0x33f5x1['setResourceId'](null);
            }
        }
    },
    reassign: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x4 = this, _0x33f5x3 = _0x33f5x4['getEventStore']();
        _0x33f5x2 = _0x33f5x2 instanceof Ext.ux.Scheduler.model.Resource ? _0x33f5x2['getId']() : _0x33f5x2;
        _0x33f5x1 = _0x33f5x1 instanceof Ext.ux.Scheduler.model.Resource ? _0x33f5x1['getId']() : _0x33f5x1;
        if (_0x33f5x3) {
            _0x33f5x3['reassignEventFromResourceToResource'](_0x33f5x4, _0x33f5x2, _0x33f5x1);
        } else {
            _0x33f5x4['setResourceId'](_0x33f5x1);
        }
    },
    isAssignedTo: function(_0x33f5x4) {
        var _0x33f5x3 = this, _0x33f5x1 = _0x33f5x3['getEventStore'](), _0x33f5x2 = false;
        _0x33f5x4 = _0x33f5x4 instanceof Ext.ux.Scheduler.model.Resource && _0x33f5x4['getId']() || _0x33f5x4;
        if (_0x33f5x1) {
            _0x33f5x2 = _0x33f5x1['isEventAssignedToResource'](_0x33f5x3, _0x33f5x4);
        } else {
            _0x33f5x2 = _0x33f5x3['getResourceId']() == _0x33f5x4;
        }
        return _0x33f5x2;
    },
    getAssignments: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getEventStore']();
        return _0x33f5x2 && _0x33f5x2['getAssignmentsForEvent'](_0x33f5x1);
    },
    isDraggable: function() {
        return this['getDraggable']();
    },
    isResizable: function() {
        return this['getResizable']();
    },
    isPersistable: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getEventStore']();
        return _0x33f5x2 && _0x33f5x2['isEventPersistable'](_0x33f5x1);
    }
});

Ext.define('Ext.ux.Scheduler.data.EventStore', {
    extend: Ext.data['Store'],
    alias: 'store.eventstore',
    mixins: [ Ext.ux.Scheduler.data.mixin.UniversalModelGetter, Ext.ux.Scheduler.data.mixin.CacheHintHelper, Ext.ux.Scheduler.data['mixin']['EventStore'], Robo.data.Store ],
    storeId: 'events',
    model: 'Ext.ux.Scheduler.model.Event',
    config: {
        model: 'Ext.ux.Scheduler.model.Event'
    },
    constructor: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['callParent']([ _0x33f5x2 ]);
        _0x33f5x1['resourceStore'] && _0x33f5x1['setResourceStore'](_0x33f5x1['resourceStore']);
        _0x33f5x1['assignmentStore'] && _0x33f5x1['setAssignmentStore'](_0x33f5x1['assignmentStore']);
        if (_0x33f5x1['getModel']() !== Ext.ux.Scheduler.model.Event && !(_0x33f5x1['getModel']()['prototype'] instanceof Ext.ux.Scheduler.model.Event)) {
            throw 'The model for the EventStore must subclass Ext.ux.Scheduler.model.Event';
        }
    },
    append: function(_0x33f5x2) {
        this['add'](_0x33f5x2);
    }
});

Ext.define('Ext.ux.Scheduler.data.mixin.ResourceStore', {
    eventStore: null,
    getEventStore: function() {
        return this['eventStore'];
    },
    setEventStore: function(_0x33f5x2) {
        var _0x33f5x1 = this, _0x33f5x3;
        if (_0x33f5x1['eventStore'] !== _0x33f5x2) {
            _0x33f5x3 = _0x33f5x1['eventStore'];
            _0x33f5x1['eventStore'] = _0x33f5x2 && Ext.StoreMgr.lookup(_0x33f5x2) || null;
            _0x33f5x1['fireEvent']('eventstorechange', _0x33f5x1, _0x33f5x2, _0x33f5x3);
        }
    },
    getScheduledEventsInTimeSpan: function(_0x33f5x5, _0x33f5x2, _0x33f5x3) {
        var _0x33f5x1 = [];
        var _0x33f5x4 = Ext.ux.Scheduler.util.Date;
        _0x33f5x3 = _0x33f5x3 || this['getEventStore']();
        Ext.Array['each'](this['getRange'](), function(_0x33f5x8) {
            Ext.Array['each'](_0x33f5x3['getEventsForResource'](_0x33f5x8), function(_0x33f5x9) {
                if (_0x33f5x9['intersectsRange'](_0x33f5x5, _0x33f5x2)) {
                    _0x33f5x1['push'](_0x33f5x9);
                }
            });
        });
        return _0x33f5x1;
    }
});

Ext.define('Ext.ux.Scheduler.model.Resource', {
    extend: Ext.ux.Scheduler.model.Customizable,
    idProperty: 'Id',
    config: Ext['versions']['touch'] ? {
        idProperty: 'Id'
    } : null,
    nameField: 'Name',
    customizableFields: [ {
        name: 'Name',
        type: 'string'
    } ],
    getInternalId: function() {
        return this['internalId'];
    },
    getResourceStore: function() {
        return this['joined'] && this['joined'][0];
    },
    getEventStore: function() {
        var _0x33f5x2 = this['getResourceStore']();
        return _0x33f5x2 && _0x33f5x2['getEventStore']() || this['parentNode'] && this['parentNode']['getEventStore']();
    },
    getAssignmentStore: function() {
        var _0x33f5x2 = this['getEventStore']();
        return _0x33f5x2 && _0x33f5x2['getAssignmentStore']();
    },
    getEvents: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x2 = _0x33f5x2 || _0x33f5x1['getEventStore']();
        return _0x33f5x2 && _0x33f5x2['getEventsForResource'](_0x33f5x1) || [];
    },
    getAssignments: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getEventStore']();
        return _0x33f5x2 && _0x33f5x2['getAssignmentsForResource'](_0x33f5x1);
    },
    isPersistable: function() {
        var _0x33f5x2 = this['parentNode'];
        return !_0x33f5x2 || !_0x33f5x2['phantom'] || _0x33f5x2['isRoot'] && _0x33f5x2['isRoot']();
    },
    isAbove: function(_0x33f5x4) {
        var _0x33f5x8 = this, _0x33f5x7 = _0x33f5x8['getResourceStore'](), _0x33f5xf = false, _0x33f5x5, _0x33f5x3, _0x33f5x1, _0x33f5x2, _0x33f5x9;
        Ext.Assert && Ext.Assert.truthy(_0x33f5x7, 'Resource must be added to a store to be able to check if it above of an other resource');
        if (_0x33f5x8 == _0x33f5x4) {
            _0x33f5xf = false;
        } else {
            if (_0x33f5x7 instanceof Ext.data.TreeStore) {
                _0x33f5x5 = _0x33f5x8;
                _0x33f5x3 = [];
                while (_0x33f5x5) {
                    _0x33f5x3['push'](_0x33f5x5);
                    _0x33f5x5 = _0x33f5x5['parentNode'];
                }
                _0x33f5x5 = _0x33f5x4;
                _0x33f5x1 = [];
                while (_0x33f5x5) {
                    _0x33f5x1['push'](_0x33f5x5);
                    _0x33f5x5 = _0x33f5x5['parentNode'];
                }
                _0x33f5x2 = 0;
                while (_0x33f5x2 < _0x33f5x3['length'] - 1 && _0x33f5x2 < _0x33f5x1['length'] - 1 && _0x33f5x3[_0x33f5x2] == _0x33f5x1[_0x33f5x2]) {
                    ++_0x33f5x2;
                }
                _0x33f5x9 = _0x33f5x3[_0x33f5x2];
                _0x33f5x8 = _0x33f5x3[_0x33f5x2 + 1];
                _0x33f5x4 = _0x33f5x1[_0x33f5x2 + 1];
                _0x33f5xf = _0x33f5x9['indexOf'](_0x33f5x8) < _0x33f5x9['indexOf'](_0x33f5x4);
            } else {
                _0x33f5xf = _0x33f5x7['indexOf'](_0x33f5x8) < _0x33f5x7['indexOf'](_0x33f5x4);
            }
        }
        return _0x33f5xf;
    }
});

Ext.define('Ext.ux.Scheduler.data.ResourceStore', {
    extend: Ext.data['Store'],
    model: 'Ext.ux.Scheduler.model.Resource',
    config: {
        model: 'Ext.ux.Scheduler.model.Resource'
    },
    alias: 'store.resourcestore',
    mixins: [ Ext.ux.Scheduler.data.mixin.UniversalModelGetter, Ext.ux.Scheduler.data.mixin.CacheHintHelper, Ext.ux.Scheduler.data.mixin.ResourceStore, Robo.data.Store ],
    storeId: 'resources',
    constructor: function() {
        this['callParent'](arguments);
        if (this['getModel']() !== Ext.ux.Scheduler.model.Resource && !(this['getModel']()['prototype'] instanceof Ext.ux.Scheduler.model.Resource)) {
            throw 'The model for the ResourceStore must subclass Ext.ux.Scheduler.model.Resource';
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.TreeStore', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.data.TreeStore',
    minVersion: '5.1.0',
    overrides: {
        getRejectRecords: function() {
            return this['getModifiedRecords']();
        },
        rejectChanges: function() {
            this['removed'] = this['removedNodes'];
            this['callParent'](arguments);
        },
        remove: function(_0x33f5x1) {
            if (_0x33f5x1['isModel']) {
                _0x33f5x1['remove']();
            } else {
                if (_0x33f5x1 instanceof Array && _0x33f5x1[0]['isModel']) {
                    for (var _0x33f5x2 = 0; _0x33f5x2 < _0x33f5x1['length']; _0x33f5x2++) {
                        _0x33f5x1[_0x33f5x2]['remove']();
                    }
                } else {
                    this['callParent'](arguments);
                }
            }
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.TreeStoreInternalIdMap', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.data.TreeStore',
    minVersion: '5.1.1',
    overrides: {
        registerNode: function(_0x33f5x3, _0x33f5x2) {
            var _0x33f5x1 = this;
            if (!_0x33f5x1['byInternalIdMap']) {
                _0x33f5x1['byInternalIdMap'] = {};
            }
            _0x33f5x1['byInternalIdMap'][_0x33f5x3['internalId']] = _0x33f5x3;
            _0x33f5x1['callParent'](arguments);
        },
        unregisterNode: function(_0x33f5x3, _0x33f5x2) {
            var _0x33f5x1 = this;
            if (_0x33f5x1['byInternalIdMap']) {
                delete _0x33f5x1['byInternalIdMap'][_0x33f5x3['internalId']];
            }
            _0x33f5x1['callParent'](arguments);
        },
        updateRoot: function() {
            this['byInternalIdMap'] = {};
            this['callParent'](arguments);
        }
    }
});

Ext.define('Ext.ux.Scheduler.data.mixin.FilterableTreeStore', {
    isFilteredFlag: false,
    isHiddenFlag: false,
    treeFilter: null,
    lastTreeFilter: null,
    lastTreeHiding: null,
    allowExpandCollapseWhileFiltered: true,
    reApplyFilterOnDataChange: true,
    suspendIncrementalFilterRefresh: 0,
    filterGeneration: 0,
    currentFilterGeneration: null,
    dataChangeListeners: null,
    monitoringDataChange: false,
    filterUpdateSuspended: false,
    onClassMixedIn: function(_0x33f5x2) {
        _0x33f5x2['override'](Ext.ux.Scheduler.data['mixin']['FilterableTreeStore']['prototype']['inheritables']() || {});
    },
    initTreeFiltering: function() {
        this['treeFilter'] = new Ext.util.Filter({
            filterFn: this['isNodeFilteredIn'],
            scope: this
        });
        this['dataChangeListeners'] = {
            nodeappend: this['onNeedToUpdateFilter'],
            nodeinsert: this['onNeedToUpdateFilter'],
            scope: this
        };
        Ext.apply(this['dataChangeListeners'], {
            beforeload: this['onStoreBeforeLoad'],
            load: this['onStoreLoad']
        });
    },
    onStoreBeforeLoad: function() {
        this['filterUpdateSuspended'] = true;
    },
    onStoreLoad: function() {
        this['filterUpdateSuspended'] = false;
        this['onNeedToUpdateFilter']();
    },
    startDataChangeMonitoring: function() {
        if (this['monitoringDataChange']) {
            return;
        }
        this['monitoringDataChange'] = true;
        this['on'](this['dataChangeListeners']);
    },
    stopDataChangeMonitoring: function() {
        if (!this['monitoringDataChange']) {
            return;
        }
        this['monitoringDataChange'] = false;
        this['un'](this['dataChangeListeners']);
    },
    onNeedToUpdateFilter: function() {
        if (this['reApplyFilterOnDataChange'] && !this['filterUpdateSuspended'] && !this['suspendIncrementalFilterRefresh']) {
            this['reApplyFilter']();
        }
    },
    clearTreeFilter: function() {
        if (!this['isTreeFiltered']()) {
            return;
        }
        this['currentFilterGeneration'] = null;
        this['isFilteredFlag'] = false;
        this['lastTreeFilter'] = null;
        if (!this['isTreeFiltered'](true)) {
            this['stopDataChangeMonitoring']();
        }
        this['refreshNodeStoreContent']();
        this['fireEvent']('filter-clear', this);
    },
    reApplyFilter: function() {
        if (this['isHiddenFlag']) {
            this['hideNodesBy']['apply'](this, this['lastTreeHiding']['concat'](this['isFilteredFlag']));
        }
        if (this['isFilteredFlag']) {
            this['filterTreeBy'](this['lastTreeFilter']);
        }
    },
    refreshNodeStoreContent: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getFilters']();
        if (_0x33f5x2['indexOf'](_0x33f5x1['treeFilter']) < 0) {
            _0x33f5x1['addFilter'](_0x33f5x1['treeFilter']);
        } else {
            this['getFilters']()['fireEvent']('endupdate', this['getFilters']());
        }
    },
    getIndexInTotalDataset: function(_0x33f5x4) {
        var _0x33f5x3 = this['getRootNode'](), _0x33f5x8 = -1;
        var _0x33f5x9 = this['rootVisible'];
        if (!_0x33f5x9 && _0x33f5x4 == _0x33f5x3) {
            return -1;
        }
        var _0x33f5x1 = this['isTreeFiltered']();
        var _0x33f5x2 = this['currentFilterGeneration'];
        var _0x33f5x5 = function(_0x33f5xe) {
            if (_0x33f5x1 && _0x33f5xe['__filterGen'] != _0x33f5x2 || _0x33f5xe['hidden']) {
                if (_0x33f5xe == _0x33f5x4) {
                    return false;
                }
            }
            if (_0x33f5x9 || _0x33f5xe != _0x33f5x3) {
                _0x33f5x8++;
            }
            if (_0x33f5xe == _0x33f5x4) {
                return false;
            }
            if (!_0x33f5xe['isLeaf']() && _0x33f5xe['isExpanded']()) {
                var _0x33f5x11 = _0x33f5xe['childNodes'], _0x33f5xf = _0x33f5x11['length'];
                for (var _0x33f5x7 = 0; _0x33f5x7 < _0x33f5xf; _0x33f5x7++) {
                    if (_0x33f5x5(_0x33f5x11[_0x33f5x7]) === false) {
                        return false;
                    }
                }
            }
        };
        _0x33f5x5(_0x33f5x3);
        return _0x33f5x8;
    },
    isTreeFiltered: function(_0x33f5x2) {
        return this['isFilteredFlag'] || _0x33f5x2 && this['isHiddenFlag'];
    },
    markFilteredNodes: function(_0x33f5xf, _0x33f5x1) {
        var _0x33f5x7 = this;
        var _0x33f5x4 = this['currentFilterGeneration'];
        var _0x33f5x3 = {};
        var _0x33f5xe = this['getRootNode'](), _0x33f5x11 = this['rootVisible'];
        var _0x33f5xa = function(_0x33f5x10) {
            var _0x33f5x6 = _0x33f5x10['parentNode'];
            while (_0x33f5x6 && !_0x33f5x3[_0x33f5x6['internalId']]) {
                _0x33f5x3[_0x33f5x6['internalId']] = true;
                _0x33f5x6 = _0x33f5x6['parentNode'];
            }
        };
        var _0x33f5x2 = _0x33f5x1['filter'];
        var _0x33f5xd = _0x33f5x1['scope'] || this;
        var _0x33f5xb = _0x33f5x1['shallow'];
        var _0x33f5xc = _0x33f5x1['checkParents'] || _0x33f5xb;
        var _0x33f5x8 = _0x33f5x1['fullMatchingParents'];
        var _0x33f5x5 = _0x33f5x1['onlyParents'] || _0x33f5x8;
        if (_0x33f5x5 && _0x33f5xc) {
            throw new Error('Can\'t combine `onlyParents` and `checkParents` options');
        }
        if (_0x33f5x11) {
            _0x33f5x3[_0x33f5xe['internalId']] = true;
        }
        var _0x33f5x9 = function(_0x33f5x15) {
            _0x33f5x15['addedWhileFiltered'] = false;
            if (_0x33f5x15['hidden']) {
                return;
            }
            var _0x33f5x10, _0x33f5x14, _0x33f5x17, _0x33f5x6;
            if (_0x33f5x15['isLeaf']()) {
                if (_0x33f5x2['call'](_0x33f5xd, _0x33f5x15, _0x33f5x3)) {
                    _0x33f5x3[_0x33f5x15['internalId']] = true;
                    _0x33f5xa(_0x33f5x15);
                }
            } else {
                if (_0x33f5x5) {
                    _0x33f5x10 = _0x33f5x2['call'](_0x33f5xd, _0x33f5x15);
                    _0x33f5x14 = _0x33f5x15['childNodes'];
                    _0x33f5x17 = _0x33f5x14['length'];
                    if (_0x33f5x10) {
                        _0x33f5x3[_0x33f5x15['internalId']] = true;
                        _0x33f5xa(_0x33f5x15);
                        if (_0x33f5x8) {
                            _0x33f5x15['cascadeBy'](function(_0x33f5x12) {
                                _0x33f5x3[_0x33f5x12['internalId']] = true;
                            });
                            return;
                        }
                    }
                    for (_0x33f5x6 = 0; _0x33f5x6 < _0x33f5x17; _0x33f5x6++) {
                        if (_0x33f5x10 && _0x33f5x14[_0x33f5x6]['isLeaf']()) {
                            _0x33f5x3[_0x33f5x14[_0x33f5x6]['internalId']] = true;
                        } else {
                            if (!_0x33f5x14[_0x33f5x6]['isLeaf']()) {
                                _0x33f5x9(_0x33f5x14[_0x33f5x6]);
                            }
                        }
                    }
                } else {
                    if (_0x33f5xc) {
                        _0x33f5x10 = _0x33f5x2['call'](_0x33f5xd, _0x33f5x15, _0x33f5x3);
                        if (_0x33f5x10) {
                            _0x33f5x3[_0x33f5x15['internalId']] = true;
                            _0x33f5xa(_0x33f5x15);
                        }
                    }
                    if (!_0x33f5xc || !_0x33f5xb || _0x33f5xb && (_0x33f5x10 || _0x33f5x15 == _0x33f5xe && !_0x33f5x11)) {
                        _0x33f5x14 = _0x33f5x15['childNodes'];
                        _0x33f5x17 = _0x33f5x14['length'];
                        for (_0x33f5x6 = 0; _0x33f5x6 < _0x33f5x17; _0x33f5x6++) {
                            _0x33f5x9(_0x33f5x14[_0x33f5x6]);
                        }
                    }
                }
            }
        };
        _0x33f5x9(_0x33f5xf);
        _0x33f5xe['cascadeBy'](function(_0x33f5x6) {
            if (_0x33f5x3[_0x33f5x6['internalId']]) {
                _0x33f5x6['__filterGen'] = _0x33f5x4;
                if (_0x33f5x7['allowExpandCollapseWhileFiltered'] && !_0x33f5x6['isLeaf']()) {
                    _0x33f5x6['expand']();
                }
            }
        });
    },
    filterTreeBy: function(_0x33f5x3, _0x33f5x1) {
        this['currentFilterGeneration'] = this['filterGeneration']++;
        var _0x33f5x2;
        if (arguments['length'] == 1 && Ext.isObject(arguments[0])) {
            _0x33f5x1 = _0x33f5x3['scope'];
            _0x33f5x2 = _0x33f5x3['filter'];
        } else {
            _0x33f5x2 = _0x33f5x3;
            _0x33f5x3 = {
                filter: _0x33f5x2,
                scope: _0x33f5x1
            };
        }
        this['fireEvent']('nodestore-datachange-start', this);
        _0x33f5x3 = _0x33f5x3 || {};
        this['markFilteredNodes'](this['getRootNode'](), _0x33f5x3);
        this['startDataChangeMonitoring']();
        this['isFilteredFlag'] = true;
        this['lastTreeFilter'] = _0x33f5x3;
        this['fireEvent']('nodestore-datachange-end', this);
        this['fireEvent']('filter-set', this);
        this['refreshNodeStoreContent']();
    },
    isNodeFilteredIn: function(_0x33f5x3) {
        var _0x33f5x1 = this['isTreeFiltered']();
        var _0x33f5x2 = this['currentFilterGeneration'];
        return this['loading'] || !Boolean(_0x33f5x1 && _0x33f5x3['__filterGen'] != _0x33f5x2 || _0x33f5x3['hidden']);
    },
    hasNativeFilters: function() {
        var _0x33f5x3 = this, _0x33f5x1 = _0x33f5x3['getFilters'](), _0x33f5x2 = _0x33f5x1['getCount']();
        return _0x33f5x2 && _0x33f5x2 > 1 || _0x33f5x1['indexOf'](_0x33f5x3['treeFilter']) < 0;
    },
    hideNodesBy: function(_0x33f5x1, _0x33f5x2, _0x33f5x4) {
        var _0x33f5x3 = this;
        if (_0x33f5x3['isFiltered']() && _0x33f5x3['hasNativeFilters']()) {
            throw new Error('Can\'t hide nodes of a filtered tree store');
        }
        _0x33f5x2 = _0x33f5x2 || _0x33f5x3;
        _0x33f5x3['getRootNode']()['cascadeBy'](function(_0x33f5x5) {
            _0x33f5x5['hidden'] = Boolean(_0x33f5x1['call'](_0x33f5x2, _0x33f5x5, _0x33f5x3));
        });
        _0x33f5x3['startDataChangeMonitoring']();
        _0x33f5x3['isHiddenFlag'] = true;
        _0x33f5x3['lastTreeHiding'] = [ _0x33f5x1, _0x33f5x2 ];
        if (!_0x33f5x4) {
            _0x33f5x3['refreshNodeStoreContent']();
        }
    },
    showAllNodes: function(_0x33f5x2) {
        this['getRootNode']()['cascadeBy'](function(_0x33f5x1) {
            _0x33f5x1['hidden'] = false;
        });
        this['isHiddenFlag'] = false;
        this['lastTreeHiding'] = null;
        if (!this['isTreeFiltered'](true)) {
            this['stopDataChangeMonitoring']();
        }
        if (!_0x33f5x2) {
            this['refreshNodeStoreContent']();
        }
    },
    inheritables: function() {
        return {
            onNodeExpand: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
                if (this['isTreeFiltered'](true) && _0x33f5x3 == this['getRoot']()) {
                    this['callParent'](arguments);
                    this['reApplyFilter']();
                } else {
                    return this['callParent'](arguments);
                }
            },
            onNodeCollapse: function(_0x33f5x9, _0x33f5x1, _0x33f5xe, _0x33f5xf, _0x33f5xb) {
                var _0x33f5x8 = this;
                var _0x33f5x4 = _0x33f5x8['data'];
                var _0x33f5x11 = _0x33f5x4['contains'];
                var _0x33f5x3 = _0x33f5x8['isTreeFiltered']();
                var _0x33f5x5 = _0x33f5x8['currentFilterGeneration'];
                _0x33f5x4['contains'] = function() {
                    var _0x33f5x6, _0x33f5xa, _0x33f5x17;
                    var _0x33f5xd = _0x33f5x8['indexOf'](_0x33f5x9) + 1;
                    var _0x33f5x10 = false;
                    for (var _0x33f5xc = 0; _0x33f5xc < _0x33f5x1['length']; _0x33f5xc++) {
                        if (!(_0x33f5x1[_0x33f5xc]['hidden'] || _0x33f5x3 && _0x33f5x1[_0x33f5xc]['__filterGen'] != _0x33f5x5) && _0x33f5x11['call'](this, _0x33f5x1[_0x33f5xc])) {
                            _0x33f5x6 = _0x33f5x9;
                            while (_0x33f5x6['parentNode']) {
                                _0x33f5xa = _0x33f5x6;
                                do {
                                    _0x33f5xa = _0x33f5xa['nextSibling'];
                                } while (_0x33f5xa && (_0x33f5xa['hidden'] || _0x33f5x3 && _0x33f5xa['__filterGen'] != _0x33f5x5));
                                if (_0x33f5xa) {
                                    _0x33f5x10 = true;
                                    _0x33f5x17 = _0x33f5x8['indexOf'](_0x33f5xa);
                                    break;
                                } else {
                                    _0x33f5x6 = _0x33f5x6['parentNode'];
                                }
                            }
                            if (!_0x33f5x10) {
                                _0x33f5x17 = _0x33f5x8['getCount']();
                            }
                            _0x33f5x8['removeAt'](_0x33f5xd, _0x33f5x17 - _0x33f5xd);
                            break;
                        }
                    }
                    return false;
                };
                this['callParent'](arguments);
                if (this['isTreeFiltered']()) {
                    if (_0x33f5x8['needsLocalFilter']()) {
                        _0x33f5x1 = Ext.Array['filter'](_0x33f5x1, _0x33f5x8['filterVisible']);
                    }
                    if (!_0x33f5x1['length']) {
                        var _0x33f5x7 = _0x33f5x8['indexOf'](_0x33f5x9) + 1;
                        var _0x33f5x2 = _0x33f5x8['indexOfNextVisibleNode'](_0x33f5x9);
                        _0x33f5x8['removeAt'](_0x33f5x7, _0x33f5x2 - _0x33f5x7);
                    }
                }
                _0x33f5x4['contains'] = _0x33f5x11;
            },
            handleNodeExpand: function(_0x33f5x7, _0x33f5x2, _0x33f5xe) {
                var _0x33f5x5 = this;
                var _0x33f5x8 = [];
                var _0x33f5x1 = _0x33f5x5['isTreeFiltered']();
                var _0x33f5x9 = _0x33f5x5['currentFilterGeneration'];
                for (var _0x33f5x3 = 0; _0x33f5x3 < _0x33f5x2['length']; _0x33f5x3++) {
                    var _0x33f5x4 = _0x33f5x2[_0x33f5x3];
                    if (!(_0x33f5x1 && _0x33f5x4['__filterGen'] != _0x33f5x9 || _0x33f5x4['hidden'])) {
                        _0x33f5x8[_0x33f5x8['length']] = _0x33f5x4;
                    }
                }
                return this['callParent']([ _0x33f5x7, _0x33f5x8, _0x33f5xe ]);
            },
            onNodeInsert: function(_0x33f5xa, _0x33f5x2, _0x33f5x7) {
                var _0x33f5xb = this, _0x33f5xf, _0x33f5x6, _0x33f5x11, _0x33f5x1, _0x33f5xc, _0x33f5x8, _0x33f5x3 = _0x33f5x2['raw'] || _0x33f5x2['data'], _0x33f5x9 = _0x33f5xb['removedNodes'], _0x33f5xd, _0x33f5x5, _0x33f5x4, _0x33f5xe = this['isTreeFiltered']();
                if (_0x33f5xb['filterFn']) {
                    _0x33f5x5 = _0x33f5xb['filterFn'](_0x33f5x2);
                    _0x33f5x2['set']('visible', _0x33f5x5);
                    if (_0x33f5x5) {
                        _0x33f5xa['set']('visible', _0x33f5xb['filterFn'](_0x33f5xa));
                    }
                }
                if (!this['reApplyFilterOnDataChange'] && _0x33f5xe) {
                    _0x33f5x2['addedWhileFiltered'] = true;
                }
                _0x33f5xb['registerNode'](_0x33f5x2, true);
                _0x33f5xb['beginUpdate']();
                if (_0x33f5xb['isVisible'](_0x33f5x2) || _0x33f5xe && _0x33f5x2['addedWhileFiltered']) {
                    if (_0x33f5x7 === 0 || !_0x33f5x2['previousSibling']) {
                        _0x33f5xf = _0x33f5xa;
                    } else {
                        for (_0x33f5x6 = _0x33f5x2['previousSibling']; _0x33f5x6 && !_0x33f5x6['addedWhileFiltered'] && !_0x33f5x6['get']('visible'); _0x33f5x6 = _0x33f5x6['previousSibling']) {}
                        if (!_0x33f5x6) {
                            _0x33f5xf = _0x33f5xa;
                        } else {
                            while (_0x33f5x6['isExpanded']() && _0x33f5x6['lastChild']) {
                                _0x33f5x6 = _0x33f5x6['lastChild'];
                            }
                            for (;_0x33f5x6 && !_0x33f5x6['addedWhileFiltered'] && !_0x33f5x6['get']('visible'); _0x33f5x6 = _0x33f5x6['previousSibling']) {}
                            _0x33f5xf = _0x33f5x6;
                        }
                    }
                    _0x33f5xb['insert'](_0x33f5xb['indexOf'](_0x33f5xf) + 1, _0x33f5x2);
                    if (!_0x33f5x2['isLeaf']() && _0x33f5x2['isExpanded']()) {
                        if (_0x33f5x2['isLoaded']()) {
                            _0x33f5xb['onNodeExpand'](_0x33f5x2, _0x33f5x2['childNodes']);
                        } else {
                            if (!_0x33f5xb['fillCount']) {
                                _0x33f5x2['set']('expanded', false);
                                _0x33f5x2['expand']();
                            }
                        }
                    }
                }
                Ext.Array['remove'](_0x33f5x9, _0x33f5x2);
                _0x33f5xb['needsSync'] = _0x33f5xb['needsSync'] || _0x33f5x2['phantom'] || _0x33f5x2['dirty'];
                if (!_0x33f5x2['isLeaf']() && !_0x33f5x2['isLoaded']() && !_0x33f5xb['lazyFill']) {
                    _0x33f5x11 = _0x33f5xb['getProxy']()['getReader']();
                    _0x33f5x1 = _0x33f5x2['getProxy']();
                    _0x33f5xc = _0x33f5x1 ? _0x33f5x1['getReader']() : null;
                    _0x33f5x8 = _0x33f5xc && _0x33f5xc['initialConfig']['rootProperty'] ? _0x33f5xc : _0x33f5x11;
                    _0x33f5xd = _0x33f5x8['getRoot'](_0x33f5x3);
                    if (_0x33f5xd) {
                        _0x33f5x4 = _0x33f5x2['childType'];
                        _0x33f5xb['fillNode'](_0x33f5x2, _0x33f5x8['extractData'](_0x33f5xd, _0x33f5x4 ? {
                            model: _0x33f5x4
                        } : undefined));
                    }
                }
                _0x33f5xb['endUpdate']();
            },
            isFiltered: function() {
                return this['callParent'](arguments) || this['isTreeFiltered']();
            },
            afterEdit: function(_0x33f5x3, _0x33f5x1) {
                var _0x33f5x2 = this;
                if (Ext['getVersion']()['isGreaterThan']('6.0.2')) {
                    if (_0x33f5x2['needsLocalFilter']()) {
                        _0x33f5x2['doFilter'](_0x33f5x3);
                    }
                    _0x33f5x2['superclass']['superclass']['afterEdit']['apply'](_0x33f5x2, [ _0x33f5x3, _0x33f5x1 ]);
                } else {
                    return _0x33f5x2['callParent']([ _0x33f5x3, _0x33f5x1 ]);
                }
            }
        };
    }
});

Ext.define('Ext.ux.Scheduler.data.ResourceTreeStore', {
    extend: Ext.data.TreeStore,
    mixins: [ Ext.ux.Scheduler.data.mixin.UniversalModelGetter, Ext.ux.Scheduler.data.mixin.CacheHintHelper, Ext.ux.Scheduler.data.mixin.ResourceStore, Ext.ux.Scheduler.data['mixin']['FilterableTreeStore'], Robo.data.Store ],
    alias: 'store.resourcetreestore',
    model: 'Ext.ux.Scheduler.model.Resource',
    storeId: 'resources',
    constructor: function() {
        this['callParent'](arguments);
        this['initTreeFiltering']();
        if (this['getModel']() !== Ext.ux.Scheduler.model.Resource && !(this['getModel']()['prototype'] instanceof Ext.ux.Scheduler.model.Resource)) {
            throw 'The model for the ResourceTreeStore must subclass Ext.ux.Scheduler.model.Resource';
        }
    },
    setRootNode: function() {
        this['isSettingRoot'] = true;
        var _0x33f5x2 = this['callParent'](arguments);
        this['isSettingRoot'] = false;
        return _0x33f5x2;
    }
});

Ext.define('Ext.ux.Scheduler.model.TimeAxisTick', {
    extend: Ext.ux.Scheduler.model.Range,
    startDateField: 'start',
    endDateField: 'end'
});

Ext.define('Ext.ux.Scheduler.data.TimeAxis', {
    extend: Ext.data['JsonStore'],
    model: 'Ext.ux.Scheduler.model.TimeAxisTick',
    continuous: true,
    originalContinuous: null,
    autoAdjust: true,
    unit: null,
    increment: null,
    resolutionUnit: null,
    resolutionIncrement: null,
    weekStartDay: null,
    mainUnit: null,
    shiftUnit: null,
    shiftIncrement: 1,
    defaultSpan: 1,
    isConfigured: false,
    adjustedStart: null,
    adjustedEnd: null,
    visibleTickStart: null,
    visibleTickEnd: null,
    presetName: null,
    mode: 'plain',
    startTime: 0,
    endTime: 24,
    constructor: function(_0x33f5x2) {
        var _0x33f5x3 = this;
        _0x33f5x2 = _0x33f5x2 || {};
        if (_0x33f5x3['setModel']) {
            _0x33f5x3['setModel'](_0x33f5x3['model']);
        }
        _0x33f5x3['setMode'](_0x33f5x2['mode'] || _0x33f5x3['mode']);
        _0x33f5x3['originalContinuous'] = _0x33f5x3['continuous'];
        _0x33f5x3['callParent'](arguments);
        _0x33f5x3['on'](Ext['versions']['touch'] ? 'refresh' : 'datachanged', function() {
            _0x33f5x3['fireEvent']('reconfigure', _0x33f5x3, false);
        });
        _0x33f5x3['on']('endreconfigure', function(_0x33f5x4, _0x33f5x5) {
            _0x33f5x4['fireEvent']('reconfigure', _0x33f5x4, _0x33f5x5);
        });
        if (_0x33f5x2['viewPreset']) {
            var _0x33f5x1 = Ext.ux.Scheduler.preset.Manager.getPreset(_0x33f5x2['viewPreset']);
            _0x33f5x1 && _0x33f5x3['consumeViewPreset'](_0x33f5x1);
        }
        if (_0x33f5x2['start'] || _0x33f5x3['start']) {
            _0x33f5x3['reconfigure'](_0x33f5x2);
        }
    },
    reconfigure: function(_0x33f5x4, _0x33f5x2) {
        this['isConfigured'] = true;
        Ext.apply(this, _0x33f5x4);
        var _0x33f5xb = this['getAdjustedDates'](_0x33f5x4['start'], _0x33f5x4['end'], true);
        var _0x33f5xe = this['getAdjustedDates'](_0x33f5x4['start'], _0x33f5x4['end']);
        var _0x33f5x1 = _0x33f5xe['start'];
        var _0x33f5x5 = _0x33f5xe['end'];
        if (this['fireEvent']('beforereconfigure', this, _0x33f5x1, _0x33f5x5) !== false) {
            this['fireEvent']('beginreconfigure', this);
            var _0x33f5x7 = this['unit'];
            var _0x33f5xf = this['increment'] || 1;
            var _0x33f5x9 = this['generateTicks'](_0x33f5x1, _0x33f5x5, _0x33f5x7, _0x33f5xf);
            this['removeAll'](true);
            this['suspendEvents']();
            this['add'](_0x33f5x9);
            if (this['getCount']() === 0) {
                Ext['Error']['raise']('Invalid time axis configuration or filter, please check your input data.');
            }
            this['resumeEvents']();
            var _0x33f5x3 = Ext.ux.Scheduler.util.Date;
            var _0x33f5x8 = _0x33f5x9['length'];
            if (this['isContinuous']()) {
                this['adjustedStart'] = _0x33f5xb['start'];
                this['adjustedEnd'] = this['getNext'](_0x33f5x8 > 1 ? _0x33f5x9[_0x33f5x8 - 1]['start'] : _0x33f5xb['start'], _0x33f5x7, _0x33f5xf);
            } else {
                this['adjustedStart'] = this['getStart']();
                this['adjustedEnd'] = this['getEnd']();
            }
            do {
                this['visibleTickStart'] = (this['getStart']() - this['adjustedStart']) / (_0x33f5x3['getUnitDurationInMs'](_0x33f5x7) * _0x33f5xf);
                if (this['visibleTickStart'] >= 1) {
                    this['adjustedStart'] = _0x33f5x3['getNext'](this['adjustedStart'], _0x33f5x7, _0x33f5xf);
                }
            } while (this['visibleTickStart'] >= 1);
            do {
                this['visibleTickEnd'] = _0x33f5x8 - (this['adjustedEnd'] - this['getEnd']()) / (_0x33f5x3['getUnitDurationInMs'](_0x33f5x7) * _0x33f5xf);
                if (_0x33f5x8 - this['visibleTickEnd'] >= 1) {
                    this['adjustedEnd'] = _0x33f5x3['getNext'](this['adjustedEnd'], _0x33f5x7, -1);
                }
            } while (_0x33f5x8 - this['visibleTickEnd'] >= 1);
            this['fireEvent']('endreconfigure', this, _0x33f5x2);
        }
    },
    setMode: function(_0x33f5x2) {
        this['mode'] = _0x33f5x2;
        if (_0x33f5x2 === 'calendar') {
            this['generateTicksValidatorFn'] = function(_0x33f5x1) {
                if (this['startTime'] > 0 || this['endTime'] < 24) {
                    return _0x33f5x1['getHours']() >= this['startTime'] && _0x33f5x1['getHours']() < this['endTime'];
                } else {
                    return true;
                }
            };
        } else {
            this['generateTicksValidatorFn'] = function() {
                return true;
            };
        }
    },
    setTimeSpan: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x1 = this['getAdjustedDates'](_0x33f5x3, _0x33f5x2);
        _0x33f5x3 = _0x33f5x1['start'];
        _0x33f5x2 = _0x33f5x1['end'];
        if (this['getStart']() - _0x33f5x3 !== 0 || this['getEnd']() - _0x33f5x2 !== 0) {
            this['reconfigure']({
                start: _0x33f5x3,
                end: _0x33f5x2
            });
        }
    },
    filterBy: function(_0x33f5x1, _0x33f5x2) {
        this['continuous'] = false;
        _0x33f5x2 = _0x33f5x2 || this;
        this['clearFilter'](true);
        this['suspendEvents'](true);
        this['filter']([ {
            filterFn: function(_0x33f5x4, _0x33f5x3) {
                return _0x33f5x1['call'](_0x33f5x2, _0x33f5x4['data'], _0x33f5x3);
            }
        } ]);
        if (this['getCount']() === 0) {
            this['clearFilter']();
            this['resumeEvents']();
            Ext['Error']['raise']('Invalid time axis filter - no ticks passed through the filter. Please check your filter method.');
        }
        this['resumeEvents']();
    },
    isContinuous: function() {
        return this['continuous'] && !this['isFiltered']();
    },
    clearFilter: function() {
        this['continuous'] = this['originalContinuous'];
        this['callParent'](arguments);
    },
    generateTicks: function(_0x33f5x2, _0x33f5x4, _0x33f5x9, _0x33f5xf) {
        var _0x33f5x7 = [], _0x33f5x8, _0x33f5x1 = Ext.ux.Scheduler.util.Date, _0x33f5x5 = 0;
        _0x33f5x9 = _0x33f5x9 || this['unit'];
        _0x33f5xf = _0x33f5xf || this['increment'];
        var _0x33f5xe = this['getAdjustedDates'](_0x33f5x2, _0x33f5x4);
        _0x33f5x2 = _0x33f5xe['start'];
        _0x33f5x4 = _0x33f5xe['end'];
        while (_0x33f5x2 < _0x33f5x4) {
            _0x33f5x8 = this['getNext'](_0x33f5x2, _0x33f5x9, _0x33f5xf);
            if (!this['autoAdjust'] && _0x33f5x8 > _0x33f5x4) {
                _0x33f5x8 = _0x33f5x4;
            }
            if (_0x33f5x9 === _0x33f5x1['HOUR'] && _0x33f5xf > 1 && _0x33f5x7['length'] > 0 && _0x33f5x5 === 0) {
                var _0x33f5x3 = _0x33f5x7[_0x33f5x7['length'] - 1];
                _0x33f5x5 = (_0x33f5x3['start']['getHours']() + _0x33f5xf) % 24 - _0x33f5x3['end']['getHours']();
                if (_0x33f5x5 !== 0) {
                    _0x33f5x8 = _0x33f5x1['add'](_0x33f5x8, _0x33f5x1.HOUR, _0x33f5x5);
                }
            }
            this['generateTicksValidatorFn'](_0x33f5x2) && _0x33f5x7['push']({
                start: _0x33f5x2,
                end: _0x33f5x8
            });
            _0x33f5x2 = _0x33f5x8;
        }
        return _0x33f5x7;
    },
    getVisibleTickTimeSpan: function() {
        return this['isContinuous']() ? this['visibleTickEnd'] - this['visibleTickStart'] : this['getCount']();
    },
    getAdjustedDates: function(_0x33f5x1, _0x33f5x5, _0x33f5x4) {
        var _0x33f5x3 = Ext.ux.Scheduler.util.Date;
        _0x33f5x1 = _0x33f5x1 || this['getStart']();
        _0x33f5x5 = _0x33f5x5 || _0x33f5x3['add'](_0x33f5x1, this['mainUnit'], this['defaultSpan']);
        if (this['mode'] === 'calendar') {
            if (this['shiftUnit'] === _0x33f5x3['MONTH']) {
                var _0x33f5x9 = _0x33f5x3['add'](_0x33f5x1, _0x33f5x3.WEEK, 1);
                var _0x33f5x8 = _0x33f5x3['add'](_0x33f5x5, _0x33f5x3.WEEK, -1);
                if (!_0x33f5x5) {
                    _0x33f5x5 = this['getNext'](_0x33f5x1, this['shiftUnit'], 1);
                    _0x33f5x5 = this['ceilDate'](_0x33f5x5, false, this['shiftUnit']);
                    _0x33f5x5 = this['ceilDate'](_0x33f5x5, false, this['mainUnit']);
                }
                if (_0x33f5x9['getMonth']() !== _0x33f5x1['getMonth']() && _0x33f5x8['getMonth']() !== _0x33f5x5['getMonth']()) {
                    return {
                        start: _0x33f5x1,
                        end: _0x33f5x5
                    };
                }
            }
            var _0x33f5xf, _0x33f5x2, _0x33f5x7;
            _0x33f5xf = this['floorDate'](_0x33f5x1, false, this['shiftUnit'], 1);
            _0x33f5xf = this['floorDate'](_0x33f5xf, false, this['mainUnit'], 1);
            if (this['autoAdjust']) {
                _0x33f5x7 = this['getNext'](_0x33f5x1, this['shiftUnit'], 1);
                _0x33f5x2 = this['ceilDate'](_0x33f5x7, false, this['shiftUnit']);
                _0x33f5x2 = this['ceilDate'](_0x33f5x2, false, this['mainUnit']);
            } else {
                _0x33f5x2 = this['ceilDate'](_0x33f5x5, false, this['shiftUnit']);
                _0x33f5x2 = this['ceilDate'](_0x33f5x2, false, this['mainUnit']);
            }
            return {
                start: _0x33f5xf,
                end: _0x33f5x2
            };
        } else {
            return this['autoAdjust'] || _0x33f5x4 ? {
                start: this['floorDate'](_0x33f5x1, false, this['autoAdjust'] ? this['mainUnit'] : this['unit'], 1),
                end: this['ceilDate'](_0x33f5x5, false, this['autoAdjust'] ? this['mainUnit'] : this['unit'], 1)
            } : {
                start: _0x33f5x1,
                end: _0x33f5x5
            };
        }
    },
    getTickFromDate: function(_0x33f5x4) {
        var _0x33f5xe = this['data']['items'];
        var _0x33f5x7 = _0x33f5xe['length'] - 1;
        if (_0x33f5x4.valueOf() < _0x33f5xe[0]['data']['start'].valueOf() || _0x33f5x4.valueOf() > _0x33f5xe[_0x33f5x7]['data']['end'].valueOf()) {
            return -1;
        }
        var _0x33f5x8, _0x33f5x9, _0x33f5x1;
        if (this['isContinuous']()) {
            if (_0x33f5x4 - _0x33f5xe[0]['data']['start'] === 0) {
                return this['visibleTickStart'];
            }
            if (_0x33f5x4 - _0x33f5xe[_0x33f5x7]['data']['end'] === 0) {
                return this['visibleTickEnd'];
            }
            var _0x33f5xb = this['adjustedStart'];
            var _0x33f5x2 = this['adjustedEnd'];
            var _0x33f5x3 = Math['floor'](_0x33f5xe['length'] * (_0x33f5x4 - _0x33f5xb) / (_0x33f5x2 - _0x33f5xb));
            if (_0x33f5x3 > _0x33f5x7) {
                _0x33f5x3 = _0x33f5x7;
            }
            _0x33f5x9 = _0x33f5x3 === 0 ? _0x33f5xb : _0x33f5xe[_0x33f5x3]['data']['start'];
            _0x33f5x1 = _0x33f5x3 == _0x33f5x7 ? _0x33f5x2 : _0x33f5xe[_0x33f5x3]['data']['end'];
            _0x33f5x8 = _0x33f5x3 + (_0x33f5x4 - _0x33f5x9) / (_0x33f5x1 - _0x33f5x9);
            if (_0x33f5x8 < this['visibleTickStart'] || _0x33f5x8 > this['visibleTickEnd']) {
                return -1;
            }
            return _0x33f5x8;
        } else {
            for (var _0x33f5x5 = 0; _0x33f5x5 <= _0x33f5x7; _0x33f5x5++) {
                _0x33f5x1 = _0x33f5xe[_0x33f5x5]['data']['end'];
                if (_0x33f5x4 <= _0x33f5x1) {
                    _0x33f5x9 = _0x33f5xe[_0x33f5x5]['data']['start'];
                    _0x33f5x8 = _0x33f5x5 + (_0x33f5x4 > _0x33f5x9 ? (_0x33f5x4 - _0x33f5x9) / (_0x33f5x1 - _0x33f5x9) : 0);
                    return _0x33f5x8;
                }
            }
        }
        return -1;
    },
    getDateFromTick: function(_0x33f5x5, _0x33f5xf) {
        if (_0x33f5x5 === this['visibleTickEnd']) {
            return this['getEnd']();
        }
        var _0x33f5x1 = Math['floor'](_0x33f5x5), _0x33f5x9 = _0x33f5x5 - _0x33f5x1, _0x33f5x7 = this['getAt'](_0x33f5x1);
        if (!_0x33f5x7) {
            return null;
        }
        var _0x33f5x8 = _0x33f5x7['data'];
        var _0x33f5x2 = _0x33f5x1 === 0 ? this['adjustedStart'] : _0x33f5x8['start'];
        var _0x33f5x4 = _0x33f5x1 == this['getCount']() - 1 && this['isContinuous']() ? this['adjustedEnd'] : _0x33f5x8['end'];
        var _0x33f5x3 = Ext.ux.Scheduler.util.Date.add(_0x33f5x2, Ext.ux.Scheduler.util.Date.MILLI, _0x33f5x9 * (_0x33f5x4 - _0x33f5x2));
        if (_0x33f5xf) {
            _0x33f5x3 = this[_0x33f5xf + 'Date'](_0x33f5x3);
        }
        return _0x33f5x3;
    },
    getTicks: function() {
        var _0x33f5x2 = [];
        this['each'](function(_0x33f5x1) {
            _0x33f5x2['push'](_0x33f5x1['data']);
        });
        return _0x33f5x2;
    },
    getStart: function() {
        var _0x33f5x2 = this['first']();
        if (_0x33f5x2) {
            return new Date(_0x33f5x2['data']['start']);
        }
        return null;
    },
    getEnd: function() {
        var _0x33f5x2 = this['last']();
        if (_0x33f5x2) {
            return new Date(_0x33f5x2['data']['end']);
        }
        return null;
    },
    floorDate: function(_0x33f5x5, _0x33f5x9, _0x33f5x7, _0x33f5x2) {
        _0x33f5x9 = _0x33f5x9 !== false;
        var _0x33f5x3 = Ext.Date['clone'](_0x33f5x5), _0x33f5x4 = _0x33f5x9 ? this['getStart']() : null, _0x33f5x11 = _0x33f5x2 || this['resolutionIncrement'], _0x33f5xb;
        if (_0x33f5x7) {
            _0x33f5xb = _0x33f5x7;
        } else {
            _0x33f5xb = _0x33f5x9 ? this['resolutionUnit'] : this['mainUnit'];
        }
        var _0x33f5x1 = Ext.ux.Scheduler.util.Date;
        var _0x33f5x8 = function(_0x33f5xd, _0x33f5xc) {
            return Math['floor'](_0x33f5xd / _0x33f5xc) * _0x33f5xc;
        };
        switch (_0x33f5xb) {
          case _0x33f5x1['MILLI']:
            if (_0x33f5x9) {
                _0x33f5x3 = _0x33f5x1['add'](_0x33f5x4, _0x33f5x1.MILLI, _0x33f5x8(_0x33f5x1['getDurationInMilliseconds'](_0x33f5x4, _0x33f5x3), _0x33f5x11));
            }
            ;
            break;

          case _0x33f5x1['SECOND']:
            if (_0x33f5x9) {
                _0x33f5x3 = _0x33f5x1['add'](_0x33f5x4, _0x33f5x1.MILLI, _0x33f5x8(_0x33f5x1['getDurationInSeconds'](_0x33f5x4, _0x33f5x3), _0x33f5x11) * 1e3);
            } else {
                _0x33f5x3['setMilliseconds'](0);
                _0x33f5x3['setSeconds'](_0x33f5x8(_0x33f5x3['getSeconds'](), _0x33f5x11));
            }
            ;
            break;

          case _0x33f5x1['MINUTE']:
            if (_0x33f5x9) {
                _0x33f5x3 = _0x33f5x1['add'](_0x33f5x4, _0x33f5x1.SECOND, _0x33f5x8(_0x33f5x1['getDurationInMinutes'](_0x33f5x4, _0x33f5x3), _0x33f5x11) * 60);
            } else {
                _0x33f5x3['setMinutes'](_0x33f5x8(_0x33f5x3['getMinutes'](), _0x33f5x11));
                _0x33f5x3['setSeconds'](0);
                _0x33f5x3['setMilliseconds'](0);
            }
            ;
            break;

          case _0x33f5x1['HOUR']:
            if (_0x33f5x9) {
                _0x33f5x3 = _0x33f5x1['add'](_0x33f5x4, _0x33f5x1.MINUTE, _0x33f5x8(_0x33f5x1['getDurationInHours'](this['getStart'](), _0x33f5x3), _0x33f5x11) * 60);
            } else {
                _0x33f5x3['setMinutes'](0);
                _0x33f5x3['setSeconds'](0);
                _0x33f5x3['setMilliseconds'](0);
                _0x33f5x3['setHours'](_0x33f5x8(_0x33f5x3['getHours'](), _0x33f5x11));
            }
            ;
            break;

          case _0x33f5x1['DAY']:
            if (_0x33f5x9) {
                _0x33f5x3 = _0x33f5x1['add'](_0x33f5x4, _0x33f5x1.DAY, _0x33f5x8(_0x33f5x1['getDurationInDays'](_0x33f5x4, _0x33f5x3), _0x33f5x11));
            } else {
                Ext.ux.Scheduler.util.Date['clearTime'](_0x33f5x3);
                _0x33f5x3['setDate'](_0x33f5x8(_0x33f5x3['getDate']() - 1, _0x33f5x11) + 1);
            }
            ;
            break;

          case _0x33f5x1['WEEK']:
            var _0x33f5xe = _0x33f5x3['getDay']() || 7;
            var _0x33f5xf = this['weekStartDay'] || 7;
            Ext.ux.Scheduler.util.Date['clearTime'](_0x33f5x3);
            _0x33f5x3 = _0x33f5x1['add'](_0x33f5x3, _0x33f5x1.DAY, _0x33f5xe >= _0x33f5xf ? _0x33f5xf - _0x33f5xe : -(7 - _0x33f5xf + _0x33f5xe));
            if (_0x33f5x3['getDay']() !== _0x33f5xf && _0x33f5x3['getHours']() === 23) {
                _0x33f5x3 = _0x33f5x1['add'](_0x33f5x3, _0x33f5x1.HOUR, 1);
            }
            ;
            break;

          case _0x33f5x1['MONTH']:
            if (_0x33f5x9) {
                _0x33f5x3 = _0x33f5x1['add'](_0x33f5x4, _0x33f5x1.MONTH, _0x33f5x8(_0x33f5x1['getDurationInMonths'](_0x33f5x4, _0x33f5x3), _0x33f5x11));
            } else {
                Ext.ux.Scheduler.util.Date['clearTime'](_0x33f5x3);
                _0x33f5x3['setDate'](1);
                _0x33f5x3['setMonth'](_0x33f5x8(_0x33f5x3['getMonth'](), _0x33f5x11));
            }
            ;
            break;

          case _0x33f5x1['QUARTER']:
            Ext.ux.Scheduler.util.Date['clearTime'](_0x33f5x3);
            _0x33f5x3['setDate'](1);
            _0x33f5x3 = _0x33f5x1['add'](_0x33f5x3, _0x33f5x1.MONTH, -(_0x33f5x3['getMonth']() % 3));
            break;

          case _0x33f5x1['YEAR']:
            if (_0x33f5x9) {
                _0x33f5x3 = _0x33f5x1['add'](_0x33f5x4, _0x33f5x1.YEAR, _0x33f5x8(_0x33f5x1['getDurationInYears'](_0x33f5x4, _0x33f5x3), _0x33f5x11));
            } else {
                _0x33f5x3 = new Date(_0x33f5x8(_0x33f5x5['getFullYear']() - 1, _0x33f5x11) + 1, 0, 1);
            }
            ;
            break;
        }
        return _0x33f5x3;
    },
    roundDate: function(_0x33f5x17, _0x33f5x1) {
        var _0x33f5x11 = Ext.Date['clone'](_0x33f5x17), _0x33f5x15 = this['resolutionIncrement'];
        _0x33f5x1 = _0x33f5x1 || this['getStart']();
        switch (this['resolutionUnit']) {
          case Ext.ux.Scheduler.util.Date['MILLI']:
            var _0x33f5x5 = Ext.ux.Scheduler.util.Date['getDurationInMilliseconds'](_0x33f5x1, _0x33f5x11), _0x33f5x4 = Math['round'](_0x33f5x5 / _0x33f5x15) * _0x33f5x15;
            _0x33f5x11 = Ext.ux.Scheduler.util.Date.add(_0x33f5x1, Ext.ux.Scheduler.util.Date.MILLI, _0x33f5x4);
            break;

          case Ext.ux.Scheduler.util.Date['SECOND']:
            var _0x33f5xf = Ext.ux.Scheduler.util.Date['getDurationInSeconds'](_0x33f5x1, _0x33f5x11), _0x33f5x10 = Math['round'](_0x33f5xf / _0x33f5x15) * _0x33f5x15;
            _0x33f5x11 = Ext.ux.Scheduler.util.Date.add(_0x33f5x1, Ext.ux.Scheduler.util.Date.MILLI, _0x33f5x10 * 1e3);
            break;

          case Ext.ux.Scheduler.util.Date['MINUTE']:
            var _0x33f5xd = Ext.ux.Scheduler.util.Date['getDurationInMinutes'](_0x33f5x1, _0x33f5x11), _0x33f5x2 = Math['round'](_0x33f5xd / _0x33f5x15) * _0x33f5x15;
            _0x33f5x11 = Ext.ux.Scheduler.util.Date.add(_0x33f5x1, Ext.ux.Scheduler.util.Date.SECOND, _0x33f5x2 * 60);
            break;

          case Ext.ux.Scheduler.util.Date['HOUR']:
            var _0x33f5xc = Ext.ux.Scheduler.util.Date['getDurationInHours'](_0x33f5x1, _0x33f5x11), _0x33f5xe = Math['round'](_0x33f5xc / _0x33f5x15) * _0x33f5x15;
            _0x33f5x11 = Ext.ux.Scheduler.util.Date.add(_0x33f5x1, Ext.ux.Scheduler.util.Date.MINUTE, _0x33f5xe * 60);
            break;

          case Ext.ux.Scheduler.util.Date['DAY']:
            var _0x33f5x3 = Ext.ux.Scheduler.util.Date['getDurationInDays'](_0x33f5x1, _0x33f5x11), _0x33f5x8 = Math['round'](_0x33f5x3 / _0x33f5x15) * _0x33f5x15;
            _0x33f5x11 = Ext.ux.Scheduler.util.Date.add(_0x33f5x1, Ext.ux.Scheduler.util.Date.DAY, _0x33f5x8);
            break;

          case Ext.ux.Scheduler.util.Date['WEEK']:
            Ext.ux.Scheduler.util.Date['clearTime'](_0x33f5x11);
            var _0x33f5xa = _0x33f5x11['getDay']() - this['weekStartDay'], _0x33f5x14;
            if (_0x33f5xa < 0) {
                _0x33f5xa = 7 + _0x33f5xa;
            }
            ;
            if (Math['round'](_0x33f5xa / 7) === 1) {
                _0x33f5x14 = 7 - _0x33f5xa;
            } else {
                _0x33f5x14 = -_0x33f5xa;
            }
            ;
            _0x33f5x11 = Ext.ux.Scheduler.util.Date.add(_0x33f5x11, Ext.ux.Scheduler.util.Date.DAY, _0x33f5x14);
            break;

          case Ext.ux.Scheduler.util.Date['MONTH']:
            var _0x33f5x6 = Ext.ux.Scheduler.util.Date['getDurationInMonths'](_0x33f5x1, _0x33f5x11) + _0x33f5x11['getDate']() / Ext.Date['getDaysInMonth'](_0x33f5x11), _0x33f5x7 = Math['round'](_0x33f5x6 / _0x33f5x15) * _0x33f5x15;
            _0x33f5x11 = Ext.ux.Scheduler.util.Date.add(_0x33f5x1, Ext.ux.Scheduler.util.Date.MONTH, _0x33f5x7);
            break;

          case Ext.ux.Scheduler.util.Date['QUARTER']:
            Ext.ux.Scheduler.util.Date['clearTime'](_0x33f5x11);
            _0x33f5x11['setDate'](1);
            _0x33f5x11 = Ext.ux.Scheduler.util.Date.add(_0x33f5x11, Ext.ux.Scheduler.util.Date.MONTH, 3 - _0x33f5x11['getMonth']() % 3);
            break;

          case Ext.ux.Scheduler.util.Date['YEAR']:
            var _0x33f5xb = Ext.ux.Scheduler.util.Date['getDurationInYears'](_0x33f5x1, _0x33f5x11), _0x33f5x9 = Math['round'](_0x33f5xb / _0x33f5x15) * _0x33f5x15;
            _0x33f5x11 = Ext.ux.Scheduler.util.Date.add(_0x33f5x1, Ext.ux.Scheduler.util.Date.YEAR, _0x33f5x9);
            break;
        }
        return _0x33f5x11;
    },
    ceilDate: function(_0x33f5x3, _0x33f5x1, _0x33f5x8) {
        var _0x33f5x5 = Ext.Date['clone'](_0x33f5x3);
        _0x33f5x1 = _0x33f5x1 !== false;
        var _0x33f5x2 = _0x33f5x1 ? this['resolutionIncrement'] : 1, _0x33f5x9 = false, _0x33f5x4;
        if (_0x33f5x8) {
            _0x33f5x4 = _0x33f5x8;
        } else {
            _0x33f5x4 = _0x33f5x1 ? this['resolutionUnit'] : this['mainUnit'];
        }
        switch (_0x33f5x4) {
          case Ext.ux.Scheduler.util.Date['HOUR']:
            if (_0x33f5x5['getMinutes']() > 0 || _0x33f5x5['getSeconds']() > 0 || _0x33f5x5['getMilliseconds']() > 0) {
                _0x33f5x9 = true;
            }
            ;
            break;

          case Ext.ux.Scheduler.util.Date['DAY']:
            if (_0x33f5x5['getHours']() > 0 || _0x33f5x5['getMinutes']() > 0 || _0x33f5x5['getSeconds']() > 0 || _0x33f5x5['getMilliseconds']() > 0) {
                _0x33f5x9 = true;
            }
            ;
            break;

          case Ext.ux.Scheduler.util.Date['WEEK']:
            Ext.ux.Scheduler.util.Date['clearTime'](_0x33f5x5);
            if (_0x33f5x5['getDay']() !== this['weekStartDay'] || _0x33f5x3['getTime']() - _0x33f5x5['getTime']() > 0) {
                _0x33f5x9 = true;
            }
            ;
            break;

          case Ext.ux.Scheduler.util.Date['MONTH']:
            Ext.ux.Scheduler.util.Date['clearTime'](_0x33f5x5);
            if (_0x33f5x5['getDate']() !== 1 || _0x33f5x3['getTime']() - _0x33f5x5['getTime']() > 0) {
                _0x33f5x9 = true;
            }
            ;
            break;

          case Ext.ux.Scheduler.util.Date['QUARTER']:
            Ext.ux.Scheduler.util.Date['clearTime'](_0x33f5x5);
            if (_0x33f5x5['getMonth']() % 3 !== 0 || _0x33f5x5['getDate']() !== 1 || _0x33f5x3['getTime']() - _0x33f5x5['getTime']() > 0) {
                _0x33f5x9 = true;
            }
            ;
            break;

          case Ext.ux.Scheduler.util.Date['YEAR']:
            Ext.ux.Scheduler.util.Date['clearTime'](_0x33f5x5);
            if (_0x33f5x5['getMonth']() !== 0 || _0x33f5x5['getDate']() !== 1 || _0x33f5x3['getTime']() - _0x33f5x5['getTime']() > 0) {
                _0x33f5x9 = true;
            }
            ;
            break;

          default:
            break;
        }
        if (_0x33f5x9) {
            return this['getNext'](_0x33f5x5, _0x33f5x4, _0x33f5x2);
        } else {
            return _0x33f5x5;
        }
    },
    getNext: function(_0x33f5x1, _0x33f5x3, _0x33f5x2) {
        return Ext.ux.Scheduler.util.Date['getNext'](_0x33f5x1, _0x33f5x3, _0x33f5x2, this['weekStartDay']);
    },
    getResolution: function() {
        return {
            unit: this['resolutionUnit'],
            increment: this['resolutionIncrement']
        };
    },
    setResolution: function(_0x33f5x1, _0x33f5x2) {
        this['resolutionUnit'] = _0x33f5x1;
        this['resolutionIncrement'] = _0x33f5x2 || 1;
    },
    shift: function(_0x33f5x2, _0x33f5x1) {
        this['setTimeSpan'](Ext.ux.Scheduler.util.Date.add(this['getStart'](), _0x33f5x1, _0x33f5x2), Ext.ux.Scheduler.util.Date.add(this['getEnd'](), _0x33f5x1, _0x33f5x2));
    },
    shiftNext: function(_0x33f5x2) {
        _0x33f5x2 = _0x33f5x2 || this['getShiftIncrement']();
        var _0x33f5x1 = this['getShiftUnit']();
        this['setTimeSpan'](Ext.ux.Scheduler.util.Date.add(this['getStart'](), _0x33f5x1, _0x33f5x2), Ext.ux.Scheduler.util.Date.add(this['getEnd'](), _0x33f5x1, _0x33f5x2));
    },
    shiftPrevious: function(_0x33f5x2) {
        _0x33f5x2 = -(_0x33f5x2 || this['getShiftIncrement']());
        var _0x33f5x1 = this['getShiftUnit']();
        this['setTimeSpan'](Ext.ux.Scheduler.util.Date.add(this['getStart'](), _0x33f5x1, _0x33f5x2), Ext.ux.Scheduler.util.Date.add(this['getEnd'](), _0x33f5x1, _0x33f5x2));
    },
    getShiftUnit: function() {
        return this['shiftUnit'] || this['mainUnit'];
    },
    getShiftIncrement: function() {
        return this['shiftIncrement'] || 1;
    },
    getUnit: function() {
        return this['unit'];
    },
    getIncrement: function() {
        return this['increment'];
    },
    getRowTicks: function() {
        if (this['mode'] !== 'plain') {
            var _0x33f5x3 = this['getStart']();
            var _0x33f5x2 = Ext.ux.Scheduler.util.Date.add(_0x33f5x3, this['headerConfig']['middle']['splitUnit'], 1);
            var _0x33f5x1 = this['findBy'](function(_0x33f5x4) {
                return _0x33f5x4['getStartDate']()['getTime']() >= _0x33f5x2['getTime']();
            });
            if (_0x33f5x1 === -1) {
                return this['getRange']();
            }
            return this['getRange'](0, _0x33f5x1 - 1);
        }
    },
    dateInAxis: function(_0x33f5x2) {
        return Ext.ux.Scheduler.util.Date['betweenLesser'](_0x33f5x2, this['getStart'](), this['getEnd']());
    },
    timeSpanInAxis: function(_0x33f5x1, _0x33f5x2) {
        if (this['isContinuous']()) {
            return Ext.ux.Scheduler.util.Date['intersectSpans'](_0x33f5x1, _0x33f5x2, this['getStart'](), this['getEnd']());
        } else {
            return _0x33f5x1 < this['getStart']() && _0x33f5x2 > this['getEnd']() || this['getTickFromDate'](_0x33f5x1) !== this['getTickFromDate'](_0x33f5x2);
        }
    },
    isRangeInAxis: function(_0x33f5x1) {
        var _0x33f5x3 = _0x33f5x1['getStartDate'](), _0x33f5x2 = _0x33f5x1['getEndDate']();
        if (!_0x33f5x3 || !_0x33f5x2) {
            return false;
        }
        return this['timeSpanInAxis'](_0x33f5x3, _0x33f5x2);
    },
    forEachAuxInterval: function(_0x33f5x7, _0x33f5x1, _0x33f5x2, _0x33f5x8) {
        _0x33f5x8 = _0x33f5x8 || this;
        var _0x33f5x3 = this['getEnd'](), _0x33f5x9 = this['getStart'](), _0x33f5x5 = 0, _0x33f5x4;
        if (_0x33f5x9 > _0x33f5x3) {
            throw 'Invalid time axis configuration';
        }
        while (_0x33f5x9 < _0x33f5x3) {
            _0x33f5x4 = Ext.ux.Scheduler.util.Date['min'](this['getNext'](_0x33f5x9, _0x33f5x7, _0x33f5x1 || 1), _0x33f5x3);
            _0x33f5x2['call'](_0x33f5x8, _0x33f5x9, _0x33f5x4, _0x33f5x5);
            _0x33f5x9 = _0x33f5x4;
            _0x33f5x5++;
        }
    },
    consumeViewPreset: function(_0x33f5x2) {
        Ext.apply(this, {
            unit: _0x33f5x2['getBottomHeader']()['unit'],
            increment: _0x33f5x2['getBottomHeader']()['increment'] || 1,
            resolutionUnit: _0x33f5x2['timeResolution']['unit'],
            resolutionIncrement: _0x33f5x2['timeResolution']['increment'],
            mainUnit: _0x33f5x2['getMainHeader']()['unit'],
            shiftUnit: _0x33f5x2['shiftUnit'],
            shiftIncrement: _0x33f5x2['shiftIncrement'] || 1,
            defaultSpan: _0x33f5x2['defaultSpan'] || 1,
            presetName: _0x33f5x2['name'],
            headerConfig: _0x33f5x2['headerConfig']
        });
    }
});

Ext.define('Robo.Transaction', {
    actions: null,
    title: null,
    constructor: function(_0x33f5x2) {
        _0x33f5x2 = _0x33f5x2 || {};
        Ext.apply(this, _0x33f5x2);
        this['callParent']([ _0x33f5x2 ]);
        this['actions'] = [];
    },
    hasActions: function() {
        return this['actions']['length'] > 0;
    },
    addAction: function(_0x33f5x2) {
        this['actions']['push'](_0x33f5x2);
    },
    getActions: function() {
        return this['actions'];
    },
    undo: function() {
        for (var _0x33f5x2 = this['actions']['length'] - 1; _0x33f5x2 >= 0; _0x33f5x2--) {
            this['actions'][_0x33f5x2]['undo']();
        }
    },
    redo: function() {
        for (var _0x33f5x2 = 0; _0x33f5x2 < this['actions']['length']; _0x33f5x2++) {
            this['actions'][_0x33f5x2]['redo']();
        }
    },
    getTitle: function() {
        if (this['title']) {
            return this['title'];
        }
        var _0x33f5x2 = this['actions'][0];
        return _0x33f5x2 ? _0x33f5x2['getTitle']() : null;
    }
});

Ext.define('Robo.action.Base', {
    constructor: function(_0x33f5x2) {
        Ext.apply(this, _0x33f5x2);
    },
    undo: function() {
        throw new Error('Abstract method call');
    },
    redo: function() {
        throw new Error('Abstract method call');
    },
    getTitle: function() {
        return '';
    }
});

Ext.define('Robo.action.flat.Update', {
    extend: Robo['action']['Base'],
    inheritableStatics: {
        CUSTOMLY_PROCESSED: {}
    },
    config: {
        record: null,
        fieldNames: null
    },
    oldValues: null,
    newValues: null,
    constructor: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['callParent']([ _0x33f5x2 ]);
        _0x33f5x1['initConfig'](_0x33f5x2);
        _0x33f5x1['saveValues']();
    },
    saveValues: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getRecord'](), _0x33f5x3 = _0x33f5x1['getFieldNames']();
        if (_0x33f5x3) {
            _0x33f5x1['oldValues'] = Ext.Array.map(_0x33f5x3, function(_0x33f5x4) {
                return _0x33f5x1['processSavingOldValue'](_0x33f5x4, _0x33f5x2);
            });
            _0x33f5x1['newValues'] = Ext.Array.map(_0x33f5x3, function(_0x33f5x4) {
                return _0x33f5x1['processSavingNewValue'](_0x33f5x4, _0x33f5x2);
            });
        }
    },
    undo: function() {
        var _0x33f5x1, _0x33f5x4 = this, _0x33f5x2 = _0x33f5x4['getRecord'](), _0x33f5x5 = _0x33f5x4['getFieldNames'](), _0x33f5x3;
        if (_0x33f5x5) {
            _0x33f5x1 = _0x33f5x4['self']['CUSTOMLY_PROCESSED'];
            _0x33f5x2['beginEdit']();
            _0x33f5x3 = Robo['util']['Array']['reduce'](_0x33f5x5, function(_0x33f5x7, _0x33f5xe, _0x33f5x8) {
                var _0x33f5x9;
                if (_0x33f5xe) {
                    _0x33f5x9 = _0x33f5x4['processRestoringValue'](_0x33f5x4['oldValues'][_0x33f5x8], _0x33f5xe, _0x33f5x2, 'undo');
                    if (_0x33f5x9 !== _0x33f5x1) {
                        _0x33f5x7[_0x33f5xe] = _0x33f5x9;
                    }
                }
                return _0x33f5x7;
            }, {});
            _0x33f5x2['set'](_0x33f5x3);
            _0x33f5x2['endEdit']();
        }
    },
    redo: function() {
        var _0x33f5x1, _0x33f5x4 = this, _0x33f5x2 = _0x33f5x4['getRecord'](), _0x33f5x5 = _0x33f5x4['getFieldNames'](), _0x33f5x3;
        if (_0x33f5x5) {
            _0x33f5x1 = _0x33f5x4['self']['CUSTOMLY_PROCESSED'];
            _0x33f5x2['beginEdit']();
            _0x33f5x3 = Robo['util']['Array']['reduce'](_0x33f5x5, function(_0x33f5x7, _0x33f5xe, _0x33f5x8) {
                var _0x33f5x9;
                if (_0x33f5xe) {
                    _0x33f5x9 = _0x33f5x4['processRestoringValue'](_0x33f5x4['newValues'][_0x33f5x8], _0x33f5xe, _0x33f5x2, 'redo');
                    if (_0x33f5x9 !== _0x33f5x1) {
                        _0x33f5x7[_0x33f5xe] = _0x33f5x9;
                    }
                }
                return _0x33f5x7;
            }, {});
            _0x33f5x2['set'](_0x33f5x3);
            _0x33f5x2['endEdit']();
        }
    },
    processSavingOldValue: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = _0x33f5x1['previous'] || _0x33f5x1['previousValues'];
        if (_0x33f5x2 && _0x33f5x2['hasOwnProperty'](_0x33f5x3)) {
            return _0x33f5x2[_0x33f5x3];
        } else {
            if (_0x33f5x1['editMementoFix']) {
                _0x33f5x2 = _0x33f5x1['editMementoFix']['previousValues'] || _0x33f5x1['editMementoFix']['data'];
                return _0x33f5x2[_0x33f5x3];
            } else {
                throw 'Can not get previous value';
            }
        }
    },
    processSavingNewValue: function(_0x33f5x1, _0x33f5x2) {
        return _0x33f5x2['get'](_0x33f5x1);
    },
    processRestoringValue: Ext.identifyFn,
    getTitle: function() {
        var _0x33f5x2 = this['getRecord']();
        var _0x33f5x1 = this['getFieldNames']();
        if (_0x33f5x2['getTitle']) {
            return 'Edit of ' + _0x33f5x1[0] + ' for ' + _0x33f5x2['getTitle'](this);
        }
        if (_0x33f5x2['modelName']) {
            return 'Edit of ' + _0x33f5x2['modelName'] + ' ' + _0x33f5x2['getId']();
        }
        return '';
    }
});

Ext.define('Robo.action.flat.Add', {
    extend: Robo['action']['Base'],
    store: null,
    records: null,
    index: null,
    undo: function() {
        var _0x33f5x2 = this['records'];
        this['store']['remove'](_0x33f5x2);
        for (var _0x33f5x1 = 0; _0x33f5x1 < _0x33f5x2['length']; _0x33f5x1++) {
            this['store']['removeFromRemoved'](_0x33f5x2[_0x33f5x1]);
        }
    },
    redo: function() {
        this['store']['insert'](this['index'], this['records']);
    },
    getRecord: function() {
        return this['records'][0];
    },
    getTitle: function() {
        var _0x33f5x2 = this;
        var _0x33f5x1 = Ext.Array.map(this['records'], function(_0x33f5x3) {
            if (_0x33f5x3['getTitle']) {
                return _0x33f5x3['getTitle'](_0x33f5x2);
            }
            if (_0x33f5x3['modelName']) {
                return _0x33f5x3['modelName'] + ' ' + _0x33f5x3['getId']();
            }
            return 'unknown';
        });
        return 'Addition of ' + _0x33f5x1['join'](',');
    }
});

Ext.define('Robo.action.flat.Remove', {
    extend: Robo['action']['Base'],
    store: null,
    records: null,
    index: null,
    undo: function() {
        var _0x33f5x2 = this;
        _0x33f5x2['store']['insert'](_0x33f5x2['index'], _0x33f5x2['records']);
    },
    redo: function() {
        var _0x33f5x2 = this;
        _0x33f5x2['store']['remove'](_0x33f5x2['records']);
    },
    getRecord: function() {
        return this['records'][0];
    },
    getTitle: function() {
        var _0x33f5x2 = this;
        var _0x33f5x1 = Ext.Array.map(this['records'], function(_0x33f5x3) {
            if (_0x33f5x3['getTitle']) {
                return _0x33f5x3['getTitle'](_0x33f5x2);
            }
            if (_0x33f5x3['modelName']) {
                return _0x33f5x3['modelName'] + ' ' + _0x33f5x3['getId']();
            }
            return 'unknown';
        });
        return 'Removal of ' + _0x33f5x1['join'](',');
    }
});

Ext.define('Robo.action.tree.Append', {
    extend: Robo['action']['Base'],
    parent: null,
    newChild: null,
    undo: function() {
        var _0x33f5x2 = this['newChild'];
        this['parent']['removeChild'](_0x33f5x2);
        delete _0x33f5x2['data']['lastParentId'];
        var _0x33f5x1 = this['parent']['getTreeStore']();
        Ext.Array['remove'](_0x33f5x1['removedNodes'], _0x33f5x2);
    },
    redo: function() {
        this['parent']['appendChild'](this['newChild']);
    },
    getRecord: function() {
        return this['newChild'];
    },
    getTitle: function() {
        var _0x33f5x2 = this['newChild'];
        var _0x33f5x1;
        if (_0x33f5x2['getTitle']) {
            _0x33f5x1 = _0x33f5x2['getTitle'](this);
        } else {
            if (_0x33f5x2['modelName']) {
                return _0x33f5x2['modelName'] + ' ' + _0x33f5x2['getId']();
            }
        }
        return 'Append of ' + _0x33f5x1;
    }
});

Ext.define('Robo.action.tree.Insert', {
    extend: Robo['action']['Base'],
    parent: null,
    newChild: null,
    insertedBefore: null,
    undo: function() {
        var _0x33f5x2 = this['newChild'];
        this['parent']['removeChild'](_0x33f5x2);
        delete _0x33f5x2['data']['lastParentId'];
        var _0x33f5x1 = this['parent']['getTreeStore']();
        Ext.Array['remove'](_0x33f5x1['removedNodes'], _0x33f5x2);
    },
    redo: function() {
        var _0x33f5x1 = this['insertedBefore'];
        var _0x33f5x2 = _0x33f5x1 && _0x33f5x1['isFirst']();
        this['parent']['insertBefore'](this['newChild'], _0x33f5x1);
        if (_0x33f5x2) {
            _0x33f5x1['updateInfo'](false, {
                isFirst: false
            });
        }
    },
    getRecord: function() {
        return this['newChild'];
    },
    getTitle: function() {
        var _0x33f5x2 = this['newChild'];
        var _0x33f5x1;
        if (_0x33f5x2['getTitle']) {
            _0x33f5x1 = _0x33f5x2['getTitle'](this);
        } else {
            if (_0x33f5x2['modelName']) {
                return _0x33f5x2['modelName'] + ' ' + _0x33f5x2['getId']();
            }
        }
        return 'Insertion of ' + _0x33f5x1;
    }
});

Ext.define('Robo.action.tree.Remove', {
    extend: Robo['action']['Base'],
    parent: null,
    removedChild: null,
    nextSibling: null,
    newParent: null,
    newNextSibling: null,
    dirty: false,
    isMove: false,
    constructor: function(_0x33f5x2) {
        this['callParent'](arguments);
        this['dirty'] = this['removedChild']['dirty'];
    },
    undo: function() {
        if (this['isMove']) {
            this['newParent'] = this['removedChild']['parentNode'];
            this['newNextSibling'] = this['removedChild']['nextSibling'];
        }
        var _0x33f5x3 = this['nextSibling'];
        var _0x33f5x1 = _0x33f5x3 && _0x33f5x3['isFirst']();
        var _0x33f5x4 = this['removedChild'];
        this['parent']['insertBefore'](_0x33f5x4, _0x33f5x3);
        _0x33f5x4['dirty'] = this['dirty'];
        if (!this['isMove']) {
            var _0x33f5x2 = _0x33f5x4['getTreeStore']();
            _0x33f5x4['cascadeBy'](function(_0x33f5x5) {
                Ext.Array['remove'](_0x33f5x2['removedNodes'], _0x33f5x5);
            });
        }
        if (_0x33f5x1) {
            _0x33f5x3['updateInfo'](false, {
                isFirst: false
            });
        }
    },
    redo: function() {
        if (this['isMove']) {
            var _0x33f5x1 = this['newNextSibling'];
            var _0x33f5x2 = _0x33f5x1 && _0x33f5x1['isFirst']();
            this['newParent']['insertBefore'](this['removedChild'], _0x33f5x1);
            if (_0x33f5x2) {
                _0x33f5x1['updateInfo'](false, {
                    isFirst: false
                });
            }
        } else {
            this['parent']['removeChild'](this['removedChild']);
            delete this['removedChild']['data']['lastParentId'];
        }
    },
    getRecord: function() {
        return this['removedChild'];
    },
    getTitle: function() {
        var _0x33f5x2 = this['removedChild'];
        var _0x33f5x1;
        if (_0x33f5x2['getTitle']) {
            _0x33f5x1 = _0x33f5x2['getTitle'](this);
        } else {
            if (_0x33f5x2['modelName']) {
                return _0x33f5x2['modelName'] + ' ' + _0x33f5x2['getId']();
            }
        }
        return this['isMove'] ? 'Move of ' + _0x33f5x1 : 'Removal of ' + _0x33f5x1;
    }
});

Ext.define('Robo.action.tree.Update', {
    extend: Robo['action']['flat']['Update'],
    processRestoringValue: function(_0x33f5x3, _0x33f5x5, _0x33f5x2, _0x33f5x4) {
        var _0x33f5x1 = this;
        if (_0x33f5x5 === 'expanded') {
            if (_0x33f5x3) {
                _0x33f5x2['expand']();
            } else {
                _0x33f5x2['collapse']();
            }
            _0x33f5x3 = _0x33f5x1['self']['CUSTOMLY_PROCESSED'];
        } else {
            if (_0x33f5x5 == 'leaf') {
                _0x33f5x3 = _0x33f5x1['callParent'](arguments);
                if (_0x33f5x3 === true && _0x33f5x4 == 'undo') {
                    _0x33f5x2['data']['loaded'] = false;
                }
            } else {
                _0x33f5x3 = _0x33f5x1['callParent'](arguments);
            }
        }
        return _0x33f5x3;
    }
});

Ext.define('Robo.Manager', {
    extend: Ext.util['Observable'],
    stores: null,
    storesById: null,
    treeStoreListeners: null,
    flatStoreListeners: null,
    stub: function() {},
    undoQueue: null,
    redoQueue: null,
    ignoredFieldNames: {
        expanded: 1
    },
    state: 'created',
    transactionBoundary: 'timeout',
    transactionMaxDuration: 100,
    clearQueuesOnLoad: false,
    transactionTimeout: null,
    currentTransaction: null,
    constructor: function(_0x33f5x1) {
        var _0x33f5x3 = this;
        _0x33f5x1 = _0x33f5x1 || {};
        Ext.apply(_0x33f5x3, _0x33f5x1);
        _0x33f5x3['treeStoreListeners'] = {
            nodeappend: _0x33f5x3['onTreeStoreAppend'],
            nodeinsert: _0x33f5x3['onTreeStoreInsert'],
            noderemove: _0x33f5x3['onTreeStoreRemove'],
            update: _0x33f5x3['onTreeStoreUpdate'],
            scope: _0x33f5x3
        };
        _0x33f5x3['flatStoreListeners'] = {
            add: _0x33f5x3['onFlatStoreAdd'],
            remove: _0x33f5x3['onFlatStoreRemove'],
            update: _0x33f5x3['onFlatStoreUpdate'],
            scope: _0x33f5x3
        };
        if (_0x33f5x3['clearQueuesOnLoad']) {
            Ext.apply(_0x33f5x3['treeStoreListeners'], {
                load: _0x33f5x3['clearQueues'],
                clear: _0x33f5x3['clearQueues']
            });
            Ext.apply(_0x33f5x3['flatStoreListeners'], {
                load: _0x33f5x3['clearQueues'],
                clear: _0x33f5x3['clearQueues']
            });
        }
        _0x33f5x3['callParent']([ _0x33f5x1 ]);
        var _0x33f5x2 = _0x33f5x3['stores'] || [];
        _0x33f5x3['stores'] = [];
        _0x33f5x3['storesById'] = {};
        _0x33f5x3['undoQueue'] = [];
        _0x33f5x3['redoQueue'] = [];
        Ext.Array['forEach'](_0x33f5x2, function(_0x33f5x4) {
            _0x33f5x3['addStore'](_0x33f5x4);
        });
    },
    addStore: function(_0x33f5x3, _0x33f5x7) {
        _0x33f5x3 = Ext.data['StoreManager']['lookup'](_0x33f5x3);
        Ext.Assert && Ext.Assert.isObject(_0x33f5x3, 'Must provide a store or a valid store id');
        this['stores']['push'](_0x33f5x3);
        if (_0x33f5x7) {
            _0x33f5x3['setStoreId'](_0x33f5x7);
        }
        var _0x33f5x4 = _0x33f5x3['getModel']();
        var _0x33f5x5 = _0x33f5x4['prototype']['associations'] || {};
        for (var _0x33f5x2 in _0x33f5x5) {
            var _0x33f5x9 = _0x33f5x5[_0x33f5x2];
            var _0x33f5x1 = _0x33f5x9['getAssociatedStore'];
            if (_0x33f5x1 && !_0x33f5x1['ROBO_MANAGED']) {
                var _0x33f5x8 = this;
                _0x33f5x9['getAssociatedStore'] = function() {
                    var _0x33f5xf = _0x33f5x1['apply'](this, arguments);
                    if (!_0x33f5x8['hasStore'](_0x33f5xf)) {
                        _0x33f5x8['addStore'](_0x33f5xf);
                        if (_0x33f5x8['state'] !== 'disabled' && _0x33f5x8['state'] !== 'created') {
                            _0x33f5x8['bindStore'](_0x33f5xf);
                        }
                    }
                    return _0x33f5xf;
                };
                _0x33f5x9['getAssociatedStore']['ROBO_MANAGED'] = true;
            }
        }
        if (_0x33f5x3['storeId']) {
            this['storesById'][_0x33f5x3['storeId']] = _0x33f5x3;
        }
    },
    getStoreById: function(_0x33f5x2) {
        return this['storesById'][_0x33f5x2];
    },
    hasStore: function(_0x33f5x2) {
        return Ext.Array.indexOf(this['stores'], _0x33f5x2) != -1;
    },
    bindStore: function(_0x33f5x2) {
        (_0x33f5x2['undoRedoEventBus'] || _0x33f5x2)['on'](this['getStoreTypeListeners'](_0x33f5x2));
        if (_0x33f5x2['undoRedoEventBus']) {
            _0x33f5x2['on'](this['getStoreTypeListenerStubs'](_0x33f5x2));
        }
    },
    unbindStore: function(_0x33f5x2) {
        (_0x33f5x2['undoRedoEventBus'] || _0x33f5x2)['un'](this['getStoreTypeListeners'](_0x33f5x2));
        if (_0x33f5x2['undoRedoEventBus']) {
            _0x33f5x2['un'](this['getStoreTypeListenerStubs'](_0x33f5x2));
        }
    },
    getStoreTypeListenerStubs: function(_0x33f5x2) {
        var _0x33f5x3 = this;
        var _0x33f5x1 = this['getStoreTypeListeners'](_0x33f5x2);
        _0x33f5x1 = Ext.apply({}, _0x33f5x1);
        Ext['Object']['each'](_0x33f5x1, function(_0x33f5x4, _0x33f5x5) {
            _0x33f5x1[_0x33f5x4] = _0x33f5x3['stub'];
        });
        return _0x33f5x1;
    },
    getStoreTypeListeners: function(_0x33f5x2) {
        var _0x33f5x1;
        if (Ext.data.TreeStore && _0x33f5x2 instanceof Ext.data.TreeStore) {
            _0x33f5x1 = this['treeStoreListeners'];
        } else {
            _0x33f5x1 = this['flatStoreListeners'];
        }
        return _0x33f5x1;
    },
    removeStore: function(_0x33f5x2) {
        Ext.Array['remove'](this['stores'], _0x33f5x2);
        this['storesById'][_0x33f5x2['storeId']] = null;
        this['unbindStore'](_0x33f5x2);
    },
    forEachStore: function(_0x33f5x2) {
        Ext.Array['forEach'](this['stores'], _0x33f5x2, this);
    },
    onAnyChangeInAnyStore: function(_0x33f5x2) {
        if (this['state'] === 'paused' || _0x33f5x2['isRootSettingOrLoading'] && _0x33f5x2['isRootSettingOrLoading']()) {
            return false;
        }
        if (!this['currentTransaction']) {
            this['startTransaction']();
        }
        return true;
    },
    hasPersistableChanges: function(_0x33f5x2, _0x33f5x3) {
        var _0x33f5x1 = this['ignoredFieldNames'];
        return Robo['util']['Array']['reduce'](_0x33f5x3, function(_0x33f5x4, _0x33f5x8) {
            var _0x33f5x5 = _0x33f5x2['getField'](_0x33f5x8);
            return _0x33f5x4 || !_0x33f5x5 || _0x33f5x5['persist'] && (!_0x33f5x2['isNode'] || !_0x33f5x1['hasOwnProperty'](_0x33f5x8));
        }, false);
    },
    onFlatStoreUpdate: function(_0x33f5x3, _0x33f5x2, _0x33f5x1, _0x33f5x4) {
        if (!this['onAnyChangeInAnyStore'](_0x33f5x3) || _0x33f5x1 != 'edit' || !_0x33f5x4 || !_0x33f5x4['length'] || !this['hasPersistableChanges'](_0x33f5x2, _0x33f5x4)) {
            return;
        }
        this['currentTransaction']['addAction'](new Robo['action']['flat'].Update({
            record: _0x33f5x2,
            fieldNames: _0x33f5x4
        }));
    },
    onFlatStoreAdd: function(_0x33f5x1, _0x33f5x2, _0x33f5x3) {
        if (!this['onAnyChangeInAnyStore'](_0x33f5x1)) {
            return;
        }
        this['currentTransaction']['addAction'](new Robo['action']['flat'].Add({
            store: _0x33f5x1,
            records: _0x33f5x2,
            index: _0x33f5x3
        }));
    },
    onFlatStoreRemove: function(_0x33f5x3, _0x33f5x1, _0x33f5x4, _0x33f5x2) {
        if (!this['onAnyChangeInAnyStore'](_0x33f5x3)) {
            return;
        }
        this['currentTransaction']['addAction'](new Robo['action']['flat'].Remove({
            store: _0x33f5x3,
            records: _0x33f5x1,
            index: _0x33f5x4,
            isMove: _0x33f5x2
        }));
    },
    onTreeStoreUpdate: function(_0x33f5x3, _0x33f5x2, _0x33f5x1, _0x33f5x4) {
        if (!this['onAnyChangeInAnyStore'](_0x33f5x3) || _0x33f5x1 != 'edit' || !_0x33f5x4 || !_0x33f5x4['length'] || !this['hasPersistableChanges'](_0x33f5x2, _0x33f5x4)) {
            return;
        }
        this['currentTransaction']['addAction'](new Robo['action']['tree'].Update({
            record: _0x33f5x2,
            fieldNames: _0x33f5x4
        }));
    },
    onTreeStoreAppend: function(_0x33f5x3, _0x33f5x2, _0x33f5x1) {
        if (!_0x33f5x3 || !this['onAnyChangeInAnyStore'](_0x33f5x3['getTreeStore']())) {
            return;
        }
        if (_0x33f5x2['$undoRedoMoving']) {
            delete _0x33f5x2['$undoRedoMoving'];
        } else {
            this['currentTransaction']['addAction'](new Robo['action']['tree'].Append({
                parent: _0x33f5x3,
                newChild: _0x33f5x2
            }));
        }
    },
    onTreeStoreInsert: function(_0x33f5x3, _0x33f5x2, _0x33f5x1) {
        if (!_0x33f5x3 || !this['onAnyChangeInAnyStore'](_0x33f5x3['getTreeStore']())) {
            return;
        }
        if (_0x33f5x2['$undoRedoMoving']) {
            delete _0x33f5x2['$undoRedoMoving'];
        } else {
            this['currentTransaction']['addAction'](new Robo['action']['tree'].Insert({
                parent: _0x33f5x3,
                newChild: _0x33f5x2,
                insertedBefore: _0x33f5x1
            }));
        }
    },
    onTreeStoreRemove: function(_0x33f5x3, _0x33f5x4, _0x33f5x2, _0x33f5x1) {
        if (!this['onAnyChangeInAnyStore'](_0x33f5x3['getTreeStore']())) {
            return;
        }
        if (_0x33f5x2) {
            _0x33f5x4['$undoRedoMoving'] = true;
        }
        this['currentTransaction']['addAction'](new Robo['action']['tree'].Remove({
            parent: _0x33f5x3,
            removedChild: _0x33f5x4,
            nextSibling: _0x33f5x1['nextSibling'],
            isMove: _0x33f5x2
        }));
    },
    start: function() {
        if (this['state'] == 'created' || this['state'] == 'disabled') {
            this['fireEvent']('start', this);
            this['fireEvent']('undoqueuechange', this, this['undoQueue']);
            this['fireEvent']('redoqueuechange', this, this['redoQueue']);
        }
        if (this['state'] !== 'hold') {
            this['forEachStore'](this['bindStore']);
            this['state'] = 'enabled';
        }
    },
    stop: function() {
        this['endTransaction']();
        this['forEachStore'](this['unbindStore']);
        this['state'] = 'disabled';
        this['clearQueues']();
        this['fireEvent']('stop', this);
    },
    clearQueues: function() {
        this['clearUndoQueue']();
        this['clearRedoQueue']();
    },
    pause: function() {
        this['state'] = 'paused';
    },
    resume: function() {
        this['state'] = 'enabled';
    },
    hold: function() {
        Ext.Assert && Ext.Assert.isObject(this['currentTransaction'], 'Can\'t hold, no transaction is currently in progress');
        this['state'] = 'hold';
    },
    release: function() {
        Ext.Assert && Ext.Assert.isObject(this['currentTransaction'], 'Can\'t release, no transaction is currently in progress');
        this['state'] = 'enabled';
    },
    getUndoQueue: function() {
        return this['undoQueue']['slice']();
    },
    getRedoQueue: function() {
        return this['redoQueue']['slice']();
    },
    clearUndoQueue: function() {
        if (this['undoQueue']['length']) {
            this['undoQueue'] = [];
            this['fireEvent']('undoqueuechange', this, this['undoQueue']['slice']());
        }
    },
    clearRedoQueue: function() {
        if (this['redoQueue']['length']) {
            this['redoQueue'] = [];
            this['fireEvent']('redoqueuechange', this, this['redoQueue']['slice']());
        }
    },
    startTransaction: function(_0x33f5x3) {
        var _0x33f5x2 = this, _0x33f5x1;
        if (_0x33f5x2['state'] == 'disabled') {
            return;
        }
        if (_0x33f5x2['currentTransaction']) {
            _0x33f5x2['endTransaction']();
        }
        _0x33f5x1 = new Robo.Transaction({
            title: _0x33f5x3
        });
        _0x33f5x2['currentTransaction'] = _0x33f5x1;
        _0x33f5x2['notifyStoresAboutTransactionStart'](_0x33f5x1);
        if (_0x33f5x2['transactionBoundary'] == 'timeout') {
            _0x33f5x2['scheduleEndTransaction']();
        }
    },
    scheduleEndTransaction: function() {
        var _0x33f5x2 = this;
        if (_0x33f5x2['transactionTimeout']) {
            clearTimeout(_0x33f5x2['transactionTimeout']);
        }
        _0x33f5x2['transactionTimeout'] = setTimeout(function() {
            if (_0x33f5x2['state'] !== 'hold') {
                _0x33f5x2['endTransaction']();
                _0x33f5x2['transactionTimeout'] = null;
            } else {
                _0x33f5x2['scheduleEndTransaction']();
            }
        }, _0x33f5x2['transactionMaxDuration']);
    },
    endTransaction: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['currentTransaction'];
        if (!_0x33f5x2) {
            return false;
        }
        _0x33f5x1['currentTransaction'] = null;
        if (_0x33f5x1['transactionBoundary'] == 'timeout') {
            clearTimeout(_0x33f5x1['transactionTimeout']);
            _0x33f5x1['transactionTimeout'] = null;
        }
        if (_0x33f5x2['hasActions']()) {
            _0x33f5x1['addTransaction'](_0x33f5x2);
        }
        _0x33f5x1['notifyStoresAboutTransactionEnd'](_0x33f5x2);
        return _0x33f5x2['hasActions']();
    },
    addTransaction: function(_0x33f5x2) {
        this['undoQueue']['push'](_0x33f5x2);
        this['fireEvent']('undoqueuechange', this, this['undoQueue']['slice']());
        if (this['redoQueue']['length']) {
            this['redoQueue']['length'] = 0;
            this['fireEvent']('redoqueuechange', this, this['redoQueue']['slice']());
        }
        this['fireEvent']('transactionadd', this, _0x33f5x2);
    },
    undo: function(_0x33f5x5) {
        var _0x33f5x3 = this['undoQueue'], _0x33f5x1, _0x33f5x8, _0x33f5x4, _0x33f5x2 = _0x33f5x3['length'];
        if (this['state'] == 'disabled' || _0x33f5x5 === 0 || !_0x33f5x3['length']) {
            return;
        }
        if (_0x33f5x5 instanceof Robo['Transaction']) {
            _0x33f5x1 = Ext.Array.indexOf(_0x33f5x3, _0x33f5x5);
            if (_0x33f5x1 == -1) {
                return;
            }
            _0x33f5x5 = _0x33f5x3['length'] - _0x33f5x1;
        }
        _0x33f5x5 = _0x33f5x5 || 1;
        this['fireEvent']('beforeundo', this);
        this['pause']();
        this['notifyStoresAboutUndoRedoStart']();
        for (_0x33f5x4 = 0; _0x33f5x4 < Math['min'](_0x33f5x5, _0x33f5x2); _0x33f5x4++) {
            _0x33f5x8 = _0x33f5x3['pop']();
            _0x33f5x8['undo']();
            this['redoQueue']['unshift'](_0x33f5x8);
        }
        this['notifyStoresAboutUndoRedoComplete']();
        this['fireEvent']('undoqueuechange', this, _0x33f5x3['slice']());
        this['fireEvent']('redoqueuechange', this, this['redoQueue']['slice']());
        this['resume']();
        this['fireEvent']('afterundo', this);
    },
    redo: function(_0x33f5x4) {
        var _0x33f5x5 = this['redoQueue'], _0x33f5x8, _0x33f5x1, _0x33f5x3, _0x33f5x2 = _0x33f5x5['length'];
        if (this['state'] == 'disabled' || _0x33f5x4 === 0 || !_0x33f5x5['length']) {
            return;
        }
        if (_0x33f5x4 instanceof Robo['Transaction']) {
            _0x33f5x1 = Ext.Array.indexOf(_0x33f5x5, _0x33f5x4);
            if (_0x33f5x1 == -1) {
                return;
            }
            _0x33f5x4 = _0x33f5x1 + 1;
        }
        _0x33f5x4 = _0x33f5x4 || 1;
        this['fireEvent']('beforeredo', this);
        this['pause']();
        this['notifyStoresAboutUndoRedoStart']();
        for (_0x33f5x3 = 0; _0x33f5x3 < Math['min'](_0x33f5x4, _0x33f5x2); _0x33f5x3++) {
            _0x33f5x8 = this['redoQueue']['shift']();
            _0x33f5x8['redo']();
            this['undoQueue']['push'](_0x33f5x8);
        }
        this['notifyStoresAboutUndoRedoComplete']();
        this['fireEvent']('redoqueuechange', this, this['redoQueue']['slice']());
        this['fireEvent']('undoqueuechange', this, this['undoQueue']['slice']());
        this['resume']();
        this['fireEvent']('afterredo', this);
    },
    undoAll: function() {
        this['undo'](this['undoQueue']['length']);
    },
    notifyStoresAboutTransactionStart: function(_0x33f5x2) {
        this['forEachStore'](function(_0x33f5x1) {
            _0x33f5x1['onUndoRedoTransactionStart'] && _0x33f5x1['onUndoRedoTransactionStart'](this, _0x33f5x2);
        });
    },
    notifyStoresAboutTransactionEnd: function(_0x33f5x2) {
        this['forEachStore'](function(_0x33f5x1) {
            _0x33f5x1['onUndoRedoTransactionEnd'] && _0x33f5x1['onUndoRedoTransactionEnd'](this, _0x33f5x2);
        });
    },
    notifyStoresAboutUndoRedoStart: function() {
        this['forEachStore'](function(_0x33f5x2) {
            _0x33f5x2['beforeUndoRedo'] && _0x33f5x2['beforeUndoRedo'](this);
        });
    },
    notifyStoresAboutUndoRedoComplete: function() {
        this['forEachStore'](function(_0x33f5x2) {
            _0x33f5x2['afterUndoRedo'] && _0x33f5x2['afterUndoRedo'](this);
        });
    }
}, function() {
    Ext.apply(Robo, {
        VERSION: '4.2.3'
    });
});

Ext.define('Ext.ux.Scheduler.data.undoredo.Manager', {
    extend: Robo['Manager']
});

Ext.define('Ext.ux.Scheduler.data.undoredo.Transaction', {
    extend: Robo['Transaction']
});

Ext.define('Ext.ux.Scheduler.data.undoredo.mixin.StoreHint', {
    extend: Robo.data.Store
});

Ext.define('Ext.ux.Scheduler.data.util.AssignmentStoreEventResourcesCache', {
    extend: Ext.ux.Scheduler.util.Cache,
    assignmentStore: null,
    assignmentStoreDetacher: null,
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    constructor: function(_0x33f5xe) {
        var _0x33f5xb = this, _0x33f5x8 = _0x33f5xe['getEventStore'](), _0x33f5xa = _0x33f5x8 && _0x33f5x8['getResourceStore']();
        _0x33f5xb['callParent']();
        function _0x33f5xc(_0x33f5x15, _0x33f5x17) {
            var _0x33f5x14 = _0x33f5xb['assignmentStore']['getEventStore'](), _0x33f5x12 = _0x33f5x14 && _0x33f5x14['getResourceStore']();
            Ext.Array['each'](_0x33f5x17, function(_0x33f5x16) {
                var _0x33f5x13 = _0x33f5x12 && _0x33f5x12['getModelById'](_0x33f5x16['getResourceId']());
                if (_0x33f5x13) {
                    _0x33f5xb['add'](_0x33f5x16['getEventId'](), _0x33f5x13);
                } else {
                    _0x33f5xb['clear'](_0x33f5x16['getEventId']());
                }
            });
        }
        function _0x33f5x1(_0x33f5x15, _0x33f5x17) {
            var _0x33f5x14 = _0x33f5xb['assignmentStore']['getEventStore'](), _0x33f5x12 = _0x33f5x14 && _0x33f5x14['getResourceStore']();
            Ext.Array['each'](_0x33f5x17, function(_0x33f5x16) {
                var _0x33f5x13 = _0x33f5x12['getModelById'](_0x33f5x16['getResourceId']());
                if (_0x33f5x13) {
                    _0x33f5xb['remove'](_0x33f5x16['getEventId'](), _0x33f5x13);
                } else {
                    _0x33f5xb['clear'](_0x33f5x16['getEventId']());
                }
            });
        }
        function _0x33f5x10(_0x33f5x1a, _0x33f5x15, _0x33f5x18) {
            var _0x33f5x19 = _0x33f5x15['resourceIdField'], _0x33f5x1b = _0x33f5x15['previous'] && _0x33f5x19 in _0x33f5x15['previous'], _0x33f5x12 = _0x33f5x1b && _0x33f5x15['previous'][_0x33f5x19], _0x33f5x1c = _0x33f5x15['eventIdField'], _0x33f5x17 = _0x33f5x15['previous'] && _0x33f5x1c in _0x33f5x15['previous'], _0x33f5x14 = _0x33f5x17 && _0x33f5x15['previous'][_0x33f5x1c], _0x33f5x16 = _0x33f5xb['assignmentStore']['getEventStore'](), _0x33f5x1d = _0x33f5x16 && _0x33f5x16['getResourceStore'](), _0x33f5x13;
            if (_0x33f5x1b || _0x33f5x17) {
                _0x33f5x12 = _0x33f5x1b ? _0x33f5x12 : _0x33f5x15['getResourceId']();
                _0x33f5x14 = _0x33f5x17 ? _0x33f5x14 : _0x33f5x15['getEventId']();
                _0x33f5x13 = _0x33f5x1d['getModelById'](_0x33f5x12);
                if (_0x33f5x13) {
                    _0x33f5xb['remove'](_0x33f5x14, _0x33f5x13);
                } else {
                    _0x33f5xb['clear'](_0x33f5x14);
                }
                _0x33f5x13 = _0x33f5x1d['getModelById'](_0x33f5x15['getResourceId']());
                if (_0x33f5x13) {
                    _0x33f5xb['add'](_0x33f5x15['getEventId'](), _0x33f5x13);
                } else {
                    _0x33f5xb['clear'](_0x33f5x15['getEventId']());
                }
            }
        }
        function _0x33f5xd(_0x33f5x17) {
            _0x33f5xb['clear']();
        }
        function _0x33f5x3(_0x33f5x17, _0x33f5x15) {
            _0x33f5xb['clear']();
            _0x33f5x2(_0x33f5x15);
            _0x33f5x4(_0x33f5x15 && _0x33f5x15['getResourceStore']());
        }
        function _0x33f5x11(_0x33f5x15, _0x33f5x14, _0x33f5x12, _0x33f5x17) {
            _0x33f5xb['move'](_0x33f5x12, _0x33f5x17);
        }
        function _0x33f5x9(_0x33f5x15, _0x33f5x17) {
            Ext.Array['each'](_0x33f5x17, function(_0x33f5x14) {
                _0x33f5xb['clear'](_0x33f5x14);
            });
        }
        function _0x33f5xf() {
            _0x33f5xb['clear']();
        }
        function _0x33f5x6(_0x33f5x17, _0x33f5x15) {
            _0x33f5xb['clear']();
            _0x33f5x4(_0x33f5x15);
        }
        function _0x33f5x7(_0x33f5x17, _0x33f5x15) {
            Ext.Array['each'](_0x33f5x15, function(_0x33f5x14) {
                _0x33f5xb['uncache'](_0x33f5x14);
            });
        }
        function _0x33f5x5() {
            _0x33f5xb['clear']();
        }
        function _0x33f5x2(_0x33f5x17) {
            Ext.destroy(_0x33f5xb['eventStoreDetacher']);
            _0x33f5xb['eventStoreDetacher'] = _0x33f5x17 && _0x33f5x17['on']({
                idchanged: _0x33f5x11,
                remove: _0x33f5x9,
                clear: _0x33f5xf,
                cacheresethint: _0x33f5xf,
                rootchange: _0x33f5xf,
                resourcestorechange: _0x33f5x6,
                priority: 100,
                destroyable: true
            });
        }
        function _0x33f5x4(_0x33f5x17) {
            Ext['destory'](_0x33f5xb['resourceStoreDetacher']);
            _0x33f5xb['resourceStoreDetacher'] = _0x33f5x17 && _0x33f5x17['on']({
                remove: _0x33f5x7,
                clear: _0x33f5x5,
                cacheresethint: _0x33f5x5,
                rootchange: _0x33f5x5,
                priority: 100,
                destroyable: true
            });
        }
        _0x33f5xb['assignmentStoreDetacher'] = _0x33f5xe['on']({
            add: _0x33f5xc,
            remove: _0x33f5x1,
            update: _0x33f5x10,
            clear: _0x33f5xd,
            cacheresethint: _0x33f5xd,
            priority: 100,
            destroyable: true
        });
        _0x33f5xb['assignmentStore'] = _0x33f5xe;
    },
    destroy: function() {
        var _0x33f5x2 = this;
        Ext.destroyMembers(_0x33f5x2, 'assignmentStoreDetacher', 'eventStoreDetacher', 'resourceStoreDetacher');
        _0x33f5x2['assignmentStore'] = null;
    },
    get: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x3 = this;
        _0x33f5x1 = _0x33f5x1 || function() {
            return _0x33f5x3['assignmentStore']['mapAssignmentsForEvent'](_0x33f5x2, function _0x33f5x5(_0x33f5x8) {
                return _0x33f5x8['getResource']();
            }, function _0x33f5x4(_0x33f5x8) {
                return !!_0x33f5x8;
            });
        };
        return _0x33f5x3['callParent']([ _0x33f5x2, _0x33f5x1 ]);
    }
});

Ext.define('Ext.ux.Scheduler.data.util.AssignmentStoreResourceEventsCache', {
    extend: Ext.ux.Scheduler.util.Cache,
    assignmentStore: null,
    assignmentStoreDetacher: null,
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    constructor: function(_0x33f5xe) {
        var _0x33f5x11 = this, _0x33f5x8 = _0x33f5xe['getEventStore'](), _0x33f5xa = _0x33f5x8 && _0x33f5x8['getResourceStore']();
        _0x33f5x11['callParent']();
        function _0x33f5xc(_0x33f5x15, _0x33f5x17) {
            var _0x33f5x14 = _0x33f5x11['assignmentStore']['getEventStore']();
            Ext.Array['each'](_0x33f5x17, function(_0x33f5x13) {
                var _0x33f5x12 = _0x33f5x14 && _0x33f5x14['getModelById'](_0x33f5x13['getEventId']());
                if (_0x33f5x12) {
                    _0x33f5x11['add'](_0x33f5x13['getResourceId'](), _0x33f5x12);
                } else {
                    _0x33f5x11['clear'](_0x33f5x13['getResourceId']());
                }
            });
        }
        function _0x33f5x1(_0x33f5x15, _0x33f5x17) {
            var _0x33f5x14 = _0x33f5x11['assignmentStore']['getEventStore']();
            Ext.Array['each'](_0x33f5x17, function(_0x33f5x13) {
                var _0x33f5x12 = _0x33f5x14 && _0x33f5x14['getModelById'](_0x33f5x13['getEventId']());
                if (_0x33f5x12) {
                    _0x33f5x11['remove'](_0x33f5x13['getResourceId'](), _0x33f5x12);
                } else {
                    _0x33f5x11['clear'](_0x33f5x13['getResourceId']());
                }
            });
        }
        function _0x33f5x10(_0x33f5x1d, _0x33f5x14, _0x33f5x18) {
            var _0x33f5x19 = _0x33f5x14['resourceIdField'], _0x33f5x1a = _0x33f5x14['previous'] && _0x33f5x19 in _0x33f5x14['previous'], _0x33f5x13 = _0x33f5x1a && _0x33f5x14['previous'][_0x33f5x19], _0x33f5x1c = _0x33f5x14['eventIdField'], _0x33f5x17 = _0x33f5x14['previous'] && _0x33f5x1c in _0x33f5x14['previous'], _0x33f5x12 = _0x33f5x17 && _0x33f5x14['previous'][_0x33f5x1c], _0x33f5x16 = _0x33f5x11['assignmentStore']['getEventStore'](), _0x33f5x15;
            if (_0x33f5x1a || _0x33f5x17) {
                _0x33f5x13 = _0x33f5x1a ? _0x33f5x13 : _0x33f5x14['getResourceId']();
                _0x33f5x12 = _0x33f5x17 ? _0x33f5x12 : _0x33f5x14['getEventId']();
                _0x33f5x15 = _0x33f5x16 && _0x33f5x16['getModelById'](_0x33f5x12);
                if (_0x33f5x15) {
                    _0x33f5x11['remove'](_0x33f5x13, _0x33f5x15);
                } else {
                    _0x33f5x11['clear'](_0x33f5x13);
                }
                _0x33f5x15 = _0x33f5x16 && _0x33f5x16['getModelById'](_0x33f5x14['getEventId']());
                if (_0x33f5x15) {
                    _0x33f5x11['add'](_0x33f5x14['getResourceId'](), _0x33f5x15);
                } else {
                    _0x33f5x11['clear'](_0x33f5x14['getResourceId']());
                }
            }
        }
        function _0x33f5xd(_0x33f5x17) {
            _0x33f5x11['clear']();
        }
        function _0x33f5x3(_0x33f5x17, _0x33f5x15) {
            _0x33f5x11['clear']();
            _0x33f5x2(_0x33f5x15);
            _0x33f5x4(_0x33f5x15 && _0x33f5x15['getResourceStore']());
        }
        function _0x33f5x9(_0x33f5x15, _0x33f5x17) {
            Ext.Array['each'](_0x33f5x17, function(_0x33f5x14) {
                _0x33f5x11['uncache'](_0x33f5x14);
            });
        }
        function _0x33f5xf() {
            _0x33f5x11['clear']();
        }
        function _0x33f5x6(_0x33f5x17, _0x33f5x15) {
            _0x33f5x11['clear']();
            _0x33f5x4(_0x33f5x15);
        }
        function _0x33f5xb(_0x33f5x15, _0x33f5x14, _0x33f5x12, _0x33f5x17) {
            _0x33f5x11['move'](_0x33f5x12, _0x33f5x17);
        }
        function _0x33f5x7(_0x33f5x17, _0x33f5x15) {
            Ext.Array['each'](_0x33f5x15, function(_0x33f5x14) {
                _0x33f5x11['clear'](_0x33f5x14);
            });
        }
        function _0x33f5x5() {
            _0x33f5x11['clear']();
        }
        function _0x33f5x2(_0x33f5x17) {
            Ext.destroy(_0x33f5x11['eventStoreDetacher']);
            _0x33f5x11['eventStoreDetacher'] = _0x33f5x17 && _0x33f5x17['on']({
                remove: _0x33f5x9,
                cacheresethint: _0x33f5xf,
                clear: _0x33f5xf,
                rootchange: _0x33f5xf,
                resourcestorechange: _0x33f5x6,
                priority: 100,
                destroyable: true
            });
        }
        function _0x33f5x4(_0x33f5x17) {
            Ext.destroy(_0x33f5x11['resourceStoreDetacher']);
            _0x33f5x11['resourceStoreDetacher'] = _0x33f5x17 && _0x33f5x17['on']({
                idchanged: _0x33f5xb,
                remove: _0x33f5x7,
                cacheresethint: _0x33f5x5,
                clear: _0x33f5x5,
                rootchange: _0x33f5x5,
                priority: 100,
                destroyable: true
            });
        }
        _0x33f5x11['assignmentStoreDetacher'] = _0x33f5xe['on']({
            add: _0x33f5xc,
            remove: _0x33f5x1,
            update: _0x33f5x10,
            cacheresethint: _0x33f5xd,
            clear: _0x33f5xd,
            eventstorechange: _0x33f5x3,
            priority: 100,
            destroyable: true
        });
        _0x33f5x2(_0x33f5x8);
        _0x33f5x4(_0x33f5xa);
        _0x33f5x11['assignmentStore'] = _0x33f5xe;
    },
    destroy: function() {
        var _0x33f5x2 = this;
        Ext.destroyMembers(_0x33f5x2, 'assignmentStoreDetacher', 'eventStoreDetacher', 'resourceStoreDetacher');
        _0x33f5x2['assignmentStore'] = null;
    },
    get: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x3 = this;
        _0x33f5x1 = _0x33f5x1 || function() {
            return _0x33f5x3['assignmentStore']['mapAssignmentsForResource'](_0x33f5x2, function _0x33f5x5(_0x33f5x8) {
                return _0x33f5x8['getEvent']();
            }, function _0x33f5x4(_0x33f5x8) {
                return !!_0x33f5x8;
            });
        };
        return _0x33f5x3['callParent']([ _0x33f5x2, _0x33f5x1 ]);
    }
});

Ext.define('Ext.ux.Scheduler.data.util.EventAssignmentsCache', {
    extend: Ext.ux.Scheduler.util.Cache,
    assignmentStore: null,
    assignmentStoreDetacher: null,
    assignmentStoreFiltersDetacher: null,
    eventStoreDetacher: null,
    constructor: function(_0x33f5x9) {
        var _0x33f5x7 = this, _0x33f5x4 = _0x33f5x9['getEventStore']();
        _0x33f5x7['callParent']();
        function _0x33f5xe(_0x33f5xd, _0x33f5xc) {
            Ext.Array['each'](_0x33f5xc, function(_0x33f5xa) {
                _0x33f5x7['add'](_0x33f5xa['getEventId'](), _0x33f5xa);
            });
        }
        function _0x33f5x1(_0x33f5xd, _0x33f5xc) {
            Ext.Array['each'](_0x33f5xc, function(_0x33f5xa) {
                _0x33f5x7['remove'](_0x33f5xa['getEventId'](), _0x33f5xa);
            });
        }
        function _0x33f5x11(_0x33f5xa, _0x33f5x17, _0x33f5xd) {
            var _0x33f5x6 = _0x33f5x17['eventIdField'], _0x33f5xc = _0x33f5x17['previous'] && _0x33f5x6 in _0x33f5x17['previous'], _0x33f5x10 = _0x33f5xc && _0x33f5x17['previous'][_0x33f5x6];
            if (_0x33f5xc) {
                _0x33f5x7['move'](_0x33f5x10, _0x33f5x17['getEventId'](), _0x33f5x17);
            }
        }
        function _0x33f5xb(_0x33f5xc) {
            _0x33f5x7['clear']();
        }
        function _0x33f5x3(_0x33f5xc, _0x33f5xd) {
            _0x33f5x7['clear']();
            _0x33f5x2(_0x33f5xd);
        }
        function _0x33f5xf(_0x33f5xd, _0x33f5xa, _0x33f5x6, _0x33f5xc) {
            _0x33f5x7['move'](_0x33f5x6, _0x33f5xc);
        }
        function _0x33f5x5(_0x33f5xd, _0x33f5xc) {
            Ext.Array['each'](_0x33f5xc, function(_0x33f5xa) {
                _0x33f5x7['clear'](_0x33f5xa);
            });
        }
        function _0x33f5x8() {
            _0x33f5x7['clear']();
        }
        function _0x33f5x2(_0x33f5xc) {
            Ext.destroy(_0x33f5x7['eventStoreDetacher']);
            _0x33f5x7['eventStoreDetacher'] = _0x33f5xc && _0x33f5xc['on']({
                idchanged: _0x33f5xf,
                remove: _0x33f5x5,
                cacheresethint: _0x33f5x8,
                clear: _0x33f5x8,
                rootchange: _0x33f5x8,
                priority: 100,
                destroyable: true
            });
        }
        _0x33f5x7['assignmentStoreDetacher'] = _0x33f5x9['on']({
            add: _0x33f5xe,
            remove: _0x33f5x1,
            update: _0x33f5x11,
            cacheresethint: _0x33f5xb,
            clear: _0x33f5xb,
            eventstorechange: _0x33f5x3,
            priority: 100,
            destroyable: true
        });
        _0x33f5x7['assignmentStoreFiltersDetacher'] = _0x33f5x9['getFilters']()['on']({
            endupdate: _0x33f5xb,
            priority: 1002,
            destroyable: true
        });
        _0x33f5x2(_0x33f5x4);
        _0x33f5x7['assignmentStore'] = _0x33f5x9;
    },
    destroy: function() {
        var _0x33f5x2 = this;
        Ext.destroyMembers(_0x33f5x2, 'assignmentStoreDetacher', 'assignmentStoreFiltersDetacher', 'eventStoreDetacher');
        _0x33f5x2['assignmentStore'] = null;
    },
    get: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x3 = this;
        _0x33f5x2 = _0x33f5x3['key'](_0x33f5x2);
        _0x33f5x1 = _0x33f5x1 || function() {
            return Ext.Array['filter'](_0x33f5x3['assignmentStore']['getRange'](), function(_0x33f5x4) {
                return _0x33f5x4['getEventId']() == _0x33f5x2;
            });
        };
        return _0x33f5x3['callParent']([ _0x33f5x2, _0x33f5x1 ]);
    }
});

Ext.define('Ext.ux.Scheduler.data.util.EventDependencyCache', {
    extend: Ext.ux.Scheduler.util.Cache,
    dependencyStore: null,
    dependencyStoreDetacher: null,
    eventStoreDetacher: null,
    constructor: function(_0x33f5x3) {
        var _0x33f5xb = this, _0x33f5x9 = _0x33f5x3['getEventStore']();
        function _0x33f5xe(_0x33f5xc, _0x33f5xd) {
            Ext.Array['each'](_0x33f5xd, function(_0x33f5x6) {
                var _0x33f5x10 = _0x33f5x6['getSourceId'](), _0x33f5xa = _0x33f5x6['getTargetId']();
                if (_0x33f5x10) {
                    _0x33f5xb['add'](_0x33f5x10, _0x33f5x6);
                }
                if (_0x33f5xa) {
                    _0x33f5xb['add'](_0x33f5xa, _0x33f5x6);
                }
                if (_0x33f5x10 && _0x33f5xa) {
                    _0x33f5xb['addSuccessor'](_0x33f5x10, _0x33f5x6);
                    _0x33f5xb['addPredecessor'](_0x33f5xa, _0x33f5x6);
                }
            });
        }
        function _0x33f5x5(_0x33f5xc, _0x33f5xd) {
            Ext.Array['each'](_0x33f5xd, function(_0x33f5x6) {
                var _0x33f5x10 = _0x33f5x6['getSourceId'](), _0x33f5xa = _0x33f5x6['getTargetId']();
                if (_0x33f5x10) {
                    _0x33f5xb['remove'](_0x33f5x10, _0x33f5x6);
                    _0x33f5xb['removeSuccessor'](_0x33f5x10, _0x33f5x6);
                }
                if (_0x33f5xa) {
                    _0x33f5xb['remove'](_0x33f5xa, _0x33f5x6);
                    _0x33f5xb['removePredecessor'](_0x33f5xa, _0x33f5x6);
                }
            });
        }
        function _0x33f5x4(_0x33f5x17, _0x33f5xd, _0x33f5x6) {
            var _0x33f5x15 = _0x33f5xd['fromField'], _0x33f5xa = _0x33f5xd['toField'], _0x33f5xc = _0x33f5xd['previous'] && _0x33f5x15 in _0x33f5xd['previous'], _0x33f5x10 = _0x33f5xd['previous'] && _0x33f5xa in _0x33f5xd['previous'], _0x33f5x12 = _0x33f5xc && _0x33f5xd['previous'][_0x33f5x15], _0x33f5x14 = _0x33f5x10 && _0x33f5xd['previous'][_0x33f5xa];
            if (_0x33f5xc) {
                _0x33f5xb['move'](_0x33f5x12, _0x33f5xd['getSourceId'](), _0x33f5xd);
                _0x33f5xb['moveSuccessors'](_0x33f5x12, _0x33f5xd['getSourceId'](), _0x33f5xd);
            }
            if (_0x33f5x10) {
                _0x33f5xb['move'](_0x33f5x14, _0x33f5xd['getTargetId'](), _0x33f5xd);
                _0x33f5xb['movePredecessors'](_0x33f5x14, _0x33f5xd['getTargetId'](), _0x33f5xd);
            }
        }
        function _0x33f5x1(_0x33f5xc) {
            _0x33f5xb['clear']();
        }
        function _0x33f5x8(_0x33f5xc, _0x33f5xd) {
            _0x33f5xb['clear']();
            _0x33f5x2(_0x33f5xd);
        }
        function _0x33f5x11(_0x33f5xd, _0x33f5xa, _0x33f5x6, _0x33f5xc) {
            _0x33f5xb['move'](_0x33f5x6, _0x33f5xc);
            _0x33f5xb['moveSuccessors'](_0x33f5x6, _0x33f5xc);
            _0x33f5xb['movePredecessors'](_0x33f5x6, _0x33f5xc);
        }
        function _0x33f5x7(_0x33f5xd, _0x33f5xc) {
            Ext.Array['each'](_0x33f5xc, function(_0x33f5xa) {
                _0x33f5xb['clear'](_0x33f5xa);
                _0x33f5xb['clearSuccessors'](_0x33f5xa);
                _0x33f5xb['clearPredecessors'](_0x33f5xa);
            });
        }
        function _0x33f5xf() {
            _0x33f5xb['clear']();
        }
        function _0x33f5x2(_0x33f5xc) {
            Ext.destroy(_0x33f5xb['eventStoreDetacher']);
            _0x33f5xb['eventStoreDetacher'] = _0x33f5xc && _0x33f5xc['on']({
                idchanged: _0x33f5x11,
                remove: _0x33f5x7,
                cacheresethint: _0x33f5xf,
                clear: _0x33f5xf,
                rootchange: _0x33f5xf,
                priority: 100,
                destroyable: true
            });
        }
        _0x33f5xb['dependencyStoreDetacher'] = _0x33f5x3['on']({
            add: _0x33f5xe,
            remove: _0x33f5x5,
            update: _0x33f5x4,
            cacheresethint: _0x33f5x1,
            clear: _0x33f5x1,
            eventstorechange: _0x33f5x8,
            priority: 100,
            destroyable: true
        });
        _0x33f5xb['dependencyStoreFiltersDetacher'] = _0x33f5x3['getFilters']()['on']({
            endupdate: _0x33f5x1,
            priority: 1002,
            destroyable: true
        });
        _0x33f5x2(_0x33f5x9);
        _0x33f5xb['dependencyStore'] = _0x33f5x3;
    },
    destroy: function() {
        var _0x33f5x2 = this;
        Ext.destroyMembers(_0x33f5x2, 'dependencyStoreDetacher', 'eventStoreDetacher');
        _0x33f5x2['dependencyStore'] = null;
    },
    get: function(_0x33f5x2, _0x33f5x3) {
        var _0x33f5x4 = this, _0x33f5x5, _0x33f5x8, _0x33f5x1;
        if (!_0x33f5x3) {
            _0x33f5x2 = _0x33f5x4['key'](_0x33f5x2);
            _0x33f5x5 = _0x33f5x4['self']['splitKey'](_0x33f5x2);
            _0x33f5x8 = _0x33f5x5['id'];
            _0x33f5x1 = _0x33f5x5['type'];
            switch (_0x33f5x1) {
              case 'pred':
                _0x33f5x3 = function() {
                    return Ext.Array['filter'](_0x33f5x4['get'](_0x33f5x8), function(_0x33f5x9) {
                        return _0x33f5x9['getTargetId']() == _0x33f5x8;
                    });
                };
                break;

              case 'succ':
                _0x33f5x3 = function() {
                    return Ext.Array['filter'](_0x33f5x4['get'](_0x33f5x8), function(_0x33f5x9) {
                        return _0x33f5x9['getSourceId']() == _0x33f5x8;
                    });
                };
                break;

              default:
                _0x33f5x3 = function() {
                    return Ext.Array['filter'](_0x33f5x4['dependencyStore']['getRange'](), function(_0x33f5x9) {
                        return _0x33f5x9['getTargetId']() == _0x33f5x8 || _0x33f5x9['getSourceId']() == _0x33f5x8;
                    });
                };
            }
        }
        return _0x33f5x4['callParent']([ _0x33f5x2, _0x33f5x3 ]);
    },
    getSuccessors: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return _0x33f5x1['get'](_0x33f5x1['self']['makeSuccessorsKey'](_0x33f5x1['key'](_0x33f5x2)));
    },
    getPredecessors: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return _0x33f5x1['get'](_0x33f5x1['self']['makePredecessorsKey'](_0x33f5x1['key'](_0x33f5x2)));
    },
    addSuccessor: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this;
        return _0x33f5x3['add'](_0x33f5x3['self']['makeSuccessorsKey'](_0x33f5x3['key'](_0x33f5x1)), _0x33f5x2);
    },
    addPredecessor: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this;
        return _0x33f5x3['add'](_0x33f5x3['self']['makePredecessorsKey'](_0x33f5x3['key'](_0x33f5x1)), _0x33f5x2);
    },
    removeSuccessor: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this;
        return _0x33f5x3['remove'](_0x33f5x3['self']['makeSuccessorsKey'](_0x33f5x3['key'](_0x33f5x1)), _0x33f5x2);
    },
    removePredecessor: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this;
        return _0x33f5x3['remove'](_0x33f5x3['self']['makePredecessorsKey'](_0x33f5x3['key'](_0x33f5x1)), _0x33f5x2);
    },
    moveSuccessors: function(_0x33f5x3, _0x33f5x4, _0x33f5x2) {
        var _0x33f5x1 = this;
        return arguments['length'] >= 3 ? _0x33f5x1['move'](_0x33f5x1['self']['makeSuccessorsKey'](_0x33f5x1['key'](_0x33f5x3)), _0x33f5x1['self']['makeSuccessorsKey'](_0x33f5x1['key'](_0x33f5x4)), _0x33f5x2) : _0x33f5x1['move'](_0x33f5x1['self']['makeSuccessorsKey'](_0x33f5x1['key'](_0x33f5x3)), _0x33f5x1['self']['makeSuccessorsKey'](_0x33f5x1['key'](_0x33f5x4)));
    },
    movePredecessors: function(_0x33f5x3, _0x33f5x4, _0x33f5x2) {
        var _0x33f5x1 = this;
        return arguments['length'] >= 3 ? _0x33f5x1['move'](_0x33f5x1['self']['makePredecessorsKey'](_0x33f5x1['key'](_0x33f5x3)), _0x33f5x1['self']['makePredecessorsKey'](_0x33f5x1['key'](_0x33f5x4)), _0x33f5x2) : _0x33f5x1['move'](_0x33f5x1['self']['makePredecessorsKey'](_0x33f5x1['key'](_0x33f5x3)), _0x33f5x1['self']['makePredecessorsKey'](_0x33f5x1['key'](_0x33f5x4)));
    },
    clearSuccessors: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return _0x33f5x1['clear'](_0x33f5x1['self']['makeSuccessorsKey'](_0x33f5x1['key'](_0x33f5x2)));
    },
    clearPredecessors: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return _0x33f5x1['clear'](_0x33f5x1['self']['makePredecessorsKey'](_0x33f5x1['key'](_0x33f5x2)));
    },
    inheritableStatics: {
        splitKey: function(_0x33f5x2) {
            _0x33f5x2 = _0x33f5x2['split']('@#!#@');
            return {
                id: _0x33f5x2[0],
                type: _0x33f5x2['length'] && _0x33f5x2[1] || false
            };
        },
        makeSuccessorsKey: function(_0x33f5x2) {
            return _0x33f5x2 + '@#!#@succ';
        },
        makePredecessorsKey: function(_0x33f5x2) {
            return _0x33f5x2 + '@#!#@pred';
        }
    }
});

Ext.define('Ext.ux.Scheduler.data.util.ResourceAssignmentsCache', {
    extend: Ext.ux.Scheduler.util.Cache,
    assignmentStore: null,
    assignmentStoreDetacher: null,
    eventStoreDetacher: null,
    resourceStoreDetacher: null,
    constructor: function(_0x33f5x7) {
        var _0x33f5xe = this, _0x33f5x8 = _0x33f5x7['getEventStore'](), _0x33f5xc = _0x33f5x8 && _0x33f5x8['getResourceStore']();
        _0x33f5xe['callParent']();
        function _0x33f5xb(_0x33f5x10, _0x33f5x6) {
            Ext.Array['each'](_0x33f5x6, function(_0x33f5x17) {
                _0x33f5xe['add'](_0x33f5x17['getResourceId'](), _0x33f5x17);
            });
        }
        function _0x33f5x1(_0x33f5x10, _0x33f5x6) {
            Ext.Array['each'](_0x33f5x6, function(_0x33f5x17) {
                _0x33f5xe['remove'](_0x33f5x17['getResourceId'](), _0x33f5x17);
            });
        }
        function _0x33f5xa(_0x33f5x17, _0x33f5x12, _0x33f5x10) {
            var _0x33f5x14 = _0x33f5x12['resourceIdField'], _0x33f5x15 = _0x33f5x12['previous'] && _0x33f5x14 in _0x33f5x12['previous'], _0x33f5x6 = _0x33f5x15 && _0x33f5x12['previous'][_0x33f5x14];
            if (_0x33f5x15) {
                _0x33f5xe['move'](_0x33f5x6, _0x33f5x12['getResourceId'](), _0x33f5x12);
            }
        }
        function _0x33f5x11(_0x33f5x6) {
            _0x33f5xe['clear']();
        }
        function _0x33f5x3(_0x33f5x6, _0x33f5x10) {
            _0x33f5x2(_0x33f5x10);
            _0x33f5x4(_0x33f5x10 && _0x33f5x10['getResourceStore']());
        }
        function _0x33f5xd(_0x33f5x6, _0x33f5x10) {
            _0x33f5xe['clear']();
            _0x33f5x4(_0x33f5x10);
        }
        function _0x33f5xf(_0x33f5x10, _0x33f5x17, _0x33f5x15, _0x33f5x6) {
            _0x33f5xe['move'](_0x33f5x15, _0x33f5x6);
        }
        function _0x33f5x9(_0x33f5x6, _0x33f5x10) {
            Ext.Array['each'](_0x33f5x10, function(_0x33f5x17) {
                _0x33f5xe['clear'](_0x33f5x17);
            });
        }
        function _0x33f5x5() {
            _0x33f5xe['clear']();
        }
        function _0x33f5x2(_0x33f5x6) {
            Ext.destroy(_0x33f5xe['eventStoreDetacher']);
            _0x33f5xe['eventStoreDetacher'] = _0x33f5x6 && _0x33f5x6['on']({
                resourcestorechange: _0x33f5xd,
                priority: 100,
                destroyable: true
            });
        }
        function _0x33f5x4(_0x33f5x6) {
            Ext.destroy(_0x33f5xe['resourceStoreDetacher']);
            _0x33f5xe['resourceStoreDetacher'] = _0x33f5x6 && _0x33f5x6['on']({
                idchanged: _0x33f5xf,
                remove: _0x33f5x9,
                clear: _0x33f5x5,
                cacheresethint: _0x33f5x5,
                rootchange: _0x33f5x5,
                priority: 100,
                destroyable: true
            });
        }
        _0x33f5xe['assignmentStoreDetacher'] = _0x33f5x7['on']({
            add: _0x33f5xb,
            remove: _0x33f5x1,
            update: _0x33f5xa,
            clear: _0x33f5x11,
            cacheresethint: _0x33f5x11,
            eventstorechange: _0x33f5x3,
            priority: 100,
            destroyable: true
        });
        _0x33f5xe['assignmentStoreFiltersDetacher'] = _0x33f5x7['getFilters']()['on']('endupdate', _0x33f5x11, _0x33f5xe, {
            priority: 1002,
            destroyable: true
        });
        _0x33f5x2(_0x33f5x8);
        _0x33f5x4(_0x33f5xc);
        _0x33f5xe['assignmentStore'] = _0x33f5x7;
    },
    destroy: function() {
        var _0x33f5x2 = this;
        Ext.destroyMembers(_0x33f5x2, 'assignmentStoreDetacher', 'assignmentStoreFiltersDetacher', 'eventStoreDetacher', 'resourceStoreDetacher');
        _0x33f5x2['assignmentStore'] = null;
    },
    get: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x3 = this;
        _0x33f5x2 = _0x33f5x3['key'](_0x33f5x2);
        _0x33f5x1 = _0x33f5x1 || function() {
            return Ext.Array['filter'](_0x33f5x3['assignmentStore']['getRange'](), function(_0x33f5x4) {
                return _0x33f5x4['getResourceId']() == _0x33f5x2;
            });
        };
        return _0x33f5x3['callParent']([ _0x33f5x2, _0x33f5x1 ]);
    }
});

Ext.define('Ext.ux.Scheduler.eventlayout.Horizontal', {
    nbrOfBandsByResource: null,
    bandIndexToPxConvertFn: null,
    bandIndexToPxConvertScope: null,
    constructor: function(_0x33f5x2) {
        Ext.apply(this, _0x33f5x2);
        this['nbrOfBandsByResource'] = {};
    },
    clearCache: function(_0x33f5x2) {
        if (_0x33f5x2) {
            delete this['nbrOfBandsByResource'][_0x33f5x2['internalId']];
        } else {
            this['nbrOfBandsByResource'] = {};
        }
    },
    getNumberOfBands: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = this['nbrOfBandsByResource'];
        if (_0x33f5x2['hasOwnProperty'](_0x33f5x3['internalId'])) {
            return _0x33f5x2[_0x33f5x3['internalId']];
        }
        var _0x33f5x5 = Ext.isFunction(_0x33f5x1) ? _0x33f5x1() : _0x33f5x1;
        var _0x33f5x4 = Ext.Array.map(_0x33f5x5, function(_0x33f5x8) {
            return {
                start: _0x33f5x8['getStartDate'](),
                end: _0x33f5x8['getEndDate'](),
                event: _0x33f5x8
            };
        });
        return this['applyLayout'](_0x33f5x4, _0x33f5x3);
    },
    applyLayout: function(_0x33f5x2, _0x33f5x3) {
        var _0x33f5x4 = _0x33f5x2['slice']();
        var _0x33f5x1 = this;
        _0x33f5x4['sort'](function(_0x33f5x8, _0x33f5x5) {
            return _0x33f5x1['sortEvents'](_0x33f5x8['event'], _0x33f5x5['event']);
        });
        return this['nbrOfBandsByResource'][_0x33f5x3['internalId']] = this['layoutEventsInBands'](_0x33f5x4);
    },
    sortEvents: function(_0x33f5x8, _0x33f5x4) {
        var _0x33f5x9 = _0x33f5x8['getStartDate']();
        var _0x33f5x5 = _0x33f5x4['getStartDate']();
        var _0x33f5x3 = _0x33f5x9 - _0x33f5x5 === 0;
        if (_0x33f5x3) {
            return _0x33f5x8['getEndDate']() > _0x33f5x4['getEndDate']() ? -1 : 1;
        } else {
            return _0x33f5x9 < _0x33f5x5 ? -1 : 1;
        }
    },
    layoutEventsInBands: function(_0x33f5x1) {
        var _0x33f5x2 = 0;
        do {
            var _0x33f5x3 = _0x33f5x1[0];
            while (_0x33f5x3) {
                _0x33f5x3['top'] = this['bandIndexToPxConvertFn']['call'](this['bandIndexToPxConvertScope'] || this, _0x33f5x2, _0x33f5x3['event']);
                Ext.Array['remove'](_0x33f5x1, _0x33f5x3);
                _0x33f5x3 = this['findClosestSuccessor'](_0x33f5x3, _0x33f5x1);
            }
            _0x33f5x2++;
        } while (_0x33f5x1['length'] > 0);
        return _0x33f5x2;
    },
    findClosestSuccessor: function(_0x33f5x2, _0x33f5xe) {
        var _0x33f5x8 = Infinity, _0x33f5x1, _0x33f5x9 = _0x33f5x2['end'], _0x33f5x7, _0x33f5x3 = _0x33f5x2['end'] - _0x33f5x2['start'] === 0;
        for (var _0x33f5x5 = 0, _0x33f5x4 = _0x33f5xe['length']; _0x33f5x5 < _0x33f5x4; _0x33f5x5++) {
            _0x33f5x7 = _0x33f5xe[_0x33f5x5]['start'] - _0x33f5x9;
            if (_0x33f5x7 >= 0 && _0x33f5x7 < _0x33f5x8 && (_0x33f5x7 > 0 || _0x33f5xe[_0x33f5x5]['end'] - _0x33f5xe[_0x33f5x5]['start'] > 0 || !_0x33f5x3)) {
                _0x33f5x1 = _0x33f5xe[_0x33f5x5];
                _0x33f5x8 = _0x33f5x7;
            }
        }
        return _0x33f5x1;
    }
});

Ext.define('Ext.ux.Scheduler.eventlayout.Table', {
    extend: Ext.ux.Scheduler.eventlayout.Horizontal,
    timeAxisViewModel: null,
    layoutEventsInBands: function(_0x33f5x3) {
        var _0x33f5x7 = this['timeAxisViewModel'];
        var _0x33f5x8 = _0x33f5x7['timeAxis'];
        var _0x33f5x2 = 0;
        do {
            var _0x33f5x5 = _0x33f5x3[0];
            while (_0x33f5x5) {
                _0x33f5x5['top'] = this['bandIndexToPxConvertFn']['call'](this['bandIndexToPxConvertScope'] || this, _0x33f5x2, _0x33f5x5['event']);
                var _0x33f5x1 = Math['floor'](_0x33f5x8['getTickFromDate'](_0x33f5x5['start']));
                var _0x33f5x9 = this['timeAxisViewModel']['getPositionFromDate'](_0x33f5x8['getAt'](_0x33f5x1)['getStartDate']());
                var _0x33f5x4 = this['timeAxisViewModel']['getTickWidth']();
                _0x33f5x5['left'] = _0x33f5x9;
                _0x33f5x5['width'] = _0x33f5x4;
                Ext.Array['remove'](_0x33f5x3, _0x33f5x5);
                _0x33f5x5 = this['findClosestSuccessor'](_0x33f5x5, _0x33f5x3);
            }
            _0x33f5x2++;
        } while (_0x33f5x3['length'] > 0);
        return _0x33f5x2;
    },
    findClosestSuccessor: function(_0x33f5x5, _0x33f5x4) {
        var _0x33f5x8 = this['timeAxisViewModel']['timeAxis'];
        var _0x33f5x9 = Math['floor'](_0x33f5x8['getTickFromDate'](_0x33f5x5['start']));
        var _0x33f5x3 = _0x33f5x8['getAt'](_0x33f5x9);
        for (var _0x33f5x1 = 0, _0x33f5x2 = _0x33f5x4['length']; _0x33f5x1 < _0x33f5x2; _0x33f5x1++) {
            if (_0x33f5x4[_0x33f5x1]['start'] >= _0x33f5x3['getEndDate']()) {
                return _0x33f5x4[_0x33f5x1];
            }
        }
    }
});

Ext.define('Ext.ux.Scheduler.eventlayout.Vertical', {
    view: null,
    constructor: function(_0x33f5x2) {
        Ext.apply(this, _0x33f5x2);
    },
    applyLayout: function(_0x33f5x2, _0x33f5x9) {
        if (_0x33f5x2['length'] === 0) {
            return;
        }
        var _0x33f5x12 = this;
        _0x33f5x2['sort'](function(_0x33f5xe, _0x33f5xf) {
            return _0x33f5x12['sortEvents'](_0x33f5xe['event'], _0x33f5xf['event']);
        });
        var _0x33f5x4, _0x33f5x3, _0x33f5x7 = this['view'], _0x33f5xb = Ext.ux.Scheduler.util.Date, _0x33f5xd = 1, _0x33f5x17, _0x33f5x1, _0x33f5x5, _0x33f5x10;
        for (var _0x33f5x15 = 0, _0x33f5x6 = _0x33f5x2['length']; _0x33f5x15 < _0x33f5x6; _0x33f5x15++) {
            _0x33f5x5 = _0x33f5x2[_0x33f5x15];
            _0x33f5x4 = _0x33f5x5['start'];
            _0x33f5x3 = _0x33f5x5['end'];
            _0x33f5x1 = this['findStartSlot'](_0x33f5x2, _0x33f5x5);
            var _0x33f5x14 = this['getCluster'](_0x33f5x2, _0x33f5x15);
            if (_0x33f5x14['length'] > 1) {
                _0x33f5x5['left'] = _0x33f5x1['start'];
                _0x33f5x5['width'] = _0x33f5x1['end'] - _0x33f5x1['start'];
                _0x33f5x10 = 1;
                while (_0x33f5x10 < _0x33f5x14['length'] - 1 && _0x33f5x14[_0x33f5x10 + 1]['start'] - _0x33f5x5['start'] === 0) {
                    _0x33f5x10++;
                }
                var _0x33f5xa = this['findStartSlot'](_0x33f5x2, _0x33f5x14[_0x33f5x10]);
                if (_0x33f5xa && _0x33f5xa['start'] < .8) {
                    _0x33f5x14 = _0x33f5x14['slice'](0, _0x33f5x10);
                }
            }
            var _0x33f5x8 = _0x33f5x14['length'], _0x33f5xc = (_0x33f5x1['end'] - _0x33f5x1['start']) / _0x33f5x8;
            for (_0x33f5x10 = 0; _0x33f5x10 < _0x33f5x8; _0x33f5x10++) {
                _0x33f5x14[_0x33f5x10]['width'] = _0x33f5xc;
                _0x33f5x14[_0x33f5x10]['left'] = _0x33f5x1['start'] + _0x33f5x10 * _0x33f5xc;
            }
            _0x33f5x15 += _0x33f5x8 - 1;
        }
        for (_0x33f5x15 = 0, _0x33f5x6 = _0x33f5x2['length']; _0x33f5x15 < _0x33f5x6; _0x33f5x15++) {
            _0x33f5x2[_0x33f5x15]['width'] = _0x33f5x2[_0x33f5x15]['width'] * _0x33f5x9;
            _0x33f5x2[_0x33f5x15]['left'] = _0x33f5x7['barMargin'] + _0x33f5x2[_0x33f5x15]['left'] * _0x33f5x9;
        }
    },
    findStartSlot: function(_0x33f5x3, _0x33f5x4) {
        var _0x33f5x2 = this['getPriorOverlappingEvents'](_0x33f5x3, _0x33f5x4), _0x33f5x1;
        if (_0x33f5x2['length'] === 0) {
            return {
                start: 0,
                end: 1
            };
        }
        for (_0x33f5x1 = 0; _0x33f5x1 < _0x33f5x2['length']; _0x33f5x1++) {
            if (_0x33f5x1 === 0 && _0x33f5x2[0]['left'] > 0) {
                return {
                    start: 0,
                    end: _0x33f5x2[0]['left']
                };
            } else {
                if (_0x33f5x2[_0x33f5x1]['left'] + _0x33f5x2[_0x33f5x1]['width'] < (_0x33f5x1 < _0x33f5x2['length'] - 1 ? _0x33f5x2[_0x33f5x1 + 1]['left'] : 1)) {
                    return {
                        start: _0x33f5x2[_0x33f5x1]['left'] + _0x33f5x2[_0x33f5x1]['width'],
                        end: _0x33f5x1 < _0x33f5x2['length'] - 1 ? _0x33f5x2[_0x33f5x1 + 1]['left'] : 1
                    };
                }
            }
        }
        return false;
    },
    getPriorOverlappingEvents: function(_0x33f5x5, _0x33f5x8) {
        var _0x33f5x9 = Ext.ux.Scheduler.util.Date, _0x33f5x7 = _0x33f5x8['start'], _0x33f5x1 = _0x33f5x8['end'], _0x33f5x3 = [];
        for (var _0x33f5x4 = 0, _0x33f5x2 = Ext.Array.indexOf(_0x33f5x5, _0x33f5x8); _0x33f5x4 < _0x33f5x2; _0x33f5x4++) {
            if (_0x33f5x9['intersectSpans'](_0x33f5x7, _0x33f5x1, _0x33f5x5[_0x33f5x4]['start'], _0x33f5x5[_0x33f5x4]['end'])) {
                _0x33f5x3['push'](_0x33f5x5[_0x33f5x4]);
            }
        }
        _0x33f5x3['sort'](this['sortOverlappers']);
        return _0x33f5x3;
    },
    sortOverlappers: function(_0x33f5x1, _0x33f5x2) {
        return _0x33f5x1['left'] < _0x33f5x2['left'] ? -1 : 1;
    },
    getCluster: function(_0x33f5x5, _0x33f5x9) {
        if (_0x33f5x9 >= _0x33f5x5['length'] - 1) {
            return [ _0x33f5x5[_0x33f5x9] ];
        }
        var _0x33f5x3 = [ _0x33f5x5[_0x33f5x9] ], _0x33f5x7 = _0x33f5x5[_0x33f5x9]['start'], _0x33f5x1 = _0x33f5x5[_0x33f5x9]['end'], _0x33f5x2 = _0x33f5x5['length'], _0x33f5x8 = Ext.ux.Scheduler.util.Date, _0x33f5x4 = _0x33f5x9 + 1;
        while (_0x33f5x4 < _0x33f5x2 && _0x33f5x8['intersectSpans'](_0x33f5x7, _0x33f5x1, _0x33f5x5[_0x33f5x4]['start'], _0x33f5x5[_0x33f5x4]['end'])) {
            _0x33f5x3['push'](_0x33f5x5[_0x33f5x4]);
            _0x33f5x7 = _0x33f5x8['max'](_0x33f5x7, _0x33f5x5[_0x33f5x4]['start']);
            _0x33f5x1 = _0x33f5x8['min'](_0x33f5x5[_0x33f5x4]['end'], _0x33f5x1);
            _0x33f5x4++;
        }
        return _0x33f5x3;
    },
    sortEvents: function(_0x33f5x8, _0x33f5x4) {
        var _0x33f5x9 = _0x33f5x8['getStartDate'](), _0x33f5xf = _0x33f5x8['getEndDate']();
        var _0x33f5x5 = _0x33f5x4['getStartDate'](), _0x33f5x7 = _0x33f5x4['getEndDate']();
        var _0x33f5x3 = _0x33f5x9 - _0x33f5x5 === 0;
        if (_0x33f5x3) {
            return _0x33f5xf > _0x33f5x7 ? -1 : 1;
        } else {
            return _0x33f5x9 < _0x33f5x5 ? -1 : 1;
        }
    }
});

Ext.define('Ext.ux.Scheduler.feature.AbstractTimeSpan', {
    extend: Ext.AbstractPlugin,
    mixins: {
        observable: Ext.util['Observable']
    },
    lockableScope: 'top',
    schedulerView: null,
    timeAxis: null,
    containerEl: null,
    expandToFitView: false,
    disabled: false,
    cls: null,
    clsField: 'Cls',
    template: null,
    store: null,
    renderElementsBuffered: false,
    renderDelay: 15,
    refreshSizeOnItemUpdate: true,
    _resizeTimer: null,
    _renderTimer: null,
    showHeaderElements: false,
    headerTemplate: null,
    innerHeaderTpl: null,
    headerContainerCls: 'sch-header-secondary-canvas',
    headerContainerEl: null,
    renderingDoneEvent: null,
    constructor: function(_0x33f5x2) {
        this['uniqueCls'] = this['uniqueCls'] || 'sch-timespangroup-' + Ext['id']();
        Ext.apply(this, _0x33f5x2);
        this['mixins']['observable']['constructor']['call'](this);
        this['callParent'](arguments);
    },
    setDisabled: function(_0x33f5x2) {
        if (_0x33f5x2) {
            this['removeElements']();
        }
        this['disabled'] = _0x33f5x2;
    },
    removeElements: function() {
        this['removeBodyElements']();
        if (this['showHeaderElements']) {
            this['removeHeaderElements']();
        }
    },
    getBodyElements: function() {
        if (this['containerEl']) {
            return this['containerEl']['select']('.' + this['uniqueCls']);
        }
        return null;
    },
    getHeaderContainerEl: function() {
        var _0x33f5x3 = this['headerContainerEl'], _0x33f5x1 = Ext['baseCSSPrefix'], _0x33f5x2;
        if (!_0x33f5x3 || !_0x33f5x3['dom']) {
            if (this['schedulerView']['isHorizontal']()) {
                _0x33f5x2 = this['panel']['getHorizontalTimeAxisColumn']()['headerView']['containerEl'];
            } else {
                _0x33f5x2 = this['panel']['el']['down']('.' + _0x33f5x1 + 'grid-inner-locked .' + _0x33f5x1 + 'panel-body .' + _0x33f5x1 + 'grid-view');
            }
            if (_0x33f5x2) {
                _0x33f5x3 = _0x33f5x2['down']('.' + this['headerContainerCls']);
                if (!_0x33f5x3) {
                    _0x33f5x3 = _0x33f5x2['appendChild']({
                        cls: this['headerContainerCls']
                    });
                }
                this['headerContainerEl'] = _0x33f5x3;
            }
        }
        return _0x33f5x3;
    },
    getHeaderElements: function() {
        var _0x33f5x2 = this['getHeaderContainerEl']();
        if (_0x33f5x2) {
            return _0x33f5x2['select']('.' + this['uniqueCls']);
        }
        return null;
    },
    removeBodyElements: function() {
        var _0x33f5x2 = this['getBodyElements']();
        if (_0x33f5x2) {
            _0x33f5x2['each'](function(_0x33f5x1) {
                _0x33f5x1['destroy']();
            });
        }
    },
    removeHeaderElements: function() {
        var _0x33f5x2 = this['getHeaderElements']();
        if (_0x33f5x2) {
            _0x33f5x2['each'](function(_0x33f5x1) {
                _0x33f5x1['destroy']();
            });
        }
    },
    getElementId: function(_0x33f5x2) {
        return this['uniqueCls'] + '-' + _0x33f5x2['internalId'];
    },
    getHeaderElementId: function(_0x33f5x2) {
        return this['uniqueCls'] + '-header-' + _0x33f5x2['internalId'];
    },
    getTemplateData: function(_0x33f5x2) {
        return this['prepareTemplateData'] ? this['prepareTemplateData'](_0x33f5x2) : _0x33f5x2['data'];
    },
    getElementCls: function(_0x33f5x2, _0x33f5x3) {
        var _0x33f5x1 = _0x33f5x2['clsField'] || this['clsField'];
        if (!_0x33f5x3) {
            _0x33f5x3 = this['getTemplateData'](_0x33f5x2);
        }
        return this['cls'] + ' ' + this['uniqueCls'] + ' ' + (_0x33f5x3[_0x33f5x1] || '');
    },
    getHeaderElementCls: function(_0x33f5x2, _0x33f5x3) {
        var _0x33f5x1 = _0x33f5x2['clsField'] || this['clsField'];
        if (!_0x33f5x3) {
            _0x33f5x3 = this['getTemplateData'](_0x33f5x2);
        }
        return 'sch-header-indicator ' + this['uniqueCls'] + ' ' + (_0x33f5x3[_0x33f5x1] || '');
    },
    init: function(_0x33f5x2) {
        if (Ext['versions']['touch'] && !_0x33f5x2['isReady']()) {
            _0x33f5x2['on']('viewready', function() {
                this['init'](_0x33f5x2);
            }, this);
            return;
        }
        if (typeof this['innerHeaderTpl'] === 'string') {
            this['innerHeaderTpl'] = new Ext.XTemplate(this['innerHeaderTpl']);
        }
        var _0x33f5x1 = this['innerHeaderTpl'];
        if (!this['headerTemplate']) {
            this['headerTemplate'] = new Ext.XTemplate('<tpl for=".">', '<div id="{id}" class="{cls}" style="{side}:{position}px;">' + (_0x33f5x1 ? '{[this.renderInner(values)]}' : '') + '</div>', '</tpl>', {
                renderInner: function(_0x33f5x3) {
                    return _0x33f5x1['apply'](_0x33f5x3);
                }
            });
        }
        this['schedulerView'] = _0x33f5x2['getSchedulingView']();
        this['panel'] = _0x33f5x2;
        this['timeAxis'] = _0x33f5x2['getTimeAxis']();
        this['store'] = Ext.StoreManager.lookup(this['store']);
        if (!this['store']) {
            Ext['Error']['raise']('Error: You must define a store for this plugin');
        }
        if (!this['schedulerView']['getEl']()) {
            this['schedulerView']['on']({
                afterrender: this['onAfterRender'],
                scope: this
            });
        } else {
            this['onAfterRender']();
        }
    },
    onAfterRender: function(_0x33f5x3) {
        var _0x33f5x2 = this['schedulerView'];
        this['containerEl'] = _0x33f5x2['getSecondaryCanvasEl']();
        this['storeListeners'] = {
            load: this['renderElements'],
            datachanged: this['renderElements'],
            clear: this['renderElements'],
            add: this['renderElements'],
            remove: this['renderElements'],
            update: this['refreshSingle'],
            addrecords: this['renderElements'],
            removerecords: this['renderElements'],
            updaterecord: this['refreshSingle'],
            expand: this['renderElements'],
            collapse: this['renderElements'],
            scope: this
        };
        this['store']['on'](this['storeListeners']);
        _0x33f5x2['on']({
            bufferedrefresh: this['renderElements'],
            refresh: this['renderElements'],
            itemadd: this['refreshSizeOnItemUpdate'] ? this['refreshSizes'] : this['renderElements'],
            itemremove: this['refreshSizeOnItemUpdate'] ? this['refreshSizes'] : this['renderElements'],
            itemupdate: this['refreshSizeOnItemUpdate'] ? this['refreshSizes'] : this['renderElements'],
            groupexpand: this['renderElements'],
            groupcollapse: this['renderElements'],
            columnwidthchange: this['renderElements'],
            resize: this['renderElements'],
            scope: this
        });
        if (_0x33f5x2['headerCt']) {
            _0x33f5x2['headerCt']['on']({
                add: this['renderElements'],
                remove: this['renderElements'],
                scope: this
            });
        }
        this['panel']['on']({
            viewchange: this['renderElements'],
            show: this['refreshSizes'],
            modechange: this['forceNewRenderingTimeout'],
            scope: this
        });
        var _0x33f5x1 = _0x33f5x2['getRowContainerEl']();
        if (_0x33f5x1 && _0x33f5x1['down']('.sch-timetd', true)) {
            this['renderElements']();
        }
    },
    forceNewRenderingTimeout: function() {
        this['renderElementsBuffered'] = false;
        clearTimeout(this._renderTimer);
        clearTimeout(this._resizeTimer);
        this['renderElements']();
    },
    refreshSizesInternal: function() {
        if (!this['schedulerView']['isDestroyed'] && this['schedulerView']['isHorizontal']()) {
            var _0x33f5x2 = this['schedulerView']['getTimeSpanRegion'](new Date(), null, this['expandToFitView']);
            this['getBodyElements']()['setHeight'](_0x33f5x2['bottom'] - _0x33f5x2['top']);
        }
    },
    refreshSizes: function() {
        clearTimeout(this._resizeTimer);
        this['_resizeTimer'] = Ext['Function']['defer'](this['refreshSizesInternal'], this['renderDelay'], this);
    },
    renderElements: function() {
        if (this['renderElementsBuffered'] || this['disabled']) {
            return;
        }
        this['renderElementsBuffered'] = true;
        clearTimeout(this._renderTimer);
        this['_renderTimer'] = Ext['Function']['defer'](this['renderElementsInternal'], this['renderDelay'], this);
    },
    setElementX: function(_0x33f5x1, _0x33f5x2) {
        if (this['panel']['rtl']) {
            _0x33f5x1['setRight'](_0x33f5x2);
        } else {
            _0x33f5x1['setLeft'](_0x33f5x2);
        }
    },
    getHeaderElementPosition: function(_0x33f5x1) {
        var _0x33f5x2 = this['schedulerView']['getTimeAxisViewModel']();
        return Math['round'](_0x33f5x2['getPositionFromDate'](_0x33f5x1));
    },
    renderBodyElementsInternal: function(_0x33f5x1) {
        var _0x33f5x4 = this['timeAxis']['getStart'](), _0x33f5x2 = this['timeAxis']['getEnd'](), _0x33f5x3 = this['getElementData'](_0x33f5x4, _0x33f5x2, _0x33f5x1);
        this['template']['append'](this['containerEl'], _0x33f5x3);
    },
    getHeaderElementData: function(_0x33f5x2, _0x33f5x1) {
        throw 'Abstract method call';
    },
    renderHeaderElementsInternal: function(_0x33f5x2) {
        var _0x33f5x3 = this['getHeaderContainerEl']();
        if (_0x33f5x3) {
            var _0x33f5x1 = this['getHeaderElementData'](_0x33f5x2);
            this['headerTemplate']['append'](_0x33f5x3, _0x33f5x1);
        }
    },
    renderElementsInternal: function() {
        this['renderElementsBuffered'] = false;
        if (this['disabled'] || this['schedulerView']['isDestroyed']) {
            return;
        }
        if (Ext['versions']['extjs'] && !this['schedulerView']['getEl']()['down']('.' + Ext['baseCSSPrefix'] + 'grid-item-container')) {
            return;
        }
        this['removeElements']();
        this['renderBodyElementsInternal']();
        if (this['showHeaderElements']) {
            this['headerContainerEl'] = null;
            this['renderHeaderElementsInternal']();
        }
        if (this['renderingDoneEvent']) {
            this['fireEvent'](this['renderingDoneEvent'], this);
        }
    },
    getElementData: function(_0x33f5x4, _0x33f5x3, _0x33f5x2, _0x33f5x1) {
        throw 'Abstract method call';
    },
    updateBodyElement: function(_0x33f5x1) {
        var _0x33f5x3 = Ext.get(this['getElementId'](_0x33f5x1));
        if (_0x33f5x3) {
            var _0x33f5x5 = this['timeAxis']['getStart'](), _0x33f5x2 = this['timeAxis']['getEnd'](), _0x33f5x4 = this['getElementData'](_0x33f5x5, _0x33f5x2, [ _0x33f5x1 ])[0];
            if (_0x33f5x4) {
                _0x33f5x3['dom']['className'] = _0x33f5x4['$cls'];
                _0x33f5x3['setTop'](_0x33f5x4['top']);
                this['setElementX'](_0x33f5x3, _0x33f5x4['left']);
                _0x33f5x3['setSize'](_0x33f5x4['width'], _0x33f5x4['height']);
            } else {
                Ext.destroy(_0x33f5x3);
            }
        } else {
            this['renderBodyElementsInternal']([ _0x33f5x1 ]);
        }
    },
    updateHeaderElement: function(_0x33f5x2) {
        var _0x33f5x1 = Ext.get(this['getHeaderElementId'](_0x33f5x2));
        if (_0x33f5x1) {
            var _0x33f5x3 = this['getHeaderElementData']([ _0x33f5x2 ])[0];
            if (_0x33f5x3) {
                _0x33f5x1['dom']['className'] = _0x33f5x3['cls'];
                if (this['schedulerView']['isHorizontal']()) {
                    this['setElementX'](_0x33f5x1, _0x33f5x3['position']);
                    _0x33f5x1['setWidth'](_0x33f5x3['size']);
                } else {
                    _0x33f5x1['setTop'](_0x33f5x3['position']);
                    _0x33f5x1['setHeight'](_0x33f5x3['size']);
                }
            } else {
                Ext.destroy(_0x33f5x1);
            }
        } else {
            this['renderHeaderElementsInternal']([ _0x33f5x2 ]);
        }
    },
    destroy: function() {
        clearTimeout(this._renderTimer);
        clearTimeout(this._resizeTimer);
        this['store']['un'](this['storeListeners']);
        if (this['store']['autoDestroy']) {
            this['store']['destroy']();
        }
    },
    refreshSingle: function(_0x33f5x1, _0x33f5x2) {
        _0x33f5x2 = _0x33f5x2 instanceof Array ? _0x33f5x2 : [ _0x33f5x2 ];
        Ext.Array['each'](_0x33f5x2, function(_0x33f5x3) {
            this['updateBodyElement'](_0x33f5x3);
            if (this['showHeaderElements']) {
                this['updateHeaderElement'](_0x33f5x3);
            }
        }, this);
    }
});

Ext.define('Ext.ux.Scheduler.plugin.Lines', {
    extend: Ext.ux.Scheduler.feature.AbstractTimeSpan,
    alias: 'plugin.scheduler_lines',
    cls: 'sch-timeline',
    showTip: true,
    innerTpl: null,
    prepareTemplateData: null,
    side: null,
    init: function(_0x33f5x2) {
        if (typeof this['innerTpl'] === 'string') {
            this['innerTpl'] = new Ext.XTemplate(this['innerTpl']);
        }
        this['side'] = _0x33f5x2['rtl'] ? 'right' : 'left';
        var _0x33f5x1 = this['innerTpl'];
        if (!this['template']) {
            this['template'] = new Ext.XTemplate('<tpl for=".">', '<div id="{id}" ' + (this['showTip'] ? 'title="{[this.getTipText(values)]}" ' : '') + 'class="{$cls}" style="' + this['side'] + ':{left}px;top:{top}px;height:{height}px;width:{width}px">' + (_0x33f5x1 ? '{[this.renderInner(values)]}' : '') + '</div>', '</tpl>', {
                getTipText: function(_0x33f5x3) {
                    return _0x33f5x2['getSchedulingView']()['getFormattedDate'](_0x33f5x3.Date) + ' ' + (_0x33f5x3['Text'] || '');
                },
                renderInner: function(_0x33f5x3) {
                    return _0x33f5x1['apply'](_0x33f5x3);
                }
            });
        }
        this['callParent'](arguments);
    },
    getElementData: function(_0x33f5x8, _0x33f5x4, _0x33f5x17) {
        var _0x33f5xc = this['store'], _0x33f5x3 = this['schedulerView'], _0x33f5xe = _0x33f5x3['isHorizontal'](), _0x33f5x7 = _0x33f5x3['isCalendar'](), _0x33f5xb = _0x33f5x17 || _0x33f5xc['getRange'](), _0x33f5x1 = _0x33f5x3['getTimeSpanRegion'](_0x33f5x8, null, this['expandToFitView']), _0x33f5x12 = [], _0x33f5xd, _0x33f5xa, _0x33f5x2, _0x33f5x14, _0x33f5x5;
        if (Ext['versions']['touch']) {
            _0x33f5xd = '100%';
        } else {
            _0x33f5xd = _0x33f5xe ? _0x33f5x1['bottom'] - _0x33f5x1['top'] : 1;
        }
        if (!_0x33f5x7) {
            _0x33f5xa = _0x33f5xe ? 1 : _0x33f5x1['right'] - _0x33f5x1['left'];
        }
        for (var _0x33f5x10 = 0, _0x33f5x6 = _0x33f5xb['length']; _0x33f5x10 < _0x33f5x6; _0x33f5x10++) {
            _0x33f5x2 = _0x33f5xb[_0x33f5x10];
            _0x33f5x14 = _0x33f5x2['get']('Date');
            if (_0x33f5x14 && Ext.ux.Scheduler.util.Date['betweenLesser'](_0x33f5x14, _0x33f5x8, _0x33f5x4)) {
                _0x33f5x5 = Ext.apply({}, this['getTemplateData'](_0x33f5x2));
                _0x33f5x5['id'] = this['getElementId'](_0x33f5x2);
                _0x33f5x5['$cls'] = this['getElementCls'](_0x33f5x2, _0x33f5x5);
                if (_0x33f5x7) {
                    _0x33f5x1 = _0x33f5x3['getTimeSpanRegion'](_0x33f5x14, _0x33f5x14);
                    _0x33f5xa = _0x33f5x1['right'] - _0x33f5x1['left'];
                    _0x33f5x5['left'] = _0x33f5x1['x'];
                    _0x33f5x5['top'] = _0x33f5x1['y'];
                } else {
                    var _0x33f5x9 = _0x33f5x3['getCoordinateFromDate'](_0x33f5x14);
                    if (_0x33f5xe) {
                        _0x33f5x5['left'] = _0x33f5x9;
                    } else {
                        _0x33f5x5['top'] = _0x33f5x9;
                    }
                }
                _0x33f5x5['width'] = _0x33f5xa;
                _0x33f5x5['height'] = _0x33f5xd;
                _0x33f5x12['push'](_0x33f5x5);
            }
        }
        return _0x33f5x12;
    },
    getHeaderElementData: function(_0x33f5x3) {
        var _0x33f5x2 = this['timeAxis']['getStart'](), _0x33f5xb = this['timeAxis']['getEnd'](), _0x33f5xc = this['schedulerView']['isHorizontal'](), _0x33f5x9 = [], _0x33f5x7, _0x33f5x1, _0x33f5xe, _0x33f5x5;
        _0x33f5x3 = _0x33f5x3 || this['store']['getRange']();
        for (var _0x33f5x8 = 0, _0x33f5x4 = _0x33f5x3['length']; _0x33f5x8 < _0x33f5x4; _0x33f5x8++) {
            _0x33f5x7 = _0x33f5x3[_0x33f5x8];
            _0x33f5x1 = _0x33f5x7['get']('Date');
            if (_0x33f5x1 && Ext.ux.Scheduler.util.Date['betweenLesser'](_0x33f5x1, _0x33f5x2, _0x33f5xb)) {
                _0x33f5xe = this['getHeaderElementPosition'](_0x33f5x1);
                _0x33f5x5 = this['getTemplateData'](_0x33f5x7);
                _0x33f5x5 = Ext.apply({
                    side: _0x33f5xc ? this['side'] : 'top',
                    cls: this['getHeaderElementCls'](_0x33f5x7, _0x33f5x5),
                    position: _0x33f5xe
                }, _0x33f5x5);
                _0x33f5x5['id'] = this['getHeaderElementId'](_0x33f5x7);
                _0x33f5x9['push'](_0x33f5x5);
            }
        }
        return _0x33f5x9;
    }
});

Ext.define('Ext.ux.Scheduler.feature.ColumnLines', {
    extend: Ext.ux.Scheduler.plugin.Lines,
    cls: 'sch-column-line',
    showTip: false,
    timeAxisViewModel: null,
    renderingDoneEvent: 'columnlinessynced',
    useLowestHeader: null,
    init: function(_0x33f5x2) {
        this['timeAxis'] = _0x33f5x2['getTimeAxis']();
        this['timeAxisViewModel'] = _0x33f5x2['timeAxisViewModel'];
        this['panel'] = _0x33f5x2;
        this['store'] = new Ext.data.JsonStore({
            fields: [ 'Date' ]
        });
        this['callParent'](arguments);
        _0x33f5x2['on']({
            modechange: this['populate'],
            destroy: this['onHostDestroy'],
            scope: this
        });
        this['timeAxisViewModel']['on']('update', this['populate'], this);
        this['populate']();
    },
    onHostDestroy: function() {
        this['timeAxisViewModel']['un']('update', this['populate'], this);
    },
    populate: function() {
        this['store']['setData'](this['getData']());
    },
    getElementData: function() {
        var _0x33f5x2 = this['schedulerView'];
        if (_0x33f5x2['isHorizontal']() && _0x33f5x2['store']['getCount']() > 0) {
            return this['callParent'](arguments);
        }
        return [];
    },
    getData: function() {
        var _0x33f5x2 = this['panel'], _0x33f5xc = [];
        if (_0x33f5x2['isHorizontal']()) {
            var _0x33f5xb = this['timeAxisViewModel'];
            var _0x33f5x9 = this['useLowestHeader'] ? _0x33f5xb['getLowestHeader']() : _0x33f5xb['columnLinesFor'];
            var _0x33f5x5 = !!(_0x33f5xb['headerConfig'] && _0x33f5xb['headerConfig'][_0x33f5x9]['cellGenerator']);
            if (_0x33f5x5) {
                var _0x33f5xa = _0x33f5xb['getColumnConfig']()[_0x33f5x9];
                for (var _0x33f5x4 = 1, _0x33f5x1 = _0x33f5xa['length']; _0x33f5x4 < _0x33f5x1; _0x33f5x4++) {
                    _0x33f5xc['push']({
                        Date: _0x33f5xa[_0x33f5x4]['start']
                    });
                }
            } else {
                var _0x33f5x3, _0x33f5xe, _0x33f5xd = _0x33f5xb['getColumnConfig'](), _0x33f5x8;
                if (_0x33f5x9 === 'bottom') {
                    _0x33f5x3 = 'middle';
                } else {
                    if (_0x33f5x9 === 'middle') {
                        _0x33f5x3 = 'top';
                    }
                }
                _0x33f5xe = _0x33f5xd[_0x33f5x3];
                if (_0x33f5xe) {
                    var _0x33f5x7 = _0x33f5xb['headerConfig'];
                    if (_0x33f5x7[_0x33f5x3]['increment'] !== _0x33f5x7[_0x33f5x9]['increment'] || _0x33f5x7[_0x33f5x3]['unit'] !== _0x33f5x7[_0x33f5x9]['unit']) {
                        _0x33f5x8 = {};
                        Ext.Array['each'](_0x33f5xe, function(_0x33f5xf) {
                            _0x33f5x8[_0x33f5xf['start']['getTime']()] = 1;
                        });
                    }
                }
                _0x33f5xb['forEachInterval'](_0x33f5x9, function(_0x33f5x10, _0x33f5x11, _0x33f5x6) {
                    if (_0x33f5x6 > 0) {
                        _0x33f5xc['push']({
                            Date: _0x33f5x10,
                            Cls: _0x33f5x8 && _0x33f5x8[_0x33f5x10['getTime']()] ? 'sch-column-line-solid' : ''
                        });
                    }
                });
            }
        }
        return _0x33f5xc;
    }
});

Ext.define('Ext.ux.Scheduler.util.ScrollManager', {
    singleton: true,
    vthresh: 25,
    hthresh: 25,
    increment: 100,
    frequency: 500,
    animate: true,
    animDuration: 200,
    activeCmp: null,
    activeEl: null,
    scrollElRegion: null,
    scrollProcess: {},
    pt: null,
    scrollWidth: null,
    scrollHeight: null,
    direction: 'both',
    constructor: function() {
        this['doScroll'] = Ext.Function.bind(this['doScroll'], this);
    },
    triggerRefresh: function() {
        if (this['activeEl']) {
            this['refreshElRegion']();
            this['clearScrollInterval']();
            this['onMouseMove']();
        }
    },
    doScroll: function() {
        var _0x33f5x8 = this['scrollProcess'], _0x33f5x9 = _0x33f5x8['cmp'], _0x33f5x7 = _0x33f5x9['rtl'], _0x33f5x1 = _0x33f5x8['dir'][0], _0x33f5xf = this['increment'], _0x33f5x3 = this['activeCmp']['getScrollX'](), _0x33f5x2 = this['activeCmp']['getScrollY']();
        if (_0x33f5x1 === 'r') {
            _0x33f5xf = Math['min'](_0x33f5xf, _0x33f5x7 ? _0x33f5x3 : this['scrollWidth'] - _0x33f5x3 - this['activeEl']['dom']['clientWidth']);
        } else {
            if (_0x33f5x1 === 'd') {
                _0x33f5xf = Math['min'](_0x33f5xf, this['scrollHeight'] - _0x33f5x2 - this['activeEl']['dom']['clientHeight']);
            }
        }
        _0x33f5xf = Math['max'](_0x33f5xf, 0);
        var _0x33f5x5 = 0, _0x33f5x4 = 0;
        if (_0x33f5x1 === 'r') {
            _0x33f5x5 = _0x33f5xf;
        }
        if (_0x33f5x1 === 'l') {
            _0x33f5x5 = -_0x33f5xf;
        }
        if (_0x33f5x1 === 'u') {
            _0x33f5x4 = -_0x33f5xf;
        }
        if (_0x33f5x1 === 'd') {
            _0x33f5x4 = _0x33f5xf;
        }
        if (_0x33f5x7) {
            _0x33f5x5 = -_0x33f5x5;
        }
        _0x33f5x9['scrollBy'](_0x33f5x5, _0x33f5x4, {
            duration: this['animDuration'],
            callback: this['triggerRefresh'],
            scope: this
        });
    },
    clearScrollInterval: function() {
        var _0x33f5x2 = this['scrollProcess'];
        if (_0x33f5x2['id']) {
            clearTimeout(_0x33f5x2['id']);
        }
        _0x33f5x2['id'] = 0;
        _0x33f5x2['cmp'] = null;
        _0x33f5x2['dir'] = '';
    },
    isScrollAllowed: function(_0x33f5x2) {
        switch (this['direction']) {
          case 'both':
            return true;

          case 'horizontal':
            return _0x33f5x2 === 'right' || _0x33f5x2 === 'left';

          case 'vertical':
            return _0x33f5x2 === 'up' || _0x33f5x2 === 'down';

          default:
            throw 'Invalid direction: ' + this['direction'];
        }
    },
    startScrollInterval: function(_0x33f5x1, _0x33f5x2) {
        if (!this['isScrollAllowed'](_0x33f5x2)) {
            return;
        }
        this['clearScrollInterval']();
        this['scrollProcess']['cmp'] = _0x33f5x1;
        this['scrollProcess']['dir'] = _0x33f5x2;
        this['scrollProcess']['id'] = setTimeout(this['doScroll'], this['frequency']);
    },
    onMouseMove: function(_0x33f5x9) {
        var _0x33f5xa = _0x33f5x9 ? _0x33f5x9['getPoint']() : this['pt'], _0x33f5xd = _0x33f5xa['x'], _0x33f5x11 = _0x33f5xa['y'], _0x33f5x7 = this['scrollProcess'], _0x33f5xc = this['activeCmp'], _0x33f5x4 = _0x33f5xc['getScrollX'](), _0x33f5x3 = _0x33f5xc['getScrollY'](), _0x33f5x2, _0x33f5xb = _0x33f5xc['rtl'], _0x33f5x1 = this['activeEl'], _0x33f5xe = this['scrollElRegion'], _0x33f5x8 = _0x33f5x1['dom'], _0x33f5xf = this;
        this['pt'] = _0x33f5xa;
        if (_0x33f5xe && _0x33f5xe['contains'](_0x33f5xa) && _0x33f5x1['isScrollable']()) {
            if (_0x33f5xe['bottom'] - _0x33f5x11 <= _0x33f5xf['vthresh'] && this['scrollHeight'] - _0x33f5x3 - _0x33f5x8['clientHeight'] > 0) {
                if (_0x33f5x7['cmp'] != _0x33f5xc) {
                    this['startScrollInterval'](_0x33f5xc, 'down');
                }
                return;
            } else {
                if (_0x33f5xe['right'] - _0x33f5xd <= _0x33f5xf['hthresh'] && (_0x33f5xb ? _0x33f5x4 > 0 : this['scrollWidth'] - _0x33f5x4 - _0x33f5x8['clientWidth'] > 0)) {
                    if (_0x33f5x7['cmp'] != _0x33f5xc) {
                        this['startScrollInterval'](_0x33f5xc, 'right');
                    }
                    return;
                } else {
                    if (_0x33f5x11 - _0x33f5xe['top'] <= _0x33f5xf['vthresh'] && _0x33f5x3 > 0) {
                        if (_0x33f5x7['cmp'] != _0x33f5xc) {
                            this['startScrollInterval'](_0x33f5xc, 'up');
                        }
                        return;
                    } else {
                        if (_0x33f5xd - _0x33f5xe['left'] <= _0x33f5xf['hthresh'] && (_0x33f5xb ? _0x33f5x8['clientWidth'] + _0x33f5x4 < this['scrollWidth'] : _0x33f5x4 > 0)) {
                            if (_0x33f5x7['cmp'] != _0x33f5xc) {
                                this['startScrollInterval'](_0x33f5xc, 'left');
                            }
                            return;
                        }
                    }
                }
            }
        }
        this['clearScrollInterval']();
    },
    refreshElRegion: function() {
        this['scrollElRegion'] = this['activeEl']['getRegion']();
    },
    activate: function(_0x33f5x1, _0x33f5x3) {
        var _0x33f5x2 = Ext['getScrollbarSize']();
        this['direction'] = _0x33f5x3 || 'both';
        this['activeCmp'] = _0x33f5x1;
        this['activeEl'] = _0x33f5x1['getEl']();
        var _0x33f5x4 = _0x33f5x1['getScrollable']()['getMaxPosition']();
        this['scrollWidth'] = _0x33f5x4['x'] + _0x33f5x1['getWidth']() - _0x33f5x2['width'];
        this['scrollHeight'] = _0x33f5x4['y'] + _0x33f5x1['getHeight']() - _0x33f5x2['height'];
        this['refreshElRegion']();
        this['activeEl']['on']('mousemove', this['onMouseMove'], this);
    },
    deactivate: function() {
        this['clearScrollInterval']();
        this['activeEl']['un']('mousemove', this['onMouseMove'], this);
        this['activeEl'] = this['activeCmp'] = this['scrollElRegion'] = this['scrollWidth'] = this['scrollHeight'] = null;
        this['direction'] = 'both';
    }
});

Ext.define('Ext.ux.Scheduler.util.DragTracker', {
    extend: Ext['dd']['DragTracker'],
    xStep: 1,
    yStep: 1,
    deferredTouchActivation: 0,
    constructor: function() {
        this['callParent'](arguments);
        this['on']('dragstart', function() {
            var _0x33f5x1 = this['el'];
            var _0x33f5x2 = {
                scroll: this['onMouseMove'],
                pinchstart: this['onMouseUp'],
                scope: this
            };
            _0x33f5x1['on'](_0x33f5x2);
            this['on']('dragend', function() {
                _0x33f5x1['un'](_0x33f5x2);
            }, this, {
                single: true
            });
        });
        this['moveListener'] = {
            pinchstart: this['abortWait'],
            touchend: this['abortWait'],
            mouseup: this['abortWait'],
            mousemove: this['onMoveWhileWaiting'],
            scope: this,
            capture: true
        };
    },
    setXStep: function(_0x33f5x2) {
        this['xStep'] = _0x33f5x2;
    },
    startScroll: null,
    deferTimer: null,
    deferTolerance: 10,
    moveListener: null,
    setYStep: function(_0x33f5x2) {
        this['yStep'] = _0x33f5x2;
    },
    onMoveWhileWaiting: function(_0x33f5x4, _0x33f5x2) {
        var _0x33f5x3 = _0x33f5x4['getXY']();
        var _0x33f5x1 = this['startXY'];
        if (Math['max'](Math['abs'](_0x33f5x1[0] - _0x33f5x3[0]), Math['abs'](_0x33f5x1[1] - _0x33f5x3[1])) > this['deferTolerance']) {
            this['abortWait']();
            this['onMouseUp'](_0x33f5x4);
        }
    },
    abortWait: function() {
        clearTimeout(this['deferTimer']);
        this['deferTimer'] = null;
        Ext['getDoc']()['un'](this['moveListener']);
    },
    getRegion: function() {
        var _0x33f5xe = this['startXY'], _0x33f5x8 = this['el']['getScroll']();
        if (Ext['isIE'] && this['rtl']) {
            _0x33f5x8['left'] = this['el']['dom']['scrollWidth'] - this['el']['getWidth']() - _0x33f5x8['left'];
        }
        var _0x33f5x11 = this['getXY'](), _0x33f5x3 = _0x33f5x11[0], _0x33f5x1 = _0x33f5x11[1], _0x33f5x7 = _0x33f5x8['left'] - this['startScroll']['left'], _0x33f5xc = _0x33f5x8['top'] - this['startScroll']['top'], _0x33f5xf = _0x33f5xe[0] - _0x33f5x7, _0x33f5x9 = _0x33f5xe[1] - _0x33f5xc, _0x33f5x5 = Math['min'](_0x33f5xf, _0x33f5x3), _0x33f5x4 = Math['min'](_0x33f5x9, _0x33f5x1), _0x33f5x2 = Math['abs'](_0x33f5xf - _0x33f5x3), _0x33f5xb = Math['abs'](_0x33f5x9 - _0x33f5x1);
        return new Ext.util.Region(_0x33f5x4, _0x33f5x5 + _0x33f5x2, _0x33f5x4 + _0x33f5xb, _0x33f5x5);
    },
    onMouseDown: function(_0x33f5x4, _0x33f5x3) {
        var _0x33f5x1 = _0x33f5x4['event']['touches'] || [];
        if (_0x33f5x1['length'] > 1) {
            return;
        }
        _0x33f5x4['stopPropagation'] = Ext.emptyFn;
        this['startXY'] = _0x33f5x4['getXY']();
        if (this['deferredTouchActivation'] && _0x33f5x1['length'] === 1) {
            var _0x33f5x2 = this;
            Ext['getDoc']()['on'](this['moveListener']);
            this['deferTimer'] = setTimeout(function() {
                var _0x33f5x5 = _0x33f5x2['deferredTouchActivation'];
                Ext['getDoc']()['un'](_0x33f5x2['moveListener']);
                _0x33f5x2['deferredTouchActivation'] = false;
                _0x33f5x2['onMouseDown'](_0x33f5x4, _0x33f5x3);
                _0x33f5x2['deferredTouchActivation'] = _0x33f5x5;
            }, this['deferredTouchActivation']);
            return;
        }
        this['callParent']([ _0x33f5x4, _0x33f5x3 ]);
        this['lastXY'] = this['startXY'];
        this['startScroll'] = this['el']['getScroll']();
        if (Ext['isIE'] && this['rtl']) {
            this['startScroll']['left'] = this['el']['dom']['scrollWidth'] - this['el']['getWidth']() - this['startScroll']['left'];
        }
    },
    onMouseMove: function(_0x33f5x9, _0x33f5x8) {
        if (this['active'] && _0x33f5x9['type'] === 'mousemove' && Ext['isIE9m'] && !_0x33f5x9['browserEvent']['button']) {
            _0x33f5x9['preventDefault']();
            this['onMouseUp'](_0x33f5x9);
            return;
        }
        _0x33f5x9['preventDefault']();
        var _0x33f5x4 = _0x33f5x9['type'] === 'scroll' ? this['lastXY'] : _0x33f5x9['getXY'](), _0x33f5x1 = this['startXY'];
        if (!this['active']) {
            if (Math['max'](Math['abs'](_0x33f5x1[0] - _0x33f5x4[0]), Math['abs'](_0x33f5x1[1] - _0x33f5x4[1])) > this['tolerance']) {
                this['triggerStart'](_0x33f5x9);
            } else {
                return;
            }
        }
        var _0x33f5x2 = _0x33f5x4[0], _0x33f5x7 = _0x33f5x4[1];
        if (this['xStep'] > 1) {
            _0x33f5x2 -= this['startXY'][0];
            _0x33f5x2 = Math['round'](_0x33f5x2 / this['xStep']) * this['xStep'];
            _0x33f5x2 += this['startXY'][0];
        }
        if (this['yStep'] > 1) {
            _0x33f5x7 -= this['startXY'][1];
            _0x33f5x7 = Math['round'](_0x33f5x7 / this['yStep']) * this['yStep'];
            _0x33f5x7 += this['startXY'][1];
        }
        var _0x33f5x3 = this['xStep'] > 1 || this['yStep'] > 1;
        if (!_0x33f5x3 || _0x33f5x2 !== _0x33f5x4[0] || _0x33f5x7 !== _0x33f5x4[1]) {
            this['lastXY'] = [ _0x33f5x2, _0x33f5x7 ];
            if (this['fireEvent']('mousemove', this, _0x33f5x9) === false) {
                this['onMouseUp'](_0x33f5x9);
            } else {
                this['onDrag'](_0x33f5x9);
                this['fireEvent']('drag', this, _0x33f5x9);
            }
        }
    }
});

Ext.define('Ext.ux.Scheduler.tooltip.ClockTemplate', {
    extend: Ext.XTemplate,
    minuteHeight: 8,
    minuteTop: 2,
    hourHeight: 8,
    hourTop: 2,
    handLeft: 10,
    mode: 'hour',
    getRotateStyle: function(_0x33f5x2) {
        return 'transform:rotate(Ddeg);-ms-transform:rotate(Ddeg);-moz-transform: rotate(Ddeg);-webkit-transform: rotate(Ddeg);-o-transform:rotate(Ddeg);'['replace'](/D/g, _0x33f5x2);
    },
    getRotateStyleIE: function() {
        var _0x33f5x3 = Math['PI'] / 180, _0x33f5x1 = Math['cos'], _0x33f5x2 = Math['sin'];
        return function(_0x33f5x4, _0x33f5xe, _0x33f5xd) {
            var _0x33f5x9 = this, _0x33f5x7 = _0x33f5x4 * _0x33f5x3, _0x33f5x8 = _0x33f5x1(_0x33f5x7), _0x33f5x11 = _0x33f5x2(_0x33f5x7), _0x33f5xf = _0x33f5xd * _0x33f5x2((90 - _0x33f5x4) * _0x33f5x3), _0x33f5xb = _0x33f5xd * _0x33f5x1((90 - _0x33f5x4) * _0x33f5x3), _0x33f5xc = Math.min(_0x33f5xd, _0x33f5xd - _0x33f5xf), _0x33f5x5 = _0x33f5x4 > 180 ? _0x33f5xb : 0, _0x33f5xa = 'progid:DXImageTransform.Microsoft.Matrix(sizingMethod=\'auto expand\', M11 = ' + _0x33f5x8 + ', M12 = ' + -_0x33f5x11 + ', M21 = ' + _0x33f5x11 + ', M22 = ' + _0x33f5x8 + ')';
            return Ext.String['format']('filter:{0};-ms-filter:{0};top:{1}px;left:{2}px;', _0x33f5xa, _0x33f5xc + _0x33f5xe, _0x33f5x5 + _0x33f5x9['handLeft']);
        };
    }(),
    constructor: function() {
        var _0x33f5x2 = Ext['isIE'] && Ext['isIE8m'];
        this['callParent']([ '<div class="sch-clockwrap ' + (_0x33f5x2 ? '' : 'sch-supports-border-radius') + ' sch-clock-{[this.mode]}"><div class="sch-clock"><div class="sch-hourIndicator" style="{[this.getHourStyle((values.date.getHours() % 12) * 30,' + this['hourTop'] + ', + ' + this['hourHeight'] + ')]}">{[Ext.Date.monthNames[values.date.getMonth()].substr(0,3)]}</div><div class="sch-minuteIndicator" style="{[this.getMinuteStyle(values.date.getMinutes() * 6,' + this['minuteTop'] + ', + ' + this['minuteHeight'] + ')]}">{[values.date.getDate()]}</div>' + (_0x33f5x2 ? '' : '<div class="sch-clock-dot"></div>') + '</div><span class="sch-clock-text">{text}</span></div>', {
            getMinuteStyle: _0x33f5x2 ? this['getRotateStyleIE'] : this['getRotateStyle'],
            getHourStyle: _0x33f5x2 ? this['getRotateStyleIE'] : this['getRotateStyle']
        } ]);
    }
});

Ext.define('Ext.ux.Scheduler.tooltip.Tooltip', {
    extend: Ext.tip.ToolTip,
    autoHide: false,
    anchor: 'b',
    padding: '0 3 0 0',
    showDelay: 0,
    hideDelay: 0,
    quickShowInterval: 0,
    dismissDelay: 0,
    trackMouse: false,
    anchorOffset: 5,
    shadow: false,
    frame: false,
    schedulerView: null,
    message: null,
    startDate: null,
    endDate: null,
    template: null,
    valid: true,
    mode: null,
    offsetAdjust: [ 18, 5 ],
    constructor: function(_0x33f5x1) {
        var _0x33f5x2 = new Ext.ux.Scheduler.tooltip.ClockTemplate();
        this['startDate'] = this['endDate'] = new Date();
        if (!this['template']) {
            this['template'] = Ext.create('Ext.XTemplate', '<div class="sch-tip-{[values.valid ? "ok" : "notok"]}">{[this.renderClock(values.startDate, values.startText, "sch-tooltip-startdate")]}{[this.renderClock(values.endDate, values.endText, "sch-tooltip-enddate")]}<div class="sch-tip-message">{message}</div></div>', {
                disableFormats: true,
                renderClock: function(_0x33f5x4, _0x33f5x5, _0x33f5x3) {
                    return _0x33f5x2['apply']({
                        date: _0x33f5x4,
                        text: _0x33f5x5,
                        cls: _0x33f5x3
                    });
                }
            });
        }
        this['callParent'](arguments);
    },
    update: function(_0x33f5x2, _0x33f5x9, _0x33f5x8, _0x33f5x5) {
        if (this['startDate'] - _0x33f5x2 !== 0 || this['endDate'] - _0x33f5x9 !== 0 || this['valid'] !== _0x33f5x8 || this['message'] !== _0x33f5x5) {
            var _0x33f5x4 = this['message'] && !_0x33f5x5 || !this['message'] && _0x33f5x5;
            this['startDate'] = _0x33f5x2;
            this['endDate'] = _0x33f5x9;
            this['valid'] = _0x33f5x8;
            this['message'] = _0x33f5x5;
            var _0x33f5x3 = this['schedulerView']['getFormattedDate'](_0x33f5x2), _0x33f5x1 = this['schedulerView']['getFormattedEndDate'](_0x33f5x9, _0x33f5x2);
            if (this['mode'] === 'calendar' && _0x33f5x9['getHours']() === 0 && _0x33f5x9['getMinutes']() === 0 && !(_0x33f5x9['getYear']() === _0x33f5x2['getYear']() && _0x33f5x9['getMonth']() === _0x33f5x2['getMonth']() && _0x33f5x9['getDate']() === _0x33f5x2['getDate']())) {
                _0x33f5x9 = Ext.ux.Scheduler.util.Date.add(_0x33f5x9, Ext.ux.Scheduler.util.Date.DAY, -1);
            }
            this['callParent']([ this['template']['apply']({
                valid: _0x33f5x8,
                startDate: _0x33f5x2,
                endDate: _0x33f5x9,
                startText: _0x33f5x3,
                endText: _0x33f5x1,
                message: _0x33f5x5
            }) ]);
            if (_0x33f5x4) {
                this['realign']();
            }
        }
    },
    show: function(_0x33f5x1, _0x33f5x2) {
        if (!_0x33f5x1 || Ext.isArray(_0x33f5x1)) {
            return;
        }
        if (this['rendered'] === true) {
            this['setPosition'](0, 0);
        }
        if (Ext.ux.Scheduler.util.Date['compareUnits'](this['schedulerView']['getTimeResolution']()['unit'], Ext.ux.Scheduler.util.Date.DAY) >= 0) {
            this['mode'] = 'calendar';
            this['addCls']('sch-day-resolution');
            this['removeCls']('sch-hour-resolution');
        } else {
            this['mode'] = 'clock';
            this['removeCls']('sch-day-resolution');
            this['addCls']('sch-hour-resolution');
        }
        _0x33f5x2 = arguments['length'] > 1 ? _0x33f5x2 : this['offsetAdjust'][0];
        this['mouseOffsets'] = [ _0x33f5x2 - this['offsetAdjust'][0], -this['offsetAdjust'][1] ];
        this['setTarget'](_0x33f5x1);
        this['callParent']();
        this['realign']();
    },
    realign: function() {
        this['el']['alignTo'](this['target'], 'bl-tl', this['mouseOffsets']);
    },
    afterRender: function() {
        this['callParent'](arguments);
        this['el']['on']('mouseenter', this['realign'], this);
    }
});

Ext.define('Ext.ux.Scheduler.tooltip.HoverTip', {
    extend: Ext.tip.ToolTip,
    alias: 'widget.scheduler_hovertip',
    trackMouse: true,
    bodyCls: 'sch-hovertip',
    messageTpl: '<div class="sch-hovertip-msg">{message}</div>',
    autoHide: false,
    dismissDelay: 1e3,
    showDelay: 0,
    schedulerView: null,
    clockTpl: null,
    lastTime: null,
    lastResource: null,
    initComponent: function() {
        var _0x33f5x1 = this;
        var _0x33f5x2 = _0x33f5x1['schedulerView'];
        _0x33f5x1['clockTpl'] = new Ext.ux.Scheduler.tooltip.ClockTemplate();
        _0x33f5x1['messageTpl'] = new Ext.XTemplate(_0x33f5x1['messageTpl']);
        _0x33f5x1['callParent'](arguments);
        _0x33f5x1['on']('beforeshow', _0x33f5x1['tipOnBeforeShow'], _0x33f5x1);
        _0x33f5x2['mon'](_0x33f5x2['el'], {
            mouseleave: function() {
                _0x33f5x1['hide']();
            },
            mousemove: _0x33f5x1['handleMouseMove'],
            scope: _0x33f5x1
        });
        _0x33f5x2['mon'](_0x33f5x2['el'], {
            click: _0x33f5x1['onBodyMouseDown'],
            scope: _0x33f5x1,
            delay: 1
        });
    },
    onBodyMouseDown: function() {
        this['hide']();
    },
    handleMouseMove: function(_0x33f5x8) {
        var _0x33f5x3 = this;
        var _0x33f5x2 = _0x33f5x3['schedulerView'];
        if (_0x33f5x3['disabled']) {
            return;
        }
        if (_0x33f5x8['getTarget']('.' + _0x33f5x2['itemCls'], 5) && !_0x33f5x8['getTarget'](_0x33f5x2['eventSelector'])) {
            var _0x33f5x4 = _0x33f5x2['getDateFromDomEvent'](_0x33f5x8, 'floor');
            if (_0x33f5x4) {
                var _0x33f5x1 = _0x33f5x2['resolveResource'](_0x33f5x8['getTarget']());
                if (_0x33f5x4 - _0x33f5x3['lastTime'] !== 0 || _0x33f5x1 !== _0x33f5x3['lastResource']) {
                    _0x33f5x3['lastResource'] = _0x33f5x1;
                    if (_0x33f5x3['hidden']) {
                        if (Ext.ux.Scheduler.util.Date['compareUnits'](this['schedulerView']['getTimeResolution']()['unit'], Ext.ux.Scheduler.util.Date.DAY) >= 0) {
                            _0x33f5x3['clockTpl']['mode'] = 'day';
                        } else {
                            _0x33f5x3['clockTpl']['mode'] = 'hour';
                        }
                        _0x33f5x3['show']();
                    }
                    _0x33f5x3['updateHoverTip'](_0x33f5x4, _0x33f5x8);
                }
            } else {
                _0x33f5x3['hide']();
                _0x33f5x3['lastTime'] = null;
                _0x33f5x3['lastResource'] = null;
            }
        } else {
            _0x33f5x3['hide']();
            _0x33f5x3['lastTime'] = null;
            _0x33f5x3['lastResource'] = null;
        }
    },
    getText: function() {},
    updateHoverTip: function(_0x33f5x3, _0x33f5x4) {
        if (_0x33f5x3) {
            var _0x33f5x1 = this['clockTpl']['apply']({
                date: _0x33f5x3,
                text: this['schedulerView']['getFormattedDate'](_0x33f5x3)
            });
            var _0x33f5x2 = this['messageTpl']['apply']({
                message: this['getText'](_0x33f5x3, _0x33f5x4)
            });
            this['update'](_0x33f5x1 + _0x33f5x2);
            this['lastTime'] = _0x33f5x3;
        }
    },
    tipOnBeforeShow: function(_0x33f5x2) {
        return !this['disabled'] && this['lastTime'] !== null;
    }
});

Ext.define('Ext.ux.Scheduler.feature.DragCreator', {
    disabled: false,
    showHoverTip: true,
    showDragTip: true,
    dragTip: null,
    dragTolerance: 2,
    hoverTip: null,
    validatorFn: Ext.emptyFn,
    validatorFnScope: null,
    trackerConfig: null,
    schedulerView: null,
    template: '<div class="sch-dragcreator-proxy"><div class="sch-event-inner">&#160;</div></div>',
    constructor: function(_0x33f5x2) {
        Ext.apply(this, _0x33f5x2 || {});
        this['lastTime'] = new Date();
        if (!(this['template'] instanceof Ext['Template'])) {
            this['template'] = new Ext.Template(this['template']);
        }
        this['schedulerView']['on']('destroy', this['onSchedulerDestroy'], this);
        if (Ext['supports']['Touch']) {
            this['schedulerView']['on']('boxready', this['initDragTracker'], this);
        } else {
            this['schedulerView']['el']['on']('mousemove', this['initDragTracker'], this, {
                single: true
            });
        }
        this['callParent']([ _0x33f5x2 ]);
    },
    setDisabled: function(_0x33f5x2) {
        this['disabled'] = _0x33f5x2;
        if (this['hoverTip']) {
            this['hoverTip']['setDisabled'](_0x33f5x2);
        }
        if (this['dragTip']) {
            this['dragTip']['setDisabled'](_0x33f5x2);
        }
    },
    getProxy: function() {
        if (!this['proxy']) {
            this['proxy'] = this['template']['append'](this['schedulerView']['getSecondaryCanvasEl'](), {}, true);
            var _0x33f5x2 = this['schedulerView']['rtl'];
            this['proxy']['hide'] = function() {
                if (_0x33f5x2) {
                    this['setStyle']({
                        right: '-10000px',
                        top: '-10000px'
                    });
                } else {
                    this['setStyle']({
                        left: '-10000px',
                        top: '-10000px'
                    });
                }
            };
        }
        return this['proxy'];
    },
    onBeforeDragStart: function(_0x33f5x4, _0x33f5x9) {
        var _0x33f5x1 = this['schedulerView'], _0x33f5x2 = _0x33f5x9['getTarget']('.' + _0x33f5x1['timeCellCls'], 5);
        if (_0x33f5x2 && this['isCreateAllowed'](_0x33f5x9) && (!_0x33f5x9['event']['touches'] || _0x33f5x9['event']['touches']['length'] === 1)) {
            var _0x33f5x3 = _0x33f5x1['resolveResource'](_0x33f5x2);
            var _0x33f5x8 = _0x33f5x1['getDateFromDomEvent'](_0x33f5x9);
            if (!this['disabled'] && _0x33f5x2 && _0x33f5x1['fireEvent']('beforedragcreate', _0x33f5x1, _0x33f5x3, _0x33f5x8, _0x33f5x9) !== false) {
                this['resourceRecord'] = _0x33f5x3;
                this['originalStart'] = _0x33f5x8;
                this['resourceRegion'] = _0x33f5x1['getScheduleRegion'](this['resourceRecord'], this['originalStart']);
                this['dateConstraints'] = _0x33f5x1['getDateConstraints'](this['resourceRecord'], this['originalStart']);
                return true;
            }
        }
        return false;
    },
    isCreateAllowed: function(_0x33f5x2) {
        return !_0x33f5x2['getTarget'](this['schedulerView']['eventSelector']);
    },
    disableHoverTip: function() {
        this['hoverTip'] && this['hoverTip']['disable']();
    },
    onDragStart: function() {
        var _0x33f5x4 = this, _0x33f5x1 = _0x33f5x4['schedulerView'], _0x33f5x2 = _0x33f5x4['tracker']['getRegion'](), _0x33f5x3 = _0x33f5x4['getProxy']();
        this['dragging'] = true;
        if (this['hoverTip']) {
            this['hoverTip']['on']('enable', this['disableHoverTip'], this);
            this['hoverTip']['disable']();
        }
        _0x33f5x4['start'] = _0x33f5x4['originalStart'];
        _0x33f5x4['end'] = _0x33f5x4['start'];
        _0x33f5x4['originalScroll'] = _0x33f5x1['getScroll']();
        if (_0x33f5x1['getMode']() === 'horizontal') {
            _0x33f5x4['rowBoundaries'] = {
                top: _0x33f5x4['resourceRegion']['top'],
                bottom: _0x33f5x4['resourceRegion']['bottom']
            };
        } else {
            _0x33f5x4['rowBoundaries'] = {
                left: _0x33f5x4['resourceRegion']['left'],
                right: _0x33f5x4['resourceRegion']['right']
            };
        }
        Ext.apply(_0x33f5x2, _0x33f5x4['rowBoundaries']);
        if (_0x33f5x1['rtl']) {
            _0x33f5x3['setStyle']({
                right: 'auto'
            });
        }
        _0x33f5x3['setBox'](_0x33f5x2);
        _0x33f5x3['show']();
        _0x33f5x1['fireEvent']('dragcreatestart', _0x33f5x1, _0x33f5x3);
        if (_0x33f5x4['showDragTip']) {
            _0x33f5x4['dragTip']['enable']();
            _0x33f5x4['dragTip']['update'](_0x33f5x4['start'], _0x33f5x4['end'], true);
            _0x33f5x4['dragTip']['show'](_0x33f5x3);
            _0x33f5x4['dragTip']['setStyle']('visibility', 'visible');
        }
        Ext.ux.Scheduler.util.ScrollManager.activate(_0x33f5x1, _0x33f5x1['getMode']() === 'horizontal' ? 'horizontal' : 'vertical');
    },
    onDrag: function() {
        var _0x33f5x9 = this, _0x33f5x4 = _0x33f5x9['schedulerView'], _0x33f5x3 = _0x33f5x9['tracker']['getRegion'](), _0x33f5x7 = _0x33f5x4['getStartEndDatesFromRegion'](_0x33f5x3, 'round'), _0x33f5x8 = '';
        if (!_0x33f5x7) {
            return;
        }
        _0x33f5x9['start'] = _0x33f5x7['start'] || _0x33f5x9['start'];
        _0x33f5x9['end'] = _0x33f5x7['end'] || _0x33f5x9['end'];
        var _0x33f5x1 = _0x33f5x9['dateConstraints'];
        if (_0x33f5x1) {
            _0x33f5x9['end'] = Ext.ux.Scheduler.util.Date['constrain'](_0x33f5x9['end'], _0x33f5x1['start'], _0x33f5x1['end']);
            _0x33f5x9['start'] = Ext.ux.Scheduler.util.Date['constrain'](_0x33f5x9['start'], _0x33f5x1['start'], _0x33f5x1['end']);
        }
        _0x33f5x9['valid'] = this['validatorFn']['call'](_0x33f5x9['validatorFnScope'] || _0x33f5x9, _0x33f5x9['resourceRecord'], _0x33f5x9['start'], _0x33f5x9['end']);
        if (_0x33f5x9['valid'] && typeof _0x33f5x9['valid'] !== 'boolean') {
            _0x33f5x8 = _0x33f5x9['valid']['message'];
            _0x33f5x9['valid'] = _0x33f5x9['valid']['valid'];
        }
        _0x33f5x9['valid'] = _0x33f5x9['valid'] !== false;
        if (_0x33f5x9['showDragTip']) {
            _0x33f5x9['dragTip']['update'](_0x33f5x9['start'], _0x33f5x9['end'], _0x33f5x9['valid'], _0x33f5x8);
        }
        Ext.apply(_0x33f5x3, _0x33f5x9['rowBoundaries']);
        var _0x33f5x2 = _0x33f5x4['getScroll']();
        var _0x33f5x5 = this['getProxy']();
        _0x33f5x5['setBox'](_0x33f5x3);
        if (_0x33f5x4['isHorizontal']()) {
            _0x33f5x5['setY'](_0x33f5x9['resourceRegion']['top'] + _0x33f5x9['originalScroll']['top'] - _0x33f5x2['top']);
        }
    },
    eventSwallower: function(_0x33f5x2) {
        _0x33f5x2['stopPropagation']();
        _0x33f5x2['preventDefault']();
    },
    onDragEnd: function(_0x33f5x9, _0x33f5x7) {
        var _0x33f5x8 = this, _0x33f5x3 = _0x33f5x8['schedulerView'], _0x33f5x4 = true, _0x33f5x2 = _0x33f5x7['getTarget'](), _0x33f5x1 = Ext.get(_0x33f5x2);
        _0x33f5x1['on']('click', this['eventSwallower']);
        setTimeout(function() {
            _0x33f5x1['un']('click', _0x33f5x8['eventSwallower']);
        }, 100);
        _0x33f5x8['dragging'] = false;
        if (_0x33f5x8['showDragTip']) {
            _0x33f5x8['dragTip']['disable']();
        }
        if (!_0x33f5x8['start'] || !_0x33f5x8['end'] || _0x33f5x8['end'] - _0x33f5x8['start'] <= 0) {
            _0x33f5x8['valid'] = false;
        }
        _0x33f5x8['createContext'] = {
            start: _0x33f5x8['start'],
            end: _0x33f5x8['end'],
            resourceRecord: _0x33f5x8['resourceRecord'],
            e: _0x33f5x7,
            finalize: function() {
                _0x33f5x8['finalize']['apply'](_0x33f5x8, arguments);
            }
        };
        if (_0x33f5x8['valid']) {
            _0x33f5x4 = _0x33f5x3['fireEvent']('beforedragcreatefinalize', _0x33f5x8['schedulerView'], _0x33f5x8['createContext'], _0x33f5x7, this['getProxy']()) !== false;
        }
        if (_0x33f5x4) {
            _0x33f5x8['finalize'](_0x33f5x8['valid']);
        }
        Ext.ux.Scheduler.util.ScrollManager.deactivate();
    },
    finalize: function(_0x33f5x2) {
        var _0x33f5x1 = this['createContext'];
        var _0x33f5x4 = this['schedulerView'];
        if (_0x33f5x2) {
            var _0x33f5x3 = Ext.create(_0x33f5x4['getEventStore']()['getModel']());
            if (_0x33f5x3['setCalendar']) {
                _0x33f5x3['setCalendar'](_0x33f5x4['getEventStore']()['getCalendar']());
            }
            _0x33f5x3['setStartEndDate'](_0x33f5x1['start'], _0x33f5x1['end']);
            if (_0x33f5x3['setCalendar']) {
                _0x33f5x3['setCalendar'](null);
            }
            _0x33f5x4['fireEvent']('dragcreateend', _0x33f5x4, _0x33f5x3, _0x33f5x1['resourceRecord'], _0x33f5x1['e'], this['getProxy']());
        } else {
            this['proxy']['hide']();
        }
        this['schedulerView']['fireEvent']('afterdragcreate', _0x33f5x4, this['getProxy']());
        if (this['hoverTip']) {
            this['hoverTip']['un']('enable', this['disableHoverTip'], this);
            this['hoverTip']['enable']();
        }
    },
    dragging: false,
    initDragTracker: function() {
        var _0x33f5x4 = this, _0x33f5x1 = Ext['supports']['Touch'], _0x33f5x2 = _0x33f5x4['schedulerView'];
        var _0x33f5x3 = Ext.apply({
            el: _0x33f5x2['el'],
            rtl: _0x33f5x2['rtl'],
            deferredTouchActivation: _0x33f5x1 ? 1e3 : false,
            tolerance: _0x33f5x4['dragTolerance'],
            listeners: {
                mousedown: _0x33f5x4['verifyLeftButtonPressed'],
                beforedragstart: _0x33f5x4['onBeforeDragStart'],
                dragstart: _0x33f5x4['onDragStart'],
                drag: _0x33f5x4['onDrag'],
                dragend: _0x33f5x4['onDragEnd'],
                scope: _0x33f5x4
            }
        }, this['trackerConfig']);
        this['bindRightClickPreventer']();
        if (_0x33f5x1) {
            this['showDragTip'] = false;
            this['showHoverTip'] = false;
            this['dragTip'] = null;
            this['hoverTip'] = null;
        } else {
            this['setupTooltips']();
        }
        _0x33f5x4['tracker'] = new Ext.ux.Scheduler.util.DragTracker(_0x33f5x3);
    },
    bindRightClickPreventer: function() {
        var _0x33f5x2;
        if (Ext['isIE9m']) {
            _0x33f5x2 = 'mousedown';
        } else {
            _0x33f5x2 = 'contextmenu';
        }
        this['schedulerView']['el']['on'](_0x33f5x2, this['stopDragCreateOnRightClick'], this, {
            priority: 999
        });
    },
    stopDragCreateOnRightClick: function(_0x33f5x2) {
        if (_0x33f5x2['button'] !== 0 && this['dragging']) {
            this['tracker']['onMouseUp'](_0x33f5x2);
        }
    },
    setupTooltips: function() {
        var _0x33f5x3 = this, _0x33f5x2 = _0x33f5x3['schedulerView'];
        if (this['showDragTip']) {
            var _0x33f5x1 = this['dragTip'];
            if (_0x33f5x1 instanceof Ext.tip.ToolTip) {
                _0x33f5x1['schedulerView'] = _0x33f5x2;
                _0x33f5x1['on']('beforeshow', function() {
                    return _0x33f5x3['dragging'];
                });
            } else {
                this['dragTip'] = new Ext.ux.Scheduler.tooltip.Tooltip(Ext.apply({
                    cls: 'sch-dragcreate-tip',
                    schedulerView: _0x33f5x2,
                    listeners: {
                        beforeshow: function() {
                            return _0x33f5x3['dragging'];
                        }
                    }
                }, _0x33f5x1));
            }
        }
        if (_0x33f5x3['showHoverTip']) {
            var _0x33f5x4 = _0x33f5x3['hoverTip'];
            if (_0x33f5x4 instanceof Ext.tip.ToolTip) {
                _0x33f5x4['schedulerView'] = _0x33f5x2;
            } else {
                _0x33f5x3['hoverTip'] = Ext['ComponentManager']['create'](Ext.applyIf({
                    renderTo: Ext.getBody(),
                    target: _0x33f5x2['el'],
                    schedulerView: _0x33f5x2
                }, _0x33f5x4), 'scheduler_hovertip');
            }
        }
    },
    verifyLeftButtonPressed: function(_0x33f5x2, _0x33f5x1) {
        return _0x33f5x1['button'] === 0;
    },
    onSchedulerDestroy: function() {
        if (this['hoverTip']) {
            this['hoverTip']['destroy']();
        }
        if (this['dragTip']) {
            this['dragTip']['destroy']();
        }
        if (this['tracker']) {
            this['tracker']['destroy']();
        }
        if (this['proxy']) {
            Ext.destroy(this['proxy']);
            this['proxy'] = null;
        }
    }
});

Ext.define('Ext.ux.Scheduler.feature.SchedulerDragZone', {
    extend: Ext['dd']['DragZone'],
    repairHighlight: false,
    repairHighlightColor: 'transparent',
    containerScroll: false,
    showTooltip: true,
    tip: null,
    tipIsProcessed: false,
    deltaSetXY: null,
    schedulerView: null,
    lastXY: null,
    showExactDropPosition: false,
    enableCopy: false,
    enableCopyKey: 'SHIFT',
    validatorFn: function(_0x33f5x1, _0x33f5x2, _0x33f5x3, _0x33f5x8, _0x33f5x4) {
        return true;
    },
    validatorFnScope: null,
    copyKeyPressed: false,
    dragDropProxyCls: 'sch-dd-ref',
    constructor: function(_0x33f5x3, _0x33f5x2) {
        if (Ext['isIE8m'] && window['top'] !== window) {
            Ext['dd']['DragDropManager']['notifyOccluded'] = true;
        }
        var _0x33f5x1 = this['proxy'] = this['proxy'] || new Ext['dd'].StatusProxy({
            shadow: false,
            dropAllowed: this['dropAllowed'],
            dropNotAllowed: this['dropNotAllowed'],
            ensureAttachedToBody: Ext.emptyFn
        });
        this['callParent'](arguments);
        this['isTarget'] = true;
        this['scroll'] = false;
        this['ignoreSelf'] = false;
        var _0x33f5x4 = this['schedulerView'];
        if (_0x33f5x4['touchScroll']) {
            this['showTooltip'] = false;
        }
        _0x33f5x4['el']['appendChild'](_0x33f5x1['el']);
        this['bindRightClickPreventer']();
        _0x33f5x1['addCls']('sch-dragproxy');
        _0x33f5x4['on']({
            eventdragstart: function() {
                Ext.ux.Scheduler.util.ScrollManager.activate(_0x33f5x4, _0x33f5x4['constrainDragToResource'] && _0x33f5x4['getMode']());
            },
            aftereventdrop: function() {
                Ext.ux.Scheduler.util.ScrollManager.deactivate();
            },
            scope: this
        });
    },
    bindRightClickPreventer: function() {
        var _0x33f5x2;
        if (Ext['isIE10']) {
            _0x33f5x2 = 'contextmenu';
        } else {
            _0x33f5x2 = 'mousedown';
        }
        this['schedulerView']['el']['on'](_0x33f5x2, this['preventRightClick'], this, {
            priority: 999
        });
    },
    destroy: function() {
        this['callParent'](arguments);
        Ext.destroyMembers(this, 'tip');
    },
    preventRightClick: function(_0x33f5x2) {
        if (this['dragging'] && _0x33f5x2['button'] !== 0) {
            _0x33f5x2['stopEvent']();
            return false;
        }
    },
    autoOffset: function() {
        this['setDelta'](0, 0);
    },
    setupConstraints: function(_0x33f5xb, _0x33f5x4, _0x33f5x9, _0x33f5x5, _0x33f5xf, _0x33f5x8, _0x33f5x3) {
        this['clearTicks']();
        var _0x33f5x2 = _0x33f5xf && !this['showExactDropPosition'] && _0x33f5x8 > 1 ? _0x33f5x8 : 0;
        var _0x33f5x7 = !_0x33f5xf && !this['showExactDropPosition'] && _0x33f5x8 > 1 ? _0x33f5x8 : 0;
        this['resetConstraints']();
        this['initPageX'] = _0x33f5xb['left'] + _0x33f5x9;
        this['initPageY'] = _0x33f5xb['top'] + _0x33f5x5;
        var _0x33f5x1 = _0x33f5x4['right'] - _0x33f5x4['left'];
        var _0x33f5xe = _0x33f5x4['bottom'] - _0x33f5x4['top'];
        if (_0x33f5xf) {
            if (_0x33f5x3) {
                this['setXConstraint'](_0x33f5xb['left'] + _0x33f5x9, _0x33f5xb['right'] - _0x33f5x1 + _0x33f5x9, _0x33f5x2);
            } else {
                this['setXConstraint'](_0x33f5xb['left'], _0x33f5xb['right'], _0x33f5x2);
            }
            this['setYConstraint'](_0x33f5xb['top'] + _0x33f5x5, _0x33f5xb['bottom'] - _0x33f5xe + _0x33f5x5, _0x33f5x7);
        } else {
            this['setXConstraint'](_0x33f5xb['left'] + _0x33f5x9, _0x33f5xb['right'] - _0x33f5x1 + _0x33f5x9, _0x33f5x2);
            if (_0x33f5x3) {
                this['setYConstraint'](_0x33f5xb['top'] + _0x33f5x5, _0x33f5xb['bottom'] - _0x33f5xe + _0x33f5x5, _0x33f5x7);
            } else {
                this['setYConstraint'](_0x33f5xb['top'], _0x33f5xb['bottom'], _0x33f5x7);
            }
        }
    },
    setXConstraint: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
        this['leftConstraint'] = _0x33f5x3;
        this['rightConstraint'] = _0x33f5x1;
        this['minX'] = _0x33f5x3;
        this['maxX'] = _0x33f5x1;
        if (_0x33f5x2) {
            this['setXTicks'](this['initPageX'], _0x33f5x2);
        }
        this['constrainX'] = true;
    },
    setYConstraint: function(_0x33f5x2, _0x33f5x3, _0x33f5x1) {
        this['topConstraint'] = _0x33f5x2;
        this['bottomConstraint'] = _0x33f5x3;
        this['minY'] = _0x33f5x2;
        this['maxY'] = _0x33f5x3;
        if (_0x33f5x1) {
            this['setYTicks'](this['initPageY'], _0x33f5x1);
        }
        this['constrainY'] = true;
    },
    onDragEnter: Ext.emptyFn,
    onDragOut: Ext.emptyFn,
    setVisibilityForSourceEvents: function(_0x33f5x2) {
        Ext.Array['each'](this['dragData']['getEventBarElements'](), function(_0x33f5x1) {
            _0x33f5x1[_0x33f5x2 ? 'show' : 'hide']();
        });
    },
    onDragOver: function(_0x33f5x9) {
        if (_0x33f5x9 && _0x33f5x9['event']['touches'] && _0x33f5x9['event']['touches']['length'] > 1) {
            Ext['dd']['DragDropManager']['handleMouseUp'](_0x33f5x9);
            return;
        }
        var _0x33f5x11 = _0x33f5x9 ? _0x33f5x9['getXY']() : this['lastXY'];
        if (!_0x33f5x11) {
            return;
        }
        this['checkShiftChange']();
        var _0x33f5xb = this['dragData'];
        if (!_0x33f5xb['originalHidden']) {
            this['setVisibilityForSourceEvents'](false);
            _0x33f5xb['originalHidden'] = true;
        }
        var _0x33f5x1 = _0x33f5xb['startDate'];
        var _0x33f5x4 = _0x33f5xb['newResource'];
        var _0x33f5x7 = this['schedulerView'];
        this['updateDragContext'](_0x33f5x9);
        if (this['showExactDropPosition']) {
            var _0x33f5xf = _0x33f5x7['isHorizontal']();
            var _0x33f5x2 = _0x33f5x7['getDateFromCoordinate'](_0x33f5xf ? _0x33f5x11[0] : _0x33f5x11[1]) - _0x33f5xb['sourceDate'];
            var _0x33f5xe = new Date(_0x33f5xb['origStart'] - 0 + _0x33f5x2);
            var _0x33f5x8 = _0x33f5x7['timeAxisViewModel']['getDistanceBetweenDates'](_0x33f5xe, _0x33f5xb['startDate']);
            if (_0x33f5xb['startDate'] > _0x33f5x7['timeAxis']['getStart']()) {
                var _0x33f5x3 = this['proxy']['el'];
                if (_0x33f5x8) {
                    if (_0x33f5x7['isHorizontal']()) {
                        _0x33f5x3['setX'](_0x33f5x11[0] + (this['schedulerView']['rtl'] ? -_0x33f5x8 : _0x33f5x8));
                    } else {
                        _0x33f5x3['setY'](_0x33f5x11[1] + _0x33f5x8);
                    }
                }
            }
        }
        if (_0x33f5xb['startDate'] - _0x33f5x1 !== 0 || _0x33f5x4 !== _0x33f5xb['newResource']) {
            this['schedulerView']['fireEvent']('eventdrag', this['schedulerView'], _0x33f5xb['draggedRecords'], _0x33f5xb['startDate'], _0x33f5xb['newResource'], _0x33f5xb);
        }
        if (this['showTooltip']) {
            this['tip']['realign']();
            this['tip']['update'](_0x33f5xb['startDate'], _0x33f5xb['endDate'], _0x33f5xb['valid'], _0x33f5xb['message']);
        }
        if (_0x33f5x9) {
            this['lastXY'] = _0x33f5x9['getXY']();
        }
    },
    getCoordinate: function(_0x33f5x2) {
        switch (this['schedulerView']['getMode']()) {
          case 'horizontal':
            return _0x33f5x2[0];

          case 'vertical':
            return _0x33f5x2[1];

          case 'calendar':
            return _0x33f5x2;
        }
    },
    getDragData: function(_0x33f5x10) {
        var _0x33f5x6 = this['schedulerView'], _0x33f5xa = _0x33f5x10['getTarget'](_0x33f5x6['eventSelector']);
        if (!_0x33f5xa || _0x33f5x10['event']['touches'] && _0x33f5x10['event']['touches']['length'] > 1) {
            return;
        }
        var _0x33f5xe = _0x33f5x6['resolveEventRecord'](_0x33f5xa), _0x33f5xc = _0x33f5x6['resolveResource'](_0x33f5xa), _0x33f5x8 = _0x33f5x6['resolveAssignmentRecord'](_0x33f5xa);
        if (!_0x33f5xe || _0x33f5xe['isDraggable']() === false || _0x33f5x6['fireEvent']('beforeeventdrag', _0x33f5x6, _0x33f5xe, _0x33f5x10) === false) {
            return null;
        }
        var _0x33f5x7 = _0x33f5x10['getXY'](), _0x33f5x2 = Ext.get(_0x33f5xa), _0x33f5x12 = _0x33f5x2['getXY'](), _0x33f5xf = [ _0x33f5x7[0] - _0x33f5x12[0], _0x33f5x7[1] - _0x33f5x12[1] ], _0x33f5x11 = _0x33f5x2['getRegion']();
        this['lastXY'] = null;
        var _0x33f5xb = _0x33f5x6['getMode']() === 'horizontal';
        _0x33f5x6['constrainDragToResource'] && !_0x33f5xc && Ext['Error']['raise']('Resource could not be resolved for event: ' + _0x33f5xe['getId']());
        var _0x33f5x17 = _0x33f5x6['getDateConstraints'](_0x33f5x6['constrainDragToResource'] ? _0x33f5xc : null, _0x33f5xe);
        this['setupConstraints'](_0x33f5x6['getScheduleRegion'](_0x33f5x6['constrainDragToResource'] ? _0x33f5xc : null, _0x33f5xe), _0x33f5x11, _0x33f5xf[0], _0x33f5xf[1], _0x33f5xb, _0x33f5x6['getSnapPixelAmount'](), Boolean(_0x33f5x17));
        var _0x33f5x1 = _0x33f5xe['getStartDate'](), _0x33f5xd = _0x33f5xe['getEndDate'](), _0x33f5x3 = _0x33f5x6['timeAxis'], _0x33f5x9 = this['getRelatedRecords'](_0x33f5x8 || _0x33f5xe) || [], _0x33f5x13 = _0x33f5x6['getElementsFromEventRecord'](_0x33f5xe, _0x33f5x6['isCalendar']() ? null : _0x33f5xc);
        Ext.Array['each'](_0x33f5x9, function(_0x33f5x5) {
            if (_0x33f5x5 instanceof Ext.ux.Scheduler.model.Assignment) {
                _0x33f5x13 = _0x33f5x13['concat'](_0x33f5x6['getElementsFromEventRecord'](_0x33f5x5['getEvent'](), _0x33f5x5['getResource']()));
            } else {
                _0x33f5x13 = _0x33f5x13['concat'](_0x33f5x6['getElementsFromEventRecord'](_0x33f5x5));
            }
        });
        _0x33f5x13 = Ext.Array['unique'](_0x33f5x13);
        var _0x33f5x4 = {
            offsets: _0x33f5xf,
            repairXY: _0x33f5x12,
            prevScroll: _0x33f5x6['getScroll'](),
            dateConstraints: _0x33f5x17,
            eventBarEls: _0x33f5x13,
            getEventBarElements: function() {
                return _0x33f5x4['eventBarEls'] = Ext.Array.map(_0x33f5x4['eventBarEls'], function(_0x33f5x5) {
                    return _0x33f5x5['dom'] && _0x33f5x5 || Ext.get(_0x33f5x5['id']);
                });
            },
            draggedRecords: [ _0x33f5x8 || _0x33f5xe ]['concat'](_0x33f5x9),
            resourceRecord: _0x33f5xc,
            sourceDate: _0x33f5x6['getDateFromCoordinate'](this['getCoordinate'](_0x33f5x7)),
            origStart: _0x33f5x1,
            origEnd: _0x33f5xd,
            startDate: _0x33f5x1,
            endDate: _0x33f5xd,
            timeDiff: 0,
            startsOutsideView: _0x33f5x1 < _0x33f5x3['getStart'](),
            endsOutsideView: _0x33f5xd > _0x33f5x3['getEnd'](),
            duration: _0x33f5xd - _0x33f5x1,
            bodyScroll: Ext.getBody()['getScroll'](),
            eventObj: _0x33f5x10
        };
        _0x33f5x4['ddel'] = this['getDragElement'](_0x33f5x2, _0x33f5x4);
        return _0x33f5x4;
    },
    onStartDrag: function() {
        var _0x33f5x1 = this['schedulerView'], _0x33f5x2 = this['dragData'];
        Ext.Array['each'](_0x33f5x2['getEventBarElements'](), function(_0x33f5x3) {
            _0x33f5x3['removeCls']('sch-event-hover');
        });
        _0x33f5x1['fireEvent']('eventdragstart', _0x33f5x1, _0x33f5x2['draggedRecords']);
        _0x33f5x1['getScrollable']()['on']('scroll', this['onViewScroll'], this);
    },
    alignElWithMouse: function(_0x33f5x1, _0x33f5x5, _0x33f5x4) {
        this['callParent'](arguments);
        var _0x33f5x3 = this['getTargetCoord'](_0x33f5x5, _0x33f5x4), _0x33f5x2 = _0x33f5x1['dom'] ? _0x33f5x1 : Ext.fly(_0x33f5x1, '_dd');
        this['setLocalXY'](_0x33f5x2, _0x33f5x3['x'] + this['deltaSetXY'][0], _0x33f5x3['y'] + this['deltaSetXY'][1]);
    },
    onViewScroll: function(_0x33f5x8, _0x33f5x1, _0x33f5x5) {
        var _0x33f5x4 = this['proxy'], _0x33f5xf = this['schedulerView'], _0x33f5x9 = this['dragData'];
        this['setVisibilityForSourceEvents'](false);
        var _0x33f5x7 = _0x33f5x4['getXY']();
        var _0x33f5x3;
        if (_0x33f5xf['rtl']) {
            _0x33f5x3 = [ _0x33f5x7[0] - _0x33f5x1 + _0x33f5x9['prevScroll']['left'], _0x33f5x7[1] + _0x33f5x5 - _0x33f5x9['prevScroll']['top'] ];
        } else {
            _0x33f5x3 = [ _0x33f5x7[0] + _0x33f5x1 - _0x33f5x9['prevScroll']['left'], _0x33f5x7[1] + _0x33f5x5 - _0x33f5x9['prevScroll']['top'] ];
        }
        var _0x33f5x2 = this['deltaSetXY'];
        if (_0x33f5xf['rtl']) {
            this['deltaSetXY'] = [ _0x33f5x2[0] - _0x33f5x1 + _0x33f5x9['prevScroll']['left'], _0x33f5x2[1] + _0x33f5x5 - _0x33f5x9['prevScroll']['top'] ];
        } else {
            this['deltaSetXY'] = [ _0x33f5x2[0] + _0x33f5x1 - _0x33f5x9['prevScroll']['left'], _0x33f5x2[1] + _0x33f5x5 - _0x33f5x9['prevScroll']['top'] ];
        }
        _0x33f5x9['prevScroll'] = {
            left: _0x33f5x1,
            top: _0x33f5x5
        };
        _0x33f5x4['setXY'](_0x33f5x3);
        this['onDragOver']();
    },
    getCopyKeyPressed: function() {
        return Boolean(this['enableCopy'] && this['dragData']['eventObj'][this['enableCopyKey']['toLowerCase']() + 'Key']);
    },
    checkShiftChange: function() {
        var _0x33f5x1 = this['getCopyKeyPressed'](), _0x33f5x2 = this['dragData'];
        if (_0x33f5x1 !== this['copyKeyPressed']) {
            this['copyKeyPressed'] = _0x33f5x1;
            if (_0x33f5x1) {
                _0x33f5x2['refElements']['addCls']('sch-event-copy');
                this['setVisibilityForSourceEvents'](true);
            } else {
                _0x33f5x2['refElements']['removeCls']('sch-event-copy');
                this['setVisibilityForSourceEvents'](false);
            }
        }
    },
    onKey: function(_0x33f5x2) {
        if (this['enableCopy'] && _0x33f5x2['getKey']() === _0x33f5x2[this['enableCopyKey']]) {
            this['checkShiftChange']();
        }
        if (_0x33f5x2['getKey']() === _0x33f5x2['ESC']) {
            this['dragData']['ddCallbackArgs'] = [ _0x33f5x2['getTarget'](), _0x33f5x2, this['id'] ];
            this['finalize'](false);
            Ext['dd']['DragDropManager']['stopDrag'](_0x33f5x2);
            Ext['dd']['DragDropManager']['stopEvent'](_0x33f5x2);
        }
    },
    startDrag: function() {
        Ext['getDoc']()['on']({
            keydown: this['onKey'],
            keyup: this['onKey'],
            useCapture: true,
            scope: this
        });
        var _0x33f5x5 = this['callParent'](arguments);
        var _0x33f5x4 = this['dragData'];
        _0x33f5x4['refElement'] = this['proxy']['el']['down']('.' + this['dragDropProxyCls']);
        _0x33f5x4['refElements'] = this['proxy']['el']['select']('.sch-event');
        _0x33f5x4['refElement']['removeCls']('sch-event-hover');
        if (this['showTooltip']) {
            var _0x33f5x2 = this['schedulerView'], _0x33f5x3 = _0x33f5x2['up']('[lockable=true]')['el'];
            if (!this['tipIsProcessed']) {
                this['tipIsProcessed'] = true;
                var _0x33f5x1 = this['tip'];
                if (_0x33f5x1 instanceof Ext.tip.ToolTip) {
                    _0x33f5x1['schedulerView'] = _0x33f5x2;
                } else {
                    this['tip'] = new Ext.ux.Scheduler.tooltip.Tooltip(Ext.apply({
                        schedulerView: _0x33f5x2,
                        cls: 'sch-dragdrop-tip',
                        constrainTo: _0x33f5x3
                    }, _0x33f5x1));
                }
            }
            this['tip']['update'](_0x33f5x4['origStart'], _0x33f5x4['origEnd'], true);
            this['tip']['setStyle']('visibility');
            this['tip']['show'](_0x33f5x4['refElement'], _0x33f5x4['offsets'][0]);
        }
        this['copyKeyPressed'] = this['getCopyKeyPressed']();
        if (this['copyKeyPressed']) {
            _0x33f5x4['refElements']['addCls']('sch-event-copy');
            _0x33f5x4['originalHidden'] = true;
        }
        return _0x33f5x5;
    },
    endDrag: function() {
        this['schedulerView']['getScrollable']()['un']('scroll', this['onViewScroll'], this);
        Ext['getDoc']()['un']({
            keydown: this['onKey'],
            keyup: this['onKey'],
            useCapture: true,
            scope: this
        });
        this['callParent'](arguments);
    },
    onMouseUp: function() {
        if (!this['dragging']) {
            this['afterDragFinalized']();
        }
    },
    afterDragFinalized: function() {
        this['proxy']['el']['setStyle']({
            left: 0,
            top: 0
        });
    },
    updateRecords: function(_0x33f5x3) {
        var _0x33f5xb = this, _0x33f5x11 = _0x33f5xb['schedulerView'], _0x33f5x8 = _0x33f5x11['getEventStore'](), _0x33f5xd = _0x33f5x11['getResourceStore'](), _0x33f5xf = _0x33f5x8['getAssignmentStore'](), _0x33f5x9 = _0x33f5x3['newResource'], _0x33f5x7 = _0x33f5x3['draggedRecords'][0], _0x33f5x1 = _0x33f5x3['draggedRecords']['slice'](1), _0x33f5xe = _0x33f5x3['resourceRecord'], _0x33f5xc = _0x33f5xb['getCopyKeyPressed'](), _0x33f5x4 = _0x33f5x3['startDate'], _0x33f5x2 = _0x33f5x3['timeDiff'], _0x33f5x5 = _0x33f5x11['getMode']();
        if (_0x33f5xf && _0x33f5x8 instanceof Ext.ux.Scheduler.data['EventStore']) {
            _0x33f5xb['updateRecordsMultipleAssignmentMode'](_0x33f5x4, _0x33f5x2, _0x33f5x7, _0x33f5x1, _0x33f5xe, _0x33f5x9, _0x33f5x8, _0x33f5xd, _0x33f5xf, _0x33f5xc, _0x33f5x5);
        } else {
            if (_0x33f5xf) {
                _0x33f5xb['updateRecordsSingleAssignmentMode'](_0x33f5x4, _0x33f5x2, _0x33f5x7['getEvent'](), Ext.Array.map(_0x33f5x1, function(_0x33f5xa) {
                    return _0x33f5xa['getEvent']();
                }), _0x33f5xe, _0x33f5x9, _0x33f5x8, _0x33f5xd, _0x33f5xc, _0x33f5x5);
            } else {
                _0x33f5xb['updateRecordsSingleAssignmentMode'](_0x33f5x4, _0x33f5x2, _0x33f5x7, _0x33f5x1, _0x33f5xe, _0x33f5x9, _0x33f5x8, _0x33f5xd, _0x33f5xc, _0x33f5x5);
            }
        }
        _0x33f5x11['fireEvent']('eventdrop', _0x33f5x11, _0x33f5x3['draggedRecords'], _0x33f5xc);
    },
    updateRecordsSingleAssignmentMode: function(_0x33f5x3, _0x33f5x1, _0x33f5x11, _0x33f5xf, _0x33f5x5, _0x33f5xe, _0x33f5x8, _0x33f5xb, _0x33f5x2, _0x33f5x4) {
        var _0x33f5x7 = this, _0x33f5xc = [];
        if (_0x33f5x2) {
            _0x33f5x11 = _0x33f5x11['fullCopy'](null);
            _0x33f5xc['push'](_0x33f5x11);
        }
        _0x33f5x11['beginEdit']();
        if (!_0x33f5x2 && _0x33f5xe !== _0x33f5x5 && _0x33f5x5 instanceof Ext.ux.Scheduler.model.Resource && _0x33f5xe instanceof Ext.ux.Scheduler.model.Resource) {
            _0x33f5x11['reassign'](_0x33f5x5, _0x33f5xe);
        } else {
            if (_0x33f5xe !== _0x33f5x5 && _0x33f5x5 instanceof Ext.ux.Scheduler.model.Resource && _0x33f5xe instanceof Ext.ux.Scheduler.model.Resource) {
                _0x33f5x11['assign'](_0x33f5xe);
            }
        }
        _0x33f5x11['setStartDate'](_0x33f5x3, true, _0x33f5x8['skipWeekendsDuringDragDrop']);
        _0x33f5x11['endEdit']();
        if (_0x33f5x4 !== 'calendar') {
            var _0x33f5x9 = _0x33f5xb['indexOf'](_0x33f5x5) - _0x33f5xb['indexOf'](_0x33f5xe);
            Ext.Array['each'](_0x33f5xf, function(_0x33f5xa) {
                var _0x33f5xd = _0x33f5xa['getResources']();
                if (_0x33f5x2) {
                    _0x33f5xa = _0x33f5xa['fullCopy'](null);
                    _0x33f5xc['push'](_0x33f5xa);
                }
                _0x33f5xa['beginEdit']();
                _0x33f5xa['setStartDate'](_0x33f5x7['adjustStartDate'](_0x33f5xa['getStartDate'](), _0x33f5x1), true, _0x33f5x8['skipWeekendsDuringDragDrop']);
                _0x33f5x9 !== 0 && _0x33f5xd['length'] && Ext.Array['each'](_0x33f5xd, function(_0x33f5x15) {
                    var _0x33f5x10 = _0x33f5xb['indexOf'](_0x33f5x15) - _0x33f5x9, _0x33f5x6;
                    if (_0x33f5x10 < 0) {
                        _0x33f5x10 = 0;
                    } else {
                        if (_0x33f5x10 >= _0x33f5xb['getCount']()) {
                            _0x33f5x10 = _0x33f5xb['getCount']() - 1;
                        }
                    }
                    _0x33f5x6 = _0x33f5xb['getAt'](_0x33f5x10);
                    _0x33f5xa['reassign'](_0x33f5x15, _0x33f5x6);
                });
                _0x33f5xa['endEdit']();
            });
        }
        if (_0x33f5xc['length']) {
            _0x33f5x8['append'](_0x33f5xc);
        }
    },
    updateRecordsMultipleAssignmentMode: function(_0x33f5x3, _0x33f5x1, _0x33f5x7, _0x33f5x11, _0x33f5x5, _0x33f5xe, _0x33f5x8, _0x33f5xb, _0x33f5x9, _0x33f5x2, _0x33f5x4) {
        var _0x33f5xf = this;
        Ext.Array['each']([]['concat'](_0x33f5x7, _0x33f5x11), function(_0x33f5xd) {
            var _0x33f5xc = _0x33f5xd['getEvent']();
            _0x33f5xc['setStartDate'](_0x33f5xf['adjustStartDate'](_0x33f5xc['getStartDate'](), _0x33f5x1), true, _0x33f5x8['skipWeekendsDuringDragDrop']);
            if (_0x33f5x4 != 'calendar' && _0x33f5x5 !== _0x33f5xe) {
                if (_0x33f5x2) {
                    _0x33f5xc['assign'](_0x33f5xe);
                } else {
                    if (!_0x33f5xc['isAssignedTo'](_0x33f5xe)) {
                        _0x33f5xc['reassign'](_0x33f5xd['getResource'](), _0x33f5xe);
                    } else {
                        _0x33f5xc['unassign'](_0x33f5xd['getResource']());
                    }
                }
            }
        });
    },
    isValidDrop: function(_0x33f5x2, _0x33f5x1, _0x33f5x3) {
        if (_0x33f5x2 !== _0x33f5x1) {
            if (_0x33f5x3 instanceof Ext.ux.Scheduler.model.Assignment) {
                return !_0x33f5x3['getEvent']()['isAssignedTo'](_0x33f5x1);
            } else {
                return !_0x33f5x3['isAssignedTo'](_0x33f5x1);
            }
        }
        return true;
    },
    resolveResource: function(_0x33f5x5) {
        var _0x33f5x3 = this['proxy']['el']['dom'];
        var _0x33f5x8 = this['dragData']['bodyScroll'];
        _0x33f5x3['style']['display'] = 'none';
        var _0x33f5x4 = document['elementFromPoint'](_0x33f5x5[0] - _0x33f5x8['left'], _0x33f5x5[1] - _0x33f5x8['top']);
        if (Ext['isIE8'] && window['top']['Siesta']) {
            _0x33f5x4 = document['elementFromPoint'](_0x33f5x5[0] - _0x33f5x8['left'], _0x33f5x5[1] - _0x33f5x8['top']);
        }
        _0x33f5x3['style']['display'] = 'block';
        if (!_0x33f5x4) {
            return null;
        }
        var _0x33f5x2 = this['schedulerView'];
        if (_0x33f5x4['className']['match'](Ext['baseCSSPrefix'] + 'grid-item')) {
            return this['resolveResource']([ _0x33f5x5[0], _0x33f5x5[1] + 3 ]);
        }
        if (!_0x33f5x4['className']['match'](_0x33f5x2['timeCellCls'])) {
            var _0x33f5x1 = Ext.fly(_0x33f5x4)['up']('.' + _0x33f5x2['timeCellCls']);
            if (_0x33f5x1) {
                _0x33f5x4 = _0x33f5x1['dom'];
            } else {
                return null;
            }
        }
        return _0x33f5x2['resolveResource'](_0x33f5x4);
    },
    adjustStartDate: function(_0x33f5x2, _0x33f5x3) {
        var _0x33f5x1 = this['schedulerView'];
        return _0x33f5x1['timeAxis']['roundDate'](new Date(_0x33f5x2 - 0 + _0x33f5x3), _0x33f5x1['snapRelativeToEventStartDate'] ? _0x33f5x2 : false);
    },
    updateDragContext: function(_0x33f5x7) {
        var _0x33f5x1 = this['dragData'], _0x33f5x9 = _0x33f5x7 ? _0x33f5x7['getXY']() : this['lastXY'];
        if (!_0x33f5x1['refElement']) {
            return;
        }
        var _0x33f5x8 = this['schedulerView'], _0x33f5xf = _0x33f5x1['refElement']['getRegion']();
        if (_0x33f5x8['timeAxis']['isContinuous']()) {
            if (_0x33f5x8['isHorizontal']() && this['minX'] < _0x33f5x9[0] && _0x33f5x9[0] < this['maxX'] || !_0x33f5x8['isHorizontal']() && this['minY'] < _0x33f5x9[1] && _0x33f5x9[1] < this['maxY']) {
                var _0x33f5x3 = _0x33f5x8['getDateFromCoordinate'](this['getCoordinate'](_0x33f5x9));
                _0x33f5x1['timeDiff'] = _0x33f5x3 - _0x33f5x1['sourceDate'];
                _0x33f5x1['startDate'] = this['adjustStartDate'](_0x33f5x1['origStart'], _0x33f5x1['timeDiff']);
                _0x33f5x1['endDate'] = new Date(_0x33f5x1['startDate'] - 0 + _0x33f5x1['duration']);
            }
        } else {
            var _0x33f5x4 = this['resolveStartEndDates'](_0x33f5xf);
            _0x33f5x1['startDate'] = _0x33f5x4['startDate'];
            _0x33f5x1['endDate'] = _0x33f5x4['endDate'];
            _0x33f5x1['timeDiff'] = _0x33f5x1['startDate'] - _0x33f5x1['origStart'];
        }
        _0x33f5x1['newResource'] = _0x33f5x8['constrainDragToResource'] ? _0x33f5x1['resourceRecord'] : this['resolveResource']([ _0x33f5xf['left'] + _0x33f5x1['offsets'][0], _0x33f5xf['top'] + _0x33f5x1['offsets'][1] ]);
        if (_0x33f5x1['newResource']) {
            var _0x33f5x2 = !_0x33f5x7 || this['validatorFn']['call'](this['validatorFnScope'] || this, _0x33f5x1['draggedRecords'], _0x33f5x1['newResource'], _0x33f5x1['startDate'], _0x33f5x1['duration'], _0x33f5x7);
            if (!_0x33f5x2 || typeof _0x33f5x2 === 'boolean') {
                _0x33f5x1['valid'] = _0x33f5x2 !== false;
                _0x33f5x1['message'] = '';
            } else {
                _0x33f5x1['valid'] = _0x33f5x2['valid'] !== false;
                _0x33f5x1['message'] = _0x33f5x2['message'];
            }
        } else {
            _0x33f5x1['valid'] = false;
        }
    },
    getRelatedRecords: function(_0x33f5x3) {
        var _0x33f5x1 = this['schedulerView'], _0x33f5x4 = _0x33f5x1['getEventSelectionModel'](), _0x33f5x2 = _0x33f5x4['getDraggableSelections']();
        return Ext.Array['filter'](_0x33f5x2, function(_0x33f5x5) {
            return _0x33f5x3 !== _0x33f5x5;
        });
    },
    getDragElement: function(_0x33f5x1, _0x33f5x5) {
        var _0x33f5x7 = _0x33f5x5['getEventBarElements']();
        var _0x33f5x9;
        var _0x33f5x4;
        var _0x33f5x2 = _0x33f5x5['offsets'][0];
        var _0x33f5x8 = _0x33f5x5['offsets'][1];
        if (_0x33f5x7['length'] > 1) {
            var _0x33f5x3 = Ext['core']['DomHelper']['createDom']({
                tag: 'div',
                cls: 'sch-dd-wrap',
                style: {
                    overflow: 'visible'
                }
            });
            Ext.Array['each'](_0x33f5x7, function(_0x33f5xe) {
                _0x33f5x9 = _0x33f5xe['dom']['cloneNode'](true);
                _0x33f5x9['id'] = Ext['id']();
                if (_0x33f5xe['dom'] === _0x33f5x1['dom']) {
                    _0x33f5x9['className'] += ' ' + this['dragDropProxyCls'];
                    if (Ext['isIE8']) {
                        Ext.fly(_0x33f5x9)['addCls'](this['dragDropProxyCls']);
                    }
                }
                _0x33f5x3['appendChild'](_0x33f5x9);
                var _0x33f5xf = _0x33f5xe['getOffsetsTo'](_0x33f5x1);
                Ext.fly(_0x33f5x9)['setStyle']({
                    left: _0x33f5xf[0] - _0x33f5x2 + 'px',
                    top: _0x33f5xf[1] - _0x33f5x8 + 'px'
                });
            }, this);
            _0x33f5x4 = _0x33f5x3;
        } else {
            _0x33f5x9 = _0x33f5x1['dom']['cloneNode'](true);
            _0x33f5x9['id'] = Ext['id']();
            _0x33f5x9['style']['left'] = -_0x33f5x2 + 'px';
            _0x33f5x9['style']['top'] = -_0x33f5x8 + 'px';
            _0x33f5x9['className'] += ' ' + this['dragDropProxyCls'];
            if (Ext['isIE8']) {
                Ext.fly(_0x33f5x9)['addCls'](this['dragDropProxyCls']);
            }
            _0x33f5x4 = _0x33f5x9;
        }
        if (!_0x33f5x1['dom']['style']['height']) {
            Ext.fly(_0x33f5x4)['setHeight'](_0x33f5x1['getHeight']());
        }
        return _0x33f5x4;
    },
    onDragDrop: function(_0x33f5x7, _0x33f5xf) {
        this['updateDragContext'](_0x33f5x7);
        var _0x33f5x4 = this, _0x33f5x1 = _0x33f5x4['schedulerView'], _0x33f5x9 = _0x33f5x4['cachedTarget'] || Ext['dd']['DragDropMgr']['getDDById'](_0x33f5xf), _0x33f5x8 = _0x33f5x4['dragData'], _0x33f5x2 = false, _0x33f5x3 = true;
        _0x33f5x8['ddCallbackArgs'] = [ _0x33f5x9, _0x33f5x7, _0x33f5xf ];
        if (_0x33f5x8['valid'] && _0x33f5x8['startDate'] && _0x33f5x8['endDate']) {
            _0x33f5x8['finalize'] = function() {
                _0x33f5x4['finalize']['apply'](_0x33f5x4, arguments);
            };
            _0x33f5x3 = _0x33f5x1['fireEvent']('beforeeventdropfinalize', _0x33f5x4, _0x33f5x8, _0x33f5x7) !== false;
            if (_0x33f5x3 && _0x33f5x4['isValidDrop'](_0x33f5x8['resourceRecord'], _0x33f5x8['newResource'], _0x33f5x8['draggedRecords'][0])) {
                _0x33f5x2 = _0x33f5x8['startDate'] - _0x33f5x8['origStart'] !== 0 || _0x33f5x8['newResource'] !== _0x33f5x8['resourceRecord'];
            }
        }
        if (_0x33f5x3) {
            _0x33f5x4['finalize'](_0x33f5x8['valid'] && _0x33f5x2);
        } else {
            _0x33f5x4['proxy']['el']['addCls']('sch-before-drag-finalized');
        }
    },
    finalize: function(_0x33f5x3) {
        var _0x33f5x8 = this, _0x33f5x1 = _0x33f5x8['schedulerView'], _0x33f5x4 = _0x33f5x1['getEventStore'](), _0x33f5x9 = _0x33f5x8['dragData'];
        _0x33f5x8['proxy']['el']['removeCls']('sch-before-drag-finalized');
        if (_0x33f5x8['tip']) {
            _0x33f5x8['tip']['hide']();
        }
        if (_0x33f5x3) {
            var _0x33f5x2, _0x33f5x5 = function() {
                _0x33f5x2 = true;
            };
            _0x33f5x4['on']('update', _0x33f5x5, null, {
                single: true
            });
            _0x33f5x8['updateRecords'](_0x33f5x9);
            _0x33f5x4['un']('update', _0x33f5x5, null, {
                single: true
            });
            if (!_0x33f5x2) {
                _0x33f5x8['onInvalidDrop']['apply'](_0x33f5x8, _0x33f5x9['ddCallbackArgs']);
            } else {
                if (Ext['isIE9']) {
                    _0x33f5x8['proxy']['el']['setStyle']('visibility', 'hidden');
                    Ext['Function']['defer'](_0x33f5x8['onValidDrop'], 10, _0x33f5x8, _0x33f5x9['ddCallbackArgs']);
                } else {
                    _0x33f5x8['onValidDrop']['apply'](_0x33f5x8, _0x33f5x9['ddCallbackArgs']);
                }
                _0x33f5x1['fireEvent']('aftereventdrop', _0x33f5x1, _0x33f5x9['draggedRecords']);
            }
            _0x33f5x8['afterDragFinalized']();
        } else {
            _0x33f5x8['onInvalidDrop']['apply'](_0x33f5x8, _0x33f5x9['ddCallbackArgs']);
        }
    },
    onInvalidDrop: function(_0x33f5x4, _0x33f5x3, _0x33f5x8) {
        if (!_0x33f5x3) {
            _0x33f5x3 = _0x33f5x4;
            _0x33f5x4 = _0x33f5x3['getTarget']() || document['body'];
        }
        if (this['tip']) {
            this['tip']['hide']();
        }
        this['setVisibilityForSourceEvents'](true);
        var _0x33f5x2 = this['schedulerView'], _0x33f5x1 = this['callParent']([ _0x33f5x4, _0x33f5x3, _0x33f5x8 ]);
        _0x33f5x2['fireEvent']('aftereventdrop', _0x33f5x2, this['dragData']['draggedRecords']);
        this['afterDragFinalized']();
        return _0x33f5x1;
    },
    resolveStartEndDates: function(_0x33f5x8) {
        var _0x33f5x2 = this['dragData'], _0x33f5x3, _0x33f5x5 = _0x33f5x2['origStart'], _0x33f5x1 = _0x33f5x2['origEnd'];
        var _0x33f5x4 = Ext.ux.Scheduler.util.Date;
        if (!_0x33f5x2['startsOutsideView']) {
            _0x33f5x3 = this['schedulerView']['getStartEndDatesFromRegion'](_0x33f5x8, 'round');
            if (_0x33f5x3) {
                _0x33f5x5 = _0x33f5x3['start'] || _0x33f5x2['startDate'];
                _0x33f5x1 = _0x33f5x4['add'](_0x33f5x5, _0x33f5x4.MILLI, _0x33f5x2['duration']);
            }
        } else {
            if (!_0x33f5x2['endsOutsideView']) {
                _0x33f5x3 = this['schedulerView']['getStartEndDatesFromRegion'](_0x33f5x8, 'round');
                if (_0x33f5x3) {
                    _0x33f5x1 = _0x33f5x3['end'] || _0x33f5x2['endDate'];
                    _0x33f5x5 = _0x33f5x4['add'](_0x33f5x1, _0x33f5x4.MILLI, -_0x33f5x2['duration']);
                }
            }
        }
        return {
            startDate: _0x33f5x5,
            endDate: _0x33f5x1
        };
    }
});

Ext.define('Ext.ux.Scheduler.feature.DragDrop', {
    validatorFn: function(_0x33f5x1, _0x33f5x2, _0x33f5x3, _0x33f5x8, _0x33f5x4) {
        return true;
    },
    validatorFnScope: null,
    dragConfig: null,
    constructor: function(_0x33f5x1, _0x33f5x2) {
        Ext.apply(this, _0x33f5x2);
        this['schedulerView'] = _0x33f5x1;
        _0x33f5x1['eventDragZone'] = new Ext.ux.Scheduler.feature.SchedulerDragZone(_0x33f5x1['ownerCt']['el'], Ext.apply({
            ddGroup: _0x33f5x1['id'],
            schedulerView: _0x33f5x1,
            validatorFn: this['validatorFn'],
            validatorFnScope: this['validatorFnScope']
        }, this['dragConfig']));
        this['schedulerView']['on']('destroy', this['cleanUp'], this);
        this['callParent']([ _0x33f5x2 ]);
    },
    cleanUp: function() {
        var _0x33f5x2 = this['schedulerView'];
        if (_0x33f5x2['eventDragZone']) {
            _0x33f5x2['eventDragZone']['destroy']();
        }
    }
});

Ext.define('Ext.ux.Scheduler.feature.Grouping', {
    extend: Ext['grid']['feature']['Grouping'],
    alias: 'feature.scheduler_grouping',
    headerRenderer: Ext.emptyFn,
    eventStoreDetacher: null,
    assignmentStoreDetacher: null,
    resourceStoreDetacher: null,
    schedulerGroupHeaderTpl: '{[this.renderCells(values)]}',
    headerCellTpl: '<tpl for="."><div class="sch-grid-group-hd-cell {cellCls}" style="{cellStyle}; width: {width}px;"><span>{value}</span></div></tpl>',
    renderCells: function(_0x33f5x4) {
        var _0x33f5x1 = this['view']['getTimeAxisViewModel']();
        var _0x33f5x3 = _0x33f5x1['columnConfig'][_0x33f5x1['columnLinesFor']];
        var _0x33f5x2 = Ext.Array.map(_0x33f5x3, function(_0x33f5x5) {
            var _0x33f5x9 = {};
            var _0x33f5x8 = this['headerRenderer'](_0x33f5x5['start'], _0x33f5x5['end'], _0x33f5x4['children'], _0x33f5x9);
            _0x33f5x9['value'] = _0x33f5x8 === null || _0x33f5x8 === undefined ? '&nbsp;' : _0x33f5x8;
            _0x33f5x9['width'] = _0x33f5x1['getPositionFromDate'](_0x33f5x5['end']) - _0x33f5x1['getPositionFromDate'](_0x33f5x5['start']);
            return _0x33f5x9;
        }, this);
        return this['headerCellTpl']['apply'](_0x33f5x2);
    },
    disable: function() {
        this['unbindStoreListeners']();
        this['callParent'](arguments);
    },
    enable: function() {
        this['bindStoreListeners']();
        this['callParent'](arguments);
    },
    init: function() {
        var _0x33f5x2 = this['view'];
        var _0x33f5x1 = this;
        this['callParent'](arguments);
        if (typeof this['headerCellTpl'] === 'string') {
            this['headerCellTpl'] = new Ext.XTemplate(this['headerCellTpl']);
        }
        if (_0x33f5x2['getResourceStore']) {
            this['bindStoreListeners']();
            this['groupHeaderTpl'] = new Ext.XTemplate(this['schedulerGroupHeaderTpl'], {
                renderCells: Ext.Function.bind(_0x33f5x1['renderCells'], _0x33f5x1)
            });
            _0x33f5x2['on']({
                resourcestorechange: this['bindStoreListeners'],
                eventstorechange: this['bindStoreListeners'],
                assignmentstorechange: this['bindStoreListeners'],
                scope: this
            });
        }
        Ext.apply(_0x33f5x2, {
            getRowNode: function(_0x33f5x3) {
                return this['retrieveNode'](this['getRowId'](_0x33f5x3), true);
            }
        });
        _0x33f5x2['groupingFeature'] = this;
    },
    bindStoreListeners: function() {
        var _0x33f5x2 = this['view'];
        if (!_0x33f5x2['isLockedView']) {
            var _0x33f5x1 = _0x33f5x2['getEventStore']();
            var _0x33f5x3 = this['getStoreListeners']();
            this['unbindStoreListeners']();
            if (_0x33f5x1) {
                this['eventStoreDetacher'] = _0x33f5x2['mon'](_0x33f5x1, _0x33f5x3['eventStore']);
            }
            if (_0x33f5x1 && _0x33f5x1['getAssignmentStore']()) {
                this['assignmentStoreDetacher'] = _0x33f5x2['mon'](_0x33f5x1['getAssignmentStore'](), _0x33f5x3['assignmentStore']);
            }
            if (_0x33f5x2['getResourceStore']()) {
                this['resourceStoreDetacher'] = _0x33f5x2['mon'](_0x33f5x2['getResourceStore'](), _0x33f5x3['resourceStore']);
            }
        }
    },
    unbindStoreListeners: function() {
        if (!this['view']['isLockedView']) {
            Ext.destroyMembers(this, 'eventStoreDetacher', 'resourceStoreDetacher', 'assignmentStoreDetacher');
        }
    },
    getStoreListeners: function() {
        var _0x33f5x2 = this['view'], _0x33f5x1 = {
            resourceStore: {
                add: this['onResourceAdd'],
                destroyable: true,
                scope: this
            }
        };
        if (_0x33f5x2['getEventStore']) {
            _0x33f5x1['eventStore'] = {
                add: this['onEventAddOrRemove'],
                remove: this['onEventAddOrRemove'],
                update: this['onEventUpdate'],
                destroyable: true,
                scope: this
            };
            if (_0x33f5x2['getEventStore']()['getAssignmentStore']()) {
                _0x33f5x1['assignmentStore'] = {
                    add: this['onAssignmentAddOrRemove'],
                    remove: this['onAssignmentAddOrRemove'],
                    destroyable: true,
                    scope: this
                };
            }
        }
        return _0x33f5x1;
    },
    refreshGrouping: function(_0x33f5x1) {
        var _0x33f5x3 = this;
        var _0x33f5x2 = {};
        Ext.Array['each'](_0x33f5x1, function(_0x33f5x5) {
            if (_0x33f5x5) {
                var _0x33f5x8 = _0x33f5x3['getRecordGroup'](_0x33f5x5)['first']();
                var _0x33f5x4 = _0x33f5x8['getId']();
                if (!_0x33f5x2[_0x33f5x4]) {
                    _0x33f5x2[_0x33f5x4] = _0x33f5x8;
                    _0x33f5x3['refreshGroupHeader'](_0x33f5x8, true);
                }
            }
        });
    },
    onAssignmentAddOrRemove: function(_0x33f5x1, _0x33f5x2) {
        if (!this['view']['getStore']()['isGrouped']()) {
            return;
        }
        var _0x33f5x3 = this['view']['getResourceStore']();
        this['refreshGrouping'](Ext.Array.map(_0x33f5x2, function(_0x33f5x4) {
            return _0x33f5x4['getResource'](_0x33f5x3);
        }));
    },
    onEventUpdate: function(_0x33f5x8, _0x33f5x4) {
        if (!this['view']['getStore']()['isGrouped']()) {
            return;
        }
        var _0x33f5x9 = this;
        var _0x33f5x7 = _0x33f5x8['getAssignmentStore']();
        if (_0x33f5x7) {
            _0x33f5x9['refreshGrouping'](_0x33f5x4['getResources']());
        } else {
            var _0x33f5x3 = _0x33f5x8['getResourceStore']()['getGroupField']();
            var _0x33f5x2 = _0x33f5x4['previous'] && _0x33f5x4['resourceIdField'] in _0x33f5x4['previous'];
            var _0x33f5x5 = _0x33f5x4['getResource']();
            if (_0x33f5x2) {
                var _0x33f5x1 = _0x33f5x8['getResourceStore']()['getById'](_0x33f5x4['previous'][_0x33f5x4['resourceIdField']]);
                if (_0x33f5x1 && (!_0x33f5x5 || _0x33f5x1['get'](_0x33f5x3) !== _0x33f5x5['get'](_0x33f5x3))) {
                    _0x33f5x9['refreshGroupHeader'](_0x33f5x1);
                }
            }
            if (_0x33f5x5) {
                _0x33f5x9['refreshGroupHeader'](_0x33f5x5);
            }
        }
    },
    onEventAddOrRemove: function(_0x33f5x3, _0x33f5x1) {
        if (!this['view']['getStore']()['isGrouped']()) {
            return;
        }
        var _0x33f5x8 = this;
        var _0x33f5x2 = _0x33f5x8['view'];
        var _0x33f5x4 = _0x33f5x2['getEventStore']();
        var _0x33f5x5 = Ext.Array.map(_0x33f5x1, function(_0x33f5x9) {
            return _0x33f5x4['getResourcesForEvent'](_0x33f5x9);
        });
        _0x33f5x5 = []['concat']['apply']([], _0x33f5x5);
        this['refreshGrouping'](Ext.Array['unique'](_0x33f5x5));
    },
    onResourceAdd: function(_0x33f5x1, _0x33f5x2) {
        if (!this['view']['getStore']()['isGrouped']()) {
            return;
        }
        this['refreshGrouping'](_0x33f5x2);
    },
    refreshGroupHeader: function(_0x33f5x4, _0x33f5x3) {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['view'];
        if (_0x33f5x1['disabled'] || !_0x33f5x1['view']['getResourceStore']()['isGrouped']()) {
            return;
        }
        _0x33f5x2['refreshNode'](_0x33f5x3 ? _0x33f5x4 : _0x33f5x1['getRecordGroup'](_0x33f5x4)['first']());
    }
});

Ext.define('Ext.ux.Scheduler.feature.ResizeZone', {
    extend: Ext.util['Observable'],
    showTooltip: true,
    showExactResizePosition: false,
    validatorFn: Ext.emptyFn,
    validatorFnScope: null,
    schedulerView: null,
    origEl: null,
    handlePos: null,
    eventRec: null,
    tip: null,
    tipInstance: null,
    startScroll: null,
    constructor: function(_0x33f5x2) {
        Ext.apply(this, _0x33f5x2);
        var _0x33f5x1 = this['schedulerView'];
        _0x33f5x1['on']({
            destroy: this['cleanUp'],
            scope: this
        });
        _0x33f5x1['el']['on']({
            mousedown: this['onMouseDown'],
            mouseup: this['onMouseUp'],
            scope: this,
            delegate: '.sch-resizable-handle'
        });
        this['bindRightClickPreventer']();
        this['callParent'](arguments);
    },
    bindRightClickPreventer: function() {
        var _0x33f5x2;
        if (Ext['isIE9m']) {
            _0x33f5x2 = 'mousedown';
        } else {
            _0x33f5x2 = 'contextmenu';
        }
        var _0x33f5x1 = {
            scope: this,
            priority: 999
        };
        _0x33f5x1[_0x33f5x2] = this['preventRightClick'];
        this['schedulerView']['el']['on'](_0x33f5x1);
    },
    preventRightClick: function(_0x33f5x2) {
        if (_0x33f5x2['button'] !== 0 && this['resizer']) {
            _0x33f5x2['stopEvent']();
            return false;
        }
    },
    onMouseDown: function(_0x33f5x8, _0x33f5x2) {
        var _0x33f5x1 = this['schedulerView'];
        var _0x33f5x4 = this['eventRec'] = _0x33f5x1['resolveEventRecord'](_0x33f5x2);
        var _0x33f5x3 = _0x33f5x4['isResizable']();
        if (_0x33f5x8['button'] !== 0 || (_0x33f5x3 === false || typeof _0x33f5x3 === 'string' && !_0x33f5x2['className']['match'](_0x33f5x3))) {
            return;
        }
        this['eventRec'] = _0x33f5x4;
        this['handlePos'] = this['getHandlePosition'](_0x33f5x2);
        this['origEl'] = Ext.get(_0x33f5x8['getTarget']('.sch-event'));
        _0x33f5x1['el']['on']({
            mousemove: this['onMouseMove'],
            scope: this,
            single: true
        });
    },
    onMouseUp: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x1 = this['schedulerView'];
        _0x33f5x1['el']['un']({
            mousemove: this['onMouseMove'],
            scope: this,
            single: true
        });
    },
    getTipInstance: function() {
        if (this['tipInstance']) {
            return this['tipInstance'];
        }
        var _0x33f5x2 = this['schedulerView'];
        var _0x33f5x3 = this['tip'];
        var _0x33f5x1 = _0x33f5x2['up']('[lockable=true]')['el'];
        if (_0x33f5x3 instanceof Ext.tip.ToolTip) {
            _0x33f5x3['schedulerView'] = _0x33f5x2;
        } else {
            _0x33f5x3 = new Ext.ux.Scheduler.tooltip.Tooltip(Ext.apply({
                rtl: this['rtl'],
                schedulerView: _0x33f5x2,
                constrainTo: _0x33f5x1,
                cls: 'sch-resize-tip'
            }, _0x33f5x3));
        }
        return this['tipInstance'] = _0x33f5x3;
    },
    onMouseMove: function(_0x33f5x7, _0x33f5x2) {
        var _0x33f5x1 = this['schedulerView'], _0x33f5x9 = this['eventRec'], _0x33f5x4 = this['handlePos'];
        if (!_0x33f5x9 || _0x33f5x1['fireEvent']('beforeeventresize', _0x33f5x1, _0x33f5x9, _0x33f5x7) === false) {
            return;
        }
        delete this['eventRec'];
        _0x33f5x7['stopEvent']();
        this['origEl']['addCls']('sch-event-resizing');
        this['resizer'] = this['createResizer'](this['origEl'], _0x33f5x9, _0x33f5x4);
        var _0x33f5x3 = this['resizer']['resizeTracker'];
        if (this['showTooltip']) {
            var _0x33f5x8 = this['getTipInstance']();
            _0x33f5x8['setTarget'](this['origEl']);
            _0x33f5x8['update'](_0x33f5x9['getStartDate'](), _0x33f5x9['getEndDate'](), true);
            _0x33f5x8['show'](this['origEl'], _0x33f5x7['getX']() - this['origEl']['getX']());
        }
        _0x33f5x3['onMouseDown'](_0x33f5x7, this['resizer'][_0x33f5x4]['dom']);
        _0x33f5x3['onMouseMove'](_0x33f5x7, this['resizer'][_0x33f5x4]['dom']);
        _0x33f5x1['fireEvent']('eventresizestart', _0x33f5x1, _0x33f5x9);
        _0x33f5x1['getScrollable']()['on']('scroll', this['onViewScroll'], this);
    },
    getHandlePosition: function(_0x33f5x1) {
        var _0x33f5x2 = _0x33f5x1['className']['match']('start');
        if (this['schedulerView']['getMode']() === 'horizontal') {
            if (this['schedulerView']['rtl']) {
                return _0x33f5x2 ? 'east' : 'west';
            }
            return _0x33f5x2 ? 'west' : 'east';
        } else {
            return _0x33f5x2 ? 'north' : 'south';
        }
    },
    createResizer: function(_0x33f5x4, _0x33f5xf, _0x33f5x3) {
        var _0x33f5x6 = this['schedulerView'], _0x33f5x7 = this, _0x33f5x9 = _0x33f5x6['resolveResource'](_0x33f5x4), _0x33f5x11 = _0x33f5x6['getSnapPixelAmount'](), _0x33f5xa = _0x33f5x6['getScheduleRegion'](_0x33f5x9, _0x33f5xf), _0x33f5x1 = _0x33f5x6['getDateConstraints'](_0x33f5x9, _0x33f5xf), _0x33f5xd = _0x33f5x4['getHeight'](), _0x33f5x2 = _0x33f5x6['rtl'] && _0x33f5x3[0] === 'e' || !_0x33f5x6['rtl'] && _0x33f5x3[0] === 'w' || _0x33f5x3[0] === 'n', _0x33f5xe = _0x33f5x6['getMode']() !== 'horizontal', _0x33f5x8 = {
            otherEdgeX: _0x33f5x2 ? _0x33f5x4['getRight']() : _0x33f5x4['getLeft'](),
            otherEdgeY: _0x33f5x2 ? _0x33f5x4['getBottom']() : _0x33f5x4['getTop'](),
            target: _0x33f5x4,
            isStart: _0x33f5x2,
            startYOffset: _0x33f5x4['getY']() - _0x33f5x4['parent']()['getY'](),
            startXOffset: _0x33f5x4['getX']() - _0x33f5x4['parent']()['getX'](),
            dateConstraints: _0x33f5x1,
            resourceRecord: _0x33f5x9,
            eventRecord: _0x33f5xf,
            handles: _0x33f5x3[0],
            minHeight: _0x33f5xd,
            constrainTo: _0x33f5xa,
            listeners: {
                resizedrag: this['partialResize'],
                resize: this['afterResize'],
                scope: this
            }
        };
        if (_0x33f5xe) {
            if (_0x33f5x11 > 0) {
                var _0x33f5xb = _0x33f5x4['getWidth']();
                Ext.apply(_0x33f5x8, {
                    minHeight: _0x33f5x11,
                    minWidth: _0x33f5xb,
                    maxWidth: _0x33f5xb,
                    heightIncrement: _0x33f5x11
                });
            }
        } else {
            if (_0x33f5x11 > 0) {
                Ext.apply(_0x33f5x8, {
                    minWidth: _0x33f5x11,
                    maxHeight: _0x33f5xd,
                    widthIncrement: _0x33f5x11
                });
            }
        }
        var _0x33f5xc = new Ext['resizer'].Resizer(_0x33f5x8);
        if (_0x33f5xc['resizeTracker']) {
            _0x33f5xc['resizeTracker']['tolerance'] = -1;
            var _0x33f5x5 = _0x33f5xc['resizeTracker']['updateDimensions'];
            _0x33f5xc['resizeTracker']['updateDimensions'] = function(_0x33f5x17) {
                if (!Ext['isWebKit'] || !_0x33f5x17['getTarget'] || _0x33f5x17['getTarget']('.sch-timelineview')) {
                    var _0x33f5x10;
                    if (_0x33f5xe) {
                        _0x33f5x10 = _0x33f5x6['getScrollY']() - _0x33f5x7['startScroll']['top'];
                        _0x33f5xc['resizeTracker']['minHeight'] = _0x33f5x8['minHeight'] - Math['abs'](_0x33f5x10);
                    } else {
                        _0x33f5x10 = _0x33f5x6['getScrollX']() - _0x33f5x7['startScroll']['left'];
                        _0x33f5xc['resizeTracker']['minWidth'] = _0x33f5x8['minWidth'] - Math['abs'](_0x33f5x10);
                    }
                    _0x33f5x5['apply'](this, arguments);
                }
            };
            _0x33f5xc['resizeTracker']['resize'] = function(_0x33f5x10) {
                var _0x33f5x17;
                if (_0x33f5xe) {
                    _0x33f5x17 = _0x33f5x6['getScrollY']() - _0x33f5x7['startScroll']['top'];
                    if (_0x33f5x3[0] === 's') {
                        _0x33f5x10['y'] -= _0x33f5x17;
                    }
                    _0x33f5x10['height'] += Math['abs'](_0x33f5x17);
                } else {
                    _0x33f5x17 = _0x33f5x6['getScrollX']() - _0x33f5x7['startScroll']['left'];
                    if (_0x33f5x3[0] === 'e') {
                        _0x33f5x10['x'] -= _0x33f5x17;
                    }
                    _0x33f5x10['width'] += Math['abs'](_0x33f5x17);
                }
                Ext['resizer']['ResizeTracker']['prototype']['resize']['apply'](this, arguments);
            };
        }
        _0x33f5x4['setStyle']('z-index', parseInt(_0x33f5x4['getStyle']('z-index'), 10) + 1);
        Ext.ux.Scheduler.util.ScrollManager.activate(_0x33f5x6, _0x33f5x6['getMode']() === 'horizontal' ? 'horizontal' : 'vertical');
        this['startScroll'] = _0x33f5x6['getScroll']();
        return _0x33f5xc;
    },
    getStartEndDates: function() {
        var _0x33f5x5 = this['resizer'], _0x33f5x3 = _0x33f5x5['el'], _0x33f5x4 = this['schedulerView'], _0x33f5x1 = _0x33f5x5['isStart'], _0x33f5x9, _0x33f5x2, _0x33f5x8;
        if (_0x33f5x1) {
            if (_0x33f5x4['getMode']() === 'horizontal') {
                _0x33f5x8 = [ _0x33f5x4['rtl'] ? _0x33f5x3['getRight']() : _0x33f5x3['getLeft']() + 1, _0x33f5x3['getTop']() ];
            } else {
                _0x33f5x8 = [ (_0x33f5x3['getRight']() + _0x33f5x3['getLeft']()) / 2, _0x33f5x3['getTop']() ];
            }
            _0x33f5x2 = _0x33f5x5['eventRecord']['getEndDate']();
            if (_0x33f5x4['snapRelativeToEventStartDate']) {
                _0x33f5x9 = _0x33f5x4['getDateFromXY'](_0x33f5x8);
                _0x33f5x9 = _0x33f5x4['timeAxis']['roundDate'](_0x33f5x9, _0x33f5x5['eventRecord']['getStartDate']());
            } else {
                _0x33f5x9 = _0x33f5x4['getDateFromXY'](_0x33f5x8, 'round');
            }
        } else {
            if (_0x33f5x4['getMode']() === 'horizontal') {
                _0x33f5x8 = [ _0x33f5x4['rtl'] ? _0x33f5x3['getLeft']() : _0x33f5x3['getRight'](), _0x33f5x3['getBottom']() ];
            } else {
                _0x33f5x8 = [ (_0x33f5x3['getRight']() + _0x33f5x3['getLeft']()) / 2, _0x33f5x3['getBottom']() ];
            }
            _0x33f5x9 = _0x33f5x5['eventRecord']['getStartDate']();
            if (_0x33f5x4['snapRelativeToEventStartDate']) {
                _0x33f5x2 = _0x33f5x4['getDateFromXY'](_0x33f5x8);
                _0x33f5x2 = _0x33f5x4['timeAxis']['roundDate'](_0x33f5x2, _0x33f5x5['eventRecord']['getEndDate']());
            } else {
                _0x33f5x2 = _0x33f5x4['getDateFromXY'](_0x33f5x8, 'round');
            }
        }
        _0x33f5x9 = _0x33f5x9 || _0x33f5x5['start'];
        _0x33f5x2 = _0x33f5x2 || _0x33f5x5['end'];
        if (_0x33f5x5['dateConstraints']) {
            _0x33f5x9 = Ext.ux.Scheduler.util.Date['constrain'](_0x33f5x9, _0x33f5x5['dateConstraints']['start'], _0x33f5x5['dateConstraints']['end']);
            _0x33f5x2 = Ext.ux.Scheduler.util.Date['constrain'](_0x33f5x2, _0x33f5x5['dateConstraints']['start'], _0x33f5x5['dateConstraints']['end']);
        }
        return {
            start: _0x33f5x9,
            end: _0x33f5x2
        };
    },
    partialResize: function(_0x33f5xd, _0x33f5x10, _0x33f5xa, _0x33f5x14) {
        var _0x33f5x11 = this['schedulerView'], _0x33f5x8 = _0x33f5x14 ? _0x33f5x14['getXY']() : this['resizer']['resizeTracker']['lastXY'], _0x33f5xc = this['getStartEndDates'](_0x33f5x8), _0x33f5x4 = _0x33f5xc['start'], _0x33f5x3 = _0x33f5xc['end'], _0x33f5x1 = _0x33f5xd['eventRecord'], _0x33f5xf = _0x33f5x11['isHorizontal']();
        if (_0x33f5xf) {
            _0x33f5xd['target']['el']['setY'](_0x33f5xd['target']['parent']()['getY']() + _0x33f5xd['startYOffset']);
        } else {
            _0x33f5xd['target']['el']['setX'](_0x33f5xd['target']['parent']()['getX']() + _0x33f5xd['startXOffset']);
        }
        if (this['showTooltip']) {
            var _0x33f5x6 = this['validatorFn']['call'](this['validatorFnScope'] || this, _0x33f5xd['resourceRecord'], _0x33f5x1, _0x33f5x4, _0x33f5x3);
            var _0x33f5xb = '';
            if (_0x33f5x6 && typeof _0x33f5x6 !== 'boolean') {
                _0x33f5xb = _0x33f5x6['message'];
                _0x33f5x6 = _0x33f5x6['valid'];
            }
            this['getTipInstance']()['update'](_0x33f5x4, _0x33f5x3, _0x33f5x6 !== false, _0x33f5xb);
        }
        if (this['showExactResizePosition']) {
            var _0x33f5x12 = _0x33f5xd['target']['el'], _0x33f5x7, _0x33f5xe, _0x33f5x9;
            if (_0x33f5xd['isStart']) {
                if (_0x33f5x11['isCalendar']()) {
                    var _0x33f5x2 = _0x33f5x11['calendar']['getEventColumns'](_0x33f5x1)[0];
                    _0x33f5x7 = _0x33f5x11['timeAxisViewModel']['getDistanceBetweenDates'](_0x33f5x4, _0x33f5x2['end']);
                } else {
                    _0x33f5x7 = _0x33f5x11['timeAxisViewModel']['getDistanceBetweenDates'](_0x33f5x4, _0x33f5x1['getEndDate']());
                }
                if (_0x33f5xf) {
                    _0x33f5xe = _0x33f5x11['getDateFromCoordinate'](_0x33f5xd['otherEdgeX'] - Math['min'](_0x33f5x10, _0x33f5xd['maxWidth'])) || _0x33f5x4;
                    _0x33f5x9 = _0x33f5x11['timeAxisViewModel']['getDistanceBetweenDates'](_0x33f5xe, _0x33f5x4);
                    _0x33f5x12['setWidth'](_0x33f5x7);
                    _0x33f5x12['setX'](_0x33f5x12['getX']() + _0x33f5x9);
                } else {
                    _0x33f5xe = _0x33f5x11['getDateFromCoordinate'](_0x33f5xd['otherEdgeY'] - Math['min'](_0x33f5x10, _0x33f5xd['maxHeight'])) || _0x33f5x4;
                    _0x33f5x9 = _0x33f5x11['timeAxisViewModel']['getDistanceBetweenDates'](_0x33f5xe, _0x33f5x4);
                    _0x33f5x12['setHeight'](_0x33f5x7);
                    _0x33f5x12['setY'](_0x33f5x12['getY']() + _0x33f5x9);
                }
            } else {
                _0x33f5x7 = _0x33f5x11['timeAxisViewModel']['getDistanceBetweenDates'](_0x33f5x1['getStartDate'](), _0x33f5x3);
                if (_0x33f5xf) {
                    _0x33f5x12['setWidth'](_0x33f5x7);
                } else {
                    _0x33f5x12['setHeight'](_0x33f5x7);
                }
            }
        } else {
            if (!_0x33f5x4 || !_0x33f5x3 || _0x33f5xd['start'] - _0x33f5x4 === 0 && _0x33f5xd['end'] - _0x33f5x3 === 0) {
                return;
            }
        }
        _0x33f5xd['end'] = _0x33f5x3;
        _0x33f5xd['start'] = _0x33f5x4;
        _0x33f5x11['fireEvent']('eventpartialresize', _0x33f5x11, _0x33f5x1, _0x33f5x4, _0x33f5x3, _0x33f5xd['el']);
    },
    onViewScroll: function(_0x33f5x1, _0x33f5x2) {
        this['resizer']['resizeTracker']['onDrag']({});
        this['partialResize'](this['resizer'], 0, 0);
    },
    afterResize: function(_0x33f5x1, _0x33f5xd, _0x33f5x9, _0x33f5xf) {
        var _0x33f5xb = this, _0x33f5xe = _0x33f5x1['resourceRecord'], _0x33f5x11 = _0x33f5x1['eventRecord'], _0x33f5x8 = _0x33f5x11['getStartDate'](), _0x33f5x10 = _0x33f5x11['getEndDate'](), _0x33f5x3 = _0x33f5x1['start'] || _0x33f5x8, _0x33f5x4 = _0x33f5x1['end'] || _0x33f5x10, _0x33f5x6 = _0x33f5xb['schedulerView'], _0x33f5xa = false, _0x33f5xc = true, _0x33f5x2 = _0x33f5xb['validatorFn']['call'](_0x33f5xb['validatorFnScope'] || _0x33f5xb, _0x33f5xe, _0x33f5x11, _0x33f5x3, _0x33f5x4, _0x33f5xf);
        Ext.ux.Scheduler.util.ScrollManager.deactivate();
        _0x33f5x6['getScrollable']()['un']('scroll', this['onViewScroll'], this);
        if (this['showTooltip']) {
            this['getTipInstance']()['hide']();
        }
        _0x33f5x6['el']['select']('[id^=calendar-resizer-placeholder]')['remove']();
        _0x33f5xb['resizeContext'] = {
            resourceRecord: _0x33f5x1['resourceRecord'],
            eventRecord: _0x33f5x11,
            start: _0x33f5x3,
            end: _0x33f5x4,
            finalize: function() {
                _0x33f5xb['finalize']['apply'](_0x33f5xb, arguments);
            }
        };
        if (_0x33f5x2 && typeof _0x33f5x2 !== 'boolean') {
            _0x33f5x2 = _0x33f5x2['valid'];
        }
        if (_0x33f5x3 && _0x33f5x4 && _0x33f5x4 - _0x33f5x3 > 0 && (_0x33f5x3 - _0x33f5x8 !== 0 || _0x33f5x4 - _0x33f5x10 !== 0) && _0x33f5x2 !== false) {
            _0x33f5xc = _0x33f5x6['fireEvent']('beforeeventresizefinalize', _0x33f5xb, _0x33f5xb['resizeContext'], _0x33f5xf) !== false;
            _0x33f5xa = true;
        } else {
            _0x33f5x6['repaintEventsForResource'](_0x33f5xe);
        }
        if (_0x33f5xc) {
            _0x33f5xb['finalize'](_0x33f5xa);
        }
    },
    finalize: function(_0x33f5x2) {
        var _0x33f5x1 = this['schedulerView'];
        var _0x33f5x5 = this['resizeContext'];
        var _0x33f5x4 = false;
        var _0x33f5x3 = function() {
            _0x33f5x4 = true;
        };
        _0x33f5x1['getEventStore']()['on']('update', _0x33f5x3);
        this['resizer']['target']['destroy']();
        if (Ext['isIE']) {
            document['body']['focus']();
        }
        if (_0x33f5x2) {
            if (this['resizer']['isStart']) {
                _0x33f5x5['eventRecord']['setStartDate'](_0x33f5x5['start'], false, _0x33f5x1['getEventStore']()['skipWeekendsDuringDragDrop']);
            } else {
                _0x33f5x5['eventRecord']['setEndDate'](_0x33f5x5['end'], false, _0x33f5x1['getEventStore']()['skipWeekendsDuringDragDrop']);
            }
            if (!_0x33f5x4) {
                _0x33f5x1['repaintEventsForResource'](_0x33f5x5['resourceRecord']);
            }
        } else {
            _0x33f5x1['repaintEventsForResource'](_0x33f5x5['resourceRecord']);
        }
        this['resizer']['destroy']();
        delete this['resizer'];
        _0x33f5x1['getEventStore']()['un']('update', _0x33f5x3);
        _0x33f5x1['fireEvent']('eventresizeend', _0x33f5x1, _0x33f5x5['eventRecord']);
        this['resizeContext'] = null;
    },
    cleanUp: function() {
        if (this['tipInstance']) {
            this['tipInstance']['destroy']();
        }
    }
});

Ext.define('Ext.ux.Scheduler.field.CellEditor', {
    extend: Ext.form['field']['Text'],
    alias: 'widget.celleditorfield',
    hidden: true,
    enableKeyEvents: true,
    divider: '-',
    dateFormat: 'H',
    getErrors: function(_0x33f5x3) {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['callParent'](arguments);
        if (_0x33f5x3 == null || _0x33f5x3 === '') {
            return _0x33f5x2;
        }
        var _0x33f5x4 = this['getDates'](_0x33f5x3);
        if (!_0x33f5x4[0]) {
            _0x33f5x2['push']('Start date is incorrect');
        }
        if (!_0x33f5x4[1]) {
            _0x33f5x2['push']('End date is incorrect');
        }
        if (_0x33f5x4[1] - _0x33f5x4[0] < 0) {
            _0x33f5x2['push']('Start date is less then end date');
        }
        return _0x33f5x2;
    },
    getDates: function(_0x33f5x5) {
        var _0x33f5x4 = this;
        var _0x33f5x1 = _0x33f5x5['split'](_0x33f5x4['divider']);
        var _0x33f5x8, _0x33f5x2;
        if (Ext.isArray(_0x33f5x4['dateFormat'])) {
            for (var _0x33f5x3 = 0; _0x33f5x3 < _0x33f5x4['dateFormat']['length']; _0x33f5x3++) {
                _0x33f5x8 = _0x33f5x8 || Ext.Date['parse'](_0x33f5x1[0], _0x33f5x4['dateFormat'][_0x33f5x3]);
                _0x33f5x2 = _0x33f5x2 || Ext.Date['parse'](_0x33f5x1[1], _0x33f5x4['dateFormat'][_0x33f5x3]);
            }
        } else {
            _0x33f5x8 = Ext.Date['parse'](_0x33f5x1[0], _0x33f5x4['dateFormat']);
            _0x33f5x2 = Ext.Date['parse'](_0x33f5x1[1], _0x33f5x4['dateFormat']);
        }
        if (!_0x33f5x8 || !_0x33f5x2) {
            return [];
        }
        if (_0x33f5x4['record']) {
            _0x33f5x8 = Ext.ux.Scheduler.util.Date['mergeDates'](_0x33f5x4['record']['getStartDate'](), _0x33f5x8, _0x33f5x4['bottomUnit']);
            _0x33f5x2 = Ext.ux.Scheduler.util.Date['mergeDates'](_0x33f5x4['record']['getEndDate'](), _0x33f5x2, _0x33f5x4['bottomUnit']);
        } else {
            _0x33f5x8 = Ext.ux.Scheduler.util.Date['mergeDates'](_0x33f5x4['startDate'], _0x33f5x8, _0x33f5x4['bottomUnit']);
            _0x33f5x2 = Ext.ux.Scheduler.util.Date['mergeDates'](_0x33f5x4['startDate'], _0x33f5x2, _0x33f5x4['bottomUnit']);
        }
        return [ _0x33f5x8, _0x33f5x2 ];
    }
});

Ext.define('Ext.ux.Scheduler.plugin.Zones', {
    extend: Ext.ux.Scheduler.feature.AbstractTimeSpan,
    alias: 'plugin.scheduler_zones',
    innerTpl: null,
    cls: 'sch-zone',
    side: null,
    init: function(_0x33f5x2) {
        if (typeof this['innerTpl'] === 'string') {
            this['innerTpl'] = new Ext.XTemplate(this['innerTpl']);
        }
        this['side'] = _0x33f5x2['rtl'] ? 'right' : 'left';
        var _0x33f5x1 = this['innerTpl'];
        if (!this['template']) {
            this['template'] = new Ext.XTemplate('<tpl for="."><div id="{id}" class="{$cls}" style="' + this['side'] + ':{left}px;top:{top}px;height:{height}px;width:{width}px;{style}">' + (_0x33f5x1 ? '{[this.renderInner(values)]}' : '') + '</div></tpl>', {
                renderInner: function(_0x33f5x3) {
                    return _0x33f5x1['apply'](_0x33f5x3);
                }
            });
        }
        if (typeof this['innerHeaderTpl'] === 'string') {
            this['innerHeaderTpl'] = new Ext.XTemplate(this['innerHeaderTpl']);
        }
        this['callParent'](arguments);
    },
    getElementData: function(_0x33f5x7, _0x33f5x4, _0x33f5x17, _0x33f5x8) {
        var _0x33f5x9 = this['schedulerView'], _0x33f5x14 = [];
        var _0x33f5x3 = _0x33f5x9['getTimeSpanRegion'](_0x33f5x7, _0x33f5x4, this['expandToFitView']);
        var _0x33f5x1, _0x33f5xb, _0x33f5x2, _0x33f5xe, _0x33f5xd, _0x33f5x5;
        _0x33f5x17 = _0x33f5x17 || this['store']['getRange']();
        for (var _0x33f5x10 = 0, _0x33f5x6 = _0x33f5x17['length']; _0x33f5x10 < _0x33f5x6; _0x33f5x10++) {
            _0x33f5x1 = _0x33f5x17[_0x33f5x10];
            _0x33f5xb = _0x33f5x1['getStartDate']();
            _0x33f5x2 = _0x33f5x1['getEndDate']();
            _0x33f5x5 = this['getTemplateData'](_0x33f5x1);
            if (_0x33f5xb && _0x33f5x2 && Ext.ux.Scheduler.util.Date['intersectSpans'](_0x33f5xb, _0x33f5x2, _0x33f5x7, _0x33f5x4)) {
                _0x33f5xe = Ext.apply({}, _0x33f5x5);
                _0x33f5xe['id'] = this['getElementId'](_0x33f5x1);
                _0x33f5xe['$cls'] = this['getElementCls'](_0x33f5x1, _0x33f5x5);
                var _0x33f5xc = _0x33f5x9['getMode']();
                if (_0x33f5xc === 'calendar') {
                    var _0x33f5x15 = _0x33f5x9['getTimeSpanRegion'](_0x33f5xb, _0x33f5x2);
                    _0x33f5xe['left'] = _0x33f5x15['left'];
                    _0x33f5xe['top'] = _0x33f5x15['top'];
                    _0x33f5xe['height'] = _0x33f5x15['bottom'] - _0x33f5x15['top'];
                    _0x33f5xe['width'] = _0x33f5x15['right'] - _0x33f5x15['left'];
                } else {
                    var _0x33f5x12 = _0x33f5x9['getCoordinateFromDate'](Ext.ux.Scheduler.util.Date.max(_0x33f5xb, _0x33f5x7));
                    var _0x33f5xa = _0x33f5x9['getCoordinateFromDate'](Ext.ux.Scheduler.util.Date['min'](_0x33f5x2, _0x33f5x4));
                    if (_0x33f5xc === 'horizontal') {
                        _0x33f5xe['left'] = _0x33f5x12;
                        _0x33f5xe['top'] = _0x33f5x3['top'];
                        _0x33f5xe['width'] = _0x33f5x8 ? 0 : _0x33f5xa - _0x33f5x12;
                        _0x33f5xe['height'] = _0x33f5x3['bottom'] - _0x33f5x3['top'];
                        _0x33f5xe['style'] = _0x33f5x8 ? 'border-left-width:' + (_0x33f5xa - _0x33f5x12) + 'px' : '';
                    } else {
                        _0x33f5xe['left'] = _0x33f5x3['left'];
                        _0x33f5xe['top'] = _0x33f5x12;
                        _0x33f5xe['height'] = _0x33f5x8 ? 0 : _0x33f5xa - _0x33f5x12;
                        _0x33f5xe['width'] = _0x33f5x3['right'] - _0x33f5x3['left'];
                        _0x33f5xe['style'] = _0x33f5x8 ? 'border-top-width:' + (_0x33f5xa - _0x33f5x12) + 'px' : '';
                    }
                }
                _0x33f5x14['push'](_0x33f5xe);
            }
        }
        return _0x33f5x14;
    },
    getHeaderElementId: function(_0x33f5x1, _0x33f5x2) {
        return this['callParent']([ _0x33f5x1 ]) + (_0x33f5x2 ? '-start' : '-end');
    },
    getHeaderElementCls: function(_0x33f5x1, _0x33f5x4, _0x33f5x2) {
        var _0x33f5x3 = _0x33f5x1['clsField'] || this['clsField'];
        if (!_0x33f5x4) {
            _0x33f5x4 = this['getTemplateData'](_0x33f5x1);
        }
        return 'sch-header-indicator sch-header-indicator-' + (_0x33f5x2 ? 'start ' : 'end ') + this['uniqueCls'] + ' ' + (_0x33f5x4[_0x33f5x3] || '');
    },
    getZoneHeaderElementData: function(_0x33f5x1, _0x33f5x7, _0x33f5x8, _0x33f5x2) {
        var _0x33f5x3 = _0x33f5x2 ? _0x33f5x8['getStartDate']() : _0x33f5x8['getEndDate'](), _0x33f5x5 = null, _0x33f5x9, _0x33f5xf, _0x33f5x4;
        if (_0x33f5x3 && Ext.ux.Scheduler.util.Date['betweenLesser'](_0x33f5x3, _0x33f5x1, _0x33f5x7)) {
            _0x33f5x9 = this['getHeaderElementPosition'](_0x33f5x3);
            _0x33f5xf = this['schedulerView']['isHorizontal']();
            _0x33f5x4 = this['getTemplateData'](_0x33f5x8);
            _0x33f5x5 = Ext.apply({
                id: this['getHeaderElementId'](_0x33f5x8, _0x33f5x2),
                cls: this['getHeaderElementCls'](_0x33f5x8, _0x33f5x4, _0x33f5x2),
                isStart: _0x33f5x2,
                side: _0x33f5xf ? this['side'] : 'top',
                position: _0x33f5x9
            }, _0x33f5x4);
        }
        return _0x33f5x5;
    },
    getHeaderElementData: function(_0x33f5x1) {
        var _0x33f5x2 = this['timeAxis']['getStart'](), _0x33f5x7 = this['timeAxis']['getEnd'](), _0x33f5x5 = [], _0x33f5x9, _0x33f5x4, _0x33f5xe;
        _0x33f5x1 = _0x33f5x1 || this['store']['getRange']();
        for (var _0x33f5x8 = 0, _0x33f5x3 = _0x33f5x1['length']; _0x33f5x8 < _0x33f5x3; _0x33f5x8++) {
            _0x33f5x9 = _0x33f5x1[_0x33f5x8];
            _0x33f5x4 = this['getZoneHeaderElementData'](_0x33f5x2, _0x33f5x7, _0x33f5x9, true);
            if (_0x33f5x4) {
                _0x33f5x5['push'](_0x33f5x4);
            }
            _0x33f5xe = this['getZoneHeaderElementData'](_0x33f5x2, _0x33f5x7, _0x33f5x9, false);
            if (_0x33f5xe) {
                _0x33f5x5['push'](_0x33f5xe);
            }
        }
        return _0x33f5x5;
    },
    updateZoneHeaderElement: function(_0x33f5x2, _0x33f5x1) {
        _0x33f5x2['dom']['className'] = _0x33f5x1['cls'];
        if (this['schedulerView']['isHorizontal']()) {
            this['setElementX'](_0x33f5x2, _0x33f5x1['position']);
        } else {
            _0x33f5x2['setTop'](_0x33f5x1['position']);
        }
    },
    updateHeaderElement: function(_0x33f5x3) {
        var _0x33f5x2 = this['timeAxis']['getStart'](), _0x33f5x9 = this['timeAxis']['getEnd'](), _0x33f5x8 = Ext.get(this['getHeaderElementId'](_0x33f5x3, true)), _0x33f5x5 = Ext.get(this['getHeaderElementId'](_0x33f5x3, false)), _0x33f5x4 = this['getZoneHeaderElementData'](_0x33f5x2, _0x33f5x9, _0x33f5x3, true), _0x33f5x1 = this['getZoneHeaderElementData'](_0x33f5x2, _0x33f5x9, _0x33f5x3, false);
        if (!(_0x33f5x8 && _0x33f5x1) || !(_0x33f5x5 && _0x33f5x1)) {
            Ext.destroy(_0x33f5x8, _0x33f5x5);
            this['renderHeaderElementsInternal']([ _0x33f5x3 ]);
        } else {
            if (_0x33f5x8) {
                if (!_0x33f5x4) {
                    Ext.destroy(_0x33f5x8);
                } else {
                    this['updateZoneHeaderElement'](_0x33f5x8, _0x33f5x4);
                }
            }
            if (_0x33f5x5) {
                if (!_0x33f5x1) {
                    Ext.destroy(_0x33f5x5);
                } else {
                    this['updateZoneHeaderElement'](_0x33f5x5, _0x33f5x1);
                }
            }
        }
    }
});

Ext.define('Ext.ux.Scheduler.plugin.ResourceZones', {
    extend: Ext.ux.Scheduler.plugin.Zones,
    alias: 'plugin.scheduler_resourcezones',
    innerTpl: null,
    store: null,
    cls: 'sch-resourcezone',
    init: function(_0x33f5x2) {
        this['store'] = Ext.StoreManager.lookup(this['store']);
        this['uniqueCls'] = this['uniqueCls'] || 'sch-timespangroup-' + Ext['id']();
        this['scheduler'] = _0x33f5x2;
        _0x33f5x2['registerRenderer'](this['renderer'], this);
        if (typeof this['innerTpl'] === 'string') {
            this['innerTpl'] = new Ext.XTemplate(this['innerTpl']);
        }
        var _0x33f5x1 = this['innerTpl'];
        if (!this['template']) {
            this['template'] = new Ext.XTemplate('<tpl for="."><div id="' + this['uniqueCls'] + 'undefined' + this['cls'] + ' ' + this['uniqueCls'] + ' {Cls}" style="' + (_0x33f5x2['rtl'] ? 'right' : 'left') + ':{start}px;width:{width}px;top:{start}px;height:{width}px;{style}">' + (_0x33f5x1 ? '{[this.renderInner(values)]}' : '{' + this['store']['getModel']()['prototype']['nameField'] + '}') + '</div></tpl>', {
                renderInner: function(_0x33f5x3) {
                    return _0x33f5x1['apply'](_0x33f5x3);
                }
            });
        }
        this['storeListeners'] = {
            load: this['fullRefresh'],
            datachanged: this['fullRefresh'],
            clear: this['fullRefresh'],
            add: this['fullRefresh'],
            remove: this['fullRefresh'],
            update: this['onModelUpdate'],
            addrecords: this['fullRefresh'],
            removerecords: this['fullRefresh'],
            updaterecord: this['onModelUpdate'],
            scope: this
        };
        this['store']['on'](this['storeListeners']);
    },
    destroy: function() {
        this['store']['un'](this['storeListeners']);
        this['callParent'](arguments);
    },
    fullRefresh: function() {
        this['scheduler']['getSchedulingView']()['refreshView']();
    },
    renderer: function(_0x33f5x3, _0x33f5x1, _0x33f5x2, _0x33f5x4) {
        if (this['scheduler']['getOrientation']() === 'horizontal' || _0x33f5x4 === 0) {
            return this['renderZones'](_0x33f5x2);
        }
        return '';
    },
    renderZones: function(_0x33f5x5) {
        var _0x33f5x3 = this['store'], _0x33f5x7 = this['scheduler'], _0x33f5xb = _0x33f5x7['timeAxis']['getStart'](), _0x33f5xa = _0x33f5x7['timeAxis']['getEnd'](), _0x33f5x9 = [], _0x33f5xc = _0x33f5x5['getEvents'](_0x33f5x3), _0x33f5x6, _0x33f5x4;
        for (var _0x33f5x8 = 0, _0x33f5x11 = _0x33f5xc['length']; _0x33f5x8 < _0x33f5x11; _0x33f5x8++) {
            var _0x33f5xe = _0x33f5xc[_0x33f5x8];
            _0x33f5x6 = _0x33f5xe['getStartDate']();
            _0x33f5x4 = _0x33f5xe['getEndDate']();
            if (_0x33f5x6 && _0x33f5x4 && Ext.ux.Scheduler.util.Date['intersectSpans'](_0x33f5x6, _0x33f5x4, _0x33f5xb, _0x33f5xa)) {
                var _0x33f5xd = _0x33f5x7['getSchedulingView']()[_0x33f5x7['getOrientation']()]['getEventRenderData'](_0x33f5xe);
                var _0x33f5x1, _0x33f5x2;
                if (_0x33f5x7['getMode']() === 'horizontal') {
                    _0x33f5x1 = _0x33f5x7['rtl'] ? _0x33f5xd['right'] : _0x33f5xd['left'];
                    _0x33f5x2 = _0x33f5xd['width'];
                } else {
                    _0x33f5x1 = _0x33f5xd['top'];
                    _0x33f5x2 = _0x33f5xd['height'];
                }
                _0x33f5x9[_0x33f5x9['length']] = Ext.apply({
                    id: _0x33f5xe['internalId'],
                    start: _0x33f5x1,
                    width: _0x33f5x2,
                    Cls: _0x33f5xe['getCls']()
                }, _0x33f5xe['data']);
            }
        }
        return this['template']['apply'](_0x33f5x9);
    },
    onModelUpdate: function(_0x33f5xf, _0x33f5x7) {
        var _0x33f5x3 = document['getElementById'](this['uniqueCls'] + '-' + _0x33f5x7['internalId']);
        if (_0x33f5x3) {
            var _0x33f5x5 = this['scheduler'], _0x33f5x8 = _0x33f5x5['timeAxis']['getStart'](), _0x33f5xe = _0x33f5x5['timeAxis']['getEnd']();
            var _0x33f5x1 = Ext.ux.Scheduler.util.Date.max(_0x33f5x8, _0x33f5x7['getStartDate']()), _0x33f5x4 = Ext.ux.Scheduler.util.Date['min'](_0x33f5xe, _0x33f5x7['getEndDate']()), _0x33f5xb = _0x33f5x7['getCls']();
            var _0x33f5x9 = _0x33f5x5['getSchedulingView']()['getCoordinateFromDate'](_0x33f5x1);
            var _0x33f5x2 = _0x33f5x5['getSchedulingView']()['getCoordinateFromDate'](_0x33f5x4) - _0x33f5x9;
            _0x33f5x3['className'] = this['cls'] + ' ' + this['uniqueCls'] + ' ' + (_0x33f5xb || '');
            _0x33f5x3['style']['left'] = _0x33f5x9 + 'px';
            _0x33f5x3['style']['top'] = _0x33f5x9 + 'px';
            _0x33f5x3['style']['height'] = _0x33f5x2 + 'px';
            _0x33f5x3['style']['width'] = _0x33f5x2 + 'px';
        }
    }
});

Ext.define('Ext.ux.Scheduler.mixin.AbstractSchedulerPanel', {
    eventBarIconClsField: '',
    enableEventDragDrop: true,
    resourceColumnClass: 'Ext.ux.Scheduler.column.Resource',
    resourceColumnWidth: null,
    calendarColumnWidth: null,
    allowOverlap: true,
    startParamName: 'startDate',
    endParamName: 'endDate',
    passStartEndParameters: false,
    eventRenderer: null,
    eventRendererScope: null,
    eventStore: null,
    resourceStore: null,
    onEventCreated: function(_0x33f5x2) {},
    resourceZones: null,
    resourceZonesConfig: null,
    initStores: function() {
        var _0x33f5x2 = this['resourceStore'] || this['store'];
        if (this['crudManager'] && !(this['crudManager'] instanceof Ext.ux.Scheduler.data['CrudManager'])) {
            this['crudManager'] = new Ext.ux.Scheduler.data.CrudManager(this['crudManager']);
        }
        if (!_0x33f5x2) {
            if (this['crudManager']) {
                _0x33f5x2 = this['resourceStore'] = this['crudManager']['getResourceStore']();
            }
            if (!_0x33f5x2) {
                if (this['isTree']) {
                    _0x33f5x2 = new Ext.ux.Scheduler.data.ResourceTreeStore({
                        proxy: 'memory'
                    });
                } else {
                    _0x33f5x2 = new Ext.ux.Scheduler.data.ResourceStore();
                }
            }
        }
        if (!this['dependencyStore']) {
            if (this['crudManager']) {
                this['dependencyStore'] = this['crudManager']['getDependencyStore']();
            }
        }
        if (!this['eventStore']) {
            if (this['crudManager']) {
                this['eventStore'] = this['crudManager']['getEventStore']();
            }
            this['eventStore'] = this['eventStore'] || new Ext.ux.Scheduler.data.EventStore();
        }
        this['store'] = Ext.StoreManager.lookup(_0x33f5x2);
        this['resourceStore'] = this['store'];
        this['setEventStore'](this['eventStore']);
        if (!this['eventStore'] || !this['eventStore']['isEventStore']) {
            Ext['Error']['raise']('Your eventStore should be a subclass of Ext.ux.Scheduler.data.EventStore (or consume the EventStore mixin)');
        }
        this['resourceStore']['eventStore'] = this['getEventStore']();
    },
    _initializeSchedulerPanel: function() {
        this['initStores']();
        if (this['eventBodyTemplate'] && typeof this['eventBodyTemplate'] === 'string') {
            this['eventBodyTemplate'] = new Ext.XTemplate(this['eventBodyTemplate']);
        }
        this['on']('destroy', function() {
            this['setResourceStore'](null);
            this['setEventStore'](null);
        });
    },
    getResourceStore: function() {
        return this['resourceStore'];
    },
    setResourceStore: function(_0x33f5x1) {
        var _0x33f5x5 = this['getResourceStore']();
        var _0x33f5x3 = _0x33f5x5 === this['store'];
        _0x33f5x1 = _0x33f5x1 && Ext.StoreManager.lookup(_0x33f5x1);
        var _0x33f5x4 = this['getEventStore']();
        var _0x33f5x8 = this['getAssignmentStore']();
        this['resourceStore'] = _0x33f5x1;
        if (_0x33f5x4) {
            _0x33f5x4['setResourceStore'](_0x33f5x1);
        }
        var _0x33f5x2 = this['getSchedulingView']();
        _0x33f5x2 && _0x33f5x2['setResourceStore'](_0x33f5x1);
        if (_0x33f5x1) {
            this['fireEvent']('resourcestorechange', this, _0x33f5x1, _0x33f5x5);
            if (_0x33f5x3) {
                this['reconfigure'](this['resourceStore']);
            } else {
                this['rendered'] && this['getView']()['relayFn']('refreshView');
            }
        }
    },
    getEventStore: function() {
        return this['eventStore'];
    },
    setEventStore: function(_0x33f5x2) {
        var _0x33f5x5 = this['getEventStore']();
        _0x33f5x2 = _0x33f5x2 && Ext.StoreManager.lookup(_0x33f5x2);
        if (this['getEventStore']()) {
            this['mun'](this['getEventStore'](), 'beforeload', this['applyStartEndParameters'], this);
        }
        var _0x33f5x4 = this['getResourceStore']();
        var _0x33f5x8 = this['getAssignmentStore']();
        var _0x33f5x3 = this['getDependencyStore']();
        this['eventStore'] = _0x33f5x2;
        if (_0x33f5x4) {
            _0x33f5x4['setEventStore'](_0x33f5x2);
        }
        if (_0x33f5x8 && _0x33f5x2 && !_0x33f5x2['getAssignmentStore']()) {
            _0x33f5x2['setAssignmentStore'](_0x33f5x8);
        }
        if (_0x33f5x3 && _0x33f5x2 && !_0x33f5x2['getDependencyStore']()) {
            _0x33f5x2['setDependencyStore'](_0x33f5x3);
        }
        var _0x33f5x1 = this['getSchedulingView']();
        _0x33f5x1 && _0x33f5x1['setEventStore'](_0x33f5x2);
        if (_0x33f5x2) {
            this['fireEvent']('eventstorechange', this, _0x33f5x2, _0x33f5x5);
            if (this['passStartEndParameters']) {
                this['mon'](_0x33f5x2, 'beforeload', this['applyStartEndParameters'], this);
            }
            this['rendered'] && this['getView']()['relayFn']('refreshView');
        }
    },
    applyStartEndParameters: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x1 = _0x33f5x3['getProxy']();
        _0x33f5x1['setExtraParam'](this['startParamName'], this['getStart']());
        _0x33f5x1['setExtraParam'](this['endParamName'], this['getEnd']());
    },
    getAssignmentStore: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getEventStore']();
        return _0x33f5x2 && _0x33f5x2['isStore'] && _0x33f5x2['getAssignmentStore']() || _0x33f5x1['assignmentStore'];
    },
    setAssignmentStore: function(_0x33f5x2) {
        var _0x33f5x1 = this['getAssignmentStore']();
        this['getEventStore']()['setAssignmentStore'](_0x33f5x2);
        if (_0x33f5x2) {
            this['fireEvent']('assignmentstorechange', this, _0x33f5x2, _0x33f5x1);
            this['rendered'] && this['getView']()['relayFn']('refreshView');
        }
    },
    getDependencyStore: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getEventStore']();
        return _0x33f5x2 && _0x33f5x2['isStore'] && _0x33f5x2['getDependencyStore']() || _0x33f5x1['dependencyStore'];
    },
    setDependencyStore: function(_0x33f5x2) {
        var _0x33f5x1 = this['getDependencyStore']();
        this['getEventStore']()['setDependencyStore'](_0x33f5x2);
        if (_0x33f5x2) {
            this['fireEvent']('dependencystorechange', this, _0x33f5x2, _0x33f5x1);
            this['rendered'] && this['getView']()['relayFn']('refreshView');
        }
    },
    createResourceColumns: function(_0x33f5x2) {
        return Ext.Array.map(this['resourceStore']['getRange'](), function(_0x33f5x1) {
            return {
                xclass: this['resourceColumnClass'],
                renderer: this['mainRenderer'],
                scope: this,
                width: _0x33f5x2 || 100,
                text: _0x33f5x1['getName'](),
                model: _0x33f5x1
            };
        }, this);
    }
});

Ext.define('Ext.ux.Scheduler.template.Event', {
    extend: Ext.XTemplate,
    eventPrefix: null,
    resizeHandles: null,
    resizeTpl: '<div class="sch-resizable-handle sch-resizable-handle-DIR"></div>',
    constructor: function(_0x33f5x2) {
        Ext.apply(this, _0x33f5x2);
        this['callParent']([ '<tpl for="."><div unselectable="on" tabindex="-1" id="' + this['eventPrefix'] + '{id}" style="right:{right}px;left:{left}px;top:{top}px;height:{height}px;width:{width}px;{style}" class="sch-event ' + Ext['baseCSSPrefix'] + 'unselectable {internalCls} {cls}">' + (this['resizeHandles'] === 'start' || this['resizeHandles'] === 'both' ? this['resizeTpl']['replace'](/DIR/, 'start') : '') + '<div unselectable="on" class="sch-event-inner {iconCls}">{body}</div>' + (this['resizeHandles'] === 'end' || this['resizeHandles'] === 'both' ? this['resizeTpl']['replace'](/DIR/, 'end') : '') + '</div></tpl>' ]);
    }
});

Ext.define('Ext.ux.Scheduler.view.Vertical', {
    view: null,
    constructor: function(_0x33f5x2) {
        Ext.apply(this, _0x33f5x2);
    },
    translateToScheduleCoordinate: function(_0x33f5x1) {
        var _0x33f5x2 = this['view'];
        return _0x33f5x1 - _0x33f5x2['getEl']()['getY']() + _0x33f5x2['getScroll']()['top'];
    },
    translateToPageCoordinate: function(_0x33f5x4) {
        var _0x33f5x1 = this['view'];
        var _0x33f5x3 = _0x33f5x1['getEl'](), _0x33f5x2 = _0x33f5x1['getScroll']();
        return _0x33f5x4 + _0x33f5x3['getY']() - _0x33f5x2['top'];
    },
    getDateFromXY: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
        var _0x33f5x4 = _0x33f5x3[1];
        if (!_0x33f5x2) {
            _0x33f5x4 = this['translateToScheduleCoordinate'](_0x33f5x4);
        }
        return this['view']['timeAxisViewModel']['getDateFromPosition'](_0x33f5x4, _0x33f5x1);
    },
    getEventRenderData: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x7 = Math, _0x33f5x9 = _0x33f5x2['getStartDate'](), _0x33f5x8 = _0x33f5x2['getEndDate'](), _0x33f5xf = this['view'], _0x33f5x5 = _0x33f5xf['timeAxis']['getStart'](), _0x33f5xe = _0x33f5xf['timeAxis']['getEnd'](), _0x33f5x4 = _0x33f5x7['floor'](_0x33f5xf['getCoordinateFromDate'](Ext.ux.Scheduler.util.Date.max(_0x33f5x9, _0x33f5x5))), _0x33f5xb = _0x33f5x7['floor'](_0x33f5xf['getCoordinateFromDate'](Ext.ux.Scheduler.util.Date['min'](_0x33f5x8, _0x33f5xe))), _0x33f5x3 = {
            event: _0x33f5x2
        };
        _0x33f5x3['top'] = _0x33f5x7['max'](0, _0x33f5x7['min'](_0x33f5x4, _0x33f5xb) - _0x33f5xf['eventBorderWidth']);
        _0x33f5x3['height'] = _0x33f5x7['max'](1, _0x33f5x7['abs'](_0x33f5x4 - _0x33f5xb));
        _0x33f5x3['start'] = _0x33f5x9;
        _0x33f5x3['end'] = _0x33f5x8;
        _0x33f5x3['startsOutsideView'] = _0x33f5x9 < _0x33f5x5;
        _0x33f5x3['endsOutsideView'] = _0x33f5x8 > _0x33f5xe;
        return _0x33f5x3;
    },
    getScheduleRegion: function(_0x33f5x4, _0x33f5x8) {
        var _0x33f5x7 = this['view'], _0x33f5x9 = _0x33f5x4 ? Ext.fly(_0x33f5x7['getScheduleCell'](_0x33f5x7['getNodes']()[0], _0x33f5x7['getResourceStore']()['indexOf'](_0x33f5x4)))['getRegion']() : _0x33f5x7['getTableRegion'](), _0x33f5x5 = _0x33f5x7['timeAxis']['getStart'](), _0x33f5xb = _0x33f5x7['timeAxis']['getEnd'](), _0x33f5x2 = _0x33f5x7['getDateConstraints'](_0x33f5x4, _0x33f5x8) || {
            start: _0x33f5x5,
            end: _0x33f5xb
        }, _0x33f5x3 = this['translateToPageCoordinate'](_0x33f5x7['getCoordinateFromDate'](Ext.ux.Scheduler.util.Date.max(_0x33f5x5, _0x33f5x2['start']))), _0x33f5xe = this['translateToPageCoordinate'](_0x33f5x7['getCoordinateFromDate'](Ext.ux.Scheduler.util.Date['min'](_0x33f5xb, _0x33f5x2['end']))), _0x33f5x1 = _0x33f5x9['left'] + _0x33f5x7['barMargin'], _0x33f5xf = (_0x33f5x4 ? _0x33f5x9['left'] + this['getResourceColumnWidth'](_0x33f5x4) : _0x33f5x9['right']) - _0x33f5x7['barMargin'];
        return new Ext.util.Region(Math['min'](_0x33f5x3, _0x33f5xe), _0x33f5xf, Math['max'](_0x33f5x3, _0x33f5xe), _0x33f5x1);
    },
    getResourceColumnWidth: function(_0x33f5x2) {
        return this['view']['timeAxisViewModel']['resourceColumnWidth'];
    },
    getResourceColumnLayoutAvailableWidth: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        return _0x33f5x2['getResourceColumnWidth'](_0x33f5x1) - 2 * _0x33f5x2['view']['barMargin'] - _0x33f5x2['view']['cellBorderWidth'];
    },
    getResourceRegion: function(_0x33f5x7, _0x33f5x1, _0x33f5x9) {
        var _0x33f5xe = this['view'], _0x33f5x5 = _0x33f5xe['getResourceStore']()['indexOf'](_0x33f5x7) * this['getResourceColumnWidth'](_0x33f5x7), _0x33f5xf = _0x33f5xe['timeAxis']['getStart'](), _0x33f5xc = _0x33f5xe['timeAxis']['getEnd'](), _0x33f5x2 = _0x33f5x1 ? Ext.ux.Scheduler.util.Date.max(_0x33f5xf, _0x33f5x1) : _0x33f5xf, _0x33f5x4 = _0x33f5x9 ? Ext.ux.Scheduler.util.Date['min'](_0x33f5xc, _0x33f5x9) : _0x33f5xc, _0x33f5x8 = Math['max'](0, _0x33f5xe['getCoordinateFromDate'](_0x33f5x2) - _0x33f5xe['cellTopBorderWidth']), _0x33f5x11 = _0x33f5xe['getCoordinateFromDate'](_0x33f5x4) - _0x33f5xe['cellTopBorderWidth'], _0x33f5x3 = _0x33f5x5 + _0x33f5xe['cellBorderWidth'], _0x33f5xb = _0x33f5x5 + this['getResourceColumnWidth'](_0x33f5x7) - _0x33f5xe['cellBorderWidth'];
        return new Ext.util.Region(Math['min'](_0x33f5x8, _0x33f5x11), _0x33f5xb, Math['max'](_0x33f5x8, _0x33f5x11), _0x33f5x3);
    },
    columnRenderer: function(_0x33f5x8, _0x33f5x17, _0x33f5xc, _0x33f5xa, _0x33f5x10) {
        var _0x33f5x6 = this['view'];
        var _0x33f5x5 = '';
        if (_0x33f5xa === 0) {
            var _0x33f5x2 = Ext.ux.Scheduler.util.Date, _0x33f5xb = _0x33f5x6['timeAxis'], _0x33f5xd, _0x33f5x3, _0x33f5xe, _0x33f5x9;
            _0x33f5xd = [];
            _0x33f5x3 = _0x33f5x6['getEventStore']()['getEventsForResource'](_0x33f5xc);
            for (_0x33f5xe = 0, _0x33f5x9 = _0x33f5x3['length']; _0x33f5xe < _0x33f5x9; _0x33f5xe++) {
                var _0x33f5x1 = _0x33f5x3[_0x33f5xe], _0x33f5x4 = _0x33f5x1['getStartDate'](), _0x33f5x7 = _0x33f5x1['getEndDate']();
                if (_0x33f5x4 && _0x33f5x7 && _0x33f5xb['timeSpanInAxis'](_0x33f5x4, _0x33f5x7)) {
                    _0x33f5xd['push'](_0x33f5x6['generateTplData'](_0x33f5x1, _0x33f5xc, _0x33f5x10));
                }
            }
            _0x33f5x6['eventLayout']['vertical']['applyLayout'](_0x33f5xd, this['getResourceColumnLayoutAvailableWidth'](_0x33f5xc));
            _0x33f5x5 = '&#160;' + _0x33f5x6['eventTpl']['apply'](_0x33f5xd);
        }
        if (_0x33f5x10 % 2 === 1) {
            _0x33f5x17['tdCls'] = (_0x33f5x17['tdCls'] || '') + ' ' + _0x33f5x6['altColCls'];
            _0x33f5x17['cellCls'] = (_0x33f5x17['cellCls'] || '') + ' ' + _0x33f5x6['altColCls'];
        }
        return _0x33f5x5;
    },
    resolveResource: function(_0x33f5x8) {
        var _0x33f5x5 = this, _0x33f5x1 = _0x33f5x5['view'], _0x33f5x4, _0x33f5x3, _0x33f5x2;
        _0x33f5x4 = Ext.fly(_0x33f5x8)['is'](_0x33f5x1['eventSelector']) && _0x33f5x8 || Ext.fly(_0x33f5x8)['up'](_0x33f5x1['eventSelector'], null, true);
        if (_0x33f5x4) {
            _0x33f5x2 = _0x33f5x1['getResourceRecordFromDomId'](_0x33f5x4['id']);
        } else {
            _0x33f5x8 = Ext.fly(_0x33f5x8)['is'](_0x33f5x1['timeCellSelector']) ? _0x33f5x8 : Ext.fly(_0x33f5x8)['up'](_0x33f5x1['timeCellSelector'], null, true);
            _0x33f5x3 = -1;
            if (_0x33f5x8 && Ext['isIE8m']) {
                _0x33f5x8 = _0x33f5x8['previousSibling'];
                while (_0x33f5x8) {
                    if (_0x33f5x8['nodeType'] === 1) {
                        _0x33f5x3++;
                    }
                    _0x33f5x8 = _0x33f5x8['previousSibling'];
                }
            } else {
                if (_0x33f5x8) {
                    _0x33f5x3 = Ext.Array.indexOf(Array['prototype']['slice']['call'](_0x33f5x8['parentNode']['children']), _0x33f5x8);
                }
            }
            _0x33f5x2 = _0x33f5x3 >= 0 && _0x33f5x1['getResourceStore']()['getAt'](_0x33f5x3) || null;
        }
        return _0x33f5x2;
    },
    onEventUpdate: function(_0x33f5x11, _0x33f5x2) {
        var _0x33f5xf = this;
        var _0x33f5x9 = _0x33f5x2['previous'] || {};
        var _0x33f5xe = _0x33f5xf['view'];
        var _0x33f5x8 = _0x33f5xe['timeAxis'];
        var _0x33f5x1 = _0x33f5x2['getStartDate']();
        var _0x33f5x7 = _0x33f5x2['getEndDate']();
        var _0x33f5x3 = _0x33f5x9['StartDate'] || _0x33f5x1;
        var _0x33f5x5 = _0x33f5x9['EndDate'] || _0x33f5x7;
        var _0x33f5xb = _0x33f5x3 && _0x33f5x5 && _0x33f5x8['timeSpanInAxis'](_0x33f5x3, _0x33f5x5);
        var _0x33f5x4;
        if (_0x33f5x2['resourceIdField'] in _0x33f5x9 && _0x33f5xb) {
            _0x33f5x4 = _0x33f5x11['getResourceStore']()['getById'](_0x33f5x9[_0x33f5x2['resourceIdField']]);
            _0x33f5x4 && _0x33f5xf['relayoutRenderedEvents'](_0x33f5x4);
        }
        if (_0x33f5x1 && _0x33f5x7 && _0x33f5x8['timeSpanInAxis'](_0x33f5x1, _0x33f5x7) || _0x33f5xb) {
            _0x33f5xf['renderSingle'](_0x33f5x2);
            Ext.Array['each'](_0x33f5x2['getResources'](), function(_0x33f5xc) {
                _0x33f5xf['relayoutRenderedEvents'](_0x33f5xc);
                _0x33f5xe['getEventSelectionModel']()['isSelected'](_0x33f5x2) && _0x33f5xe['onEventBarSelect'](_0x33f5x2, true);
            });
        }
    },
    onEventAdd: function(_0x33f5x3, _0x33f5x8) {
        var _0x33f5x5 = this, _0x33f5x1 = _0x33f5x5['view'], _0x33f5x4, _0x33f5x2, _0x33f5x9;
        if (_0x33f5x8['length'] === 1) {
            _0x33f5x4 = _0x33f5x8[0];
            _0x33f5x2 = _0x33f5x4['getStartDate']();
            _0x33f5x9 = _0x33f5x4['getEndDate']();
            if (_0x33f5x2 && _0x33f5x9 && _0x33f5x1['timeAxis']['timeSpanInAxis'](_0x33f5x2, _0x33f5x9)) {
                _0x33f5x5['renderSingle'](_0x33f5x4);
                Ext.Array['each'](_0x33f5x3['getResourcesForEvent'](_0x33f5x4), function(_0x33f5x7) {
                    _0x33f5x5['relayoutRenderedEvents'](_0x33f5x7);
                });
            }
        } else {
            _0x33f5x1['repaintAllEvents']();
        }
    },
    onEventRemove: function(_0x33f5xb, _0x33f5xe) {
        var _0x33f5x9 = this, _0x33f5x7 = _0x33f5x9['view'], _0x33f5x2, _0x33f5x3, _0x33f5x5, _0x33f5x4, _0x33f5x8, _0x33f5x1;
        for (_0x33f5x1 = false, _0x33f5x4 = 0, _0x33f5x8 = _0x33f5xe['length']; !_0x33f5x1 && _0x33f5x4 < _0x33f5x8; _0x33f5x4++) {
            _0x33f5x2 = _0x33f5xe[_0x33f5x4];
            _0x33f5x3 = _0x33f5x2['getStartDate']();
            _0x33f5x5 = _0x33f5x2['getEndDate']();
            _0x33f5x1 = _0x33f5x3 && _0x33f5x5 && _0x33f5x7['timeAxis']['timeSpanInAxis'](_0x33f5x3, _0x33f5x5);
            _0x33f5x1 && _0x33f5x7['repaintAllEvents']();
        }
    },
    relayoutRenderedEvents: function(_0x33f5x4) {
        var _0x33f5x3 = [], _0x33f5x2 = this['view'], _0x33f5x1 = _0x33f5x2['getEventStore']()['getEventsForResource'](_0x33f5x4);
        Ext.Array['each'](_0x33f5x1, function(_0x33f5x8) {
            var _0x33f5x5 = _0x33f5x2['getElementsFromEventRecord'](_0x33f5x8, _0x33f5x4);
            _0x33f5x5['length'] && _0x33f5x3['push']({
                start: _0x33f5x8['getStartDate'](),
                end: _0x33f5x8['getEndDate'](),
                event: _0x33f5x8,
                node: _0x33f5x5[0]
            });
        });
        _0x33f5x2['eventLayout']['vertical']['applyLayout'](_0x33f5x3, this['getResourceColumnLayoutAvailableWidth'](_0x33f5x4));
        Ext.Array['each'](_0x33f5x3, function(_0x33f5x5) {
            _0x33f5x5['node']['setStyle']({
                left: _0x33f5x5['left'] + 'px',
                width: _0x33f5x5['width'] + 'px'
            });
            _0x33f5x2['fireEvent']('eventrepaint', _0x33f5x2, _0x33f5x5['event'], _0x33f5x5['node']);
        });
    },
    renderSingle: function(_0x33f5x4) {
        var _0x33f5x3 = this, _0x33f5x1 = _0x33f5x3['view'], _0x33f5x2 = _0x33f5x4['getStartDate'](), _0x33f5x8 = _0x33f5x4['getEndDate'](), _0x33f5x5;
        Ext.Array['each'](_0x33f5x1['getElementsFromEventRecord'](_0x33f5x4), function(_0x33f5x9) {
            _0x33f5x9['destroy']();
        });
        if (_0x33f5x2 && _0x33f5x8 && _0x33f5x1['timeAxis']['timeSpanInAxis'](_0x33f5x2, _0x33f5x8)) {
            Ext.Array['each'](_0x33f5x4['getResources'](), function(_0x33f5xe) {
                var _0x33f5xf = _0x33f5x1['getResourceStore']()['indexOf'](_0x33f5xe), _0x33f5x9 = Ext.fly(_0x33f5x1['getScheduleCell'](0, _0x33f5xf)), _0x33f5x7;
                if (_0x33f5x9) {
                    _0x33f5x7 = _0x33f5x1['generateTplData'](_0x33f5x4, _0x33f5xe, _0x33f5xf);
                    _0x33f5x1['eventTpl']['append'](_0x33f5x9['first'](), [ _0x33f5x7 ]);
                }
            });
        }
    },
    getTimeSpanRegion: function(_0x33f5x1, _0x33f5x9) {
        var _0x33f5x4 = this['view'], _0x33f5x2 = _0x33f5x4['getCoordinateFromDate'](_0x33f5x1), _0x33f5x8 = _0x33f5x9 ? _0x33f5x4['getCoordinateFromDate'](_0x33f5x9) : _0x33f5x2, _0x33f5x3 = _0x33f5x4['getTableRegion'](), _0x33f5x5 = _0x33f5x3 ? _0x33f5x3['right'] - _0x33f5x3['left'] : _0x33f5x4['getEl']()['dom']['clientWidth'];
        return new Ext.util.Region(Math['min'](_0x33f5x2, _0x33f5x8), _0x33f5x5, Math['max'](_0x33f5x2, _0x33f5x8), 0);
    },
    getStartEndDatesFromRegion: function(_0x33f5x4, _0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = this['view']['getDateFromCoordinate'](_0x33f5x4['top'], _0x33f5x3), _0x33f5x5 = this['view']['getDateFromCoordinate'](_0x33f5x4['bottom'], _0x33f5x3);
        if (_0x33f5x2 && _0x33f5x5) {
            return {
                start: Ext.ux.Scheduler.util.Date['min'](_0x33f5x2, _0x33f5x5),
                end: Ext.ux.Scheduler.util.Date.max(_0x33f5x2, _0x33f5x5)
            };
        } else {
            return null;
        }
    },
    setColumnWidth: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = this['view'];
        _0x33f5x2['resourceColumnWidth'] = _0x33f5x3;
        _0x33f5x2['getTimeAxisViewModel']()['setViewColumnWidth'](_0x33f5x3, _0x33f5x1);
    },
    getVisibleDateRange: function() {
        var _0x33f5x5 = this['view'];
        if (!_0x33f5x5['rendered']) {
            return null;
        }
        var _0x33f5x3 = _0x33f5x5['getScroll'](), _0x33f5x1 = _0x33f5x5['getHeight'](), _0x33f5x4 = _0x33f5x5['getTableRegion'](), _0x33f5x8 = _0x33f5x5['timeAxis']['getEnd']();
        if (_0x33f5x4['bottom'] - _0x33f5x4['top'] < _0x33f5x1) {
            var _0x33f5x2 = _0x33f5x5['timeAxis']['getStart']();
            return {
                startDate: _0x33f5x2,
                endDate: _0x33f5x8
            };
        }
        return {
            startDate: _0x33f5x5['getDateFromCoordinate'](_0x33f5x3['top'], null, true),
            endDate: _0x33f5x5['getDateFromCoordinate'](_0x33f5x3['top'] + _0x33f5x1, null, true) || _0x33f5x8
        };
    },
    getItemBox: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return Ext.Array.map(_0x33f5x2['getResources'](), function(_0x33f5x3) {
            return _0x33f5x1['getResourceEventBox'](_0x33f5x2, _0x33f5x3);
        });
    },
    getResourceEventBox: function(_0x33f5xb, _0x33f5xf) {
        var _0x33f5x8 = Ext.ux.Scheduler.util.Date, _0x33f5xe = this, _0x33f5x10 = null, _0x33f5xd = _0x33f5xe['view']['timeAxis']['getStart'](), _0x33f5x11 = _0x33f5xe['view']['timeAxis']['getEnd'](), _0x33f5x7 = _0x33f5xb['getStartDate'](), _0x33f5xa = _0x33f5xb['getEndDate'](), _0x33f5x5, _0x33f5x4, _0x33f5x6, _0x33f5x3, _0x33f5x9, _0x33f5x1, _0x33f5xc, _0x33f5x2;
        if (_0x33f5x7 && _0x33f5xa && _0x33f5x8['intersectSpans'](_0x33f5x7, _0x33f5xa, _0x33f5xd, _0x33f5x11)) {
            if (_0x33f5xe['view']['managedEventSizing']) {
                _0x33f5x5 = _0x33f5xe['view']['eventLayout']['vertical'];
                _0x33f5x4 = Ext.Array.map(_0x33f5xf['getEvents'](), _0x33f5xe['getEventRenderData'], _0x33f5xe);
                _0x33f5x5['applyLayout'](_0x33f5x4, _0x33f5xe['getResourceColumnLayoutAvailableWidth'](_0x33f5xf));
                _0x33f5x6 = Ext.Array['findBy'](_0x33f5x4, function(_0x33f5x17) {
                    return _0x33f5x17['event'] == _0x33f5xb;
                });
                if (_0x33f5x6) {
                    _0x33f5x3 = _0x33f5xe['view']['getResourceStore']()['indexOf'](_0x33f5xf) * _0x33f5xe['getResourceColumnWidth'](_0x33f5xf);
                    _0x33f5x10 = {
                        rendered: true,
                        start: _0x33f5x6['left'] + _0x33f5x3,
                        end: _0x33f5x6['left'] + _0x33f5x6['width'] + _0x33f5x3,
                        top: _0x33f5x6['top'],
                        bottom: _0x33f5x6['top'] + _0x33f5x6['height']
                    };
                }
            } else {
                _0x33f5x9 = _0x33f5xe['view']['getElementsFromEventRecord'](_0x33f5xb, _0x33f5xb !== _0x33f5xf && _0x33f5xf);
                if (_0x33f5x9['length']) {
                    _0x33f5x1 = _0x33f5x9[0];
                    _0x33f5xc = _0x33f5x1['getOffsetsTo'](_0x33f5xe['view']['getEl']()), 
                    _0x33f5x2 = _0x33f5x1['getBox']();
                    _0x33f5x10 = {
                        rendered: true,
                        start: _0x33f5xc[0],
                        end: _0x33f5xc[0] + _0x33f5x2['width'],
                        top: _0x33f5xc[1],
                        bottom: _0x33f5xc[1] + _0x33f5x2['height']
                    };
                }
            }
            if (_0x33f5x10) {
                _0x33f5x10 = _0x33f5xe['adjustItemBox'](_0x33f5xb, _0x33f5x10);
            }
        }
        return _0x33f5x10;
    },
    adjustItemBox: function(_0x33f5x2, _0x33f5x1) {
        return _0x33f5x1;
    },
    getConnectorStartSide: function(_0x33f5x2) {
        return 'top';
    },
    getConnectorEndSide: function(_0x33f5x2) {
        return 'bottom';
    }
});

Ext.define('Ext.ux.Scheduler.mixin.AbstractSchedulerView', {
    _cmpCls: 'sch-schedulerview',
    scheduledEventName: 'event',
    eventTemplateClass: 'Ext.ux.Scheduler.template.Event',
    eventTpl: null,
    barMargin: 0,
    constrainDragToResource: false,
    allowOverlap: null,
    readOnly: null,
    altColCls: 'sch-col-alt',
    dynamicRowHeight: true,
    managedEventSizing: true,
    eventAnimations: true,
    horizontalLayoutCls: 'Ext.ux.Scheduler.eventlayout.Horizontal',
    horizontalEventSorterFn: null,
    verticalLayoutCls: 'Ext.ux.Scheduler.eventlayout.Vertical',
    verticalEventSorterFn: null,
    eventCls: 'sch-event',
    verticalViewClass: 'Ext.ux.Scheduler.view.Vertical',
    eventStore: null,
    resourceStore: null,
    eventLayout: null,
    _initializeSchedulerView: function() {
        var _0x33f5x2 = Ext.ClassManager['get'](this['horizontalLayoutCls']);
        var _0x33f5x1 = Ext.ClassManager['get'](this['verticalLayoutCls']);
        this['eventSelector'] = '.' + this['eventCls'];
        this['eventLayout'] = {};
        this['eventTpl'] = this['eventTpl'] || Ext.create(this['eventTemplateClass'], {
            eventPrefix: this['eventPrefix'],
            resizeHandles: this['eventResizeHandles']
        });
        if (_0x33f5x2) {
            this['eventLayout']['horizontal'] = new _0x33f5x2(Ext.apply({
                timeAxisViewModel: this['timeAxisViewModel']
            }, {
                bandIndexToPxConvertFn: this['horizontal']['layoutEventVertically'],
                bandIndexToPxConvertScope: this['horizontal']
            }, this['horizontalEventSorterFn'] ? {
                sortEvents: this['horizontalEventSorterFn']
            } : {}));
        }
        if (_0x33f5x1) {
            this['eventLayout']['vertical'] = new _0x33f5x1(Ext.apply({}, {
                view: this
            }, this['verticalEventSorterFn'] ? {
                sortEvents: this['verticalEventSorterFn']
            } : {}));
        }
        this['store'] = this['store'] || this['resourceStore'];
        this['resourceStore'] = this['resourceStore'] || this['store'];
    },
    generateTplData: function(_0x33f5x5, _0x33f5x4, _0x33f5x3) {
        var _0x33f5x9 = this[this['mode']]['getEventRenderData'](_0x33f5x5, _0x33f5x4, _0x33f5x3), _0x33f5x7 = _0x33f5x5['getStartDate'](), _0x33f5x1 = _0x33f5x5['getEndDate'](), _0x33f5x2 = _0x33f5x5['getCls']() || '';
        _0x33f5x2 += ' sch-event-resizable-' + _0x33f5x5['getResizable']();
        if (_0x33f5x5['dirty']) {
            _0x33f5x2 += ' sch-dirty ';
        }
        if (_0x33f5x9['endsOutsideView']) {
            _0x33f5x2 += ' sch-event-endsoutside ';
        }
        if (_0x33f5x9['startsOutsideView']) {
            _0x33f5x2 += ' sch-event-startsoutside ';
        }
        if (this['eventBarIconClsField']) {
            _0x33f5x2 += ' sch-event-withicon ';
        }
        if (_0x33f5x5['isDraggable']() === false) {
            _0x33f5x2 += ' sch-event-fixed ';
        }
        if (_0x33f5x1 - _0x33f5x7 === 0) {
            _0x33f5x2 += ' sch-event-milestone ';
        }
        if (this['getEventSelectionModel']()['isSelected'](_0x33f5x5)) {
            _0x33f5x2 += ' ' + this['selectedEventCls'] + ' ';
        }
        _0x33f5x9['id'] = _0x33f5x5['internalId'] + '-' + _0x33f5x4['internalId'] + (this['isCalendar']() ? '-' + _0x33f5x3 : '-x');
        _0x33f5x9['internalCls'] = _0x33f5x2;
        _0x33f5x9['start'] = _0x33f5x7;
        _0x33f5x9['end'] = _0x33f5x1;
        _0x33f5x9['iconCls'] = _0x33f5x5['data'][this['eventBarIconClsField']] || _0x33f5x5['getIconCls'] && _0x33f5x5['getIconCls']() || '';
        _0x33f5x9['event'] = _0x33f5x5;
        if (this['eventRenderer']) {
            var _0x33f5x8 = this['eventRenderer']['call'](this['eventRendererScope'] || this, _0x33f5x5, _0x33f5x4, _0x33f5x9, _0x33f5x3);
            if (this['eventBodyTemplate']) {
                _0x33f5x9['body'] = this['eventBodyTemplate']['apply'](_0x33f5x8);
            } else {
                _0x33f5x9['body'] = _0x33f5x8;
            }
        } else {
            if (this['eventBodyTemplate']) {
                _0x33f5x9['body'] = this['eventBodyTemplate']['apply'](_0x33f5x5['data']);
            } else {
                if (this['eventBarTextField']) {
                    _0x33f5x9['body'] = _0x33f5x5['data'][this['eventBarTextField']] || '';
                }
            }
        }
        return _0x33f5x9;
    },
    resolveResource: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        return _0x33f5x2[_0x33f5x2['mode']]['resolveResource'](_0x33f5x1);
    },
    getResourceRegion: function(_0x33f5x1, _0x33f5x2, _0x33f5x3) {
        return this[this['mode']]['getResourceRegion'](_0x33f5x1, _0x33f5x2, _0x33f5x3);
    },
    resolveEventRecord: function(_0x33f5x2) {
        _0x33f5x2 = _0x33f5x2['dom'] ? _0x33f5x2['dom'] : _0x33f5x2;
        if (!Ext.fly(_0x33f5x2)['is'](this['eventSelector'])) {
            _0x33f5x2 = Ext.fly(_0x33f5x2)['up'](this['eventSelector']);
        }
        return _0x33f5x2 && this['getEventRecordFromDomId'](_0x33f5x2['id']);
    },
    resolveEventRecordFromResourceRow: function(_0x33f5x2) {
        var _0x33f5x3 = this, _0x33f5x5 = _0x33f5x3['getEventSelectionModel'](), _0x33f5x4, _0x33f5x1;
        _0x33f5x2 = _0x33f5x2['dom'] ? _0x33f5x2['dom'] : _0x33f5x2;
        _0x33f5x4 = _0x33f5x3['getRecord'](_0x33f5x2);
        return _0x33f5x5['getFirstSelectedEventForResource'](_0x33f5x4);
    },
    resolveAssignmentRecord: function(_0x33f5x2) {
        var _0x33f5x3 = this, _0x33f5x5 = _0x33f5x3['getEventStore']()['getAssignmentStore'](), _0x33f5x8 = null, _0x33f5x1, _0x33f5x4;
        if (_0x33f5x5) {
            _0x33f5x1 = _0x33f5x3['getEventRecordFromDomId'](_0x33f5x2['id']);
            _0x33f5x4 = _0x33f5x3['getResourceRecordFromDomId'](_0x33f5x2['id']);
            if (_0x33f5x1 && _0x33f5x4) {
                _0x33f5x8 = _0x33f5x5['getAssignmentForEventAndResource'](_0x33f5x1, _0x33f5x4);
            }
        }
        return _0x33f5x8;
    },
    getEventRecordFromDomId: function(_0x33f5x2) {
        _0x33f5x2 = this['getEventIdFromDomNodeId'](_0x33f5x2);
        return this['getEventStore']()['getModelByInternalId'](_0x33f5x2);
    },
    getResourceRecordFromDomId: function(_0x33f5x2) {
        _0x33f5x2 = this['getResourceIdFromDomNodeId'](_0x33f5x2);
        return this['getResourceStore']()['getByInternalId'](_0x33f5x2);
    },
    isDateRangeAvailable: function(_0x33f5x4, _0x33f5x2, _0x33f5x1, _0x33f5x3) {
        return this['getEventStore']()['isDateRangeAvailable'](_0x33f5x4, _0x33f5x2, _0x33f5x1, _0x33f5x3);
    },
    getEventsInView: function() {
        var _0x33f5x1 = this['timeAxis']['getStart'](), _0x33f5x2 = this['timeAxis']['getEnd']();
        return this['getEventStore']()['getEventsInTimeSpan'](_0x33f5x1, _0x33f5x2);
    },
    getEventNodes: function() {
        return this['getEl']()['select'](this['eventSelector']);
    },
    highlightEvents: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        var _0x33f5x3 = [];
        Ext.Array['each']([]['concat'](_0x33f5x2), function(_0x33f5x4) {
            _0x33f5x3['push']['apply'](_0x33f5x3, _0x33f5x1['getElementsFromEventRecord'](_0x33f5x4, null, null, true));
        });
        Ext.Array['each']([]['concat'](_0x33f5x3), function(_0x33f5x4) {
            Ext.fly(_0x33f5x4)['addCls']('sch-event-highlighted');
        });
    },
    highlightEventsBy: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = this['getEventsInView']();
        this['highlightEvents'](_0x33f5x2['filterBy'](_0x33f5x3, _0x33f5x1)['getRange']());
    },
    clearHighlightedEvents: function(_0x33f5x1, _0x33f5x2) {
        this['getEl']()['select']('.sch-event-highlighted')['removeCls']('sch-event-highlighted');
    },
    onEventCreated: function(_0x33f5x2) {},
    getEventStore: function() {
        return this['eventStore'];
    },
    registerEventEditor: function(_0x33f5x2) {
        this['eventEditor'] = _0x33f5x2;
    },
    getEventEditor: function() {
        return this['eventEditor'];
    },
    onEventUpdate: function(_0x33f5x1, _0x33f5x3, _0x33f5x2) {
        this[this['mode']]['onEventUpdate'](_0x33f5x1, _0x33f5x3, _0x33f5x2);
    },
    onEventAdd: function(_0x33f5x2, _0x33f5x1) {
        if (!Ext.isArray(_0x33f5x1)) {
            _0x33f5x1 = [ _0x33f5x1 ];
        }
        this[this['mode']]['onEventAdd'](_0x33f5x2, _0x33f5x1);
    },
    onAssignmentAdd: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this;
        Ext.Array['each'](_0x33f5x2, function(_0x33f5x5) {
            var _0x33f5x4 = _0x33f5x5['getResource']();
            _0x33f5x4 && _0x33f5x3['repaintEventsForResource'](_0x33f5x4);
        });
    },
    onAssignmentUpdate: function(_0x33f5x4, _0x33f5x9) {
        var _0x33f5x8 = this, _0x33f5x2 = _0x33f5x9['previous'] && _0x33f5x9['previous'][_0x33f5x9['resourceIdField']], _0x33f5x5 = _0x33f5x9['getResourceId'](), _0x33f5x1, _0x33f5x3;
        if (_0x33f5x2) {
            _0x33f5x1 = _0x33f5x8['getResourceStore']()['getModelById'](_0x33f5x2);
            _0x33f5x8['repaintEventsForResource'](_0x33f5x1);
        }
        if (_0x33f5x5) {
            _0x33f5x3 = _0x33f5x8['getResourceStore']()['getModelById'](_0x33f5x5);
            _0x33f5x8['repaintEventsForResource'](_0x33f5x3);
        }
    },
    onAssignmentRemove: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this;
        Ext.Array['each'](_0x33f5x2, function(_0x33f5x5) {
            var _0x33f5x8 = _0x33f5x5['getResourceId']();
            var _0x33f5x4 = _0x33f5x8 && _0x33f5x3['getResourceStore']()['getModelById'](_0x33f5x8);
            _0x33f5x4 && _0x33f5x3['repaintEventsForResource'](_0x33f5x4);
        });
    },
    onEventRemove: function(_0x33f5x2, _0x33f5x1) {
        this[this['mode']]['onEventRemove'](_0x33f5x2, _0x33f5x1);
    },
    setEventStore: function(_0x33f5x4, _0x33f5x1) {
        var _0x33f5x8 = this;
        var _0x33f5x7 = _0x33f5x8['getEventStore']();
        var _0x33f5x2 = {
            scope: _0x33f5x8,
            refresh: _0x33f5x8['onEventDataRefresh'],
            addrecords: _0x33f5x8['onEventAdd'],
            updaterecord: _0x33f5x8['onEventUpdate'],
            removerecords: _0x33f5x8['onEventRemove'],
            add: _0x33f5x8['onEventAdd'],
            update: _0x33f5x8['onEventUpdate'],
            remove: _0x33f5x8['onEventRemove'],
            nodeinsert: _0x33f5x8['onEventAdd'],
            nodeappend: _0x33f5x8['onEventAdd']
        };
        var _0x33f5x3 = {
            scope: _0x33f5x8,
            refresh: _0x33f5x8['onEventDataRefresh'],
            load: _0x33f5x8['onEventDataRefresh'],
            update: _0x33f5x8['onAssignmentUpdate'],
            add: _0x33f5x8['onAssignmentAdd'],
            remove: _0x33f5x8['onAssignmentRemove']
        };
        if (!Ext['versions']['touch']) {
            _0x33f5x2['clear'] = _0x33f5x8['onEventDataRefresh'];
        }
        if (!_0x33f5x1 && _0x33f5x8['eventStore']) {
            _0x33f5x8['eventStore']['setResourceStore'](null);
            if (_0x33f5x4 !== _0x33f5x8['eventStore'] && _0x33f5x8['eventStore']['autoDestroy']) {
                _0x33f5x8['eventStore']['destroy']();
            } else {
                if (_0x33f5x8['mun']) {
                    _0x33f5x8['mun'](_0x33f5x8['eventStore'], _0x33f5x2);
                    var _0x33f5x5 = _0x33f5x8['eventStore']['getAssignmentStore']();
                    if (_0x33f5x5) {
                        _0x33f5x8['mun'](_0x33f5x5, _0x33f5x3);
                    }
                } else {
                    _0x33f5x8['eventStore']['un'](_0x33f5x2);
                }
            }
            if (!_0x33f5x4) {
                _0x33f5x8['eventStore'] = null;
            }
        }
        if (_0x33f5x4) {
            _0x33f5x4 = Ext.data['StoreManager']['lookup'](_0x33f5x4);
            if (_0x33f5x8['mon']) {
                _0x33f5x8['mon'](_0x33f5x4, _0x33f5x2);
            } else {
                _0x33f5x4['on'](_0x33f5x2);
            }
            _0x33f5x8['eventStore'] = _0x33f5x4;
            _0x33f5x4['setResourceStore'](_0x33f5x8['getResourceStore']());
            var _0x33f5x9 = _0x33f5x4['getAssignmentStore']();
            if (_0x33f5x9) {
                _0x33f5x8['mon'](_0x33f5x9, _0x33f5x3);
            }
        }
        if (_0x33f5x4 && !_0x33f5x1) {
            this['getTimeAxisViewModel']()['setEventStore'](_0x33f5x4);
            this['getEventSelectionModel']()['bindStore'](_0x33f5x4);
            this['fireEvent']('eventstorechange', this, _0x33f5x4, _0x33f5x7);
            _0x33f5x8['refreshView']();
        }
    },
    onEventDataRefresh: function() {
        this['refreshKeepingScroll']();
    },
    onEventBarSelect: function(_0x33f5x2) {
        var _0x33f5x3 = this, _0x33f5x1, _0x33f5x4;
        if (_0x33f5x2 instanceof Ext.ux.Scheduler.model.Assignment) {
            _0x33f5x1 = _0x33f5x2['getEvent']();
            _0x33f5x4 = _0x33f5x2['getResource']();
        } else {
            _0x33f5x1 = _0x33f5x2;
            _0x33f5x4 = null;
        }
        Ext.Array['each'](_0x33f5x3['getElementsFromEventRecord'](_0x33f5x1, _0x33f5x4), function(_0x33f5x5) {
            _0x33f5x5['addCls'](_0x33f5x3['selectedEventCls']);
        });
    },
    onEventBarDeselect: function(_0x33f5x2) {
        var _0x33f5x3 = this, _0x33f5x1, _0x33f5x4;
        if (_0x33f5x2 instanceof Ext.ux.Scheduler.model.Assignment) {
            _0x33f5x1 = _0x33f5x2['getEvent']();
            _0x33f5x4 = _0x33f5x2['getResource']();
        } else {
            _0x33f5x1 = _0x33f5x2;
            _0x33f5x4 = null;
        }
        _0x33f5x1 && Ext.Array['each'](_0x33f5x3['getElementsFromEventRecord'](_0x33f5x1, _0x33f5x4), function(_0x33f5x5) {
            _0x33f5x5['removeCls'](_0x33f5x3['selectedEventCls']);
        });
    },
    refresh: function() {
        throw 'Abstract method call';
    },
    repaintEventsForResource: function(_0x33f5x2) {
        throw 'Abstract method call';
    },
    repaintAllEvents: function() {
        this['refreshKeepingScroll']();
    },
    scrollEventIntoView: function(_0x33f5x8, _0x33f5x1, _0x33f5x2, _0x33f5x9, _0x33f5x3) {
        var _0x33f5x4 = this, _0x33f5x5 = _0x33f5x8['getResources']();
        _0x33f5x5['length'] && _0x33f5x4['scrollResourceEventIntoView'](_0x33f5x5[0], _0x33f5x8, null, _0x33f5x1, _0x33f5x2, _0x33f5x9, _0x33f5x3);
    },
    getResourceStore: function() {
        return this['resourceStore'];
    },
    setResourceStore: function(_0x33f5x2) {
        var _0x33f5x1 = this['resourceStore'];
        this['resourceStore'] = _0x33f5x2;
        if (_0x33f5x2) {
            this['fireEvent']('resourcestorechange', this, _0x33f5x2, _0x33f5x1);
        }
    }
});

Ext.define('Ext.ux.Scheduler.preset.ViewPreset', {
    name: null,
    rowHeight: null,
    timeColumnWidth: 50,
    timeRowHeight: null,
    timeAxisColumnWidth: null,
    displayDateFormat: 'G:i',
    shiftUnit: 'HOUR',
    shiftIncrement: 1,
    defaultSpan: 12,
    timeResolution: null,
    headerConfig: null,
    columnLinesFor: 'middle',
    headers: null,
    mainHeader: 0,
    constructor: function(_0x33f5x2) {
        Ext.apply(this, _0x33f5x2);
    },
    getHeaders: function() {
        if (this['headers']) {
            return this['headers'];
        }
        var _0x33f5x2 = this['headerConfig'];
        this['mainHeader'] = _0x33f5x2['top'] ? 1 : 0;
        return this['headers'] = []['concat'](_0x33f5x2['top'] || [], _0x33f5x2['middle'] || [], _0x33f5x2['bottom'] || []);
    },
    getMainHeader: function() {
        return this['getHeaders']()[this['mainHeader']];
    },
    getBottomHeader: function() {
        var _0x33f5x2 = this['getHeaders']();
        return _0x33f5x2[_0x33f5x2['length'] - 1];
    },
    clone: function() {
        var _0x33f5x2 = {};
        var _0x33f5x1 = this;
        Ext.Array['each']([ 'rowHeight', 'timeColumnWidth', 'timeRowHeight', 'timeAxisColumnWidth', 'displayDateFormat', 'shiftUnit', 'shiftIncrement', 'defaultSpan', 'timeResolution', 'headerConfig' ], function(_0x33f5x3) {
            _0x33f5x2[_0x33f5x3] = _0x33f5x1[_0x33f5x3];
        });
        return new this['self'](Ext['clone'](_0x33f5x2));
    }
});

Ext.define('Ext.ux.Scheduler.preset.Manager', {
    extend: Ext.util['MixedCollection'],
    mixins: [ Ext.ux.Scheduler.mixin.Localizable ],
    singleton: true,
    defaultPresets: {
        secondAndMinute: {
            timeColumnWidth: 30,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'G:i:s',
            shiftIncrement: 10,
            shiftUnit: 'MINUTE',
            defaultSpan: 24,
            timeResolution: {
                unit: 'SECOND',
                increment: 5
            },
            headerConfig: {
                middle: {
                    unit: 'SECOND',
                    increment: 10,
                    align: 'center',
                    dateFormat: 's'
                },
                top: {
                    unit: 'MINUTE',
                    align: 'center',
                    dateFormat: 'D, d g:iA'
                }
            }
        },
        minuteAndHour: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'HOUR',
            defaultSpan: 24,
            timeResolution: {
                unit: 'MINUTE',
                increment: 30
            },
            headerConfig: {
                middle: {
                    unit: 'MINUTE',
                    increment: '30',
                    align: 'center',
                    dateFormat: 'i'
                },
                top: {
                    unit: 'HOUR',
                    align: 'center',
                    dateFormat: 'D, gA/d'
                }
            }
        },
        hourAndDay: {
            timeColumnWidth: 60,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'DAY',
            defaultSpan: 24,
            timeResolution: {
                unit: 'MINUTE',
                increment: 30
            },
            headerConfig: {
                middle: {
                    unit: 'HOUR',
                    align: 'center',
                    dateFormat: 'G:i'
                },
                top: {
                    unit: 'DAY',
                    align: 'center',
                    dateFormat: 'D d/m'
                }
            }
        },
        dayAndWeek: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d G:i',
            shiftUnit: 'DAY',
            shiftIncrement: 1,
            defaultSpan: 5,
            timeResolution: {
                unit: 'HOUR',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'DAY',
                    align: 'center',
                    dateFormat: 'D d M'
                },
                top: {
                    unit: 'WEEK',
                    align: 'center',
                    renderer: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
                        return Ext.ux.Scheduler.util.Date['getShortNameOfUnit']('WEEK') + '.' + Ext.Date['format'](_0x33f5x3, 'W M Y');
                    }
                }
            }
        },
        weekAndDay: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'WEEK',
            shiftIncrement: 1,
            defaultSpan: 1,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                bottom: {
                    unit: 'DAY',
                    align: 'center',
                    increment: 1,
                    dateFormat: 'd/m'
                },
                middle: {
                    unit: 'WEEK',
                    dateFormat: 'D d M'
                }
            }
        },
        weekAndMonth: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'WEEK',
            shiftIncrement: 5,
            defaultSpan: 6,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'WEEK',
                    align: 'center',
                    renderer: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
                        return Ext.Date['format'](_0x33f5x3, 'd M');
                    }
                },
                top: {
                    unit: 'MONTH',
                    align: 'center',
                    dateFormat: 'M Y'
                }
            }
        },
        monthAndYear: {
            timeColumnWidth: 110,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftIncrement: 3,
            shiftUnit: 'MONTH',
            defaultSpan: 12,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'MONTH',
                    align: 'center',
                    dateFormat: 'M Y'
                },
                top: {
                    unit: 'YEAR',
                    align: 'center',
                    dateFormat: 'Y'
                }
            }
        },
        year: {
            timeColumnWidth: 100,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'YEAR',
            shiftIncrement: 1,
            defaultSpan: 1,
            timeResolution: {
                unit: 'MONTH',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'QUARTER',
                    align: 'center',
                    renderer: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
                        return Ext.String['format'](Ext.ux.Scheduler.util.Date['getShortNameOfUnit']('QUARTER')['toUpperCase']() + '{0}', Math['floor'](_0x33f5x3['getMonth']() / 3) + 1);
                    }
                },
                top: {
                    unit: 'YEAR',
                    align: 'center',
                    dateFormat: 'Y'
                }
            }
        },
        manyYears: {
            timeColumnWidth: 50,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'YEAR',
            shiftIncrement: 1,
            defaultSpan: 1,
            timeResolution: {
                unit: 'YEAR',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'YEAR',
                    align: 'center',
                    dateFormat: 'Y',
                    increment: 5
                },
                bottom: {
                    unit: 'YEAR',
                    align: 'center',
                    dateFormat: 'y',
                    increment: 1
                }
            }
        },
        weekAndDayLetter: {
            timeColumnWidth: 20,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'WEEK',
            shiftIncrement: 1,
            defaultSpan: 10,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                bottom: {
                    unit: 'DAY',
                    align: 'center',
                    renderer: function(_0x33f5x2) {
                        return Ext.Date['dayNames'][_0x33f5x2['getDay']()]['substring'](0, 1);
                    }
                },
                middle: {
                    unit: 'WEEK',
                    dateFormat: 'D d M Y'
                }
            }
        },
        weekDateAndMonth: {
            timeColumnWidth: 30,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'Y-m-d',
            shiftUnit: 'WEEK',
            shiftIncrement: 1,
            defaultSpan: 10,
            timeResolution: {
                unit: 'DAY',
                increment: 1
            },
            headerConfig: {
                middle: {
                    unit: 'WEEK',
                    align: 'center',
                    dateFormat: 'd'
                },
                top: {
                    unit: 'MONTH',
                    dateFormat: 'Y F'
                }
            }
        },
        day: {
            timeRowHeight: 40,
            calendarColumnWidth: 200,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'DAY',
            defaultSpan: 1,
            timeResolution: {
                unit: 'MINUTE',
                increment: 30
            },
            headerConfig: {
                bottom: {
                    unit: 'HOUR',
                    align: 'center',
                    renderer: function(_0x33f5x2) {
                        return Ext.String['format']('<div class="sch-calendarcolumn-ct"><span class="sch-calendarcolumn-hours">{0}</span><span class="sch-calendarcolumn-minutes">{1}</span></div>', Ext.Date['format'](_0x33f5x2, 'H'), Ext.Date['format'](_0x33f5x2, 'i'));
                    }
                },
                middle: {
                    unit: 'DAY',
                    align: 'center',
                    dateFormat: 'D d/m',
                    splitUnit: 'DAY'
                }
            }
        },
        week: {
            timeRowHeight: 40,
            calendarColumnWidth: 164,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'WEEK',
            defaultSpan: 24,
            timeResolution: {
                unit: 'MINUTE',
                increment: 30
            },
            headerConfig: {
                bottom: {
                    unit: 'HOUR',
                    align: 'center',
                    dateFormat: 'H:i',
                    renderer: function(_0x33f5x2) {
                        return Ext.String['format']('<div class="sch-calendarcolumn-ct"><span class="sch-calendarcolumn-hours">{0}</span><span class="sch-calendarcolumn-minutes">{1}</span></div>', Ext.Date['format'](_0x33f5x2, 'H'), Ext.Date['format'](_0x33f5x2, 'i'));
                    }
                },
                middle: {
                    unit: 'WEEK',
                    align: 'center',
                    dateFormat: 'D d',
                    splitUnit: 'DAY'
                }
            }
        },
        month: {
            timeColumnWidth: 60,
            rowHeight: 24,
            resourceColumnWidth: 100,
            displayDateFormat: 'G:i',
            shiftIncrement: 1,
            shiftUnit: 'MONTH',
            defaultSpan: 4,
            timeResolution: {
                unit: 'HOUR',
                increment: 12
            },
            headerConfig: {
                bottom: {
                    unit: 'DAY',
                    align: 'center',
                    dateFormat: 'D',
                    splitUnit: 'WEEK'
                },
                middle: {
                    unit: 'WEEK',
                    align: 'center',
                    dateFormat: 'D d/m'
                },
                top: {
                    unit: 'MONTH',
                    align: 'center',
                    renderer: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
                        return Ext.Date['format'](_0x33f5x3, 'd/m') + ' - ' + Ext.Date['format'](_0x33f5x1, 'd/m, Y');
                    },
                    splitUnit: 'WEEK'
                }
            }
        }
    },
    constructor: function() {
        this['callParent'](arguments);
        this['registerDefaults']();
    },
    onLocalized: function() {
        var _0x33f5x2 = this;
        this['eachKey'](function(_0x33f5x3, _0x33f5x4) {
            if (_0x33f5x2['l10n'][_0x33f5x3]) {
                var _0x33f5x1 = _0x33f5x2.L(_0x33f5x3);
                _0x33f5x1['displayDateFormat'] && (_0x33f5x4['displayDateFormat'] = _0x33f5x1['displayDateFormat']);
                _0x33f5x1['middleDateFormat'] && (_0x33f5x4['headerConfig']['middle']['dateFormat'] = _0x33f5x1['middleDateFormat']);
                _0x33f5x1['topDateFormat'] && (_0x33f5x4['headerConfig']['top']['dateFormat'] = _0x33f5x1['topDateFormat']);
                _0x33f5x1['bottomDateFormat'] && (_0x33f5x4['headerConfig']['bottom']['dateFormat'] = _0x33f5x1['bottomDateFormat']);
            }
        });
    },
    registerPreset: function(_0x33f5x1, _0x33f5x2) {
        if (_0x33f5x2) {
            var _0x33f5x3 = _0x33f5x2['headerConfig'];
            var _0x33f5x8 = Ext.ux.Scheduler.util.Date;
            for (var _0x33f5x9 in _0x33f5x3) {
                if (_0x33f5x3['hasOwnProperty'](_0x33f5x9)) {
                    if (_0x33f5x8[_0x33f5x3[_0x33f5x9]['unit']]) {
                        _0x33f5x3[_0x33f5x9]['unit'] = _0x33f5x8[_0x33f5x3[_0x33f5x9]['unit']['toUpperCase']()];
                    }
                    if (_0x33f5x8[_0x33f5x3[_0x33f5x9]['splitUnit']]) {
                        _0x33f5x3[_0x33f5x9]['splitUnit'] = _0x33f5x8[_0x33f5x3[_0x33f5x9]['splitUnit']['toUpperCase']()];
                    }
                }
            }
            if (!_0x33f5x2['timeColumnWidth']) {
                _0x33f5x2['timeColumnWidth'] = 50;
            }
            if (!_0x33f5x2['rowHeight']) {
                _0x33f5x2['rowHeight'] = 24;
            }
            var _0x33f5x4 = _0x33f5x2['timeResolution'];
            if (_0x33f5x4 && _0x33f5x8[_0x33f5x4['unit']]) {
                _0x33f5x4['unit'] = _0x33f5x8[_0x33f5x4['unit']['toUpperCase']()];
            }
            var _0x33f5x5 = _0x33f5x2['shiftUnit'];
            if (_0x33f5x5 && _0x33f5x8[_0x33f5x5]) {
                _0x33f5x2['shiftUnit'] = _0x33f5x8[_0x33f5x5['toUpperCase']()];
            }
        }
        if (this['isValidPreset'](_0x33f5x2)) {
            if (this['containsKey'](_0x33f5x1)) {
                this['removeAtKey'](_0x33f5x1);
            }
            _0x33f5x2['name'] = _0x33f5x1;
            this['add'](_0x33f5x1, new Ext.ux.Scheduler.preset.ViewPreset(_0x33f5x2));
        } else {
            throw 'Invalid preset, please check your configuration';
        }
    },
    isValidPreset: function(_0x33f5x2) {
        var _0x33f5x5 = Ext.ux.Scheduler.util.Date, _0x33f5x3 = true, _0x33f5x4 = Ext.ux.Scheduler.util.Date['units'], _0x33f5x1 = {};
        for (var _0x33f5x8 in _0x33f5x2['headerConfig']) {
            if (_0x33f5x2['headerConfig']['hasOwnProperty'](_0x33f5x8)) {
                _0x33f5x1[_0x33f5x8] = true;
                _0x33f5x3 = _0x33f5x3 && Ext.Array.indexOf(_0x33f5x4, _0x33f5x2['headerConfig'][_0x33f5x8]['unit']) >= 0;
            }
        }
        if (!(_0x33f5x2['columnLinesFor'] in _0x33f5x1)) {
            _0x33f5x2['columnLinesFor'] = 'middle';
        }
        if (_0x33f5x2['timeResolution']) {
            _0x33f5x3 = _0x33f5x3 && Ext.Array.indexOf(_0x33f5x4, _0x33f5x2['timeResolution']['unit']) >= 0;
        }
        if (_0x33f5x2['shiftUnit']) {
            _0x33f5x3 = _0x33f5x3 && Ext.Array.indexOf(_0x33f5x4, _0x33f5x2['shiftUnit']) >= 0;
        }
        return _0x33f5x3;
    },
    getPreset: function(_0x33f5x2) {
        return this['get'](_0x33f5x2);
    },
    deletePreset: function(_0x33f5x2) {
        this['removeAtKey'](_0x33f5x2);
    },
    registerDefaults: function() {
        var _0x33f5x1 = this, _0x33f5x2 = this['defaultPresets'];
        for (var _0x33f5x3 in _0x33f5x2) {
            _0x33f5x1['registerPreset'](_0x33f5x3, _0x33f5x2[_0x33f5x3]);
        }
    }
});

Ext.define('Ext.ux.Scheduler.view.model.TimeAxis', {
    extend: Ext.util['Observable'],
    timeAxis: null,
    availableWidth: 0,
    tickWidth: 100,
    snapToIncrement: false,
    forceFit: false,
    headerConfig: null,
    headers: null,
    mainHeader: 0,
    timeAxisColumnWidth: null,
    resourceColumnWidth: null,
    calendarColumnWidth: null,
    timeColumnWidth: null,
    rowHeightHorizontal: null,
    rowHeightVertical: null,
    mode: 'horizontal',
    suppressFit: false,
    refCount: 0,
    columnConfig: {},
    viewPreset: null,
    columnLinesFor: 'middle',
    eventStore: null,
    originalTickWidth: null,
    constructor: function(_0x33f5x2) {
        var _0x33f5x3 = this;
        Ext.apply(this, _0x33f5x2);
        if (this['viewPreset']) {
            if (this['viewPreset'] instanceof Ext.ux.Scheduler.preset.ViewPreset) {
                this['consumeViewPreset'](this['viewPreset']);
            } else {
                var _0x33f5x1 = Ext.ux.Scheduler.preset.Manager.getPreset(this['viewPreset']);
                _0x33f5x1 && this['consumeViewPreset'](_0x33f5x1);
            }
        }
        _0x33f5x3['timeAxis']['on']('reconfigure', _0x33f5x3['onTimeAxisReconfigure'], _0x33f5x3);
        this['callParent'](arguments);
    },
    destroy: function() {
        this['timeAxis']['un']('reconfigure', this['onTimeAxisReconfigure'], this);
    },
    onTimeAxisReconfigure: function(_0x33f5x2, _0x33f5x1) {
        if (!_0x33f5x1) {
            this['update']();
        }
    },
    reconfigure: function(_0x33f5x2) {
        this['headers'] = null;
        Ext.apply(this, _0x33f5x2);
        switch (this['mode']) {
          case 'horizontal':
            this['setTickWidth'](this['timeColumnWidth']);
            break;

          case 'vertical':
            this['setTickWidth'](this['rowHeightVertical']);
            break;

          case 'calendar':
            this['setTickWidth'](this['rowHeightVertical']);
            break;
        }
        this['fireEvent']('reconfigure', this);
    },
    getColumnConfig: function() {
        return this['columnConfig'];
    },
    update: function(_0x33f5x4, _0x33f5x1) {
        var _0x33f5x5 = this['timeAxis'], _0x33f5x3 = this['headerConfig'];
        this['availableWidth'] = Math['max'](_0x33f5x4 || this['availableWidth'], 0);
        if (!Ext['isNumber'](this['availableWidth'])) {
            throw 'Invalid available width provided to Ext.ux.Scheduler.view.model.TimeAxis';
        }
        if (this['forceFit'] && this['availableWidth'] <= 0) {
            return;
        }
        this['columnConfig'] = {};
        for (var _0x33f5x8 in _0x33f5x3) {
            if (_0x33f5x3[_0x33f5x8]['cellGenerator']) {
                this['columnConfig'][_0x33f5x8] = _0x33f5x3[_0x33f5x8]['cellGenerator']['call'](this, _0x33f5x5['getStart'](), _0x33f5x5['getEnd']());
            } else {
                this['columnConfig'][_0x33f5x8] = this['createHeaderRow'](_0x33f5x8, _0x33f5x3[_0x33f5x8]);
            }
        }
        var _0x33f5x2 = this['calculateTickWidth'](this['originalTickWidth']);
        if (!Ext['isNumber'](_0x33f5x2) || _0x33f5x2 <= 0) {
            throw 'Invalid column width calculated in Ext.ux.Scheduler.view.model.TimeAxis';
        }
        this['updateTickWidth'](_0x33f5x2);
        if (!_0x33f5x1) {
            this['fireEvent']('update', this);
        }
    },
    createHeaderRow: function(_0x33f5x2, _0x33f5x4) {
        var _0x33f5x3 = [], _0x33f5x5 = this, _0x33f5x8 = _0x33f5x4['align'], _0x33f5x1 = Ext.Date['clearTime'](new Date());
        _0x33f5x5['forEachInterval'](_0x33f5x2, function(_0x33f5xb, _0x33f5x9, _0x33f5x7) {
            var _0x33f5xe = {
                align: _0x33f5x8,
                start: _0x33f5xb,
                end: _0x33f5x9,
                headerCls: ''
            };
            if (_0x33f5x4['renderer']) {
                _0x33f5xe['header'] = _0x33f5x4['renderer']['call'](_0x33f5x4['scope'] || _0x33f5x5, _0x33f5xb, _0x33f5x9, _0x33f5xe, _0x33f5x7, _0x33f5x5['eventStore']);
            } else {
                _0x33f5xe['header'] = Ext.Date['format'](_0x33f5xb, _0x33f5x4['dateFormat']);
            }
            if (_0x33f5x4['unit'] === Ext.ux.Scheduler.util.Date['DAY'] && (!_0x33f5x4['increment'] || _0x33f5x4['increment'] === 1)) {
                _0x33f5xe['headerCls'] += ' sch-dayheadercell-' + _0x33f5xb['getDay']();
                if (Ext.Date['clearTime'](_0x33f5xb, true) - _0x33f5x1 === 0) {
                    _0x33f5xe['headerCls'] += ' sch-dayheadercell-today';
                }
            }
            _0x33f5x3['push'](_0x33f5xe);
        });
        return _0x33f5x3;
    },
    getDistanceBetweenDates: function(_0x33f5x1, _0x33f5x2) {
        return Math['round'](this['getPositionFromDate'](_0x33f5x2, true) - this['getPositionFromDate'](_0x33f5x1));
    },
    getPositionFromDate: function(_0x33f5x5, _0x33f5x4) {
        if (this['mode'] === 'calendar') {
            var _0x33f5x2 = this['rowHeightVertical'];
            var _0x33f5x3 = this['getHeaders']();
            var _0x33f5x1 = this['timeAxis']['getStart']();
            var _0x33f5x9 = Ext.ux.Scheduler.util.Date;
            var _0x33f5xf = _0x33f5x9['mergeDates'](_0x33f5x1, _0x33f5x5, _0x33f5x3[1]['unit']);
            var _0x33f5xe = _0x33f5x9['getDurationInUnit'](_0x33f5x1, _0x33f5xf, _0x33f5x3[1]['unit'], true) * _0x33f5x2;
            var _0x33f5xb = Math['round'](_0x33f5xe);
            if (_0x33f5xb === 0 && _0x33f5x4) {
                return this['calendarRowsAmount'] * _0x33f5x2;
            }
            return _0x33f5xb;
        } else {
            var _0x33f5x7 = -1, _0x33f5x8 = this['timeAxis']['getTickFromDate'](_0x33f5x5);
            if (_0x33f5x8 >= 0) {
                _0x33f5x7 = Math['round'](this['tickWidth'] * (_0x33f5x8 - this['timeAxis']['visibleTickStart']));
            }
            return _0x33f5x7;
        }
    },
    getDateFromPosition: function(_0x33f5xf, _0x33f5x11) {
        if (this['mode'] === 'calendar') {
            var _0x33f5x1 = this['rowHeightVertical'];
            var _0x33f5x7 = Ext.ux.Scheduler.util.Date;
            var _0x33f5x3 = this['timeAxis']['getStart']();
            var _0x33f5x4 = this['getHeaders']();
            var _0x33f5xe = _0x33f5x7['add'](_0x33f5x3, _0x33f5x4[0]['splitUnit'], Math['floor'](_0x33f5xf[0] / this['calendarColumnWidth']));
            var _0x33f5x9 = this['timeAxis']['first']();
            var _0x33f5x5 = (_0x33f5x9['get']('end') - _0x33f5x9['get']('start')) / _0x33f5x1;
            var _0x33f5xb = _0x33f5x7['add'](_0x33f5xe, _0x33f5x7.MILLI, Math['round'](_0x33f5xf[1] * _0x33f5x5));
            if (_0x33f5x11) {
                _0x33f5xb = this['timeAxis'][_0x33f5x11 + 'Date'](_0x33f5xb);
            }
            return _0x33f5xb;
        } else {
            var _0x33f5x8 = _0x33f5xf / this['getTickWidth']() + this['timeAxis']['visibleTickStart'], _0x33f5x2 = this['timeAxis']['getCount']();
            if (_0x33f5x8 < 0 || _0x33f5x8 > _0x33f5x2) {
                return null;
            }
            return this['timeAxis']['getDateFromTick'](_0x33f5x8, _0x33f5x11);
        }
    },
    getSingleUnitInPixels: function(_0x33f5x2) {
        return Ext.ux.Scheduler.util.Date['getUnitToBaseUnitRatio'](this['timeAxis']['getUnit'](), _0x33f5x2) * this['tickWidth'] / this['timeAxis']['increment'];
    },
    getSnapPixelAmount: function() {
        if (this['snapToIncrement']) {
            var _0x33f5x2 = this['timeAxis']['getResolution']();
            return (_0x33f5x2['increment'] || 1) * this['getSingleUnitInPixels'](_0x33f5x2['unit']);
        } else {
            return 1;
        }
    },
    getTickWidth: function() {
        return this['tickWidth'];
    },
    setTickWidth: function(_0x33f5x1, _0x33f5x2) {
        this['originalTickWidth'] = _0x33f5x1;
        this['updateTickWidth'](_0x33f5x1);
        this['update'](null, _0x33f5x2);
    },
    updateTickWidth: function(_0x33f5x2) {
        this['tickWidth'] = _0x33f5x2;
        switch (this['mode']) {
          case 'horizontal':
            this['timeColumnWidth'] = _0x33f5x2;
            break;

          case 'vertical':
            this['rowHeightVertical'] = _0x33f5x2;
            break;

          case 'calendar':
            this['rowHeightVertical'] = _0x33f5x2;
            break;
        }
    },
    getTotalWidth: function() {
        return Math['round'](this['tickWidth'] * this['timeAxis']['getVisibleTickTimeSpan']());
    },
    calculateTickWidth: function(_0x33f5x5) {
        var _0x33f5xb = this['forceFit'];
        var _0x33f5x7 = this['timeAxis'];
        var _0x33f5x3 = 0, _0x33f5x9 = _0x33f5x7['getUnit'](), _0x33f5xe = Number['MAX_VALUE'], _0x33f5x4 = Ext.ux.Scheduler.util.Date;
        if (this['snapToIncrement']) {
            var _0x33f5x8 = _0x33f5x7['getResolution']();
            _0x33f5xe = _0x33f5x4['getUnitToBaseUnitRatio'](_0x33f5x9, _0x33f5x8['unit']) * _0x33f5x8['increment'];
        } else {
            var _0x33f5xf = _0x33f5x4['getMeasuringUnit'](_0x33f5x9);
            _0x33f5xe = Math['min'](_0x33f5xe, _0x33f5x4['getUnitToBaseUnitRatio'](_0x33f5x9, _0x33f5xf));
        }
        if (!this['suppressFit']) {
            var _0x33f5x11 = this['mode'] === 'calendar' ? _0x33f5x7['endTime'] - _0x33f5x7['startTime'] : _0x33f5x7['getVisibleTickTimeSpan'](), _0x33f5x1 = Math[_0x33f5xb ? 'floor' : 'round'](this['getAvailableWidth']() / _0x33f5x11);
            _0x33f5x3 = _0x33f5xb || _0x33f5x5 < _0x33f5x1 ? _0x33f5x1 : _0x33f5x5;
            if (_0x33f5xe > 0 && (!_0x33f5xb || _0x33f5xe < 1)) {
                var _0x33f5x2 = Ext['versions']['touch'] && _0x33f5xb ? 'ceil' : _0x33f5xb ? 'floor' : 'round';
                _0x33f5x3 = Math['round'](Math['max'](1, Math[_0x33f5x2](_0x33f5xe * _0x33f5x3)) / _0x33f5xe);
            }
        } else {
            _0x33f5x3 = _0x33f5x5;
        }
        return _0x33f5x3;
    },
    getAvailableWidth: function() {
        return this['availableWidth'];
    },
    setAvailableWidth: function(_0x33f5x2) {
        this['availableWidth'] = Math['max'](0, _0x33f5x2);
        var _0x33f5x1 = this['calculateTickWidth'](this['originalTickWidth']);
        if (_0x33f5x1 !== this['tickWidth']) {
            this['update']();
        }
    },
    fitToAvailableWidth: function(_0x33f5x2) {
        var _0x33f5x1 = Math['floor'](this['availableWidth'] / this['timeAxis']['getVisibleTickTimeSpan']());
        this['setTickWidth'](_0x33f5x1, _0x33f5x2);
    },
    setForceFit: function(_0x33f5x2) {
        if (_0x33f5x2 !== this['forceFit']) {
            this['forceFit'] = _0x33f5x2;
            this['update']();
        }
    },
    setSnapToIncrement: function(_0x33f5x2) {
        if (_0x33f5x2 !== this['snapToIncrement']) {
            this['snapToIncrement'] = _0x33f5x2;
            this['update']();
        }
    },
    getViewRowHeight: function() {
        var _0x33f5x2 = this['mode'] == 'horizontal' ? this['rowHeightHorizontal'] : this['rowHeightVertical'];
        if (!_0x33f5x2) {
            throw 'rowHeight info not available';
        }
        return _0x33f5x2;
    },
    setViewRowHeight: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x4 = this['mode'] === 'horizontal';
        var _0x33f5x1 = 'rowHeight' + Ext.String['capitalize'](this['mode']);
        if (this[_0x33f5x1] != _0x33f5x3) {
            this[_0x33f5x1] = _0x33f5x3;
            if (_0x33f5x4) {
                if (!_0x33f5x2) {
                    this['fireEvent']('update', this);
                }
            } else {
                this['setTickWidth'](_0x33f5x3, _0x33f5x2);
            }
        }
    },
    setViewColumnWidth: function(_0x33f5x1, _0x33f5x2) {
        switch (this['mode']) {
          case 'horizontal':
            this['setTickWidth'](_0x33f5x1, _0x33f5x2);
            break;

          case 'vertical':
            this['resourceColumnWidth'] = _0x33f5x1;
            break;

          case 'calendar':
            this['calendarColumnWidth'] = _0x33f5x1;
            break;
        }
        if (!_0x33f5x2) {
            this['fireEvent']('columnwidthchange', this, _0x33f5x1);
        }
    },
    getHeaders: function() {
        if (this['headers']) {
            return this['headers'];
        }
        var _0x33f5x2 = this['headerConfig'];
        this['mainHeader'] = _0x33f5x2['top'] ? 1 : 0;
        return this['headers'] = []['concat'](_0x33f5x2['top'] || [], _0x33f5x2['middle'] || [], _0x33f5x2['bottom'] || []);
    },
    getMainHeader: function() {
        return this['getHeaders']()[this['mainHeader']];
    },
    getBottomHeader: function() {
        var _0x33f5x2 = this['getHeaders']();
        return _0x33f5x2[_0x33f5x2['length'] - 1];
    },
    forEachInterval: function(_0x33f5x1, _0x33f5x2, _0x33f5x4) {
        _0x33f5x4 = _0x33f5x4 || this;
        var _0x33f5x3 = this['headerConfig'];
        if (!_0x33f5x3) {
            return;
        }
        if (_0x33f5x1 === 'top' || _0x33f5x1 === 'middle' && _0x33f5x3['bottom']) {
            var _0x33f5x5 = _0x33f5x3[_0x33f5x1];
            this['timeAxis']['forEachAuxInterval'](_0x33f5x5['unit'], _0x33f5x5['increment'], _0x33f5x2, _0x33f5x4);
        } else {
            this['timeAxis']['each'](function(_0x33f5x9, _0x33f5x8) {
                return _0x33f5x2['call'](_0x33f5x4, _0x33f5x9['data']['start'], _0x33f5x9['data']['end'], _0x33f5x8);
            });
        }
    },
    forEachMainInterval: function(_0x33f5x2, _0x33f5x1) {
        this['forEachInterval']('middle', _0x33f5x2, _0x33f5x1);
    },
    getLowestHeader: function() {
        return 'bottom' in this['headerConfig'] ? 'bottom' : 'middle';
    },
    consumeViewPreset: function(_0x33f5x2) {
        this['headers'] = null;
        var _0x33f5x1 = this['mode'] == 'horizontal';
        Ext.apply(this, {
            headerConfig: _0x33f5x2['headerConfig'],
            columnLinesFor: _0x33f5x2['columnLinesFor'] || 'middle',
            rowHeightHorizontal: _0x33f5x2['rowHeight'],
            tickWidth: _0x33f5x1 ? _0x33f5x2['timeColumnWidth'] : _0x33f5x2['timeRowHeight'] || _0x33f5x2['timeColumnWidth'] || 60,
            timeColumnWidth: _0x33f5x2['timeColumnWidth'],
            rowHeightVertical: _0x33f5x2['timeRowHeight'] || _0x33f5x2['timeColumnWidth'] || 60,
            timeAxisColumnWidth: _0x33f5x2['timeAxisColumnWidth'],
            resourceColumnWidth: _0x33f5x2['resourceColumnWidth'] || 100
        });
        this['originalTickWidth'] = this['tickWidth'];
    },
    setEventStore: function(_0x33f5x2) {
        this['eventStore'] = _0x33f5x2;
    }
});

Ext.define('Ext.ux.Scheduler.mixin.Zoomable', {
    zoomLevels: [ {
        width: 40,
        increment: 1,
        resolution: 1,
        preset: 'manyYears',
        resolutionUnit: 'YEAR'
    }, {
        width: 80,
        increment: 1,
        resolution: 1,
        preset: 'manyYears',
        resolutionUnit: 'YEAR'
    }, {
        width: 30,
        increment: 1,
        resolution: 1,
        preset: 'year',
        resolutionUnit: 'MONTH'
    }, {
        width: 50,
        increment: 1,
        resolution: 1,
        preset: 'year',
        resolutionUnit: 'MONTH'
    }, {
        width: 100,
        increment: 1,
        resolution: 1,
        preset: 'year',
        resolutionUnit: 'MONTH'
    }, {
        width: 200,
        increment: 1,
        resolution: 1,
        preset: 'year',
        resolutionUnit: 'MONTH'
    }, {
        width: 100,
        increment: 1,
        resolution: 7,
        preset: 'monthAndYear',
        resolutionUnit: 'DAY'
    }, {
        width: 30,
        increment: 1,
        resolution: 1,
        preset: 'weekDateAndMonth',
        resolutionUnit: 'DAY'
    }, {
        width: 35,
        increment: 1,
        resolution: 1,
        preset: 'weekAndMonth',
        resolutionUnit: 'DAY'
    }, {
        width: 50,
        increment: 1,
        resolution: 1,
        preset: 'weekAndMonth',
        resolutionUnit: 'DAY'
    }, {
        width: 20,
        increment: 1,
        resolution: 1,
        preset: 'weekAndDayLetter'
    }, {
        width: 50,
        increment: 1,
        resolution: 1,
        preset: 'weekAndDay',
        resolutionUnit: 'HOUR'
    }, {
        width: 100,
        increment: 1,
        resolution: 1,
        preset: 'weekAndDay',
        resolutionUnit: 'HOUR'
    }, {
        width: 50,
        increment: 6,
        resolution: 30,
        preset: 'hourAndDay',
        resolutionUnit: 'MINUTE'
    }, {
        width: 100,
        increment: 6,
        resolution: 30,
        preset: 'hourAndDay',
        resolutionUnit: 'MINUTE'
    }, {
        width: 60,
        increment: 2,
        resolution: 30,
        preset: 'hourAndDay',
        resolutionUnit: 'MINUTE'
    }, {
        width: 60,
        increment: 1,
        resolution: 30,
        preset: 'hourAndDay',
        resolutionUnit: 'MINUTE'
    }, {
        width: 30,
        increment: 15,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 60,
        increment: 15,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 130,
        increment: 15,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 60,
        increment: 5,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 100,
        increment: 5,
        resolution: 5,
        preset: 'minuteAndHour'
    }, {
        width: 50,
        increment: 2,
        resolution: 1,
        preset: 'minuteAndHour'
    }, {
        width: 30,
        increment: 10,
        resolution: 5,
        preset: 'secondAndMinute'
    }, {
        width: 60,
        increment: 10,
        resolution: 5,
        preset: 'secondAndMinute'
    }, {
        width: 130,
        increment: 5,
        resolution: 5,
        preset: 'secondAndMinute'
    } ],
    minZoomLevel: null,
    maxZoomLevel: null,
    visibleZoomFactor: 5,
    zoomKeepsOriginalTimespan: false,
    cachedCenterDate: null,
    initializeZooming: function() {
        this['zoomLevels'] = this['zoomLevels']['slice']();
        this['setMinZoomLevel'](this['minZoomLevel'] || 0);
        this['setMaxZoomLevel'](this['maxZoomLevel'] !== null ? this['maxZoomLevel'] : this['zoomLevels']['length'] - 1);
        this['on']('viewchange', this['clearCenterDateCache'], this);
    },
    getZoomLevelUnit: function(_0x33f5x2) {
        return Ext.ux.Scheduler.preset.Manager.getPreset(_0x33f5x2['preset'])['getBottomHeader']()['unit'];
    },
    getMilliSecondsPerPixelForZoomLevel: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x1 = Ext.ux.Scheduler.util.Date;
        return Math['round']((_0x33f5x1['add'](new Date(1, 0, 1), this['getZoomLevelUnit'](_0x33f5x3), _0x33f5x3['increment']) - new Date(1, 0, 1)) / (_0x33f5x2 ? _0x33f5x3['width'] : _0x33f5x3['actualWidth'] || _0x33f5x3['width']));
    },
    presetToZoomLevel: function(_0x33f5x1) {
        var _0x33f5x2 = Ext.ux.Scheduler.preset.Manager.getPreset(_0x33f5x1);
        return {
            preset: _0x33f5x1,
            increment: _0x33f5x2['getBottomHeader']()['increment'] || 1,
            resolution: _0x33f5x2['timeResolution']['increment'],
            resolutionUnit: _0x33f5x2['timeResolution']['unit'],
            width: _0x33f5x2['timeColumnWidth']
        };
    },
    zoomLevelToPreset: function(_0x33f5x3) {
        var _0x33f5x1 = Ext.ux.Scheduler.preset.Manager.getPreset(_0x33f5x3['preset'])['clone']();
        var _0x33f5x2 = _0x33f5x1['getBottomHeader']();
        _0x33f5x2['increment'] = _0x33f5x3['increment'];
        _0x33f5x1['timeColumnWidth'] = _0x33f5x3['width'];
        if (_0x33f5x3['resolutionUnit'] || _0x33f5x3['resolution']) {
            _0x33f5x1['timeResolution'] = {
                unit: _0x33f5x3['resolutionUnit'] || _0x33f5x1['timeResolution']['unit'] || _0x33f5x2['unit'],
                increment: _0x33f5x3['resolution'] || _0x33f5x1['timeResolution']['increment'] || 1
            };
        }
        return _0x33f5x1;
    },
    calculateCurrentZoomLevel: function() {
        var _0x33f5x9 = this['presetToZoomLevel'](this['viewPreset']), _0x33f5x4 = Number['MAX_VALUE'], _0x33f5x1 = this['timeAxisViewModel'], _0x33f5x8 = _0x33f5x1['timeColumnWidth'];
        _0x33f5x9['width'] = _0x33f5x8;
        _0x33f5x9['increment'] = _0x33f5x1['getBottomHeader']()['increment'] || 1;
        for (var _0x33f5x3 = 0, _0x33f5x2 = this['zoomLevels']['length']; _0x33f5x3 < _0x33f5x2; _0x33f5x3++) {
            var _0x33f5x5 = this['zoomLevels'][_0x33f5x3];
            if (_0x33f5x5['preset'] !== _0x33f5x9['preset']) {
                continue;
            }
            var _0x33f5x7 = Math['abs'](_0x33f5x5['width'] - _0x33f5x8);
            if (_0x33f5x7 < _0x33f5x4) {
                _0x33f5x4 = _0x33f5x7;
                _0x33f5x9['actualWidth'] = _0x33f5x5['actualWidth'];
                _0x33f5x9['width'] = _0x33f5x5['width'];
            }
        }
        return _0x33f5x9;
    },
    getCurrentZoomLevelIndex: function() {
        var _0x33f5x8 = this['calculateCurrentZoomLevel']();
        var _0x33f5x1 = this['getMilliSecondsPerPixelForZoomLevel'](_0x33f5x8);
        var _0x33f5x5 = this['zoomLevels'];
        for (var _0x33f5x3 = 0; _0x33f5x3 < _0x33f5x5['length']; _0x33f5x3++) {
            var _0x33f5x4 = this['getMilliSecondsPerPixelForZoomLevel'](_0x33f5x5[_0x33f5x3]);
            if (_0x33f5x4 == _0x33f5x1) {
                return _0x33f5x3;
            }
            if (_0x33f5x3 === 0 && _0x33f5x1 > _0x33f5x4) {
                return -.5;
            }
            if (_0x33f5x3 == _0x33f5x5['length'] - 1 && _0x33f5x1 < _0x33f5x4) {
                return _0x33f5x5['length'] - 1 + .5;
            }
            var _0x33f5x2 = this['getMilliSecondsPerPixelForZoomLevel'](_0x33f5x5[_0x33f5x3 + 1]);
            if (_0x33f5x4 > _0x33f5x1 && _0x33f5x1 > _0x33f5x2) {
                return _0x33f5x3 + .5;
            }
        }
        throw 'Can\'t find current zoom level index';
    },
    setMaxZoomLevel: function(_0x33f5x2) {
        if (_0x33f5x2 < 0 || _0x33f5x2 >= this['zoomLevels']['length']) {
            throw new Error('Invalid range for `setMinZoomLevel`');
        }
        this['maxZoomLevel'] = _0x33f5x2;
    },
    setMinZoomLevel: function(_0x33f5x2) {
        if (_0x33f5x2 < 0 || _0x33f5x2 >= this['zoomLevels']['length']) {
            throw new Error('Invalid range for `setMinZoomLevel`');
        }
        this['minZoomLevel'] = _0x33f5x2;
    },
    getViewportCenterDateCached: function() {
        if (this['cachedCenterDate']) {
            return this['cachedCenterDate'];
        }
        return this['cachedCenterDate'] = this['getViewportCenterDate']();
    },
    clearCenterDateCache: function() {
        this['cachedCenterDate'] = null;
    },
    zoomToLevel: function(_0x33f5x1, _0x33f5x17, _0x33f5x5) {
        _0x33f5x1 = Ext['Number']['constrain'](_0x33f5x1, this['minZoomLevel'], this['maxZoomLevel']);
        _0x33f5x5 = _0x33f5x5 || {};
        var _0x33f5x10 = this['calculateCurrentZoomLevel']();
        var _0x33f5x3 = this['getMilliSecondsPerPixelForZoomLevel'](_0x33f5x10);
        var _0x33f5x11 = this['zoomLevels'][_0x33f5x1];
        var _0x33f5x2 = this['getMilliSecondsPerPixelForZoomLevel'](_0x33f5x11);
        if (_0x33f5x3 == _0x33f5x2 && !_0x33f5x17) {
            return null;
        }
        var _0x33f5x15 = this;
        _0x33f5x15['fireEvent']('beforezoomchange', _0x33f5x15, _0x33f5x1);
        var _0x33f5xc = this['getSchedulingView']();
        var _0x33f5x7 = _0x33f5xc['getOuterEl']();
        var _0x33f5xf = this['mode'] == 'vertical';
        var _0x33f5x9 = _0x33f5x17 ? new Date((_0x33f5x17['start']['getTime']() + _0x33f5x17['end']['getTime']()) / 2) : this['getViewportCenterDateCached']();
        var _0x33f5xd = _0x33f5xf ? _0x33f5x7['getHeight']() : _0x33f5x7['getWidth']();
        var _0x33f5xa = Ext.ux.Scheduler.preset.Manager.getPreset(_0x33f5x11['preset'])['clone']();
        var _0x33f5x6 = _0x33f5xa['getBottomHeader']();
        var _0x33f5x8 = Boolean(_0x33f5x17);
        _0x33f5x17 = this['calculateOptimalDateRange'](_0x33f5x9, _0x33f5xd, _0x33f5x11, _0x33f5x17);
        _0x33f5xa[_0x33f5xf ? 'timeRowHeight' : 'timeColumnWidth'] = _0x33f5x5['customWidth'] || _0x33f5x11['width'];
        _0x33f5x6['increment'] = _0x33f5x11['increment'];
        this['isZooming'] = true;
        this['viewPreset'] = _0x33f5x11['preset'];
        var _0x33f5x4 = this['timeAxis'];
        _0x33f5xa['increment'] = _0x33f5x11['increment'];
        _0x33f5xa['timeResolution']['unit'] = Ext.ux.Scheduler.util.Date['getUnitByName'](_0x33f5x11['resolutionUnit'] || _0x33f5xa['timeResolution']['unit'] || _0x33f5x6['unit']);
        _0x33f5xa['timeResolution']['increment'] = _0x33f5x11['resolution'];
        this['setViewPreset'](_0x33f5xa, _0x33f5x17['start'] || this['getStart'](), _0x33f5x17['end'] || this['getEnd'](), false, true);
        _0x33f5x11['actualWidth'] = this['timeAxisViewModel']['getTickWidth']();
        if (_0x33f5x8) {
            _0x33f5x9 = _0x33f5x5['centerDate'] || new Date((_0x33f5x4['getStart']()['getTime']() + _0x33f5x4['getEnd']()['getTime']()) / 2);
        }
        var _0x33f5xb = null, _0x33f5xe = null;
        _0x33f5xc['un']('scroll', _0x33f5x15['clearCenterDateCache'], _0x33f5x15);
        _0x33f5xc['on']('scroll', function() {
            _0x33f5xc['on']('scroll', _0x33f5x15['clearCenterDateCache'], _0x33f5x15, {
                single: true
            });
        }, _0x33f5xc, {
            single: true
        });
        _0x33f5x15['cachedCenterDate'] = _0x33f5x9;
        if (_0x33f5xf) {
            _0x33f5xe = _0x33f5xc['getYFromDate'](_0x33f5x9, true) - _0x33f5xd / 2;
            _0x33f5xc['scrollTo'](null, _0x33f5xe);
        } else {
            _0x33f5xb = _0x33f5xc['getXFromDate'](_0x33f5x9, true) - _0x33f5xd / 2;
            _0x33f5xc['headerCt']['scrollTo'](_0x33f5xb);
            _0x33f5xc['scrollTo'](_0x33f5xb);
        }
        _0x33f5x15['isZooming'] = false;
        _0x33f5x15['fireEvent']('zoomchange', _0x33f5x15, _0x33f5x1, _0x33f5xb, _0x33f5xe);
        return _0x33f5x1;
    },
    setZoomLevel: function() {
        this['zoomToLevel']['apply'](this, arguments);
    },
    zoomToSpan: function(_0x33f5x6, _0x33f5x15) {
        _0x33f5x15 = _0x33f5x15 || {};
        if (_0x33f5x15['leftMargin'] || _0x33f5x15['rightMargin']) {
            _0x33f5x15['adjustStart'] = 0;
            _0x33f5x15['adjustEnd'] = 0;
        }
        Ext.applyIf(_0x33f5x15, {
            leftMargin: 0,
            rightMargin: 0
        });
        if (_0x33f5x6['start'] && _0x33f5x6['end']) {
            var _0x33f5x9 = _0x33f5x6['start'], _0x33f5x4 = _0x33f5x6['end'], _0x33f5x5 = _0x33f5x15['adjustStart'] >= 0 && _0x33f5x15['adjustEnd'] >= 0;
            if (_0x33f5x5) {
                _0x33f5x9 = Ext.ux.Scheduler.util.Date.add(_0x33f5x9, this['timeAxis']['mainUnit'], -_0x33f5x15['adjustStart']);
                _0x33f5x4 = Ext.ux.Scheduler.util.Date.add(_0x33f5x4, this['timeAxis']['mainUnit'], _0x33f5x15['adjustEnd']);
            }
            if (_0x33f5x9 <= _0x33f5x4) {
                var _0x33f5x2 = this['getSchedulingView']()['getTimeAxisViewModel']()['getAvailableWidth']();
                var _0x33f5xc = Math['floor'](this['getCurrentZoomLevelIndex']());
                if (_0x33f5xc == -1) {
                    _0x33f5xc = 0;
                }
                var _0x33f5x14 = this['zoomLevels'];
                var _0x33f5x1 = _0x33f5x4 - _0x33f5x9 || 1, _0x33f5xe = this['getMilliSecondsPerPixelForZoomLevel'](_0x33f5x14[_0x33f5xc], true), _0x33f5x11 = _0x33f5x1 / _0x33f5xe + _0x33f5x15['leftMargin'] + _0x33f5x15['rightMargin'] > _0x33f5x2 ? -1 : 1, _0x33f5x8 = _0x33f5xc + _0x33f5x11;
                var _0x33f5xa, _0x33f5x7 = null;
                while (_0x33f5x8 >= 0 && _0x33f5x8 <= _0x33f5x14['length'] - 1) {
                    _0x33f5xa = _0x33f5x14[_0x33f5x8];
                    _0x33f5xe = this['getMilliSecondsPerPixelForZoomLevel'](_0x33f5xa, true);
                    var _0x33f5x10 = _0x33f5x1 / _0x33f5xe + _0x33f5x15['leftMargin'] + _0x33f5x15['rightMargin'];
                    if (_0x33f5x11 == -1) {
                        if (_0x33f5x10 <= _0x33f5x2) {
                            _0x33f5x7 = _0x33f5x8;
                            break;
                        }
                    } else {
                        if (_0x33f5x10 <= _0x33f5x2) {
                            if (_0x33f5xc !== _0x33f5x8 - _0x33f5x11) {
                                _0x33f5x7 = _0x33f5x8;
                            }
                        } else {
                            break;
                        }
                    }
                    _0x33f5x8 += _0x33f5x11;
                }
                _0x33f5x7 = _0x33f5x7 !== null ? _0x33f5x7 : _0x33f5x8 - _0x33f5x11;
                _0x33f5xa = _0x33f5x14[_0x33f5x7];
                var _0x33f5x3 = Ext.ux.Scheduler.preset.Manager.getPreset(_0x33f5xa['preset'])['getBottomHeader']()['unit'];
                if (_0x33f5x15['leftMargin'] || _0x33f5x15['rightMargin']) {
                    _0x33f5x9 = new Date(_0x33f5x9['getTime']() - _0x33f5xe * _0x33f5x15['leftMargin']);
                    _0x33f5x4 = new Date(_0x33f5x4['getTime']() + _0x33f5xe * _0x33f5x15['rightMargin']);
                }
                var _0x33f5x17 = Ext.ux.Scheduler.util.Date['getDurationInUnit'](_0x33f5x9, _0x33f5x4, _0x33f5x3, true) / _0x33f5xa['increment'];
                if (_0x33f5x17 === 0) {
                    return;
                }
                var _0x33f5xf = Math['floor'](_0x33f5x2 / _0x33f5x17);
                var _0x33f5xb = new Date((_0x33f5x9['getTime']() + _0x33f5x4['getTime']()) / 2);
                var _0x33f5xd;
                if (_0x33f5x5) {
                    _0x33f5xd = {
                        start: _0x33f5x9,
                        end: _0x33f5x4
                    };
                } else {
                    _0x33f5xd = this['calculateOptimalDateRange'](_0x33f5xb, _0x33f5x2, _0x33f5xa);
                }
                return this['zoomToLevel'](_0x33f5x7, _0x33f5xd, {
                    customWidth: _0x33f5xf,
                    centerDate: _0x33f5xb
                });
            }
        }
        return null;
    },
    zoomIn: function(_0x33f5x2) {
        _0x33f5x2 = _0x33f5x2 || 1;
        var _0x33f5x1 = this['getCurrentZoomLevelIndex']();
        if (_0x33f5x1 >= this['zoomLevels']['length'] - 1) {
            return null;
        }
        return this['zoomToLevel'](Math['floor'](_0x33f5x1) + _0x33f5x2);
    },
    zoomOut: function(_0x33f5x2) {
        _0x33f5x2 = _0x33f5x2 || 1;
        var _0x33f5x1 = this['getCurrentZoomLevelIndex']();
        if (_0x33f5x1 <= 0) {
            return null;
        }
        return this['zoomToLevel'](Math['ceil'](_0x33f5x1) - _0x33f5x2);
    },
    zoomInFull: function() {
        return this['zoomToLevel'](this['maxZoomLevel']);
    },
    zoomOutFull: function() {
        return this['zoomToLevel'](this['minZoomLevel']);
    },
    calculateOptimalDateRange: function(_0x33f5x3, _0x33f5x7, _0x33f5x5, _0x33f5xe) {
        if (_0x33f5xe) {
            return _0x33f5xe;
        }
        var _0x33f5x9 = this['timeAxis'];
        if (this['zoomKeepsOriginalTimespan']) {
            return {
                start: _0x33f5x9['getStart'](),
                end: _0x33f5x9['getEnd']()
            };
        }
        var _0x33f5x1 = Ext.ux.Scheduler.util.Date;
        var _0x33f5xf = this['getZoomLevelUnit'](_0x33f5x5);
        var _0x33f5x4 = Math['ceil'](_0x33f5x7 / _0x33f5x5['width'] * _0x33f5x5['increment'] * this['visibleZoomFactor'] / 2);
        var _0x33f5x2 = _0x33f5x1['add'](_0x33f5x3, _0x33f5xf, -_0x33f5x4);
        var _0x33f5x8 = _0x33f5x1['add'](_0x33f5x3, _0x33f5xf, _0x33f5x4);
        return {
            start: _0x33f5x9['floorDate'](_0x33f5x2, false, _0x33f5xf, _0x33f5x5['increment']),
            end: _0x33f5x9['ceilDate'](_0x33f5x8, false, _0x33f5xf, _0x33f5x5['increment'])
        };
    }
});

Ext.define('Ext.ux.Scheduler.mixin.AbstractTimelinePanel', {
    mixins: [ Ext.ux.Scheduler.mixin.Zoomable ],
    orientation: 'horizontal',
    snapToIncrement: false,
    readOnly: false,
    forceFit: false,
    eventResizeHandles: 'both',
    timeAxis: null,
    autoAdjustTimeAxis: true,
    timeAxisViewModel: null,
    crudManager: null,
    viewPreset: 'weekAndDay',
    calendarViewPreset: 'week',
    trackHeaderOver: true,
    startDate: null,
    endDate: null,
    startTime: 0,
    endTime: 24,
    columnLines: true,
    getDateConstraints: Ext.emptyFn,
    snapRelativeToEventStartDate: false,
    trackMouseOver: false,
    readRowHeightFromPreset: true,
    eventBorderWidth: 1,
    getOrientation: function() {
        return this['getMode']['apply'](this, arguments);
    },
    getMode: function() {
        return this['mode'];
    },
    isHorizontal: function() {
        return this['getMode']() === 'horizontal';
    },
    isVertical: function() {
        return this['getMode']() === 'vertical';
    },
    isCalendar: function() {
        return this['getMode']() === 'calendar';
    },
    cellBorderWidth: 1,
    cellTopBorderWidth: 1,
    cellBottomBorderWidth: 1,
    renderers: null,
    _initializeTimelinePanel: function() {
        this['mode'] = this['mode'] || this['orientation'] || 'horizontal';
        if (this['mode'] === 'calendar') {
            this['oldViewPreset'] = this['viewPreset'];
            this['viewPreset'] = this['calendarViewPreset'];
        }
        var _0x33f5x3 = this['viewPreset'];
        if (typeof _0x33f5x3 === 'string') {
            _0x33f5x3 = Ext.ux.Scheduler.preset.Manager.getPreset(this['viewPreset']);
        }
        if (!_0x33f5x3) {
            throw 'You must define a valid view preset object. See Ext.ux.Scheduler.preset.Manager class for reference';
        }
        this['initializeZooming']();
        this['renderers'] = [];
        if (this['readRowHeightFromPreset']) {
            this['readRowHeightFromPreset'] = !this['rowHeight'];
        }
        if (!(this['timeAxis'] instanceof Ext.ux.Scheduler.data['TimeAxis'])) {
            this['timeAxis'] = Ext.create(Ext.applyIf(this['timeAxis'] || {}, {
                xclass: 'Ext.ux.Scheduler.data.TimeAxis',
                autoAdjust: this['autoAdjustTimeAxis'],
                mode: this['mode'] === 'calendar' ? 'calendar' : 'plain'
            }));
        }
        if (!this['timeAxisViewModel'] || !(this['timeAxisViewModel'] instanceof Ext.ux.Scheduler.view.model['TimeAxis'])) {
            var _0x33f5x2 = Ext.apply({
                mode: this['mode'],
                snapToIncrement: this['snapToIncrement'],
                forceFit: this['forceFit'],
                timeAxis: this['timeAxis'],
                eventStore: this['getEventStore'](),
                viewPreset: this['viewPreset']
            }, this['timeAxisViewModel'] || {});
            this['timeAxisViewModel'] = new Ext.ux.Scheduler.view.model.TimeAxis(_0x33f5x2);
        }
        this['timeAxisViewModel']['on']('update', this['onTimeAxisViewModelUpdate'], this);
        this['timeAxisViewModel']['refCount']++;
        this['on']('destroy', this['onPanelDestroyed'], this);
        var _0x33f5x1;
        switch (this['mode']) {
          case 'horizontal':
            _0x33f5x1 = [ 'sch-horizontal' ];
            break;

          case 'vertical':
            _0x33f5x1 = [ 'sch-vertical', 'sch-vertical-resource' ];
            break;

          case 'calendar':
            _0x33f5x1 = [ 'sch-vertical', 'sch-calendar' ];
            break;
        }
        this['addCls']([]['concat']['apply']([ 'sch-timelinepanel' ], _0x33f5x1));
    },
    onTimeAxisViewModelUpdate: function() {
        var _0x33f5x2 = this['getSchedulingView']();
        if (_0x33f5x2 && _0x33f5x2['viewReady']) {
            _0x33f5x2['refreshKeepingScroll']();
            this['fireEvent']('viewchange', this);
        }
    },
    onPanelDestroyed: function() {
        var _0x33f5x2 = this['timeAxisViewModel'];
        _0x33f5x2['un']('update', this['onTimeAxisViewModelUpdate'], this);
        _0x33f5x2['refCount']--;
        if (_0x33f5x2['refCount'] <= 0) {
            _0x33f5x2['destroy']();
        }
    },
    getSchedulingView: function() {
        throw 'Abstract method call';
    },
    setReadOnly: function(_0x33f5x2) {
        this['getSchedulingView']()['setReadOnly'](_0x33f5x2);
    },
    isReadOnly: function() {
        return this['getSchedulingView']()['isReadOnly']();
    },
    switchViewPreset: function() {
        this['setViewPreset']['apply'](this, arguments);
    },
    setViewPreset: function(_0x33f5xf, _0x33f5x2, _0x33f5x4, _0x33f5x8, _0x33f5x1) {
        var _0x33f5x5 = this['timeAxis'];
        if (this['fireEvent']('beforeviewchange', this, _0x33f5xf, _0x33f5x2, _0x33f5x4) !== false) {
            var _0x33f5x7 = this['getMode']() === 'horizontal';
            if (typeof _0x33f5xf === 'string') {
                this['viewPreset'] = _0x33f5xf;
                _0x33f5xf = Ext.ux.Scheduler.preset.Manager.getPreset(_0x33f5xf);
            }
            if (!_0x33f5xf) {
                throw 'View preset not found';
            }
            if (!(_0x33f5x8 && _0x33f5x5['isConfigured'])) {
                var _0x33f5x3 = {
                    weekStartDay: this['weekStartDay'] !== undefined ? this['weekStartDay'] : this['L'] ? this.L('weekStartDay') : 1,
                    startTime: this['startTime'],
                    endTime: this['endTime']
                };
                if (_0x33f5x8) {
                    if (_0x33f5x5['getCount']() === 0 || _0x33f5x2) {
                        _0x33f5x3['start'] = _0x33f5x2 || new Date();
                    }
                } else {
                    _0x33f5x3['start'] = _0x33f5x2 || _0x33f5x5['getStart']();
                }
                _0x33f5x3['end'] = _0x33f5x4;
                _0x33f5x5['consumeViewPreset'](_0x33f5xf);
                _0x33f5x5['reconfigure'](_0x33f5x3, true);
                this['timeAxisViewModel']['reconfigure']({
                    viewPreset: this['viewPreset'],
                    headerConfig: _0x33f5xf['headerConfig'],
                    columnLinesFor: _0x33f5xf['columnLinesFor'] || 'middle',
                    rowHeightHorizontal: this['readRowHeightFromPreset'] ? _0x33f5xf['rowHeight'] : this['rowHeight'] || this['timeAxisViewModel']['getViewRowHeight'](),
                    tickWidth: _0x33f5x7 ? _0x33f5xf['timeColumnWidth'] : _0x33f5xf['timeRowHeight'] || _0x33f5xf['timeColumnWidth'] || 60,
                    timeColumnWidth: _0x33f5xf['timeColumnWidth'],
                    rowHeightVertical: _0x33f5xf['timeRowHeight'] || _0x33f5xf['timeColumnWidth'] || 60,
                    timeAxisColumnWidth: _0x33f5xf['timeAxisColumnWidth'],
                    resourceColumnWidth: this['resourceColumnWidth'] || _0x33f5xf['resourceColumnWidth'] || 100
                });
            }
            var _0x33f5x9 = this['getSchedulingView']();
            _0x33f5x9['setDisplayDateFormat'](_0x33f5xf['displayDateFormat']);
            if (this['getMode']() === 'vertical') {
                _0x33f5x9['setColumnWidth'](this['resourceColumnWidth'] || _0x33f5xf['resourceColumnWidth'] || 100, true);
            }
            if (!_0x33f5x1) {
                if (_0x33f5x7) {
                    _0x33f5x9['scrollHorizontallyTo'](0);
                } else {
                    _0x33f5x9['scrollVerticallyTo'](0);
                }
            }
        }
    },
    getViewPreset: function() {
        return this['viewPreset'];
    },
    getStart: function() {
        return this['getStartDate']();
    },
    getStartDate: function() {
        return this['timeAxis']['getStart']();
    },
    getEnd: function() {
        return this['getEndDate']();
    },
    getEndDate: function() {
        return this['timeAxis']['getEnd']();
    },
    setTimeColumnWidth: function(_0x33f5x1, _0x33f5x2) {
        this['timeAxisViewModel']['setTickWidth'](_0x33f5x1, _0x33f5x2);
    },
    getTimeColumnWidth: function() {
        return this['timeAxisViewModel']['getTickWidth']();
    },
    getRowHeight: function() {
        return this['timeAxisViewModel']['getViewRowHeight']();
    },
    shiftNext: function(_0x33f5x2) {
        this['suspendLayouts'] && this['suspendLayouts']();
        this['timeAxis']['shiftNext'](_0x33f5x2);
        this['suspendLayouts'] && this['resumeLayouts'](true);
    },
    shiftPrevious: function(_0x33f5x2) {
        this['suspendLayouts'] && this['suspendLayouts']();
        this['timeAxis']['shiftPrevious'](_0x33f5x2);
        this['suspendLayouts'] && this['resumeLayouts'](true);
    },
    goToNow: function() {
        this['setTimeSpan'](new Date());
    },
    setTimeSpan: function(_0x33f5x1, _0x33f5x2) {
        if (this['timeAxis']) {
            this['timeAxis']['setTimeSpan'](_0x33f5x1, _0x33f5x2);
        }
    },
    setStart: function(_0x33f5x2) {
        this['setStartDate'](_0x33f5x2);
    },
    setEnd: function(_0x33f5x2) {
        this['setEndDate'](_0x33f5x2);
    },
    setStartDate: function(_0x33f5x2) {
        this['setTimeSpan'](_0x33f5x2);
    },
    setEndDate: function(_0x33f5x2) {
        this['setTimeSpan'](null, _0x33f5x2);
    },
    getTimeAxis: function() {
        return this['timeAxis'];
    },
    scrollToDate: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = this['getSchedulingView']();
        var _0x33f5x4 = _0x33f5x2['getCoordinateFromDate'](_0x33f5x3, true);
        this['scrollToCoordinate'](_0x33f5x4, _0x33f5x3, _0x33f5x1, false);
    },
    scrollToDateCentered: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = this['getSchedulingView']();
        var _0x33f5x5 = 0;
        if (_0x33f5x2['isHorizontal']()) {
            _0x33f5x5 = _0x33f5x2['getBox']()['width'] / 2;
        } else {
            _0x33f5x5 = _0x33f5x2['getBox']()['height'] / 2;
        }
        var _0x33f5x4 = Math['round'](_0x33f5x2['getCoordinateFromDate'](_0x33f5x3, true) - _0x33f5x5);
        this['scrollToCoordinate'](_0x33f5x4, _0x33f5x3, _0x33f5x1, true);
    },
    scrollToCoordinate: function(_0x33f5x9, _0x33f5x5, _0x33f5x4, _0x33f5x3) {
        var _0x33f5x1 = this['getSchedulingView']();
        var _0x33f5x8 = this;
        if (_0x33f5x9 < 0 && !_0x33f5x1['isCalendar']()) {
            if (this['infiniteScroll']) {
                _0x33f5x1['shiftToDate'](_0x33f5x5, _0x33f5x3);
            } else {
                var _0x33f5x2 = (this['timeAxis']['getEnd']() - this['timeAxis']['getStart']()) / 2;
                this['setTimeSpan'](new Date(_0x33f5x5['getTime']() - _0x33f5x2), new Date(_0x33f5x5['getTime']() + _0x33f5x2));
                if (_0x33f5x3) {
                    _0x33f5x8['scrollToDateCentered'](_0x33f5x5, _0x33f5x4);
                } else {
                    _0x33f5x8['scrollToDate'](_0x33f5x5, _0x33f5x4);
                }
            }
            return;
        }
        if (this['mode'] === 'horizontal') {
            _0x33f5x1['scrollHorizontallyTo'](_0x33f5x9, _0x33f5x4);
        } else {
            _0x33f5x1['scrollVerticallyTo'](_0x33f5x9, _0x33f5x4);
        }
    },
    getViewportCenterDate: function() {
        return this['getSchedulingView']()['getViewportCenterDate']();
    },
    addCls: function() {
        throw 'Abstract method call';
    },
    removeCls: function() {
        throw 'Abstract method call';
    },
    registerRenderer: function(_0x33f5x1, _0x33f5x2) {
        this['renderers']['push']({
            fn: _0x33f5x1,
            scope: _0x33f5x2
        });
    },
    deregisterRenderer: function(_0x33f5x1, _0x33f5x2) {
        Ext.each(this['renderers'], function(_0x33f5x3, _0x33f5x4) {
            if (_0x33f5x1 === _0x33f5x3) {
                Ext.Array['removeAt'](this['renderers'], _0x33f5x4);
                return false;
            }
        });
    },
    getCrudManager: function() {
        return this['crudManager'];
    },
    setCrudManager: function(_0x33f5x2) {
        this['crudManager'] = _0x33f5x2;
    }
});

Ext.define('Ext.ux.Scheduler.view.Horizontal', {
    view: null,
    constructor: function(_0x33f5x2) {
        Ext.apply(this, _0x33f5x2);
    },
    translateToScheduleCoordinate: function(_0x33f5x2) {
        var _0x33f5x1 = this['view'];
        if (_0x33f5x1['rtl']) {
            return _0x33f5x1['getHorizontalTimeAxisColumn']()['getEl']()['getRight']() - _0x33f5x2;
        }
        return _0x33f5x2 - _0x33f5x1['getEl']()['getX']() + _0x33f5x1['getScroll']()['left'];
    },
    translateToPageCoordinate: function(_0x33f5x2) {
        var _0x33f5x1 = this['view'];
        return _0x33f5x2 + _0x33f5x1['getEl']()['getX']() - _0x33f5x1['getScroll']()['left'];
    },
    getDateFromXY: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
        var _0x33f5x4 = _0x33f5x3[0];
        if (!_0x33f5x2) {
            _0x33f5x4 = this['translateToScheduleCoordinate'](_0x33f5x4);
        }
        return this['view']['timeAxisViewModel']['getDateFromPosition'](_0x33f5x4, _0x33f5x1);
    },
    getEventRenderData: function(_0x33f5x2) {
        var _0x33f5x8 = _0x33f5x2['getStartDate'](), _0x33f5x5 = _0x33f5x2['getEndDate']() || _0x33f5x8, _0x33f5x7 = this['view'], _0x33f5x3 = _0x33f5x7['timeAxis']['getStart'](), _0x33f5xf = _0x33f5x7['timeAxis']['getEnd'](), _0x33f5x9 = Math, _0x33f5x4 = _0x33f5x7['getXFromDate'](Ext.ux.Scheduler.util.Date.max(_0x33f5x8, _0x33f5x3)), _0x33f5xe = _0x33f5x7['getXFromDate'](Ext.ux.Scheduler.util.Date['min'](_0x33f5x5, _0x33f5xf)), _0x33f5x1 = {
            event: _0x33f5x2
        };
        if (this['view']['rtl']) {
            _0x33f5x1['right'] = _0x33f5x9['min'](_0x33f5x4, _0x33f5xe);
        } else {
            _0x33f5x1['left'] = _0x33f5x9['min'](_0x33f5x4, _0x33f5xe);
        }
        _0x33f5x1['width'] = _0x33f5x9['max'](1, _0x33f5x9['abs'](_0x33f5xe - _0x33f5x4)) - _0x33f5x7['eventBorderWidth'];
        if (_0x33f5x7['managedEventSizing']) {
            _0x33f5x1['top'] = _0x33f5x9['max'](0, _0x33f5x7['barMargin'] - (Ext['isIE'] && !Ext['isStrict'] ? 0 : _0x33f5x7['eventBorderWidth'] - _0x33f5x7['cellTopBorderWidth']));
            _0x33f5x1['height'] = _0x33f5x7['timeAxisViewModel']['rowHeightHorizontal'] - 2 * _0x33f5x7['barMargin'] - _0x33f5x7['eventBorderWidth'];
        }
        _0x33f5x1['start'] = _0x33f5x8;
        _0x33f5x1['end'] = _0x33f5x5;
        _0x33f5x1['startsOutsideView'] = _0x33f5x8 < _0x33f5x3;
        _0x33f5x1['endsOutsideView'] = _0x33f5x5 > _0x33f5xf;
        return _0x33f5x1;
    },
    getScheduleRegion: function(_0x33f5x4, _0x33f5x8) {
        var _0x33f5xf = this['view'], _0x33f5x7 = _0x33f5x4 ? Ext.fly(_0x33f5xf['getRowNode'](_0x33f5x4))['getRegion']() : _0x33f5xf['getTableRegion'](), _0x33f5x5 = _0x33f5xf['timeAxis']['getStart'](), _0x33f5xb = _0x33f5xf['timeAxis']['getEnd'](), _0x33f5x1 = _0x33f5xf['getDateConstraints'](_0x33f5x4, _0x33f5x8) || {
            start: _0x33f5x5,
            end: _0x33f5xb
        }, _0x33f5x3 = this['translateToPageCoordinate'](_0x33f5xf['getXFromDate'](Ext.ux.Scheduler.util.Date.max(_0x33f5x5, _0x33f5x1['start']))), _0x33f5xe = this['translateToPageCoordinate'](_0x33f5xf['getXFromDate'](Ext.ux.Scheduler.util.Date['min'](_0x33f5xb, _0x33f5x1['end']))), _0x33f5x9 = _0x33f5x7['top'] + _0x33f5xf['barMargin'], _0x33f5x2 = _0x33f5x7['bottom'] - _0x33f5xf['barMargin'] - _0x33f5xf['eventBorderWidth'];
        return new Ext.util.Region(_0x33f5x9, Math['max'](_0x33f5x3, _0x33f5xe), _0x33f5x2, Math['min'](_0x33f5x3, _0x33f5xe));
    },
    getResourceRegion: function(_0x33f5xe, _0x33f5x5, _0x33f5xf) {
        var _0x33f5xc = this['view'], _0x33f5x4 = _0x33f5xc['getRowNode'](_0x33f5xe), _0x33f5x8 = Ext.fly(_0x33f5x4)['getOffsetsTo'](_0x33f5xc['getEl']()), _0x33f5xb = _0x33f5xc['timeAxis']['getStart'](), _0x33f5xa = _0x33f5xc['timeAxis']['getEnd'](), _0x33f5x3 = _0x33f5x5 ? Ext.ux.Scheduler.util.Date.max(_0x33f5xb, _0x33f5x5) : _0x33f5xb, _0x33f5x9 = _0x33f5xf ? Ext.ux.Scheduler.util.Date['min'](_0x33f5xa, _0x33f5xf) : _0x33f5xa, _0x33f5x7 = _0x33f5xc['getXFromDate'](_0x33f5x3), _0x33f5xd = _0x33f5xc['getXFromDate'](_0x33f5x9), _0x33f5x11 = _0x33f5x8[1] + _0x33f5xc['cellTopBorderWidth'], _0x33f5x2 = _0x33f5x8[1] + Ext.fly(_0x33f5x4)['getHeight']() - _0x33f5xc['cellBottomBorderWidth'];
        if (!Ext['versions']['touch']) {
            var _0x33f5x1 = _0x33f5xc['getScroll']();
            _0x33f5x11 += _0x33f5x1['top'];
            _0x33f5x2 += _0x33f5x1['top'];
        }
        return new Ext.util.Region(_0x33f5x11, Math['max'](_0x33f5x7, _0x33f5xd), _0x33f5x2, Math['min'](_0x33f5x7, _0x33f5xd));
    },
    columnRenderer: function(_0x33f5x3, _0x33f5xb, _0x33f5x8, _0x33f5x9, _0x33f5xe) {
        var _0x33f5xf = this['view'];
        var _0x33f5x1 = _0x33f5xf['getEventStore']()['filterEventsForResource'](_0x33f5x8, function(_0x33f5x11) {
            return _0x33f5xf['timeAxis']['isRangeInAxis'](_0x33f5x11);
        });
        if (_0x33f5x1['length'] === 0) {
            return;
        }
        var _0x33f5x7 = Ext.Array.map(_0x33f5x1, function(_0x33f5x11) {
            return _0x33f5xf['generateTplData'](_0x33f5x11, _0x33f5x8, _0x33f5x9);
        });
        if (_0x33f5xf['dynamicRowHeight']) {
            var _0x33f5x5 = _0x33f5xf['eventLayout']['horizontal'];
            var _0x33f5x4 = _0x33f5x5['applyLayout'](_0x33f5x7, _0x33f5x8, this['layoutEventVertically'], this);
            var _0x33f5x2 = _0x33f5x4 * _0x33f5xf['timeAxisViewModel']['rowHeightHorizontal'] - (_0x33f5x4 - 1) * _0x33f5xf['barMargin'];
            _0x33f5xb['rowHeight'] = _0x33f5x2;
        }
        return _0x33f5xf['eventTpl']['apply'](_0x33f5x7);
    },
    layoutEventVertically: function(_0x33f5x4, _0x33f5x1) {
        var _0x33f5x2 = this['view'];
        var _0x33f5x3 = _0x33f5x4 === 0 ? _0x33f5x2['barMargin'] : _0x33f5x4 * _0x33f5x2['timeAxisViewModel']['rowHeightHorizontal'] - (_0x33f5x4 - 1) * _0x33f5x2['barMargin'];
        if (_0x33f5x3 >= _0x33f5x2['cellBottomBorderWidth']) {
            _0x33f5x3 -= _0x33f5x2['cellBottomBorderWidth'];
        }
        return _0x33f5x3;
    },
    resolveResource: function(_0x33f5x5) {
        var _0x33f5x4 = this, _0x33f5x1 = _0x33f5x4['view'], _0x33f5x3, _0x33f5x2;
        _0x33f5x3 = Ext.fly(_0x33f5x5)['is'](_0x33f5x1['eventSelector']) && _0x33f5x5 || Ext.fly(_0x33f5x5)['up'](_0x33f5x1['eventSelector'], null, true);
        if (_0x33f5x3) {
            _0x33f5x2 = _0x33f5x1['getResourceRecordFromDomId'](_0x33f5x3['id']);
        } else {
            _0x33f5x5 = _0x33f5x1['findRowByChild'](_0x33f5x5);
            _0x33f5x2 = _0x33f5x5 && _0x33f5x1['getRecordForRowNode'](_0x33f5x5) || null;
        }
        return _0x33f5x2;
    },
    getTimeSpanRegion: function(_0x33f5x1, _0x33f5x7, _0x33f5x9) {
        var _0x33f5x4 = this['view'], _0x33f5x3 = _0x33f5x4['getXFromDate'](_0x33f5x1), _0x33f5x5 = _0x33f5x7 ? _0x33f5x4['getXFromDate'](_0x33f5x7) : _0x33f5x3, _0x33f5x2, _0x33f5x8;
        _0x33f5x8 = _0x33f5x4['getTableRegion']();
        if (_0x33f5x9) {
            _0x33f5x2 = Math['max'](_0x33f5x8 ? _0x33f5x8['bottom'] - _0x33f5x8['top'] : 0, _0x33f5x4['getEl']()['dom']['clientHeight']);
        } else {
            _0x33f5x2 = _0x33f5x8 ? _0x33f5x8['bottom'] - _0x33f5x8['top'] : 0;
        }
        return new Ext.util.Region(0, Math['max'](_0x33f5x3, _0x33f5x5), _0x33f5x2, Math['min'](_0x33f5x3, _0x33f5x5));
    },
    getStartEndDatesFromRegion: function(_0x33f5x9, _0x33f5x4, _0x33f5x3) {
        var _0x33f5x1 = this['view'];
        var _0x33f5x8 = _0x33f5x1['rtl'];
        var _0x33f5x2 = _0x33f5x1['getDateFromCoordinate'](_0x33f5x8 ? _0x33f5x9['right'] : _0x33f5x9['left'], _0x33f5x4), _0x33f5x5 = _0x33f5x1['getDateFromCoordinate'](_0x33f5x8 ? _0x33f5x9['left'] : _0x33f5x9['right'], _0x33f5x4);
        if (_0x33f5x2 && _0x33f5x5 || _0x33f5x3 && (_0x33f5x2 || _0x33f5x5)) {
            return {
                start: _0x33f5x2,
                end: _0x33f5x5
            };
        }
        return null;
    },
    onEventAdd: function(_0x33f5x10, _0x33f5x6) {
        var _0x33f5xa = this['view'], _0x33f5x7 = {}, _0x33f5x2, _0x33f5x1, _0x33f5xd, _0x33f5x3, _0x33f5x5, _0x33f5xc, _0x33f5x4, _0x33f5x9, _0x33f5x8;
        for (_0x33f5xc = 0, _0x33f5x4 = _0x33f5x6['length']; _0x33f5xc < _0x33f5x4; _0x33f5xc++) {
            _0x33f5x2 = _0x33f5x6[_0x33f5xc];
            _0x33f5x1 = _0x33f5x2['getStartDate']();
            _0x33f5xd = _0x33f5x2['getEndDate']();
            if (_0x33f5x1 && _0x33f5xd && _0x33f5xa['timeAxis']['timeSpanInAxis'](_0x33f5x1, _0x33f5xd)) {
                _0x33f5x3 = _0x33f5x6[_0x33f5xc]['getResources'](_0x33f5xa['getEventStore']());
                for (_0x33f5x9 = 0, _0x33f5x8 = _0x33f5x3['length']; _0x33f5x9 < _0x33f5x8; _0x33f5x9++) {
                    _0x33f5x5 = _0x33f5x3[_0x33f5x9];
                    _0x33f5x7[_0x33f5x5['getId']()] = _0x33f5x5;
                }
            }
        }
        Ext['Object']['each'](_0x33f5x7, function(_0x33f5xe, _0x33f5xf) {
            _0x33f5xa['repaintEventsForResource'](_0x33f5xf);
        });
    },
    onEventRemove: function(_0x33f5x5, _0x33f5x1) {
        var _0x33f5x8 = this, _0x33f5x2 = _0x33f5x8['view'], _0x33f5x4 = _0x33f5x2['getEventStore'](), _0x33f5x9, _0x33f5x3;
        _0x33f5x9 = Ext.Array['unique'](Ext.Array['reduce'](_0x33f5x1, function(_0x33f5x7, _0x33f5xf) {
            return _0x33f5x7['concat'](_0x33f5x4['getResourcesForEvent'](_0x33f5xf));
        }, []));
        _0x33f5x3 = Ext.Array['reduce'](_0x33f5x1, function(_0x33f5x7, _0x33f5xf) {
            return _0x33f5x7['concat'](_0x33f5x2['getElementsFromEventRecord'](_0x33f5xf, null, null, true));
        }, []);
        _0x33f5x3 = new Ext.CompositeElementLite(_0x33f5x3);
        _0x33f5x3['fadeOut']({
            callback: function(_0x33f5x7) {
                Ext.Array['forEach'](_0x33f5x9, function(_0x33f5xf) {
                    if (_0x33f5x2 && !_0x33f5x2['isDestroyed']) {
                        _0x33f5x2['store']['indexOf'](_0x33f5xf) >= 0 && _0x33f5x2['repaintEventsForResource'](_0x33f5xf);
                    }
                });
            }
        });
    },
    onEventUpdate: function(_0x33f5x4, _0x33f5x5) {
        var _0x33f5x7 = _0x33f5x5['previous'] || {};
        var _0x33f5xe = this['view'];
        var _0x33f5x9 = _0x33f5xe['timeAxis'];
        var _0x33f5x2 = _0x33f5x5['getStartDate']();
        var _0x33f5xf = _0x33f5x5['getEndDate']();
        var _0x33f5x1 = _0x33f5x7['StartDate'] || _0x33f5x2;
        var _0x33f5x8 = _0x33f5x7['EndDate'] || _0x33f5xf;
        var _0x33f5xb = _0x33f5x1 && _0x33f5x8 && _0x33f5x9['timeSpanInAxis'](_0x33f5x1, _0x33f5x8);
        var _0x33f5x3;
        if (_0x33f5x5['resourceIdField'] in _0x33f5x7 && _0x33f5xb) {
            _0x33f5x3 = _0x33f5x4['getResourceStore']()['getById'](_0x33f5x7[_0x33f5x5['resourceIdField']]);
            _0x33f5x3 && _0x33f5xe['repaintEventsForResource'](_0x33f5x3, true);
        }
        if (_0x33f5x2 && _0x33f5xf && _0x33f5x9['timeSpanInAxis'](_0x33f5x2, _0x33f5xf) || _0x33f5xb) {
            Ext.Array['each'](_0x33f5x5['getResources'](), function(_0x33f5x11) {
                _0x33f5xe['repaintEventsForResource'](_0x33f5x11, true);
            });
        }
    },
    setColumnWidth: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = this['view'];
        _0x33f5x2['getTimeAxisViewModel']()['setViewColumnWidth'](_0x33f5x3, _0x33f5x1);
    },
    getVisibleDateRange: function() {
        var _0x33f5x5 = this['view'];
        if (!_0x33f5x5['getEl']()) {
            return null;
        }
        var _0x33f5x4 = _0x33f5x5['getTableRegion'](), _0x33f5x3 = _0x33f5x5['timeAxis']['getStart'](), _0x33f5x9 = _0x33f5x5['timeAxis']['getEnd'](), _0x33f5x8 = _0x33f5x5['getWidth']();
        if (_0x33f5x4['right'] - _0x33f5x4['left'] < _0x33f5x8) {
            return {
                startDate: _0x33f5x3,
                endDate: _0x33f5x9
            };
        }
        var _0x33f5x1 = _0x33f5x5['getScroll']();
        var _0x33f5x2 = {
            startDate: _0x33f5x5['getDateFromCoordinate'](_0x33f5x1['left'], null, true),
            endDate: _0x33f5x5['getDateFromCoordinate'](_0x33f5x1['left'] + _0x33f5x8, null, true) || _0x33f5x5['timeAxis']['getEnd']()
        };
        if (!_0x33f5x2['endDate']) {
            _0x33f5x2['endDate'] = _0x33f5x5['timeAxis']['getEnd']();
        }
        return _0x33f5x2;
    },
    getItemBox: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return Ext.Array.map(_0x33f5x2['getResources'](), function(_0x33f5x3) {
            return _0x33f5x1['getResourceEventBox'](_0x33f5x2, _0x33f5x3);
        });
    },
    isRowVisible: function(_0x33f5x1) {
        var _0x33f5x3 = Ext.isFunction(_0x33f5x1['isVisible']) && !_0x33f5x1['isVisible']();
        if (!_0x33f5x3 && this['view']['groupingFeature'] && !this['view']['groupingFeature']['disabled']) {
            var _0x33f5x2 = this['view']['resourceStore']['getGroups']();
            if (_0x33f5x2) {
                var _0x33f5x4 = _0x33f5x2['getByKey'](_0x33f5x1['get'](this['view']['resourceStore']['groupField']));
                _0x33f5x3 = _0x33f5x4 && !this['view']['groupingFeature']['isExpanded'](_0x33f5x4);
            }
        }
        return !_0x33f5x3;
    },
    getResourceEventBox: function(_0x33f5x9, _0x33f5x7) {
        var _0x33f5xe = Ext.ux.Scheduler.util.Date, _0x33f5x18 = this, _0x33f5xc = null, _0x33f5xb = _0x33f5x18['view']['timeAxis']['getStart'](), _0x33f5xf = _0x33f5x18['view']['timeAxis']['getEnd'](), _0x33f5x12 = _0x33f5x9['getStartDate'](), _0x33f5xd = _0x33f5x9['getEndDate'](), _0x33f5x17, _0x33f5x6, _0x33f5x16, _0x33f5x13, _0x33f5x11, _0x33f5x5, _0x33f5x8, _0x33f5xa, _0x33f5x15, _0x33f5x1, _0x33f5x2, _0x33f5x3, _0x33f5x14, _0x33f5x4, _0x33f5x10;
        if (_0x33f5x12 && _0x33f5xd && _0x33f5xe['intersectSpans'](_0x33f5x12, _0x33f5xd, _0x33f5xb, _0x33f5xf) && this['isRowVisible'](_0x33f5x7)) {
            _0x33f5x13 = _0x33f5x18['view']['getRowNode'](_0x33f5x7);
            if (_0x33f5x13) {
                if (_0x33f5x18['view']['managedEventSizing']) {
                    _0x33f5x17 = _0x33f5x18['view']['eventLayout']['horizontal'];
                    _0x33f5x6 = Ext.Array.map(_0x33f5x7['getEvents'](), _0x33f5x18['getEventRenderData'], _0x33f5x18);
                    _0x33f5x17['applyLayout'](_0x33f5x6, _0x33f5x7);
                    _0x33f5x16 = Ext.Array['findBy'](_0x33f5x6, function(_0x33f5x19) {
                        return _0x33f5x19['event'] == _0x33f5x9;
                    });
                    if (_0x33f5x16) {
                        _0x33f5x5 = Ext.fly(_0x33f5x13)['getOffsetsTo'](_0x33f5x18['view']['getNodeContainer']())[1];
                        _0x33f5xc = {
                            rendered: true,
                            start: _0x33f5x16['hasOwnProperty']('left') ? _0x33f5x16['left'] : _0x33f5x16['right'],
                            end: (_0x33f5x16['hasOwnProperty']('left') ? _0x33f5x16['left'] : _0x33f5x16['right']) + _0x33f5x16['width'],
                            top: _0x33f5x5 + _0x33f5x16['top'],
                            bottom: _0x33f5x5 + _0x33f5x16['top'] + _0x33f5x16['height']
                        };
                    }
                } else {
                    _0x33f5x15 = _0x33f5x18['view']['getElementsFromEventRecord'](_0x33f5x9, _0x33f5x9 !== _0x33f5x7 && _0x33f5x7);
                    if (_0x33f5x15['length']) {
                        _0x33f5x1 = _0x33f5x15[0];
                        _0x33f5x2 = _0x33f5x1['getOffsetsTo'](_0x33f5x18['view']['getEl']()), 
                        _0x33f5x3 = _0x33f5x1['getBox']();
                        _0x33f5xc = {
                            rendered: true,
                            start: _0x33f5x2[0],
                            end: _0x33f5x2[0] + _0x33f5x3['width'],
                            top: _0x33f5x2[1],
                            bottom: _0x33f5x2[1] + _0x33f5x3['height']
                        };
                    }
                }
            } else {
                _0x33f5xc = {
                    rendered: false,
                    start: _0x33f5x18['view']['getXFromDate'](_0x33f5xe['max'](_0x33f5x12, _0x33f5xb)),
                    end: _0x33f5x18['view']['getXFromDate'](_0x33f5xe['min'](_0x33f5xd, _0x33f5xf))
                };
                _0x33f5x14 = _0x33f5x18['view']['all']['startIndex'];
                _0x33f5x10 = _0x33f5x18['view']['getRecord'](_0x33f5x18['view']['getNode'](_0x33f5x14));
                _0x33f5x8 = _0x33f5x18['view']['getRowHeight']();
                if (_0x33f5x7['isAbove'](_0x33f5x10)) {
                    _0x33f5xc['top'] = -2 * _0x33f5x8;
                    _0x33f5xc['relPos'] = 'before';
                } else {
                    _0x33f5x4 = _0x33f5x18['view']['all']['endIndex'];
                    _0x33f5xc['top'] = (_0x33f5x4 - _0x33f5x14 + 1) * _0x33f5x8;
                    _0x33f5xc['relPos'] = 'after';
                }
                _0x33f5xc['bottom'] = _0x33f5xc['top'] + _0x33f5x8;
            }
            if (_0x33f5xc) {
                _0x33f5xc = _0x33f5x18['adjustItemBox'](_0x33f5x9, _0x33f5xc);
            }
        }
        return _0x33f5xc;
    },
    adjustItemBox: function(_0x33f5x2, _0x33f5x1) {
        return _0x33f5x1;
    },
    getConnectorStartSide: function(_0x33f5x2) {
        return 'left';
    },
    getConnectorEndSide: function(_0x33f5x2) {
        return 'right';
    }
});

Ext.define('Ext.ux.Scheduler.mixin.AbstractTimelineView', {
    selectedEventCls: 'sch-event-selected',
    readOnly: false,
    horizontalViewClass: 'Ext.ux.Scheduler.view.Horizontal',
    timeCellCls: 'sch-timetd',
    timeCellSelector: '.sch-timetd',
    eventBorderWidth: 1,
    timeAxis: null,
    timeAxisViewModel: null,
    eventPrefix: null,
    rowHeight: null,
    orientation: 'horizontal',
    mode: 'horizontal',
    horizontal: null,
    vertical: null,
    panel: null,
    displayDateFormat: null,
    el: null,
    constructor: function(_0x33f5x2) {
        if (_0x33f5x2 && _0x33f5x2['orientation']) {
            _0x33f5x2['mode'] = this['mode'] = _0x33f5x2['orientation'];
        }
        this['callParent']([ _0x33f5x2 ]);
    },
    _initializeTimelineView: function() {
        if (this['horizontalViewClass']) {
            this['horizontal'] = Ext.create(this['horizontalViewClass'], {
                view: this
            });
        }
        if (this['verticalViewClass']) {
            this['vertical'] = Ext.create(this['verticalViewClass'], {
                view: this
            });
        }
        if (this['calendarViewClass']) {
            this['calendar'] = Ext.create(this['calendarViewClass'], {
                view: this
            });
        }
        this['eventPrefix'] = (this['eventPrefix'] || this['getId']()) + '-';
    },
    getTimeAxisViewModel: function() {
        return this['timeAxisViewModel'];
    },
    getFormattedDate: function(_0x33f5x2) {
        return Ext.Date['format'](_0x33f5x2, this['getDisplayDateFormat']());
    },
    getFormattedEndDate: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x1 = this['getDisplayDateFormat']();
        if (_0x33f5x3['getHours']() === 0 && _0x33f5x3['getMinutes']() === 0 && (!_0x33f5x2 || !(_0x33f5x3['getYear']() === _0x33f5x2['getYear']() && _0x33f5x3['getMonth']() === _0x33f5x2['getMonth']() && _0x33f5x3['getDate']() === _0x33f5x2['getDate']())) && !Ext.ux.Scheduler.util.Date['hourInfoRe']['test'](_0x33f5x1['replace'](Ext.ux.Scheduler.util.Date['stripEscapeRe'], ''))) {
            _0x33f5x3 = Ext.ux.Scheduler.util.Date.add(_0x33f5x3, Ext.ux.Scheduler.util.Date.DAY, -1);
        }
        return Ext.Date['format'](_0x33f5x3, _0x33f5x1);
    },
    getDisplayDateFormat: function() {
        return this['displayDateFormat'];
    },
    setDisplayDateFormat: function(_0x33f5x2) {
        this['displayDateFormat'] = _0x33f5x2;
    },
    fitColumns: function(_0x33f5x1) {
        if (this['mode'] === 'horizontal') {
            this['getTimeAxisViewModel']()['fitToAvailableWidth'](_0x33f5x1);
        } else {
            var _0x33f5x2 = Math['floor']((this['panel']['getWidth']() - Ext['getScrollbarSize']()['width'] - 1) / this['headerCt']['getColumnCount']());
            this['setColumnWidth'](_0x33f5x2, _0x33f5x1);
        }
    },
    getElementFromEventRecord: function(_0x33f5x1, _0x33f5x4) {
        var _0x33f5x3 = this, _0x33f5x2;
        _0x33f5x2 = _0x33f5x3['getElementsFromEventRecord'](_0x33f5x1, _0x33f5x4);
        if (_0x33f5x2['length'] === 0) {
            _0x33f5x2 = null;
        } else {
            if (_0x33f5x2['length'] == 1) {
                _0x33f5x2 = _0x33f5x2[0];
            } else {
                if (_0x33f5x3['mode'] == 'calendar') {
                    _0x33f5x2 = _0x33f5x2[0];
                } else {
                    Ext['Error']['raise']('The method getElementFromEventRecord() is deprecated, it can\'t handle the situation when several DOM elements correspond to a single event record, please use getElementsFromEventRecord() method instead!');
                }
            }
        }
        return _0x33f5x2;
    },
    getElementsFromEventRecord: function(_0x33f5x2, _0x33f5x5, _0x33f5x3, _0x33f5x1) {
        var _0x33f5x4 = this, _0x33f5x8;
        _0x33f5x1 = _0x33f5x1 || false;
        if (_0x33f5x5 && (_0x33f5x3 !== null && _0x33f5x3 !== undefined)) {
            _0x33f5x8 = '[id^=' + _0x33f5x4['eventPrefix'] + _0x33f5x2['internalId'] + '-' + _0x33f5x5['internalId'] + '-' + _0x33f5x3 + ']';
        } else {
            if (_0x33f5x5) {
                _0x33f5x8 = '[id^=' + _0x33f5x4['eventPrefix'] + _0x33f5x2['internalId'] + '-' + _0x33f5x5['internalId'] + '-]';
            } else {
                _0x33f5x8 = '[id^=' + _0x33f5x4['eventPrefix'] + _0x33f5x2['internalId'] + '-]';
            }
        }
        return _0x33f5x4['getEl']()['query'](_0x33f5x8, _0x33f5x1);
    },
    getStartEndDatesFromRegion: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
        return this[this['mode']]['getStartEndDatesFromRegion'](_0x33f5x3, _0x33f5x1, _0x33f5x2);
    },
    getTimeResolution: function() {
        return this['timeAxis']['getResolution']();
    },
    setTimeResolution: function(_0x33f5x1, _0x33f5x2) {
        this['timeAxis']['setResolution'](_0x33f5x1, _0x33f5x2);
        if (this['getTimeAxisViewModel']()['snapToIncrement']) {
            this['refreshKeepingScroll']();
        }
    },
    getEventIdFromDomNodeId: function(_0x33f5x2) {
        return _0x33f5x2['substring'](this['eventPrefix']['length'])['split']('-')[0];
    },
    getResourceIdFromDomNodeId: function(_0x33f5x2) {
        return _0x33f5x2['substring'](this['eventPrefix']['length'])['split']('-')[1];
    },
    getDateFromDomEvent: function(_0x33f5x1, _0x33f5x2) {
        return this['getDateFromXY'](_0x33f5x1['getXY'](), _0x33f5x2);
    },
    getSnapPixelAmount: function() {
        return this['getTimeAxisViewModel']()['getSnapPixelAmount']();
    },
    setSnapEnabled: function(_0x33f5x2) {
        this['getTimeAxisViewModel']()['setSnapToIncrement'](_0x33f5x2);
    },
    setReadOnly: function(_0x33f5x2) {
        this['readOnly'] = _0x33f5x2;
        this[_0x33f5x2 ? 'addCls' : 'removeCls'](this['_cmpCls'] + '-readonly');
    },
    isReadOnly: function() {
        return this['readOnly'];
    },
    setOrientation: function() {
        this['setMode']['apply'](this, arguments);
    },
    setMode: function(_0x33f5x2) {
        this['mode'] = _0x33f5x2;
        this['timeAxisViewModel']['mode'] = _0x33f5x2;
    },
    getOrientation: function() {
        return this['getMode']['apply'](this, arguments);
    },
    getMode: function() {
        return this['mode'];
    },
    isHorizontal: function() {
        return this['getMode']() === 'horizontal';
    },
    isVertical: function() {
        return this['getMode']() === 'vertical';
    },
    isCalendar: function() {
        return this['getMode']() === 'calendar';
    },
    getDateFromXY: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
        return this[this['mode']]['getDateFromXY'](_0x33f5x3, _0x33f5x1, _0x33f5x2);
    },
    getDateFromCoordinate: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
        if (!_0x33f5x2) {
            _0x33f5x3 = this[this['mode']]['translateToScheduleCoordinate'](_0x33f5x3);
        }
        return this['timeAxisViewModel']['getDateFromPosition'](_0x33f5x3, _0x33f5x1);
    },
    getDateFromX: function(_0x33f5x2, _0x33f5x1) {
        return this['getDateFromCoordinate'](_0x33f5x2, _0x33f5x1);
    },
    getDateFromY: function(_0x33f5x1, _0x33f5x2) {
        return this['getDateFromCoordinate'](_0x33f5x1, _0x33f5x2);
    },
    getCoordinateFromDate: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x3 = this['timeAxisViewModel']['getPositionFromDate'](_0x33f5x2);
        if (_0x33f5x1 === false) {
            _0x33f5x3 = this[this['mode']]['translateToPageCoordinate'](_0x33f5x3);
        }
        return Math['round'](_0x33f5x3);
    },
    getXFromDate: function(_0x33f5x2, _0x33f5x1) {
        return this['getCoordinateFromDate'](_0x33f5x2, _0x33f5x1);
    },
    getYFromDate: function(_0x33f5x2, _0x33f5x1) {
        return this['getCoordinateFromDate'](_0x33f5x2, _0x33f5x1);
    },
    getTimeSpanDistance: function(_0x33f5x2, _0x33f5x1) {
        return this['timeAxisViewModel']['getDistanceBetweenDates'](_0x33f5x2, _0x33f5x1);
    },
    getTimeSpanRegion: function(_0x33f5x2, _0x33f5x1) {
        return this[this['mode']]['getTimeSpanRegion'](_0x33f5x2, _0x33f5x1);
    },
    getScheduleRegion: function(_0x33f5x1, _0x33f5x2) {
        return this[this['mode']]['getScheduleRegion'](_0x33f5x1, _0x33f5x2);
    },
    getTableRegion: function() {
        throw 'Abstract method call';
    },
    getRowNode: function(_0x33f5x2) {
        throw 'Abstract method call';
    },
    getRecordForRowNode: function(_0x33f5x2) {
        throw 'Abstract method call';
    },
    getVisibleDateRange: function() {
        return this[this['mode']]['getVisibleDateRange']();
    },
    setColumnWidth: function(_0x33f5x1, _0x33f5x2) {
        this[this['mode']]['setColumnWidth'](_0x33f5x1, _0x33f5x2);
    },
    findRowByChild: function(_0x33f5x2) {
        throw 'Abstract method call';
    },
    setBarMargin: function(_0x33f5x1, _0x33f5x2) {
        this['barMargin'] = _0x33f5x1;
        if (!_0x33f5x2) {
            this['refreshKeepingScroll']();
        }
    },
    getRowHeight: function() {
        return this['timeAxisViewModel']['getViewRowHeight']();
    },
    setRowHeight: function(_0x33f5x2, _0x33f5x1) {
        this['timeAxisViewModel']['setViewRowHeight'](_0x33f5x2, _0x33f5x1);
    },
    refreshKeepingScroll: function() {
        throw 'Abstract method call';
    },
    scrollVerticallyTo: function(_0x33f5x1, _0x33f5x2) {
        throw 'Abstract method call';
    },
    scrollHorizontallyTo: function(_0x33f5x2, _0x33f5x1) {
        throw 'Abstract method call';
    },
    getVerticalScroll: function() {
        throw 'Abstract method call';
    },
    getHorizontalScroll: function() {
        throw 'Abstract method call';
    },
    getEl: Ext.emptyFn,
    getScroll: function() {
        throw 'Abstract method call';
    },
    getOuterEl: function() {
        return this['getEl']();
    },
    getRowContainerEl: function() {
        return this['getEl']();
    },
    getScheduleCell: function(_0x33f5x1, _0x33f5x2) {
        return this['getCellByPosition']({
            row: _0x33f5x1,
            column: _0x33f5x2
        });
    },
    getScrollEventSource: function() {
        return this['getEl']();
    },
    getViewportHeight: function() {
        return this['getEl']()['getHeight']();
    },
    getViewportWidth: function() {
        return this['getEl']()['getWidth']();
    },
    getViewportCenterDate: function() {
        var _0x33f5x2 = this['getScroll'](), _0x33f5x1;
        if (this['getMode']() === 'vertical') {
            _0x33f5x1 = [ 0, _0x33f5x2['top'] + this['getViewportHeight']() / 2 ];
        } else {
            _0x33f5x1 = [ _0x33f5x2['left'] + this['getViewportWidth']() / 2, 0 ];
        }
        return this['getDateFromXY'](_0x33f5x1, null, true);
    },
    getDateConstraints: Ext.emptyFn,
    getItemBox: function(_0x33f5x2) {
        return this[this['mode']]['getItemBox'](_0x33f5x2);
    },
    getConnectorStartSide: function(_0x33f5x2) {
        return this[this['mode']]['getConnectorStartSide'](_0x33f5x2);
    },
    getConnectorEndSide: function(_0x33f5x2) {
        return this[this['mode']]['getConnectorEndSide'](_0x33f5x2);
    }
});

Ext.apply(Ext.ux.Scheduler, {
    VERSION: '4.2.3'
});

Ext.define('Ext.ux.Scheduler.mixin.FilterableTreeView', {
    prevBlockRefresh: null,
    initTreeFiltering: function() {
        var _0x33f5x2 = function() {
            var _0x33f5x1 = this['store'];
            this['mon'](_0x33f5x1, 'nodestore-datachange-start', this['onFilterChangeStart'], this);
            this['mon'](_0x33f5x1, 'nodestore-datachange-end', this['onFilterChangeEnd'], this);
            if (!_0x33f5x1['allowExpandCollapseWhileFiltered']) {
                this['mon'](_0x33f5x1, 'filter-clear', this['onFilterCleared'], this);
                this['mon'](_0x33f5x1, 'filter-set', this['onFilterSet'], this);
            }
        };
        if (this['rendered']) {
            _0x33f5x2['call'](this);
        } else {
            this['on']('beforerender', _0x33f5x2, this, {
                single: true
            });
        }
    },
    onFilterChangeStart: function() {
        this['prevBlockRefresh'] = this['blockRefresh'];
        this['blockRefresh'] = true;
        Ext['suspendLayouts']();
    },
    onFilterChangeEnd: function() {
        Ext['resumeLayouts'](true);
        this['blockRefresh'] = this['prevBlockRefresh'];
    },
    onFilterCleared: function() {
        delete this['toggle'];
        var _0x33f5x2 = this['getEl']();
        if (_0x33f5x2) {
            _0x33f5x2['removeCls']('sch-tree-filtered');
        }
    },
    onFilterSet: function() {
        this['toggle'] = function() {};
        var _0x33f5x2 = this['getEl']();
        if (_0x33f5x2) {
            _0x33f5x2['addCls']('sch-tree-filtered');
        }
    }
});

Ext.define('Ext.ux.Scheduler.mixin.GridViewCanvas', {
    extend: Ext.Mixin,
    mixinConfig: {
        before: {
            afterRender: 'afterRender'
        }
    },
    secondaryCanvasEl: null,
    secondaryCanvasCls: 'sch-secondary-canvas',
    secondaryCanvasLayerCls: 'sch-secondary-canvas-layer',
    itemsCanvasEl: null,
    itemsCanvasCls: 'sch-item-canvas',
    itemsCanvasLayerCls: 'sch-item-canvas-layer',
    isSecondaryCanvasAvailable: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return _0x33f5x1['rendered'] && !_0x33f5x1['isDestroyed'] && _0x33f5x1['getTargetEl']() && (_0x33f5x2 === undefined || _0x33f5x1['secondaryCanvasEl'] && _0x33f5x1['itemsCanvasEl'][_0x33f5x2] && !Ext['isGarbage'](_0x33f5x1['secondaryCanvasEl'][_0x33f5x2]));
    },
    getSecondaryCanvasEl: function(_0x33f5x1, _0x33f5x5) {
        var _0x33f5x3 = this, _0x33f5x2 = _0x33f5x3['secondaryCanvasEl'], _0x33f5x4 = _0x33f5x2;
        Ext.Assert && Ext.Assert.truthy(_0x33f5x3['isSecondaryCanvasAvailable'](), 'Can\'t get secondary canvas element, view isn\'t rendered yet');
        if (!_0x33f5x2 || Ext['isGarbage'](_0x33f5x2)) {
            _0x33f5x4 = _0x33f5x2 = _0x33f5x3['secondaryCanvasEl'] = _0x33f5x3['getTargetEl']()['insertFirst']({
                cls: _0x33f5x3['secondaryCanvasCls']
            });
        }
        if (arguments['length'] > 0) {
            _0x33f5x1 = _0x33f5x1 || 0;
            _0x33f5x4 = _0x33f5x2[_0x33f5x1] || Ext.dom['Query']['selectNode']('[data-sch-secondary-canvas-layer="' + _0x33f5x1 + '"]', _0x33f5x2['dom']);
            if (!_0x33f5x4 || Ext['isGarbage'](_0x33f5x4['dom'])) {
                _0x33f5x4 = _0x33f5x2['createChild']((Ext.isFunction(_0x33f5x5) ? _0x33f5x5() : _0x33f5x5) || {
                    tag: 'div'
                });
                _0x33f5x4['set']({
                    "data-sch-secondary-canvas-layer": _0x33f5x1
                });
                _0x33f5x4['setStyle']('zIndex', _0x33f5x1);
                _0x33f5x4['addCls'](_0x33f5x3['secondaryCanvasLayerCls']);
                _0x33f5x2[_0x33f5x1] = _0x33f5x4;
            }
        }
        return _0x33f5x4;
    },
    isItemCanvasAvailable: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return _0x33f5x1['rendered'] && !_0x33f5x1['isDestroyed'] && _0x33f5x1['getNodeContainer']() && (_0x33f5x2 === undefined || _0x33f5x1['itemsCanvasEl'] && _0x33f5x1['itemsCanvasEl'][_0x33f5x2] && !Ext['isGarbage'](_0x33f5x1['itemsCanvasEl'][_0x33f5x2]));
    },
    getItemCanvasEl: function(_0x33f5x1, _0x33f5x5) {
        var _0x33f5x3 = this, _0x33f5x2 = _0x33f5x3['itemsCanvasEl'], _0x33f5x4 = _0x33f5x2;
        Ext.Assert && Ext.Assert.truthy(_0x33f5x3['isItemCanvasAvailable'](), 'Can\'t get sub canvas element, view\'s node container isn\'t rendered yet');
        if (!_0x33f5x2 || !_0x33f5x2['dom'] || Ext['isGarbage'](_0x33f5x2['dom'])) {
            _0x33f5x4 = _0x33f5x2 = _0x33f5x3['itemsCanvasEl'] = Ext.fly(_0x33f5x3['getNodeContainer']())['insertFirst']({
                cls: _0x33f5x3['itemsCanvasCls']
            });
        }
        if (arguments['length'] > 0) {
            _0x33f5x1 = _0x33f5x1 || 0;
            _0x33f5x4 = _0x33f5x2[_0x33f5x1] || Ext.dom['Query']['selectNode']('[data-sch-secondary-canvas-layer="' + _0x33f5x1 + '"]', _0x33f5x2['dom']);
            if (!_0x33f5x4 || !_0x33f5x4['dom'] || Ext['isGarbage'](_0x33f5x4['dom'])) {
                _0x33f5x4 = _0x33f5x2['createChild']((Ext.isFunction(_0x33f5x5) ? _0x33f5x5() : _0x33f5x5) || {
                    tag: 'div'
                });
                _0x33f5x4['set']({
                    "data-sch-secondary-canvas-layer": _0x33f5x1
                });
                _0x33f5x4['setStyle']('zIndex', _0x33f5x1);
                _0x33f5x4['addCls'](_0x33f5x3['itemsCanvasLayerCls']);
                _0x33f5x2[_0x33f5x1] = _0x33f5x4;
            }
        }
        return _0x33f5x4;
    },
    afterRender: function() {
        var _0x33f5x1 = this['getSecondaryCanvasEl']();
        if (_0x33f5x1['getStyle']('position')['toLowerCase']() !== 'absolute') {
            var _0x33f5x2 = Ext['Msg'] || window;
            _0x33f5x2['alert']('ERROR: The CSS file for the Bryntum component has not been loaded.');
        }
    }
});

Ext.define('Ext.ux.Scheduler.mixin.PartnerTimelinePanel', {
    extend: Ext.Mixin,
    setupPartnerTimelinePanel: function(_0x33f5x1) {
        var _0x33f5x5 = this['partnerTimelinePanel'];
        var _0x33f5x2 = _0x33f5x5['lockedGrid'];
        var _0x33f5x4 = this['lockedGrid'];
        _0x33f5x2['mon'](_0x33f5x4, 'resize', this['onLockedGridResize'], _0x33f5x2);
        _0x33f5x4['mon'](_0x33f5x2, 'resize', this['onLockedGridResize'], _0x33f5x4);
        var _0x33f5x3 = _0x33f5x5['isVisible']() ? _0x33f5x5['lockedGrid']['getWidth']() : _0x33f5x5['lockedGrid']['width'];
        if (_0x33f5x2['getCollapsed']()) {
            this['mon'](_0x33f5x2, 'viewready', function(_0x33f5x8) {
                _0x33f5x4['setWidth'](_0x33f5x8['getWidth']());
            });
        } else {
            _0x33f5x4['setWidth'](_0x33f5x3);
        }
        this['on']('afterlayout', function() {
            if (_0x33f5x2['getCollapsed']()) {
                _0x33f5x4['collapse']();
            } else {
                _0x33f5x4['expand']();
                _0x33f5x4['setWidth'](_0x33f5x3);
            }
        }, this, {
            single: true
        });
        _0x33f5x2['on']({
            collapse: this['onPartnerCollapseExpand'],
            expand: this['onPartnerCollapseExpand'],
            scope: this
        });
        _0x33f5x4['on']({
            collapse: this['onPartnerCollapseExpand'],
            expand: this['onPartnerCollapseExpand'],
            scope: _0x33f5x5
        });
        this['setupScrollSync']();
        _0x33f5x5['mon'](this, 'beforezoomchange', this['onBeforeZoomChange'], this);
        _0x33f5x5['mon'](this, 'viewchange', this['onViewChange'], this);
        this['mon'](_0x33f5x5, 'beforezoomchange', this['onBeforeZoomChange'], this);
        this['mon'](_0x33f5x5, 'viewchange', this['onViewChange'], this);
    },
    onLockedGridResize: function(_0x33f5x1, _0x33f5x2) {
        this['setWidth'](_0x33f5x2);
    },
    onPartnerCollapseExpand: function(_0x33f5x2) {
        if (_0x33f5x2['getCollapsed']()) {
            this['lockedGrid']['collapse']();
        } else {
            this['lockedGrid']['expand']();
        }
    },
    setupScrollSync: function() {
        var _0x33f5x9 = this['partnerTimelinePanel']['getSchedulingView'](), _0x33f5x1 = _0x33f5x9['getScrollable'](), _0x33f5x5 = this['getSchedulingView'](), _0x33f5x2 = _0x33f5x5['getScrollable'](), _0x33f5x4, _0x33f5x8 = Ext['Function']['createBuffered'](function() {
            _0x33f5x4 = null;
        }, 300);
        var _0x33f5x3 = function(_0x33f5xf, _0x33f5xb) {
            var _0x33f5x7 = _0x33f5xf === _0x33f5x2 ? _0x33f5x2 : _0x33f5x1;
            var _0x33f5xe = _0x33f5xf === _0x33f5x2 ? _0x33f5x1 : _0x33f5x2;
            if (!_0x33f5x4) {
                _0x33f5x4 = _0x33f5x7;
            }
            _0x33f5x8();
            if (_0x33f5xe !== _0x33f5x4) {
                _0x33f5xe['component']['headerCt']['scrollTo'](_0x33f5xb);
                _0x33f5xe['scrollTo'](_0x33f5xb);
            }
        };
        _0x33f5x9['mon'](_0x33f5x2, 'scroll', _0x33f5x3);
        _0x33f5x5['mon'](_0x33f5x1, 'scroll', _0x33f5x3);
    },
    onViewChange: function(_0x33f5x2) {
        if (_0x33f5x2 === this) {
            this['partnerTimelinePanel']['viewPreset'] = this['viewPreset'] = this['timeAxisViewModel']['viewPreset'];
        }
    },
    onBeforeZoomChange: function() {
        var _0x33f5x3 = this['partnerTimelinePanel'];
        var _0x33f5x1 = _0x33f5x3['getSchedulingView']()['getScrollable'](), _0x33f5x2 = _0x33f5x1['suspendPartnerSync'];
        _0x33f5x1['suspendPartnerSync'] = Ext.emptyFn;
        _0x33f5x1['on']('scrollend', function() {
            _0x33f5x1['suspendPartnerSync'] = _0x33f5x2;
        }, null, {
            single: true
        });
    }
});

Ext.define('Ext.ux.Scheduler.patches.NavigationModel6_0_2', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.grid.NavigationModel',
    minVersion: '6.0.2',
    overrides: {
        focusPosition: function(_0x33f5x1) {
            var _0x33f5x4 = this, _0x33f5x3, _0x33f5x5, _0x33f5x2;
            _0x33f5x4['item'] = _0x33f5x4['cell'] = null;
            if (_0x33f5x1 && _0x33f5x1['record'] && _0x33f5x1['column']) {
                _0x33f5x3 = _0x33f5x1['view'];
                if (_0x33f5x1['rowElement']) {
                    _0x33f5x5 = _0x33f5x4['item'] = _0x33f5x1['rowElement'];
                } else {
                    _0x33f5x5 = _0x33f5x3['getRowByRecord'](_0x33f5x1['record']);
                }
                if (_0x33f5x5) {
                    _0x33f5x4['cell'] = _0x33f5x1['cellElement'] || Ext.fly(_0x33f5x5)['down'](_0x33f5x1['column']['getCellSelector'](), true);
                    if (_0x33f5x4['cell']) {
                        _0x33f5x4['cell'] = new Ext.dom.Fly(_0x33f5x4['cell']);
                        _0x33f5x3['lastFocused'] = _0x33f5x4['lastFocused'] = _0x33f5x4['position']['clone']();
                        _0x33f5x2 = _0x33f5x3['getScrollable']();
                        if (_0x33f5x2 && !_0x33f5x3['mixins']['Ext.ux.Scheduler.mixin.TimelineView']) {
                            _0x33f5x2['scrollIntoView'](_0x33f5x4['cell']);
                        }
                        _0x33f5x4['focusItem'](_0x33f5x4['cell']);
                        _0x33f5x3['focusEl'] = _0x33f5x4['cell'];
                    } else {
                        _0x33f5x4['position']['setAll']();
                        _0x33f5x4['record'] = _0x33f5x4['column'] = _0x33f5x4['recordIndex'] = _0x33f5x4['columnIndex'] = null;
                    }
                } else {
                    _0x33f5x5 = _0x33f5x3['dataSource']['indexOf'](_0x33f5x1['record']);
                    _0x33f5x4['position']['setAll']();
                    _0x33f5x4['record'] = _0x33f5x4['column'] = _0x33f5x4['recordIndex'] = _0x33f5x4['columnIndex'] = null;
                    if (_0x33f5x5 !== -1 && _0x33f5x3['bufferedRenderer']) {
                        _0x33f5x4['lastKeyEvent'] = null;
                        _0x33f5x3['bufferedRenderer']['scrollTo'](_0x33f5x5, false, _0x33f5x4['afterBufferedScrollTo'], _0x33f5x4);
                    }
                }
            }
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.TouchScroll', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.scroll.TouchScroller',
    minVersion: '5.1.0',
    overrides: {
        privates: {
            onEvent: function(_0x33f5x1) {
                var _0x33f5x2 = this;
                if (!_0x33f5x2[_0x33f5x2['listenerMap'][_0x33f5x1['type']]]) {
                    return;
                }
                return this['callParent'](arguments);
            }
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.View', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.view.View',
    minVersion: '5.1.0',
    overrides: {
        handleEvent: function(_0x33f5x8) {
            var _0x33f5x4 = this, _0x33f5x3 = _0x33f5x4['keyEventRe']['test'](_0x33f5x8['type']), _0x33f5x2 = _0x33f5x4['getNavigationModel']();
            _0x33f5x8['view'] = _0x33f5x4;
            if (_0x33f5x3) {
                _0x33f5x8['item'] = _0x33f5x8['getTarget'](_0x33f5x4['itemSelector']);
                _0x33f5x8['record'] = _0x33f5x2['getRecord'](_0x33f5x8['item']);
            }
            if (!_0x33f5x8['item']) {
                var _0x33f5x1 = _0x33f5x4['editingPlugin'] && _0x33f5x4['editingPlugin']['getActiveEditor'] && _0x33f5x4['editingPlugin']['getActiveEditor']();
                if (!(_0x33f5x1 && _0x33f5x1['getEl']()['contains'](_0x33f5x8['getTarget']()))) {
                    _0x33f5x8['item'] = _0x33f5x8['getTarget'](_0x33f5x4['itemSelector']);
                }
            }
            if (_0x33f5x8['item'] && !_0x33f5x8['record']) {
                _0x33f5x8['record'] = _0x33f5x4['getRecord'](_0x33f5x8['item']);
            }
            if (_0x33f5x4['processUIEvent'](_0x33f5x8) !== false) {
                _0x33f5x4['processSpecialEvent'](_0x33f5x8);
            }
            if (_0x33f5x3 && !Ext.fly(_0x33f5x8['target'])['isInputField']()) {
                if (_0x33f5x8['getKey']() === _0x33f5x8['SPACE'] || _0x33f5x8['isNavKeyPress'](true)) {
                    _0x33f5x8['preventDefault']();
                }
            }
            _0x33f5x8['view'] = null;
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.Scroller', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.scroll.Scroller',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        privates: {
            restoreState: function() {
                var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getScrollElement'](), _0x33f5x3;
                if (_0x33f5x2) {
                    _0x33f5x3 = _0x33f5x2['dom'];
                    if (_0x33f5x1['trackingScrollTop'] !== undefined) {
                        _0x33f5x1['restoring'] = true;
                        Ext['defer'](function() {
                            _0x33f5x1['restoring'] = false;
                        }, 50);
                        _0x33f5x3['scrollTop'] = _0x33f5x1['trackingScrollTop'];
                        _0x33f5x3['scrollLeft'] = _0x33f5x1['trackingScrollLeft'];
                    }
                }
            }
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.Queue', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.util.Queue',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        add: function(_0x33f5x5, _0x33f5x1) {
            var _0x33f5x3 = this, _0x33f5x2 = _0x33f5x3['getKey'](_0x33f5x5), _0x33f5x4;
            if (!(_0x33f5x4 = _0x33f5x3['map'][_0x33f5x2])) {
                ++_0x33f5x3['length'];
                _0x33f5x3['items']['push'](_0x33f5x5);
                _0x33f5x3['map'][_0x33f5x2] = _0x33f5x5;
            } else {
                if (_0x33f5x1) {
                    _0x33f5x3['map'][_0x33f5x2] = _0x33f5x5;
                    _0x33f5x3['items'][Ext.Array.indexOf(_0x33f5x3['items'], _0x33f5x4)] = _0x33f5x5;
                }
            }
            return _0x33f5x5;
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.LayoutContext', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.layout.Context',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        queueFlush: function(_0x33f5x1, _0x33f5x2) {
            this['flushQueue']['add'](_0x33f5x1, _0x33f5x2);
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.TableLayout', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.view.TableLayout',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        calculate: function(_0x33f5xe) {
            var _0x33f5x17 = this, _0x33f5x4 = _0x33f5xe['context'], _0x33f5x15 = _0x33f5xe['lockingPartnerContext'], _0x33f5x6 = _0x33f5xe['headerContext'], _0x33f5xd = _0x33f5xe['ownerCtContext'], _0x33f5x2 = _0x33f5x17['owner'], _0x33f5x3 = _0x33f5x6['getProp']('columnsChanged'), _0x33f5x8 = _0x33f5xe['state'], _0x33f5x11, _0x33f5x9, _0x33f5x1, _0x33f5xb, _0x33f5xc = _0x33f5x2['body']['dom'], _0x33f5xa, _0x33f5xf, _0x33f5x7, _0x33f5x14, _0x33f5x10, _0x33f5x5;
            if (!_0x33f5x2['all']['getCount']() && (!_0x33f5xc || !_0x33f5x2['body']['child']('table'))) {
                _0x33f5xe['setProp']('viewOverflowY', false);
                _0x33f5x17['callParent']([ _0x33f5xe ]);
                return;
            }
            if (_0x33f5x3 === undefined) {
                _0x33f5x17['done'] = false;
                return;
            }
            if (_0x33f5x3) {
                if (!(_0x33f5x11 = _0x33f5x8['columnFlusher'])) {
                    _0x33f5x4['queueFlush'](_0x33f5x8['columnFlusher'] = _0x33f5x11 = {
                        ownerContext: _0x33f5xe,
                        columnsChanged: _0x33f5x3,
                        layout: _0x33f5x17,
                        id: _0x33f5x17['columnFlusherId'],
                        flush: _0x33f5x17['flushColumnWidths']
                    }, true);
                }
                if (!_0x33f5x11['flushed']) {
                    _0x33f5x17['done'] = false;
                    return;
                }
            }
            if (_0x33f5xe['doSyncRowHeights']) {
                if (!(_0x33f5xb = _0x33f5x8['rowHeightFlusher'])) {
                    if (!(_0x33f5x1 = _0x33f5x8['rowHeights'])) {
                        _0x33f5x8['rowHeights'] = _0x33f5x1 = _0x33f5xe['rowHeightSynchronizer'];
                        _0x33f5x17['owner']['syncRowHeightMeasure'](_0x33f5x1);
                        _0x33f5xe['setProp']('rowHeights', _0x33f5x1);
                    }
                    if (!(_0x33f5x9 = _0x33f5x15['getProp']('rowHeights'))) {
                        _0x33f5x17['done'] = false;
                        return;
                    }
                    _0x33f5x4['queueFlush'](_0x33f5x8['rowHeightFlusher'] = _0x33f5xb = {
                        ownerContext: _0x33f5xe,
                        synchronizer: _0x33f5x1,
                        otherSynchronizer: _0x33f5x9,
                        layout: _0x33f5x17,
                        id: _0x33f5x17['rowHeightFlusherId'],
                        flush: _0x33f5x17['flushRowHeights']
                    }, true);
                }
                if (!_0x33f5xb['flushed']) {
                    _0x33f5x17['done'] = false;
                    return;
                }
            }
            _0x33f5x17['callParent']([ _0x33f5xe ]);
            if (!_0x33f5xe['heightModel']['shrinkWrap']) {
                _0x33f5x7 = false;
                if (!_0x33f5xd['heightModel']['shrinkWrap']) {
                    _0x33f5xf = _0x33f5xd['target']['layout']['getContainerSize'](_0x33f5xd);
                    if (!_0x33f5xf['gotHeight']) {
                        _0x33f5x17['done'] = false;
                        return;
                    }
                    _0x33f5xa = _0x33f5xc['offsetHeight'];
                    _0x33f5x7 = _0x33f5xa > _0x33f5xf['height'];
                }
                _0x33f5xe['setProp']('viewOverflowY', _0x33f5x7);
            }
            if (_0x33f5x17['done'] && Ext['getScrollbarSize']()['height']) {
                if (_0x33f5x15 && _0x33f5x2['isLockedView']) {
                    _0x33f5x14 = _0x33f5x2['lockingPartner'];
                    _0x33f5x10 = _0x33f5x2['scrollFlags']['x'] && _0x33f5xe['headerContext']['state']['boxPlan']['tooNarrow'];
                    _0x33f5x5 = _0x33f5x14['scrollFlags']['x'] && _0x33f5x15['headerContext']['state']['boxPlan']['tooNarrow'];
                    if (_0x33f5x10 !== _0x33f5x5) {
                        if (_0x33f5x5) {
                            _0x33f5x15['setProp']('overflowX', true);
                            _0x33f5xe['setProp']('overflowX', 'scroll');
                        } else {
                            _0x33f5xe['setProp']('overflowX', true);
                            _0x33f5x15['setProp']('overflowX', 'scroll');
                        }
                    } else {
                        _0x33f5xe['setProp']('overflowX', _0x33f5x5);
                        _0x33f5x15['setProp']('overflowX', _0x33f5x10);
                    }
                    _0x33f5xe['setProp']('overflowY', 'scroll');
                } else {
                    if (!_0x33f5x2['isAutoTree']) {
                        _0x33f5xe['setProp']('overflowX', !!_0x33f5xe['headerContext']['state']['boxPlan']['tooNarrow']);
                    }
                }
            }
        },
        beginLayout: function(_0x33f5x8) {
            var _0x33f5x4 = this, _0x33f5x2 = _0x33f5x4['owner'], _0x33f5x5 = _0x33f5x2['ownerGrid'], _0x33f5x3 = _0x33f5x2['lockingPartner'], _0x33f5x9 = _0x33f5x3 && _0x33f5x3['grid']['isVisible']() && !_0x33f5x3['grid']['collapsed'], _0x33f5x1 = _0x33f5x8['context'];
            _0x33f5x8['doSyncRowHeights'] = _0x33f5x9 && (_0x33f5x5['syncRowHeight'] || _0x33f5x5['syncRowHeightOnNextLayout']);
            if (!_0x33f5x4['columnFlusherId']) {
                _0x33f5x4['columnFlusherId'] = _0x33f5x4['id'] + '-columns';
                _0x33f5x4['rowHeightFlusherId'] = _0x33f5x4['id'] + '-rows';
            }
            if (_0x33f5x4['owner']['bufferedRenderer']) {
                _0x33f5x4['owner']['bufferedRenderer']['beforeTableLayout'](_0x33f5x8);
            }
            _0x33f5x4['callSuper']([ _0x33f5x8 ]);
            if (_0x33f5x9 && _0x33f5x3['componentLayout']['isRunning']()) {
                if (!_0x33f5x8['lockingPartnerContext']) {
                    (_0x33f5x8['lockingPartnerContext'] = _0x33f5x1['getCmp'](_0x33f5x3))['lockingPartnerContext'] = _0x33f5x8;
                }
                if (_0x33f5x8['doSyncRowHeights']) {
                    _0x33f5x8['rowHeightSynchronizer'] = _0x33f5x4['owner']['syncRowHeightBegin']();
                }
            }
            (_0x33f5x8['headerContext'] = _0x33f5x1['getCmp'](_0x33f5x4['headerCt']))['viewContext'] = _0x33f5x8;
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.ColumnLayout', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.grid.ColumnLayout',
    minVersion: '6.0.2',
    maxVersion: '6.0.3',
    overrides: {
        calculate: function(_0x33f5x4) {
            var _0x33f5x6 = this, _0x33f5x2 = _0x33f5x6['owner']['grid'], _0x33f5xb = _0x33f5x4['viewContext'], _0x33f5x1 = _0x33f5x4['state'], _0x33f5x3 = _0x33f5x4['context'], _0x33f5xe, _0x33f5xd, _0x33f5x10, _0x33f5x11, _0x33f5x9, _0x33f5xa, _0x33f5xc, _0x33f5x8, _0x33f5x7, _0x33f5x5;
            _0x33f5x6['callSuper']([ _0x33f5x4 ]);
            if (_0x33f5x2 && _0x33f5x1['parallelDone']) {
                _0x33f5xe = _0x33f5xb['lockingPartnerContext'];
                if (_0x33f5xe) {
                    _0x33f5xd = _0x33f5xe['target']['ownerCt'];
                    if (!_0x33f5xd['isVisible']() || _0x33f5xd['collapsed']) {
                        _0x33f5xe = null;
                    }
                }
                _0x33f5x10 = _0x33f5x2['ownerGrid'];
                if (_0x33f5x10['forceFit'] && !_0x33f5x1['reflexed']) {
                    if (_0x33f5x6['convertWidthsToFlexes'](_0x33f5x4)) {
                        _0x33f5x6['cacheFlexes'](_0x33f5x4);
                        _0x33f5x6['done'] = false;
                        _0x33f5x4['invalidate']({
                            state: {
                                reflexed: true,
                                scrollbarAdjustment: _0x33f5x6['getScrollbarAdjustment'](_0x33f5x4)
                            }
                        });
                        return;
                    }
                }
                if ((_0x33f5x11 = _0x33f5x1['columnsChanged']) === undefined) {
                    _0x33f5x9 = _0x33f5x4['target']['getVisibleGridColumns']();
                    _0x33f5x11 = false;
                    for (_0x33f5xc = 0, _0x33f5xa = _0x33f5x9['length']; _0x33f5xc < _0x33f5xa; _0x33f5xc++) {
                        _0x33f5x8 = _0x33f5x3['getCmp'](_0x33f5x9[_0x33f5xc]);
                        if (!_0x33f5x8['lastBox'] || _0x33f5x8['props']['width'] !== _0x33f5x8['lastBox']['width']) {
                            (_0x33f5x11 || (_0x33f5x11 = []))[_0x33f5xc] = _0x33f5x8;
                        }
                    }
                    _0x33f5x1['columnsChanged'] = _0x33f5x11;
                    _0x33f5x4['setProp']('columnsChanged', _0x33f5x11);
                }
                if (_0x33f5x4['manageScrollbar']) {
                    _0x33f5x7 = _0x33f5x6['getScrollbarAdjustment'](_0x33f5x4);
                    if (_0x33f5x7) {
                        _0x33f5x5 = _0x33f5xb['getProp']('viewOverflowY');
                        if (_0x33f5x5 === undefined) {
                            _0x33f5x6['done'] = false;
                            return;
                        }
                        if (!_0x33f5x5) {
                            if (_0x33f5xe) {
                                _0x33f5xe['invalidate']();
                                _0x33f5xe['headerContext']['invalidate']();
                            }
                            _0x33f5xb['invalidate']();
                            _0x33f5x4['invalidate']({
                                state: {
                                    scrollbarAdjustment: 0
                                }
                            });
                        }
                    }
                }
            }
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.ToolTip', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.tip.ToolTip',
    minVersion: '5.1.0',
    overrides: {
        setTarget: function(_0x33f5x4) {
            var _0x33f5x1 = this, _0x33f5x2 = Ext.get(_0x33f5x4), _0x33f5x3;
            if (_0x33f5x1['target']) {
                _0x33f5x3 = Ext.get(_0x33f5x1['target']);
                _0x33f5x1['mun'](_0x33f5x3, {
                    mouseover: _0x33f5x1['onTargetOver'],
                    tap: _0x33f5x1['onTargetOver'],
                    mouseout: _0x33f5x1['onTargetOut'],
                    mousemove: _0x33f5x1['onMouseMove'],
                    scope: _0x33f5x1
                });
            }
            _0x33f5x1['target'] = _0x33f5x2;
            if (_0x33f5x2) {
                _0x33f5x1['mon'](_0x33f5x2, {
                    mouseover: _0x33f5x1['onTargetOver'],
                    tap: _0x33f5x1['onTargetOver'],
                    mouseout: _0x33f5x1['onTargetOut'],
                    mousemove: _0x33f5x1['onMouseMove'],
                    scope: _0x33f5x1
                });
            }
            if (_0x33f5x1['anchor']) {
                _0x33f5x1['anchorTarget'] = _0x33f5x1['target'];
            }
        }
    }
});

Ext.define('Ext.ux.Scheduler.mixin.TimelineView', {
    extend: Ext.ux.Scheduler.mixin.AbstractTimelineView,
    tip: null,
    overScheduledEventClass: 'sch-event-hover',
    ScheduleBarEvents: [ 'mousedown', 'mouseup', 'click', 'dblclick', 'longpress', 'contextmenu' ],
    ResourceRowEvents: [ 'keydown', 'keyup' ],
    preventOverCls: false,
    hoveredEventNode: null,
    _initializeTimelineView: function() {
        this['callParent'](arguments);
        this['on']('destroy', this._onDestroy, this);
        this['on']('afterrender', this._onAfterRender, this);
        this['panel']['on']('viewready', this._onViewReady, this);
        this['setMode'](this['mode']);
        this['enableBubble']('columnwidthchange');
        this['addCls']('sch-timelineview');
        if (this['readOnly']) {
            this['addCls'](this['_cmpCls'] + '-readonly');
        }
        this['addCls'](this._cmpCls);
        if (this['eventAnimations']) {
            this['addCls']('sch-animations-enabled');
        }
    },
    handleScheduleBarEvent: function(_0x33f5x1, _0x33f5x2) {
        this['fireEvent'](this['scheduledEventName'] + _0x33f5x1['type'], this, this['resolveEventRecord'](_0x33f5x2), _0x33f5x1);
    },
    handleResourceRowEvent: function(_0x33f5x2, _0x33f5x1) {
        this['fireEvent'](this['scheduledEventName'] + _0x33f5x2['type'], this, this['resolveEventRecordFromResourceRow'](_0x33f5x1), _0x33f5x2);
    },
    _onDestroy: function() {
        if (this['tip']) {
            this['tip']['destroy']();
        }
    },
    _onViewReady: function() {
        if (this['touchScroll']) {
            this['getSecondaryCanvasEl']()['insertBefore'](this['getNodeContainer']());
        }
    },
    _onAfterRender: function() {
        if (this['overScheduledEventClass']) {
            this['setMouseOverEnabled'](true);
        }
        if (this['tooltipTpl']) {
            if (typeof this['tooltipTpl'] === 'string') {
                this['tooltipTpl'] = new Ext.XTemplate(this['tooltipTpl']);
            }
            this['el']['on']('mousemove', this['setupTooltip'], this, {
                single: true
            });
        }
        var _0x33f5x3 = this['bufferedRenderer'];
        if (_0x33f5x3) {
            this['patchBufferedRenderingPlugin'](_0x33f5x3);
            this['patchBufferedRenderingPlugin'](this['lockingPartner']['bufferedRenderer']);
        }
        this['on']('bufferedrefresh', this['onBufferedRefresh'], this, {
            buffer: 10
        });
        this['setupTimeCellEvents']();
        var _0x33f5x1 = {
            delegate: this['eventSelector'],
            scope: this
        };
        var _0x33f5x2 = {
            delegate: this['rowSelector'],
            scope: this
        };
        Ext.Array['each'](this.ScheduleBarEvents, function(_0x33f5x4) {
            _0x33f5x1[_0x33f5x4] = this['handleScheduleBarEvent'];
        }, this);
        Ext.Array['each'](this.ResourceRowEvents, function(_0x33f5x4) {
            _0x33f5x2[_0x33f5x4] = this['handleResourceRowEvent'];
        }, this);
        this['el']['on'](_0x33f5x1);
        this['el']['on'](_0x33f5x2);
    },
    patchBufferedRenderingPlugin: function(_0x33f5x3) {
        var _0x33f5x1 = this;
        var _0x33f5x2 = _0x33f5x3['setBodyTop'];
        _0x33f5x3['setBodyTop'] = function(_0x33f5x4, _0x33f5x5) {
            var _0x33f5x8 = _0x33f5x2['apply'](this, arguments);
            _0x33f5x1['fireEvent']('bufferedrefresh', this);
            return _0x33f5x8;
        };
    },
    onBufferedRefresh: function() {
        var _0x33f5x8 = this, _0x33f5x5 = _0x33f5x8['body']['dom'], _0x33f5x1, _0x33f5x2, _0x33f5x3, _0x33f5x4;
        if (_0x33f5x5) {
            _0x33f5x2 = _0x33f5x5['style'];
            _0x33f5x1 = _0x33f5x8['getSecondaryCanvasEl']()['dom'];
            if (Ext['isIE9m']) {
                _0x33f5x1['style']['top'] = _0x33f5x2['top'];
            } else {
                _0x33f5x3 = _0x33f5x2['transform'] || _0x33f5x2['msTransform'] || _0x33f5x2['webkitTransform'];
                if (_0x33f5x3) {
                    _0x33f5x4 = /\(-?\d+px,\s*(-?\d+px),\s*(-?\d+)px\)/['exec'](_0x33f5x3);
                    if (_0x33f5x4 && _0x33f5x4['length'] > 0) {
                        _0x33f5x1['style']['top'] = _0x33f5x4[1];
                    } else {
                        _0x33f5x1['style']['top'] = _0x33f5x2['top'];
                    }
                }
            }
        }
    },
    setMouseOverEnabled: function(_0x33f5x2) {
        this[_0x33f5x2 ? 'mon' : 'mun'](this['el'], {
            mouseover: this['onEventMouseOver'],
            mouseout: this['onEventMouseOut'],
            delegate: this['eventSelector'],
            scope: this
        });
    },
    onEventMouseOver: function(_0x33f5x3, _0x33f5x2) {
        if (_0x33f5x2 !== this['hoveredEventNode'] && !this['preventOverCls']) {
            this['hoveredEventNode'] = _0x33f5x2;
            Ext.fly(_0x33f5x2)['addCls'](this['overScheduledEventClass']);
            var _0x33f5x1 = this['resolveEventRecord'](_0x33f5x2);
            if (_0x33f5x1) {
                this['fireEvent']('eventmouseenter', this, _0x33f5x1, _0x33f5x3);
            }
        }
    },
    onEventMouseOut: function(_0x33f5x1, _0x33f5x2) {
        if (this['hoveredEventNode']) {
            if (!_0x33f5x1['within'](this['hoveredEventNode'], true, true)) {
                Ext.fly(this['hoveredEventNode'])['removeCls'](this['overScheduledEventClass']);
                this['fireEvent']('eventmouseleave', this, this['resolveEventRecord'](this['hoveredEventNode']), _0x33f5x1);
                this['hoveredEventNode'] = null;
            }
        }
    },
    highlightItem: function(_0x33f5x1) {
        if (_0x33f5x1) {
            var _0x33f5x2 = this;
            _0x33f5x2['clearHighlight']();
            _0x33f5x2['highlightedItem'] = _0x33f5x1;
            Ext.fly(_0x33f5x1)['addCls'](_0x33f5x2['overItemCls']);
        }
    },
    setupTooltip: function() {
        var _0x33f5x1 = this, _0x33f5x2 = Ext.apply({
            delegate: _0x33f5x1['eventSelector'],
            target: _0x33f5x1['el'],
            anchor: 'b',
            rtl: _0x33f5x1['rtl'],
            show: function() {
                Ext['ToolTip']['prototype']['show']['apply'](this, arguments);
                if (this['triggerElement'] && _0x33f5x1['getMode']() === 'horizontal') {
                    var _0x33f5x8 = Ext.fly(this['triggerElement'])['getBox']();
                    var _0x33f5x4 = Ext.dom['Element']['getViewportWidth']();
                    var _0x33f5x3 = Math['min'](Math['max'](this['targetXY'][0] - 10, 0), _0x33f5x4 - this['getWidth']() - 10);
                    var _0x33f5x5 = _0x33f5x8['top'] - this['getHeight']() - 10;
                    this['setY'](_0x33f5x5 < 0 ? _0x33f5x8['bottom'] + 10 : _0x33f5x5);
                    this['setX'](_0x33f5x3);
                }
            }
        }, _0x33f5x1['tipCfg']);
        _0x33f5x1['tip'] = new Ext.ToolTip(_0x33f5x2);
        _0x33f5x1['tip']['on']({
            beforeshow: function(_0x33f5x8) {
                if (!_0x33f5x8['triggerElement'] || !_0x33f5x8['triggerElement']['id']) {
                    return false;
                }
                var _0x33f5x9 = Ext['all']('window[modal=true]{isVisible()}');
                var _0x33f5x4 = Ext.Array['findBy'](_0x33f5x9, function(_0x33f5xf) {
                    return this !== _0x33f5xf && !this['isDescendantOf'](_0x33f5xf);
                }, this);
                if (_0x33f5x4) {
                    return false;
                }
                var _0x33f5x3 = this['resolveEventRecord'](_0x33f5x8['triggerElement']);
                if (!_0x33f5x3 || this['fireEvent']('beforetooltipshow', this, _0x33f5x3) === false) {
                    return false;
                }
                var _0x33f5x7 = this['getDataForTooltipTpl'](_0x33f5x3, _0x33f5x8['triggerElement']), _0x33f5x5;
                if (!_0x33f5x7) {
                    return false;
                }
                _0x33f5x5 = this['tooltipTpl']['apply'](_0x33f5x7);
                if (!_0x33f5x5) {
                    return false;
                }
                _0x33f5x8['update'](_0x33f5x5);
            },
            scope: this
        });
        if (Ext['supports']['Touch']) {
            _0x33f5x1['el']['un']({
                touchmove: _0x33f5x1['setupTooltip'],
                mousemove: _0x33f5x1['setupTooltip'],
                scope: _0x33f5x1
            });
        }
    },
    getHorizontalTimeAxisColumn: function() {
        if (!this['timeAxisColumn']) {
            this['timeAxisColumn'] = this['headerCt']['down']('timeaxiscolumn');
            if (this['timeAxisColumn']) {
                this['timeAxisColumn']['on']('destroy', function() {
                    this['timeAxisColumn'] = null;
                }, this);
            }
        }
        return this['timeAxisColumn'];
    },
    getDataForTooltipTpl: function(_0x33f5x2, _0x33f5x1) {
        return Ext.apply({
            _record: _0x33f5x2
        }, _0x33f5x2['data']);
    },
    refreshKeepingScroll: function() {
        Ext['suspendLayouts']();
        this['saveScrollState']();
        this['refreshView']();
        Ext['resumeLayouts'](true);
        if (this['scrollState']['left'] !== 0 || this['scrollState']['top'] !== 0 || this['infiniteScroll']) {
            this['restoreScrollState']();
        }
    },
    setupTimeCellEvents: function() {
        this['mon'](this['el'], {
            click: this['handleScheduleEvent'],
            dblclick: this['handleScheduleEvent'],
            contextmenu: this['handleScheduleEvent'],
            pinch: this['handleScheduleEvent'],
            pinchstart: this['handleScheduleEvent'],
            pinchend: this['handleScheduleEvent'],
            scope: this
        });
    },
    getTableRegion: function() {
        var _0x33f5x2 = this['el']['down']('.' + Ext['baseCSSPrefix'] + 'grid-item-container');
        return (_0x33f5x2 || this['el'])['getRegion']();
    },
    getRowNode: function(_0x33f5x2) {
        return this['getNodeByRecord'](_0x33f5x2);
    },
    findRowByChild: function(_0x33f5x2) {
        return this['findItemByChild'](_0x33f5x2);
    },
    getRecordForRowNode: function(_0x33f5x2) {
        return this['getRecord'](_0x33f5x2);
    },
    refreshKeepingResourceScroll: function() {
        var _0x33f5x2 = this['getScroll']();
        this['refreshView']();
        if (this['getMode']() === 'horizontal') {
            this['scrollVerticallyTo'](_0x33f5x2['top']);
        } else {
            this['scrollHorizontallyTo'](_0x33f5x2['left']);
        }
    },
    scrollHorizontallyTo: function(_0x33f5x2, _0x33f5x1) {
        this['scrollTo'](_0x33f5x2, null, _0x33f5x1);
    },
    scrollVerticallyTo: function(_0x33f5x1, _0x33f5x2) {
        this['scrollTo'](null, _0x33f5x1, _0x33f5x2);
    },
    getVerticalScroll: function() {
        return this['getScrollY']();
    },
    getHorizontalScroll: function() {
        return this['getScrollX']();
    },
    getScroll: function() {
        var _0x33f5x2 = this;
        return {
            top: _0x33f5x2['getScrollY'](),
            left: _0x33f5x2['getScrollX']()
        };
    },
    handleScheduleEvent: function() {},
    scrollElementIntoView: function(_0x33f5x4, _0x33f5x14, _0x33f5x7, _0x33f5x8, _0x33f5x2, _0x33f5x9, _0x33f5x3) {
        var _0x33f5x16 = this, _0x33f5x15 = _0x33f5x4['dom'], _0x33f5xc = Ext.getDom(_0x33f5x16['getEl']()), _0x33f5xe = _0x33f5x4['getOffsetsTo'](_0x33f5xc), _0x33f5x1 = _0x33f5x16['getScroll'](), _0x33f5x5 = _0x33f5xe[0] + _0x33f5x1['left'], _0x33f5xd = _0x33f5xe[1] + _0x33f5x1['top'], _0x33f5xb = _0x33f5xd + _0x33f5x15['offsetHeight'], _0x33f5x12 = _0x33f5x5 + _0x33f5x15['offsetWidth'], _0x33f5xa = _0x33f5xc['clientHeight'], _0x33f5xf = parseInt(_0x33f5x1['top'], 10), _0x33f5x13 = parseInt(_0x33f5x1['left'], 10), _0x33f5x6 = _0x33f5xf + _0x33f5xa, _0x33f5x11 = _0x33f5x13 + _0x33f5xc['clientWidth'], _0x33f5x17, _0x33f5x10;
        _0x33f5x2 = _0x33f5x2 === null || _0x33f5x2 === undefined ? 20 : _0x33f5x2;
        if (_0x33f5x15['offsetHeight'] > _0x33f5xa || _0x33f5xd < _0x33f5xf) {
            _0x33f5x10 = _0x33f5xd - _0x33f5x2;
        } else {
            if (_0x33f5xb > _0x33f5x6) {
                _0x33f5x10 = _0x33f5xb - _0x33f5xa + _0x33f5x2;
            }
        }
        if (_0x33f5x14 !== false && _0x33f5x15['offsetWidth'] > _0x33f5xc['clientWidth'] || _0x33f5x5 < _0x33f5x13) {
            _0x33f5x17 = _0x33f5x5 - _0x33f5x2;
        } else {
            if (_0x33f5x14 !== false && _0x33f5x12 > _0x33f5x11) {
                _0x33f5x17 = _0x33f5x12 - _0x33f5xc['clientWidth'] + _0x33f5x2;
            }
        }
        _0x33f5x7 = _0x33f5x7 === true && {} || _0x33f5x7;
        _0x33f5x8 = _0x33f5x8 === true && {} || _0x33f5x8;
        _0x33f5x3 = _0x33f5x3 || _0x33f5x16;
        if (_0x33f5x7 && _0x33f5x8) {
            _0x33f5x7['listeners'] = Ext.apply(_0x33f5x7['listeners'] || {}, {
                afteranimate: function() {
                    _0x33f5x8['listeners'] = Ext.apply(_0x33f5x8['listeners'] || {}, {
                        afteranimate: function() {
                            _0x33f5x9 && _0x33f5x9['call'](_0x33f5x3);
                            _0x33f5x9 = null;
                        }
                    });
                    Ext.fly(_0x33f5x15)['highlight'](null, _0x33f5x8);
                }
            });
        } else {
            if (_0x33f5x7) {
                _0x33f5x7['listeners'] = Ext.apply(_0x33f5x7['listeners'], {
                    afteranimate: function() {
                        _0x33f5x9 && _0x33f5x9['call'](_0x33f5x3);
                        _0x33f5x9 = null;
                    }
                });
            } else {
                if (_0x33f5x8) {
                    _0x33f5x8['listeners'] = Ext.apply(_0x33f5x8['listeners'] || {}, {
                        afteranimate: function() {
                            _0x33f5x9 && _0x33f5x9['call'](_0x33f5x3);
                            _0x33f5x9 = null;
                        }
                    });
                }
            }
        }
        _0x33f5x10 !== undefined && _0x33f5x16['setScrollY'](_0x33f5x10, _0x33f5x7);
        _0x33f5x17 !== undefined && _0x33f5x16['setScrollX'](_0x33f5x17, _0x33f5x7);
        !_0x33f5x7 && _0x33f5x8 && Ext.fly(_0x33f5x15)['highlight'](null, _0x33f5x8);
        !_0x33f5x7 && !_0x33f5x8 && _0x33f5x9 && _0x33f5x9['call'](_0x33f5x3);
    },
    disableViewScroller: function(_0x33f5x1) {
        var _0x33f5x2 = this['getScrollable']();
        if (_0x33f5x2) {
            _0x33f5x2['setDisabled'](_0x33f5x1);
        }
    }
});

Ext.define('Ext.ux.Scheduler.view.TimelineGridView', {
    extend: Ext['grid']['View'],
    mixins: [ Ext.ux.Scheduler.mixin.TimelineView ],
    infiniteScroll: false,
    bufferCoef: 5,
    bufferThreshold: .2,
    cachedScrollLeftDate: null,
    boxIsReady: false,
    ignoreNextHorizontalScroll: false,
    constructor: function(_0x33f5x2) {
        this['callParent'](arguments);
        if (this['infiniteScroll']) {
            this['on']('boxready', this['setupInfiniteScroll'], this);
        }
        if (this['timeAxisViewModel']) {
            this['relayEvents'](this['timeAxisViewModel'], [ 'columnwidthchange' ]);
        }
    },
    setupInfiniteScroll: function() {
        var _0x33f5x4 = this['panel']['ownerCt'];
        this['cachedScrollLeftDate'] = _0x33f5x4['startDate'] || this['timeAxis']['getStart']();
        if (Ext['getVersion']()['isLessThan']('6.0.1') && Ext['supports']['Touch'] && Ext['os']['is']['Windows']) {
            var _0x33f5x2 = this['panel']['headerCt']['getScrollable']();
            var _0x33f5x1 = this['getScrollable']();
            _0x33f5x2['onIdle'] && Ext['GlobalEvents']['un']('idle', _0x33f5x2['onIdle'], _0x33f5x2);
            _0x33f5x1['onIdle'] && Ext['GlobalEvents']['un']('idle', _0x33f5x1['onIdle'], _0x33f5x1);
        }
        var _0x33f5x3 = this;
        _0x33f5x4['calculateOptimalDateRange'] = function(_0x33f5x8, _0x33f5x5, _0x33f5xf, _0x33f5x9) {
            if (_0x33f5x9) {
                return _0x33f5x9;
            }
            var _0x33f5x7 = Ext.ux.Scheduler.preset.Manager.getPreset(_0x33f5xf['preset']);
            return _0x33f5x3['calculateInfiniteScrollingDateRange'](_0x33f5x8, _0x33f5x7['getBottomHeader']()['unit'], _0x33f5xf['increment'], _0x33f5xf['width']);
        };
        this['bindInfiniteScrollListeners']();
    },
    bindInfiniteScrollListeners: function() {
        this['getScrollable']()['on']('scroll', this['onHorizontalScroll'], this);
    },
    unbindInfiniteScrollListeners: function() {
        this['getScrollable']()['un']('scroll', this['onHorizontalScroll'], this);
        this['infiniteScroll'] = false;
    },
    onHorizontalScroll: function(_0x33f5x5, _0x33f5x9, _0x33f5x8) {
        if (this['ignoreNextHorizontalScroll'] || this['cachedScrollLeftDate']) {
            this['ignoreNextHorizontalScroll'] = false;
            return;
        }
        var _0x33f5x4 = Ext['getScrollbarSize'](), _0x33f5x3 = this['getWidth'](), _0x33f5x1 = this['getScrollable']()['getMaxPosition']()['x'] + _0x33f5x3 - _0x33f5x4['width'], _0x33f5x2 = _0x33f5x3 * this['bufferThreshold'] * this['bufferCoef'];
        if (_0x33f5x1 - _0x33f5x9 - _0x33f5x3 < _0x33f5x2 || _0x33f5x9 < _0x33f5x2) {
            this['shiftToDate'](this['getDateFromCoordinate'](_0x33f5x9, null, true));
            this['el']['stopAnimation']();
        }
    },
    refresh: function() {
        this['callParent'](arguments);
        if (this['infiniteScroll'] && !this['scrollStateSaved'] && this['boxIsReady']) {
            this['restoreScrollLeftDate']();
        }
    },
    onResize: function(_0x33f5x3, _0x33f5x2, _0x33f5x1, _0x33f5x4) {
        this['boxIsReady'] = true;
        this['callParent'](arguments);
        if (this['infiniteScroll'] && _0x33f5x3 > 0 && _0x33f5x3 !== _0x33f5x1) {
            this['shiftToDate'](this['cachedScrollLeftDate'] || this['getVisibleDateRange']()['startDate'], this['cachedScrollCentered']);
        }
    },
    restoreScrollLeftDate: function() {
        if (this['cachedScrollLeftDate'] && this['boxIsReady']) {
            this['ignoreNextHorizontalScroll'] = true;
            this['scrollToDate'](this['cachedScrollLeftDate']);
            this['cachedScrollLeftDate'] = null;
        }
    },
    scrollToDate: function(_0x33f5x2) {
        this['cachedScrollLeftDate'] = _0x33f5x2;
        if (this['cachedScrollCentered']) {
            this['panel']['ownerCt']['scrollToDateCentered'](_0x33f5x2);
        } else {
            this['panel']['ownerCt']['scrollToDate'](_0x33f5x2);
        }
        var _0x33f5x1 = this['getScrollX']();
        this['panel']['scrollLeftPos'] = _0x33f5x1;
        this['headerCt']['setScrollX'](_0x33f5x1);
    },
    saveScrollState: function() {
        this['scrollStateSaved'] = this['boxIsReady'];
        this['callParent'](arguments);
    },
    restoreScrollState: function() {
        this['scrollStateSaved'] = false;
        if (this['infiniteScroll'] && this['cachedScrollLeftDate']) {
            this['restoreScrollLeftDate']();
            this['setScrollY'](this['scrollState']['top']);
            return;
        }
        this['callParent'](arguments);
    },
    calculateInfiniteScrollingDateRange: function(_0x33f5x7, _0x33f5x5, _0x33f5x1, _0x33f5x2) {
        var _0x33f5x8 = this['timeAxis'];
        var _0x33f5x4 = this['getWidth']();
        _0x33f5x2 = _0x33f5x2 || this['timeAxisViewModel']['getTickWidth']();
        _0x33f5x1 = _0x33f5x1 || _0x33f5x8['increment'] || 1;
        _0x33f5x5 = _0x33f5x5 || _0x33f5x8['unit'];
        var _0x33f5x9 = Ext.ux.Scheduler.util.Date;
        var _0x33f5x3 = Math['ceil'](_0x33f5x4 * this['bufferCoef'] / _0x33f5x2);
        return {
            start: _0x33f5x8['floorDate'](_0x33f5x9['add'](_0x33f5x7, _0x33f5x5, -_0x33f5x3 * _0x33f5x1), false, _0x33f5x5, _0x33f5x1),
            end: _0x33f5x8['ceilDate'](_0x33f5x9['add'](_0x33f5x7, _0x33f5x5, Math['ceil']((_0x33f5x4 / _0x33f5x2 + _0x33f5x3) * _0x33f5x1)), false, _0x33f5x5, _0x33f5x1)
        };
    },
    shiftToDate: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = this['calculateInfiniteScrollingDateRange'](_0x33f5x3);
        this['cachedScrollLeftDate'] = _0x33f5x3;
        this['cachedScrollCentered'] = _0x33f5x1;
        this['timeAxis']['setTimeSpan'](_0x33f5x2['start'], _0x33f5x2['end']);
    },
    destroy: function() {
        if (this['infiniteScroll'] && this['rendered']) {
            this['unbindInfiniteScrollListeners']();
        }
        this['callParent'](arguments);
    }
});

Ext.define('Ext.ux.Scheduler.patches.DragDropManager', {
    extend: Ext.ux.Scheduler.util.Patch,
    minVersion: '6.0.0',
    applyFn: function() {
       Ext.override(Ext['dd'].DragDropManager, {
            fireEvents: function(_0x33f5x1c, _0x33f5x6) {
                var _0x33f5x1a = this, _0x33f5x10 = Ext['supports']['Touch'], _0x33f5xb = _0x33f5x1a['dragCurrent'], _0x33f5x18 = _0x33f5x1a['currentPoint'], _0x33f5x14 = _0x33f5x18['x'], _0x33f5x15 = _0x33f5x18['y'], _0x33f5x17 = [], _0x33f5x11 = [], _0x33f5xd = [], _0x33f5x4 = [], _0x33f5x1d = [], _0x33f5x19 = [], _0x33f5x3 = _0x33f5x10 ? document['documentElement']['clientWidth'] / window['innerWidth'] : 1, _0x33f5x7, _0x33f5xe, _0x33f5xa, _0x33f5x8, _0x33f5x13, _0x33f5x16, _0x33f5x12, _0x33f5xc;
                if (!_0x33f5xb || _0x33f5xb['isLocked']()) {
                    return;
                }
                _0x33f5xc = !(_0x33f5xb['deltaX'] < 0 || _0x33f5xb['deltaY'] < 0);
                if (_0x33f5x10 || !_0x33f5x1a['notifyOccluded'] && (!Ext['supports']['CSSPointerEvents'] || Ext['isIE10m'] || Ext['isOpera']) && _0x33f5xc) {
                    _0x33f5x7 = _0x33f5xb['getDragEl']();
                    if (_0x33f5xc) {
                        _0x33f5x7['style']['visibility'] = 'hidden';
                    }
                    var _0x33f5x9 = Ext.getBody()['getScroll']();
                    _0x33f5x1c['target'] = document['elementFromPoint'](_0x33f5x14 - _0x33f5x9['left'] / _0x33f5x3, _0x33f5x15 - _0x33f5x9['top'] / _0x33f5x3);
                    if (_0x33f5xc) {
                        _0x33f5x7['style']['visibility'] = 'visible';
                    }
                }
                for (_0x33f5x13 in _0x33f5x1a['dragOvers']) {
                    _0x33f5xe = _0x33f5x1a['dragOvers'][_0x33f5x13];
                    delete _0x33f5x1a['dragOvers'][_0x33f5x13];
                    if (!_0x33f5x1a['isTypeOfDD'](_0x33f5xe) || _0x33f5xe['destroyed']) {
                        continue;
                    }
                    if (_0x33f5x1a['notifyOccluded']) {
                        if (!this['isOverTarget'](_0x33f5x18, _0x33f5xe, _0x33f5x1a['mode'])) {
                            _0x33f5xd['push'](_0x33f5xe);
                        }
                    } else {
                        if (!_0x33f5x1c['within'](_0x33f5xe['getEl']())) {
                            _0x33f5xd['push'](_0x33f5xe);
                        }
                    }
                    _0x33f5x11[_0x33f5x13] = true;
                }
                for (_0x33f5x12 in _0x33f5xb['groups']) {
                    if ('string' !== typeof _0x33f5x12) {
                        continue;
                    }
                    for (_0x33f5x13 in _0x33f5x1a['ids'][_0x33f5x12]) {
                        _0x33f5xe = _0x33f5x1a['ids'][_0x33f5x12][_0x33f5x13];
                        if (_0x33f5x1a['isTypeOfDD'](_0x33f5xe) && (_0x33f5xa = _0x33f5xe['getEl']()) && _0x33f5xe['isTarget'] && !_0x33f5xe['isLocked']() && Ext.fly(_0x33f5xa)['isVisible'](true) && (_0x33f5xe !== _0x33f5xb || _0x33f5xb['ignoreSelf'] === false)) {
                            if (_0x33f5x1a['notifyOccluded']) {
                                if ((_0x33f5xe['zIndex'] = _0x33f5x1a['getZIndex'](_0x33f5xa)) !== -1) {
                                    _0x33f5x8 = true;
                                }
                                _0x33f5x17['push'](_0x33f5xe);
                            } else {
                                if (_0x33f5x1c['within'](_0x33f5xe['getEl']())) {
                                    _0x33f5x17['push'](_0x33f5xe);
                                    break;
                                }
                            }
                        }
                    }
                }
                if (_0x33f5x8) {
                    Ext.Array['sort'](_0x33f5x17, _0x33f5x1a['byZIndex']);
                }
                for (_0x33f5x13 = 0, _0x33f5x16 = _0x33f5x17['length']; _0x33f5x13 < _0x33f5x16; _0x33f5x13++) {
                    _0x33f5xe = _0x33f5x17[_0x33f5x13];
                    if (_0x33f5x1a['isOverTarget'](_0x33f5x18, _0x33f5xe, _0x33f5x1a['mode'])) {
                        if (_0x33f5x6) {
                            _0x33f5x1d['push'](_0x33f5xe);
                        } else {
                            if (!_0x33f5x11[_0x33f5xe['id']]) {
                                _0x33f5x19['push'](_0x33f5xe);
                            } else {
                                _0x33f5x4['push'](_0x33f5xe);
                            }
                            _0x33f5x1a['dragOvers'][_0x33f5xe['id']] = _0x33f5xe;
                        }
                        if (!_0x33f5x1a['notifyOccluded']) {
                            break;
                        }
                    }
                }
                if (_0x33f5x1a['mode']) {
                    if (_0x33f5xd['length']) {
                        _0x33f5xb['b4DragOut'](_0x33f5x1c, _0x33f5xd);
                        _0x33f5xb['onDragOut'](_0x33f5x1c, _0x33f5xd);
                    }
                    if (_0x33f5x19['length']) {
                        _0x33f5xb['onDragEnter'](_0x33f5x1c, _0x33f5x19);
                    }
                    if (_0x33f5x4['length']) {
                        _0x33f5xb['b4DragOver'](_0x33f5x1c, _0x33f5x4);
                        _0x33f5xb['onDragOver'](_0x33f5x1c, _0x33f5x4);
                    }
                    if (_0x33f5x1d['length']) {
                        _0x33f5xb['b4DragDrop'](_0x33f5x1c, _0x33f5x1d);
                        _0x33f5xb['onDragDrop'](_0x33f5x1c, _0x33f5x1d);
                    }
                } else {
                    for (_0x33f5x13 = 0, _0x33f5x16 = _0x33f5xd['length']; _0x33f5x13 < _0x33f5x16; ++_0x33f5x13) {
                        _0x33f5xb['b4DragOut'](_0x33f5x1c, _0x33f5xd[_0x33f5x13]['id']);
                        _0x33f5xb['onDragOut'](_0x33f5x1c, _0x33f5xd[_0x33f5x13]['id']);
                    }
                    for (_0x33f5x13 = 0, _0x33f5x16 = _0x33f5x19['length']; _0x33f5x13 < _0x33f5x16; ++_0x33f5x13) {
                        _0x33f5xb['onDragEnter'](_0x33f5x1c, _0x33f5x19[_0x33f5x13]['id']);
                    }
                    for (_0x33f5x13 = 0, _0x33f5x16 = _0x33f5x4['length']; _0x33f5x13 < _0x33f5x16; ++_0x33f5x13) {
                        _0x33f5xb['b4DragOver'](_0x33f5x1c, _0x33f5x4[_0x33f5x13]['id']);
                        _0x33f5xb['onDragOver'](_0x33f5x1c, _0x33f5x4[_0x33f5x13]['id']);
                    }
                    for (_0x33f5x13 = 0, _0x33f5x16 = _0x33f5x1d['length']; _0x33f5x13 < _0x33f5x16; ++_0x33f5x13) {
                        _0x33f5xb['b4DragDrop'](_0x33f5x1c, _0x33f5x1d[_0x33f5x13]['id']);
                        _0x33f5xb['onDragDrop'](_0x33f5x1c, _0x33f5x1d[_0x33f5x13]['id']);
                    }
                }
                if (_0x33f5x6 && !_0x33f5x1d['length']) {
                    _0x33f5xb['onInvalidDrop'](_0x33f5x1c);
                }
            }
        });
        var _0x33f5x1 = Ext['dd']['ScrollManager'];
        var _0x33f5x2 = Ext['dd']['DragDropManager'];
        _0x33f5x2['fireEvents'] = Ext['Function']['createSequence'](_0x33f5x2['fireEvents'], _0x33f5x1['onFire'], _0x33f5x1);
        _0x33f5x2['stopDrag'] = Ext['Function']['createSequence'](_0x33f5x2['stopDrag'], _0x33f5x1['onStop'], _0x33f5x1);
    }
});

Ext.define('Ext.ux.Scheduler.patches.NavigationModel', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.grid.NavigationModel',
    minVersion: '6.0.0',
    overrides: {
        setPosition: function(_0x33f5x1, _0x33f5x4, _0x33f5x8, _0x33f5x2, _0x33f5x9) {
            var _0x33f5x5 = this;
            if (Ext['isIE'] && _0x33f5x8 && (_0x33f5x8['getKey']() === _0x33f5x8['PAGE_DOWN'] || _0x33f5x8['getKey']() === _0x33f5x8['PAGE_UP'])) {
                var _0x33f5x3 = _0x33f5x5['lastFocused'];
                if (_0x33f5x8['view']['isLockedView'] && _0x33f5x3 && _0x33f5x8['view']['getVisibleColumnManager']()['indexOf'](_0x33f5x3['column']) === -1) {
                    _0x33f5x8['view'] = _0x33f5x8['view']['lockingPartner'];
                }
            }
            if (Ext['getVersion']()['equals']('6.0.1.250')) {
                _0x33f5x5['patchedSetPosition']['apply'](this, arguments);
            } else {
                return _0x33f5x5['callParent'](arguments);
            }
        },
        patchedSetPosition: function(_0x33f5x1, _0x33f5x6, _0x33f5xc, _0x33f5x4, _0x33f5xb) {
            var _0x33f5x10 = this, _0x33f5xf, _0x33f5xd, _0x33f5xe, _0x33f5xa, _0x33f5x5, _0x33f5x7, _0x33f5x2, _0x33f5x8, _0x33f5x9, _0x33f5x17 = _0x33f5x1 == null && _0x33f5x6 == null, _0x33f5x11 = _0x33f5x10['record'] == null && _0x33f5x10['recordIndex'] == null && _0x33f5x10['item'] == null;
            if (_0x33f5x1 && _0x33f5x1['isCellContext']) {
                _0x33f5xf = _0x33f5x1['view'];
            } else {
                if (_0x33f5xc && _0x33f5xc['view']) {
                    _0x33f5xf = _0x33f5xc['view'];
                } else {
                    if (_0x33f5x10['lastFocused']) {
                        _0x33f5xf = _0x33f5x10['lastFocused']['view'];
                    } else {
                        _0x33f5xf = _0x33f5x10['view'];
                    }
                }
            }
            _0x33f5xf['getFocusTask']()['cancel']();
            if (_0x33f5xf['destroyed'] || !_0x33f5xf['refreshCounter'] || !_0x33f5xf['ownerCt'] || _0x33f5x17 && _0x33f5x11 || !_0x33f5xf['all']['getCount']()) {
                return;
            }
            _0x33f5xe = _0x33f5xf['getSelectionModel']();
            _0x33f5xa = _0x33f5xf['dataSource'];
            _0x33f5x5 = _0x33f5xf['getVisibleColumnManager']();
            if (_0x33f5x1 && _0x33f5x1['isCellContext']) {
                _0x33f5x8 = _0x33f5x1['record'];
                _0x33f5x7 = _0x33f5x1['rowIdx'];
                _0x33f5x2 = Math['min'](_0x33f5x1['colIdx'], _0x33f5x5['getColumns']()['length'] - 1);
                _0x33f5x9 = _0x33f5x5['getColumns']()[_0x33f5x2];
                if (_0x33f5xa['indexOf'](_0x33f5x8) === -1) {
                    _0x33f5xd = _0x33f5xf['getScrollable']();
                    _0x33f5x10['recordIndex'] = -1;
                    if (_0x33f5xd['getPosition']()['y'] >= _0x33f5xd['getMaxPosition']()['y'] - _0x33f5xf['all']['last'](true)['offsetHeight']) {
                        _0x33f5x1['rowIdx']--;
                    }
                    _0x33f5x7 = Math['min'](_0x33f5x1['rowIdx'], _0x33f5xa['getCount']() - 1);
                    _0x33f5x8 = _0x33f5xa['getAt'](_0x33f5x7);
                }
            } else {
                if (_0x33f5x17) {
                    _0x33f5x8 = _0x33f5x7 = null;
                } else {
                    if (_0x33f5x6 == null) {
                        _0x33f5x6 = _0x33f5x10['lastFocused'] ? _0x33f5x10['lastFocused']['column'] : 0;
                    }
                    if (typeof _0x33f5x1 === 'number') {
                        _0x33f5x7 = Math['max'](Math['min'](_0x33f5x1, _0x33f5xa['getCount']() - 1), 0);
                        _0x33f5x8 = _0x33f5xa['getAt'](_0x33f5x1);
                    } else {
                        if (_0x33f5x1['isEntity']) {
                            _0x33f5x8 = _0x33f5x1;
                            _0x33f5x7 = _0x33f5xa['indexOf'](_0x33f5x8);
                        } else {
                            if (_0x33f5x1['tagName']) {
                                _0x33f5x8 = _0x33f5xf['getRecord'](_0x33f5x1);
                                _0x33f5x7 = _0x33f5xa['indexOf'](_0x33f5x8);
                                if (_0x33f5x7 === -1) {
                                    _0x33f5x8 = null;
                                }
                            } else {
                                if (_0x33f5x11) {
                                    return;
                                }
                                _0x33f5x17 = true;
                                _0x33f5x8 = _0x33f5x7 = null;
                            }
                        }
                    }
                }
                if (_0x33f5x8) {
                    if (_0x33f5x7 === -1) {
                        _0x33f5x10['recordIndex'] = -1;
                        _0x33f5x8 = _0x33f5xa['getAt'](0);
                        _0x33f5x7 = 0;
                        _0x33f5x6 = null;
                    }
                    if (_0x33f5x6 == null) {
                        if (!(_0x33f5x9 = _0x33f5x10['column'])) {
                            _0x33f5x2 = 0;
                            _0x33f5x9 = _0x33f5x5['getColumns']()[0];
                        }
                    } else {
                        if (typeof _0x33f5x6 === 'number') {
                            _0x33f5x9 = _0x33f5x5['getColumns']()[_0x33f5x6];
                            _0x33f5x2 = _0x33f5x6;
                        } else {
                            _0x33f5x9 = _0x33f5x6;
                            _0x33f5x2 = _0x33f5x5['indexOf'](_0x33f5x6);
                        }
                    }
                } else {
                    _0x33f5x17 = true;
                    _0x33f5x9 = _0x33f5x2 = null;
                }
            }
            if (_0x33f5xf['actionableMode'] && !_0x33f5x17) {
                var _0x33f5x3 = new Ext['grid'].CellContext(_0x33f5xf)['setPosition'](_0x33f5x8, _0x33f5x9);
                _0x33f5x10['focusPosition'](_0x33f5x3);
                return _0x33f5xf['ownerGrid']['setActionableMode'](false, _0x33f5x3);
            }
            if (_0x33f5x7 === _0x33f5x10['recordIndex'] && _0x33f5x2 === _0x33f5x10['columnIndex'] && _0x33f5xf === _0x33f5x10['position']['view']) {
                return _0x33f5x10['focusPosition'](_0x33f5x10['position']);
            }
            if (_0x33f5x10['cell']) {
                _0x33f5x10['cell']['removeCls'](_0x33f5x10['focusCls']);
            }
            _0x33f5x10['previousRecordIndex'] = _0x33f5x10['recordIndex'];
            _0x33f5x10['previousRecord'] = _0x33f5x10['record'];
            _0x33f5x10['previousItem'] = _0x33f5x10['item'];
            _0x33f5x10['previousCell'] = _0x33f5x10['cell'];
            _0x33f5x10['previousColumn'] = _0x33f5x10['column'];
            _0x33f5x10['previousColumnIndex'] = _0x33f5x10['columnIndex'];
            _0x33f5x10['previousPosition'] = _0x33f5x10['position']['clone']();
            _0x33f5x10['selectionStart'] = _0x33f5xe['selectionStart'];
            _0x33f5x10['position']['setAll'](_0x33f5xf, _0x33f5x10['recordIndex'] = _0x33f5x7, _0x33f5x10['columnIndex'] = _0x33f5x2, _0x33f5x10['record'] = _0x33f5x8, _0x33f5x10['column'] = _0x33f5x9);
            if (_0x33f5x17) {
                _0x33f5x10['item'] = _0x33f5x10['cell'] = null;
            } else {
                _0x33f5x10['focusPosition'](_0x33f5x10['position'], _0x33f5xb);
            }
            if (!_0x33f5x4) {
                _0x33f5xe['fireEvent']('focuschange', _0x33f5xe, _0x33f5x10['previousRecord'], _0x33f5x10['record']);
                _0x33f5xf['fireEvent']('rowfocus', _0x33f5x10['record'], _0x33f5x10['item'], _0x33f5x10['recordIndex']);
                _0x33f5xf['fireEvent']('cellfocus', _0x33f5x10['record'], _0x33f5x10['cell'], _0x33f5x10['position']);
            }
            if (_0x33f5xc && !_0x33f5xb && _0x33f5x10['cell'] !== _0x33f5x10['previousCell']) {
                _0x33f5x10['fireNavigateEvent'](_0x33f5xc);
            }
        }
    }
});

Ext.define('Ext.ux.Scheduler.view.Calendar', {
    view: null,
    constructor: function(_0x33f5x2) {
        Ext.apply(this, _0x33f5x2);
    },
    getColumnsBy: function(_0x33f5x1, _0x33f5x5) {
        var _0x33f5x4 = this['view']['panel']['headerCt']['getGridColumns']();
        var _0x33f5x2 = [];
        for (var _0x33f5x3 = 0; _0x33f5x3 < _0x33f5x4['length']; _0x33f5x3++) {
            if (_0x33f5x1['call'](this, _0x33f5x4[_0x33f5x3])) {
                if (_0x33f5x5 !== true) {
                    _0x33f5x2['push'](_0x33f5x4[_0x33f5x3]);
                } else {
                    _0x33f5x2['push']({
                        column: _0x33f5x4[_0x33f5x3],
                        index: _0x33f5x3
                    });
                }
            }
        }
        return _0x33f5x2;
    },
    getColumnsForDateRange: function(_0x33f5x2, _0x33f5x1) {
        return this['getColumnsBy'](function(_0x33f5x3) {
            return !(_0x33f5x2['getEndDate']() <= _0x33f5x3['start'] || _0x33f5x2['getStartDate']() >= _0x33f5x3['end']);
        }, _0x33f5x1);
    },
    getColumnEvents: function(_0x33f5x1) {
        var _0x33f5x2 = [];
        this['view']['getEventStore']()['each'](function(_0x33f5x3) {
            if (!(_0x33f5x3['getEndDate']() <= _0x33f5x1['start'] || _0x33f5x3['getStartDate']() >= _0x33f5x1['end'])) {
                _0x33f5x2['push'](_0x33f5x3);
            }
        });
        return _0x33f5x2;
    },
    getColumnsByResource: function(_0x33f5x1, _0x33f5x2) {
        return this['getColumnsBy'](function(_0x33f5x3) {
            return _0x33f5x3['start'] == _0x33f5x1['start'];
        }, _0x33f5x2)[0];
    },
    translateToScheduleCoordinate: function(_0x33f5x1) {
        var _0x33f5x2 = this['view'];
        if (Ext.isArray(_0x33f5x1)) {
            return [ _0x33f5x1[0] - _0x33f5x2['getEl']()['getX']() + _0x33f5x2['getScroll']()['left'], _0x33f5x1[1] - _0x33f5x2['getEl']()['getY']() + _0x33f5x2['getScroll']()['top'] ];
        } else {
            return _0x33f5x1 - _0x33f5x2['getEl']()['getY']() + _0x33f5x2['getScroll']()['top'];
        }
    },
    translateToPageCoordinate: function(_0x33f5x4) {
        var _0x33f5x1 = this['view'];
        var _0x33f5x3 = _0x33f5x1['getEl'](), _0x33f5x2 = _0x33f5x1['getScroll']();
        if (Ext.isArray(_0x33f5x4)) {
            return [ _0x33f5x4[0] + _0x33f5x3['getX']() - _0x33f5x2['left'], _0x33f5x4[1] + _0x33f5x3['getY']() - _0x33f5x2['top'] ];
        } else {
            return _0x33f5x4 + _0x33f5x3['getY']() - _0x33f5x2['top'];
        }
    },
    getDateFromXY: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
        var _0x33f5x4 = _0x33f5x3;
        if (!_0x33f5x2) {
            _0x33f5x4 = this['translateToScheduleCoordinate'](_0x33f5x4);
        }
        return this['view']['timeAxisViewModel']['getDateFromPosition'](_0x33f5x4, _0x33f5x1);
    },
    getEventRenderData: function(_0x33f5x2, _0x33f5x1, _0x33f5x7) {
        var _0x33f5xf = _0x33f5x2['getStartDate'](), _0x33f5x9 = _0x33f5x2['getEndDate'](), _0x33f5xb = this['view'], _0x33f5x3 = _0x33f5xb['panel']['headerCt']['getGridColumns'](), _0x33f5x8 = _0x33f5x3[_0x33f5x7]['start'], _0x33f5x11 = _0x33f5x3[_0x33f5x7]['end'], _0x33f5xe = Math;
        var _0x33f5x5 = Math['floor'](_0x33f5xb['getCoordinateFromDate'](Ext.ux.Scheduler.util.Date.max(_0x33f5xf, _0x33f5x8)));
        var _0x33f5xc = Math['floor'](_0x33f5xb['timeAxisViewModel']['getPositionFromDate'](Ext.ux.Scheduler.util.Date['min'](_0x33f5x9, _0x33f5x11), true));
        var _0x33f5x4;
        if (_0x33f5xc === 0) {
            _0x33f5xc = _0x33f5xb['getStore']()['getCount']() * _0x33f5xb['getRowHeight']();
        }
        _0x33f5x4 = {
            top: _0x33f5xe['max'](0, _0x33f5xe['min'](_0x33f5x5, _0x33f5xc) - _0x33f5xb['eventBorderWidth']),
            height: _0x33f5xe['max'](1, _0x33f5xe['abs'](_0x33f5x5 - _0x33f5xc))
        };
        _0x33f5x4['start'] = _0x33f5xf;
        _0x33f5x4['end'] = _0x33f5x9;
        _0x33f5x4['startsOutsideView'] = _0x33f5xf < _0x33f5x8;
        _0x33f5x4['endsOutsideView'] = _0x33f5x9 > _0x33f5x11;
        return _0x33f5x4;
    },
    getScheduleRegion: function(_0x33f5x8, _0x33f5x3) {
        var _0x33f5x1 = this['view'], _0x33f5x7 = _0x33f5x8 ? this['getColumnsByResource'](_0x33f5x8)['getRegion']() : _0x33f5x1['getTableRegion'](), _0x33f5x2 = this['translateToPageCoordinate'](0), _0x33f5x5 = this['translateToPageCoordinate'](_0x33f5x1['getStore']()['getCount']() * _0x33f5x1['getRowHeight']()), _0x33f5x9 = _0x33f5x7['left'] + _0x33f5x1['barMargin'], _0x33f5x4 = _0x33f5x7['right'] - _0x33f5x1['barMargin'];
        return new Ext.util.Region(Math['min'](_0x33f5x2, _0x33f5x5), _0x33f5x4, Math['max'](_0x33f5x2, _0x33f5x5), _0x33f5x9);
    },
    getCalendarColumnWidth: function() {
        return this['view']['timeAxisViewModel']['calendarColumnWidth'];
    },
    getResourceRegion: function(_0x33f5x7, _0x33f5x1, _0x33f5x9) {
        var _0x33f5xe = this['view'], _0x33f5x5 = _0x33f5xe['getResourceStore']()['indexOf'](_0x33f5x7) * this['getCalendarColumnWidth'](), _0x33f5xf = _0x33f5xe['timeAxis']['getStart'](), _0x33f5xc = _0x33f5xe['timeAxis']['getEnd'](), _0x33f5x2 = _0x33f5x1 ? Ext.ux.Scheduler.util.Date.max(_0x33f5xf, _0x33f5x1) : _0x33f5xf, _0x33f5x4 = _0x33f5x9 ? Ext.ux.Scheduler.util.Date['min'](_0x33f5xc, _0x33f5x9) : _0x33f5xc, _0x33f5x8 = Math['max'](0, _0x33f5xe['getCoordinateFromDate'](_0x33f5x2) - _0x33f5xe['cellTopBorderWidth']), _0x33f5x11 = _0x33f5xe['getCoordinateFromDate'](_0x33f5x4) - _0x33f5xe['cellTopBorderWidth'], _0x33f5x3 = _0x33f5x5 + _0x33f5xe['cellBorderWidth'], _0x33f5xb = _0x33f5x5 + this['getCalendarColumnWidth']() - _0x33f5xe['cellBorderWidth'];
        return new Ext.util.Region(Math['min'](_0x33f5x8, _0x33f5x11), _0x33f5xb, Math['max'](_0x33f5x8, _0x33f5x11), _0x33f5x3);
    },
    columnRenderer: function(_0x33f5x4, _0x33f5xd, _0x33f5x9, _0x33f5x7, _0x33f5xc) {
        var _0x33f5xe = this['view'];
        var _0x33f5x3 = '';
        if (_0x33f5x7 === 0) {
            var _0x33f5xb, _0x33f5x1, _0x33f5x8, _0x33f5x5;
            _0x33f5xb = [];
            _0x33f5x1 = this['getColumnEvents'](_0x33f5xd['column']);
            for (_0x33f5x8 = 0, _0x33f5x5 = _0x33f5x1['length']; _0x33f5x8 < _0x33f5x5; _0x33f5x8++) {
                var _0x33f5x2 = _0x33f5x1[_0x33f5x8];
                _0x33f5xb['push'](_0x33f5xe['generateTplData'](_0x33f5x2, _0x33f5x2['getResources']()[0] || _0x33f5x9, _0x33f5xc));
            }
            if (_0x33f5xd['column']['rendered'] && this['getCalendarColumnWidth']() !== _0x33f5xd['column']['getWidth']()) {
                this['setColumnWidth'](_0x33f5xd['column']['getWidth'](), true);
            }
            _0x33f5xe['eventLayout']['vertical']['applyLayout'](_0x33f5xb, this['getCalendarColumnWidth']() - 2 * _0x33f5xe['barMargin'] - _0x33f5xe['cellBorderWidth']);
            _0x33f5x3 = '&#160;' + _0x33f5xe['eventTpl']['apply'](_0x33f5xb);
        }
        if (_0x33f5xc % 2 === 1) {
            _0x33f5xd['tdCls'] = (_0x33f5xd['tdCls'] || '') + ' ' + _0x33f5xe['altColCls'];
            _0x33f5xd['cellCls'] = (_0x33f5xd['cellCls'] || '') + ' ' + _0x33f5xe['altColCls'];
        }
        return _0x33f5x3;
    },
    resolveResource: function(_0x33f5x4) {
        var _0x33f5x2 = this['view'];
        _0x33f5x4 = Ext.fly(_0x33f5x4)['is'](_0x33f5x2['timeCellSelector']) ? _0x33f5x4 : Ext.fly(_0x33f5x4)['up'](_0x33f5x2['timeCellSelector']);
        if (_0x33f5x4) {
            var _0x33f5x5 = _0x33f5x4['dom'] ? _0x33f5x4['dom'] : _0x33f5x4;
            var _0x33f5x1 = 0;
            if (Ext['isIE8m']) {
                _0x33f5x5 = _0x33f5x5['previousSibling'];
                while (_0x33f5x5) {
                    if (_0x33f5x5['nodeType'] === 1) {
                        _0x33f5x1++;
                    }
                    _0x33f5x5 = _0x33f5x5['previousSibling'];
                }
            } else {
                _0x33f5x1 = Ext.Array.indexOf(Array['prototype']['slice']['call'](_0x33f5x5['parentNode']['children']), _0x33f5x5);
            }
            if (_0x33f5x1 >= 0) {
                var _0x33f5x3 = _0x33f5x2['panel']['headerCt']['getGridColumns']()[_0x33f5x1];
                return {
                    start: _0x33f5x3['start'],
                    end: _0x33f5x3['end']
                };
            }
        }
    },
    onEventUpdate: function(_0x33f5x1, _0x33f5x3) {
        this['renderSingle'](_0x33f5x3);
        var _0x33f5x2 = this['view'];
        var _0x33f5x4 = _0x33f5x2['getEventSelectionModel']();
        _0x33f5x4['forEachEventRelatedSelection'](_0x33f5x3, function(_0x33f5x5) {
            _0x33f5x2['onEventBarSelect'](_0x33f5x5);
        });
    },
    onEventAdd: function(_0x33f5x1, _0x33f5x3) {
        var _0x33f5x2 = this['view'];
        if (_0x33f5x3['length'] === 1) {
            this['renderSingle'](_0x33f5x3[0]);
        } else {
            _0x33f5x2['repaintAllEvents']();
        }
    },
    onEventRemove: function(_0x33f5x1, _0x33f5x3) {
        var _0x33f5x2 = this['view'];
        if (_0x33f5x3['length'] === 1) {
            Ext.Array['each'](_0x33f5x2['getElementsFromEventRecord'](_0x33f5x3[0]), function(_0x33f5x4) {
                Ext.fly(_0x33f5x4)['destroy']();
            });
            this['relayoutRenderedEvents'](_0x33f5x3[0]);
        } else {
            _0x33f5x2['repaintAllEvents']();
        }
    },
    relayoutRenderedEvents: function(_0x33f5x1) {
        var _0x33f5x3 = this, _0x33f5x2 = _0x33f5x3['getColumnsForDateRange'](_0x33f5x1, true);
        Ext.Array['each'](_0x33f5x2, function(_0x33f5x4) {
            _0x33f5x3['repaintEventsForColumn'](_0x33f5x4['column'], _0x33f5x4['index']);
        });
    },
    renderSingle: function(_0x33f5x5) {
        var _0x33f5x2 = this['view'];
        Ext.Array['each'](_0x33f5x2['getElementsFromEventRecord'](_0x33f5x5), function(_0x33f5x7) {
            Ext.fly(_0x33f5x7)['destroy']();
        });
        var _0x33f5x9 = _0x33f5x5['getResources']()[0] || _0x33f5x2['getResourceStore']()['first']();
        var _0x33f5x4 = _0x33f5x5['previous'] || {};
        var _0x33f5x1 = Ext.ux.Scheduler.util.Date;
        var _0x33f5x8 = new Ext.ux.Scheduler.model.Range({
            StartDate: _0x33f5x1['min'](_0x33f5x4['StartDate'] || _0x33f5x5['getStartDate'](), _0x33f5x5['getStartDate']()),
            EndDate: _0x33f5x1['max'](_0x33f5x4['EndDate'] || _0x33f5x5['getEndDate'](), _0x33f5x5['getEndDate']())
        });
        var _0x33f5x3 = this['getColumnsForDateRange'](_0x33f5x8);
        Ext.Array['each'](_0x33f5x3, function(_0x33f5xb) {
            var _0x33f5xe = _0x33f5xb['getIndex']();
            var _0x33f5xf = this['getColumnEvents'](_0x33f5xb);
            var _0x33f5x7 = Ext.Array.map(_0x33f5xf, function(_0x33f5x11) {
                if (_0x33f5x11 === _0x33f5x5) {
                    return _0x33f5x2['generateTplData'](_0x33f5x5, _0x33f5x9, _0x33f5xe);
                } else {
                    return {
                        start: _0x33f5x11['getStartDate']() < _0x33f5xb['start'] ? _0x33f5xb['start'] : _0x33f5x11['getStartDate'](),
                        end: _0x33f5x11['getEndDate']() > _0x33f5xb['end'] ? _0x33f5xb['end'] : _0x33f5x11['getEndDate'](),
                        event: _0x33f5x11
                    };
                }
            });
            _0x33f5x2['eventLayout']['vertical']['applyLayout'](_0x33f5x7, _0x33f5xb['getWidth']() - 2 * _0x33f5x2['barMargin'] - _0x33f5x2['cellBorderWidth']);
            Ext.Array['each'](_0x33f5x7, function(_0x33f5xd) {
                if (_0x33f5xd['event'] === _0x33f5x5) {
                    var _0x33f5xc = _0x33f5x2['getScheduleCell'](0, _0x33f5xe);
                    if (_0x33f5xc) {
                        if (!Ext['versions']['touch']) {
                            _0x33f5xc = Ext.fly(_0x33f5xc)['first']();
                        }
                        _0x33f5x2['eventTpl']['append'](_0x33f5xc, [ _0x33f5xd ]);
                    }
                } else {
                    var _0x33f5x11 = _0x33f5x2['getElementsFromEventRecord'](_0x33f5xd['event'], _0x33f5xd['event']['getResource'](), _0x33f5xe)[0];
                    _0x33f5x11['setStyle']({
                        left: _0x33f5xd['left'] + 'px',
                        width: Math['max'](_0x33f5xd['width'], 0) + 'px'
                    });
                }
            });
        }, this);
    },
    repaintEventsForColumn: function(_0x33f5x5, _0x33f5xc) {
        var _0x33f5xd = this;
        var _0x33f5x6 = _0x33f5xd['getColumnEvents'](_0x33f5x5);
        var _0x33f5xa = _0x33f5xd['view'];
        var _0x33f5x7 = [], _0x33f5xe, _0x33f5x8, _0x33f5x2, _0x33f5x4, _0x33f5x3, _0x33f5x9;
        for (_0x33f5xe = 0, _0x33f5x8 = _0x33f5x6['length']; _0x33f5xe < _0x33f5x8; _0x33f5xe++) {
            _0x33f5x2 = _0x33f5x6[_0x33f5xe];
            _0x33f5x4 = _0x33f5xa['getElementsFromEventRecord'](_0x33f5x2)[0];
            if (!_0x33f5x4) {
                return;
            }
            var _0x33f5xb = _0x33f5x4['id']['split']('-');
            _0x33f5xb['pop']();
            _0x33f5x3 = _0x33f5x2['getStartDate']();
            _0x33f5x9 = _0x33f5x2['getEndDate']();
            _0x33f5x7['push']({
                start: _0x33f5x3 < _0x33f5x5['start'] ? _0x33f5x5['start'] : _0x33f5x3,
                end: _0x33f5x9 > _0x33f5x5['end'] ? _0x33f5x5['end'] : _0x33f5x9,
                event: _0x33f5x2,
                id: _0x33f5xb['join']('-')
            });
        }
        _0x33f5xa['eventLayout']['vertical']['applyLayout'](_0x33f5x7, _0x33f5x5['getWidth']() - 2 * _0x33f5xa['barMargin'] - _0x33f5xa['cellBorderWidth']);
        var _0x33f5x1 = _0x33f5xa['getNode'](0);
        for (_0x33f5xe = 0; _0x33f5xe < _0x33f5x7['length']; _0x33f5xe++) {
            _0x33f5x2 = _0x33f5x7[_0x33f5xe];
            _0x33f5x4 = Ext['DomQuery']['selectNode']('td:nth-child(' + (_0x33f5xc + 1) + ') [id^=' + _0x33f5x2['id'] + '-]', _0x33f5x1);
            _0x33f5x4 && Ext.fly(_0x33f5x4)['setStyle']({
                left: _0x33f5x2['left'] + 'px',
                width: Math['max'](_0x33f5x2['width'], 0) + 'px'
            });
        }
    },
    getTimeSpanRegion: function(_0x33f5x2, _0x33f5x4) {
        var _0x33f5x8 = this['view'], _0x33f5x3 = _0x33f5x8['getCoordinateFromDate'](_0x33f5x2), _0x33f5x9 = _0x33f5x4 ? _0x33f5x8['getCoordinateFromDate'](_0x33f5x4, true, true) : _0x33f5x3;
        var _0x33f5x1 = this['getColumnsBy'](function(_0x33f5xe) {
            return _0x33f5xe['start'] <= _0x33f5x2 && _0x33f5xe['end'] > _0x33f5x2;
        })[0];
        var _0x33f5x5 = this['getColumnsBy'](function(_0x33f5xe) {
            return _0x33f5xe['start'] < _0x33f5x4 && _0x33f5xe['end'] >= _0x33f5x4;
        })[0];
        if (!_0x33f5x1 || !_0x33f5x5) {
            return new Ext.util.Region(-1, 0, -1, 0);
        }
        var _0x33f5xf = this['translateToScheduleCoordinate']([ _0x33f5x1['getX'](), 0 ]);
        var _0x33f5x7 = this['translateToScheduleCoordinate']([ _0x33f5x5 ? _0x33f5x5['getRegion']()['right'] : _0x33f5x1['getWidth']() + _0x33f5xf[0], 0 ]);
        return new Ext.util.Region(Math['min'](_0x33f5x3, _0x33f5x9), _0x33f5x7[0], Math['max'](_0x33f5x3, _0x33f5x9), _0x33f5xf[0]);
    },
    getStartEndDatesFromRegion: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = this['view']['getDateFromCoordinate']([ _0x33f5x3['left'], _0x33f5x3['top'] ], _0x33f5x1), _0x33f5x4 = this['view']['getDateFromCoordinate']([ _0x33f5x3['left'], _0x33f5x3['bottom'] ], _0x33f5x1);
        if (_0x33f5x2 && _0x33f5x4) {
            return {
                start: Ext.ux.Scheduler.util.Date['min'](_0x33f5x2, _0x33f5x4),
                end: Ext.ux.Scheduler.util.Date.max(_0x33f5x2, _0x33f5x4)
            };
        } else {
            return null;
        }
    },
    setColumnWidth: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = this['view'];
        _0x33f5x2['calendarColumnWidth'] = _0x33f5x3;
        _0x33f5x2['getTimeAxisViewModel']()['setViewColumnWidth'](_0x33f5x3, _0x33f5x1);
    },
    getVisibleDateRange: function() {
        var _0x33f5x5 = this['view'];
        if (!_0x33f5x5['rendered']) {
            return null;
        }
        var _0x33f5x3 = _0x33f5x5['getScroll'](), _0x33f5x1 = _0x33f5x5['getHeight'](), _0x33f5x4 = _0x33f5x5['getTableRegion'](), _0x33f5x8 = _0x33f5x5['timeAxis']['getEnd']();
        if (_0x33f5x4['bottom'] - _0x33f5x4['top'] < _0x33f5x1) {
            var _0x33f5x2 = _0x33f5x5['timeAxis']['getStart']();
            return {
                startDate: _0x33f5x2,
                endDate: _0x33f5x8
            };
        }
        return {
            startDate: _0x33f5x5['getDateFromCoordinate'](_0x33f5x3['top'], null, true),
            endDate: _0x33f5x5['getDateFromCoordinate'](_0x33f5x3['top'] + _0x33f5x1, null, true) || _0x33f5x8
        };
    },
    getItemBox: function(_0x33f5x2) {
        return null;
    },
    getConnectorStartSide: function(_0x33f5x2) {
        return 'top';
    },
    getConnectorEndSide: function(_0x33f5x2) {
        return 'bottom';
    }
});

Ext.define('Ext.ux.Scheduler.mixin.SchedulerView', {
    extend: Ext.ux.Scheduler.mixin.AbstractSchedulerView,
    mixins: [ Ext.ux.Scheduler.mixin.Localizable ],
    eventResizeHandles: 'end',
    dndValidatorFn: Ext.emptyFn,
    resizeValidatorFn: Ext.emptyFn,
    createValidatorFn: Ext.emptyFn,
    calendarViewClass: 'Ext.ux.Scheduler.view.Calendar',
    lockedGridDependsOnSchedule: null,
    _initializeSchedulerView: function() {
        this['callParent'](arguments);
        this['on']({
            destroy: this['_destroy'],
            afterrender: this['_afterRender'],
            itemupdate: this['onRowUpdated'],
            scope: this
        });
        if (Ext['getVersion']()['isGreaterThan']('5.1.1')) {
            this['on']('itemadd', function(_0x33f5x1) {
                var _0x33f5x3 = this['all']['item'](this['all']['endIndex'] - _0x33f5x1['length']);
                if (_0x33f5x3) {
                    _0x33f5x3['dom']['style']['height'] = '';
                }
            });
        }
        var _0x33f5x2 = this;
        if (!this['eventPrefix']) {
            throw 'eventPrefix missing';
        }
        this['on']({
            resourcestorechange: this['clearRowHeightCache'],
            assignmentstorechange: this['clearRowHeightCache'],
            eventstorechange: this['clearRowHeightCache'],
            scope: this
        });
    },
    inheritables: function() {
        return {
            loadingText: this.L('loadingText'),
            overItemCls: '',
            trackOver: false,
            selectedItemCls: '',
            setReadOnly: function(_0x33f5x2) {
                if (this['dragCreator']) {
                    this['dragCreator']['setDisabled'](_0x33f5x2);
                }
                this['callParent'](arguments);
            },
            repaintEventsForResource: function(_0x33f5x5, _0x33f5x3) {
                var _0x33f5x4 = this, _0x33f5x9 = _0x33f5x4['getMode'](), _0x33f5x8 = _0x33f5x9 === 'horizontal', _0x33f5x2 = _0x33f5x8 ? _0x33f5x4['indexOf'](_0x33f5x5) : 0;
                if (_0x33f5x8) {
                    _0x33f5x4['eventLayout']['horizontal']['clearCache'](_0x33f5x5);
                }
                if (_0x33f5x2 >= 0) {
                    Ext['suspendLayouts']();
                    if (_0x33f5x8) {
                        _0x33f5x4['refreshNode'](_0x33f5x5);
                        if (_0x33f5x4['lockedGridDependsOnSchedule']) {
                            _0x33f5x4['lockingPartner']['refreshNode'](_0x33f5x5);
                        }
                    } else {
                        _0x33f5x4['refreshNode'](_0x33f5x2);
                        _0x33f5x4['lockingPartner']['refreshNode'](_0x33f5x2);
                    }
                    Ext['resumeLayouts']();
                    if (_0x33f5x3) {
                        var _0x33f5x7 = _0x33f5x4['getEventSelectionModel']();
                        var _0x33f5x1 = _0x33f5x4['getEventStore']()['getEventsForResource'](_0x33f5x5);
                        Ext.Array['each'](_0x33f5x1, function(_0x33f5xf) {
                            _0x33f5x7['forEachEventRelatedSelection'](_0x33f5xf, function(_0x33f5xe) {
                                _0x33f5x4['onEventBarSelect'](_0x33f5xe, true);
                            });
                        });
                    }
                }
            },
            repaintAllEvents: function() {
                if (this['mode'] === 'horizontal') {
                    this['refreshView']();
                } else {
                    this['refreshNode'](0);
                }
            },
            handleScheduleEvent: function(_0x33f5x9) {
                var _0x33f5x2 = _0x33f5x9['getTarget']('.' + this['eventCls'], 3), _0x33f5xe = !_0x33f5x2 && _0x33f5x9['getTarget']('.' + this['timeCellCls'], 3);
                if (_0x33f5xe) {
                    var _0x33f5xb = this['getDateFromDomEvent'](_0x33f5x9, 'floor');
                    var _0x33f5xf = this['findRowByChild'](_0x33f5xe);
                    var _0x33f5x8 = this['indexOf'](_0x33f5xf);
                    var _0x33f5x1;
                    if (this['mode'] == 'horizontal') {
                        _0x33f5x1 = this['getRecordForRowNode'](_0x33f5xf);
                    } else {
                        var _0x33f5x3 = _0x33f5x9['getTarget'](this['timeCellSelector'], 5);
                        if (_0x33f5x3) {
                            var _0x33f5x7 = typeof _0x33f5x3['cellIndex'] == 'number' ? _0x33f5x3['cellIndex'] : _0x33f5x3['getAttribute']('data-cellIndex');
                            var _0x33f5x4 = this['headerCt']['getGridColumns']()[_0x33f5x7];
                            _0x33f5x1 = _0x33f5x4 && _0x33f5x4['model'];
                        }
                    }
                    if (_0x33f5x9['type']['indexOf']('pinch') >= 0) {
                        this['fireEvent']('schedule' + _0x33f5x9['type'], this, _0x33f5x9);
                    } else {
                        this['fireEvent']('schedule' + _0x33f5x9['type'], this, _0x33f5xb, _0x33f5x8, _0x33f5x1, _0x33f5x9);
                    }
                }
            },
            onEventDataRefresh: function() {
                this['clearRowHeightCache']();
                this['callParent'](arguments);
            },
            onUnbindStore: function(_0x33f5x2) {
                _0x33f5x2['un']({
                    refresh: this['clearRowHeightCache'],
                    clear: this['clearRowHeightCache'],
                    load: this['clearRowHeightCache'],
                    scope: this
                });
                this['callParent'](arguments);
            },
            bindStore: function(_0x33f5x2) {
                _0x33f5x2 && _0x33f5x2['on']({
                    refresh: this['clearRowHeightCache'],
                    clear: this['clearRowHeightCache'],
                    load: this['clearRowHeightCache'],
                    scope: this
                });
                this['callParent'](arguments);
            },
            refreshKeepingScroll: function() {
                this['lockingPartner']['saveScrollState']();
                this['lockingPartner']['refreshView']();
                this['callParent'](arguments);
                this['lockingPartner']['restoreScrollState']();
            }
        };
    },
    getEventSelectionModel: function() {
        var _0x33f5x1 = this, _0x33f5x3 = _0x33f5x1['eventSelModel'], _0x33f5x2 = _0x33f5x1['eventSelModelType'], _0x33f5x4;
        if (_0x33f5x3 && _0x33f5x3['events']) {
            return _0x33f5x3;
        }
        if (!_0x33f5x3) {
            _0x33f5x3 = {};
        }
        if (!_0x33f5x2 && _0x33f5x1['getEventStore']()['getAssignmentStore']()) {
            _0x33f5x2 = 'assignmentmodel';
        } else {
            if (!_0x33f5x2) {
                _0x33f5x2 = 'eventmodel';
            }
        }
        _0x33f5x4 = 'SINGLE';
        if (_0x33f5x1['simpleSelect']) {
            _0x33f5x4 = 'SIMPLE';
        } else {
            if (_0x33f5x1['multiSelect']) {
                _0x33f5x4 = 'MULTI';
            }
        }
        Ext.applyIf(_0x33f5x3, {
            allowDeselect: _0x33f5x1['allowDeselect'],
            mode: _0x33f5x4
        });
        if (!_0x33f5x3['events']) {
            _0x33f5x3 = _0x33f5x1['eventSelModel'] = Ext.create('selection.' + _0x33f5x2, _0x33f5x3);
        }
        if (_0x33f5x1['disableSelection']) {
            _0x33f5x3['locked'] = true;
        }
        return _0x33f5x3;
    },
    _afterRender: function() {
        this['setEventStore'](this['eventStore'], true);
        this['getEventSelectionModel']()['bindToView'](this);
        this['setupEventListeners']();
        this['configureFunctionality']();
        var _0x33f5x2 = this['headerCt']['resizer'];
        if (_0x33f5x2) {
            _0x33f5x2['doResize'] = Ext['Function']['createSequence'](_0x33f5x2['doResize'], this['afterHeaderResized'], this);
        }
        this['on']('itemupdate', function() {
            this['hoveredEventNode'] = null;
        });
    },
    _destroy: function() {
        this['setEventStore'](null);
    },
    clearRowHeightCache: function() {
        if (this['mode'] === 'horizontal') {
            this['eventLayout']['horizontal']['clearCache']();
        }
    },
    configureFunctionality: function() {
        var _0x33f5x2 = this['validatorFnScope'] || this;
        if (this['eventResizeHandles'] !== 'none' && Ext.ux.Scheduler.feature.ResizeZone) {
            this['resizePlug'] = new Ext.ux.Scheduler.feature.ResizeZone(Ext.applyIf({
                schedulerView: this,
                validatorFn: function(_0x33f5x4, _0x33f5x3, _0x33f5x1, _0x33f5x5) {
                    return (this['allowOverlap'] || this['isDateRangeAvailable'](_0x33f5x1, _0x33f5x5, _0x33f5x3, _0x33f5x4)) && this['resizeValidatorFn']['apply'](_0x33f5x2, arguments);
                },
                validatorFnScope: this
            }, this['resizeConfig'] || {}));
        }
        if (this['enableEventDragDrop'] !== false && Ext.ux.Scheduler.feature.DragDrop) {
            this['dragdropPlug'] = new Ext.ux.Scheduler.feature.DragDrop(this, {
                validatorFn: function(_0x33f5x3, _0x33f5x1, _0x33f5x4, _0x33f5x5) {
                    return (this['allowOverlap'] || this['isDateRangeAvailable'](_0x33f5x4, Ext.ux.Scheduler.util.Date.add(_0x33f5x4, Ext.ux.Scheduler.util.Date.MILLI, _0x33f5x5), _0x33f5x3[0], _0x33f5x1)) && this['dndValidatorFn']['apply'](_0x33f5x2, arguments);
                },
                validatorFnScope: this,
                dragConfig: this['dragConfig'] || {}
            });
        }
        if (this['enableDragCreation'] !== false && Ext.ux.Scheduler.feature.DragCreator) {
            this['dragCreator'] = new Ext.ux.Scheduler.feature.DragCreator(Ext.applyIf({
                schedulerView: this,
                disabled: this['readOnly'],
                validatorFn: function(_0x33f5x3, _0x33f5x1, _0x33f5x4) {
                    return (this['allowOverlap'] || this['isDateRangeAvailable'](_0x33f5x1, _0x33f5x4, null, _0x33f5x3)) && this['createValidatorFn']['apply'](_0x33f5x2, arguments);
                },
                validatorFnScope: this
            }, this['createConfig'] || {}));
        }
    },
    onBeforeDragDrop: function(_0x33f5x2, _0x33f5x3, _0x33f5x1) {
        return !this['readOnly'] && !_0x33f5x1['getTarget']()['className']['match']('sch-resizable-handle');
    },
    onDragDropStart: function() {
        if (this['dragCreator']) {
            this['dragCreator']['setDisabled'](true);
        }
        if (this['tip']) {
            this['tip']['hide']();
            this['tip']['disable']();
        }
        if (this['overScheduledEventClass']) {
            this['setMouseOverEnabled'](false);
        }
        this['hoveredEventNode'] = null;
    },
    onDragDropEnd: function() {
        if (this['dragCreator']) {
            this['dragCreator']['setDisabled'](false);
        }
        if (this['tip']) {
            this['tip']['enable']();
        }
        if (this['overScheduledEventClass']) {
            this['setMouseOverEnabled'](true);
        }
    },
    onBeforeDragCreate: function(_0x33f5x1, _0x33f5x3, _0x33f5x2, _0x33f5x4) {
        return !this['readOnly'] && !_0x33f5x4['ctrlKey'];
    },
    onDragCreateStart: function() {
        if (this['overScheduledEventClass']) {
            this['setMouseOverEnabled'](false);
        }
        if (this['tip']) {
            this['tip']['hide']();
            this['tip']['disable']();
        }
        this['disableViewScroller'](true);
    },
    onDragCreateEnd: function(_0x33f5x1, _0x33f5x2, _0x33f5x3) {
        if (!this['getEventEditor']()) {
            var _0x33f5x4 = _0x33f5x3 ? [ _0x33f5x3 ] : [];
            if (this['fireEvent']('beforeeventadd', this, _0x33f5x2, _0x33f5x4) !== false) {
                this['onEventCreated'](_0x33f5x2);
                this['getEventStore']()['append'](_0x33f5x2);
                if (this['getMode']() != 'calendar') {
                    _0x33f5x2['assign'](_0x33f5x3);
                }
            }
            this['dragCreator']['getProxy']()['hide']();
        }
        if (this['overScheduledEventClass']) {
            this['setMouseOverEnabled'](true);
        }
    },
    onEventCreated: function(_0x33f5x2) {},
    onAfterDragCreate: function() {
        if (this['overScheduledEventClass']) {
            this['setMouseOverEnabled'](true);
        }
        if (this['tip']) {
            this['tip']['enable']();
        }
        this['disableViewScroller'](false);
    },
    onBeforeResize: function() {
        return !this['readOnly'];
    },
    onResizeStart: function() {
        if (this['tip']) {
            this['tip']['hide']();
            this['tip']['disable']();
        }
        if (this['dragCreator']) {
            this['dragCreator']['setDisabled'](true);
        }
        this['disableViewScroller'](true);
    },
    onResizeEnd: function() {
        if (this['tip']) {
            this['tip']['enable']();
        }
        if (this['dragCreator']) {
            this['dragCreator']['setDisabled'](false);
        }
        this['disableViewScroller'](false);
    },
    setupEventListeners: function() {
        this['on']({
            beforeeventdrag: this['onBeforeDragDrop'],
            eventdragstart: this['onDragDropStart'],
            aftereventdrop: this['onDragDropEnd'],
            beforedragcreate: this['onBeforeDragCreate'],
            dragcreatestart: this['onDragCreateStart'],
            dragcreateend: this['onDragCreateEnd'],
            afterdragcreate: this['onAfterDragCreate'],
            beforeeventresize: this['onBeforeResize'],
            eventresizestart: this['onResizeStart'],
            eventresizeend: this['onResizeEnd'],
            scope: this
        });
    },
    afterHeaderResized: function() {
        var _0x33f5x1 = this['headerCt']['resizer'];
        if (_0x33f5x1 && this['getMode']() !== 'horizontal') {
            if (this['panel']['forceFit']) {
                this['setColumnWidth'](_0x33f5x1['origWidth']);
            } else {
                var _0x33f5x2 = _0x33f5x1['dragHd']['getWidth']();
                this['setColumnWidth'](_0x33f5x2);
            }
        }
    },
    columnRenderer: function(_0x33f5x5, _0x33f5x3, _0x33f5x2, _0x33f5x4, _0x33f5x1) {
        return this[this['mode']]['columnRenderer'](_0x33f5x5, _0x33f5x3, _0x33f5x2, _0x33f5x4, _0x33f5x1);
    },
    onRowUpdated: function(_0x33f5x3) {
        var _0x33f5x1 = this, _0x33f5x2;
        if (_0x33f5x1['getMode']() === 'horizontal' && _0x33f5x1['hasListener']('eventrepaint')) {
            Ext.Array['each'](_0x33f5x3['getEvents'](), function(_0x33f5x4) {
                _0x33f5x2 = _0x33f5x1['getElementsFromEventRecord'](_0x33f5x4, _0x33f5x3, null, true);
                Ext.Array['each'](_0x33f5x2, function(_0x33f5x5) {
                    _0x33f5x1['fireEvent']('eventrepaint', _0x33f5x1, _0x33f5x4, _0x33f5x5);
                });
            });
        }
    },
    scrollResourceEventIntoView: function(_0x33f5x8, _0x33f5x7, _0x33f5xf, _0x33f5x4, _0x33f5x2, _0x33f5x11, _0x33f5xc) {
        var _0x33f5xb = this, _0x33f5xe = _0x33f5x7['getStartDate'](), _0x33f5x9 = _0x33f5x7['getEndDate'](), _0x33f5x3, _0x33f5x1;
        var _0x33f5x5 = function() {
            _0x33f5x1 = _0x33f5xb['getElementsFromEventRecord'](_0x33f5x7, _0x33f5x8, _0x33f5xf);
            _0x33f5x1 = _0x33f5x1['length'] && _0x33f5x1[0] || null;
            _0x33f5xb['scrollElementIntoView'](_0x33f5x1, true, _0x33f5x2, _0x33f5x4, null, _0x33f5x11, _0x33f5xc);
        };
        if (_0x33f5xb['getResourceStore']()['isTreeStore']) {
            _0x33f5x8['bubble'](function(_0x33f5xd) {
                _0x33f5xd['expand']();
            });
        }
        if (!_0x33f5xb['timeAxis']['dateInAxis'](_0x33f5xe) || !_0x33f5xb['timeAxis']['dateInAxis'](_0x33f5x9)) {
            _0x33f5x3 = _0x33f5xb['timeAxis']['getEnd']() - _0x33f5xb['timeAxis']['getStart']();
            _0x33f5xb['timeAxis']['setTimeSpan'](new Date(_0x33f5xe.valueOf() - _0x33f5x3 / 2), new Date(_0x33f5x9['getTime']() + _0x33f5x3 / 2));
            _0x33f5xb['up']('panel')['scrollTask']['cancel']();
        }
        if (this['getOrientation']() === 'horizontal') {
            _0x33f5xb['up']('timelinegrid,timelinetree')['ensureVisible'](_0x33f5x8, {
                callback: function() {
                    if (this['isLocked'] === false) {
                        _0x33f5x5();
                    }
                }
            });
        } else {
            _0x33f5x5();
        }
    }
});

Ext.define('Ext.ux.Scheduler.view.SchedulerGridView', {
    extend: Ext.ux.Scheduler.view.TimelineGridView,
    mixins: [ Ext.ux.Scheduler.mixin.SchedulerView, Ext.ux.Scheduler.mixin.GridViewCanvas, Ext.ux.Scheduler.mixin.Localizable ],
    alias: 'widget.schedulergridview'
}, function() {
    this['override'](Ext.ux.Scheduler.mixin.SchedulerView.prototype.inheritables() || {});
});

Ext.define('Ext.ux.Scheduler.selection.EventModel', {
    extend: Ext['selection']['Model'],
    alias: 'selection.eventmodel',
    deselectOnContainerClick: true,
    selectedOnMouseDown: null,
    bindToView: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['view'] = _0x33f5x2;
        _0x33f5x1['bindStore'](_0x33f5x2['getEventStore']());
        _0x33f5x2['on']({
            eventclick: _0x33f5x1['onEventClick'],
            eventmousedown: _0x33f5x1['onEventMouseDown'],
            itemmousedown: _0x33f5x1['onItemMouseDown'],
            refresh: function() {
                _0x33f5x1['refresh']();
            },
            destroy: function() {
                _0x33f5x1['bindStore'](null);
            },
            scope: _0x33f5x1
        });
    },
    bindStore: function(_0x33f5x2) {
        if (this['getStore']()) {
            this['mun'](this['getStore'](), 'load', this['onEventStoreLoad'], this);
        }
        if (_0x33f5x2) {
            this['mon'](_0x33f5x2, 'load', this['onEventStoreLoad'], this);
        }
        this['callParent'](arguments);
    },
    onEventStoreLoad: function() {
        this['deselectAll']();
    },
    onEventMouseDown: function(_0x33f5x1, _0x33f5x2, _0x33f5x3) {
        this['selectedOnMouseDown'] = null;
        if (!this['isSelected'](_0x33f5x2)) {
            this['selectedOnMouseDown'] = _0x33f5x2;
            this['selectWithEvent'](_0x33f5x2, _0x33f5x3);
        }
    },
    onEventClick: function(_0x33f5x1, _0x33f5x2, _0x33f5x3) {
        if (!this['selectedOnMouseDown']) {
            this['selectWithEvent'](_0x33f5x2, _0x33f5x3);
        }
    },
    onItemMouseDown: function(_0x33f5x8, _0x33f5x5, _0x33f5xf, _0x33f5x7, _0x33f5x9) {
        if (this['deselectOnContainerClick'] && !_0x33f5x9['getTarget'](this['view']['eventSelector'])) {
            this['deselectAll']();
        }
    },
    onSelectChange: function(_0x33f5x4, _0x33f5x1, _0x33f5xe, _0x33f5x2) {
        var _0x33f5x8 = this, _0x33f5x9 = _0x33f5x8['view'], _0x33f5x7 = _0x33f5x8['store'], _0x33f5x5 = _0x33f5x1 ? 'select' : 'deselect', _0x33f5x3 = 0;
        if ((_0x33f5xe || _0x33f5x8['fireEvent']('before' + _0x33f5x5, _0x33f5x8, _0x33f5x4)) !== false && _0x33f5x2() !== false) {
            if (_0x33f5x1) {
                _0x33f5x9['onEventBarSelect'](_0x33f5x4, _0x33f5xe);
            } else {
                _0x33f5x9['onEventBarDeselect'](_0x33f5x4, _0x33f5xe);
            }
            if (!_0x33f5xe) {
                _0x33f5x8['fireEvent'](_0x33f5x5, _0x33f5x8, _0x33f5x4);
            }
        }
    },
    selectRange: Ext.emptyFn,
    selectNode: function(_0x33f5x3, _0x33f5x4, _0x33f5x2) {
        var _0x33f5x1 = this['view']['resolveEventRecord'](_0x33f5x3);
        if (_0x33f5x1) {
            this['select'](_0x33f5x1, _0x33f5x4, _0x33f5x2);
        }
    },
    deselectNode: function(_0x33f5x3, _0x33f5x4, _0x33f5x2) {
        var _0x33f5x1 = this['view']['resolveEventRecord'](_0x33f5x3);
        if (_0x33f5x1) {
            this['deselect'](_0x33f5x1, _0x33f5x2);
        }
    },
    getFirstSelectedEventForResource: function(_0x33f5x8) {
        var _0x33f5x3 = this['getSelection'](), _0x33f5x5 = null, _0x33f5x1, _0x33f5x2, _0x33f5x4;
        for (_0x33f5x1 = 0, _0x33f5x2 = _0x33f5x3['length']; !_0x33f5x5 && _0x33f5x1 < _0x33f5x2; ++_0x33f5x1) {
            _0x33f5x4 = _0x33f5x3[_0x33f5x1];
            if (_0x33f5x4['isAssignedTo'](_0x33f5x8)) {
                _0x33f5x5 = _0x33f5x4;
            }
        }
        return _0x33f5x5;
    },
    getDraggableSelections: function() {
        return Ext.Array['filter'](this['getSelection'](), function(_0x33f5x2) {
            return _0x33f5x2['isDraggable']();
        });
    },
    forEachEventRelatedSelection: function(_0x33f5x2, _0x33f5x1) {
        this['isSelected'](_0x33f5x2) && _0x33f5x1(_0x33f5x2);
    }
});

Ext.define('Ext.ux.Scheduler.selection.AssignmentModel', {
    extend: Ext.ux.Scheduler.selection.EventModel,
    alias: 'selection.assignmentmodel',
    assignmentStoreDetacher: null,
    destroy: function() {
        var _0x33f5x2 = this;
        Ext.destroyMembers(_0x33f5x2, 'assignmentStoreDetacher');
        _0x33f5x2['callParent']();
    },
    onBindStore: function(_0x33f5x2) {
        this['callParent'](arguments);
        var _0x33f5x3 = _0x33f5x2['getAssignmentStore']();
        if (_0x33f5x3) {
            var _0x33f5x1 = this;
            _0x33f5x1['assignmentStoreDetacher'] && _0x33f5x1['assignmentStoreDetacher']['destroy']();
            _0x33f5x1['assignmentStoreDetacher'] = _0x33f5x3['on']({
                remove: _0x33f5x1['onAssignmentStoreRemove'],
                clear: _0x33f5x1['onAssignmentStoreClear'],
                refresh: _0x33f5x1['onAssignmentStoreRefresh'],
                scope: _0x33f5x1,
                destroyable: true
            });
        }
    },
    selectWithEvent: function(_0x33f5x1, _0x33f5x7) {
        var _0x33f5x8 = this, _0x33f5x2 = _0x33f5x8['view'], _0x33f5x4 = _0x33f5x2['resolveResource'](_0x33f5x7['getTarget']()), _0x33f5x9, _0x33f5x3;
        if (_0x33f5x4) {
            _0x33f5x9 = _0x33f5x2['getEventStore']()['getAssignmentStore']();
            _0x33f5x3 = _0x33f5x9['getAssignmentForEventAndResource'](_0x33f5x1, _0x33f5x4);
            if (_0x33f5x3) {
                _0x33f5x8['callParent']([ _0x33f5x3, _0x33f5x7 ]);
            }
        }
    },
    getFirstSelectedEventForResource: function(_0x33f5x8) {
        var _0x33f5x3 = this['getSelection'](), _0x33f5x5 = null, _0x33f5x1, _0x33f5x2, _0x33f5x4;
        for (_0x33f5x1 = 0, _0x33f5x2 = _0x33f5x3['length']; !_0x33f5x5 && _0x33f5x1 < _0x33f5x2; ++_0x33f5x1) {
            _0x33f5x4 = _0x33f5x3[_0x33f5x1];
            if (_0x33f5x4['getEvent']()['isAssignedTo'](_0x33f5x8)) {
                _0x33f5x5 = _0x33f5x4;
                break;
            }
        }
        return _0x33f5x5;
    },
    getDraggableSelections: function() {
        return Ext.Array['filter'](this['getSelection'](), function(_0x33f5x2) {
            return _0x33f5x2['getEvent']()['isDraggable']();
        });
    },
    forEachEventRelatedSelection: function(_0x33f5x2, _0x33f5x1) {
        Ext.Array['each'](this['getSelection'](), function(_0x33f5x3) {
            _0x33f5x3['getEvent']() === _0x33f5x2 && _0x33f5x1(_0x33f5x3);
        });
    },
    onAssignmentStoreRemove: function(_0x33f5x1, _0x33f5x2) {
        this['deselect'](_0x33f5x2, true);
    },
    onAssignmentStoreClear: function(_0x33f5x2) {
        this['clearSelections']();
    },
    onAssignmentStoreRefresh: function(_0x33f5x2) {
        this['clearSelections']();
    }
});

Ext.define('Ext.ux.Scheduler.mixin.SchedulerPanel', {
    extend: Ext.ux.Scheduler.mixin.AbstractSchedulerPanel,
    eventSelModelType: null,
    eventSelModel: null,
    enableEventDragDrop: true,
    enableDragCreation: true,
    dragConfig: null,
    calendarColumnClass: 'Ext.ux.Scheduler.column.Day',
    componentCls: 'sch-schedulerpanel',
    lockedGridDependsOnSchedule: true,
    verticalListeners: null,
    horizontalLockedWidth: null,
    inheritables: function() {
        return {
            variableRowHeight: true,
            initComponent: function() {
                var _0x33f5x1 = this['normalViewConfig'] = this['normalViewConfig'] || {};
                this._initializeSchedulerPanel();
                this['verticalListeners'] = {
                    clear: this['refreshResourceColumns'],
                    datachanged: this['refreshResourceColumns'],
                    update: this['refreshResourceColumns'],
                    load: this['refreshResourceColumns'],
                    scope: this
                };
                this['calendarListeners'] = {
                    reconfigure: this['refreshCalendarColumns'],
                    priority: 1,
                    scope: this
                };
                this['normalGridListeners'] = {
                    columnresize: this['onCalendarColumnResize'],
                    scope: this
                };
                Ext.apply(_0x33f5x1, {
                    eventStore: this['eventStore'],
                    resourceStore: this['resourceStore'],
                    dependencyStore: this['dependencyStore'],
                    eventBarTextField: this['eventBarTextField'] || this['getEventStore']()['getModel']()['prototype']['nameField']
                });
                Ext.Array['each']([ 'barMargin', 'eventBodyTemplate', 'eventTpl', 'allowOverlap', 'dragConfig', 'eventBarIconClsField', 'onEventCreated', 'constrainDragToResource', 'snapRelativeToEventStartDate', 'eventSelModelType', 'eventSelModel', 'simpleSelect', 'multiSelect', 'allowDeselect', 'lockedGridDependsOnSchedule' ], function(_0x33f5x5) {
                    if (_0x33f5x5 in this) {
                        _0x33f5x1[_0x33f5x5] = this[_0x33f5x5];
                    }
                }, this);
                this['callParent'](arguments);
                if (this['mode'] === 'vertical') {
                    this['mon'](this['resourceStore'], this['verticalListeners']);
                }
                var _0x33f5x4 = this['lockedGrid']['getView']();
                var _0x33f5x3 = this['getSchedulingView']();
                _0x33f5x4['on']('resize', this['onLockedViewResize'], this);
                this['registerRenderer'](_0x33f5x3['columnRenderer'], _0x33f5x3);
                if (this['resourceZones']) {
                    var _0x33f5x2 = Ext.StoreManager.lookup(this['resourceZones']);
                    _0x33f5x2['setResourceStore'](this['resourceStore']);
                    this['resourceZonesPlug'] = new Ext.ux.Scheduler.plugin.ResourceZones(Ext.apply({
                        store: _0x33f5x2
                    }, this['resourceZonesConfig']));
                    this['resourceZonesPlug']['init'](this);
                }
                _0x33f5x3['on']('columnwidthchange', this['onColWidthChange'], this);
                this['relayEvents'](_0x33f5x3, [ 'eventclick', 'eventlongpress', 'eventmousedown', 'eventmouseup', 'eventdblclick', 'eventcontextmenu', 'eventmouseenter', 'eventmouseleave', 'eventkeydown', 'eventkeyup', 'beforeeventresize', 'eventresizestart', 'eventpartialresize', 'beforeeventresizefinalize', 'eventresizeend', 'beforeeventdrag', 'eventdragstart', 'eventdrag', 'beforeeventdropfinalize', 'eventdrop', 'aftereventdrop', 'beforedragcreate', 'dragcreatestart', 'beforedragcreatefinalize', 'dragcreateend', 'afterdragcreate', 'beforeeventadd' ]);
                if (!this['syncRowHeight']) {
                    this['enableRowHeightInjection'](_0x33f5x4, _0x33f5x3);
                }
            },
            applyViewSettings: function(_0x33f5x3, _0x33f5x1) {
                this['callParent'](arguments);
                var _0x33f5x4 = this['getSchedulingView'](), _0x33f5x2;
                _0x33f5x1 = _0x33f5x1 || !this['rendered'];
                if (this['orientation'] === 'vertical') {
                    _0x33f5x2 = _0x33f5x3['timeColumnWidth'] || 60;
                    _0x33f5x4['setColumnWidth'](_0x33f5x3['resourceColumnWidth'] || 100, true);
                    _0x33f5x4['setRowHeight'](_0x33f5x2, true);
                }
            },
            afterRender: function() {
                this['callParent'](arguments);
                if (this['mode'] === 'vertical') {
                    this['onLockedViewResize'](null, null, this['lockedGrid']['getView']()['getHeight']());
                } else {
                    if (this['mode'] === 'calendar') {
                        this['mon'](this['timeAxis'], this['calendarListeners']);
                        this['normalGrid']['on'](this['normalGridListeners']);
                    }
                }
                this['getSchedulingView']()['on']({
                    eventdragstart: this['doSuspendLayouts'],
                    aftereventdrop: this['doResumeLayouts'],
                    eventresizestart: this['doSuspendLayouts'],
                    eventresizeend: this['doResumeLayouts'],
                    scope: this
                });
                if (this['lockedGridDependsOnSchedule']) {
                    this['getSchedulingView']()['on']('itemupdate', this['onNormalViewItemUpdate'], this);
                }
                this['relayEvents'](this['getEventSelectionModel'](), [ 'selectionchange', 'deselect', 'select' ], 'event');
            },
            getTimeSpanDefiningStore: function() {
                return this['eventStore'];
            },
            destroy: function() {
                var _0x33f5x2 = this;
                _0x33f5x2['destroyStores'] && Ext.destroyMembers(_0x33f5x2, 'eventStore', 'resourceStore', 'assignmentStore', 'dependencyStore');
                _0x33f5x2['callParent'](arguments);
            }
        };
    },
    doSuspendLayouts: function() {
        var _0x33f5x2 = this['getSchedulingView']();
        _0x33f5x2['infiniteScroll'] && _0x33f5x2['timeAxis']['on']({
            beginreconfigure: this['onBeginReconfigure'],
            endreconfigure: this['onEndReconfigure'],
            scope: this
        });
        this['lockedGrid']['suspendLayouts']();
        this['normalGrid']['suspendLayouts']();
    },
    doResumeLayouts: function() {
        var _0x33f5x2 = this['getSchedulingView']();
        _0x33f5x2['infiniteScroll'] && _0x33f5x2['timeAxis']['un']({
            beginreconfigure: this['onBeginReconfigure'],
            endreconfigure: this['onEndReconfigure'],
            scope: this
        });
        this['lockedGrid']['resumeLayouts']();
        this['normalGrid']['resumeLayouts']();
    },
    onBeginReconfigure: function() {
        this['normalGrid']['resumeLayouts']();
    },
    onEndReconfigure: function() {
        this['normalGrid']['suspendLayouts']();
    },
    onColWidthChange: function(_0x33f5x1, _0x33f5x2) {
        switch (this['getMode']()) {
          case 'vertical':
            this['resourceColumnWidth'] = _0x33f5x2;
            this['refreshResourceColumns']();
            break;

          case 'calendar':
            this['calendarColumnWidth'] = _0x33f5x2;
            this['refreshCalendarColumns']();
            break;
        }
    },
    enableRowHeightInjection: function(_0x33f5x3, _0x33f5x5) {
        var _0x33f5x1 = this;
        var _0x33f5x4 = new Ext.XTemplate('{%', 'this.processCellValues(values);', 'this.nextTpl.applyOut(values, out, parent);', '%}', {
            priority: 1,
            processCellValues: function(_0x33f5x8) {
                if (_0x33f5x5['mode'] === 'horizontal') {
                    var _0x33f5x9 = 1;
                    if (_0x33f5x5['dynamicRowHeight']) {
                        var _0x33f5xe = _0x33f5x8['record'];
                        var _0x33f5xf = _0x33f5x5['eventLayout']['horizontal'];
                        _0x33f5x9 = _0x33f5xf['getNumberOfBands'](_0x33f5xe, function() {
                            return _0x33f5x5['getEventStore']()['filterEventsForResource'](_0x33f5xe, _0x33f5x5['timeAxis']['isRangeInAxis'], _0x33f5x5['timeAxis']);
                        });
                    }
                    var _0x33f5x7 = _0x33f5x9 * _0x33f5x1['getRowHeight']() - (_0x33f5x9 - 1) * _0x33f5x5['barMargin'] - _0x33f5x5['cellTopBorderWidth'] - _0x33f5x5['cellBottomBorderWidth'];
                    _0x33f5x8['style'] = (_0x33f5x8['style'] || '') + ';height:' + _0x33f5x7 + 'px;';
                }
            }
        });
        _0x33f5x3['addCellTpl'](_0x33f5x4);
        Ext.Array['each'](_0x33f5x3['getColumnManager']()['getColumns'](), function(_0x33f5x8) {
            _0x33f5x8['hasCustomRenderer'] = true;
        });
        var _0x33f5x2 = this['getView']()['getStoreListeners']();
        _0x33f5x2 = Ext.apply({}, _0x33f5x2);
        _0x33f5x2['scope'] = this['getView']();
        this['store']['un'](_0x33f5x2);
        this['store']['on'](_0x33f5x2);
    },
    getEventSelectionModel: function() {
        return this['getSchedulingView']()['getEventSelectionModel']();
    },
    refreshResourceColumns: function() {
        var _0x33f5x2 = this['resourceColumnWidth'] || this['timeAxisViewModel']['resourceColumnWidth'];
        this['reconfigure'](this['verticalColumns']['concat'](this['createResourceColumns'](_0x33f5x2)));
    },
    onCalendarColumnResize: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
        if (_0x33f5x2 !== this['timeAxisViewModel']['calendarColumnWidth']) {
            this['timeAxisViewModel']['setViewColumnWidth'](_0x33f5x2, true);
        }
        this['getSchedulingView']()['calendar']['repaintEventsForColumn'](_0x33f5x1, _0x33f5x3['columnManager']['indexOf'](_0x33f5x1));
    },
    refreshCalendarColumns: function() {
        var _0x33f5x1 = this['createCalendarRows']();
        var _0x33f5x2 = this['createCalendarColumns']();
        this['reconfigure'](_0x33f5x1, this['calendarColumns']['concat'](_0x33f5x2));
    },
    setOrientation: function() {
        this['setMode']['apply'](this, arguments);
    },
    setMode: function(_0x33f5x4, _0x33f5x2) {
        if (!this['normalGrid']) {
            this['on']('afterrender', function() {
                this['setMode'](_0x33f5x4, true);
            });
            return;
        }
        if (_0x33f5x4 === this['mode'] && !_0x33f5x2) {
            return;
        }
        switch (_0x33f5x4) {
          case 'horizontal':
            this['addCls']('sch-horizontal');
            this['removeCls']([ 'sch-vertical', 'sch-calendar', 'sch-vertical-resource' ]);
            break;

          case 'vertical':
            this['addCls']([ 'sch-vertical-resource', 'sch-vertical' ]);
            this['removeCls']([ 'sch-calendar', 'sch-horizontal' ]);
            break;

          case 'calendar':
            this['addCls']([ 'sch-calendar', 'sch-vertical' ]);
            this['removeCls']([ 'sch-vertical-resource', 'sch-horizontal' ]);
            break;
        }
        this['mode'] = _0x33f5x4;
        var _0x33f5x7 = this, _0x33f5x5 = function() {
            return false;
        }, _0x33f5x9 = _0x33f5x7['normalGrid'], _0x33f5xf = _0x33f5x7['lockedGrid']['getView'](), _0x33f5x8 = _0x33f5x7['getSchedulingView'](), _0x33f5x3 = _0x33f5x9['headerCt'];
        _0x33f5xf['on']('beforerefresh', _0x33f5x5);
        _0x33f5x8['on']('beforerefresh', _0x33f5x5);
        _0x33f5x8['blockRefresh'] = _0x33f5xf['blockRefresh'] = true;
        Ext['suspendLayouts']();
        _0x33f5x8['setMode'](_0x33f5x4);
        _0x33f5x3['removeAll'](true);
        if (_0x33f5x4 !== 'calendar') {
            _0x33f5x7['timeAxis']['setMode']('plain');
            _0x33f5x7['mun'](_0x33f5x7['timeAxis'], _0x33f5x7['calendarListeners']);
            if (_0x33f5x7['_oldViewPreset']) {
                _0x33f5x7['setViewPreset']['apply'](_0x33f5x7, _0x33f5x7._oldViewPreset);
                delete _0x33f5x7['_oldViewPreset'];
            }
        } else {
            _0x33f5x7['_oldViewPreset'] = [ _0x33f5x7['viewPreset'], _0x33f5x7['timeAxis']['getStart'](), _0x33f5x7['timeAxis']['getEnd']() ];
            _0x33f5x7['timeAxis']['setMode']('calendar');
            _0x33f5x7['setViewPreset'](_0x33f5x7['calendarViewPreset']);
            _0x33f5x7['mon'](_0x33f5x7['timeAxis'], _0x33f5x7['calendarListeners']);
        }
        if (_0x33f5x4 === 'horizontal') {
            _0x33f5x7['mun'](_0x33f5x7['resourceStore'], _0x33f5x7['verticalListeners']);
            _0x33f5x7['normalGrid']['un'](_0x33f5x7['normalGridListeners']);
            _0x33f5x8['setRowHeight'](_0x33f5x7['rowHeight'] || _0x33f5x7['timeAxisViewModel']['rowHeightHorizontal'], true);
            _0x33f5x7['reconfigure'](_0x33f5x7['resourceStore'], _0x33f5x7['horizontalColumns']);
            if (this['horizontalLockedWidth'] !== null) {
                this['lockedGrid']['setWidth'](this['horizontalLockedWidth']);
            }
        } else {
            if (_0x33f5x4 === 'calendar') {
                _0x33f5x7['mun'](_0x33f5x7['resourceStore'], _0x33f5x7['verticalListeners']);
                _0x33f5x7['normalGrid']['on'](_0x33f5x7['normalGridListeners']);
                _0x33f5x7['refreshCalendarColumns']();
                _0x33f5x8['setRowHeight'](_0x33f5x7['rowHeight'] || _0x33f5x7['timeAxisViewModel']['rowHeightVertical'], true);
                _0x33f5x8['setColumnWidth'](_0x33f5x7['timeAxisViewModel']['calendarColumnWidth'] || 100, true);
            } else {
                _0x33f5x7['normalGrid']['un'](_0x33f5x7['normalGridListeners']);
                var _0x33f5x1 = 0;
                this['horizontalLockedWidth'] = this['lockedGrid']['getWidth']();
                _0x33f5x7['mon'](_0x33f5x7['resourceStore'], _0x33f5x7['verticalListeners']);
                _0x33f5x7['reconfigure'](_0x33f5x7['timeAxis'], _0x33f5x7['verticalColumns']['concat'](_0x33f5x7['createResourceColumns'](_0x33f5x7['resourceColumnWidth'] || _0x33f5x7['timeAxisViewModel']['resourceColumnWidth'])));
                Ext.Array['each'](_0x33f5x7['lockedGrid']['query']('gridcolumn'), function(_0x33f5xe) {
                    _0x33f5x1 += _0x33f5xe['rendered'] ? _0x33f5xe['getWidth']() : _0x33f5xe['width'] || 100;
                });
                _0x33f5x8['setColumnWidth'](_0x33f5x7['timeAxisViewModel']['resourceColumnWidth'] || 100, true);
                _0x33f5x7['lockedGrid']['setWidth'](_0x33f5x1);
            }
        }
        _0x33f5xf['un']('beforerefresh', _0x33f5x5);
        _0x33f5x8['un']('beforerefresh', _0x33f5x5);
        _0x33f5x8['blockRefresh'] = _0x33f5xf['blockRefresh'] = false;
        _0x33f5x7['refreshViews'](false);
        Ext['resumeLayouts'](true);
        this['fireEvent']('modechange', this, _0x33f5x4);
        this['fireEvent']('orientationchange', this, _0x33f5x4);
    },
    createCalendarRows: function() {
        var _0x33f5x2 = this;
        var _0x33f5x1 = _0x33f5x2['timeAxis']['getRowTicks']();
        _0x33f5x2['timeAxisViewModel']['calendarRowsAmount'] = _0x33f5x1['length'];
        return new Ext.data.Store({
            model: 'Ext.ux.Scheduler.model.TimeAxisTick',
            data: _0x33f5x1
        });
    },
    createCalendarColumns: function() {
        var _0x33f5x1 = this;
        var _0x33f5x3 = _0x33f5x1['timeAxis']['headerConfig']['middle'];
        var _0x33f5x2 = [];
        _0x33f5x1['timeAxis']['forEachAuxInterval'](_0x33f5x3['splitUnit'], null, function(_0x33f5x9, _0x33f5x4, _0x33f5x5) {
            _0x33f5x9['setHours'](this['startTime']);
            _0x33f5x4 = new Date(_0x33f5x9);
            _0x33f5x4['setHours'](this['endTime']);
            var _0x33f5x8 = {
                xclass: _0x33f5x1['calendarColumnClass'],
                renderer: _0x33f5x1['mainRenderer'],
                scope: _0x33f5x1,
                start: _0x33f5x9,
                end: _0x33f5x4
            };
            if (_0x33f5x3['renderer']) {
                _0x33f5x8['text'] = _0x33f5x3['renderer']['call'](_0x33f5x3['scope'] || _0x33f5x1, _0x33f5x9, _0x33f5x4, _0x33f5x8, _0x33f5x5, _0x33f5x1['getEventStore']());
            } else {
                _0x33f5x8['text'] = Ext.Date['format'](_0x33f5x9, _0x33f5x3['dateFormat']);
            }
            _0x33f5x2['push'](_0x33f5x8);
        });
        return _0x33f5x2;
    },
    setRowHeight: function(_0x33f5x2, _0x33f5x1) {
        _0x33f5x1 = _0x33f5x1 || !this['lockedGrid'];
        this['timeAxisViewModel']['setViewRowHeight'](_0x33f5x2, _0x33f5x1);
    },
    onNormalViewItemUpdate: function(_0x33f5x2, _0x33f5x1, _0x33f5x4) {
        if (this['lockedGridDependsOnSchedule']) {
            var _0x33f5x3 = this['lockedGrid']['getView']();
            _0x33f5x3['suspendEvents']();
            _0x33f5x3['refreshNode'](_0x33f5x3['indexOf'](_0x33f5x2));
            if (this['syncRowHeight']) {
                this['syncRowHeights']();
            }
            _0x33f5x3['resumeEvents']();
        }
    },
    onLockedViewResize: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
        var _0x33f5x4 = this['getMode']();
        if (_0x33f5x4 === 'vertical' || _0x33f5x4 === 'calendar') {
            this['timeAxisViewModel']['update'](_0x33f5x2 - 21);
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.TableView', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.view.Table',
    minVersion: '6.0.1',
    maxVersion: '6.0.1.9999',
    overrides: {
        suspendCellEditing: function(_0x33f5x2) {
            var _0x33f5x3 = _0x33f5x2, _0x33f5x1 = _0x33f5x3['activeEditor'];
            if (_0x33f5x1 && _0x33f5x1['editing']) {
                _0x33f5x3['suspendedEditor'] = _0x33f5x1;
                _0x33f5x3['suspendEvents']();
                _0x33f5x1['suspendEvents']();
                _0x33f5x1['cancelEdit'](true);
                _0x33f5x1['resumeEvents']();
                _0x33f5x3['resumeEvents']();
            }
        },
        resumeCellEditing: function(_0x33f5x3, _0x33f5x1) {
            var _0x33f5x5 = _0x33f5x3, _0x33f5x4 = _0x33f5x5['activeEditor'] = _0x33f5x5['suspendedEditor'], _0x33f5x2;
            if (_0x33f5x4) {
                _0x33f5x5['suspendEvents']();
                _0x33f5x4['suspendEvents']();
                _0x33f5x2 = _0x33f5x5['activateCell'](_0x33f5x1, true, true);
                _0x33f5x4['field'] && _0x33f5x4['field']['focus'](false, true);
                _0x33f5x4['resumeEvents']();
                _0x33f5x5['resumeEvents']();
            }
            return _0x33f5x2;
        },
        suspendActionableMode: function() {
            var _0x33f5x5 = this, _0x33f5x1 = _0x33f5x5['grid']['actionables'], _0x33f5x2 = _0x33f5x1['length'], _0x33f5x4;
            for (_0x33f5x4 = 0; _0x33f5x4 < _0x33f5x2; _0x33f5x4++) {
                var _0x33f5x3 = _0x33f5x1[_0x33f5x4];
                if (Ext.grid.plugin.CellEditing && _0x33f5x3 instanceof Ext.grid.plugin.CellEditing) {
                    _0x33f5x5['suspendCellEditing'](_0x33f5x3);
                }
            }
        },
        resumeActionableMode: function(_0x33f5x3) {
            var _0x33f5x9 = this, _0x33f5x4 = _0x33f5x9['grid']['actionables'], _0x33f5x1 = _0x33f5x4['length'], _0x33f5x8, _0x33f5x2;
            _0x33f5x9['toggleChildrenTabbability'](false);
            for (_0x33f5x8 = 0; _0x33f5x8 < _0x33f5x1; _0x33f5x8++) {
                var _0x33f5x5 = _0x33f5x4[_0x33f5x8];
                if (!_0x33f5x2 && Ext.grid.plugin.CellEditing && _0x33f5x5 instanceof Ext.grid.plugin.CellEditing) {
                    _0x33f5x2 = _0x33f5x9['resumeCellEditing'](_0x33f5x5, _0x33f5x3);
                }
            }
            if (!_0x33f5x2) {
                _0x33f5x9['activateCell'](_0x33f5x3);
            }
        },
        saveFocusState: function() {
            var _0x33f5x8 = this, _0x33f5x9 = _0x33f5x8['dataSource'], _0x33f5x2 = _0x33f5x8['actionableMode'], _0x33f5x3 = _0x33f5x8['getNavigationModel'](), _0x33f5x4 = _0x33f5x2 ? _0x33f5x8['actionPosition'] : _0x33f5x3['getPosition'](true), _0x33f5x1 = Ext['Element']['getActiveElement'](true), _0x33f5xf = _0x33f5x4 && _0x33f5x4['view'] === _0x33f5x8 && _0x33f5x4['getCell'](), _0x33f5x5, _0x33f5x7;
            if (_0x33f5xf && _0x33f5xf['contains'](_0x33f5x1)) {
                _0x33f5x4 = _0x33f5x4['clone']();
                _0x33f5x1['suspendFocusEvents']();
                if (_0x33f5x2) {
                    _0x33f5x8['suspendActionableMode']();
                } else {
                    _0x33f5x3['setPosition']();
                }
                _0x33f5x1['resumeFocusEvents']();
                return function() {
                    if (_0x33f5x9['getCount']()) {
                        _0x33f5x5 = Math['min'](_0x33f5x4['rowIdx'], _0x33f5x8['all']['getCount']() - 1);
                        _0x33f5x7 = Math['min'](_0x33f5x4['colIdx'], _0x33f5x8['getVisibleColumnManager']()['getColumns']()['length'] - 1);
                        _0x33f5x4 = new Ext['grid'].CellContext(_0x33f5x8)['setPosition'](_0x33f5x9['contains'](_0x33f5x4['record']) ? _0x33f5x4['record'] : _0x33f5x5, _0x33f5x7);
                        if (_0x33f5x2) {
                            _0x33f5x8['resumeActionableMode'](_0x33f5x4);
                        } else {
                            _0x33f5x3['setPosition'](_0x33f5x4, null, null, null, true);
                        }
                    } else {
                        _0x33f5x4['column']['focus']();
                    }
                };
            }
            return Ext.emptyFn;
        },
        activateCell: function() {
            return true;
        },
        onFocusEnter: function(_0x33f5x2) {
            if (!Ext.fly(_0x33f5x2['target'])['hasCls']('sch-event')) {
                this['callParent'](arguments);
            }
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.TableView_6_0_2', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.view.Table',
    minVersion: '6.0.2',
    overrides: {
        handleUpdate: function(_0x33f5x3, _0x33f5x1d, _0x33f5x13, _0x33f5x17, _0x33f5x1e, _0x33f5x1f) {
            _0x33f5x13 = _0x33f5x13 || Ext.data.Model.EDIT;
            var _0x33f5x7 = this, _0x33f5x20 = _0x33f5x7['store']['indexOf'](_0x33f5x1d), _0x33f5x21 = _0x33f5x7['rowTpl'], _0x33f5x18 = _0x33f5x7['markDirty'], _0x33f5x14 = _0x33f5x7['dirtyCls'], _0x33f5x1c = _0x33f5x13 !== Ext.data.Model.EDIT, _0x33f5x12 = [], _0x33f5xd = _0x33f5x7['variableRowHeight'], _0x33f5x1 = 0, _0x33f5x1a = _0x33f5x7['ownerCt'], _0x33f5x10 = _0x33f5x7['cellFly'] || (_0x33f5x7['self']['prototype']['cellFly'] = new Ext.dom.Fly()), _0x33f5x22, _0x33f5x5, _0x33f5x4, _0x33f5x8, _0x33f5x2, _0x33f5x6, _0x33f5x23, _0x33f5x24, _0x33f5x9, _0x33f5x25, _0x33f5xb, _0x33f5x26, _0x33f5xa, _0x33f5x15, _0x33f5xc, _0x33f5x1b, _0x33f5x16, _0x33f5x19, _0x33f5xe, _0x33f5x11;
            if (_0x33f5x7['viewReady']) {
                _0x33f5x22 = _0x33f5x7['getNodeByRecord'](_0x33f5x1d);
                if (_0x33f5x22) {
                    if (_0x33f5x1d['isCollapsedPlaceholder']) {
                        Ext.fly(_0x33f5x22)['syncContent'](_0x33f5x7['createRowElement'](_0x33f5x1d, _0x33f5x7['indexOfRow'](_0x33f5x1d)));
                        return;
                    }
                    _0x33f5x24 = _0x33f5x7['overItemCls'];
                    _0x33f5x9 = _0x33f5x7['ownerCt']['getVisibleColumnManager']()['getColumns']();
                    if (_0x33f5x1f) {
                        _0x33f5x12 = _0x33f5x9;
                        _0x33f5x1 = 1;
                    } else {
                        for (_0x33f5x26 = 0, _0x33f5xb = _0x33f5x9['length']; _0x33f5x26 < _0x33f5xb; _0x33f5x26++) {
                            _0x33f5x25 = _0x33f5x9[_0x33f5x26];
                            if (_0x33f5x25['preventUpdate']) {
                                _0x33f5x15 = Ext.fly(_0x33f5x22)['down'](_0x33f5x25['getCellSelector'](), true);
                                if (_0x33f5x15 && !_0x33f5x1c && _0x33f5x18) {
                                    _0x33f5x10['attach'](_0x33f5x15);
                                    if (_0x33f5x1d['isModified'](_0x33f5x25['dataIndex'])) {
                                        _0x33f5x10['addCls'](_0x33f5x14);
                                    } else {
                                        _0x33f5x10['removeCls'](_0x33f5x14);
                                    }
                                }
                            } else {
                                _0x33f5xa = _0x33f5x7['shouldUpdateCell'](_0x33f5x1d, _0x33f5x25, _0x33f5x17);
                                if (_0x33f5xa) {
                                    _0x33f5x1 = _0x33f5x1 | _0x33f5xa;
                                    _0x33f5x12[_0x33f5x12['length']] = _0x33f5x25;
                                    _0x33f5xd = _0x33f5xd || _0x33f5x25['variableRowHeight'];
                                }
                            }
                        }
                    }
                    _0x33f5x7['fireEvent']('beforeitemupdate', _0x33f5x1d, _0x33f5x20, _0x33f5x22, _0x33f5x12);
                    if (_0x33f5x7['getRowClass'] || !_0x33f5x7['getRowFromItem'](_0x33f5x22) || _0x33f5x1 & 1 || _0x33f5x22['tBodies'][0]['childNodes']['length'] > 1) {
                        _0x33f5xe = _0x33f5x22['_extData'];
                        _0x33f5x4 = _0x33f5x7['createRowElement'](_0x33f5x1d, _0x33f5x7['indexOfRow'](_0x33f5x1d), _0x33f5x12);
                        if (Ext.fly(_0x33f5x22, '_internal')['hasCls'](_0x33f5x24)) {
                            Ext.fly(_0x33f5x4)['addCls'](_0x33f5x24);
                        }
                        if (Ext['isIE9m'] && _0x33f5x22['mergeAttributes']) {
                            _0x33f5x22['mergeAttributes'](_0x33f5x4, true);
                        } else {
                            _0x33f5x8 = _0x33f5x4['attributes'];
                            _0x33f5x2 = _0x33f5x8['length'];
                            for (_0x33f5x23 = 0; _0x33f5x23 < _0x33f5x2; _0x33f5x23++) {
                                _0x33f5x6 = _0x33f5x8[_0x33f5x23]['name'];
                                if (_0x33f5x6 !== 'id') {
                                    _0x33f5x22['setAttribute'](_0x33f5x6, _0x33f5x8[_0x33f5x23]['value']);
                                }
                            }
                        }
                        if (_0x33f5xe) {
                            _0x33f5xe['isSynchronized'] = false;
                        }
                        if (_0x33f5x9['length'] && (_0x33f5x5 = _0x33f5x7['getRow'](_0x33f5x22))) {
                            _0x33f5x7['updateColumns'](_0x33f5x5, Ext.fly(_0x33f5x4)['down'](_0x33f5x7['rowSelector'], true), _0x33f5x12);
                        }
                        while (_0x33f5x21) {
                            if (_0x33f5x21['syncContent']) {
                                if (_0x33f5x21['syncContent'](_0x33f5x22, _0x33f5x4, _0x33f5x17 ? _0x33f5x12 : null) === false) {
                                    break;
                                }
                            }
                            _0x33f5x21 = _0x33f5x21['nextTpl'];
                        }
                    } else {
                        for (_0x33f5x26 = 0, _0x33f5xb = _0x33f5x12['length']; _0x33f5x26 < _0x33f5xb; _0x33f5x26++) {
                            _0x33f5x25 = _0x33f5x12[_0x33f5x26];
                            _0x33f5xc = _0x33f5x25['dataIndex'];
                            _0x33f5x1b = _0x33f5x1d['get'](_0x33f5xc);
                            _0x33f5x15 = Ext.fly(_0x33f5x22)['down'](_0x33f5x25['getCellSelector'](), true);
                            _0x33f5x10['attach'](_0x33f5x15);
                            if (!_0x33f5x1c && _0x33f5x18) {
                                if (_0x33f5x1d['isModified'](_0x33f5x25['dataIndex'])) {
                                    _0x33f5x10['addCls'](_0x33f5x14);
                                } else {
                                    _0x33f5x10['removeCls'](_0x33f5x14);
                                }
                            }
                            _0x33f5x16 = _0x33f5x25['usingDefaultRenderer'];
                            _0x33f5x19 = _0x33f5x16 ? _0x33f5x25 : _0x33f5x25['scope'];
                            if (_0x33f5x25['updater']) {
                                Ext['callback'](_0x33f5x25['updater'], _0x33f5x19, [ _0x33f5x15, _0x33f5x1b, _0x33f5x1d, _0x33f5x7, _0x33f5x7['dataSource'] ], 0, _0x33f5x25, _0x33f5x1a);
                            } else {
                                if (_0x33f5x25['renderer']) {
                                    _0x33f5x1b = Ext['callback'](_0x33f5x25['renderer'], _0x33f5x19, [ _0x33f5x1b, null, _0x33f5x1d, 0, 0, _0x33f5x7['dataSource'], _0x33f5x7 ], 0, _0x33f5x25, _0x33f5x1a);
                                }
                                _0x33f5x11 = _0x33f5x1b == null || _0x33f5x1b === '';
                                _0x33f5x1b = _0x33f5x11 ? _0x33f5x25['emptyCellText'] : _0x33f5x1b;
                                if (_0x33f5x25['producesHTML'] || _0x33f5x11) {
                                    _0x33f5x10['down'](_0x33f5x7['innerSelector'], true)['innerHTML'] = _0x33f5x1b;
                                } else {
                                    _0x33f5x10['down'](_0x33f5x7['innerSelector'], true)['childNodes'][0]['data'] = _0x33f5x1b;
                                }
                            }
                            if (_0x33f5x7['highlightClass']) {
                                Ext.fly(_0x33f5x15)['addCls'](_0x33f5x7['highlightClass']);
                                if (!_0x33f5x7['changedCells']) {
                                    _0x33f5x7['self']['prototype']['changedCells'] = [];
                                    _0x33f5x7['prototype']['clearChangedTask'] = new Ext.util.DelayedTask(_0x33f5x7['clearChangedCells'], _0x33f5x7['prototype']);
                                    _0x33f5x7['clearChangedTask']['delay'](_0x33f5x7['unhighlightDelay']);
                                }
                                _0x33f5x7['changedCells']['push']({
                                    cell: _0x33f5x15,
                                    cls: _0x33f5x7['highlightClass'],
                                    expires: Ext.Date['now']() + 1e3
                                });
                            }
                        }
                    }
                    if (_0x33f5x1c && _0x33f5x18 && !_0x33f5x1d['dirty']) {
                        Ext.fly(_0x33f5x22, '_internal')['select']('.' + _0x33f5x14)['removeCls'](_0x33f5x14);
                    }
                    if (_0x33f5xd) {
                        Ext['suspendLayouts']();
                    }
                    _0x33f5x7['fireEvent']('itemupdate', _0x33f5x1d, _0x33f5x20, _0x33f5x22);
                    if (_0x33f5xd) {
                        _0x33f5x7['ownerGrid']['updateLayout']();
                        Ext['resumeLayouts'](true);
                    }
                }
            }
        },
        privates: {
            setActionableMode: function(_0x33f5x7, _0x33f5x8) {
                var _0x33f5xb = this, _0x33f5x2 = _0x33f5xb['getNavigationModel'](), _0x33f5x3, _0x33f5x11 = _0x33f5xb['grid']['actionables'], _0x33f5x9 = _0x33f5x11['length'], _0x33f5x4, _0x33f5x5, _0x33f5x1, _0x33f5xc = false, _0x33f5xe;
                if (_0x33f5xb['actionableMode'] === _0x33f5x7) {
                    if (!_0x33f5x7 || _0x33f5x8['isEqual'](_0x33f5xb['actionPosition'])) {
                        return false;
                    }
                }
                if (_0x33f5x7) {
                    if (_0x33f5x8 && (_0x33f5x8['view'] === _0x33f5xb || _0x33f5x8['view'] === (_0x33f5xe = _0x33f5xb['lockingPartner']) && _0x33f5xe['actionableMode'])) {
                        _0x33f5xc = _0x33f5xb['activateCell'](_0x33f5x8);
                    }
                    return _0x33f5xc;
                } else {
                    _0x33f5x3 = Ext.fly(Ext['Element']['getActiveElement']());
                    if (_0x33f5xb['el']['contains'](_0x33f5x3)) {
                        _0x33f5x5 = _0x33f5xb['actionPosition'] && _0x33f5xb['actionPosition']['record'] || _0x33f5xb['getRecord'](_0x33f5x3);
                        _0x33f5x1 = _0x33f5xb['getHeaderByCell'](_0x33f5x3['findParent'](_0x33f5xb['getCellSelector']()));
                        if (!_0x33f5x8) {
                            _0x33f5x8 = new Ext['grid'].CellContext(_0x33f5xb)['setPosition'](_0x33f5x5 || 0, _0x33f5x1 || 0);
                        }
                        _0x33f5xb['_leavingActionableMode'] = true;
                        _0x33f5x8['getCell']()['focus']();
                        _0x33f5xb['_leavingActionableMode'] = false;
                        _0x33f5x3 = Ext.fly(Ext['Element']['getActiveElement']());
                        if (!(_0x33f5xb['el']['contains'](_0x33f5x3) && _0x33f5x3['is'](_0x33f5xb['getCellSelector']()))) {
                            _0x33f5x8 = null;
                        }
                    }
                    for (_0x33f5x4 = 0; _0x33f5x4 < _0x33f5x9; _0x33f5x4++) {
                        if (_0x33f5x11[_0x33f5x4]['deactivate']) {
                            _0x33f5x11[_0x33f5x4]['deactivate']();
                        }
                    }
                    if (_0x33f5xb['actionRow']) {
                        _0x33f5xb['actionRow']['saveTabbableState']({
                            skipSelf: true,
                            includeSaved: false
                        });
                    }
                    if (_0x33f5xb['destroyed']) {
                        return false;
                    }
                    _0x33f5xb['actionableMode'] = _0x33f5xb['ownerGrid']['actionableMode'] = false;
                    _0x33f5xb['actionPosition'] = _0x33f5x2['actionPosition'] = _0x33f5xb['actionRow'] = null;
                    if (_0x33f5x8) {
                        _0x33f5x2['setPosition'](_0x33f5x8);
                    }
                }
            }
        },
        saveFocusState: function() {
            var _0x33f5x8 = this, _0x33f5x9 = _0x33f5x8['dataSource'], _0x33f5x2 = _0x33f5x8['actionableMode'], _0x33f5x3 = _0x33f5x8['getNavigationModel'](), _0x33f5x4 = _0x33f5x2 ? _0x33f5x8['actionPosition'] : _0x33f5x3['getPosition'](true), _0x33f5x1 = Ext['Element']['getActiveElement'](true), _0x33f5xf = _0x33f5x4 && _0x33f5x4['view'] === _0x33f5x8 && _0x33f5x4['getCell'](), _0x33f5x5, _0x33f5x7;
            if (_0x33f5xf && _0x33f5xf['contains'](_0x33f5x1)) {
                _0x33f5x4 = _0x33f5x4['clone']();
                _0x33f5x1['suspendFocusEvents']();
                if (_0x33f5x2) {
                    _0x33f5x8['suspendActionableMode']();
                } else {
                    _0x33f5x3['setPosition']();
                }
                _0x33f5x1['resumeFocusEvents']();
                return function() {
                    if (_0x33f5x9['getCount']()) {
                        _0x33f5x5 = Math['min'](_0x33f5x4['rowIdx'], _0x33f5x8['all']['getCount']() - 1);
                        _0x33f5x7 = Math['min'](_0x33f5x4['colIdx'], _0x33f5x8['getVisibleColumnManager']()['getColumns']()['length'] - 1);
                        _0x33f5x4 = new Ext['grid'].CellContext(_0x33f5x8)['setPosition'](_0x33f5x9['contains'](_0x33f5x4['record']) ? _0x33f5x4['record'] : _0x33f5x5, _0x33f5x7);
                        if (_0x33f5x2 && !_0x33f5x8['_leavingActionableMode']) {
                            _0x33f5x8['resumeActionableMode'](_0x33f5x4);
                        } else {
                            _0x33f5x3['setPosition'](_0x33f5x4, null, null, null, true);
                        }
                    } else {
                        _0x33f5x4['column']['focus']();
                    }
                };
            }
            return Ext.emptyFn;
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.TablePanel', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.panel.Table',
    applyFn: function() {
        var _0x33f5x2 = {};
        if (Ext['getVersion']()['equals']('6.0.1.250')) {
            _0x33f5x2['ensureVisible'] = function(_0x33f5x1, _0x33f5x3) {
                if (_0x33f5x3 && _0x33f5x3['column'] && this['getVisibleColumnManager']()['indexOf'](_0x33f5x3['column']) === -1) {
                    return;
                }
                this['callParent'](arguments);
            };
        }
        Ext.ClassManager['get'](this['target'])['override'](_0x33f5x2);
    }
});

Ext.define('Ext.ux.Scheduler.patches.BufferedRenderer', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.grid.plugin.BufferedRenderer',
    minVersion: '6.0.2',
    overrides: {
        onRangeFetched: function(_0x33f5x17, _0x33f5x9, _0x33f5x5, _0x33f5x4, _0x33f5x14) {
            var _0x33f5x1a = this, _0x33f5x10 = _0x33f5x1a['view'], _0x33f5x11 = _0x33f5x10['el'], _0x33f5x6 = _0x33f5x10['all'], _0x33f5x1d = 0, _0x33f5x12 = _0x33f5x1a['variableRowHeight'], _0x33f5xd = _0x33f5x10['lockingPartner'] && !_0x33f5x14 && !_0x33f5x1a['doNotMirror'] && _0x33f5x10['lockingPartner']['bufferedRenderer'], _0x33f5x8, _0x33f5x16, _0x33f5x15, _0x33f5x13, _0x33f5x18, _0x33f5xc, _0x33f5xa, _0x33f5x1c, _0x33f5x3, _0x33f5x1, _0x33f5x7, _0x33f5xb, _0x33f5x19, _0x33f5x2;
            if (_0x33f5x10['destroyed']) {
                return;
            }
            if (_0x33f5x17) {
                if (!_0x33f5x14) {
                    _0x33f5x1a['scrollTop'] = _0x33f5x1a['view']['getScrollY']();
                }
            } else {
                _0x33f5x17 = _0x33f5x1a['store']['getRange'](_0x33f5x9, _0x33f5x5);
                if (!_0x33f5x17) {
                    return;
                }
            }
            _0x33f5x8 = Ext['Element']['getActiveElement']();
            _0x33f5x15 = _0x33f5x11['contains'](_0x33f5x8);
            _0x33f5x16 = _0x33f5x9 * _0x33f5x1a['rowHeight'];
            if (_0x33f5x9 < _0x33f5x6['startIndex'] && _0x33f5x5 > _0x33f5x6['endIndex']) {
                _0x33f5x19 = _0x33f5x6['startIndex'] - _0x33f5x9;
                _0x33f5x10['clearViewEl'](true);
                _0x33f5x18 = _0x33f5x10['doAdd'](_0x33f5x17, _0x33f5x9);
                _0x33f5x10['fireEvent']('itemadd', _0x33f5x17, _0x33f5x9, _0x33f5x18);
                for (_0x33f5x13 = 0; _0x33f5x13 < _0x33f5x19; _0x33f5x13++) {
                    _0x33f5x1d -= _0x33f5x18[_0x33f5x13]['offsetHeight'];
                }
                _0x33f5xc = _0x33f5x1a['bodyTop'] + _0x33f5x1d;
            } else {
                _0x33f5x1c = _0x33f5x1a['teleported'] || _0x33f5x9 > _0x33f5x6['endIndex'] || _0x33f5x5 < _0x33f5x6['startIndex'];
                if (_0x33f5x1c) {
                    _0x33f5x10['clearViewEl'](true);
                    _0x33f5x1a['teleported'] = false;
                }
                if (!_0x33f5x6['getCount']()) {
                    _0x33f5x18 = _0x33f5x10['doAdd'](_0x33f5x17, _0x33f5x9);
                    _0x33f5x10['fireEvent']('itemadd', _0x33f5x17, _0x33f5x9, _0x33f5x18);
                    _0x33f5xc = _0x33f5x16;
                    if (_0x33f5x1c && _0x33f5x12) {
                        _0x33f5x2 = _0x33f5x1a['scrollTop'] < _0x33f5x1a['position'] ? _0x33f5x1a['leadingBufferZone'] : _0x33f5x1a['trailingBufferZone'];
                        var _0x33f5xe = Math['min'](_0x33f5x6['startIndex'] + _0x33f5x2 - 1, _0x33f5x6['endIndex']);
                        _0x33f5xc = Math['max'](_0x33f5x1a['scrollTop'] - _0x33f5x6['item'](_0x33f5xe, true)['offsetTop'], 0);
                    }
                } else {
                    if (_0x33f5x5 > _0x33f5x6['endIndex']) {
                        _0x33f5xb = Math['max'](_0x33f5x9 - _0x33f5x6['startIndex'], 0);
                        if (_0x33f5x12) {
                            _0x33f5x1d = _0x33f5x6['item'](_0x33f5x6['startIndex'] + _0x33f5xb, true)['offsetTop'];
                        }
                        _0x33f5x18 = _0x33f5x6['scroll'](Ext.Array['slice'](_0x33f5x17, _0x33f5x6['endIndex'] + 1 - _0x33f5x9), 1, _0x33f5xb);
                        if (_0x33f5x12) {
                            _0x33f5xc = _0x33f5x1a['bodyTop'] + _0x33f5x1d;
                        } else {
                            _0x33f5xc = _0x33f5x16;
                        }
                    } else {
                        _0x33f5xb = Math['max'](_0x33f5x6['endIndex'] - _0x33f5x5, 0);
                        _0x33f5x3 = _0x33f5x6['startIndex'];
                        _0x33f5x18 = _0x33f5x6['scroll'](Ext.Array['slice'](_0x33f5x17, 0, _0x33f5x6['startIndex'] - _0x33f5x9), -1, _0x33f5xb);
                        if (_0x33f5x12) {
                            _0x33f5xc = _0x33f5x1a['bodyTop'] - _0x33f5x6['item'](_0x33f5x3, true)['offsetTop'];
                            if (!_0x33f5x6['startIndex']) {
                                if (_0x33f5xc) {
                                    _0x33f5x10['setScrollY'](_0x33f5x1a['position'] = _0x33f5x1a['scrollTop'] -= _0x33f5xc);
                                    _0x33f5xc = 0;
                                }
                            } else {
                                if (_0x33f5xc < 0) {
                                    _0x33f5x1d = _0x33f5x6['startIndex'] * _0x33f5x1a['rowHeight'];
                                    _0x33f5x10['setScrollY'](_0x33f5x1a['position'] = _0x33f5x1a['scrollTop'] += _0x33f5x1d);
                                    _0x33f5xc = _0x33f5x1a['bodyTop'] + _0x33f5x1d;
                                }
                            }
                        } else {
                            _0x33f5xc = _0x33f5x16;
                        }
                    }
                }
                _0x33f5x1a['position'] = _0x33f5x1a['scrollTop'];
            }
            if (_0x33f5x15 && !_0x33f5x11['contains'](_0x33f5x8)) {
                _0x33f5x7 = _0x33f5x10['actionableMode'] ? _0x33f5x10['actionPosition'] : _0x33f5x10['lastFocused'];
                if (_0x33f5x7 && _0x33f5x7['column']) {
                    _0x33f5x10['onFocusLeave']({});
                    if (_0x33f5x7['column']['focusable']) {
                        _0x33f5xa = _0x33f5x7['column'];
                    } else {
                        _0x33f5xa = _0x33f5x7['column']['el']['findTabbableElements']()[0];
                    }
                    if (!_0x33f5xa) {
                        _0x33f5xa = _0x33f5x10['el'];
                    }
                    _0x33f5xa['focus']();
                }
            }
            _0x33f5xc = Math['max'](Math['floor'](_0x33f5xc), 0);
            if (_0x33f5x10['positionBody']) {
                _0x33f5x1a['setBodyTop'](_0x33f5xc);
            }
            if (_0x33f5x18 && _0x33f5xd && !_0x33f5xd['disabled']) {
                _0x33f5xd['scrollTop'] = _0x33f5xd['position'] = _0x33f5x1a['scrollTop'];
                if (_0x33f5xd['view']['ownerCt']['isVisible']()) {
                    _0x33f5x1 = _0x33f5xd['onRangeFetched'](_0x33f5x17, _0x33f5x9, _0x33f5x5, _0x33f5x4, true);
                    if (_0x33f5x10['ownerGrid']['syncRowHeight'] || _0x33f5xd['variableRowHeight'] !== _0x33f5x12) {
                        _0x33f5x1a['syncRowHeights'](_0x33f5x18, _0x33f5x1);
                    }
                }
                if (_0x33f5xd['bodyTop'] !== _0x33f5xc) {
                    _0x33f5xd['setBodyTop'](_0x33f5xc);
                }
                _0x33f5xd['view']['setScrollY'](_0x33f5x1a['scrollTop']);
            }
            if (_0x33f5x10['getVisibleColumnManager']()['getColumns']()['length'] && _0x33f5x6['getCount']() !== Math['min'](_0x33f5x1a['store']['getCount'](), _0x33f5x1a['viewSize'])) {
                Ext.raise('rendered block refreshed at ' + _0x33f5x6['getCount']() + ' rows while BufferedRenderer view size is ' + _0x33f5x1a['viewSize']);
            }
            return _0x33f5x18;
        },
        doRefreshView: function(_0x33f5x9, _0x33f5xa, _0x33f5x8, _0x33f5x10) {
            var _0x33f5xc = this, _0x33f5xd = _0x33f5xc['view'], _0x33f5x6 = _0x33f5xd['all'], _0x33f5xb = _0x33f5x6['startIndex'], _0x33f5xf = _0x33f5x6['endIndex'], _0x33f5x11, _0x33f5xe, _0x33f5x1 = _0x33f5x6['getCount'](), _0x33f5x5, _0x33f5x2 = _0x33f5xa !== _0x33f5x6['startIndex'], _0x33f5x4, _0x33f5x3, _0x33f5x7;
            _0x33f5xd['refreshing'] = _0x33f5xc['refreshing'] = true;
            if (_0x33f5xd['refreshCounter']) {
                if (_0x33f5xd['hasListeners']['beforerefresh'] && _0x33f5xd['fireEvent']('beforerefresh', _0x33f5xd) === false) {
                    return _0x33f5xd['refreshNeeded'] = _0x33f5xd['refreshing'] = _0x33f5xc['refreshing'] = false;
                }
                _0x33f5x7 = _0x33f5xd['saveFocusState']();
                _0x33f5xd['clearViewEl'](true);
                _0x33f5xd['refreshCounter']++;
                if (_0x33f5x9['length']) {
                    _0x33f5x5 = _0x33f5xd['doAdd'](_0x33f5x9, _0x33f5xa);
                    if (_0x33f5x2) {
                        _0x33f5x11 = _0x33f5x6['item'](_0x33f5xb, true);
                        _0x33f5xe = _0x33f5x6['item'](_0x33f5xf, true);
                        if (_0x33f5x11) {
                            _0x33f5x3 = -_0x33f5x11['offsetTop'];
                        } else {
                            if (_0x33f5xe) {
                                _0x33f5x3 = _0x33f5x6['last'](true)['offsetTop'] - _0x33f5xe['offsetTop'];
                            }
                        }
                        if (_0x33f5x3) {
                            _0x33f5xc['bodyTop'] = Math['max'](_0x33f5xc['bodyTop'] + _0x33f5x3, 0);
                            _0x33f5xc['scrollTop'] = _0x33f5xc['bodyTop'] ? _0x33f5xc['scrollTop'] + _0x33f5x3 : 0;
                        } else {
                            _0x33f5xc['bodyTop'] = _0x33f5x4 = _0x33f5xa * _0x33f5xc['rowHeight'];
                            _0x33f5xc['scrollTop'] = Math['max'](_0x33f5x4 - _0x33f5xc['rowHeight'] * (_0x33f5x4 < _0x33f5xc['bodyTop'] ? _0x33f5xc['leadingBufferZone'] : _0x33f5xc['trailingBufferZone'], 
                            0));
                        }
                    }
                } else {
                    if (_0x33f5xc['scrollTop']) {
                        _0x33f5xc['bodyTop'] = _0x33f5xc['scrollTop'] = 0;
                    }
                    _0x33f5xd['addEmptyText']();
                }
                if (_0x33f5x2) {
                    _0x33f5xc['setBodyTop'](_0x33f5xc['bodyTop']);
                    _0x33f5xd['suspendEvent']('scroll');
                    _0x33f5xd['setScrollY'](_0x33f5xc['position'] = _0x33f5xc['scrollTop']);
                    _0x33f5xd['resumeEvent']('scroll');
                }
                _0x33f5xc['refreshSize']();
                _0x33f5xd['refreshSize'](_0x33f5x6['getCount']() !== _0x33f5x1);
                _0x33f5xd['fireEvent']('refresh', _0x33f5xd, _0x33f5x9);
                _0x33f5x7();
                _0x33f5xd['headerCt']['setSortState']();
            } else {
                _0x33f5xd['refresh']();
            }
            if (!_0x33f5xd['ownerGrid']['mixins']['Ext.ux.Scheduler.mixin.TimelinePanel'] && _0x33f5xd['getVisibleColumnManager']()['getColumns']()['length'] && _0x33f5x6['getCount']() !== Math['min'](_0x33f5xc['store']['getCount'](), _0x33f5xc['viewSize'])) {
                Ext.raise('rendered block refreshed at ' + _0x33f5x6['getCount']() + ' rows while BufferedRenderer view size is ' + _0x33f5xc['viewSize']);
            }
            _0x33f5xd['refreshNeeded'] = _0x33f5xd['refreshing'] = _0x33f5xc['refreshing'] = false;
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.CellContext', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.grid.CellContext',
    minVersion: '6.0.0',
    applyFn: function() {
        var _0x33f5x2 = {
            setAll: function(_0x33f5x3, _0x33f5x4, _0x33f5x5, _0x33f5x1, _0x33f5x9) {
                var _0x33f5x8 = this;
                if (_0x33f5x9 && _0x33f5x5 == -1 && _0x33f5x3 !== _0x33f5x8['view']) {
                    _0x33f5x3 = _0x33f5x8['view'];
                    _0x33f5x5 = _0x33f5x3['getVisibleColumnManager']()['indexOf'](_0x33f5x9);
                }
                return this['callParent'](arguments);
            }
        };
        if (Ext['getVersion']()['isGreaterThanOrEqual']('6.0.1')) {
            _0x33f5x2['setPosition'] = function(_0x33f5x3, _0x33f5x1) {
                _0x33f5x3 = _0x33f5x3 || 0;
                _0x33f5x1 = _0x33f5x1 || 0;
                return this['callParent'](arguments);
            };
        }
       Ext.override(Ext['grid'].CellContext, _0x33f5x2);
    }
});

Ext.define('Ext.ux.Scheduler.patches.RowSynchronizer', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.grid.locking.RowSynchronizer',
    minVersion: '6.0.0',
    maxVersion: '6.0.1',
    overrides: {
        finish: function(_0x33f5x2) {
            if (!_0x33f5x2) {
                return;
            }
            return this['callParent'](arguments);
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.Explorer', {
    extend: Ext.ux.Scheduler.util.Patch,
    minVersion: '6.0.0',
    maxVersion: '6.0.1',
    applyFn: function() {
        if (Ext['isIE9m']) {
            Ext.util['CSS']['createStyleSheet']('.' + Ext['baseCSSPrefix'] + 'column-header-trigger { z-index: 10; }');
        }
    }
});

Ext.define('Ext.ux.Scheduler.mixin.TimelinePanel', {
    extend: Ext.ux.Scheduler.mixin.AbstractTimelinePanel,
    mixins: [ Ext.ux.Scheduler.mixin.Zoomable, Ext.ux.Scheduler.mixin.PartnerTimelinePanel ],
    destroyStores: false,
    bufferCoef: 5,
    bufferThreshold: .2,
    infiniteScroll: false,
    showCrudManagerMask: true,
    highlightWeekends: false,
    showTodayLine: false,
    calendar: null,
    waitingForAutoTimeSpan: false,
    columnLinesFeature: null,
    renderWaitListener: null,
    schedulePinchThreshold: 30,
    pinchStartDistanceX: null,
    pinchStartDistanceY: null,
    pinchDistanceX: null,
    pinchDistanceY: null,
    horizontalColumns: null,
    verticalColumns: null,
    calendarColumns: null,
    forceDefineTimeSpanByStore: false,
    workingTimePlugin: null,
    split: true,
    viewRefreshRequested: null,
    tipCfg: {
        cls: 'sch-tip',
        showDelay: 400,
        hideDelay: 0,
        autoHide: true,
        anchor: 'b'
    },
    inheritables: function() {
        return {
            columnLines: true,
            enableLocking: true,
            lockable: true,
            stateEvents: [ 'viewchange' ],
            syncRowHeight: false,
            cellTopBorderWidth: 0,
            initComponent: function() {
                if (this['partnerTimelinePanel']) {
                    if (typeof this['partnerTimelinePanel'] === 'string') {
                        this['partnerTimelinePanel'] = Ext.getCmp(this['partnerTimelinePanel']);
                    }
                    this['timeAxisViewModel'] = this['partnerTimelinePanel']['timeAxisViewModel'];
                    this['timeAxis'] = this['partnerTimelinePanel']['getTimeAxis']();
                    this['startDate'] = this['timeAxis']['getStart']();
                    this['endDate'] = this['timeAxis']['getEnd']();
                }
                this._initializeTimelinePanel();
                this['configureChildGrids']();
                this['forceFit'] = false;
                this['configureColumns']();
                var _0x33f5x4 = this['normalViewConfig'] = this['normalViewConfig'] || {};
                var _0x33f5x5 = this['getId']();
                Ext.apply(this['normalViewConfig'], {
                    id: _0x33f5x5 + '-timelineview',
                    eventPrefix: this['autoGenId'] ? null : _0x33f5x5,
                    timeAxisViewModel: this['timeAxisViewModel'],
                    eventBorderWidth: this['eventBorderWidth'],
                    timeAxis: this['timeAxis'],
                    readOnly: this['readOnly'],
                    mode: this['mode'],
                    rtl: this['rtl'],
                    cellBorderWidth: this['cellBorderWidth'],
                    cellTopBorderWidth: this['cellTopBorderWidth'],
                    cellBottomBorderWidth: this['cellBottomBorderWidth'],
                    infiniteScroll: this['infiniteScroll'],
                    bufferCoef: this['bufferCoef'],
                    bufferThreshold: this['bufferThreshold']
                });
                Ext.Array['each']([ 'eventRendererScope', 'eventRenderer', 'dndValidatorFn', 'resizeValidatorFn', 'createValidatorFn', 'tooltipTpl', 'validatorFnScope', 'eventResizeHandles', 'enableEventDragDrop', 'enableDragCreation', 'resizeConfig', 'createConfig', 'tipCfg', 'getDateConstraints' ], function(_0x33f5x8) {
                    if (_0x33f5x8 in this) {
                        _0x33f5x4[_0x33f5x8] = this[_0x33f5x8];
                    }
                }, this);
                this['callParent'](arguments);
                if (this['rtl']) {
                    this['lockedGrid']['view']['addCls']('sch-locked-column-fixer');
                    this['addCls']('sch-rtl');
                } else {
                    this['addCls']('sch-ltr');
                }
                var _0x33f5x2 = this['plugins'] = []['concat'](this['plugins'] || []);
                if (this['highlightWeekends']) {
                    this['workingTimePlugin'] = Ext.create('Ext.ux.Scheduler.plugin.NonWorkingTime', {
                        calendar: this['calendar']
                    });
                    _0x33f5x2['push'](this['workingTimePlugin']);
                    this['addCls']('sch-timelinepanel-highlightweekends');
                }
                if (this['showTodayLine']) {
                    this['todayLinePlugin'] = new Ext.ux.Scheduler.plugin.CurrentTimeLine();
                    _0x33f5x2['push'](this['todayLinePlugin']);
                }
                this['patchNavigationModel'](this);
                if (Ext['supports']['Touch']) {
                    this['timeAxisViewModel']['on']('update', this['refreshHeaderContainerScrollable'], this);
                }
                this['setViewPreset'](this['viewPreset'], this['startDate'] || this['timeAxis']['getStart'](), this['endDate'] || this['timeAxis']['getEnd'](), true);
                if (!this['startDate']) {
                    var _0x33f5x1 = this['getTimeSpanDefiningStore']();
                    if (_0x33f5x1['isTreeStore'] ? _0x33f5x1['getRoot']()['childNodes']['length'] : _0x33f5x1['getCount']()) {
                        this['applyStartEndDatesFromStore']();
                    } else {
                        if (_0x33f5x1['isLoading']() || this['forceDefineTimeSpanByStore']) {
                            this['bindAutoTimeSpanListeners']();
                        }
                    }
                }
                var _0x33f5x3 = this['columnLines'];
                if (_0x33f5x3) {
                    this['columnLinesFeature'] = new Ext.ux.Scheduler.feature.ColumnLines(Ext.isObject(_0x33f5x3) ? _0x33f5x3 : undefined);
                    this['columnLinesFeature']['init'](this);
                    this['columnLines'] = true;
                }
                this['relayEvents'](this['getSchedulingView'](), [ 'beforetooltipshow', 'scheduleclick', 'scheduledblclick', 'schedulecontextmenu', 'schedulepinch', 'schedulepinchstart', 'schedulepinchend' ]);
                this['on']('zoomchange', function() {
                    this['normalGrid']['scrollTask']['cancel']();
                });
                if (this['crudManager']) {
                    if (!this['crudManager']['autoSync'] && this['showCrudManagerMask']) {
                        this['mon'](this['crudManager'], {
                            beforesend: this['beforeCrudOperationStart'],
                            synccanceled: this['onCrudOperationComplete'],
                            loadcanceled: this['onCrudOperationComplete'],
                            load: this['onCrudOperationComplete'],
                            sync: this['onCrudOperationComplete'],
                            requestfail: this['onCrudOperationComplete'],
                            scope: this
                        });
                        if (this['crudManager']['isLoading']()) {
                            this['beforeCrudOperationStart'](this['crudManager'], null, 'load');
                        }
                    }
                    this['mon'](this['crudManager'], {
                        beforeloadapply: this['onCrudBeforeLoad'],
                        load: this['onCrudLoad'],
                        scope: this
                    });
                }
                this['afterInitComponent']();
            },
            refreshHeaderContainerScrollable: function() {
                var _0x33f5x1 = this['getSchedulingView']()['headerCt']['getScrollable']();
                if (!_0x33f5x1) {
                    return;
                }
                if (Ext['getVersion']()['isLessThan']('6.0.1')) {
                    var _0x33f5x2 = _0x33f5x1['isConfiguring'];
                    _0x33f5x1['isConfiguring'] = true;
                    _0x33f5x1['doRefresh']();
                    _0x33f5x1['refreshAxes']();
                    _0x33f5x1['isConfiguring'] = _0x33f5x2;
                } else {
                    _0x33f5x1['doRefresh']();
                }
            },
            getState: function() {
                var _0x33f5x2 = this, _0x33f5x1 = _0x33f5x2['callParent'](arguments);
                Ext.apply(_0x33f5x1, {
                    viewPreset: _0x33f5x2['viewPreset'],
                    startDate: _0x33f5x2['getStart'](),
                    endDate: _0x33f5x2['getEnd'](),
                    zoomMinLevel: _0x33f5x2['zoomMinLevel'],
                    zoomMaxLevel: _0x33f5x2['zoomMaxLevel'],
                    currentZoomLevel: _0x33f5x2['currentZoomLevel']
                });
                return _0x33f5x1;
            },
            applyState: function(_0x33f5x1) {
                var _0x33f5x2 = this;
                _0x33f5x2['callParent'](arguments);
                if (_0x33f5x1 && _0x33f5x1['viewPreset']) {
                    _0x33f5x2['setViewPreset'](_0x33f5x1['viewPreset'], _0x33f5x1['startDate'], _0x33f5x1['endDate']);
                }
                if (_0x33f5x1 && _0x33f5x1['currentZoomLevel']) {
                    _0x33f5x2['zoomToLevel'](_0x33f5x1['currentZoomLevel']);
                }
            },
            setTimeSpan: function() {
                this['callParent'](arguments);
                if (this['waitingForAutoTimeSpan']) {
                    this['unbindAutoTimeSpanListeners'](false);
                    this['getView']()['refresh']();
                }
                if (!this['normalGrid']['getView']()['viewReady']) {
                    this['getView']()['refresh']();
                }
            },
            onBoxReady: function() {
                var _0x33f5x2 = this;
                _0x33f5x2['callParent'](arguments);
                if (_0x33f5x2['partnerTimelinePanel']) {
                    if (_0x33f5x2['partnerTimelinePanel']['rendered']) {
                        _0x33f5x2['setupPartnerTimelinePanel'](_0x33f5x2['partnerTimelinePanel']);
                    } else {
                        _0x33f5x2['partnerTimelinePanel']['on']('boxready', _0x33f5x2['setupPartnerTimelinePanel'], _0x33f5x2);
                    }
                }
                _0x33f5x2['normalGrid']['on']({
                    collapse: _0x33f5x2['onNormalGridCollapse'],
                    expand: _0x33f5x2['onNormalGridExpand'],
                    scope: _0x33f5x2
                });
                _0x33f5x2['lockedGrid']['on']({
                    collapse: _0x33f5x2['onLockedGridCollapse'],
                    expand: _0x33f5x2['onLockedGridExpand'],
                    scope: _0x33f5x2
                });
                _0x33f5x2['lockedGrid']['on']({
                    itemdblclick: _0x33f5x2['onLockedGridItemDblClick'],
                    scope: _0x33f5x2
                });
                if (Ext['supports']['Touch']) {
                    this['getSchedulingView']()['on']({
                        schedulepinchstart: this['onSchedulePinchStart'],
                        schedulepinch: this['onSchedulePinch'],
                        schedulepinchend: this['onSchedulePinchEnd'],
                        scope: this
                    });
                }
            }
        };
    },
    scrollToDate: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = this['getSchedulingView']();
        if (_0x33f5x2['isCalendar']()) {
            var _0x33f5x4 = _0x33f5x2['calendar']['getColumnsBy'](function(_0x33f5x5) {
                return _0x33f5x5['start'] <= _0x33f5x3 && _0x33f5x5['end'] > _0x33f5x3;
            })[0];
            if (_0x33f5x4) {
                _0x33f5x2['scrollHorizontallyTo'](_0x33f5x4['getLocalX']());
                _0x33f5x2['scrollVerticallyTo'](_0x33f5x2['getCoordinateFromDate'](_0x33f5x3, true));
            }
        } else {
            return this['callParent'](arguments);
        }
    },
    scrollToDateCentered: function(_0x33f5x5, _0x33f5x4) {
        var _0x33f5x3 = this['getSchedulingView']();
        if (_0x33f5x3['isCalendar']()) {
            var _0x33f5x8 = _0x33f5x3['calendar']['getColumnsBy'](function(_0x33f5x9) {
                return _0x33f5x9['start'] <= _0x33f5x5 && _0x33f5x9['end'] > _0x33f5x5;
            })[0];
            if (_0x33f5x8) {
                var _0x33f5x1 = _0x33f5x3['getBox']()['width'] / 2;
                var _0x33f5x2 = _0x33f5x3['getBox']()['height'] / 2;
                _0x33f5x3['scrollHorizontallyTo'](Math['max'](_0x33f5x8['getLocalX']() - _0x33f5x1, 0));
                _0x33f5x3['scrollVerticallyTo'](Math['max'](_0x33f5x3['getCoordinateFromDate'](_0x33f5x5, true) - _0x33f5x2, 0));
            }
        } else {
            return this['callParent'](arguments);
        }
    },
    bindAutoTimeSpanListeners: function() {
        var _0x33f5x2 = this['getTimeSpanDefiningStore']();
        this['waitingForAutoTimeSpan'] = true;
        this['suspendViewsRefresh']();
        this['mon'](_0x33f5x2, 'load', this['applyStartEndDatesFromStore'], this);
        if (_0x33f5x2['isTreeStore']) {
            this['mon'](_0x33f5x2, 'rootchange', this['applyStartEndDatesFromStore'], this);
            this['mon'](_0x33f5x2, 'nodeappend', this['applyStartEndDatesAfterTreeAppend'], this);
        } else {
            this['mon'](_0x33f5x2, 'add', this['applyStartEndDatesFromStore'], this);
        }
    },
    refreshStopper: function(_0x33f5x2) {
        this['viewRefreshRequested'] = this['viewRefreshRequested'] || {};
        this['viewRefreshRequested'][_0x33f5x2['isLockedView'] ? 'locked' : 'normal'] = true;
        return false;
    },
    suspendViewsRefresh: function() {
        var _0x33f5x2 = this['normalGrid']['view'];
        var _0x33f5x1 = this['lockedGrid']['view'];
        _0x33f5x2['on']('beforerefresh', this['refreshStopper'], this);
        _0x33f5x1['on']('beforerefresh', this['refreshStopper'], this);
        _0x33f5x2['blockRefresh'] = true;
        _0x33f5x1['blockRefresh'] = true;
    },
    resumeViewsRefresh: function(_0x33f5x1) {
        _0x33f5x1 = _0x33f5x1 !== false;
        var _0x33f5x3 = this['normalGrid']['view'];
        var _0x33f5x4 = this['lockedGrid']['view'];
        _0x33f5x3['un']('beforerefresh', this['refreshStopper'], this);
        _0x33f5x4['un']('beforerefresh', this['refreshStopper'], this);
        _0x33f5x3['blockRefresh'] = false;
        _0x33f5x4['blockRefresh'] = false;
        var _0x33f5x2 = this['viewRefreshRequested'] || {};
        _0x33f5x2['locked'] = _0x33f5x2['locked'] || _0x33f5x4['refreshNeeded'];
        _0x33f5x2['normal'] = _0x33f5x2['normal'] || _0x33f5x3['refreshNeeded'];
        if (_0x33f5x1) {
            if (_0x33f5x2['locked'] && _0x33f5x2['normal']) {
                Ext['suspendLayouts']();
                this['getView']()['relayFn']('refreshView');
                Ext['resumeLayouts'](true);
            } else {
                if (_0x33f5x2['locked']) {
                    _0x33f5x4['refreshView']();
                } else {
                    if (_0x33f5x2['normal']) {
                        _0x33f5x3['refreshView']();
                    }
                }
            }
        }
        this['viewRefreshRequested'] = null;
    },
    getTimeSpanDefiningStore: function() {
        throw 'Abstract method called';
    },
    unbindAutoTimeSpanListeners: function(_0x33f5x1) {
        this['waitingForAutoTimeSpan'] = false;
        var _0x33f5x2 = this['getTimeSpanDefiningStore']();
        this['resumeViewsRefresh'](_0x33f5x1);
        _0x33f5x2['un']('load', this['applyStartEndDatesFromStore'], this);
        if (_0x33f5x2['isTreeStore']) {
            _0x33f5x2['un']('rootchange', this['applyStartEndDatesFromStore'], this);
            _0x33f5x2['un']('nodeappend', this['applyStartEndDatesAfterTreeAppend'], this);
        } else {
            _0x33f5x2['un']('add', this['applyStartEndDatesFromStore'], this);
        }
    },
    applyStartEndDatesAfterTreeAppend: function() {
        var _0x33f5x2 = this['getTimeSpanDefiningStore']();
        if (!_0x33f5x2['isSettingRoot'] && !_0x33f5x2['__loading']) {
            this['applyStartEndDatesFromStore']();
        }
    },
    applyStartEndDatesFromStore: function() {
        var _0x33f5x2 = this['getTimeSpanDefiningStore']();
        var _0x33f5x1 = _0x33f5x2['getTotalTimeSpan']();
        if (_0x33f5x1['end'] && _0x33f5x1['start'] && _0x33f5x1['end'] - _0x33f5x1['start'] === 0) {
            _0x33f5x1['start'] = Ext.ux.Scheduler.util.Date.add(_0x33f5x1['start'], this['timeAxis']['mainUnit'], -1);
            _0x33f5x1['end'] = Ext.ux.Scheduler.util.Date.add(_0x33f5x1['end'], this['timeAxis']['mainUnit'], 1);
        }
        this['setTimeSpan'](_0x33f5x1['start'] || new Date(), _0x33f5x1['end']);
    },
    onLockedGridItemDblClick: function(_0x33f5x1, _0x33f5x2, _0x33f5x3, _0x33f5x5, _0x33f5x4) {
        if (this['mode'] === 'vertical' && _0x33f5x2) {
            this['fireEvent']('timeheaderdblclick', this, _0x33f5x2['get']('start'), _0x33f5x2['get']('end'), _0x33f5x5, _0x33f5x4);
        }
    },
    getSchedulingView: function() {
        return this['normalGrid'] && this['normalGrid']['view'];
    },
    getHorizontalTimeAxisColumn: function() {
        return this['getSchedulingView']()['getHorizontalTimeAxisColumn']();
    },
    configureColumns: function() {
        var _0x33f5x2 = this['columns'] || [];
        if (_0x33f5x2['items']) {
            _0x33f5x2 = _0x33f5x2['items']['slice']();
        } else {
            _0x33f5x2 = this['columns'] = _0x33f5x2['slice']();
        }
        var _0x33f5x3 = [];
        var _0x33f5x1 = [];
        Ext.Array['each'](_0x33f5x2, function(_0x33f5x4) {
            if (_0x33f5x4['position'] === 'right' || _0x33f5x4['locked'] === false) {
                if (!Ext['isNumber'](_0x33f5x4['width'])) {
                    Ext['Error']['raise']('"Right" columns must have a fixed width');
                }
                _0x33f5x4['locked'] = false;
                _0x33f5x1['push'](_0x33f5x4);
            } else {
                _0x33f5x4['locked'] = true;
                _0x33f5x3['push'](_0x33f5x4);
            }
            _0x33f5x4['lockable'] = false;
        });
        if (_0x33f5x2['length'] === 0) {
            this['split'] = false;
        }
        Ext.Array['erase'](_0x33f5x2, 0, _0x33f5x2['length']);
        Ext.Array['insert'](_0x33f5x2, 0, _0x33f5x3['concat'](Ext.Array['findBy'](_0x33f5x1, function(_0x33f5x4) {
            return _0x33f5x4['xtype'] === 'timeaxiscolumn';
        }) ? [] : {
            xtype: 'timeaxiscolumn',
            timeAxisViewModel: this['timeAxisViewModel'],
            trackHeaderOver: this['trackHeaderOver'],
            renderer: this['mainRenderer'],
            variableRowHeight: this['variableRowHeight'],
            scope: this
        })['concat'](_0x33f5x1));
        this['horizontalColumns'] = _0x33f5x2['slice']();
        this['verticalColumns'] = this['verticalColumns'] || [ Ext.apply({
            xtype: 'verticaltimeaxis'
        }, this['timeAxisColumnCfg'] || {}) ];
        Ext.Array['each'](this['verticalColumns'], function(_0x33f5x4) {
            Ext.apply(_0x33f5x4, {
                timeAxis: this['timeAxis'],
                timeAxisViewModel: this['timeAxisViewModel'],
                cellTopBorderWidth: this['cellTopBorderWidth'],
                cellBottomBorderWidth: this['cellBottomBorderWidth']
            });
        }, this);
        this['calendarColumns'] = [ Ext.apply({
            xtype: 'verticaltimeaxis',
            width: 60,
            timeAxis: this['timeAxis'],
            timeAxisViewModel: this['timeAxisViewModel'],
            cellTopBorderWidth: this['cellTopBorderWidth'],
            cellBottomBorderWidth: this['cellBottomBorderWidth']
        }, this['calendarTimeAxisCfg'] || {}) ];
        if (this['mode'] === 'vertical') {
            this['columns'] = this['verticalColumns']['concat'](this['createResourceColumns'](this['resourceColumnWidth'] || this['timeAxisViewModel']['resourceColumnWidth']));
            this['store'] = this['timeAxis'];
        } else {
            if (this['mode'] === 'calendar') {
                this['columns'] = [];
                this['store'] = null;
                this['on']('afterrender', this['refreshCalendarColumns'], this);
            }
        }
    },
    mainRenderer: function(_0x33f5x1, _0x33f5x11, _0x33f5x9, _0x33f5xe, _0x33f5xb) {
        var _0x33f5x3 = this['renderers'], _0x33f5x4 = this['mode'] === 'horizontal' || this['mode'] === 'calendar' ? _0x33f5x9 : this['getResourceStore']()['getAt'](_0x33f5xb), _0x33f5x2 = '&nbsp;';
        _0x33f5x11['rowHeight'] = null;
        for (var _0x33f5x5 = 0; _0x33f5x5 < _0x33f5x3['length']; _0x33f5x5++) {
            _0x33f5x2 += _0x33f5x3[_0x33f5x5]['fn']['call'](_0x33f5x3[_0x33f5x5]['scope'] || this, _0x33f5x1, _0x33f5x11, _0x33f5x4, _0x33f5xe, _0x33f5xb) || '';
        }
        if (this['variableRowHeight']) {
            var _0x33f5x7 = this['getSchedulingView']();
            var _0x33f5x8 = this['getRowHeight']();
            _0x33f5x11['style'] = 'height:' + ((_0x33f5x11['rowHeight'] || _0x33f5x8) - _0x33f5x7['cellTopBorderWidth'] - _0x33f5x7['cellBottomBorderWidth']) + 'px';
        }
        return _0x33f5x2;
    },
    onNormalGridCollapse: function() {
        var _0x33f5x2 = this;
        if (!_0x33f5x2['normalGrid']['reExpander']) {
            _0x33f5x2['normalGrid']['reExpander'] = _0x33f5x2['normalGrid']['placeholder'];
        }
        if (!_0x33f5x2['lockedGrid']['rendered']) {
            _0x33f5x2['lockedGrid']['on']('render', _0x33f5x2['onNormalGridCollapse'], _0x33f5x2, {
                delay: 1
            });
        } else {
            _0x33f5x2['lockedGrid']['savedWidth'] = _0x33f5x2['lockedGrid']['getWidth']();
            if (_0x33f5x2['lockedGrid']['collapsed']) {
                _0x33f5x2['lockedGrid']['expand']();
            }
            _0x33f5x2['lockedGrid']['setWidth'](_0x33f5x2['getWidth']() - _0x33f5x2['normalGrid']['getPlaceholder']()['getWidth']());
            _0x33f5x2['addCls']('sch-normalgrid-collapsed');
        }
    },
    onNormalGridExpand: function() {
        this['removeCls']('sch-normalgrid-collapsed');
    },
    onLockedGridCollapse: function() {
        var _0x33f5x2 = this;
        if (_0x33f5x2['normalGrid']['collapsed']) {
            _0x33f5x2['normalGrid']['expand']();
        }
    },
    onLockedGridExpand: function() {
        if (this['lockedGrid']['savedWidth']) {
            this['lockedGrid']['setWidth'](this['lockedGrid']['savedWidth']);
        }
    },
    beforeCrudOperationStart: function(_0x33f5x2, _0x33f5x3, _0x33f5x1) {
        if (this['rendered']) {
            this['setLoading']({
                msg: _0x33f5x1 === 'load' ? this.L('loadingText') : this.L('savingText')
            });
        } else {
            Ext.destroy(this['renderWaitListener']);
            this['renderWaitListener'] = this['on']('render', Ext.Function.bind(this['beforeCrudOperationStart'], this, Array['prototype']['slice']['apply'](arguments)), this, {
                delay: 1,
                destroyable: true
            });
        }
    },
    onCrudBeforeLoad: function() {
        this['suspendViewsRefresh']();
    },
    onCrudLoad: function() {
        this['resumeViewsRefresh']();
    },
    onCrudOperationComplete: function() {
        Ext.destroy(this['renderWaitListener']);
        this['setLoading'](false);
    },
    onSchedulePinchStart: function(_0x33f5x2, _0x33f5x1) {
        this['undefined'] = Math['abs'](_0x33f5x1['touches'][0]['pageX'] - _0x33f5x1['touches'][1]['pageX']);
        this['pinchStartDistanceY'] = Math['abs'](_0x33f5x1['touches'][0]['pageY'] - _0x33f5x1['touches'][1]['pageY']);
    },
    onSchedulePinch: function(_0x33f5x2, _0x33f5x1) {
        this['pinchDistanceX'] = Math['abs'](_0x33f5x1['touches'][0]['pageX'] - _0x33f5x1['touches'][1]['pageX']);
        this['pinchDistanceY'] = Math['abs'](_0x33f5x1['touches'][0]['pageY'] - _0x33f5x1['touches'][1]['pageY']);
    },
    onSchedulePinchEnd: function(_0x33f5x2) {
        var _0x33f5x5 = this['pinchDistanceX'];
        var _0x33f5x4 = this['pinchDistanceY'];
        var _0x33f5x8 = this['getMode']()[0] === 'h';
        if (Math['abs'](_0x33f5x5 - this['undefined']) > this['schedulePinchThreshold']) {
            var _0x33f5x3 = Math['abs'](_0x33f5x5 / this['undefined']);
            if (_0x33f5x8) {
                _0x33f5x3 > 1 ? this['zoomIn']() : this['zoomOut']();
            } else {
                this['timeAxisViewModel']['setViewColumnWidth'](_0x33f5x3 * this['timeAxisViewModel']['resourceColumnWidth']);
            }
        }
        if (Math['abs'](_0x33f5x4 - this['pinchStartDistanceY']) > this['schedulePinchThreshold']) {
            var _0x33f5x1 = Math['abs'](_0x33f5x4 / this['pinchStartDistanceY']);
            _0x33f5x2['setRowHeight'](_0x33f5x2['getRowHeight']() * _0x33f5x1);
        }
        this['undefined'] = this['pinchStartDistanceY'] = this['pinchDistanceX'] = this['pinchDistanceY'] = null;
    },
    patchNavigationModel: function(_0x33f5x3) {
        _0x33f5x3['getView']()['getNavigationModel']()['focusItem'] = function(_0x33f5x4) {
            _0x33f5x4['addCls'](this['focusCls']);
            if ((Ext['isIE'] || Ext['isEdge']) && !_0x33f5x4['hasCls']('sch-timetd') || !(Ext['isIE'] || Ext['isEdge']) && _0x33f5x3['getOrientation']() === 'horizontal') {
                _0x33f5x4['focus']();
            }
        };
        var _0x33f5x1 = _0x33f5x3['lockedGrid']['getView']();
        var _0x33f5x2 = _0x33f5x3['normalGrid']['getView']();
        _0x33f5x1['on']('rowclick', function(_0x33f5x5, _0x33f5x4, _0x33f5x8, _0x33f5x9) {
            if (_0x33f5x2['lastFocused']) {
                _0x33f5x2['lastFocused']['rowIdx'] = _0x33f5x9;
                _0x33f5x2['lastFocused']['record'] = _0x33f5x4;
            } else {
                if (Ext['isIE']) {
                    _0x33f5x2['lastFocused'] = this['lastFocused'];
                }
            }
        });
        _0x33f5x2['on']('rowclick', function(_0x33f5x5, _0x33f5x4, _0x33f5x8, _0x33f5x9) {
            if (_0x33f5x1['lastFocused']) {
                _0x33f5x1['lastFocused']['rowIdx'] = _0x33f5x9;
                _0x33f5x1['lastFocused']['record'] = _0x33f5x4;
            } else {
                if (Ext['isIE']) {
                    _0x33f5x1['lastFocused'] = this['lastFocused'];
                }
            }
        });
    },
    configureChildGrids: function() {
        var _0x33f5x2 = this;
        _0x33f5x2['lockedGridConfig'] = Ext.apply({}, _0x33f5x2['lockedGridConfig'] || {});
        _0x33f5x2['normalGridConfig'] = Ext.apply({}, _0x33f5x2['schedulerConfig'] || _0x33f5x2['normalGridConfig'] || {});
        var _0x33f5x3 = _0x33f5x2['lockedGridConfig'], _0x33f5x1 = _0x33f5x2['normalGridConfig'];
        if (_0x33f5x2['lockedXType']) {
            _0x33f5x3['xtype'] = _0x33f5x2['lockedXType'];
        }
        if (_0x33f5x2['normalXType']) {
            _0x33f5x1['xtype'] = _0x33f5x2['normalXType'];
        }
        Ext.applyIf(_0x33f5x3, {
            useArrows: true,
            animCollapse: false,
            collapseDirection: 'left',
            trackMouseOver: false
        });
        Ext.applyIf(_0x33f5x1, {
            viewType: _0x33f5x2['viewType'],
            enableColumnMove: false,
            enableColumnResize: false,
            enableColumnHide: false,
            trackMouseOver: false,
            collapseDirection: 'right',
            collapseMode: 'placeholder',
            animCollapse: false
        });
        if (_0x33f5x2['mode'] === 'vertical') {
            _0x33f5x3['store'] = _0x33f5x1['store'] = _0x33f5x2['timeAxis'];
        }
        if (_0x33f5x3['width']) {
            _0x33f5x2['syncLockedWidth'] = Ext.emptyFn;
            _0x33f5x3['scroll'] = Ext['supports']['Touch'] ? 'both' : 'horizontal';
            _0x33f5x3['scrollerOwner'] = true;
        }
    },
    afterInitComponent: function() {
        var _0x33f5x4 = this;
        var _0x33f5x3 = _0x33f5x4['lockedGrid']['getView']();
        var _0x33f5x1 = _0x33f5x4['normalGrid']['getView']();
        var _0x33f5x2 = Ext.data.TreeStore && _0x33f5x4['store'] instanceof Ext.data.TreeStore;
        if (_0x33f5x4['normalGrid']['collapsed']) {
            _0x33f5x4['normalGrid']['collapsed'] = false;
            _0x33f5x1['on']('boxready', function() {
                _0x33f5x4['normalGrid']['collapse']();
            }, _0x33f5x4, {
                delay: 10
            });
        }
        if (_0x33f5x4['lockedGrid']['collapsed']) {
            _0x33f5x4['lockedGrid']['collapsed'] = false;
            _0x33f5x3['on']('boxready', function() {
                _0x33f5x4['lockedGrid']['collapse']();
            }, _0x33f5x4, {
                delay: 10
            });
            if (_0x33f5x3['bufferedRenderer']) {
                _0x33f5x3['bufferedRenderer']['disabled'] = true;
            }
        }
        if (Ext['getScrollbarSize']()['width'] === 0) {
            _0x33f5x3['addCls']('sch-ganttpanel-force-locked-scroll');
        }
        if (_0x33f5x2) {
            this['setupLockableFilterableTree']();
        }
        this['on']('afterrender', function() {
            var _0x33f5x8 = this['lockedGrid']['headerCt']['showMenuBy'];
            this['lockedGrid']['headerCt']['showMenuBy'] = function() {
                _0x33f5x8['apply'](this, arguments);
                _0x33f5x4['showMenuBy']['apply'](this, arguments);
            };
        });
        var _0x33f5x5 = this['child']('splitter');
        if (_0x33f5x5) {
            _0x33f5x5['addCls']('sch-timelinepanel-splitter');
        }
    },
    setupLockableFilterableTree: function() {
        var _0x33f5x3 = this;
        var _0x33f5x1 = _0x33f5x3['lockedGrid']['getView']();
        var _0x33f5x2 = Ext.ux.Scheduler.mixin.FilterableTreeView.prototype;
        _0x33f5x1['initTreeFiltering'] = _0x33f5x2['initTreeFiltering'];
        _0x33f5x1['onFilterChangeStart'] = _0x33f5x2['onFilterChangeStart'];
        _0x33f5x1['onFilterChangeEnd'] = _0x33f5x2['onFilterChangeEnd'];
        _0x33f5x1['onFilterCleared'] = _0x33f5x2['onFilterCleared'];
        _0x33f5x1['onFilterSet'] = _0x33f5x2['onFilterSet'];
        _0x33f5x1['initTreeFiltering']();
    },
    showMenuBy: function(_0x33f5x1, _0x33f5x8) {
        var _0x33f5x5 = this['getMenu'](), _0x33f5x3 = _0x33f5x5['down']('#unlockItem'), _0x33f5x4 = _0x33f5x5['down']('#lockItem'), _0x33f5x2 = _0x33f5x3['prev']();
        _0x33f5x2['hide']();
        _0x33f5x3['hide']();
        _0x33f5x4['hide']();
    },
    zoomToFit: function(_0x33f5x2) {
        _0x33f5x2 = Ext.apply({
            adjustStart: 1,
            adjustEnd: 1
        }, _0x33f5x2);
        var _0x33f5x1 = this['getEventStore']();
        var _0x33f5x3 = this['getEventStore']()['getTotalTimeSpan']();
        if (this['zoomToSpan'](_0x33f5x3, _0x33f5x2) === null) {
            this['getSchedulingView']()['fitColumns']();
        }
    },
    refreshViews: function(_0x33f5x1) {
        if (!this['rendered']) {
            return;
        }
        var _0x33f5x5 = false;
        var _0x33f5x3 = function() {
            _0x33f5x5 = true;
        };
        var _0x33f5x8 = this['normalGrid']['getView']();
        var _0x33f5x4 = this['lockedGrid']['getView'](), _0x33f5x2 = {
            left: _0x33f5x4['getScrollX'](),
            top: _0x33f5x4['getScrollY']()
        };
        _0x33f5x8['on']('refresh', _0x33f5x3);
        _0x33f5x4['refreshView']();
        _0x33f5x8['un']('refresh', _0x33f5x3);
        if (_0x33f5x1 !== false) {
            !_0x33f5x5 && this['getSchedulingView']()['refreshKeepingScroll']();
            _0x33f5x4['setScrollX'](_0x33f5x2['left']);
            _0x33f5x4['setScrollY'](_0x33f5x2['top']);
        } else {
            if (!_0x33f5x5) {
                this['getSchedulingView']()['refreshView']();
            }
        }
    }
}, function() {
    var _0x33f5x2 = '6.0.0';
    Ext.apply(Ext.ux.Scheduler, {
        VERSION: '4.2.3'
    });
    if (Ext['versions']['extjs']['isLessThan'](_0x33f5x2)) {
        var _0x33f5x1 = console;
        _0x33f5x1 && _0x33f5x1['log']('The Ext JS version you are using needs to be updated to at least ' + _0x33f5x2);
    }
});

Ext.define('Ext.ux.Scheduler.panel.TimelineGridPanel', {
    extend: Ext['grid']['Panel'],
    mixins: [ Ext.ux.Scheduler.mixin.Localizable, Ext.ux.Scheduler.mixin.TimelinePanel ],
    alias: [ 'widget.timelinegrid' ],
    subGridXType: 'gridpanel',
    isTimelineGridPanel: true,
    initComponent: function() {
        this['callParent'](arguments);
        this['getSchedulingView']()._initializeTimelineView();
    }
}, function() {
    this['override'](Ext.ux.Scheduler.mixin.TimelinePanel['prototype']['inheritables']() || {});
});

Ext.define('Ext.ux.Scheduler.view.dependency.Mixin', {
    extend: Ext.Mixin,
    mixinConfig: {
        after: {
            initComponent: 'initComponent',
            destroy: 'destroy'
        }
    },
    dependencyViewConfig: null,
    dependencyView: null,
    dependencyViewRelayDetacher: null,
    initComponent: function() {
        var _0x33f5x2 = this;
        _0x33f5x2['on']('viewready', function() {
            _0x33f5x2['setupDependencyView'](_0x33f5x2['getDependencyViewConfig'](), _0x33f5x2['getSchedulingView']());
        });
    },
    getDependencyViewConfig: function() {
        return this['dependencyViewConfig'];
    },
    setDependencyViewConfig: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        if (_0x33f5x1['dependencyViewConfig'] !== _0x33f5x2) {
            _0x33f5x1['dependencyViewConfig'] = _0x33f5x2;
            if (_0x33f5x1['dependencyView']) {
                if (_0x33f5x2 && 'type' in _0x33f5x2 && _0x33f5x2['type'] !== _0x33f5x1['dependencyView']['type']) {
                    _0x33f5x1['setupDependencyView'](_0x33f5x2, _0x33f5x1['getSchedulingView']());
                } else {
                    _0x33f5x1['dependencyView']['setConfig'](_0x33f5x2);
                }
            }
        }
    },
    hasDependencyView: function() {
        return !!this['dependencyView'];
    },
    getDependencyView: function() {
        return this['dependencyView'];
    },
    createDependencyView: function(_0x33f5x2, _0x33f5x1) {
        return Ext.ux.Scheduler.view.dependency.View.create(Ext.applyIf({
            primaryView: _0x33f5x1
        }, _0x33f5x2));
    },
    destroy: function() {
        Ext.destroyMembers(this, 'dependencyViewRelayDetacher', 'dependencyView');
    },
    setupDependencyView: function(_0x33f5x2, _0x33f5x3) {
        var _0x33f5x1 = this;
        Ext.destroy(_0x33f5x1['dependencyView']);
        _0x33f5x1['dependencyView'] = _0x33f5x1['createDependencyView'](_0x33f5x2, _0x33f5x3);
        _0x33f5x1['setupDependencyViewRelay']();
        _0x33f5x1['fireEvent']('dependencyviewready', _0x33f5x1, _0x33f5x1['dependencyView']);
        if (_0x33f5x1['dependencyView']['canDrawDependencies']()) {
            _0x33f5x1['dependencyView']['scheduleAllDependenciesRendering']();
        }
    },
    setupDependencyViewRelay: function() {
        var _0x33f5x2 = this;
        Ext.destroy(_0x33f5x2['dependencyViewRelayDetacher']);
        _0x33f5x2['dependencyViewRelayDetacher'] = _0x33f5x2['relayEvents'](_0x33f5x2['getDependencyView'](), [ 'dependencyclick', 'dependencydblclick', 'dependencycontextmenu', 'dependencymouseover', 'dependencymouseout' ]);
    }
});

Ext.define('Ext.ux.Scheduler.panel.SchedulerGrid', {
    extend: Ext.ux.Scheduler.panel.TimelineGridPanel,
    mixins: [ Ext.ux.Scheduler.mixin.SchedulerPanel, Ext.ux.Scheduler.view.dependency.Mixin ],
    alias: [ 'widget.schedulergrid', 'widget.schedulerpanel' ],
    alternateClassName: 'Ext.ux.Scheduler.SchedulerPanel',
    viewType: 'schedulergridview',
    initComponent: function() {
        this['callParent'](arguments);
        this['getSchedulingView']()._initializeSchedulerView();
    }
}, function() {
    this['override'](Ext.ux.Scheduler.mixin.SchedulerPanel['prototype']['inheritables']() || {});
});

Ext.define('Ext.ux.Scheduler.patches.TreeNavigationModel', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.tree.NavigationModel',
    minVersion: '6.0.0',
    maxVersion: '6.0.2',
    overrides: {
        onAsterisk: function() {
            if (!this['view']['ownerCt']['expandAll']) {
                this['view']['lockingPartner']['ownerCt']['expandAll']();
                return;
            }
            this['callParent'](arguments);
        }
    }
});

Ext.define('Ext.ux.Scheduler.panel.TimelineTreePanel', {
    extend: Ext.tree.Panel,
    mixins: [ Ext.ux.Scheduler.mixin.Localizable, Ext.ux.Scheduler.mixin.TimelinePanel ],
    alias: [ 'widget.timelinetree' ],
    useArrows: true,
    rootVisible: false,
    lockedXType: 'treepanel',
    isTimelineTreePanel: true,
    initComponent: function() {
        this['callParent'](arguments);
        this['getSchedulingView']()._initializeTimelineView();
    }
}, function() {
    this['override'](Ext.ux.Scheduler.mixin.TimelinePanel['prototype']['inheritables']() || {});
});

Ext.define('Ext.ux.Scheduler.panel.SchedulerTree', {
    extend: Ext.ux.Scheduler.panel.TimelineTreePanel,
    mixins: [ Ext.ux.Scheduler.mixin.SchedulerPanel, Ext.ux.Scheduler.view.dependency.Mixin ],
    alias: [ 'widget.schedulertree' ],
    viewType: 'schedulergridview',
    setOrientation: function() {
        return this['setMode']['apply'](this, arguments);
    },
    setMode: function(_0x33f5x2) {
        if (_0x33f5x2 !== 'horizontal') {
            Ext['Error']['raise']('Ext.ux.Scheduler.panel.SchedulerTree only support horizontal mode');
        }
    },
    initComponent: function() {
        this['callParent'](arguments);
        this['getSchedulingView']()._initializeSchedulerView();
    }
}, function() {
    this['override'](Ext.ux.Scheduler.mixin.SchedulerPanel['prototype']['inheritables']() || {});
});

Ext.define('Ext.ux.Scheduler.patches.CellEditing', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.grid.plugin.CellEditing',
    maxVersion: '6.0.2',
    overrides: {
        activateCell: function(_0x33f5x2) {
            var _0x33f5x3 = this['callParent'](arguments);
            if (!!_0x33f5x3) {
                var _0x33f5x1 = this['getEditor'](_0x33f5x2['record'], _0x33f5x2['column']);
                if (_0x33f5x1) {
                    _0x33f5x1['el']['skipGarbageCollection'] = true;
                    _0x33f5x1['el']['select']('*')['each'](function(_0x33f5x4) {
                        Ext.get(_0x33f5x4)['skipGarbageCollection'] = true;
                    });
                }
            }
            return _0x33f5x3;
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.CellEditor', {
    extend: Ext.ux.Scheduler.util.Patch,
    target: 'Ext.grid.CellEditor',
    minVersion: '6.0.2',
    overrides: {
        onEditComplete: function(_0x33f5x1, _0x33f5x2) {
            var _0x33f5x4 = this, _0x33f5x3 = Ext['Element']['getActiveElement']();
            _0x33f5x4['editing'] = false;
            _0x33f5x4['boundEl'] = _0x33f5x4['context']['getCell']();
            if (_0x33f5x4['boundEl']) {
                _0x33f5x4['restoreCell']();
                if (_0x33f5x4['boundEl']['contains'](_0x33f5x3) && _0x33f5x4['boundEl']['dom'] !== _0x33f5x3) {
                    _0x33f5x4['boundEl']['focus']();
                }
            }
            if (!_0x33f5x1) {
                _0x33f5x4['cacheElement']();
            }
            _0x33f5x4['superclass']['onEditComplete']['apply'](_0x33f5x4, arguments);
            if (_0x33f5x2) {
                _0x33f5x4['editingPlugin']['cancelEdit'](_0x33f5x4);
            } else {
                _0x33f5x4['editingPlugin']['onEditComplete'](_0x33f5x4, _0x33f5x4['getValue'](), _0x33f5x4['startValue']);
            }
        }
    }
});

Ext.define('Ext.ux.Scheduler.patches.Element', {
    extend: Ext.ux.Scheduler.util.Patch,
    applyFn: function() {
       Ext.override(Ext.dom.Element, {
            pxRe: /^-?\d+(?:\.\d*)?px$/i,
            getLocalX: function() {
                var _0x33f5x3 = this, _0x33f5x1, _0x33f5x2 = _0x33f5x3['getStyle']('left');
                if (!_0x33f5x2 || _0x33f5x2 === 'auto') {
                    _0x33f5x2 = 0;
                } else {
                    if (this['pxRe']['test'](_0x33f5x2)) {
                        _0x33f5x2 = parseFloat(_0x33f5x2);
                    } else {
                        _0x33f5x2 = _0x33f5x3['getX']();
                        _0x33f5x1 = _0x33f5x3['dom']['offsetParent'];
                        if (_0x33f5x1) {
                            _0x33f5x2 -= Ext.fly(_0x33f5x1)['getX']();
                        }
                    }
                }
                return _0x33f5x2;
            }
        });
    }
});

Ext.define('Ext.ux.Scheduler.plugin.CellPlugin', {
    extend: Ext.AbstractPlugin,
    alias: 'plugin.scheduler_cellplugin',
    mixins: {
        observable: Ext.util['Observable']
    },
    frameCls: 'sch-cellplugin-highlighter',
    frameTemplate: new Ext.Template([ '<div class="{cls} active" style="width: {width}px; height: {height}px;">', '<div class="sch-cellplugin-border sch-cellplugin-border-horizontal sch-cellplugin-border-top"></div>', '<div class="sch-cellplugin-border sch-cellplugin-border-horizontal sch-cellplugin-border-bottom"></div>', '<div class="sch-cellplugin-border sch-cellplugin-border-vertical sch-cellplugin-border-left"></div>', '<div class="sch-cellplugin-border sch-cellplugin-border-vertical sch-cellplugin-border-right"></div>', '</div>' ]),
    editor: 'Ext.ux.Scheduler.field.CellEditor',
    singleClickEditing: true,
    dblClickTimeout: 100,
    editing: false,
    context: {},
    selContext: [],
    tickIndex: null,
    resource: null,
    startDate: null,
    eventIndexInCell: -1,
    eventRecord: null,
    lockedView: null,
    schedulingView: null,
    timeAxisViewModel: null,
    keyNav: null,
    constructor: function(_0x33f5x2) {
        this['context'] = {};
        this['mixins']['observable']['constructor']['call'](this);
        this['callParent'](arguments);
    },
    init: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['schedulingView'] = _0x33f5x2['getSchedulingView']();
        _0x33f5x1['lockedView'] = _0x33f5x2['lockedGrid']['getView']();
        _0x33f5x2['getNavigationModel']()['disable']();
        _0x33f5x1['timeAxisViewModel'] = _0x33f5x2['timeAxisViewModel'];
        _0x33f5x1['keyNav'] = new Ext.util.KeyNav({
            target: _0x33f5x1['lockedView'],
            eventName: 'itemkeydown',
            processEvent: function(_0x33f5x4, _0x33f5x3, _0x33f5x9, _0x33f5x5, _0x33f5x8) {
                return _0x33f5x8;
            },
            ignoreInputFields: true,
            up: _0x33f5x1['onKeyUp'],
            down: _0x33f5x1['onKeyDown'],
            right: _0x33f5x1['onKeyRight'],
            left: _0x33f5x1['onKeyLeft'],
            tab: _0x33f5x1['onKeyTab'],
            enter: _0x33f5x1['onKeyEnter'],
            esc: _0x33f5x1['onKeyEsc'],
            scope: _0x33f5x1
        });
        if (_0x33f5x1['schedulingView']['bufferedRenderer']) {
            _0x33f5x1['schedulingView']['on']('afterrender', function() {
                _0x33f5x1['schedulingView']['getScrollable']()['on']('scroll', _0x33f5x1['onViewScroll'], _0x33f5x1);
            }, _0x33f5x1, {
                single: true
            });
            _0x33f5x1['schedulingView']['on']('itemadd', _0x33f5x1['onItemAdd'], _0x33f5x1);
        }
        _0x33f5x1['handleSingleClickTask'] = new Ext.util.DelayedTask(_0x33f5x1['handleCellClick'], _0x33f5x1);
        _0x33f5x2['on']({
            headerclick: _0x33f5x1['onContainerClick'],
            zoomchange: _0x33f5x1['destroyHighlighter'],
            scope: _0x33f5x1
        });
        _0x33f5x1['schedulingView']['on']({
            containerclick: _0x33f5x1['onContainerClick'],
            scheduleclick: _0x33f5x1['onCellClick'],
            scheduledblclick: _0x33f5x1['onCellDblClick'],
            eventclick: _0x33f5x1['onEventClick'],
            eventdblclick: _0x33f5x1['onEventDblClick'],
            containerkeydown: _0x33f5x1['onEditorKeyDown'],
            groupcollapse: _0x33f5x1['onGroupCollapse'],
            groupexpand: _0x33f5x1['onGroupExpand'],
            scope: _0x33f5x1
        });
        _0x33f5x1['mon'](_0x33f5x1['timeAxisViewModel'], {
            update: _0x33f5x1['onViewModelUpdate'],
            scope: _0x33f5x1
        });
        _0x33f5x1['mon'](_0x33f5x2['getTimeAxis'](), {
            beforereconfigure: _0x33f5x1['onBeforeReconfigure'],
            scope: _0x33f5x1
        });
        _0x33f5x1['bindResourceStore'](_0x33f5x2['getResourceStore']());
        _0x33f5x1['bindEventStore'](_0x33f5x2['getEventStore']());
        _0x33f5x1['lockedView']['on']({
            cellclick: _0x33f5x1['onLockedCellClick'],
            beforeitemkeydown: _0x33f5x1['onBeforeItemKeyDown'],
            scope: _0x33f5x1
        });
        _0x33f5x2['on']('eventstorechange', function(_0x33f5x3, _0x33f5x4, _0x33f5x5) {
            _0x33f5x1['bindEventStore'](_0x33f5x5, true);
            _0x33f5x1['bindEventStore'](_0x33f5x4);
        });
        _0x33f5x2['on']('resourcestorechange', function(_0x33f5x3, _0x33f5x4, _0x33f5x5) {
            _0x33f5x1['bindResourceStore'](_0x33f5x5, true);
            _0x33f5x1['bindResourceStore'](_0x33f5x4);
        });
    },
    getNbrOfTicks: function() {
        return this['schedulingView']['timeAxis']['getCount']();
    },
    onEditorKeyDown: function(_0x33f5x2, _0x33f5x1) {
        switch (_0x33f5x1['getKey']()) {
          case _0x33f5x1['TAB']:
            _0x33f5x1['preventDefault']();
            if (_0x33f5x1['shiftKey']) {
                this['moveLeft'](_0x33f5x1);
            } else {
                this['moveRight'](_0x33f5x1);
            }
            ;
            break;

          case _0x33f5x1['ENTER']:
            this['onEditorKeyEnter']();
            break;

          case _0x33f5x1['ESC']:
            this['cancelEdit'](_0x33f5x1);
            break;

          default:
            break;
        }
    },
    onEditorKeyEnter: function() {
        if (this['completeEdit']()) {
            this['beginEditBelow']();
        } else {
            this['showEditorInCell'](this['getEventOrCell'](this['context'], true));
        }
    },
    destroy: function() {
        this['keyNav']['destroy']();
        this['editor'] && this['editor']['destroy'] && this['editor']['destroy']();
        this['destroyHighlighter']();
        this['callParent'](arguments);
    },
    destroyHighlighter: function() {
        var _0x33f5x2 = this;
        _0x33f5x2['clearSelection']();
        _0x33f5x2['containerEl'] && _0x33f5x2['containerEl']['destroy']();
        delete _0x33f5x2['containerEl'];
        delete _0x33f5x2['startDate'];
        delete _0x33f5x2['resource'];
        delete _0x33f5x2['resourceIndex'];
        delete _0x33f5x2['eventRecord'];
        delete _0x33f5x2['tickIndex'];
    },
    onGroupCollapse: function() {
        var _0x33f5x2 = this;
        if (_0x33f5x2['getResourceIndex']() === -1) {
            _0x33f5x2['destroyHighlighter']();
        } else {
            _0x33f5x2['refreshCell']();
        }
    },
    onGroupExpand: function() {
        this['refreshCell']();
    },
    onViewScroll: function() {
        var _0x33f5x1 = this;
        if (_0x33f5x1['containerEl']) {
            var _0x33f5x2 = _0x33f5x1['schedulingView']['getNodeByRecord'](_0x33f5x1['resource']);
            if (_0x33f5x2) {
                _0x33f5x1['containerEl']['setY'](Ext.fly(_0x33f5x2)['getY']() - 1);
            }
        }
    },
    onItemAdd: function() {
        var _0x33f5x1 = this;
        if (!_0x33f5x1['resource']) {
            return;
        }
        var _0x33f5x2 = _0x33f5x1['schedulingView']['getNodeByRecord'](_0x33f5x1['resource']);
        if (_0x33f5x2) {
            _0x33f5x1['containerEl']['show']();
        } else {
            _0x33f5x1['containerEl']['hide']();
        }
    },
    getResourceIndex: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x1 = _0x33f5x1 || _0x33f5x2['resource'];
        return _0x33f5x2['schedulingView']['dataSource']['data']['indexOf'](_0x33f5x1);
    },
    getResource: function(_0x33f5x2) {
        return this['schedulingView']['dataSource']['getAt'](_0x33f5x2);
    },
    onResourceAdd: function(_0x33f5x1, _0x33f5x2) {
        this['refreshCell']();
    },
    onResourceRemove: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this;
        if (_0x33f5x1['getCount']() === 0 || Ext.Array.indexOf(_0x33f5x2, _0x33f5x3['resource']) !== -1) {
            _0x33f5x3['destroyHighlighter']();
        }
        _0x33f5x3['refreshCell']();
    },
    onBeforeReconfigure: function(_0x33f5x2) {
        if (!this['startDate'] && Ext['isNumber'](this['tickIndex'])) {
            this['startDate'] = _0x33f5x2['getAt'](this['tickIndex'])['getStartDate']();
        }
    },
    onLockedCellClick: function(_0x33f5x3, _0x33f5x7, _0x33f5x1, _0x33f5x2, _0x33f5x4, _0x33f5x9, _0x33f5x8) {
        this['showEditorInCell']({
            tickIndex: this['tickIndex'] || 0,
            resourceIndex: _0x33f5x9,
            eventIndexInCell: 0
        }, _0x33f5x8);
    },
    onBeforeItemKeyDown: function(_0x33f5x4, _0x33f5x2, _0x33f5x3, _0x33f5x1, _0x33f5x8) {
        if (!_0x33f5x8['isSpecialKey']()) {
            this['beginEdit']();
        }
    },
    onViewModelUpdate: function(_0x33f5x4) {
        var _0x33f5x1 = this, _0x33f5x3 = _0x33f5x4['timeAxis'];
        if (_0x33f5x1['startDate']) {
            var _0x33f5x2 = _0x33f5x3['getTickFromDate'](_0x33f5x1['startDate']);
            if (_0x33f5x2 >= 0) {
                delete _0x33f5x1['startDate'];
                _0x33f5x1['tickIndex'] = _0x33f5x2;
                if (!_0x33f5x1['containerEl']) {
                    _0x33f5x1['renderElement']();
                }
                _0x33f5x1['refreshCell']();
            } else {
                _0x33f5x1['containerEl']['destroy']();
                delete _0x33f5x1['containerEl'];
                _0x33f5x1['clearSelection']();
            }
        } else {
            _0x33f5x1['refreshCell']();
        }
    },
    refreshCell: function() {
        var _0x33f5x1 = this;
        var _0x33f5x2 = _0x33f5x1['timeAxisViewModel']['getTickWidth']();
        if (_0x33f5x1['containerEl']) {
            _0x33f5x1['containerEl']['setWidth'](_0x33f5x2);
            _0x33f5x1['containerEl']['setLeft'](_0x33f5x2);
            _0x33f5x1['showEditorInCell']({
                tickIndex: _0x33f5x1['tickIndex'],
                resourceIndex: _0x33f5x1['getResourceIndex']()
            });
        }
        if (_0x33f5x1['editor'] instanceof Ext.form['field']['Base']) {
            _0x33f5x1['editor']['setMaxWidth'](_0x33f5x2);
        }
    },
    clearSelection: function() {
        var _0x33f5x2 = this;
        if (_0x33f5x2['schedulingView']['rendered']) {
            _0x33f5x2['schedulingView']['getSecondaryCanvasEl']()['select']('.' + _0x33f5x2['frameCls'] + '.clone')['remove']();
        }
        _0x33f5x2['selContext'] = [];
    },
    addSelection: function() {
        var _0x33f5x2 = this;
        var _0x33f5x1 = _0x33f5x2['frameTemplate']['apply']({
            cls: _0x33f5x2['frameCls'],
            width: _0x33f5x2['containerEl']['getWidth'](),
            height: _0x33f5x2['containerEl']['getHeight']()
        });
        _0x33f5x1 = Ext.get(Ext['DomHelper']['append'](_0x33f5x2['containerEl']['parent'](), _0x33f5x1));
        _0x33f5x1['setStyle']('top', _0x33f5x2['containerEl']['getStyle']('top'));
        _0x33f5x1['setStyle']('left', _0x33f5x2['containerEl']['getStyle']('left'));
        _0x33f5x1['removeCls']('active');
        _0x33f5x1['addCls']('clone');
        _0x33f5x2['selContext']['push'](Ext.apply({}, _0x33f5x2['context']));
    },
    applyVisibilityMode: function(_0x33f5x2) {
        _0x33f5x2['setVisibilityMode'](Ext.dom['Element'].OFFSETS);
    },
    renderElement: function() {
        var _0x33f5x5 = this;
        var _0x33f5x4 = _0x33f5x5['timeAxisViewModel']['getTickWidth']();
        var _0x33f5x2 = _0x33f5x5['timeAxisViewModel']['getViewRowHeight']();
        var _0x33f5x3 = _0x33f5x5['frameTemplate']['apply']({
            cls: _0x33f5x5['frameCls'],
            width: _0x33f5x4,
            height: _0x33f5x2
        });
        _0x33f5x5['containerEl'] = Ext.get(Ext['DomHelper']['append'](_0x33f5x5['schedulingView']['getSecondaryCanvasEl'](), _0x33f5x3));
        _0x33f5x5['applyVisibilityMode'](_0x33f5x5['containerEl']);
        var _0x33f5x1 = {
            height: _0x33f5x2,
            maxHeight: _0x33f5x2,
            width: _0x33f5x4,
            maxWidth: _0x33f5x4,
            listeners: {
                render: function(_0x33f5x8) {
                    _0x33f5x5['applyVisibilityMode'](_0x33f5x8['el']);
                }
            },
            renderTo: _0x33f5x5['containerEl']
        };
        if (Ext.isObject(_0x33f5x5['editor']) && !(_0x33f5x5['editor'] instanceof Ext['Base'])) {
            _0x33f5x5['editor'] = Ext.create(Ext.apply(_0x33f5x1, _0x33f5x5['editor'], {
                xclass: 'Ext.ux.Scheduler.field.CellEditor'
            }));
        } else {
            if (typeof _0x33f5x5['editor'] === 'string') {
                _0x33f5x5['editor'] = Ext.create(_0x33f5x5['editor'], _0x33f5x1);
            } else {
                _0x33f5x5['containerEl']['appendChild'](_0x33f5x5['editor']['el']);
                _0x33f5x5['applyVisibilityMode'](_0x33f5x5['editor']['el']);
            }
        }
        _0x33f5x5['editor']['inputEl']['setHeight'](_0x33f5x2 - 3);
    },
    onContainerClick: function() {
        var _0x33f5x2 = this;
        if (_0x33f5x2['lockedView']['getSelectionModel']()['getSelection']()['length'] > 0) {
            if (_0x33f5x2['editor']['isVisible'] && _0x33f5x2['editor']['isVisible']()) {
                _0x33f5x2['lockedView']['getFocusEl']()['focus']();
            }
        }
    },
    onCellClick: function() {
        this['handleSingleClickTask']['delay'](this['dblClickTimeout'], null, null, arguments);
    },
    handleCellClick: function(_0x33f5x2, _0x33f5x3, _0x33f5x7, _0x33f5x8, _0x33f5x9) {
        var _0x33f5x4 = this;
        var _0x33f5x1 = Math['floor'](_0x33f5x4['schedulingView']['timeAxis']['getTickFromDate'](_0x33f5x3));
        if (_0x33f5x4['fireEvent']('cellclick', _0x33f5x4, _0x33f5x1, _0x33f5x7) !== false) {
            _0x33f5x4['showEditorInCell']({
                tickIndex: _0x33f5x1,
                resourceIndex: _0x33f5x7
            }, _0x33f5x9);
            if (_0x33f5x4['singleClickEditing']) {
                _0x33f5x4['beginEdit']();
            }
        }
    },
    onCellDblClick: function(_0x33f5x2, _0x33f5x1, _0x33f5x8, _0x33f5x3, _0x33f5x4) {
        this['handleSingleClickTask']['cancel']();
        this['handleCellDblClick'](_0x33f5x2, _0x33f5x1, _0x33f5x8, _0x33f5x3, _0x33f5x4);
    },
    handleCellDblClick: function(_0x33f5x2, _0x33f5x3, _0x33f5x7, _0x33f5x8, _0x33f5x9) {
        var _0x33f5x4 = this;
        var _0x33f5x1 = Math['floor'](_0x33f5x4['schedulingView']['timeAxis']['getTickFromDate'](_0x33f5x3));
        if (_0x33f5x4['fireEvent']('celldblclick', _0x33f5x4, _0x33f5x1, _0x33f5x7) !== false) {
            _0x33f5x4['showEditorInCell']({
                tickIndex: _0x33f5x1,
                resourceIndex: _0x33f5x7
            }, _0x33f5x9);
            _0x33f5x4['beginEdit']();
        }
    },
    onEventClick: function(_0x33f5x1, _0x33f5x2, _0x33f5x9) {
        var _0x33f5x8 = this;
        var _0x33f5x4 = _0x33f5x8['schedulingView']['getDateFromDomEvent'](_0x33f5x9);
        var _0x33f5x3 = Math['floor'](_0x33f5x8['schedulingView']['timeAxis']['getTickFromDate'](_0x33f5x4));
        var _0x33f5x7 = _0x33f5x8['schedulingView']['dataSource']['data']['indexOf'](_0x33f5x2['getResource']());
        _0x33f5x8['showEditorInCell']({
            tickIndex: _0x33f5x3,
            resourceIndex: _0x33f5x7,
            eventRecord: _0x33f5x2
        }, _0x33f5x9);
    },
    onEventDblClick: function(_0x33f5x1, _0x33f5x2, _0x33f5x9) {
        var _0x33f5x8 = this;
        var _0x33f5x4 = _0x33f5x8['schedulingView']['getDateFromDomEvent'](_0x33f5x9);
        var _0x33f5x3 = Math['floor'](_0x33f5x8['schedulingView']['timeAxis']['getTickFromDate'](_0x33f5x4));
        var _0x33f5x7 = _0x33f5x8['schedulingView']['dataSource']['data']['indexOf'](_0x33f5x2['getResource']());
        _0x33f5x8['showEditorInCell']({
            tickIndex: _0x33f5x3,
            resourceIndex: _0x33f5x7,
            eventRecord: _0x33f5x2
        }, _0x33f5x9);
        _0x33f5x8['beginEdit']();
    },
    showEditorInCell: function(_0x33f5x4, _0x33f5x7) {
        var _0x33f5xf = this;
        var _0x33f5x1 = 'tickIndex' in _0x33f5x4 ? _0x33f5x4['tickIndex'] : _0x33f5xf['tickIndex'];
        var _0x33f5xe = 'resourceIndex' in _0x33f5x4 ? _0x33f5x4['resourceIndex'] : _0x33f5xf['resourceIndex'];
        if (_0x33f5x1 === -1 || _0x33f5xe === -1) {
            return;
        }
        var _0x33f5x8 = _0x33f5xf['schedulingView']['timeAxis']['getAt'](_0x33f5x1);
        var _0x33f5x2 = _0x33f5x8['getStartDate']();
        var _0x33f5x9 = _0x33f5x8['getEndDate']();
        var _0x33f5x3 = _0x33f5xf['schedulingView']['dataSource']['getAt'](_0x33f5xe);
        if (_0x33f5x7 && _0x33f5x7['type'] === 'click' && !_0x33f5x4['eventRecord']) {
            _0x33f5x4['eventRecord'] = _0x33f5xf['getCellEvents']({
                startDate: _0x33f5x2,
                endDate: _0x33f5x9,
                resource: _0x33f5x3
            })['getAt'](0);
        }
        if (_0x33f5xf['fireEvent']('beforeselect', _0x33f5xf, _0x33f5x3, _0x33f5x2, _0x33f5x9, _0x33f5x4['eventRecord']) === false) {
            return;
        }
        _0x33f5xf['onBeforeSelect'](_0x33f5x7);
        if (!_0x33f5xf['containerEl']) {
            _0x33f5xf['renderElement']();
        } else {
            if (_0x33f5x7 && _0x33f5x7['ctrlKey']) {
                _0x33f5xf['addSelection']();
            } else {
                _0x33f5xf['clearSelection']();
            }
        }
        Ext.apply(_0x33f5xf['context'], {
            startDate: _0x33f5x2,
            endDate: _0x33f5x9,
            resource: _0x33f5x3
        });
        if (_0x33f5x4['eventRecord']) {
            _0x33f5xf['context']['eventRecord'] = _0x33f5x4['eventRecord'];
        } else {
            delete _0x33f5xf['context']['eventRecord'];
        }
        _0x33f5xf['tickIndex'] = _0x33f5x1;
        _0x33f5xf['resource'] = _0x33f5x3;
        _0x33f5xf['resourceIndex'] = _0x33f5xe;
        _0x33f5xf['eventIndexInCell'] = _0x33f5x4['eventIndexInCell'];
        if (_0x33f5x4['eventRecord']) {
            _0x33f5xf['alignEditorWithRecord'](_0x33f5x4['eventRecord'], _0x33f5x4['resource']);
        } else {
            _0x33f5xf['alignEditorWithCell']();
        }
        _0x33f5xf['onAfterSelect'](_0x33f5x7);
        _0x33f5xf['fireEvent']('select', _0x33f5xf, _0x33f5x3, _0x33f5x2, _0x33f5x9);
        _0x33f5xf['fireEvent']('selectionchange', _0x33f5xf, _0x33f5xf['getSelection']());
    },
    alignEditorWithRecord: function(_0x33f5x2, _0x33f5x5) {
        var _0x33f5x4 = this;
        var _0x33f5x1 = _0x33f5x4['schedulingView']['getElementsFromEventRecord'](_0x33f5x2, _0x33f5x5), _0x33f5x3 = _0x33f5x1[0]['getBox']();
        _0x33f5x3['y']--;
        _0x33f5x3['x']--;
        _0x33f5x4['alignEditor'](_0x33f5x3);
    },
    alignEditorWithCell: function() {
        var _0x33f5x1 = this;
        var _0x33f5x2 = Ext.get(_0x33f5x1['schedulingView']['getRowByRecord'](_0x33f5x1['resource']));
        _0x33f5x2 && _0x33f5x1['alignEditor']({
            left: _0x33f5x1['timeAxisViewModel']['getTickWidth']() * _0x33f5x1['tickIndex'],
            y: _0x33f5x2['getTop']() - 1,
            height: _0x33f5x2['getHeight'](),
            width: _0x33f5x1['timeAxisViewModel']['getTickWidth']()
        });
    },
    alignEditor: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x2['containerEl']['setY'](_0x33f5x1['y']);
        if ('x' in _0x33f5x1) {
            _0x33f5x2['containerEl']['setX'](_0x33f5x1['x']);
        } else {
            _0x33f5x2['containerEl']['setLeft'](_0x33f5x1['left']);
        }
        _0x33f5x2['containerEl']['setWidth'](_0x33f5x1['width']);
        _0x33f5x2['containerEl']['setHeight'](_0x33f5x1['height']);
        if (Ext['isIE9m']) {
            _0x33f5x2['containerEl']['setHeight'](_0x33f5x1['height'] + 1);
            _0x33f5x2['containerEl']['setStyle']('padding-top', 1);
            _0x33f5x2['containerEl']['select']('.sch-cellplugin-border-top')['setStyle']('top', 1);
            _0x33f5x2['containerEl']['select']('.sch-cellplugin-border-vertical')['setHeight'](_0x33f5x1['height']);
            _0x33f5x2['containerEl']['select']('.sch-cellplugin-border-horizontal')['setWidth'](_0x33f5x1['width']);
        }
        _0x33f5x2['containerEl']['show']();
    },
    getSelection: function() {
        return this['selContext']['concat'](this['context']);
    },
    getEventRecord: function(_0x33f5x2) {
        return _0x33f5x2['eventRecord'];
    },
    getResourceRecord: function(_0x33f5x2) {
        return _0x33f5x2['resource'];
    },
    onKeyUp: function(_0x33f5x2) {
        this['moveUp'](_0x33f5x2);
    },
    onKeyDown: function(_0x33f5x2) {
        this['moveDown'](_0x33f5x2);
    },
    onKeyLeft: function(_0x33f5x2) {
        this['moveLeft'](_0x33f5x2);
    },
    onKeyRight: function(_0x33f5x2) {
        this['moveRight'](_0x33f5x2);
    },
    onKeyTab: function(_0x33f5x2) {
        if (_0x33f5x2['shiftKey']) {
            this['moveLeft'](_0x33f5x2);
        } else {
            this['moveRight'](_0x33f5x2);
        }
    },
    onKeyEnter: function() {
        this['beginEdit']();
    },
    onKeyEsc: function() {
        this['destroyHighlighter']();
    },
    findPreviousIndex: function() {
        var _0x33f5x1 = this;
        var _0x33f5x2 = _0x33f5x1['schedulingView']['walkRecs'](_0x33f5x1['resource'], -1);
        if (_0x33f5x2 !== _0x33f5x1['resource']) {
            return _0x33f5x1['getResourceIndex'](_0x33f5x2);
        } else {
            return -1;
        }
    },
    findNextIndex: function() {
        var _0x33f5x1 = this;
        var _0x33f5x2 = _0x33f5x1['schedulingView']['walkRecs'](_0x33f5x1['resource'], 1);
        if (_0x33f5x2 !== _0x33f5x1['resource']) {
            return _0x33f5x1['getResourceIndex'](_0x33f5x2);
        } else {
            return -1;
        }
    },
    getCellEvents: function(_0x33f5x1) {
        var _0x33f5x3 = this;
        _0x33f5x1 = _0x33f5x1 || _0x33f5x3['context'];
        if (_0x33f5x1['resourceIndex'] === -1 || _0x33f5x1['tickIndex'] === -1) {
            return new Ext.util.MixedCollection();
        }
        var _0x33f5x2 = _0x33f5x3['schedulingView']['getEventStore']()['queryBy'](function(_0x33f5x4) {
            return _0x33f5x4['getResourceId']() === _0x33f5x1['resource']['getId']() && _0x33f5x4['getStartDate']() >= _0x33f5x1['startDate'] && _0x33f5x4['getStartDate']() < _0x33f5x1['endDate'];
        });
        _0x33f5x2['sortBy'](function(_0x33f5x8, _0x33f5x5) {
            var _0x33f5x9 = _0x33f5x3['schedulingView']['getElementsFromEventRecord'](_0x33f5x8, _0x33f5x1['resource'])[0], _0x33f5x4 = _0x33f5x3['schedulingView']['getElementsFromEventRecord'](_0x33f5x5, _0x33f5x1['resource'])[0];
            return _0x33f5x9['getY']() < _0x33f5x4['getY']() ? -1 : 1;
        });
        return _0x33f5x2;
    },
    getAbove: function(_0x33f5x3) {
        var _0x33f5x4 = this, _0x33f5x2;
        _0x33f5x3 = _0x33f5x3 || _0x33f5x4['context'];
        if (_0x33f5x3['eventRecord'] && _0x33f5x4['eventIndexInCell'] == null) {
            _0x33f5x4['eventIndexInCell'] = _0x33f5x4['getCellEvents'](_0x33f5x3)['indexOf'](_0x33f5x3['eventRecord']);
        }
        if (_0x33f5x4['eventIndexInCell'] > 0) {
            _0x33f5x2 = _0x33f5x4['eventIndexInCell'] - 1;
            return {
                eventIndexInCell: _0x33f5x2,
                eventRecord: _0x33f5x4['getCellEvents'](_0x33f5x3)['getAt'](_0x33f5x2)
            };
        }
        var _0x33f5x1 = _0x33f5x4['findPreviousIndex']();
        if (_0x33f5x1 === -1) {
            return {
                resourceIndex: -1
            };
        }
        return _0x33f5x4['getEventOrCell'](Ext.applyIf({
            resourceIndex: _0x33f5x1
        }, _0x33f5x3), true);
    },
    getBelow: function(_0x33f5x4) {
        var _0x33f5x5 = this;
        _0x33f5x4 = _0x33f5x4 || _0x33f5x5['context'];
        if (_0x33f5x4['eventRecord'] && _0x33f5x5['eventIndexInCell'] == null) {
            _0x33f5x5['eventIndexInCell'] = _0x33f5x5['getCellEvents'](_0x33f5x4)['indexOf'](_0x33f5x4['eventRecord']);
        }
        if (_0x33f5x5['eventIndexInCell'] >= 0) {
            var _0x33f5x3 = _0x33f5x5['getCellEvents'](_0x33f5x4);
            var _0x33f5x2 = _0x33f5x5['eventIndexInCell'] + 1;
            if (_0x33f5x3['getCount']() > _0x33f5x2) {
                return {
                    eventIndexInCell: _0x33f5x2,
                    eventRecord: _0x33f5x3['getAt'](_0x33f5x2)
                };
            }
        }
        var _0x33f5x1 = _0x33f5x5['findNextIndex']();
        if (_0x33f5x1 === -1) {
            return {
                resourceIndex: -1
            };
        }
        return _0x33f5x5['getEventOrCell'](Ext.applyIf({
            resourceIndex: _0x33f5x1
        }, _0x33f5x4));
    },
    getEventOrCell: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x9 = this, _0x33f5x8 = -1, _0x33f5x7 = null, _0x33f5x1 = _0x33f5x9['tickIndex'], _0x33f5x5 = _0x33f5x9['resourceIndex'];
        if ('tickIndex' in _0x33f5x3) {
            _0x33f5x1 = _0x33f5x3['tickIndex'];
            var _0x33f5x4 = _0x33f5x9['schedulingView']['timeAxis']['getAt'](_0x33f5x1);
            _0x33f5x3['startDate'] = _0x33f5x4['getStartDate']();
            _0x33f5x3['endDate'] = _0x33f5x4['getEndDate']();
        }
        if ('resourceIndex' in _0x33f5x3) {
            _0x33f5x5 = _0x33f5x3['resourceIndex'];
            _0x33f5x3['resource'] = _0x33f5x9['schedulingView']['dataSource']['getAt'](_0x33f5x5);
        }
        var _0x33f5xf = _0x33f5x9['getCellEvents'](_0x33f5x3);
        if (_0x33f5xf['getCount']()) {
            if (_0x33f5x2 === true) {
                _0x33f5x8 = _0x33f5xf['getCount']() - 1;
                _0x33f5x7 = _0x33f5xf['getAt'](_0x33f5x8);
            } else {
                _0x33f5x8 = 0;
                _0x33f5x7 = _0x33f5xf['getAt'](0);
            }
        }
        return {
            tickIndex: _0x33f5x1,
            resourceIndex: _0x33f5x5,
            eventIndexInCell: _0x33f5x8,
            eventRecord: _0x33f5x7
        };
    },
    getPrevious: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x2 = _0x33f5x2 || _0x33f5x1['context'];
        if (_0x33f5x1['tickIndex'] > 0) {
            return _0x33f5x1['getEventOrCell'](Ext.applyIf({
                tickIndex: _0x33f5x1['tickIndex'] - 1
            }, _0x33f5x2));
        } else {
            return _0x33f5x1['getEventOrCell'](Ext.applyIf({
                tickIndex: _0x33f5x1['getNbrOfTicks']() - 1,
                resourceIndex: _0x33f5x1['findPreviousIndex']()
            }, _0x33f5x2));
        }
    },
    getNext: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x2 = _0x33f5x2 || _0x33f5x1['context'];
        if (_0x33f5x1['tickIndex'] < _0x33f5x1['getNbrOfTicks']() - 1) {
            return _0x33f5x1['getEventOrCell'](Ext.applyIf({
                tickIndex: ++_0x33f5x1['tickIndex'],
                resourceIndex: _0x33f5x1['getResourceIndex']()
            }, _0x33f5x2));
        } else {
            return _0x33f5x1['getEventOrCell'](Ext.applyIf({
                tickIndex: 0,
                resourceIndex: _0x33f5x1['findNextIndex']()
            }, _0x33f5x2));
        }
    },
    moveUp: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        if (!_0x33f5x2['containerEl']) {
            return;
        }
        _0x33f5x2['showEditorInCell'](_0x33f5x2['getAbove'](), _0x33f5x1);
    },
    moveDown: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        if (!_0x33f5x2['containerEl']) {
            return;
        }
        _0x33f5x2['showEditorInCell'](_0x33f5x2['getBelow'](), _0x33f5x1);
    },
    moveLeft: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        if (!_0x33f5x2['containerEl']) {
            return;
        }
        _0x33f5x2['showEditorInCell'](_0x33f5x2['getPrevious'](), _0x33f5x1);
    },
    moveRight: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        if (!_0x33f5x2['containerEl']) {
            return;
        }
        _0x33f5x2['showEditorInCell'](_0x33f5x2['getNext'](), _0x33f5x1);
    },
    expandResourceRow: function(_0x33f5x4, _0x33f5x3, _0x33f5x2) {
        var _0x33f5x1 = this;
        Ext.fly(_0x33f5x4)['setHeight'](_0x33f5x3['height'] + _0x33f5x2);
        Ext.fly(_0x33f5x1['lockedView']['getNodeByRecord'](_0x33f5x1['context']['resource']))['setHeight'](_0x33f5x3['height'] + _0x33f5x2);
        _0x33f5x1['__oldHeight'] = _0x33f5x3['height'];
    },
    getNewBottomEditorCoordinate: function(_0x33f5x2) {
        var _0x33f5x5 = this;
        var _0x33f5x8 = _0x33f5x5['schedulingView']['getNodeByRecord'](_0x33f5x5['context']['resource']);
        var _0x33f5x4 = Ext.fly(_0x33f5x8)['getBox']();
        var _0x33f5x1 = _0x33f5x5['getCellEvents']()['last']();
        if (_0x33f5x1) {
            var _0x33f5x3 = _0x33f5x5['schedulingView']['getElementsFromEventRecord'](_0x33f5x1, _0x33f5x5['context']['resource'])[0]['getBox']();
            if (Math['abs'](_0x33f5x3['bottom'] - _0x33f5x4['bottom']) < _0x33f5x2 - 1) {
                _0x33f5x5['expandResourceRow'](_0x33f5x8, _0x33f5x4, _0x33f5x2);
                return _0x33f5x4['bottom'];
            } else {
                return _0x33f5x3['bottom'];
            }
        }
    },
    collapseResourceRow: function() {
        var _0x33f5x2 = this;
        if (_0x33f5x2['__oldHeight']) {
            Ext.fly(_0x33f5x2['schedulingView']['getNodeByRecord'](_0x33f5x2['context']['resource']))['setHeight'](_0x33f5x2.__oldHeight);
            Ext.fly(_0x33f5x2['lockedView']['getNodeByRecord'](_0x33f5x2['context']['resource']))['setHeight'](_0x33f5x2.__oldHeight);
            delete _0x33f5x2['__oldHeight'];
        }
    },
    beginEditBelow: function() {
        var _0x33f5x3 = this;
        if (!_0x33f5x3['containerEl']) {
            return;
        }
        delete _0x33f5x3['context']['eventRecord'];
        _0x33f5x3['beginEdit']();
        var _0x33f5x2 = _0x33f5x3['timeAxisViewModel']['getViewRowHeight']();
        var _0x33f5x1 = _0x33f5x3['getNewBottomEditorCoordinate'](_0x33f5x2);
        _0x33f5x3['alignEditor']({
            left: _0x33f5x3['timeAxisViewModel']['getTickWidth']() * _0x33f5x3['tickIndex'],
            y: _0x33f5x1,
            width: _0x33f5x3['timeAxisViewModel']['getTickWidth'](),
            height: _0x33f5x2
        });
    },
    beginEdit: function() {
        var _0x33f5x4 = this;
        if (!_0x33f5x4['containerEl']) {
            return;
        }
        if (_0x33f5x4['fireEvent']('beforecelledit', _0x33f5x4, _0x33f5x4['getSelection']()) === false) {
            return;
        }
        _0x33f5x4['editing'] = true;
        _0x33f5x4['editor']['startDate'] = _0x33f5x4['context']['startDate'];
        _0x33f5x4['editor']['bottomUnit'] = Ext.ux.Scheduler.util.Date['getSubUnit'](_0x33f5x4['timeAxisViewModel']['getBottomHeader']()['unit']);
        _0x33f5x4['containerEl']['select']('.sch-cellplugin-border')['hide']();
        _0x33f5x4['containerEl']['setStyle']('z-index', 1);
        var _0x33f5x3 = _0x33f5x4['getEventRecord'](_0x33f5x4['context']), _0x33f5x5 = _0x33f5x4['getResourceRecord'](_0x33f5x4['context']);
        if (_0x33f5x3) {
            var _0x33f5x1 = Ext.Date;
            var _0x33f5x9 = Ext.isArray(_0x33f5x4['editor']['dateFormat']) ? _0x33f5x4['editor']['dateFormat'][0] : _0x33f5x4['editor']['dateFormat'];
            var _0x33f5x2 = _0x33f5x1['format'](_0x33f5x3['getStartDate'](), _0x33f5x9);
            var _0x33f5x8 = _0x33f5x1['format'](_0x33f5x3['getEndDate'](), _0x33f5x9);
            _0x33f5x4['editor']['record'] = _0x33f5x3;
            _0x33f5x4['editor']['setValue']([ _0x33f5x2, _0x33f5x8 ]['join'](_0x33f5x4['editor']['divider']));
            _0x33f5x4['editor']['recordNode'] = _0x33f5x4['schedulingView']['getElementsFromEventRecord'](_0x33f5x3, _0x33f5x5)[0];
            Ext.fly(_0x33f5x4['editor']['recordNode'])['hide']();
        }
        _0x33f5x4['editor']['show']();
        _0x33f5x4['editor']['setWidth'](_0x33f5x4['editor']['getMaxWidth']());
        _0x33f5x4['editor']['focus']();
        _0x33f5x4['fireEvent']('begincelledit', _0x33f5x4, _0x33f5x4['getSelection']());
    },
    cancelEdit: function() {
        var _0x33f5x1 = this;
        var _0x33f5x3 = _0x33f5x1['editor']['getValue']();
        var _0x33f5x2 = _0x33f5x1['getSelection']();
        if (_0x33f5x1['fireEvent']('beforecancelcelledit', _0x33f5x1, _0x33f5x3, _0x33f5x2) === false) {
            return;
        }
        _0x33f5x1['stopEditing']();
        _0x33f5x1['fireEvent']('cancelcelledit', _0x33f5x1, _0x33f5x3, _0x33f5x2);
    },
    completeEdit: function() {
        var _0x33f5x9 = this, _0x33f5x3 = false;
        if (!_0x33f5x9['editing'] || !_0x33f5x9['containerEl']) {
            return;
        }
        var _0x33f5x7 = _0x33f5x9['editor']['getValue']();
        var _0x33f5xf = _0x33f5x9['getSelection']();
        if (_0x33f5x9['fireEvent']('beforecompletecelledit', _0x33f5x9, _0x33f5x7, _0x33f5xf) === false) {
            return;
        }
        if (_0x33f5x7 && _0x33f5x9['editor']['isValid']()) {
            var _0x33f5x4 = _0x33f5x9['editor']['record'];
            var _0x33f5x2 = _0x33f5x9['editor']['getDates'](_0x33f5x7);
            var _0x33f5x1 = _0x33f5x2[0];
            var _0x33f5x5 = _0x33f5x2[1];
            if (_0x33f5x4) {
                _0x33f5x4['setStartEndDate'](_0x33f5x1, _0x33f5x5);
                delete _0x33f5x9['editor']['record'];
            } else {
                var _0x33f5x8 = Ext.create(_0x33f5x9['schedulingView']['getEventStore']()['getModel'](), {
                    StartDate: _0x33f5x1,
                    EndDate: _0x33f5x5,
                    ResourceId: _0x33f5x9['context']['resource']['getId']()
                });
                _0x33f5x9['schedulingView']['onEventCreated'](_0x33f5x8);
                _0x33f5x9['schedulingView']['getEventStore']()['add'](_0x33f5x8);
            }
            _0x33f5x3 = true;
        }
        _0x33f5x9['stopEditing']();
        _0x33f5x9['fireEvent']('completecelledit', _0x33f5x9, _0x33f5x7, _0x33f5xf);
        return _0x33f5x3;
    },
    stopEditing: function() {
        var _0x33f5x1 = this;
        if (_0x33f5x1['editor']['recordNode']) {
            Ext.fly(_0x33f5x1['editor']['recordNode'])['show']();
            delete _0x33f5x1['editor']['recordNode'];
        }
        _0x33f5x1['collapseResourceRow']();
        _0x33f5x1['editor']['setValue']('');
        _0x33f5x1['editing'] = false;
        _0x33f5x1['clearSelection']();
        _0x33f5x1['containerEl']['select']('.sch-cellplugin-border')['show']();
        _0x33f5x1['containerEl']['setStyle']('z-index', 'auto');
        _0x33f5x1['editor']['hide']();
        var _0x33f5x2 = _0x33f5x1['lockedView']['getRow'](_0x33f5x1['resource']);
        _0x33f5x2 && Ext.fly(_0x33f5x2)['down'](_0x33f5x1['lockedView']['getCellSelector']())['focus']();
    },
    onBeforeSelect: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x1 && _0x33f5x1['isNavKeyPress'] && _0x33f5x1['isNavKeyPress']() && _0x33f5x2['clearSelection']();
        _0x33f5x2['restoreEditing'] = _0x33f5x2['editing'];
        _0x33f5x2['editing'] && _0x33f5x2['completeEdit']();
    },
    onAfterSelect: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x2['lockedView']['getSelectionModel']()['select'](_0x33f5x2['resource']);
        Ext.fly(_0x33f5x2['lockedView']['getRow'](_0x33f5x2['resource']))['down'](_0x33f5x2['lockedView']['getCellSelector']())['focus']();
        _0x33f5x2['editor']['setValue']('');
        if (_0x33f5x2['restoreEditing'] && (_0x33f5x1 === true || _0x33f5x1 && _0x33f5x1['isNavKeyPress']())) {
            _0x33f5x2['beginEdit']();
        }
        _0x33f5x2['restoreEditing'] = false;
        _0x33f5x2['containerEl']['scrollIntoView'](_0x33f5x2['schedulingView']['getEl']());
    },
    bindResourceStore: function(_0x33f5x1, _0x33f5x2) {
        if (_0x33f5x1) {
            var _0x33f5x3 = this;
            _0x33f5x3[_0x33f5x2 ? 'mun' : 'mon'](_0x33f5x1, {
                add: _0x33f5x3['onResourceAdd'],
                remove: _0x33f5x3['onResourceRemove'],
                clear: _0x33f5x3['destroyHighlighter'],
                scope: _0x33f5x3
            });
        }
    },
    bindEventStore: function(_0x33f5x1, _0x33f5x2) {
        if (_0x33f5x1) {
            var _0x33f5x3 = this;
            _0x33f5x3[_0x33f5x2 ? 'mun' : 'mon'](_0x33f5x1, {
                load: _0x33f5x3['destroyHighlighter'],
                scope: _0x33f5x3
            });
        }
    }
});

Ext.define('Ext.ux.Scheduler.plugin.CurrentTimeLine', {
    extend: Ext.ux.Scheduler.plugin.Lines,
    alias: 'plugin.scheduler_currenttimeline',
    mixins: [ Ext.ux.Scheduler.mixin.Localizable ],
    updateInterval: 6e4,
    showHeaderElements: true,
    autoUpdate: true,
    expandToFitView: true,
    timer: null,
    init: function(_0x33f5x3) {
        if (Ext['getVersion']('touch')) {
            this['showHeaderElements'] = false;
        }
        var _0x33f5x1 = new Ext.data.JsonStore({
            fields: [ 'Date', 'Cls', 'Text' ],
            data: [ {
                Date: new Date(),
                Cls: 'sch-todayLine',
                Text: this.L('tooltipText')
            } ]
        });
        var _0x33f5x2 = _0x33f5x1['first']();
        if (this['autoUpdate']) {
            this['timer'] = setInterval(function() {
                _0x33f5x2['set']('Date', new Date());
            }, this['updateInterval']);
        }
        this['store'] = _0x33f5x1;
        this['callParent'](arguments);
    },
    destroy: function() {
        if (this['timer']) {
            clearInterval(this['timer']);
            this['timer'] = null;
        }
        if (this['store']['autoDestroy']) {
            this['store']['destroy']();
        }
        this['callParent'](arguments);
    }
});

Ext.define('Ext.ux.Scheduler.plugin.DragSelector', {
    extend: Ext.ux.Scheduler.util.DragTracker,
    alias: 'plugin.scheduler_dragselector',
    mixins: [ Ext.AbstractPlugin ],
    lockableScope: 'top',
    schedulerView: null,
    eventData: null,
    sm: null,
    proxy: null,
    bodyRegion: null,
    constructor: function(_0x33f5x2) {
        _0x33f5x2 = _0x33f5x2 || {};
        Ext.applyIf(_0x33f5x2, {
            onBeforeStart: this['onBeforeStart'],
            onStart: this['onStart'],
            onDrag: this['onDrag'],
            onEnd: this['onEnd']
        });
        this['callParent'](arguments);
    },
    init: function(_0x33f5x1) {
        var _0x33f5x2 = this['schedulerView'] = _0x33f5x1['getSchedulingView']();
        _0x33f5x2['on']({
            afterrender: this['onSchedulingViewRender'],
            scope: this
        });
    },
    onBeforeStart: function(_0x33f5x2) {
        return !_0x33f5x2['getTarget']('.sch-event') && _0x33f5x2['ctrlKey'];
    },
    onStart: function(_0x33f5x3) {
        var _0x33f5x8 = this['schedulerView'];
        this['proxy']['show']();
        this['bodyRegion'] = _0x33f5x8['getScheduleRegion']();
        var _0x33f5x1 = _0x33f5x8['getScrollY']();
        var _0x33f5x4 = _0x33f5x8['getScrollX']();
        var _0x33f5x2 = [];
        _0x33f5x8['getEventNodes']()['each'](function(_0x33f5x5) {
            var _0x33f5x9 = _0x33f5x5['getRegion']();
            _0x33f5x9['top'] += _0x33f5x1;
            _0x33f5x9['bottom'] += _0x33f5x1;
            _0x33f5x9['left'] += _0x33f5x4;
            _0x33f5x9['right'] += _0x33f5x4;
            _0x33f5x2[_0x33f5x2['length']] = {
                region: _0x33f5x9,
                node: _0x33f5x5['dom']
            };
        });
        this['eventData'] = _0x33f5x2;
        this['sm']['deselectAll']();
        Ext.ux.Scheduler.util.ScrollManager.activate(_0x33f5x8);
        this['mon'](_0x33f5x8['getScrollable'](), 'scroll', this['updateSelection'], this);
    },
    onDrag: function() {
        var _0x33f5x2 = this['getRegion']()['constrainTo'](this['bodyRegion']);
        this['proxy']['setBox'](_0x33f5x2);
        this['updateSelection']();
    },
    updateSelection: function() {
        var _0x33f5x2 = this['sm'], _0x33f5x7 = this['eventData'], _0x33f5x9 = this['getRegion']()['constrainTo'](this['bodyRegion']), _0x33f5x1, _0x33f5x8, _0x33f5x4, _0x33f5x5;
        var _0x33f5xe = this['schedulerView']['getScrollY']();
        var _0x33f5x3 = this['schedulerView']['getScrollX']();
        for (_0x33f5x1 = 0, _0x33f5x4 = _0x33f5x7['length']; _0x33f5x1 < _0x33f5x4; _0x33f5x1++) {
            _0x33f5x8 = _0x33f5x7[_0x33f5x1];
            _0x33f5x9['top'] += _0x33f5xe;
            _0x33f5x9['bottom'] += _0x33f5xe;
            _0x33f5x9['left'] += _0x33f5x3;
            _0x33f5x9['right'] += _0x33f5x3;
            _0x33f5x5 = _0x33f5x9['intersect'](_0x33f5x8['region']);
            if (_0x33f5x5 && !_0x33f5x8['selected']) {
                _0x33f5x8['selected'] = true;
                _0x33f5x2['selectNode'](_0x33f5x8['node'], true);
            } else {
                if (!_0x33f5x5 && _0x33f5x8['selected']) {
                    _0x33f5x8['selected'] = false;
                    _0x33f5x2['deselectNode'](_0x33f5x8['node']);
                }
            }
        }
    },
    onEnd: function(_0x33f5x2) {
        if (this['proxy']) {
            this['proxy']['setDisplayed'](false);
        }
        this['mun'](this['schedulerView']['getScrollable'](), 'scroll', this['updateSelection'], this);
        Ext.ux.Scheduler.util.ScrollManager.deactivate();
    },
    onSchedulingViewRender: function(_0x33f5x2) {
        this['sm'] = _0x33f5x2['getEventSelectionModel']();
        this['initEl'](this['schedulerView']['el']);
        this['proxy'] = _0x33f5x2['el']['createChild']({
            cls: 'sch-drag-selector'
        });
    },
    destroy: function() {
        if (this['proxy']) {
            Ext.destroy(this['proxy']);
        }
        this['callParent'](arguments);
    }
});

Ext.define('Ext.ux.Scheduler.plugin.EventEditor', {
    extend: Ext.form['Panel'],
    mixins: [ Ext.AbstractPlugin, Ext.ux.Scheduler.mixin.Localizable ],
    alias: [ 'widget.eventeditor', 'plugin.scheduler_eventeditor' ],
    lockableScope: 'normal',
    hideOnBlur: true,
    saveAndCloseOnEnter: true,
    startDateField: null,
    startTimeField: null,
    durationField: null,
    timeConfig: null,
    dateConfig: null,
    durationConfig: null,
    durationUnit: null,
    durationText: null,
    triggerEvent: 'eventdblclick',
    fieldsPanelConfig: null,
    dateFormat: 'Y-m-d',
    timeFormat: 'H:i',
    cls: 'sch-eventeditor',
    border: false,
    shadow: false,
    dynamicForm: true,
    eventRecord: null,
    hidden: true,
    collapsed: true,
    currentForm: null,
    schedulerView: null,
    resourceRecord: null,
    preventHeader: true,
    floating: true,
    hideMode: 'offsets',
    ignoreCls: 'sch-event-editor-ignore-click',
    readOnly: false,
    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    dragProxyEl: null,
    constrain: false,
    constructor: function(_0x33f5x2) {
        _0x33f5x2 = _0x33f5x2 || {};
        Ext.apply(this, _0x33f5x2);
        this['durationUnit'] = this['durationUnit'] || Ext.ux.Scheduler.util.Date['HOUR'];
        this['callParent'](arguments);
    },
    init: function(_0x33f5x2) {
        this['ownerCt'] = _0x33f5x2;
        this['schedulerView'] = _0x33f5x2['getView']();
        this['schedulerView']['on']({
            afterrender: this['onSchedulerRender'],
            dragcreateend: this['onDragCreateEnd'],
            scope: this
        });
        this['schedulerView']['on']('eventrepaint', this['onEventRepaint'], this);
        if (this['triggerEvent']) {
            this['schedulerView']['on'](this['triggerEvent'], this['onActivateEditor'], this);
        }
        this['schedulerView']['registerEventEditor'](this);
    },
    initComponent: function() {
        if (!this['fieldsPanelConfig']) {
            throw 'Must define a fieldsPanelConfig property';
        }
        Ext.apply(this, {
            fbar: this['buttons'] || this['buildButtons'](),
            items: [ {
                xtype: 'container',
                layout: 'hbox',
                cls: 'sch-eventeditor-timefields',
                items: this['buildDurationFields']()
            }, Ext.applyIf(this['fieldsPanelConfig'], {
                flex: 1,
                activeItem: 0
            }) ]
        });
        this['callParent'](arguments);
    },
    afterRender: function() {
        this['callParent'](arguments);
        if (this['saveAndCloseOnEnter']) {
            this['el']['on']({
                keyup: function(_0x33f5x1, _0x33f5x2) {
                    if (_0x33f5x1['getKey']() === _0x33f5x1['ENTER'] && _0x33f5x2['tagName']['toLowerCase']() === 'input') {
                        this['saveAndClose']();
                    }
                },
                scope: this
            });
        }
    },
    onSchedulerRender: function() {
        this['render'](document['body']);
        if (this['hideOnBlur']) {
            this['mon'](Ext['getDoc'](), 'mousedown', this['onMouseDown'], this);
        }
    },
    show: function(_0x33f5x9, _0x33f5xf) {
        var _0x33f5x7 = this['schedulerView']['isReadOnly']();
        if (_0x33f5x7 !== this['readOnly']) {
            Ext.Array['each'](this['query']('field'), function(_0x33f5xe) {
                _0x33f5xe['setReadOnly'](_0x33f5x7);
            });
            this['saveButton']['setVisible'](!_0x33f5x7);
            this['deleteButton']['setVisible'](!_0x33f5x7);
            this['readOnly'] = _0x33f5x7;
        }
        if (this['deleteButton']) {
            this['deleteButton']['setVisible'](!_0x33f5x7 && this['getEventStore']()['indexOf'](_0x33f5x9) >= 0);
        }
        this['eventRecord'] = _0x33f5x9;
        this['durationField']['setValue'](Ext.ux.Scheduler.util.Date['getDurationInUnit'](_0x33f5x9['getStartDate'](), _0x33f5x9['getEndDate'](), this['durationUnit'], true));
        var _0x33f5x5 = _0x33f5x9['getStartDate']();
        this['startDateField']['setValue'](_0x33f5x5);
        this['startTimeField']['setValue'](_0x33f5x5);
        var _0x33f5x8 = this['schedulerView']['up']('[floating=true]');
        if (_0x33f5x8) {
            this['getEl']()['setZIndex'](_0x33f5x8['getEl']()['getZIndex']() + 1);
            _0x33f5x8['addCls'](this['ignoreCls']);
        }
        this['callParent']();
        _0x33f5xf = _0x33f5xf || this['schedulerView']['getElementsFromEventRecord'](_0x33f5x9)[0];
        this['alignTo'](_0x33f5xf, this['schedulerView']['getMode']() == 'horizontal' ? 'bl' : 'tl-tr', this['getConstrainOffsets'](_0x33f5xf));
        this['expand'](!this['constrain']);
        if (this['constrain']) {
            this['doConstrain'](Ext.util['Region']['getRegion'](Ext.getBody()));
        }
        var _0x33f5x3, _0x33f5x4 = _0x33f5x9['get']('EventType');
        if (_0x33f5x4 && this['dynamicForm']) {
            var _0x33f5x1 = this['items']['getAt'](1), _0x33f5x2 = _0x33f5x1['query']('> component[EventType=' + _0x33f5x4 + ']');
            if (!_0x33f5x2['length']) {
                throw 'Can\'t find form for EventType=' + _0x33f5x4;
            }
            if (!_0x33f5x1['getLayout']()['setActiveItem']) {
                throw 'Can\'t switch active component in the \'fieldsPanel\'';
            }
            _0x33f5x3 = _0x33f5x2[0];
            if (!(_0x33f5x3 instanceof Ext.form['Panel'])) {
                throw 'Each child component of \'fieldsPanel\' should be a \'form\'';
            }
            _0x33f5x1['getLayout']()['setActiveItem'](_0x33f5x3);
        } else {
            _0x33f5x3 = this;
        }
        this['currentForm'] = _0x33f5x3;
        _0x33f5x3['getForm']()['loadRecord'](_0x33f5x9);
    },
    getEventStore: function() {
        return this['schedulerView']['getEventStore']();
    },
    getConstrainOffsets: function(_0x33f5x2) {
        return [ 0, 0 ];
    },
    onSaveClick: function() {
        this['saveAndClose']();
    },
    saveAndClose: function() {
        var _0x33f5xf = this, _0x33f5x9 = _0x33f5xf['eventRecord'], _0x33f5x2 = _0x33f5xf['currentForm']['getForm']();
        if (_0x33f5x2['isValid']() && _0x33f5xf['fireEvent']('beforeeventsave', _0x33f5xf, _0x33f5x9) !== false) {
            var _0x33f5x3 = _0x33f5xf['startDateField']['getValue'](), _0x33f5x7, _0x33f5x1 = _0x33f5xf['startTimeField']['getValue'](), _0x33f5x5 = _0x33f5xf['durationField']['getValue']();
            if (_0x33f5x3 && _0x33f5x5 >= 0) {
                if (_0x33f5x1) {
                    Ext.ux.Scheduler.util.Date['copyTimeValues'](_0x33f5x3, _0x33f5x1);
                }
                _0x33f5x7 = Ext.ux.Scheduler.util.Date.add(_0x33f5x3, _0x33f5xf['durationUnit'], _0x33f5x5);
            } else {
                return;
            }
            if (!_0x33f5xf['schedulerView']['allowOverlap']) {
                var _0x33f5x4 = _0x33f5x9['getResources'](_0x33f5xf['getEventStore']());
                var _0x33f5x8 = false;
                _0x33f5x4 = _0x33f5x4['length'] > 0 ? _0x33f5x4 : [ _0x33f5xf['resourceRecord'] ];
                Ext.each(_0x33f5x4, function(_0x33f5xe) {
                    return _0x33f5x8 = !_0x33f5xf['schedulerView']['isDateRangeAvailable'](_0x33f5x3, _0x33f5x7, _0x33f5x9, _0x33f5xe);
                });
                if (_0x33f5x8) {
                    return;
                }
            }
            _0x33f5xf['schedulerView']['un']('eventrepaint', _0x33f5xf['onEventRepaint'], _0x33f5xf);
            _0x33f5xf['onBeforeSave'](_0x33f5x9);
            _0x33f5x9['beginEdit']();
            _0x33f5x2['updateRecord'](_0x33f5x9);
            _0x33f5x9['setStartEndDate'](_0x33f5x3, _0x33f5x7);
            _0x33f5x9['endEdit']();
            if (_0x33f5xf['getEventStore']()['indexOf'](_0x33f5x9) < 0) {
                if (_0x33f5xf['schedulerView']['fireEvent']('beforeeventadd', _0x33f5xf['schedulerView'], _0x33f5x9, [ _0x33f5xf['resourceRecord'] ]) !== false) {
                    if (_0x33f5xf['getEventStore']()['isTreeStore']) {
                        _0x33f5x9['set']('leaf', true);
                    }
                    _0x33f5xf['getEventStore']()['append'](_0x33f5x9);
                    _0x33f5x9['assign'](_0x33f5xf['resourceRecord']);
                }
            }
            _0x33f5xf['onAfterSave'](_0x33f5x9);
            _0x33f5xf['collapse'](null, true);
            _0x33f5xf['schedulerView']['on']('eventrepaint', _0x33f5xf['onEventRepaint'], _0x33f5xf);
        }
    },
    onBeforeSave: function(_0x33f5x2) {},
    onAfterSave: function(_0x33f5x2) {},
    onDeleteClick: function() {
        if (this['fireEvent']('beforeeventdelete', this, this['eventRecord']) !== false) {
            this['getEventStore']()['remove'](this['eventRecord']);
        }
        this['collapse'](null, true);
    },
    onCancelClick: function() {
        this['collapse'](null, true);
    },
    buildButtons: function() {
        this['saveButton'] = new Ext.Button({
            text: this.L('saveText'),
            scope: this,
            handler: this['onSaveClick']
        });
        this['deleteButton'] = new Ext.Button({
            text: this.L('deleteText'),
            scope: this,
            handler: this['onDeleteClick']
        });
        this['cancelButton'] = new Ext.Button({
            text: this.L('cancelText'),
            scope: this,
            handler: this['onCancelClick']
        });
        return [ this['saveButton'], this['deleteButton'], this['cancelButton'] ];
    },
    buildDurationFields: function() {
        this['startDateField'] = new Ext.form['field'].Date(Ext.apply({
            width: 140,
            allowBlank: false,
            format: this['dateFormat']
        }, this['dateConfig'] || {}));
        this['startDateField']['getPicker']()['addCls'](this['ignoreCls']);
        this['startTimeField'] = new Ext.form['field'].Time(Ext.apply({
            width: 90,
            allowBlank: false,
            format: this['timeFormat']
        }, this['timeConfig'] || {}));
        this['startTimeField']['getPicker']()['addCls'](this['ignoreCls']);
        this['durationField'] = new Ext.form['field'].Number(Ext.apply({
            cls: 'sch-event-editor-durationfield',
            width: 60,
            value: 0,
            minValue: 0,
            allowNegative: false
        }, this['durationConfig'] || {}));
        this['durationLabel'] = new Ext.form.Label({
            width: 30,
            cls: 'sch-event-editor-durationlabel',
            text: this['getDurationText']()
        });
        return [ this['startDateField'], this['startTimeField'], this['durationField'], this['durationLabel'] ];
    },
    onActivateEditor: function(_0x33f5x1, _0x33f5x2) {
        this['show'](_0x33f5x2);
    },
    onMouseDown: function(_0x33f5x2) {
        if (this['collapsed'] || _0x33f5x2['within'](this['getEl']()) || _0x33f5x2['getTarget']('.' + this['ignoreCls'], 9) || _0x33f5x2['getTarget'](this['schedulerView']['eventSelector'])) {
            return;
        }
        this['collapse']();
    },
    onDragCreateEnd: function(_0x33f5x3, _0x33f5x1, _0x33f5x4, _0x33f5x8, _0x33f5x2) {
        this['dragProxyEl'] = _0x33f5x2;
        this['resourceRecord'] = _0x33f5x4;
        this['schedulerView']['onEventCreated'](_0x33f5x1);
        this['show'](_0x33f5x1, this['dragProxyEl']);
    },
    hide: function() {
        this['callParent'](arguments);
        var _0x33f5x2 = this['dragProxyEl'];
        if (_0x33f5x2) {
            _0x33f5x2['hide']();
        }
    },
    afterCollapse: function() {
        this['hide']();
        this['callParent'](arguments);
    },
    getDurationText: function() {
        if (this['durationText']) {
            return this['durationText'];
        }
        return Ext.ux.Scheduler.util.Date['getShortNameOfUnit'](Ext.ux.Scheduler.util.Date['getNameOfUnit'](this['durationUnit']));
    },
    onEventRepaint: function(_0x33f5x1, _0x33f5x2) {
        if (!this['getCollapsed']() && _0x33f5x2 === this['eventRecord']) {
            this['show'](_0x33f5x2);
        }
    }
});

Ext.define('Ext.ux.Scheduler.plugin.EventTools', {
    extend: Ext['Container'],
    mixins: [ Ext.AbstractPlugin ],
    lockableScope: 'top',
    alias: 'plugin.scheduler_eventtools',
    hideDelay: 500,
    align: 'right',
    defaults: {
        xtype: 'tool',
        baseCls: 'sch-tool',
        overCls: 'sch-tool-over',
        width: 20,
        height: 20,
        visibleFn: Ext.emptyFn
    },
    hideTimer: null,
    lastPosition: null,
    cachedSize: null,
    offset: {
        x: 0,
        y: 1
    },
    layout: 'hbox',
    autoRender: true,
    floating: true,
    hideMode: 'offsets',
    hidden: true,
    record: null,
    getRecord: function() {
        return this['record'];
    },
    init: function(_0x33f5x2) {
        if (!this['items']) {
            throw 'Must define an items property for this plugin to function correctly';
        }
        this['addCls']('sch-event-tools');
        this['scheduler'] = _0x33f5x2;
        _0x33f5x2['on']({
            eventresizestart: this['onOperationStart'],
            eventresizeend: this['onOperationEnd'],
            eventdragstart: this['onOperationStart'],
            eventdrop: this['onOperationEnd'],
            eventmouseenter: this['onEventMouseEnter'],
            eventmouseleave: this['onContainerMouseLeave'],
            scope: this
        });
    },
    onRender: function() {
        this['callParent'](arguments);
        this['scheduler']['mon'](this['el'], {
            mouseenter: this['onContainerMouseEnter'],
            mouseleave: this['onContainerMouseLeave'],
            scope: this
        });
    },
    onEventMouseEnter: function(_0x33f5x9, _0x33f5x2, _0x33f5x8) {
        var _0x33f5x3 = false;
        var _0x33f5x7;
        this['record'] = _0x33f5x2;
        this['items']['each'](function(_0x33f5xf) {
            _0x33f5x7 = _0x33f5xf['visibleFn'](_0x33f5x2) !== false;
            _0x33f5xf['setVisible'](_0x33f5x7);
            if (_0x33f5x7) {
                _0x33f5x3 = true;
            }
        }, this);
        if (!_0x33f5x3) {
            return;
        }
        if (!this['rendered']) {
            this['doAutoRender']();
        }
        var _0x33f5x5 = _0x33f5x8['getTarget'](_0x33f5x9['eventSelector']);
        var _0x33f5x4 = Ext.fly(_0x33f5x5)['getBox']();
        var _0x33f5x1 = this['getSize']();
        this['lastPosition'] = [ _0x33f5x8['getXY']()[0] - _0x33f5x1['width'] / 2, _0x33f5x4['y'] - _0x33f5x1['height'] - this['offset']['y'] ];
        this['onContainerMouseEnter']();
    },
    onContainerMouseEnter: function() {
        window['clearTimeout'](this['hideTimer']);
        this['setPosition']['apply'](this, this['lastPosition']);
        this['show']();
    },
    onContainerMouseLeave: function() {
        window['clearTimeout'](this['hideTimer']);
        this['hideTimer'] = Ext['defer'](this['hide'], this['hideDelay'], this);
    },
    onOperationStart: function() {
        this['scheduler']['un']('eventmouseenter', this['onEventMouseEnter'], this);
        window['clearTimeout'](this['hideTimer']);
        this['hide']();
    },
    onOperationEnd: function() {
        this['scheduler']['on']('eventmouseenter', this['onEventMouseEnter'], this);
    }
});

Ext.define('Ext.ux.Scheduler.plugin.exporter.AbstractExporter', {
    extend: Ext.util['Observable'],
    mixins: [ Ext.ux.Scheduler.mixin.Localizable ],
    pageHeaderHeight: 41,
    pageFooterHeight: 41,
    bufferedHeightMargin: 25,
    isExporter: true,
    paperWidth: 0,
    paperHeight: 0,
    printHeight: 0,
    lockedRowsHeight: 0,
    normalRowsHeight: 0,
    iterateTimeout: 10,
    tableSelector: undefined,
    currentPage: undefined,
    headerTplDataFn: null,
    footerTplDataFn: null,
    headerTplDataFnScope: null,
    footerTplDataFnScope: null,
    config: {
        exporterId: 'abstractexporter',
        name: '',
        translateURLsToAbsolute: true,
        expandAllBeforeExport: false,
        headerTpl: '<div class="sch-export-header" style="height:{height}px; width:{width}px"><h2>{pageNo}/{totalPages}</h2></div>',
        tpl: '<!DOCTYPE html><html class="' + Ext['baseCSSPrefix'] + 'border-box {htmlClasses}"><head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type" /><title>{title}</title>{styles}</head><body class="' + Ext['baseCSSPrefix'] + 'webkit sch-export {bodyClasses}">{header}<div class="{componentClasses}" style="height:{bodyHeight}px; width:{totalWidth}px; position: relative !important">{HTML}</div>{footer}</body></html>',
        footerTpl: '<div class="sch-export-header" style="height:{height}px; width:{width}px"><h2>{pageNo}/{totalPages}</h2></div>',
        rowVisibilityThreshold: .6
    },
    callbacks: undefined,
    error: undefined,
    extractedPages: undefined,
    numberOfPages: 0,
    firstExportedRowOffset: 0,
    secondaryCanvasOffset: 0,
    constructor: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x2 = _0x33f5x2 || {};
        _0x33f5x1['callParent'](arguments);
        delete _0x33f5x2['getUserHeaderTplData'];
        delete _0x33f5x2['getUserFooterTplData'];
        _0x33f5x1['initConfig'](_0x33f5x2);
        if (!_0x33f5x2['tableSelector']) {
            _0x33f5x1['tableSelector'] = '.' + Ext['baseCSSPrefix'] + 'grid-item-container';
        }
        if (!_0x33f5x2['name']) {
            _0x33f5x1['setName'](_0x33f5x1.L('name'));
        }
    },
    setHeaderTpl: function(_0x33f5x2) {
        this['headerTpl'] = this['getTplInstance'](_0x33f5x2);
    },
    getHeaderTpl: function() {
        return this['headerTpl'];
    },
    setTpl: function(_0x33f5x2) {
        this['tpl'] = this['getTplInstance'](_0x33f5x2);
    },
    getTpl: function() {
        return this['tpl'];
    },
    setFooterTpl: function(_0x33f5x2) {
        this['footerTpl'] = this['getTplInstance'](_0x33f5x2);
    },
    getFooterTpl: function() {
        return this['footerTpl'];
    },
    getTplInstance: function(_0x33f5x2) {
        return _0x33f5x2 && !_0x33f5x2['isTemplate'] ? new Ext.XTemplate(_0x33f5x2, {
            disableFormats: true
        }) : _0x33f5x2;
    },
    getBodyClasses: function() {
        var _0x33f5x1 = new RegExp(Ext['baseCSSPrefix'] + 'ie\d?|' + Ext['baseCSSPrefix'] + 'gecko', 'g'), _0x33f5x2 = document['body']['className']['replace'](_0x33f5x1, '');
        if (Ext['isIE']) {
            _0x33f5x2 += ' sch-ie-export';
        }
        return _0x33f5x2;
    },
    getComponentClasses: function() {
        return this['getComponent']()['el']['dom']['className'];
    },
    setComponent: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['component'] = _0x33f5x2;
        _0x33f5x1['view'] = _0x33f5x2['getSchedulingView']();
        _0x33f5x1['normalGrid'] = _0x33f5x2['normalGrid'];
        _0x33f5x1['lockedGrid'] = _0x33f5x2['lockedGrid'];
        _0x33f5x1['normalView'] = _0x33f5x2['normalGrid']['view'];
        _0x33f5x1['lockedView'] = _0x33f5x2['lockedGrid']['view'];
        _0x33f5x1['lockedBodySelector'] = '#' + _0x33f5x1['lockedView']['getId']();
        _0x33f5x1['normalBodySelector'] = '#' + _0x33f5x1['normalView']['getId']();
        _0x33f5x1['lockedHeader'] = _0x33f5x1['lockedGrid']['headerCt'];
        _0x33f5x1['normalHeader'] = _0x33f5x1['normalGrid']['headerCt'];
        _0x33f5x1['headerHeight'] = _0x33f5x1['normalHeader']['getHeight']();
        _0x33f5x1['printHeight'] = Math['floor'](_0x33f5x1['paperHeight']) - _0x33f5x1['headerHeight'] - (_0x33f5x1['exportConfig']['showHeader'] ? _0x33f5x1['pageHeaderHeight'] : 0) - (_0x33f5x1['exportConfig']['showFooter'] ? _0x33f5x1['pageFooterHeight'] : 0);
        _0x33f5x1['saveComponentState'](_0x33f5x2);
    },
    getComponent: function() {
        return this['component'];
    },
    setPaperSize: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x3 = this;
        if (_0x33f5x1 === 'landscape') {
            _0x33f5x3['paperWidth'] = _0x33f5x2['height'];
            _0x33f5x3['paperHeight'] = _0x33f5x2['width'];
        } else {
            _0x33f5x3['paperWidth'] = _0x33f5x2['width'];
            _0x33f5x3['paperHeight'] = _0x33f5x2['height'];
        }
    },
    getPaperFormat: function() {
        return this['exportConfig']['format'];
    },
    isBuffered: function() {
        return !!this['getBufferedRenderer']();
    },
    getBufferedRenderer: function() {
        return this['view']['bufferedRenderer'];
    },
    setComponentRange: function(_0x33f5x4) {
        var _0x33f5x9 = this, _0x33f5x3 = _0x33f5x9['getComponent']();
        if (_0x33f5x4['range'] !== 'complete') {
            var _0x33f5x1 = _0x33f5x9['view'], _0x33f5x2, _0x33f5x8;
            switch (_0x33f5x4['range']) {
              case 'date':
                _0x33f5x2 = new Date(_0x33f5x4['dateFrom']);
                _0x33f5x8 = new Date(_0x33f5x4['dateTo']);
                if (Ext.ux.Scheduler.util.Date['getDurationInDays'](_0x33f5x2, _0x33f5x8) < 1) {
                    _0x33f5x8 = Ext.ux.Scheduler.util.Date.add(_0x33f5x8, Ext.ux.Scheduler.util.Date.DAY, 1);
                }
                ;
                break;

              case 'current':
                var _0x33f5x7 = _0x33f5x1['getVisibleDateRange']();
                _0x33f5x2 = _0x33f5x7['startDate'];
                _0x33f5x8 = _0x33f5x7['endDate'] || _0x33f5x1['timeAxis']['getEnd']();
                break;

              case 'completedata':
                var _0x33f5x5 = _0x33f5x3['getEventStore']()['getTotalTimeSpan']();
                _0x33f5x2 = _0x33f5x5['start'];
                _0x33f5x8 = _0x33f5x5['end'];
                break;
            }
            if (_0x33f5x2 && _0x33f5x8) {
                _0x33f5x3['setTimeSpan'](_0x33f5x2, _0x33f5x8);
            }
        }
        _0x33f5x9['ticks'] = _0x33f5x3['timeAxis']['getTicks']();
        if (_0x33f5x4['rowsRange'] == 'visible') {
            _0x33f5x4['rowsRange'] = _0x33f5x9['findVisibleRowsRange']();
        } else {
            _0x33f5x4['rowsRange'] = null;
        }
    },
    getStylesheets: function() {
        var _0x33f5x3 = this['getTranslateURLsToAbsolute'](), _0x33f5x1 = Ext['getDoc']()['select']('link[rel="stylesheet"]'), _0x33f5x2 = '';
        _0x33f5x1['each'](function(_0x33f5x4) {
            var _0x33f5x5 = _0x33f5x4['dom']['cloneNode'](true);
            _0x33f5x3 && _0x33f5x5['setAttribute']('href', _0x33f5x4['dom']['href']);
            _0x33f5x2 += _0x33f5x5['outerHTML'];
        });
        return _0x33f5x2;
    },
    forEachTimeSpanPlugin: function(_0x33f5x3, _0x33f5x8, _0x33f5x5) {
        if (Ext.ux.Scheduler.feature && Ext.ux.Scheduler.feature.AbstractTimeSpan) {
            var _0x33f5x7 = this;
            var _0x33f5x1 = (_0x33f5x3['plugins'] || [])['concat'](_0x33f5x3['normalGrid']['plugins'] || [])['concat'](_0x33f5x3['columnLinesFeature'] || []);
            for (var _0x33f5x4 = 0, _0x33f5x2 = _0x33f5x1['length']; _0x33f5x4 < _0x33f5x2; _0x33f5x4++) {
                var _0x33f5x9 = _0x33f5x1[_0x33f5x4];
                if (_0x33f5x9 instanceof Ext.ux.Scheduler.feature.AbstractTimeSpan) {
                    _0x33f5x8['call'](_0x33f5x5 || _0x33f5x7, _0x33f5x9);
                }
            }
        }
    },
    setCellSize: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x2['timeColumnWidth'] = _0x33f5x1[0];
        if (_0x33f5x2['timeColumnWidth']) {
            this['getComponent']()['setTimeColumnWidth'](_0x33f5x2['timeColumnWidth']);
        }
        if (_0x33f5x1['length'] > 1) {
            _0x33f5x2['view']['setRowHeight'](_0x33f5x1[1]);
        }
    },
    findVisibleRowsRange: function() {
        var _0x33f5x8 = this, _0x33f5x7 = _0x33f5x8['lockedView']['all'], _0x33f5xe = _0x33f5x7['startIndex'], _0x33f5x5 = _0x33f5x7['endIndex'];
        var _0x33f5x9 = false, _0x33f5x3 = -1, _0x33f5x2 = -1;
        for (var _0x33f5x4 = _0x33f5xe; _0x33f5x4 <= _0x33f5x5; _0x33f5x4++) {
            var _0x33f5x1 = _0x33f5x7['item'](_0x33f5x4, true);
            if (_0x33f5x8['isRowVisible'](_0x33f5x1, _0x33f5x8['lockedBox'])) {
                if (!_0x33f5x9) {
                    _0x33f5x3 = _0x33f5x4;
                    _0x33f5x9 = true;
                }
                _0x33f5x2 = _0x33f5x4;
            } else {
                if (_0x33f5x9) {
                    break;
                }
            }
        }
        return [ _0x33f5x3, _0x33f5x2 ];
    },
    prepareComponent: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this;
        _0x33f5x1 = _0x33f5x1 || _0x33f5x3['getComponent']();
        _0x33f5x3['suspendInfiniteScroll'](_0x33f5x1);
        _0x33f5x3['forEachTimeSpanPlugin'](_0x33f5x1, function(_0x33f5x4) {
            _0x33f5x4['_renderDelay'] = _0x33f5x4['renderDelay'];
            _0x33f5x4['renderDelay'] = 0;
        });
        _0x33f5x1['getSchedulingView']()['timeAxisViewModel']['suppressFit'] = true;
        _0x33f5x1['timeAxis']['autoAdjust'] = false;
        _0x33f5x1['normalGrid']['expand']();
        _0x33f5x1['lockedGrid']['expand']();
        _0x33f5x3['lockedBox'] = _0x33f5x3['lockedView']['getBox']();
        _0x33f5x3['normalBox'] = _0x33f5x3['normalView']['getBox']();
        _0x33f5x3['setComponentRange'](_0x33f5x2);
        _0x33f5x2['cellSize'] && _0x33f5x3['setCellSize'](_0x33f5x2['cellSize']);
        _0x33f5x2['beforeExport'] && _0x33f5x2['beforeExport'](_0x33f5x1, _0x33f5x3['ticks']);
        _0x33f5x3['prepareColumns'](_0x33f5x2['columns']);
        if (_0x33f5x3['expandAllBeforeExport'] && _0x33f5x1['expandAll']) {
            _0x33f5x1['expandAll']();
        }
        _0x33f5x3['fitComponentIntoPage']();
        _0x33f5x3['view']['timeAxisViewModel']['setTickWidth'](_0x33f5x3['view']['timeAxisViewModel']['getTickWidth']());
        if (_0x33f5x3['isBuffered']() && Ext['isIE8']) {
            _0x33f5x3['normalView']['bufferedRenderer']['variableRowHeight'] = false;
            _0x33f5x3['lockedView']['bufferedRenderer']['variableRowHeight'] = false;
        }
    },
    prepareColumns: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        if (_0x33f5x2) {
            _0x33f5x1['lockedGrid']['headerCt']['items']['each'](function(_0x33f5x3) {
                if (Ext.Array['contains'](_0x33f5x2, _0x33f5x3)) {
                    _0x33f5x3['show']();
                } else {
                    _0x33f5x3['hide']();
                }
            });
        }
    },
    restoreComponent: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x2 = _0x33f5x2 || _0x33f5x1['getComponent']();
        _0x33f5x1['forEachTimeSpanPlugin'](_0x33f5x2, function(_0x33f5x3) {
            _0x33f5x3['renderDelay'] = _0x33f5x3['_renderDelay'];
            delete _0x33f5x3['_renderDelay'];
        });
        _0x33f5x1['restoreComponentState'](_0x33f5x2);
        _0x33f5x1['restoreInfiniteScroll'](_0x33f5x2);
        _0x33f5x1['exportConfig']['afterExport'] && _0x33f5x1['exportConfig']['afterExport'](_0x33f5x2);
    },
    saveComponentState: function(_0x33f5x8) {
        _0x33f5x8 = _0x33f5x8 || this['getComponent']();
        var _0x33f5x5 = this, _0x33f5x9 = _0x33f5x8['getSchedulingView'](), _0x33f5x4 = _0x33f5x8['normalGrid'], _0x33f5x2 = _0x33f5x8['lockedGrid'];
        var _0x33f5x1 = [];
        _0x33f5x2['headerCt']['items']['each'](function(_0x33f5xe) {
            _0x33f5x1['push']({
                column: _0x33f5xe,
                visible: !_0x33f5xe['isHidden']()
            });
        });
        var _0x33f5x7 = _0x33f5x9['timeAxisViewModel'];
        var _0x33f5xf = _0x33f5x7['originalTickWidth'];
        var _0x33f5x3 = _0x33f5x7['getTickWidth']();
        _0x33f5x7['setTickWidth'](_0x33f5x3, true);
        _0x33f5x5['restoreSettings'] = {
            width: _0x33f5x8['getWidth'](),
            height: _0x33f5x8['getHeight'](),
            rowHeight: _0x33f5x7['getViewRowHeight'](),
            originalTickWidth: _0x33f5xf,
            columnWidth: _0x33f5x3,
            startDate: _0x33f5x8['getStart'](),
            endDate: _0x33f5x8['getEnd'](),
            normalWidth: _0x33f5x4['getWidth'](),
            normalLeft: _0x33f5x4['getEl']()['getStyle']('left'),
            lockedWidth: _0x33f5x2['getWidth'](),
            lockedCollapse: _0x33f5x2['collapsed'],
            normalCollapse: _0x33f5x4['collapsed'],
            columns: _0x33f5x1,
            autoAdjust: _0x33f5x8['timeAxis']['autoAdjust'],
            suppressFit: _0x33f5x7['suppressFit'],
            startIndex: _0x33f5x9['all']['startIndex'],
            lockedScrollX: _0x33f5x5['lockedView']['getScrollX'](),
            normalScrollX: _0x33f5x9['getScrollX'](),
            scrollY: _0x33f5x9['getScrollY']()
        };
    },
    restoreComponentState: function(_0x33f5x3) {
        var _0x33f5x4 = this;
        _0x33f5x3 = _0x33f5x3 || _0x33f5x4['getComponent']();
        var _0x33f5x1 = _0x33f5x4['restoreSettings'], _0x33f5x2 = _0x33f5x3['getSchedulingView']();
        _0x33f5x3['timeAxis']['autoAdjust'] = _0x33f5x1['autoAdjust'];
        _0x33f5x3['normalGrid']['show']();
        _0x33f5x3['setWidth'](_0x33f5x1['width']);
        _0x33f5x3['setHeight'](_0x33f5x1['height']);
        _0x33f5x3['setTimeSpan'](_0x33f5x1['startDate'], _0x33f5x1['endDate']);
        _0x33f5x3['setTimeColumnWidth'](_0x33f5x1['columnWidth'], true);
        _0x33f5x2['setRowHeight'](_0x33f5x1['rowHeight']);
        Ext.Array['each'](_0x33f5x1['columns'], function(_0x33f5x5) {
            _0x33f5x5['column']['setVisible'](_0x33f5x5['visible']);
        });
        _0x33f5x3['lockedGrid']['show']();
        _0x33f5x3['normalGrid']['setWidth'](_0x33f5x1['normalWidth']);
        _0x33f5x3['normalGrid']['getEl']()['setStyle']('left', _0x33f5x1['normalLeft']);
        _0x33f5x3['lockedGrid']['setWidth'](_0x33f5x1['lockedWidth']);
        _0x33f5x2['timeAxisViewModel']['suppressFit'] = _0x33f5x1['suppressFit'];
        _0x33f5x2['timeAxisViewModel']['setTickWidth'](_0x33f5x1['columnWidth']);
        _0x33f5x2['timeAxisViewModel']['originalTickWidth'] = _0x33f5x1['originalTickWidth'];
        if (_0x33f5x1['lockedCollapse']) {
            _0x33f5x3['lockedGrid']['collapse']();
        }
        if (_0x33f5x1['normalCollapse']) {
            _0x33f5x3['normalGrid']['collapse']();
        }
        _0x33f5x4['restoreComponentScroll'](_0x33f5x1);
        if (_0x33f5x4['getBufferedRenderer']()) {
            if (Ext['isIE8']) {
                _0x33f5x4['normalView']['bufferedRenderer']['variableRowHeight'] = true;
                _0x33f5x4['lockedView']['bufferedRenderer']['variableRowHeight'] = true;
            }
        }
    },
    restoreComponentScroll: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['lockedView']['setScrollX'](_0x33f5x2['lockedScrollX']);
        _0x33f5x1['normalView']['scrollTo'](_0x33f5x2['normalScrollX'], _0x33f5x2['scrollY']);
    },
    extractPages: function(_0x33f5x1, _0x33f5x2, _0x33f5x5, _0x33f5x3) {
        var _0x33f5x4 = this;
        if (!_0x33f5x5) {
            throw 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter: [extractPages] "callback" has to be provided.';
        }
        _0x33f5x4['enableGarbageCollector'] = Ext['enableGarbageCollector'];
        Ext['enableGarbageCollector'] = false;
        Ext.dom['GarbageCollector']['pause']();
        _0x33f5x4['exportConfig'] = _0x33f5x2;
        _0x33f5x4['normalRows'] = [];
        _0x33f5x4['lockedRows'] = [];
        _0x33f5x4['extractedPages'] = [];
        _0x33f5x4['numberOfPages'] = 0;
        _0x33f5x4['lockedRowsHeight'] = 0;
        _0x33f5x4['normalRowsHeight'] = 0;
        _0x33f5x4['firstExportedRowOffset'] = 0;
        _0x33f5x4['secondaryCanvasOffset'] = 0;
        _0x33f5x4['setPaperSize'](_0x33f5x2['pageSize'], _0x33f5x2['orientation']);
        _0x33f5x4['setComponent'](_0x33f5x1, _0x33f5x2);
        _0x33f5x4['prepareComponent'](_0x33f5x1, _0x33f5x2);
        _0x33f5x4['callbacks'] = {
            success: _0x33f5x5,
            scope: _0x33f5x3 || _0x33f5x4
        };
        setTimeout(function() {
            _0x33f5x4['collectRows'](_0x33f5x4['onRowsCollected'], _0x33f5x4, _0x33f5x2);
        }, 1);
    },
    onPagesExtracted: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['restoreComponent']();
        _0x33f5x1['submitPages'](_0x33f5x2);
    },
    submitPages: function(_0x33f5x2) {
        var _0x33f5x3 = this, _0x33f5x1 = _0x33f5x3['callbacks'];
        _0x33f5x1['success']['call'](_0x33f5x1['scope'], _0x33f5x3['renderPages'](_0x33f5x2));
        Ext['enableGarbageCollector'] = _0x33f5x3['enableGarbageCollector'];
        Ext.dom['GarbageCollector']['resume']();
    },
    getCurrentPage: function() {
        return this['currentPage'];
    },
    setCurrentPage: function(_0x33f5x2) {
        this['currentPage'] = _0x33f5x2;
    },
    getExpectedNumberOfPages: function() {
        throw 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter: [getExpectedNumberOfPages] Abstract method called.';
    },
    commitPage: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['numberOfPages']++;
        var _0x33f5x4 = _0x33f5x1['preparePageToCommit'](_0x33f5x2);
        _0x33f5x1['fireEvent']('beforecommitpage', _0x33f5x1, _0x33f5x4, _0x33f5x1['numberOfPages'], _0x33f5x1['getExpectedNumberOfPages']());
        var _0x33f5x3 = Ext.apply({
            html: _0x33f5x4['dom']['innerHTML'],
            number: _0x33f5x1['numberOfPages']
        }, _0x33f5x2);
        _0x33f5x1['extractedPages']['push'](_0x33f5x3);
        _0x33f5x1['fireEvent']('commitpage', _0x33f5x1, _0x33f5x3, _0x33f5x1['numberOfPages'], _0x33f5x1['getExpectedNumberOfPages']());
    },
    collectLockedRow: function(_0x33f5x4, _0x33f5x3) {
        var _0x33f5x1 = Ext.fly(_0x33f5x4)['getHeight']();
        this['lockedRowsHeight'] += _0x33f5x1;
        var _0x33f5x2 = {
            height: _0x33f5x1,
            row: _0x33f5x4['cloneNode'](true),
            record: this['lockedView']['getRecord'](_0x33f5x3)
        };
        this['lockedRows']['push'](_0x33f5x2);
        return _0x33f5x2;
    },
    collectNormalRow: function(_0x33f5x4, _0x33f5x3) {
        var _0x33f5x1 = Ext.fly(_0x33f5x4)['getHeight']();
        this['normalRowsHeight'] += _0x33f5x1;
        var _0x33f5x2 = {
            height: _0x33f5x1,
            row: _0x33f5x4['cloneNode'](true),
            record: this['normalView']['getRecord'](_0x33f5x3)
        };
        this['normalRows']['push'](_0x33f5x2);
        return _0x33f5x2;
    },
    onRowsCollected: function() {
        throw 'Ext.ux.Scheduler.plugin.exporter.AbstractExporter: [onRowsCollected] Abstract method called.';
    },
    iterateAsync: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x4 = this;
        _0x33f5x1 = _0x33f5x1 || _0x33f5x4;
        var _0x33f5x2 = function() {
            var _0x33f5x8 = arguments;
            var _0x33f5x5 = setInterval(function() {
                clearInterval(_0x33f5x5);
                _0x33f5x3['apply'](_0x33f5x1, []['concat']['apply']([ _0x33f5x2 ], _0x33f5x8));
            }, _0x33f5x4['iterateTimeout']);
        };
        _0x33f5x2['apply'](_0x33f5x4, Ext.Array['slice'](arguments, 2));
    },
    callAsync: function(_0x33f5x3, _0x33f5x1) {
        _0x33f5x1 = _0x33f5x1 || this;
        var _0x33f5x2 = setInterval(function() {
            clearInterval(_0x33f5x2);
            _0x33f5x3['apply'](_0x33f5x1, Ext.Array['slice'](arguments, 2));
        }, this['iterateTimeout']);
    },
    collectRows: function(_0x33f5x8, _0x33f5x3, _0x33f5x2) {
        var _0x33f5x4 = this, _0x33f5x5 = 0;
        var _0x33f5x1 = _0x33f5x4['isBuffered']();
        if (_0x33f5x2['rowsRange']) {
            _0x33f5x5 = _0x33f5x2['rowsRange'][0];
            _0x33f5x1 = !(_0x33f5x2['rowsRange'][0] >= _0x33f5x4['view']['all']['startIndex'] && _0x33f5x2['rowsRange'][1] <= _0x33f5x4['view']['all']['endIndex']);
        }
        if (_0x33f5x1) {
            setTimeout(function() {
                _0x33f5x4['scrollTo'](_0x33f5x5, function() {
                    _0x33f5x5 && _0x33f5x4['initFirstExportedRowOffset'](_0x33f5x5);
                    _0x33f5x4['iterateAsync'](_0x33f5x4['collectRowsStep'], _0x33f5x4, _0x33f5x5, _0x33f5x8, _0x33f5x3, _0x33f5x2);
                });
            }, 1);
        } else {
            _0x33f5x5 && _0x33f5x4['initFirstExportedRowOffset'](_0x33f5x5);
            setTimeout(function() {
                _0x33f5x4['collectRowsStep'](null, _0x33f5x5, _0x33f5x8, _0x33f5x3, _0x33f5x2);
            }, 1);
        }
    },
    initFirstExportedRowOffset: function(_0x33f5x2) {
        this['firstExportedRowOffset'] = this['view']['el']['getScrollTop']() - this['view']['el']['getTop']() + Ext.fly(this['view']['getNode'](_0x33f5x2))['getTop']();
    },
    isRowVisible: function(_0x33f5x4, _0x33f5x2) {
        var _0x33f5x1 = Ext.fly(_0x33f5x4), _0x33f5x8 = _0x33f5x1['getTop'](), _0x33f5x5 = _0x33f5x1['getHeight'](), _0x33f5x9 = _0x33f5x8 + _0x33f5x5, _0x33f5x3 = (1 - this['getRowVisibilityThreshold']()) * _0x33f5x5;
        return _0x33f5x8 + _0x33f5x3 > _0x33f5x2['top'] && _0x33f5x9 - _0x33f5x3 < _0x33f5x2['bottom'];
    },
    collectRowsStep: function(_0x33f5x8, _0x33f5xd, _0x33f5xa, _0x33f5x6, _0x33f5x2) {
        var _0x33f5xc = this, _0x33f5x5 = _0x33f5xc['normalView']['all']['endIndex'], _0x33f5xe = _0x33f5xc['component']['store']['getCount'](), _0x33f5x3 = _0x33f5x2['rowsRange'], _0x33f5xb = _0x33f5xc['normalView']['all']['slice'](_0x33f5xd), _0x33f5x1 = _0x33f5xc['lockedView']['all']['slice'](_0x33f5xd), _0x33f5x4 = 0;
        var _0x33f5x9;
        if (_0x33f5x3) {
            _0x33f5x9 = _0x33f5x3[1];
        }
        var _0x33f5x11 = false;
        for (var _0x33f5x7 = _0x33f5xd; _0x33f5x4 < _0x33f5xb['length']; _0x33f5x4++) {
            if (_0x33f5x7 > _0x33f5x9) {
                _0x33f5x11 = true;
                break;
            }
            _0x33f5x1[_0x33f5x4] && _0x33f5xc['collectLockedRow'](_0x33f5x1[_0x33f5x4], _0x33f5x7, _0x33f5x2);
            _0x33f5xc['collectNormalRow'](_0x33f5xb[_0x33f5x4], _0x33f5x7, _0x33f5x2);
            _0x33f5x7++;
        }
        _0x33f5xc['fireEvent']('collectrows', _0x33f5xc, _0x33f5xd, _0x33f5x7, _0x33f5xe);
        if (!_0x33f5x11 && _0x33f5xc['isBuffered']()) {
            if (_0x33f5x5 + 1 < _0x33f5xe) {
                _0x33f5xc['callAsync'](function() {
                    _0x33f5xc['scrollTo'](_0x33f5x5 + 1, function() {
                        _0x33f5x8(_0x33f5x5 + 1, _0x33f5xa, _0x33f5x6, _0x33f5x2);
                    });
                });
            } else {
                _0x33f5xc['callAsync'](function() {
                    _0x33f5xc['scrollTo'](0, function() {
                        _0x33f5xa['call'](_0x33f5x6 || _0x33f5xc, _0x33f5xc['lockedRows'], _0x33f5xc['normalRows']);
                    });
                });
            }
        } else {
            _0x33f5xa['call'](_0x33f5x6 || _0x33f5xc, _0x33f5xc['lockedRows'], _0x33f5xc['normalRows']);
        }
    },
    renderPages: function(_0x33f5x2) {
        var _0x33f5x4 = this;
        _0x33f5x2 = _0x33f5x2 || _0x33f5x4['extractedPages'];
        for (var _0x33f5x3 = 0, _0x33f5x1 = _0x33f5x2['length']; _0x33f5x3 < _0x33f5x1; _0x33f5x3++) {
            var _0x33f5x5 = _0x33f5x2[_0x33f5x3];
            _0x33f5x5['html'] = _0x33f5x4['applyPageTpl'](_0x33f5x5);
        }
        return _0x33f5x2;
    },
    applyPageTpl: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return _0x33f5x1['getTpl']()['apply'](_0x33f5x1['getPageTplData'](_0x33f5x2));
    },
    applyHeaderTpl: function(_0x33f5x1) {
        var _0x33f5x3 = this, _0x33f5x5 = _0x33f5x3['getHeaderTpl']();
        if (_0x33f5x3['exportConfig']['showHeader'] && _0x33f5x5) {
            var _0x33f5x2 = _0x33f5x3['headerTplDataFn'];
            var _0x33f5x4 = _0x33f5x2 && _0x33f5x2['call'](_0x33f5x3['headerTplDataFnScope'] || _0x33f5x3, _0x33f5x1);
            return _0x33f5x5['apply'](Ext.apply(_0x33f5x3['getHeaderTplData'](_0x33f5x1), _0x33f5x4));
        }
        return '';
    },
    applyFooterTpl: function(_0x33f5x1) {
        var _0x33f5x3 = this, _0x33f5x5 = _0x33f5x3['getFooterTpl']();
        if (_0x33f5x3['exportConfig']['showFooter'] && _0x33f5x5) {
            var _0x33f5x2 = _0x33f5x3['footerTplDataFn'];
            var _0x33f5x4 = _0x33f5x2 && _0x33f5x2['call'](_0x33f5x3['footerTplDataFnScope'] || _0x33f5x3, _0x33f5x1);
            return _0x33f5x5['apply'](Ext.apply(_0x33f5x3['getFooterTplData'](_0x33f5x1), _0x33f5x4));
        }
        return '';
    },
    getHeaderTplData: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return {
            width: _0x33f5x1['paperWidth'],
            height: _0x33f5x1['pageHeaderHeight'],
            totalPages: _0x33f5x1['numberOfPages'],
            pageNo: _0x33f5x2['number']
        };
    },
    getFooterTplData: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return {
            width: _0x33f5x1['paperWidth'],
            height: _0x33f5x1['pageFooterHeight'],
            totalPages: _0x33f5x1['numberOfPages'],
            pageNo: _0x33f5x2['number']
        };
    },
    getPageTplData: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return {
            bodyClasses: _0x33f5x1['getBodyClasses'](),
            bodyHeight: _0x33f5x1['printHeight'] + _0x33f5x1['headerHeight'],
            componentClasses: _0x33f5x1['getComponentClasses'](),
            styles: _0x33f5x1['getStylesheets'](),
            showHeader: _0x33f5x1['exportConfig']['showHeader'],
            showFooter: _0x33f5x1['exportConfig']['showFooter'],
            header: _0x33f5x1['applyHeaderTpl'](_0x33f5x2),
            HTML: _0x33f5x2['html'],
            footer: _0x33f5x1['applyFooterTpl'](_0x33f5x2),
            totalWidth: _0x33f5x1['paperWidth'],
            pageNo: _0x33f5x2['number'],
            totalPages: _0x33f5x1['numberOfPages'],
            title: _0x33f5x2['number'] + ' of ' + _0x33f5x1['numberOfPages']
        };
    },
    fitComponentIntoPage: Ext.emptyFn,
    getLockedGridBody: function(_0x33f5x2) {
        _0x33f5x2 = _0x33f5x2 || this['getCurrentPage']();
        return _0x33f5x2['down'](this['lockedBodySelector'] + ' ' + this['tableSelector'], true);
    },
    getNormalGridBody: function(_0x33f5x2) {
        _0x33f5x2 = _0x33f5x2 || this['getCurrentPage']();
        return _0x33f5x2['down'](this['normalBodySelector'] + ' ' + this['tableSelector'], true);
    },
    emptyLockedGrid: function(_0x33f5x2) {
        Ext.fly(this['getLockedGridBody'](_0x33f5x2))['select'](this['lockedView']['getItemSelector']())['remove']();
    },
    fillGrids: function(_0x33f5x3, _0x33f5x1, _0x33f5x5, _0x33f5x2) {
        var _0x33f5x4 = this;
        _0x33f5x4['fillLockedGrid'](_0x33f5x3, _0x33f5x5, _0x33f5x2);
        _0x33f5x4['fillNormalGrid'](_0x33f5x1, _0x33f5x5, _0x33f5x2);
    },
    fillLockedGrid: function(_0x33f5x3, _0x33f5x4, _0x33f5x2) {
        var _0x33f5x1 = this;
        if (!_0x33f5x2) {
            _0x33f5x1['emptyLockedGrid']();
        }
        _0x33f5x1['appendRows'](_0x33f5x1['getLockedGridBody'](), _0x33f5x3 || _0x33f5x1['lockedRows'], _0x33f5x4);
    },
    fillNormalGrid: function(_0x33f5x3, _0x33f5x4, _0x33f5x2) {
        var _0x33f5x1 = this;
        if (!_0x33f5x2) {
            _0x33f5x1['emptyNormalGrid']();
        }
        _0x33f5x1['appendRows'](_0x33f5x1['getNormalGridBody'](), _0x33f5x3 || _0x33f5x1['normalRows'], _0x33f5x4);
    },
    appendRows: function(_0x33f5x4, _0x33f5x3, _0x33f5x5) {
        for (var _0x33f5x1 = 0, _0x33f5x2 = _0x33f5x3['length']; _0x33f5x1 < _0x33f5x2; _0x33f5x1++) {
            _0x33f5x4['appendChild'](_0x33f5x5 ? _0x33f5x3[_0x33f5x1]['row']['cloneNode'](true) : _0x33f5x3[_0x33f5x1]['row']);
        }
    },
    emptyNormalGrid: function(_0x33f5x2) {
        Ext.fly(this['getNormalGridBody'](_0x33f5x2))['select'](this['normalView']['getItemSelector']())['remove']();
    },
    getRowHeight: function() {
        return this['view']['timeAxisViewModel']['getViewRowHeight']();
    },
    getTotalSize: function() {
        return {
            width: this['getTotalWidth'](),
            height: this['getTotalHeight']()
        };
    },
    getTotalHeight: function() {
        var _0x33f5x1 = this, _0x33f5x2;
        if (_0x33f5x1['isBuffered']()) {
            _0x33f5x2 = _0x33f5x1['bufferedHeightMargin'] + _0x33f5x1['normalRowsHeight'];
        } else {
            _0x33f5x2 = _0x33f5x1['lockedView']['getEl']()['down'](_0x33f5x1['tableSelector'])['getHeight']();
        }
        return _0x33f5x1['headerHeight'] + _0x33f5x2;
    },
    getTotalWidth: function() {
        return this['getLockedGridWidth']() + this['normalGrid']['body']['down'](this['tableSelector'])['getWidth']();
    },
    getLockedGridWidth: function() {
        return this['lockedHeader']['getEl']()['first']()['getWidth']();
    },
    getNormalGridWidth: function() {
        return this['normalHeader']['getEl']()['first']()['getWidth']();
    },
    preparePageToCommit: function() {
        var _0x33f5x11 = this['getCurrentPage'](), _0x33f5xe = this['component'], _0x33f5x4 = _0x33f5xe['lockedGrid'], _0x33f5x7 = _0x33f5xe['normalGrid'], _0x33f5xf = _0x33f5x11['down']('.sch-secondary-canvas', true);
        _0x33f5x11['select']('.sch-remove')['remove']();
        var _0x33f5x3 = function(_0x33f5xa) {
            return _0x33f5x11['down']('#' + _0x33f5xa, true);
        }, _0x33f5xd = function(_0x33f5xa) {
            if (_0x33f5xa) {
                _0x33f5xa['style']['width'] = '100%';
            }
        }, _0x33f5x8 = function(_0x33f5xa) {
            if (_0x33f5xa) {
                _0x33f5xa['style']['height'] = '100%';
            }
        };
        var _0x33f5x2 = _0x33f5x11['down'](this['normalBodySelector'], true);
        _0x33f5x2['style']['top'] = '0px';
        var _0x33f5xb = _0x33f5x11['down'](this['lockedBodySelector'], true);
        _0x33f5xb['style']['top'] = '0px';
        var _0x33f5xc;
        if (_0x33f5xc = this['getLockedGridBody']()) {
            if (Ext['isIE9m']) {
                _0x33f5xc['style']['top'] = '';
            } else {
                _0x33f5xc['style']['transform'] = '';
            }
        }
        var _0x33f5x9;
        if (_0x33f5x9 = this['getNormalGridBody']()) {
            if (Ext['isIE9m']) {
                _0x33f5x9['style']['top'] = '';
            } else {
                _0x33f5x9['style']['transform'] = '';
            }
        }
        if (_0x33f5xf) {
            _0x33f5xf['style']['top'] = this['secondaryCanvasOffset'] + 'px';
            Ext.fly(_0x33f5xf)['select']('.sch-column-line')['setHeight'](this['normalRowsHeight']);
        }
        var _0x33f5x5 = [ _0x33f5x3(_0x33f5xe['id'] + '-targetEl'), _0x33f5x3(_0x33f5xe['id'] + '-innerCt'), _0x33f5x3(_0x33f5x4['id']), _0x33f5x3(_0x33f5x4['body']['id']), _0x33f5x3(_0x33f5x4['view']['el']['id']) ];
        Ext.Array['each'](_0x33f5x5, _0x33f5x8);
        _0x33f5xd(_0x33f5x5[0]);
        _0x33f5xd(_0x33f5x5[1]);
        if (!Ext['isIE']) {
            _0x33f5xd(_0x33f5x3(_0x33f5x7['headerCt']['id']));
        } else {
            var _0x33f5x1 = _0x33f5x3(_0x33f5x7['headerCt']['id']);
            if (_0x33f5x1) {
                _0x33f5x1['style']['width'] = '';
            }
        }
        Ext.Array['each']([ _0x33f5x3(_0x33f5x7['id']), _0x33f5x3(_0x33f5x7['body']['id']), _0x33f5x3(_0x33f5x7['getView']()['id']) ], function(_0x33f5xa) {
            if (_0x33f5xa) {
                _0x33f5xa['style']['height'] = _0x33f5xa['style']['width'] = '100%';
            }
        });
        return _0x33f5x11;
    },
    startPage: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        var _0x33f5x3 = (_0x33f5x1 || _0x33f5x2['getComponent']()['body'])['dom']['cloneNode'](true);
        _0x33f5x3['id'] = '';
        _0x33f5x2['setCurrentPage'](Ext.get(_0x33f5x3));
    },
    scrollTo: function(_0x33f5x2, _0x33f5x5, _0x33f5x3) {
        var _0x33f5x4 = this;
        if (_0x33f5x4['component']['ensureVisible']) {
            var _0x33f5x1 = _0x33f5x4['component']['store']['getAt'](_0x33f5x2);
            _0x33f5x4['component']['ensureVisible'](_0x33f5x1, {
                callback: function() {
                    if (_0x33f5x5 && this['isLocked'] === false) {
                        _0x33f5x5['apply'](_0x33f5x3 || _0x33f5x4);
                    }
                },
                select: false,
                focus: false,
                animate: false
            });
        } else {
            _0x33f5x4['lockedView']['bufferedRenderer']['scrollTo'](_0x33f5x2, false, function() {
                _0x33f5x4['normalView']['bufferedRenderer']['scrollTo'](_0x33f5x2, false, _0x33f5x5, _0x33f5x3 || _0x33f5x4);
            });
        }
    },
    removeNode: function(_0x33f5x1) {
        if (_0x33f5x1 && _0x33f5x1['parentNode']) {
            _0x33f5x1['parentNode']['removeChild'](_0x33f5x1);
        } else {
            if (_0x33f5x1['elements']) {
                for (var _0x33f5x2 = 0; _0x33f5x2 < _0x33f5x1['elements']['length']; _0x33f5x2++) {
                    var _0x33f5x3 = _0x33f5x1['elements'][_0x33f5x2];
                    _0x33f5x3['parentNode']['removeChild'](_0x33f5x3);
                }
            }
        }
    },
    restoreInfiniteScroll: function(_0x33f5x1) {
        var _0x33f5x2 = _0x33f5x1['getSchedulingView']();
        if (_0x33f5x1['infiniteScroll'] && _0x33f5x2['rendered']) {
            _0x33f5x1['timeAxis']['setTimeSpan'](this._oldStart, this._oldEnd);
            _0x33f5x2['setScrollX'](this._oldScrollX);
            _0x33f5x2['bindInfiniteScrollListeners']();
        }
    },
    suspendInfiniteScroll: function(_0x33f5x1) {
        var _0x33f5x2 = _0x33f5x1['getSchedulingView']();
        if (_0x33f5x1['infiniteScroll'] && _0x33f5x2['rendered']) {
            _0x33f5x2['unbindInfiniteScrollListeners']();
            this['_oldStart'] = _0x33f5x1['timeAxis']['getStart']();
            this['_oldEnd'] = _0x33f5x1['timeAxis']['getEnd']();
            this['_oldScrollX'] = _0x33f5x2['getScrollX']();
            var _0x33f5x3 = _0x33f5x1['getEventStore']()['getTotalTimeSpan']();
            _0x33f5x1['setTimeSpan'](_0x33f5x3['start'], _0x33f5x3['end']);
        }
    }
});

Ext.define('Ext.ux.Scheduler.plugin.exporter.mixin.DependencyPainter', {
    extend: Ext.Mixin,
    mixinConfig: {
        after: {
            setComponent: 'initDependencyPainter',
            collectNormalRow: 'collectRowBoxes'
        },
        before: {
            onRowsCollected: 'renderDependencies'
        }
    },
    eventBoxes: null,
    dependencyPainter: null,
    dependenciesHtml: '',
    initDependencyPainter: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getComponent']()['getDependencyView']();
        if (_0x33f5x2) {
            _0x33f5x1['dependencyPainter'] = _0x33f5x2['clonePainter']();
           Ext.override(_0x33f5x1['dependencyPainter'], {
                exporter: _0x33f5x1,
                getItemBox: _0x33f5x1['getItemBox']
            });
        }
        _0x33f5x1['depView'] = _0x33f5x2;
        _0x33f5x1['eventBoxes'] = {};
    },
    collectRowBoxes: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x1 = this, _0x33f5x4 = _0x33f5x1['normalRows'][_0x33f5x1['normalRows']['length'] - 1];
        if (_0x33f5x1['depView'] && _0x33f5x1['depView']['getDependencyStore']()) {
            _0x33f5x1['fillRecordRelatedBoxes'](_0x33f5x4['record']);
        }
    },
    fillRecordRelatedBoxes: function(_0x33f5x8) {
        var _0x33f5x9 = this, _0x33f5x7 = _0x33f5x9['normalView'], _0x33f5xb = _0x33f5x9['depView']['painter'], _0x33f5x2 = _0x33f5x9['depView']['getDependencyStore']();
        var _0x33f5x11 = _0x33f5x8['getEvents']();
        for (var _0x33f5x3 = 0; _0x33f5x3 < _0x33f5x11['length']; _0x33f5x3++) {
            var _0x33f5x1 = _0x33f5x11[_0x33f5x3];
            if (_0x33f5x2['getEventDependencies'](_0x33f5x1)['length']) {
                var _0x33f5x5 = _0x33f5xb['getItemBox'](_0x33f5x7, _0x33f5x1);
                for (var _0x33f5x4 = 0; _0x33f5x4 < _0x33f5x5['length']; _0x33f5x4++) {
                    _0x33f5x5[_0x33f5x4]['top'] += _0x33f5x7['bufferedRenderer']['bodyTop'];
                    _0x33f5x5[_0x33f5x4]['bottom'] += _0x33f5x7['bufferedRenderer']['bodyTop'];
                    _0x33f5x5[_0x33f5x4]['rendered'] = true;
                }
                _0x33f5x9['eventBoxes'][_0x33f5x1['internalId']] = _0x33f5x5;
            }
        }
    },
    renderDependencies: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['depView'];
        if (_0x33f5x2 && _0x33f5x2['getDependencyStore']()) {
            if (_0x33f5x2['getDrawDependencies']()) {
                _0x33f5x1['dependenciesHtml'] = _0x33f5x1['dependencyPainter']['generatePaintMarkup'](_0x33f5x2['getPrimaryView'](), _0x33f5x2['getDependencyStore']()['getRange']());
            } else {
                _0x33f5x1['dependenciesHtml'] = '';
            }
        }
    },
    getItemBox: function(_0x33f5x4, _0x33f5x2) {
        var _0x33f5x3 = this, _0x33f5x1 = _0x33f5x3['exporter']['eventBoxes'][_0x33f5x2['internalId']];
        return _0x33f5x1 || this['callParent'](arguments);
    }
});

Ext.define('Ext.ux.Scheduler.plugin.exporter.SinglePage', {
    extend: Ext.ux.Scheduler.plugin.exporter.AbstractExporter,
    mixins: [ Ext.ux.Scheduler.plugin.exporter.mixin.DependencyPainter ],
    config: {
        exporterId: 'singlepage'
    },
    getExpectedNumberOfPages: function() {
        return 1;
    },
    getPaperFormat: function() {
        var _0x33f5x5 = this, _0x33f5x3 = _0x33f5x5['getTotalSize'](), _0x33f5x1 = _0x33f5x5['exportConfig']['DPI'], _0x33f5x4 = Ext['Number']['toFixed'](_0x33f5x3['width'] / _0x33f5x1, 1), _0x33f5x2 = Ext['Number']['toFixed'](_0x33f5x3['height'] / _0x33f5x1, 1);
        return _0x33f5x4 + 'in*' + _0x33f5x2 + 'in';
    },
    onRowsCollected: function() {
        var _0x33f5x2 = this;
        _0x33f5x2['startPage']();
        _0x33f5x2['fillGrids']();
        _0x33f5x2['commitPage']();
        _0x33f5x2['onPagesExtracted']();
    },
    getPageTplData: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getTotalSize']();
        return Ext.apply(_0x33f5x1['callParent'](arguments), {
            bodyHeight: _0x33f5x2['height'],
            totalWidth: _0x33f5x2['width']
        });
    },
    getHeaderTplData: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return Ext.apply(_0x33f5x1['callParent'](arguments), {
            width: _0x33f5x1['getTotalWidth'](),
            height: _0x33f5x1['pageHeaderHeight']
        });
    },
    getFooterTplData: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return Ext.apply(_0x33f5x1['callParent'](arguments), {
            width: _0x33f5x1['getTotalWidth'](),
            height: _0x33f5x1['pageHeaderHeight']
        });
    },
    fitComponentIntoPage: function() {
        var _0x33f5x2 = this, _0x33f5x1 = _0x33f5x2['lockedGrid'];
        _0x33f5x1['setWidth'](_0x33f5x1['headerCt']['getEl']()['first']()['getWidth']());
    },
    preparePageToCommit: function() {
        var _0x33f5xf = this, _0x33f5xb = _0x33f5xf['callParent'](arguments), _0x33f5x7 = _0x33f5xb['select']('.sch-secondary-canvas')['first'](), _0x33f5x4 = _0x33f5x7['select']('.sch-zone'), _0x33f5x11 = _0x33f5x7['select']('.sch-column-line'), _0x33f5xe = _0x33f5xf['getTotalHeight']();
        _0x33f5x7['setTop'](0);
        _0x33f5x4['setHeight'](_0x33f5xe);
        _0x33f5x11['setHeight'](_0x33f5xe);
        var _0x33f5x5 = _0x33f5xb['selectNode']('.sch-dependencyview-ct');
        if (_0x33f5x5) {
            _0x33f5x5['innerHTML'] = _0x33f5xf['dependenciesHtml'];
            _0x33f5x5['style']['top'] = '0px';
            _0x33f5x5['style']['left'] = '0px';
            _0x33f5x5['style']['visibility'] = 'visible';
        }
        var _0x33f5x9 = _0x33f5xf['component']['normalGrid'], _0x33f5x8 = _0x33f5x9['el']['down'](_0x33f5xf['tableSelector'])['getWidth'](), _0x33f5x1 = _0x33f5x9['getView']()['id'], _0x33f5x3 = _0x33f5xb['select']('#' + _0x33f5x1)['first']()['dom'];
        _0x33f5x3['style']['width'] = _0x33f5x8 + 'px';
        var _0x33f5x2 = _0x33f5xb['selectNode']('.' + Ext['baseCSSPrefix'] + 'splitter');
        if (_0x33f5x2) {
            _0x33f5x2['style']['height'] = '100%';
        }
        return _0x33f5xb;
    }
});

Ext.define('Ext.ux.Scheduler.plugin.exporter.MultiPage', {
    extend: Ext.ux.Scheduler.plugin.exporter.AbstractExporter,
    mixins: [ Ext.ux.Scheduler.plugin.exporter.mixin.DependencyPainter ],
    config: {
        exporterId: 'multipage'
    },
    rowPageIndex: 0,
    columnPageIndex: 0,
    pagesPerColumn: 0,
    depsTopOffset: 0,
    onRowsCollected: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this;
        _0x33f5x3['depsTopOffset'] = -_0x33f5x3['firstExportedRowOffset'];
        _0x33f5x3['rowPageIndex'] = 0;
        _0x33f5x3['columnPageIndex'] = 0;
        _0x33f5x3['pagesPerColumn'] = 0;
        _0x33f5x3['buildPageFrames'](function() {
            _0x33f5x3['buildPages'](_0x33f5x3['onPagesExtracted'], _0x33f5x3, _0x33f5x1, _0x33f5x2);
        });
    },
    buildPages: function(_0x33f5x8, _0x33f5x3, _0x33f5x1, _0x33f5x2) {
        var _0x33f5x4 = this, _0x33f5x5 = _0x33f5x4['pageFrames'][0];
        _0x33f5x4['startPage'](_0x33f5x5, true);
        this['iterateAsync'](_0x33f5x4['rowIteratorStep'], _0x33f5x4, {
            rowIndex: 0,
            pageFrame: _0x33f5x5,
            rowsHeight: 0,
            leftHeight: this['printHeight'],
            lockeds: [],
            normals: [],
            lockedRows: _0x33f5x1,
            normalRows: _0x33f5x2,
            callback: _0x33f5x8,
            scope: _0x33f5x3 || _0x33f5x4
        });
    },
    rowIteratorStep: function(_0x33f5x9, _0x33f5x2) {
        var _0x33f5xe = this, _0x33f5xb = _0x33f5x2['rowIndex'], _0x33f5x1 = _0x33f5x2['lockedRows'], _0x33f5x7 = _0x33f5x2['normalRows'], _0x33f5xf = _0x33f5x2['leftHeight'], _0x33f5x4 = _0x33f5x2['lockeds'], _0x33f5x11 = _0x33f5x2['normals'], _0x33f5x3 = true;
        if (_0x33f5xb < _0x33f5x7['length']) {
            var _0x33f5x8 = _0x33f5x1[_0x33f5xb], _0x33f5x5 = _0x33f5x7[_0x33f5xb];
            if (_0x33f5x5['height'] <= _0x33f5xf) {
                _0x33f5x4['push'](_0x33f5x8);
                _0x33f5x11['push'](_0x33f5x5);
                _0x33f5x2['leftHeight'] -= _0x33f5x5['height'];
                _0x33f5x2['rowsHeight'] += _0x33f5x5['height'];
                _0x33f5x3 = false;
            } else {
                _0x33f5xe['fillGrids'](_0x33f5x4, _0x33f5x11, _0x33f5x2['pageFrame']);
                _0x33f5xe['commitPage']({
                    rowsHeight: _0x33f5x2['rowsHeight']
                });
                _0x33f5xe['startPage'](_0x33f5x2['pageFrame']);
                _0x33f5x2['lockeds'] = [ _0x33f5x8 ];
                _0x33f5x2['normals'] = [ _0x33f5x5 ];
                _0x33f5x2['leftHeight'] = _0x33f5xe['printHeight'] - _0x33f5x5['height'];
                _0x33f5x2['rowsHeight'] = _0x33f5x5['height'];
            }
            _0x33f5x2['rowIndex']++;
        } else {
            if (_0x33f5xe['columnPageIndex'] < _0x33f5xe['pageFrames']['length']) {
                _0x33f5xe['fillGrids'](_0x33f5x4, _0x33f5x11, _0x33f5x2['pageFrame']);
                _0x33f5xe['commitPage']({
                    rowsHeight: _0x33f5x2['rowsHeight']
                });
                _0x33f5x2['pageFrame'] = _0x33f5xe['pageFrames'][_0x33f5xe['columnPageIndex']];
                _0x33f5xe['startPage'](_0x33f5x2['pageFrame'], true);
                _0x33f5x2['leftHeight'] = _0x33f5xe['printHeight'];
                _0x33f5x2['rowsHeight'] = 0;
                _0x33f5x2['lockeds'] = [];
                _0x33f5x2['normals'] = [];
                _0x33f5x2['rowIndex'] = 0;
            } else {
                _0x33f5xe['fillGrids'](_0x33f5x4, _0x33f5x11, _0x33f5x2['pageFrame']);
                _0x33f5xe['commitPage']({
                    rowsHeight: _0x33f5x2['rowsHeight']
                });
                _0x33f5x2['callback']['call'](_0x33f5x2['scope']);
                return;
            }
        }
        if (_0x33f5x3) {
            _0x33f5x9(_0x33f5x2);
        } else {
            _0x33f5xe['rowIteratorStep'](_0x33f5x9, _0x33f5x2);
        }
    },
    fillGrids: function(_0x33f5x5, _0x33f5x4, _0x33f5x8) {
        var _0x33f5x3 = this, _0x33f5x1 = _0x33f5x3['lockedColumnPages'][_0x33f5x3['columnPageIndex'] - 1], _0x33f5x2 = !_0x33f5x1 || _0x33f5x1 && _0x33f5x1['leftWidth'];
        if (_0x33f5x1) {
            _0x33f5x3['fillLockedGrid'](_0x33f5x5, true);
            _0x33f5x3['removeHiddenLockedColumns'](_0x33f5x1);
        }
        if (_0x33f5x2) {
            _0x33f5x3['fillNormalGrid'](_0x33f5x4, true);
            _0x33f5x3['removeInvisibleEvents'](-_0x33f5x8['normalGridOffset'], -_0x33f5x8['normalGridOffset'] + _0x33f5x8['normalGridWidth']);
        }
    },
    buildPageFrame: function(_0x33f5x7, _0x33f5x1) {
        var _0x33f5x8 = this, _0x33f5xe = _0x33f5x8['lockedColumnPages'][_0x33f5x7];
        if (_0x33f5xe) {
            _0x33f5x8['lockedGrid']['setWidth'](_0x33f5x8['showLockedColumns'](_0x33f5xe['start'], _0x33f5xe['end']) + (_0x33f5xe['startOffset'] || 0));
            if (_0x33f5xe['leftWidth']) {
                _0x33f5x8['normalGrid']['show']();
            } else {
                _0x33f5x8['normalGrid']['hide']();
            }
        } else {
            _0x33f5x8['lockedGrid']['setWidth'](0);
            _0x33f5x8['lockedGrid']['hide']();
            _0x33f5x8['normalGrid']['show']();
        }
        var _0x33f5x2 = _0x33f5x8['getComponent']()['body']['dom']['cloneNode'](true);
        _0x33f5x2['id'] = '';
        _0x33f5x2 = Ext.get(_0x33f5x2);
        _0x33f5x2['normalGridOffset'] = _0x33f5x1;
        _0x33f5x2['lockedGridOffset'] = _0x33f5xe && _0x33f5xe['startOffset'] || 0;
        _0x33f5x2['normalGridWidth'] = _0x33f5x8['normalGrid']['getWidth']();
        _0x33f5x2['lockedGridWidth'] = _0x33f5x8['lockedGrid']['getWidth']();
        _0x33f5x2['down'](_0x33f5x8['lockedBodySelector'], true)['style']['position'] = '';
        _0x33f5x2['down']('#' + _0x33f5x8['lockedView']['id'], true)['style']['overflow'] = 'visible';
        if (!_0x33f5x8['normalGrid']['hidden']) {
            var _0x33f5xf = _0x33f5x2['select'](_0x33f5x8['normalBodySelector'])['first']();
            _0x33f5xf['dom']['style']['position'] = '';
            _0x33f5xf['dom']['style']['top'] = '0px';
            var _0x33f5x4 = _0x33f5x8['getNormalGridBody'](_0x33f5x2);
            var _0x33f5x3 = _0x33f5x2['down']('#' + _0x33f5x8['normalView']['headerCt']['id'], true);
            var _0x33f5x5 = _0x33f5x2['down']('.sch-secondary-canvas', true);
            var _0x33f5x9 = _0x33f5x2['down']('#' + _0x33f5x8['normalView']['id'], true);
            _0x33f5x4['style']['left'] = _0x33f5x1 + 'px';
            _0x33f5x3['style']['left'] = _0x33f5x1 + 'px';
            _0x33f5x3['style']['overflow'] = 'visible';
            _0x33f5x5['style']['left'] = _0x33f5x1 + 'px';
            _0x33f5x9['style']['overflow'] = 'visible';
        }
        return _0x33f5x2;
    },
    buildPageFrames: function(_0x33f5x5, _0x33f5x3) {
        var _0x33f5x4 = this;
        _0x33f5x3 = _0x33f5x3 || _0x33f5x4;
        _0x33f5x4['lockedColumnPages'] = _0x33f5x4['calculateLockedColumnPages']();
        var _0x33f5x2 = Math['ceil'](_0x33f5x4['getTotalWidth']() / _0x33f5x4['paperWidth']), _0x33f5x1 = _0x33f5x4['pageFrames'] = [];
        _0x33f5x4['iterateAsync'](function(_0x33f5x7, _0x33f5x9, _0x33f5xf) {
            if (_0x33f5x9 >= _0x33f5x2) {
                _0x33f5x5['call'](_0x33f5x3, _0x33f5x1);
                return;
            }
            _0x33f5x1['push'](_0x33f5x4['buildPageFrame'](_0x33f5x9, _0x33f5xf));
            var _0x33f5x8 = _0x33f5x4['lockedColumnPages'][_0x33f5x9];
            if (_0x33f5x8) {
                _0x33f5xf -= _0x33f5x8['leftWidth'] || 0;
            } else {
                _0x33f5xf -= _0x33f5x4['paperWidth'];
            }
            _0x33f5x7(_0x33f5x9 + 1, _0x33f5xf);
        }, _0x33f5x4, 0, 0);
    },
    startPage: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x1 = this;
        if (_0x33f5x2) {
            _0x33f5x1['depsTopOffset'] = -_0x33f5x1['firstExportedRowOffset'];
            if (_0x33f5x1['columnPageIndex'] == 1) {
                _0x33f5x1['pagesPerColumn'] = _0x33f5x1['extractedPages']['length'];
            }
            _0x33f5x1['rowPageIndex'] = 0;
            _0x33f5x1['columnPageIndex']++;
            _0x33f5x1['secondaryCanvasOffset'] = _0x33f5x1['firstExportedRowOffset'];
        }
        _0x33f5x1['rowPageIndex']++;
        _0x33f5x1['callParent'](arguments);
        _0x33f5x1['emptyNormalGrid']();
        _0x33f5x1['emptyLockedGrid']();
    },
    commitPage: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['callParent']([ Ext.apply({
            row: _0x33f5x1['rowPageIndex'],
            column: _0x33f5x1['columnPageIndex']
        }, _0x33f5x2) ]);
        _0x33f5x1['secondaryCanvasOffset'] -= _0x33f5x2['rowsHeight'];
        _0x33f5x1['depsTopOffset'] -= _0x33f5x2['rowsHeight'];
    },
    getExpectedPagesPerColumn: function() {
        return this['pagesPerColumn'] || Math['ceil']((this['normalRowsHeight'] || this['component']['store']['count']() * this['component']['getRowHeight']()) / this['printHeight']);
    },
    getExpectedColumnsNumber: function() {
        return this['pageFrames'] ? this['pageFrames']['length'] : Math['ceil']((this['lockedGrid']['getWidth']() + this['ticks']['length'] * this['view']['timeAxisViewModel']['getTickWidth']()) / this['paperWidth']);
    },
    getExpectedNumberOfPages: function() {
        return this['getExpectedColumnsNumber']() * this['getExpectedPagesPerColumn']();
    },
    calculateLockedColumnPages: function() {
        var _0x33f5x7 = this, _0x33f5xe = [], _0x33f5x3 = _0x33f5x7['lockedColumns'], _0x33f5x5 = _0x33f5x7['paperWidth'], _0x33f5x9;
        for (var _0x33f5x8 = 0, _0x33f5x4 = _0x33f5x3['length']; _0x33f5x8 < _0x33f5x4; _0x33f5x8++) {
            var _0x33f5x1 = _0x33f5x3[_0x33f5x8], _0x33f5x2 = _0x33f5x1['width'];
            _0x33f5x9 = _0x33f5x9 || {
                start: _0x33f5x8,
                end: _0x33f5x8
            };
            _0x33f5x5 -= _0x33f5x2;
            if (_0x33f5x5 < 0) {
                _0x33f5xe['push'](_0x33f5x9);
                if (_0x33f5x5) {
                    _0x33f5x9 = {
                        start: _0x33f5x8,
                        end: _0x33f5x8
                    };
                }
                _0x33f5x5 = _0x33f5x7['paperWidth'] - _0x33f5x2 + _0x33f5x5;
            } else {
                _0x33f5x9['end'] = _0x33f5x8;
            }
        }
        if (_0x33f5x9) {
            _0x33f5x9['leftWidth'] = _0x33f5x5;
            _0x33f5xe['push'](_0x33f5x9);
        }
        return _0x33f5xe;
    },
    getPageTplData: function(_0x33f5x2) {
        return Ext.apply(this['callParent'](arguments), {
            title: _0x33f5x2['number'] + ' of ' + this['numberOfPages'] + ' (column: ' + _0x33f5x2['column'] + ', row: ' + _0x33f5x2['row'] + ')'
        });
    },
    showLockedColumns: function(_0x33f5x5, _0x33f5x9) {
        var _0x33f5x8 = this, _0x33f5x1 = _0x33f5x8['lockedColumns'], _0x33f5x4 = 0;
        _0x33f5x5 = _0x33f5x5 || 0;
        _0x33f5x9 = _0x33f5x9 || _0x33f5x1['length'] - 1;
        for (var _0x33f5x2 = 0; _0x33f5x2 < _0x33f5x1['length']; _0x33f5x2++) {
            var _0x33f5x3 = _0x33f5x1[_0x33f5x2];
            if (_0x33f5x2 >= _0x33f5x5 && _0x33f5x2 <= _0x33f5x9) {
                _0x33f5x3['column']['show']();
                _0x33f5x4 += _0x33f5x3['width'];
            } else {
                _0x33f5x3['column']['hide']();
            }
        }
        return _0x33f5x4;
    },
    removeInvisibleEvents: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x5 = this, _0x33f5x3 = _0x33f5x5['getNormalGridBody'](), _0x33f5x4 = _0x33f5x5['normalView']['eventSelector'];
        Ext.Array['each'](Ext.fly(_0x33f5x3)['select'](_0x33f5x4)['elements'], function(_0x33f5x9) {
            var _0x33f5x7 = parseInt(_0x33f5x9['style']['left'], 10), _0x33f5x8 = _0x33f5x7 + parseInt(_0x33f5x9['style']['width'], 10);
            if (_0x33f5x8 < _0x33f5x2 || _0x33f5x7 > _0x33f5x1) {
                _0x33f5x5['removeNode'](_0x33f5x9);
            }
        });
    },
    removeHiddenLockedColumns: function(_0x33f5x1) {
        var _0x33f5xe = this, _0x33f5x7 = _0x33f5xe['getCurrentPage'](), _0x33f5x2 = _0x33f5xe['getLockedGridBody']();
        for (var _0x33f5x8 = 0; _0x33f5x8 < _0x33f5xe['lockedColumns']['length']; _0x33f5x8++) {
            var _0x33f5x3 = _0x33f5xe['lockedColumns'][_0x33f5x8]['column'];
            if (_0x33f5x8 < _0x33f5x1['start'] || _0x33f5x8 > _0x33f5x1['end']) {
                var _0x33f5x4 = '#' + _0x33f5x3['getId']();
                var _0x33f5x9 = _0x33f5x7['select'](_0x33f5x4);
                _0x33f5xe['removeNode'](_0x33f5x9);
                var _0x33f5x5 = _0x33f5x3['getCellSelector']();
                var _0x33f5xb = Ext.fly(_0x33f5x2)['select'](_0x33f5x5);
                _0x33f5xe['removeNode'](_0x33f5xb);
            }
        }
    },
    fitComponentIntoPage: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getComponent']();
        _0x33f5x2['setWidth'](_0x33f5x1['paperWidth']);
    },
    prepareComponent: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x4 = this, _0x33f5x3 = _0x33f5x4['lockedColumns'] = [];
        _0x33f5x4['callParent'](arguments);
        _0x33f5x4['lockedGrid']['headerCt']['items']['each'](function(_0x33f5x5) {
            if (!_0x33f5x5['hidden']) {
                _0x33f5x3['push']({
                    column: _0x33f5x5,
                    width: _0x33f5x5['getWidth']()
                });
            }
        });
    },
    restoreComponentState: function() {
        this['callParent'](arguments);
        this['showLockedColumns']();
    },
    preparePageToCommit: function() {
        var _0x33f5x8 = this, _0x33f5x7 = _0x33f5x8['callParent'](arguments), _0x33f5x9 = _0x33f5x7['down']('.' + Ext['baseCSSPrefix'] + 'splitter', true), _0x33f5x1 = _0x33f5x7['selectNode']('.sch-dependencyview-ct'), _0x33f5x5 = _0x33f5x8['pageFrames'][_0x33f5x8['columnPageIndex'] - 1];
        if (_0x33f5x9) {
            if (_0x33f5x5['lockedHidden']) {
                _0x33f5x9['style']['display'] = 'none';
                _0x33f5x7['down']('.' + Ext['baseCSSPrefix'] + 'grid-inner-normal', true)['style']['left'] = 0;
            } else {
                Ext.fly(_0x33f5x9)['setHeight']('100%');
            }
        }
        if (!_0x33f5x5['normalHidden']) {
            if (_0x33f5x1) {
                _0x33f5x1['innerHTML'] = _0x33f5x8['dependenciesHtml'];
                _0x33f5x1['style']['top'] = _0x33f5x8['depsTopOffset'] + 'px';
                _0x33f5x1['style']['visibility'] = 'visible';
            }
            var _0x33f5x3 = _0x33f5x7['selectNode']('#' + _0x33f5x8['normalView']['id']);
            if (_0x33f5x3) {
                var _0x33f5x2 = _0x33f5x8['normalGrid']['el']['down'](_0x33f5x8['tableSelector'])['getWidth']();
                _0x33f5x3['style']['width'] = _0x33f5x2 + 'px';
                _0x33f5x3['style']['overflow'] = 'hidden';
            }
        }
        if (!_0x33f5x5['lockedHidden']) {
            var _0x33f5x4 = _0x33f5x7['selectNode']('#' + _0x33f5x8['lockedView']['id']);
            if (_0x33f5x4) {
                _0x33f5x4['style']['overflow'] = 'hidden';
            }
        }
        return _0x33f5x7;
    }
});

Ext.define('Ext.ux.Scheduler.plugin.exporter.MultiPageVertical', {
    extend: Ext.ux.Scheduler.plugin.exporter.AbstractExporter,
    mixins: [ Ext.ux.Scheduler.plugin.exporter.mixin.DependencyPainter ],
    config: {
        exporterId: 'multipagevertical'
    },
    minRowHeight: 20,
    minAverageColumnWidth: 100,
    visibleColumns: null,
    visibleColumnsWidth: 0,
    depsTopOffset: 0,
    onRowsCollected: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this;
        _0x33f5x3['depsTopOffset'] = -_0x33f5x3['firstExportedRowOffset'];
        _0x33f5x3['iterateAsync'](function(_0x33f5x7, _0x33f5xb) {
            if (_0x33f5xb === _0x33f5x2['length']) {
                _0x33f5x3['onPagesExtracted']();
                return;
            }
            var _0x33f5xf = _0x33f5xb, _0x33f5x9 = _0x33f5x3['printHeight'], _0x33f5xc = 0, _0x33f5x5 = [], _0x33f5x11 = [], _0x33f5x4 = false, _0x33f5xe, _0x33f5x8;
            _0x33f5x3['startPage']();
            while (!_0x33f5x4 && _0x33f5xf < _0x33f5x2['length']) {
                _0x33f5xe = _0x33f5x2[_0x33f5xf];
                _0x33f5x8 = _0x33f5x1[_0x33f5xf];
                _0x33f5x9 -= _0x33f5xe['height'];
                if (_0x33f5x9 > 0) {
                    _0x33f5xc += _0x33f5xe['height'];
                    _0x33f5x8 && _0x33f5x5['push'](_0x33f5x8);
                    _0x33f5x11['push'](_0x33f5xe);
                    _0x33f5xf++;
                } else {
                    _0x33f5x4 = true;
                }
            }
            _0x33f5x3['fillGrids'](_0x33f5x5, _0x33f5x11);
            _0x33f5x3['commitPage']({
                rowIndex: _0x33f5xf,
                rowsHeight: _0x33f5xc
            });
            _0x33f5x3['secondaryCanvasOffset'] -= _0x33f5xc;
            _0x33f5x7(_0x33f5xf);
        }, _0x33f5x3, 0);
    },
    startPage: function() {
        var _0x33f5x1 = this;
        _0x33f5x1['callParent'](arguments);
        var _0x33f5x2 = _0x33f5x1['getCurrentPage']()['select']('#' + _0x33f5x1['lockedView']['id'])['first']();
        _0x33f5x2['dom']['style']['overflow'] = 'visible';
    },
    commitPage: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['callParent'](arguments);
        if (_0x33f5x1['depView'] && _0x33f5x1['depView']['getDependencyStore']()) {
            _0x33f5x1['depsTopOffset'] -= _0x33f5x2['rowsHeight'];
        }
    },
    getExpectedNumberOfPages: function() {
        return Math['ceil'](this['normalRowsHeight'] / this['printHeight']);
    },
    prepareColumns: function(_0x33f5x1) {
        this['callParent'](arguments);
        var _0x33f5x3 = this, _0x33f5x2 = _0x33f5x3['visibleColumns'] = [];
        _0x33f5x3['visibleColumnsWidth'] = 0;
        _0x33f5x3['lockedGrid']['headerCt']['items']['each'](function(_0x33f5x4) {
            if (!_0x33f5x4['hidden']) {
                _0x33f5x2['push']({
                    column: _0x33f5x4,
                    width: _0x33f5x4['getWidth']()
                });
                _0x33f5x3['visibleColumnsWidth'] += _0x33f5x4['getWidth']();
            }
        });
    },
    fitComponentIntoPage: function() {
        var _0x33f5xe = this, _0x33f5xb = _0x33f5xe['getComponent'](), _0x33f5x11 = _0x33f5xb['getSchedulingView'](), _0x33f5xf = _0x33f5xb['normalGrid'], _0x33f5x4 = _0x33f5xb['lockedGrid'], _0x33f5x9 = _0x33f5xe['getTotalWidth'](), _0x33f5xc = _0x33f5xe['ticks'], _0x33f5x8 = _0x33f5xe['timeColumnWidth'] || _0x33f5x11['timeAxisViewModel']['getTickWidth']();
        var _0x33f5x5 = Math['floor'](_0x33f5xe['visibleColumnsWidth'] / _0x33f5x9 * _0x33f5xe['paperWidth']);
        var _0x33f5x3 = _0x33f5xe['visibleColumns']['length'], _0x33f5x1 = _0x33f5x3 * _0x33f5xe['minAverageColumnWidth'];
        _0x33f5x1 = _0x33f5x1 > _0x33f5xe['paperWidth'] / 2 ? Math['floor'](_0x33f5xe['paperWidth'] / 2) : _0x33f5x1;
        _0x33f5x5 = _0x33f5x1 > _0x33f5x5 ? _0x33f5x1 : _0x33f5x5;
        var _0x33f5x2 = _0x33f5xe['paperWidth'] - _0x33f5x5;
        var _0x33f5x7 = _0x33f5x2 / _0x33f5xc['length'];
        _0x33f5xe['setRowHeight'](_0x33f5x7 / _0x33f5x8 * _0x33f5xe['getRowHeight']());
        _0x33f5xb['setWidth'](_0x33f5xe['paperWidth']);
        _0x33f5xf['setWidth'](_0x33f5x2);
        _0x33f5x4['setWidth'](_0x33f5x5);
        _0x33f5xe['fitLockedColumnWidth'](_0x33f5x5);
        _0x33f5xb['setTimeColumnWidth'](_0x33f5x7);
    },
    setRowHeight: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x2['view']['setRowHeight'](_0x33f5x1 < _0x33f5x2['minRowHeight'] ? _0x33f5x2['minRowHeight'] : _0x33f5x1);
    },
    fitLockedColumnWidth: function(_0x33f5x2) {
        var _0x33f5x7 = this, _0x33f5x3 = this['visibleColumns'];
        var _0x33f5x9 = _0x33f5x2 / _0x33f5x7['visibleColumnsWidth'];
        if (_0x33f5x3['length']) {
            for (var _0x33f5x4 = 0; _0x33f5x4 < _0x33f5x3['length']; _0x33f5x4++) {
                var _0x33f5x8 = _0x33f5x3[_0x33f5x4], _0x33f5x1 = _0x33f5x8['width'], _0x33f5x5 = Math['floor'](_0x33f5x1 * _0x33f5x9);
                _0x33f5x8['column']['setWidth'](_0x33f5x5);
            }
            this['_restoreColumnWidth'] = true;
        }
    },
    restoreComponentState: function(_0x33f5x3) {
        var _0x33f5x5 = this;
        _0x33f5x3 = _0x33f5x3 || _0x33f5x5['getComponent']();
        if (this['_restoreColumnWidth']) {
            var _0x33f5x1 = this['visibleColumns'];
            for (var _0x33f5x4 = 0; _0x33f5x4 < _0x33f5x1['length']; _0x33f5x4++) {
                var _0x33f5x2 = _0x33f5x1[_0x33f5x4];
                _0x33f5x2['column']['setWidth'](_0x33f5x2['width']);
            }
        }
        this['callParent'](arguments);
    },
    preparePageToCommit: function() {
        var _0x33f5x5 = this, _0x33f5x9 = _0x33f5x5['callParent'](arguments), _0x33f5x1 = _0x33f5x9['selectNode']('.sch-dependencyview-ct');
        if (_0x33f5x1) {
            _0x33f5x1['innerHTML'] = _0x33f5x5['dependenciesHtml'];
            _0x33f5x1['style']['top'] = _0x33f5x5['depsTopOffset'] + 'px';
            _0x33f5x1['style']['left'] = '0px';
            _0x33f5x1['style']['visibility'] = 'visible';
        }
        var _0x33f5x2 = _0x33f5x5['normalGrid']['el']['down'](_0x33f5x5['tableSelector'])['getWidth']();
        var _0x33f5x3 = _0x33f5x9['selectNode']('#' + _0x33f5x5['normalView']['id']);
        _0x33f5x3['style']['width'] = _0x33f5x2 + 'px';
        _0x33f5x3['style']['overflow'] = 'hidden';
        var _0x33f5x4 = _0x33f5x9['selectNode']('#' + _0x33f5x5['lockedView']['id']);
        _0x33f5x4['style']['overflow'] = 'hidden';
        var _0x33f5x8 = _0x33f5x9['selectNode']('.' + Ext['baseCSSPrefix'] + 'splitter');
        if (_0x33f5x8) {
            _0x33f5x8['style']['height'] = '100%';
        }
        return _0x33f5x9;
    }
});

Ext.define('Ext.ux.Scheduler.widget.ResizePicker', {
    extend: Ext['Panel'],
    alias: 'widget.dualrangepicker',
    width: 200,
    height: 200,
    border: true,
    collapsible: false,
    bodyStyle: 'position:absolute; margin:5px',
    verticalCfg: {
        height: 120,
        value: 24,
        increment: 2,
        minValue: 20,
        maxValue: 80,
        reverse: true,
        disabled: true
    },
    horizontalCfg: {
        width: 120,
        value: 100,
        minValue: 25,
        increment: 5,
        maxValue: 200,
        disable: true
    },
    initComponent: function() {
        var _0x33f5x2 = this;
        _0x33f5x2['horizontalCfg']['value'] = _0x33f5x2['dialogConfig']['columnWidth'];
        _0x33f5x2['verticalCfg']['value'] = _0x33f5x2['dialogConfig']['rowHeight'];
        _0x33f5x2['verticalCfg']['disabled'] = _0x33f5x2['dialogConfig']['scrollerDisabled'] || false;
        _0x33f5x2['dockedItems'] = [ _0x33f5x2['vertical'] = new Ext['slider'].Single(Ext.apply({
            dock: 'left',
            style: 'margin-top:10px',
            vertical: true,
            stateful: _0x33f5x2['dialogConfig']['stateful'],
            stateId: 'exporter_resize_vertical',
            stateEvents: [ 'change' ],
            listeners: {
                change: _0x33f5x2['onSliderChange'],
                changecomplete: _0x33f5x2['onSliderChangeComplete'],
                scope: _0x33f5x2
            }
        }, _0x33f5x2['verticalCfg'])), _0x33f5x2['horizontal'] = new Ext['slider'].Single(Ext.apply({
            dock: 'top',
            style: 'margin-left:28px',
            stateful: _0x33f5x2['dialogConfig']['stateful'],
            stateId: 'exporter_resize_horizontal',
            stateEvents: [ 'change' ],
            listeners: {
                change: _0x33f5x2['onSliderChange'],
                changecomplete: _0x33f5x2['onSliderChangeComplete'],
                scope: _0x33f5x2
            }
        }, _0x33f5x2['horizontalCfg'])) ];
        _0x33f5x2['callParent'](arguments);
    },
    afterRender: function() {
        var _0x33f5x1 = this;
        _0x33f5x1['addCls']('sch-ux-range-picker');
        _0x33f5x1['valueHandle'] = _0x33f5x1['body']['createChild']({
            cls: 'sch-ux-range-value',
            cn: {
                tag: 'span'
            }
        });
        _0x33f5x1['valueSpan'] = _0x33f5x1['valueHandle']['down']('span');
        var _0x33f5x2 = new Ext['dd'].DD(_0x33f5x1['valueHandle']);
        Ext.apply(_0x33f5x2, {
            startDrag: function() {
                _0x33f5x1['dragging'] = true;
                this['constrainTo'](_0x33f5x1['body']);
            },
            onDrag: function() {
                _0x33f5x1['updateValuesFromHandles']();
            },
            endDrag: function() {
                _0x33f5x1['updateValuesFromHandles']();
                _0x33f5x1['dragging'] = false;
            }
        });
        _0x33f5x1['setValues'](_0x33f5x1['getValues']());
        _0x33f5x1['callParent'](arguments);
        _0x33f5x1['body']['on']('click', _0x33f5x1['onBodyClick'], _0x33f5x1);
    },
    onBodyClick: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x1 = [ _0x33f5x3['getXY']()[0] - 8 - this['body']['getX'](), _0x33f5x3['getXY']()[1] - 8 - this['body']['getY']() ];
        this['valueHandle']['setLeft'](Ext['Number']['constrain'](_0x33f5x1[0], 0, this['getAvailableWidth']()));
        this['valueHandle']['setTop'](Ext['Number']['constrain'](_0x33f5x1[1], 0, this['getAvailableHeight']()));
        this['updateValuesFromHandles']();
        this['onSliderChangeComplete']();
    },
    updateValuesFromHandles: function() {
        this['setValues'](this['getValuesFromXY']());
    },
    getAvailableWidth: function() {
        return this['body']['getWidth']() - 18;
    },
    getAvailableHeight: function() {
        return this['body']['getHeight']() - 18;
    },
    getValuesFromXY: function(_0x33f5x4) {
        _0x33f5x4 = _0x33f5x4 || [ this['valueHandle']['getLeft'](true), this['valueHandle']['getTop'](true) ];
        var _0x33f5x3 = _0x33f5x4[0] / this['getAvailableWidth']();
        var _0x33f5x2 = _0x33f5x4[1] / this['getAvailableHeight']();
        var _0x33f5x5 = Math['round']((this['horizontalCfg']['maxValue'] - this['horizontalCfg']['minValue']) * _0x33f5x3);
        var _0x33f5x1 = Math['round']((this['verticalCfg']['maxValue'] - this['verticalCfg']['minValue']) * _0x33f5x2) + this['verticalCfg']['minValue'];
        return [ _0x33f5x5 + this['horizontalCfg']['minValue'], _0x33f5x1 ];
    },
    getXYFromValues: function(_0x33f5x4) {
        var _0x33f5x1 = this['horizontalCfg']['maxValue'] - this['horizontalCfg']['minValue'];
        var _0x33f5x8 = this['verticalCfg']['maxValue'] - this['verticalCfg']['minValue'];
        var _0x33f5x2 = Math['round']((_0x33f5x4[0] - this['horizontalCfg']['minValue']) * this['getAvailableWidth']() / _0x33f5x1);
        var _0x33f5x3 = _0x33f5x4[1] - this['verticalCfg']['minValue'];
        var _0x33f5x5 = Math['round'](_0x33f5x3 * this['getAvailableHeight']() / _0x33f5x8);
        return [ _0x33f5x2, _0x33f5x5 ];
    },
    updatePosition: function() {
        var _0x33f5x2 = this['getValues']();
        var _0x33f5x1 = this['getXYFromValues'](_0x33f5x2);
        this['valueHandle']['setLeft'](Ext['Number']['constrain'](_0x33f5x1[0], 0, this['getAvailableWidth']()));
        if (this['verticalCfg']['disabled']) {
            this['valueHandle']['setTop'](this['dialogConfig']['rowHeight']);
        } else {
            this['valueHandle']['setTop'](Ext['Number']['constrain'](_0x33f5x1[1], 0, this['getAvailableHeight']()));
        }
        this['positionValueText']();
        this['setValueText'](_0x33f5x2);
    },
    positionValueText: function() {
        var _0x33f5x2 = this['valueHandle']['getTop'](true);
        var _0x33f5x1 = this['valueHandle']['getLeft'](true);
        this['valueSpan']['setLeft'](_0x33f5x1 > 30 ? -30 : 10);
        this['valueSpan']['setTop'](_0x33f5x2 > 10 ? -20 : 20);
    },
    setValueText: function(_0x33f5x2) {
        if (this['verticalCfg']['disabled']) {
            _0x33f5x2[1] = this['dialogConfig']['rowHeight'];
        }
        this['valueSpan']['update']('[' + _0x33f5x2.toString() + ']');
    },
    setValues: function(_0x33f5x2) {
        this['horizontal']['setValue'](_0x33f5x2[0]);
        if (this['verticalCfg']['reverse']) {
            if (!this['verticalCfg']['disabled']) {
                this['vertical']['setValue'](this['verticalCfg']['maxValue'] + this['verticalCfg']['minValue'] - _0x33f5x2[1]);
            }
        } else {
            if (!this['verticalCfg']['disabled']) {
                this['vertical']['setValue'](_0x33f5x2[1]);
            }
        }
        if (!this['dragging']) {
            this['updatePosition']();
        }
        this['positionValueText']();
        this['setValueText'](_0x33f5x2);
    },
    getValues: function() {
        if (!this['verticalCfg']['disabled']) {
            var _0x33f5x2 = this['vertical']['getValue']();
            if (this['verticalCfg']['reverse']) {
                _0x33f5x2 = this['verticalCfg']['maxValue'] - _0x33f5x2 + this['verticalCfg']['minValue'];
            }
            return [ this['horizontal']['getValue'](), _0x33f5x2 ];
        }
        return [ this['horizontal']['getValue']() ];
    },
    onSliderChange: function() {
        this['fireEvent']('change', this, this['getValues']());
        if (!this['dragging']) {
            this['updatePosition']();
        }
    },
    onSliderChangeComplete: function() {
        this['fireEvent']('changecomplete', this, this['getValues']());
    },
    afterLayout: function() {
        this['callParent'](arguments);
        this['updatePosition']();
    }
});

Ext.define('Ext.ux.Scheduler.widget.ColumnPicker', {
    extend: Ext.form['field']['ComboBox'],
    multiSelect: true,
    valueField: 'id',
    displayField: 'name',
    forceSelection: true,
    editable: false,
    listConfig: {
        cls: 'sch-columnpicker-list'
    },
    columns: null,
    columnEmptyText: null,
    columnEmptyRegExp: /&(nbsp|#160);/,
    initComponent: function() {
        this['store'] = new Ext.data.Store({
            proxy: 'memory',
            fields: [ 'id', 'name', 'column' ],
            data: this['processColumns'](this['columns'])
        });
        this['callParent'](arguments);
    },
    processColumns: function(_0x33f5x2) {
        var _0x33f5x1 = this, _0x33f5x4 = [], _0x33f5x3 = [];
        Ext.Array['each'](_0x33f5x2, function(_0x33f5x5) {
            _0x33f5x4['push']({
                id: _0x33f5x5['id'],
                name: _0x33f5x1['getColumnTitle'](_0x33f5x5),
                column: _0x33f5x5
            });
            if (!_0x33f5x5['isHidden']()) {
                _0x33f5x3['push'](_0x33f5x5['id']);
            }
        });
        this['value'] = this['value'] || _0x33f5x3;
        return _0x33f5x4;
    },
    getColumnTitle: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return _0x33f5x2['text']['match'](_0x33f5x1['columnEmptyRegExp']) ? _0x33f5x1['columnEmptyText'] : _0x33f5x2['text'];
    },
    getSelectedColumns: function() {
        var _0x33f5x2 = this, _0x33f5x1 = _0x33f5x2['getValue']();
        if (!Ext.isArray(_0x33f5x1)) {
            _0x33f5x1 = [ _0x33f5x1 ];
        }
        return Ext.Array.map(_0x33f5x1, function(_0x33f5x3) {
            return _0x33f5x2['store']['getById'](_0x33f5x3)['get']('column');
        });
    }
});

Ext.define('Ext.ux.Scheduler.widget.ExportDialogForm', {
    extend: Ext.form['Panel'],
    mixins: [ Ext.ux.Scheduler.mixin.Localizable ],
    alias: 'widget.export_dialog_form',
    border: false,
    bodyPadding: '10 10 0 10',
    autoHeight: true,
    stateful: true,
    rangeField: null,
    resizerHolder: null,
    resizePicker: null,
    dateFromField: null,
    dateToField: null,
    datesHolder: null,
    columnPicker: null,
    rowsRangeField: null,
    exportersField: null,
    formatField: null,
    orientationField: null,
    dpiField: null,
    showHeaderField: null,
    showFooterField: null,
    dateRangeFormat: '',
    columnPickerConfig: null,
    dpiFieldConfig: null,
    dateRangeRestriction: true,
    rangeFieldConfig: null,
    rowsRangeFieldConfig: null,
    formatFieldConfig: null,
    orientationFieldConfig: null,
    exportersFieldConfig: null,
    showHeaderFieldConfig: null,
    showFooterFieldConfig: null,
    dateFromFieldConfig: null,
    dateToFieldConfig: null,
    showResizePicker: false,
    showColumnPicker: true,
    showDPIField: true,
    showShowHeaderField: true,
    showShowFooterField: false,
    showRowsRangeField: true,
    initComponent: function() {
        var _0x33f5x2 = this;
        _0x33f5x2['fieldDefaults'] = Ext.apply({
            labelAlign: 'left',
            labelWidth: 120,
            anchor: '99%'
        }, _0x33f5x2['fieldDefaults']);
        _0x33f5x2['items'] = _0x33f5x2['createFields']();
        _0x33f5x2['callParent'](arguments);
        _0x33f5x2['onRangeChange'](_0x33f5x2['rangeField'], _0x33f5x2['rangeField']['getValue']());
        _0x33f5x2['onExporterChange'](_0x33f5x2['exportersField'], _0x33f5x2['exportersField']['getValue']());
    },
    isValid: function() {
        var _0x33f5x2 = this;
        if (_0x33f5x2['rangeField']['getValue']() == 'date') {
            return _0x33f5x2['dateFromField']['isValid']() && _0x33f5x2['dateToField']['isValid']();
        }
        return true;
    },
    getValues: function(_0x33f5x5, _0x33f5x3, _0x33f5x4, _0x33f5x1) {
        var _0x33f5x2 = this['callParent'](arguments);
        _0x33f5x2['showHeader'] = !!_0x33f5x2['showHeader'];
        _0x33f5x2['showFooter'] = !!_0x33f5x2['showFooter'];
        _0x33f5x2['onlyVisibleRows'] = !!_0x33f5x2['onlyVisibleRows'];
        if (this['resizePicker'] && this['rangeField']['getValue']() == 'current') {
            var _0x33f5x8 = this['resizePicker']['getValues']();
            if (_0x33f5x5) {
                _0x33f5x2 += '&cellSize[0]=' + _0x33f5x8[0] + '&cellSize[1]=' + _0x33f5x8[1];
            } else {
                _0x33f5x2['cellSize'] = _0x33f5x8;
            }
        }
        if (this['columnPicker']) {
            _0x33f5x2['columns'] = this['columnPicker']['getSelectedColumns']();
        }
        return _0x33f5x2;
    },
    createFields: function() {
        var _0x33f5x1 = this, _0x33f5x4 = '<table class="sch-fieldcontainer-label-wrap"><td width="1" class="sch-fieldcontainer-label">', _0x33f5x3 = '<td><div class="sch-fieldcontainer-separator"></div></table>';
        if (_0x33f5x1['showResizePicker']) {
            _0x33f5x1['resizePicker'] = new Ext.ux.Scheduler.widget.ResizePicker({
                dialogConfig: _0x33f5x1,
                margin: '10 20'
            });
            _0x33f5x1['resizerHolder'] = new Ext.form.FieldContainer({
                fieldLabel: _0x33f5x1['scrollerDisabled'] ? _0x33f5x1.L('adjustCols') : _0x33f5x1.L('adjustColsAndRows'),
                labelAlign: 'top',
                hidden: true,
                labelSeparator: '',
                beforeLabelTextTpl: _0x33f5x4,
                afterLabelTextTpl: _0x33f5x3,
                layout: 'vbox',
                defaults: {
                    flex: 1,
                    allowBlank: false
                },
                items: [ _0x33f5x1['resizePicker'] ]
            });
        }
        _0x33f5x1['dateFromField'] = Ext['ComponentManager']['create'](Ext.apply(_0x33f5x1['applyStateful']({
            xtype: 'datefield',
            fieldLabel: _0x33f5x1.L('dateRangeFromText'),
            baseBodyCls: 'sch-exportdialogform-date',
            name: 'dateFrom',
            format: _0x33f5x1['dateRangeFormat'] || Ext.Date['defaultFormat'],
            allowBlank: false,
            maxValue: _0x33f5x1['dateRangeRestriction'] && _0x33f5x1['endDate'] || null,
            minValue: _0x33f5x1['dateRangeRestriction'] && _0x33f5x1['startDate'] || null,
            value: _0x33f5x1['startDate']
        }), _0x33f5x1['dateFromFieldConfig']));
        _0x33f5x1['dateToField'] = Ext['ComponentManager']['create'](Ext.apply(_0x33f5x1['applyStateful']({
            xtype: 'datefield',
            fieldLabel: _0x33f5x1.L('dateRangeToText'),
            name: 'dateTo',
            format: _0x33f5x1['dateRangeFormat'] || Ext.Date['defaultFormat'],
            baseBodyCls: 'sch-exportdialogform-date',
            allowBlank: false,
            maxValue: _0x33f5x1['dateRangeRestriction'] && _0x33f5x1['endDate'] || null,
            minValue: _0x33f5x1['dateRangeRestriction'] && _0x33f5x1['startDate'] || null,
            value: _0x33f5x1['endDate']
        }), _0x33f5x1['dateToFieldConfig']));
        _0x33f5x1['datesHolder'] = new Ext.form.FieldContainer({
            fieldLabel: _0x33f5x1.L('specifyDateRange'),
            labelAlign: 'top',
            hidden: true,
            labelSeparator: '',
            beforeLabelTextTpl: _0x33f5x4,
            afterLabelTextTpl: _0x33f5x3,
            layout: 'vbox',
            defaults: {
                flex: 1,
                allowBlank: false
            },
            items: [ _0x33f5x1['dateFromField'], _0x33f5x1['dateToField'] ]
        });
        if (_0x33f5x1['showColumnPicker']) {
            _0x33f5x1['columnPicker'] = new Ext.ux.Scheduler.widget.ColumnPicker(_0x33f5x1['applyStateful'](Ext.apply({
                fieldLabel: _0x33f5x1.L('columnPickerLabel'),
                columnEmptyText: _0x33f5x1.L('columnEmptyText'),
                cls: 'sch-export-dialog-columns'
            }, _0x33f5x1['columnPickerConfig'])));
        }
        if (_0x33f5x1['showDPIField']) {
            _0x33f5x1['dpiField'] = Ext['ComponentManager']['create'](Ext.apply(_0x33f5x1['applyStateful']({
                xtype: 'numberfield',
                fieldLabel: _0x33f5x1.L('dpiFieldLabel'),
                cls: 'sch-export-dialog-dpi',
                minValue: 65,
                name: 'DPI',
                value: _0x33f5x1['exportConfig']['DPI'],
                maxValue: 200
            }), _0x33f5x1['dpiFieldConfig']));
        }
        if (_0x33f5x1['showShowHeaderField']) {
            _0x33f5x1['showHeaderField'] = Ext['ComponentManager']['create'](Ext.apply(_0x33f5x1['applyStatefulFull']({
                xtype: 'checkbox',
                fieldLabel: _0x33f5x1.L('showHeaderLabel'),
                cls: 'sch-export-dialog-header',
                name: 'showHeader',
                checked: !!_0x33f5x1['exportConfig']['showHeader'],
                checkedValue: true,
                uncheckedValue: false
            }), _0x33f5x1['showHeaderFieldConfig']));
        }
        if (_0x33f5x1['showShowFooterField']) {
            _0x33f5x1['showFooterField'] = Ext['ComponentManager']['create'](Ext.apply(_0x33f5x1['applyStatefulFull']({
                xtype: 'checkbox',
                fieldLabel: _0x33f5x1.L('showFooterLabel'),
                cls: 'sch-export-dialog-footer',
                name: 'showFooter',
                checked: !!_0x33f5x1['exportConfig']['showFooter'],
                checkedValue: true,
                uncheckedValue: false
            }), _0x33f5x1['showFooterFieldConfig']));
        }
        _0x33f5x1['formatField'] = Ext['ComponentManager']['create'](Ext.apply(_0x33f5x1['applyStateful']({
            xtype: 'combobox',
            fieldLabel: _0x33f5x1.L('formatFieldLabel'),
            value: _0x33f5x1['exportConfig']['format'],
            triggerAction: 'all',
            forceSelection: true,
            editable: false,
            name: 'format',
            queryMode: 'local',
            store: _0x33f5x1['pageFormats'] || [ 'A5', 'A4', 'A3', 'Letter', 'Legal' ]
        }), _0x33f5x1['formatFieldConfig']));
        _0x33f5x1['orientationField'] = Ext['ComponentManager']['create'](Ext.apply(_0x33f5x1['applyStateful']({
            xtype: 'combobox',
            fieldLabel: _0x33f5x1.L('orientationFieldLabel'),
            value: _0x33f5x1['exportConfig']['orientation'],
            triggerAction: 'all',
            forceSelection: true,
            editable: false,
            name: 'orientation',
            displayField: 'name',
            valueField: 'value',
            queryMode: 'local',
            store: {
                fields: [ 'name', 'value' ],
                data: [ {
                    name: _0x33f5x1.L('orientationPortraitText'),
                    value: 'portrait'
                }, {
                    name: _0x33f5x1.L('orientationLandscapeText'),
                    value: 'landscape'
                } ]
            }
        }), _0x33f5x1['orientationFieldConfig']));
        _0x33f5x1['rangeField'] = Ext['ComponentManager']['create'](Ext.apply(_0x33f5x1['applyStateful']({
            xtype: 'combobox',
            fieldLabel: _0x33f5x1.L('rangeFieldLabel'),
            value: _0x33f5x1['exportConfig']['range'],
            triggerAction: 'all',
            cls: 'sch-export-dialog-range',
            forceSelection: true,
            editable: false,
            name: 'range',
            queryMode: 'local',
            displayField: 'name',
            valueField: 'value',
            store: {
                fields: [ 'name', 'value' ],
                data: [ {
                    name: _0x33f5x1.L('completeViewText'),
                    value: 'complete'
                }, {
                    name: _0x33f5x1.L('completeDataText'),
                    value: 'completedata'
                }, {
                    name: _0x33f5x1.L('dateRangeText'),
                    value: 'date'
                }, {
                    name: _0x33f5x1.L('currentViewText'),
                    value: 'current'
                } ]
            }
        }), _0x33f5x1['rangeFieldConfig']));
        _0x33f5x1['mon'](_0x33f5x1['rangeField'], 'change', _0x33f5x1['onRangeChange'], _0x33f5x1);
        _0x33f5x1['exportersField'] = Ext['ComponentManager']['create'](Ext.apply(_0x33f5x1['applyStateful']({
            xtype: 'combobox',
            fieldLabel: _0x33f5x1.L('exportersFieldLabel'),
            value: _0x33f5x1['defaultExporter'],
            triggerAction: 'all',
            cls: 'sch-export-dialog-exporter',
            forceSelection: true,
            editable: false,
            name: 'exporterId',
            queryMode: 'local',
            displayField: 'name',
            valueField: 'value',
            store: {
                fields: [ 'name', 'value' ],
                data: Ext.Array.map(_0x33f5x1['exporters'], function(_0x33f5x5) {
                    return {
                        name: _0x33f5x5['getName'](),
                        value: _0x33f5x5['getExporterId']()
                    };
                })
            }
        }), _0x33f5x1['exportersFieldConfig']));
        _0x33f5x1['mon'](_0x33f5x1['exportersField'], 'change', _0x33f5x1['onExporterChange'], _0x33f5x1);
        if (_0x33f5x1['showRowsRangeField']) {
            _0x33f5x1['rowsRangeField'] = Ext['ComponentManager']['create'](Ext.apply(_0x33f5x1['applyStateful']({
                xtype: 'combobox',
                fieldLabel: _0x33f5x1.L('rowsRangeLabel'),
                value: _0x33f5x1['exportConfig']['rowsRange'],
                triggerAction: 'all',
                cls: 'sch-export-dialog-rowsrange',
                forceSelection: true,
                editable: false,
                name: 'rowsRange',
                queryMode: 'local',
                displayField: 'name',
                valueField: 'value',
                store: {
                    fields: [ 'name', 'value' ],
                    data: [ {
                        name: _0x33f5x1.L('allRowsLabel'),
                        value: 'all'
                    }, {
                        name: _0x33f5x1.L('visibleRowsLabel'),
                        value: 'visible'
                    } ]
                }
            }), _0x33f5x1['rowsRangeFieldConfig']));
        }
        var _0x33f5x2 = [];
        _0x33f5x2['push'](_0x33f5x1['rangeField']);
        if (_0x33f5x1['resizerHolder']) {
            _0x33f5x2['push'](_0x33f5x1['resizerHolder']);
        }
        _0x33f5x2['push'](_0x33f5x1['datesHolder']);
        if (_0x33f5x1['columnPicker']) {
            _0x33f5x2['push'](_0x33f5x1['columnPicker']);
        }
        if (_0x33f5x1['rowsRangeField']) {
            _0x33f5x2['push'](_0x33f5x1['rowsRangeField']);
        }
        _0x33f5x2['push'](_0x33f5x1['exportersField'], _0x33f5x1['formatField'], _0x33f5x1['orientationField']);
        if (_0x33f5x1['dpiField']) {
            _0x33f5x2['push'](_0x33f5x1['dpiField']);
        }
        if (_0x33f5x1['showHeaderField']) {
            _0x33f5x2['push'](_0x33f5x1['showHeaderField']);
        }
        if (_0x33f5x1['showFooterField']) {
            _0x33f5x2['push'](_0x33f5x1['showFooterField']);
        }
        return _0x33f5x2;
    },
    applyStateful: function(_0x33f5x2) {
        if (!this['stateful']) {
            return _0x33f5x2;
        }
        var _0x33f5x1 = this, _0x33f5x3 = _0x33f5x1['stateId'] || 'exporter';
        return Ext.applyIf(_0x33f5x2, {
            stateful: true,
            stateId: _0x33f5x3 + '_' + _0x33f5x2['name']
        });
    },
    applyStatefulFull: function(_0x33f5x2) {
        if (!this['stateful']) {
            return _0x33f5x2;
        }
        var _0x33f5x1 = this;
        return Ext.apply(_0x33f5x1['applyStateful'](_0x33f5x2), {
            stateEvents: [ 'change' ],
            applyState: _0x33f5x1['applyFieldState'],
            getState: _0x33f5x1['getFieldState']
        });
    },
    getFieldState: function() {
        return {
            value: this['getValue']()
        };
    },
    applyFieldState: function(_0x33f5x2) {
        if ('value' in _0x33f5x2) {
            this['setValue'](_0x33f5x2['value']);
        }
    },
    onRangeChange: function(_0x33f5x1, _0x33f5x2) {
        switch (_0x33f5x2) {
          case 'complete':
            ;

          case 'completedata':
            this['datesHolder']['hide']();
            this['resizerHolder'] && this['resizerHolder']['hide']();
            break;

          case 'date':
            this['datesHolder']['show']();
            this['resizerHolder'] && this['resizerHolder']['hide']();
            break;

          case 'current':
            this['datesHolder']['hide']();
            if (this['resizerHolder']) {
                this['resizerHolder']['show']();
                this['resizePicker']['expand'](true);
            }
            ;
            break;
        }
    },
    onExporterChange: function(_0x33f5x1, _0x33f5x2) {
        switch (_0x33f5x2) {
          case 'singlepage':
            this['disableFields'](true);
            break;

          default:
            this['disableFields'](false);
        }
    },
    disableFields: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x2['formatField']['setDisabled'](_0x33f5x1);
        _0x33f5x2['orientationField']['setDisabled'](_0x33f5x1);
    }
});

Ext.define('Ext.ux.Scheduler.widget.ExportDialog', {
    alternateClassName: 'Ext.ux.Scheduler.widget.PdfExportDialog',
    extend: Ext['window']['Window'],
    mixins: [ Ext.ux.Scheduler.mixin.Localizable ],
    alias: 'widget.exportdialog',
    width: 450,
    cls: 'sch-exportdialog',
    frame: false,
    layout: 'fit',
    draggable: true,
    constrain: true,
    progressBar: null,
    buttonsPanel: null,
    buttonsPanelScope: null,
    form: null,
    defaultFormXType: 'export_dialog_form',
    exportButtonConfig: null,
    cancelButtonConfig: null,
    formConfigs: 'pageFormats,startDate,endDate,rowHeight,columnWidth,defaultExporter,exporters,dateRangeFormat,exportConfig,showColumnPicker,columnPickerConfig,showShowHeaderField,showShowFooterField,showResizePicker,stateful,stateId,dateRangeRestriction,showRowsRangeField,rowsRangeFieldConfig,rangeFieldConfig,formatFieldConfig,orientationFieldConfig,exportersFieldConfig',
    constructor: function(_0x33f5x2) {
        Ext.apply(this, _0x33f5x2);
        this['title'] = this['title'] || this.L('title');
        this['callParent'](arguments);
    },
    mapFormConfigs: function() {
        this['form'] = this['form'] || {};
        var _0x33f5x3 = this['form'];
        var _0x33f5x4 = this['formConfigs']['split'](',');
        for (var _0x33f5x1 = 0, _0x33f5x5 = _0x33f5x4['length']; _0x33f5x1 < _0x33f5x5; _0x33f5x1++) {
            var _0x33f5x2 = _0x33f5x4[_0x33f5x1];
            if (this['hasOwnProperty'](_0x33f5x2) && !_0x33f5x3['hasOwnProperty'](_0x33f5x2)) {
                _0x33f5x3[_0x33f5x2] = this[_0x33f5x2];
            }
        }
        if (this['hasOwnProperty']('showFooterField') && !_0x33f5x3['hasOwnProperty']('showShowFooterField')) {
            _0x33f5x3['showShowFooterField'] = this['showFooterField'];
        }
        if (this['hasOwnProperty']('showHeaderField') && !_0x33f5x3['hasOwnProperty']('showShowHeaderField')) {
            _0x33f5x3['showShowHeaderField'] = this['showHeaderField'];
        }
    },
    initComponent: function() {
        var _0x33f5x2 = this;
        if (!_0x33f5x2['form'] || !_0x33f5x2['form']['isForm']) {
            _0x33f5x2['mapFormConfigs']();
            _0x33f5x2['form'] = _0x33f5x2['buildForm']();
        }
        Ext.apply(_0x33f5x2, {
            items: {
                items: [ _0x33f5x2['form'], _0x33f5x2['progressBar'] || _0x33f5x2['buildProgressBar']() ]
            },
            fbar: _0x33f5x2['buildButtons'](_0x33f5x2['buttonsPanelScope'] || _0x33f5x2)
        });
        _0x33f5x2['callParent'](arguments);
    },
    afterRender: function() {
        var _0x33f5x2 = this;
        if (_0x33f5x2['form']['resizePicker']) {
            _0x33f5x2['relayEvents'](_0x33f5x2['form']['resizePicker'], [ 'change', 'changecomplete', 'select' ]);
        }
        _0x33f5x2['callParent'](arguments);
    },
    buildButtons: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        return [ Ext.apply({
            xtype: 'button',
            scale: 'medium',
            itemId: 'export',
            text: _0x33f5x2.L('exportButtonText'),
            handler: _0x33f5x2['onExportButtonPress'],
            scope: _0x33f5x1 || _0x33f5x2
        }, _0x33f5x2['exportButtonConfig']), Ext.apply({
            xtype: 'button',
            scale: 'medium',
            itemId: 'cancel',
            text: _0x33f5x2.L('cancelButtonText'),
            handler: _0x33f5x2['onCancelButtonPress'],
            scope: _0x33f5x1 || _0x33f5x2
        }, _0x33f5x2['cancelButtonConfig']) ];
    },
    onExportButtonPress: function() {
        if (this['form']['isValid']()) {
            var _0x33f5x1 = this['form']['getValues']();
            this['beforeExport']();
            var _0x33f5x2 = this['dateRangeFormat'] || Ext.Date['defaultFormat'];
            if (_0x33f5x1['dateFrom'] && !Ext['isDate'](_0x33f5x1['dateFrom'])) {
                _0x33f5x1['dateFrom'] = Ext.Date['parse'](_0x33f5x1['dateFrom'], _0x33f5x2);
            }
            if (_0x33f5x1['dateTo'] && !Ext['isDate'](_0x33f5x1['dateTo'])) {
                _0x33f5x1['dateTo'] = Ext.Date['parse'](_0x33f5x1['dateTo'], _0x33f5x2);
            }
            this['doExportFn']['call'](this['doExportFnScope'] || this, _0x33f5x1, this['onExportSuccess'], this['onExportFailure']);
        }
    },
    afterExport: function() {
        var _0x33f5x2 = this['down']('#export');
        _0x33f5x2 && _0x33f5x2['enable']();
        this['progressBar'] && this['progressBar']['hide']();
    },
    beforeExport: function() {
        var _0x33f5x2 = this['down']('#export');
        _0x33f5x2 && _0x33f5x2['disable']();
        this['progressBar'] && this['progressBar']['show']();
    },
    onExportSuccess: function() {
        this['afterExport']();
    },
    onExportFailure: function() {
        this['afterExport']();
    },
    onCancelButtonPress: function() {
        this['destroy']();
    },
    buildForm: function(_0x33f5x2) {
        this['form'] = Ext.apply(this['form'] || {}, _0x33f5x2);
        return Ext['ComponentManager']['create'](this['form'], this['defaultFormXType']);
    },
    buildProgressBar: function() {
        return this['progressBar'] = new Ext.ProgressBar({
            text: this.L('progressBarText'),
            animate: true,
            hidden: true,
            margin: '4px 10px 10px 10px'
        });
    }
});

Ext.define('Ext.ux.Scheduler.plugin.Export', {
    extend: Ext.util['Observable'],
    alternateClassName: 'Ext.ux.Scheduler.plugin.PdfExport',
    alias: 'plugin.scheduler_export',
    mixins: [ Ext.AbstractPlugin, Ext.ux.Scheduler.mixin.Localizable ],
    lockableScope: 'top',
    pageSizes: {
        A5: {
            width: 5.8,
            height: 8.3
        },
        A4: {
            width: 8.3,
            height: 11.7
        },
        A3: {
            width: 11.7,
            height: 16.5
        },
        Letter: {
            width: 8.5,
            height: 11
        },
        Legal: {
            width: 8.5,
            height: 14
        }
    },
    DPI: 72,
    printServer: undefined,
    timeout: 6e4,
    headerTpl: null,
    headerTplDataFn: null,
    headerTplDataFnScope: null,
    tpl: null,
    footerTpl: null,
    footerTplDataFn: null,
    footerTplDataFnScope: null,
    exportDialogClassName: 'Ext.ux.Scheduler.widget.ExportDialog',
    exportDialogConfig: {},
    exporterConfig: null,
    exportConfig: {
        format: 'A4',
        orientation: 'portrait',
        range: 'complete',
        rowsRange: 'all',
        showHeader: true,
        showFooter: false
    },
    expandAllBeforeExport: false,
    translateURLsToAbsolute: true,
    openAfterExport: true,
    beforeExport: function() {},
    afterExport: function() {},
    fileFormat: 'pdf',
    defaultExporter: 'multipage',
    exporters: undefined,
    callbacks: undefined,
    currentAjaxRequest: undefined,
    hideExportDialogTimeout: 1e3,
    constructor: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x2 = _0x33f5x2 || {};
        _0x33f5x1['exportersIndex'] = {};
        if (_0x33f5x2['exportDialogConfig']) {
            Ext['Object']['each'](this['exportConfig'], function(_0x33f5x4, _0x33f5x3, _0x33f5x8) {
                var _0x33f5x5 = _0x33f5x2['exportDialogConfig'][_0x33f5x4];
                if (_0x33f5x5) {
                    _0x33f5x8[_0x33f5x4] = _0x33f5x5;
                }
            });
        }
        _0x33f5x1['callParent']([ _0x33f5x2 ]);
        _0x33f5x1['setFileFormat'](_0x33f5x1['fileFormat']);
        if (!_0x33f5x1['exporters']) {
            _0x33f5x1['exporters'] = _0x33f5x1['buildExporters']();
        }
        _0x33f5x1['initExporters']();
        _0x33f5x1['bindExporters']();
    },
    init: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x2['showExportDialog'] = Ext.Function.bind(_0x33f5x1['showExportDialog'], _0x33f5x1);
        _0x33f5x2['doExport'] = Ext.Function.bind(_0x33f5x1['doExport'], _0x33f5x1);
        _0x33f5x1['scheduler'] = _0x33f5x2;
    },
    initExporters: function() {
        var _0x33f5x3 = this, _0x33f5x1 = _0x33f5x3['exporters'];
        for (var _0x33f5x2 = 0; _0x33f5x2 < _0x33f5x1['length']; _0x33f5x2++) {
            if (!_0x33f5x1[_0x33f5x2]['isExporter']) {
                _0x33f5x1[_0x33f5x2] = _0x33f5x3['createExporter'](_0x33f5x1[_0x33f5x2]);
            }
        }
    },
    bindExporters: function() {
        var _0x33f5x1 = this['exporters'];
        for (var _0x33f5x2 = 0; _0x33f5x2 < _0x33f5x1['length']; _0x33f5x2++) {
            this['bindExporter'](_0x33f5x1[_0x33f5x2]);
        }
    },
    bindExporter: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x2['mon'](_0x33f5x1, {
            commitpage: _0x33f5x2['onPageCommit'],
            collectrows: _0x33f5x2['onRowCollected'],
            scope: _0x33f5x2
        });
    },
    unbindExporter: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x2['mun'](_0x33f5x1, {
            commitpage: _0x33f5x2['onPageCommit'],
            collectrows: _0x33f5x2['onRowCollected'],
            scope: _0x33f5x2
        });
    },
    buildExporters: function() {
        return [ 'Ext.ux.Scheduler.plugin.exporter.SinglePage', 'Ext.ux.Scheduler.plugin.exporter.MultiPage', 'Ext.ux.Scheduler.plugin.exporter.MultiPageVertical' ];
    },
    getExporterConfig: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x4 = this;
        var _0x33f5x2 = Ext.apply({
            translateURLsToAbsolute: _0x33f5x4['translateURLsToAbsolute'],
            expandAllBeforeExport: _0x33f5x4['expandAllBeforeExport'],
            DPI: _0x33f5x4['DPI']
        }, _0x33f5x4['exporterConfig']);
        if (_0x33f5x4['headerTpl']) {
            _0x33f5x2['headerTpl'] = _0x33f5x4['headerTpl'];
        }
        if (_0x33f5x4['headerTplDataFn']) {
            _0x33f5x2['headerTplDataFn'] = _0x33f5x4['headerTplDataFn'];
            _0x33f5x2['headerTplDataFnScope'] = _0x33f5x4['headerTplDataFnScope'];
        }
        if (_0x33f5x4['tpl']) {
            _0x33f5x2['tpl'] = _0x33f5x4['tpl'];
        }
        if (_0x33f5x4['footerTpl']) {
            _0x33f5x2['footerTpl'] = _0x33f5x4['footerTpl'];
        }
        if (_0x33f5x4['footerTplDataFn']) {
            _0x33f5x2['footerTplDataFn'] = _0x33f5x4['footerTplDataFn'];
            _0x33f5x2['footerTplDataFnScope'] = _0x33f5x4['footerTplDataFnScope'];
        }
        return _0x33f5x2;
    },
    createExporter: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this, _0x33f5x4 = _0x33f5x3['getExporterConfig'](_0x33f5x1, _0x33f5x2);
        if (Ext.isObject(_0x33f5x1)) {
            return Ext.create(Ext.apply(_0x33f5x4, _0x33f5x1));
        } else {
            return Ext.create(_0x33f5x1, Ext.apply(_0x33f5x4, _0x33f5x2));
        }
    },
    registerExporter: function(_0x33f5x1, _0x33f5x2) {
        if (!(_0x33f5x1 instanceof Ext.ux.Scheduler.plugin.exporter.AbstractExporter)) {
            _0x33f5x1 = this['createExporter']['apply'](this, arguments);
        }
        this['exporters']['push'](_0x33f5x1);
        this['bindExporter'](_0x33f5x1);
    },
    getExporter: function(_0x33f5x1) {
        if (!_0x33f5x1) {
            return;
        }
        var _0x33f5x2 = this['exportersIndex'][_0x33f5x1];
        if (_0x33f5x2) {
            return _0x33f5x2;
        }
        _0x33f5x2 = this['exportersIndex'][_0x33f5x1] = Ext.Array['findBy'](this['exporters'], function(_0x33f5x3) {
            return _0x33f5x3['getExporterId']() == _0x33f5x1;
        });
        return _0x33f5x2;
    },
    getExporters: function() {
        return this['exporters'];
    },
    setFileFormat: function(_0x33f5x2) {
        this['fileFormat'] = _0x33f5x2;
    },
    showExportDialog: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getActiveExportDialog']();
        if (_0x33f5x2) {
            _0x33f5x2['destroy']();
        }
        _0x33f5x1['setActiveExportDialog'](_0x33f5x1['buildExportDialog']());
        _0x33f5x2 = _0x33f5x1['getActiveExportDialog']();
        _0x33f5x2['on']('destroy', _0x33f5x1['onExportDialogDestroy'], _0x33f5x1);
        if (_0x33f5x2['progressBar']) {
            _0x33f5x2['mon'](_0x33f5x1, {
                updateprogressbar: _0x33f5x1['onExportProgress'],
                scope: _0x33f5x1
            });
        }
        _0x33f5x2['show']();
    },
    buildExportDialog: function() {
        return Ext.create(this['exportDialogClassName'], this['buildExportDialogConfig']());
    },
    buildExportDialogConfig: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['scheduler']['getSchedulingView']();
        return Ext.apply({
            doExportFn: _0x33f5x1['doExport'],
            doExportFnScope: _0x33f5x1,
            startDate: _0x33f5x1['scheduler']['getStart'](),
            endDate: _0x33f5x1['scheduler']['getEnd'](),
            rowHeight: _0x33f5x2['timeAxisViewModel']['getViewRowHeight'](),
            columnWidth: _0x33f5x2['timeAxisViewModel']['getTickWidth'](),
            defaultExporter: _0x33f5x1['defaultExporter'],
            exportConfig: Ext.apply(_0x33f5x1['exportConfig'], {
                DPI: _0x33f5x1['DPI']
            }),
            exporters: _0x33f5x1['exporters'],
            pageFormats: _0x33f5x1['getPageFormats'](),
            columnPickerConfig: {
                columns: _0x33f5x1['scheduler']['lockedGrid']['query']('gridcolumn[ignoreInExport!=true]')
            }
        }, _0x33f5x1['exportDialogConfig']);
    },
    onExportDialogDestroy: function() {
        this['cancelExport']();
        this['setActiveExportDialog']();
    },
    onExportProgress: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = this['getActiveExportDialog'](), _0x33f5x4 = _0x33f5x2 && _0x33f5x2['progressBar'];
        if (_0x33f5x4) {
            _0x33f5x4['updateProgress'](_0x33f5x3);
            if (typeof _0x33f5x1 == 'string') {
                _0x33f5x4['updateText'](_0x33f5x1);
            }
        }
    },
    showError: function(_0x33f5x2) {
        Ext['Msg']['alert']('', _0x33f5x2 || this.L('generalError'));
    },
    getPageFormats: function() {
        var _0x33f5x2 = this['pageSizes'], _0x33f5x1 = [];
        Ext['Object']['each'](_0x33f5x2, function(_0x33f5x3, _0x33f5x4) {
            _0x33f5x1['push']({
                width: _0x33f5x4['width'],
                height: _0x33f5x4['height'],
                name: _0x33f5x3
            });
        });
        return Ext.Array.map(_0x33f5x1['sort'](function(_0x33f5x4, _0x33f5x3) {
            return _0x33f5x4['width'] - _0x33f5x3['width'];
        }), function(_0x33f5x3) {
            return _0x33f5x3['name'];
        });
    },
    getExportConfig: function(_0x33f5x1) {
        var _0x33f5x3 = this;
        var _0x33f5x2 = Ext.apply({
            fileFormat: _0x33f5x3['fileFormat'],
            exporterId: _0x33f5x3['defaultExporter'],
            beforeExport: Ext.Function.bind(_0x33f5x3['beforeExport'], _0x33f5x3),
            afterExport: Ext.Function.bind(_0x33f5x3['afterExport'], _0x33f5x3)
        }, _0x33f5x1, _0x33f5x3['exportConfig']);
        _0x33f5x2['DPI'] = _0x33f5x2['DPI'] || _0x33f5x3['DPI'];
        _0x33f5x2['pageSize'] = Ext.apply({}, _0x33f5x3['pageSizes'][_0x33f5x2['format']]);
        _0x33f5x2['pageSize']['width'] *= _0x33f5x2['DPI'];
        _0x33f5x2['pageSize']['height'] *= _0x33f5x2['DPI'];
        return _0x33f5x2;
    },
    doExport: function(_0x33f5x4, _0x33f5x7, _0x33f5x2, _0x33f5x5) {
        var _0x33f5x8 = this, _0x33f5x3 = _0x33f5x8['scheduler'], _0x33f5x1 = _0x33f5x8['getExportConfig'](_0x33f5x4);
        _0x33f5x8['callbacks'] = {
            success: _0x33f5x7,
            failure: _0x33f5x2,
            scope: _0x33f5x5 || _0x33f5x8
        };
        var _0x33f5x9 = _0x33f5x8['exporter'] = _0x33f5x8['getExporter'](_0x33f5x1['exporterId']);
        if (_0x33f5x8['fireEvent']('beforeexport', _0x33f5x3, _0x33f5x9, _0x33f5x1) !== false) {
            _0x33f5x8['myBeforeExport']();
            _0x33f5x8['exporter']['extractPages'](_0x33f5x3, _0x33f5x1, function(_0x33f5xf) {
                _0x33f5x8['onPagesExtracted'](_0x33f5xf, _0x33f5x3, _0x33f5x9, _0x33f5x1);
            }, _0x33f5x8);
        }
    },
    cancelExport: function() {
        if (this['currentAjaxRequest']) {
            Ext['Ajax']['abort'](this['currentAjaxRequest']);
            this['currentAjaxRequest'] = null;
        }
        Ext.getBody()['unmask']();
    },
    onPagesExtracted: function(_0x33f5x2, _0x33f5x3, _0x33f5x4, _0x33f5x1) {
        this['fireEvent']('updateprogressbar', .8, this.L('requestingPrintServer'));
        this['doRequest'](_0x33f5x2, _0x33f5x1);
    },
    onRowCollected: function(_0x33f5x3, _0x33f5x4, _0x33f5x1, _0x33f5x2) {
        this['fireEvent']('updateprogressbar', .2 * (_0x33f5x1 + 1) / _0x33f5x2, Ext.String['format'](this.L('fetchingRows'), _0x33f5x1 + 1, _0x33f5x2));
    },
    onPageCommit: function(_0x33f5x4, _0x33f5x3, _0x33f5x1, _0x33f5x2) {
        _0x33f5x2 = Math['max'](_0x33f5x1, _0x33f5x2);
        this['fireEvent']('updateprogressbar', .2 + .6 * _0x33f5x1 / _0x33f5x2, Ext.String['format'](this.L('builtPage'), _0x33f5x1, _0x33f5x2));
    },
    onExportSuccess: function(_0x33f5x2) {
        var _0x33f5x8 = this, _0x33f5x4 = _0x33f5x8['getActiveExportDialog'](), _0x33f5x5 = _0x33f5x8['callbacks'], _0x33f5x3 = _0x33f5x5 && _0x33f5x5['success'], _0x33f5x1 = _0x33f5x5 && _0x33f5x5['scope'] || _0x33f5x8;
        _0x33f5x8['fireEvent']('updateprogressbar', 1);
        _0x33f5x8['myAfterExport']();
        _0x33f5x3 && _0x33f5x3['apply'](_0x33f5x1, arguments);
        setTimeout(function() {
            _0x33f5x8['fireEvent']('hidedialogwindow', _0x33f5x2);
            _0x33f5x4 && _0x33f5x4['destroy']();
        }, _0x33f5x8['hideExportDialogTimeout']);
        if (_0x33f5x8['openAfterExport']) {
            setTimeout(function() {
                window['open'](_0x33f5x2['url'], 'ExportedPanel');
            }, 0);
        }
    },
    onExportFailure: function(_0x33f5x9, _0x33f5x2) {
        var _0x33f5x8 = this, _0x33f5x1 = this['getActiveExportDialog'](), _0x33f5x5 = _0x33f5x8['callbacks'], _0x33f5x4 = _0x33f5x5 && _0x33f5x5['failure'], _0x33f5x3 = _0x33f5x5 && _0x33f5x5['scope'] || _0x33f5x8;
        _0x33f5x4 && _0x33f5x4['call'](_0x33f5x3, _0x33f5x9);
        _0x33f5x8['fireEvent']('showdialogerror', _0x33f5x1, _0x33f5x9, _0x33f5x2);
        _0x33f5x8['showError'](_0x33f5x9);
        _0x33f5x8['myAfterExport']();
    },
    doRequest: function(_0x33f5x2, _0x33f5x1) {
        var _0x33f5x8 = this, _0x33f5x9 = _0x33f5x8['scheduler'];
        if (!_0x33f5x8['test'] && !_0x33f5x8['debug']) {
            if (_0x33f5x8['printServer']) {
                var _0x33f5xe = {
                    method: 'POST',
                    url: _0x33f5x8['printServer'],
                    timeout: _0x33f5x8['timeout'],
                    params: Ext.apply({
                        html: {
                            array: Ext.JSON.encode(_0x33f5x2)
                        },
                        startDate: _0x33f5x9['getStartDate'](),
                        endDate: _0x33f5x9['getEndDate'](),
                        format: _0x33f5x8['exporter']['getPaperFormat'](),
                        orientation: _0x33f5x1['orientation'],
                        range: _0x33f5x1['range'],
                        fileFormat: _0x33f5x8['fileFormat']
                    }, this['getParameters']()),
                    success: _0x33f5x8['onRequestSuccess'],
                    failure: _0x33f5x8['onRequestFailure'],
                    scope: _0x33f5x8
                };
                Ext.apply(_0x33f5xe, this['getAjaxConfig'](_0x33f5xe));
                this['currentAjaxRequest'] = Ext['Ajax']['request'](_0x33f5xe);
            } else {
                _0x33f5x8['onExportFailure']('Print server URL is not defined, please specify printServer config');
            }
        } else {
            if (_0x33f5x8['debug']) {
                var _0x33f5x3 = _0x33f5x2 || [];
                for (var _0x33f5x5 = 0, _0x33f5x4 = _0x33f5x3['length']; _0x33f5x5 < _0x33f5x4; _0x33f5x5++) {
                    var _0x33f5x7 = window['open']();
                    _0x33f5x7['document']['write'](_0x33f5x3[_0x33f5x5]['html']);
                    _0x33f5x7['document']['close']();
                }
            }
            _0x33f5x8['onExportSuccess'](_0x33f5x8['testResponse'] || {
                success: true,
                url: 'foo',
                htmlArray: _0x33f5x2
            });
        }
    },
    onRequestSuccess: function(_0x33f5x1) {
        this['currentAjaxRequest'] = null;
        var _0x33f5x3 = this, _0x33f5x2;
        try {
            _0x33f5x2 = Ext.JSON.decode(_0x33f5x1['responseText']);
        } catch (d) {
            _0x33f5x3['onExportFailure']('Wrong server response received');
            return;
        }
        if (_0x33f5x2['success']) {
            _0x33f5x3['onExportSuccess'](_0x33f5x2);
        } else {
            _0x33f5x3['onExportFailure'](_0x33f5x2['msg'], _0x33f5x2);
        }
    },
    onRequestFailure: function(_0x33f5x2) {
        this['currentAjaxRequest'] = null;
        var _0x33f5x1 = this, _0x33f5x3 = _0x33f5x2['status'] === 200 ? _0x33f5x2['responseText'] : _0x33f5x2['statusText'];
        _0x33f5x1['onExportFailure'](_0x33f5x3, _0x33f5x2);
    },
    getParameters: function() {
        return {};
    },
    getAjaxConfig: function(_0x33f5x2) {
        return {};
    },
    getActiveExportDialog: function() {
        return this['win'];
    },
    setActiveExportDialog: function(_0x33f5x2) {
        this['win'] = _0x33f5x2;
    },
    myBeforeExport: function() {
        this['fireEvent']('exportstart', this);
        var _0x33f5x2 = Ext.getBody()['mask']();
        _0x33f5x2['addCls']('sch-export-mask');
        var _0x33f5x1 = this['getActiveExportDialog'](), _0x33f5x3 = _0x33f5x1 && _0x33f5x1['progressBar'];
        if (_0x33f5x3) {
            _0x33f5x3['show']();
        }
    },
    myAfterExport: function() {
        this['fireEvent']('afterexport', this);
        Ext.getBody()['unmask']();
    },
    destroy: function() {
        this['callParent'](arguments);
        if (this['getActiveExportDialog']()) {
            this['getActiveExportDialog']()['destroy']();
        }
    }
});

Ext.define('Ext.ux.Scheduler.plugin.HeaderZoom', {
    extend: Ext.ux.Scheduler.util.DragTracker,
    mixins: [ Ext.AbstractPlugin ],
    alias: 'plugin.scheduler_headerzoom',
    lockableScope: 'top',
    scheduler: null,
    proxy: null,
    headerRegion: null,
    init: function(_0x33f5x2) {
        this['scheduler'] = _0x33f5x2;
        this['onModeChange']();
        _0x33f5x2['on']('modechange', this['onModeChange'], this);
    },
    onOrientationChange: function() {
        return this['onModeChange']['apply'](this, arguments);
    },
    onModeChange: function() {
        var _0x33f5x2 = this['scheduler']['down']('timeaxiscolumn');
        if (_0x33f5x2) {
            if (_0x33f5x2['rendered']) {
                this['onTimeAxisColumnRender'](_0x33f5x2);
            } else {
                _0x33f5x2['on']({
                    afterrender: this['onTimeAxisColumnRender'],
                    scope: this
                });
            }
        }
    },
    onTimeAxisColumnRender: function(_0x33f5x2) {
        this['proxy'] = _0x33f5x2['el']['createChild']({
            cls: 'sch-drag-selector'
        });
        this['initEl'](_0x33f5x2['el']);
    },
    onStart: function(_0x33f5x2) {
        this['proxy']['show']();
        this['headerRegion'] = this['scheduler']['normalGrid']['headerCt']['getRegion']();
    },
    onDrag: function(_0x33f5x1) {
        var _0x33f5x3 = this['headerRegion'];
        var _0x33f5x2 = this['getRegion']()['constrainTo'](_0x33f5x3);
        _0x33f5x2['top'] = _0x33f5x3['top'];
        _0x33f5x2['bottom'] = _0x33f5x3['bottom'];
        this['proxy']['setBox'](_0x33f5x2);
    },
    onEnd: function(_0x33f5x7) {
        if (this['proxy']) {
            this['proxy']['setDisplayed'](false);
            var _0x33f5x3 = this['scheduler'];
            var _0x33f5x9 = this['getRegion']();
            var _0x33f5x1 = _0x33f5x3['getSchedulingView']()['getStartEndDatesFromRegion'](_0x33f5x9);
            if (_0x33f5x1) {
                var _0x33f5x8 = _0x33f5x3['timeAxis'];
                var _0x33f5x4 = _0x33f5x3['getSchedulingView']()['timeAxisViewModel']['getBottomHeader']()['unit'];
                var _0x33f5xf = _0x33f5x8['floorDate'](_0x33f5x1['start'], false, _0x33f5x4, 1);
                var _0x33f5x2 = _0x33f5x8['ceilDate'](_0x33f5x1['end'], false, _0x33f5x4, 1);
                if (this['fireEvent']('beforeheaderzoom', this, _0x33f5x3, _0x33f5xf, _0x33f5x2) !== false) {
                    _0x33f5x3['zoomToSpan']({
                        start: _0x33f5xf,
                        end: _0x33f5x2
                    });
                }
            }
        }
    },
    destroy: function() {
        if (this['proxy']) {
            Ext.destroy(this['proxy']);
            this['proxy'] = null;
        }
        this['callParent'](arguments);
    }
});

Ext.define('Ext.ux.Scheduler.plugin.NonWorkingTime', {
    extend: Ext.ux.Scheduler.plugin.Zones,
    alias: 'plugin.scheduler_nonworkingtime',
    alternateClassName: 'Gnt.feature.WorkingTime',
    expandToFitView: true,
    calendar: {
        type: 'calendar'
    },
    timeAxis: null,
    init: function(_0x33f5x2) {
        this['calendar'] = this['calendar'] && Ext.StoreMgr.lookup(this['calendar']);
        if (!this['calendar']) {
            Ext['Error']['raise']('Required attribute \'calendar\' missed during initialization of \'Ext.ux.Scheduler.plugin.NonWorkingTime\'');
        }
        this['bindCalendar'](this['calendar']);
        this['store'] = new Ext.data.Store({
            model: 'Ext.ux.Scheduler.model.Range',
            autoDestroy: true
        });
        this['timeAxis'] = _0x33f5x2['getTimeAxis']();
        this['callParent'](arguments);
        _0x33f5x2['on']('viewchange', this['onViewChange'], this);
        this['onViewChange']();
    },
    bindCalendar: function(_0x33f5x1) {
        var _0x33f5x2 = {
            datachanged: this['refresh'],
            update: this['refresh'],
            scope: this,
            delay: 1
        };
        if (this['calendar']) {
            this['calendar']['un'](_0x33f5x2);
        }
        if (_0x33f5x1) {
            _0x33f5x1['on'](_0x33f5x2);
        }
        this['calendar'] = _0x33f5x1;
    },
    onViewChange: function() {
        var _0x33f5x2 = Ext.ux.Scheduler.util.Date;
        if (_0x33f5x2['compareUnits'](this['timeAxis']['unit'], _0x33f5x2.WEEK) > 0) {
            this['setDisabled'](true);
        } else {
            this['setDisabled'](false);
            this['refresh']();
        }
    },
    refresh: function() {
        this['store']['removeAll'](true);
        this['store']['add'](this['calendar']['getHolidaysRanges'](this['timeAxis']['getStart'](), this['timeAxis']['getEnd'](), true));
    },
    destroy: function() {
        this['bindCalendar'](null);
        this['callParent'](arguments);
    }
});

Ext.define('Ext.ux.Scheduler.plugin.Pan', {
    extend: Ext.AbstractPlugin,
    alias: 'plugin.scheduler_pan',
    lockableScope: 'top',
    enableVerticalPan: true,
    statics: {
        KEY_SHIFT: 1,
        KEY_CTRL: 2,
        KEY_ALT: 4,
        KEY_ALL: 7
    },
    disableOnKey: 0,
    constructor: function(_0x33f5x2) {
        Ext.apply(this, _0x33f5x2);
    },
    init: function(_0x33f5x2) {
        this['view'] = _0x33f5x2['getSchedulingView']();
        this['view']['on']('afterrender', this['onRender'], this);
    },
    onRender: function(_0x33f5x2) {
        this['view']['el']['on']('mousedown', this['onMouseDown'], this);
    },
    onMouseDown: function(_0x33f5x4, _0x33f5x3) {
        if (_0x33f5x4['event']['touches'] && _0x33f5x4['event']['touches']['length'] > 0) {
            return;
        }
        var _0x33f5x1 = this['self'], _0x33f5x2 = this['disableOnKey'];
        if (_0x33f5x4['shiftKey'] && _0x33f5x2 & _0x33f5x1['KEY_SHIFT'] || _0x33f5x4['ctrlKey'] && _0x33f5x2 & _0x33f5x1['KEY_CTRL'] || _0x33f5x4['altKey'] && _0x33f5x2 & _0x33f5x1['KEY_ALT']) {
            return;
        }
        if (_0x33f5x4['getTarget'](this['view']['timeCellSelector'], 10) && !_0x33f5x4['getTarget'](this['view']['timeCellSelector'] + ' > div > *')) {
            this['mouseX'] = _0x33f5x4['getX']();
            this['mouseY'] = _0x33f5x4['getY']();
            Ext.getBody()['on']('mousemove', this['onMouseMove'], this);
            Ext['getDoc']()['on']('mouseup', this['onMouseUp'], this);
            if (Ext['isIE'] || Ext['isGecko']) {
                Ext.getBody()['on']('mouseenter', this['onMouseUp'], this);
            }
            _0x33f5x4['stopEvent']();
        }
    },
    onMouseMove: function(_0x33f5x4) {
        if (this['disabled']) {
            return;
        }
        _0x33f5x4['stopEvent']();
        var _0x33f5x2 = _0x33f5x4['getX']();
        var _0x33f5x8 = _0x33f5x4['getY']();
        var _0x33f5x1 = 0, _0x33f5x3 = this['mouseX'] - _0x33f5x2;
        if (this['enableVerticalPan']) {
            _0x33f5x1 = this['mouseY'] - _0x33f5x8;
        }
        this['mouseX'] = _0x33f5x2;
        this['mouseY'] = _0x33f5x8;
        this['view']['scrollBy'](_0x33f5x3, _0x33f5x1, false);
        this['view']['headerCt']['getScrollable']()['scrollBy'](_0x33f5x3, _0x33f5x1, false);
    },
    onMouseUp: function(_0x33f5x2) {
        Ext.getBody()['un']('mousemove', this['onMouseMove'], this);
        Ext['getDoc']()['un']('mouseup', this['onMouseUp'], this);
        if (Ext['isIE'] || Ext['isGecko']) {
            Ext.getBody()['un']('mouseenter', this['onMouseUp'], this);
        }
    }
});

Ext.define('Ext.ux.Scheduler.plugin.Printable', {
    extend: Ext.ux.Scheduler.plugin.Export,
    alternateClassName: [ 'Ext.ux.Scheduler.plugin.Print' ],
    alias: [ 'plugin.scheduler_printable', 'plugin.scheduler_print' ],
    docType: '<!DOCTYPE HTML>',
    beforePrint: function() {},
    afterPrint: function() {},
    exportDialogConfig: {
        showDPIField: true
    },
    removeSecondaryCanvas: false,
    wrapHeaders: false,
    autoPrintAndClose: true,
    mainTpl: '{docType}<html class="' + Ext['baseCSSPrefix'] + 'border-box {htmlClasses}"><head><meta content="text/html; charset=UTF-8" http-equiv="Content-Type" /><title>{title}</title>{styles}</head><body class="sch-print-body {bodyClasses}"><div class="sch-print-ct" style="width:{totalWidth}px"><tpl for="pages">{html}</tpl></div><script type="text/javascript">{setupScript}</script></body></html>',
    pageTpl: '{header}<div class="{componentClasses}" style="height:{bodyHeight}px; width:{totalWidth}px; position: relative !important">{HTML}</div>{footer}<div style="page-break-after:always;"></div>',
    setupScriptTpl: 'window.onload = function(){ document._loaded  = true;if ({autoPrintAndClose}) {window.print();if (!{isChrome}) window.close();}}',
    openAfterExport: false,
    DPI: 72,
    fakeBackgroundColor: false,
    doRequest: function() {},
    constructor: function(_0x33f5x2) {
        Ext.apply(this, _0x33f5x2);
        if (!this['mainTpl']['isTemplate']) {
            this['mainTpl'] = new Ext.XTemplate(this['mainTpl']);
        }
        this['callParent'](arguments);
        this['exportDialogConfig'] = Ext.applyIf({
            l10n: {
                title: this.L('dialogTitle'),
                exportButtonText: this.L('exportButtonText')
            }
        }, this['exportDialogConfig']);
    },
    init: function(_0x33f5x2) {
        this['callParent'](arguments);
        _0x33f5x2['print'] = Ext.Function.bind(this['print'], this);
    },
    getExporterConfig: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x4 = this, _0x33f5x2 = _0x33f5x4['callParent'](arguments);
        return Ext.apply(_0x33f5x2, {
            tpl: _0x33f5x4['pageTpl']
        });
    },
    getExportConfig: function(_0x33f5x1) {
        var _0x33f5x3 = this, _0x33f5x2 = _0x33f5x3['callParent'](arguments);
        return Ext.apply(_0x33f5x2, {
            beforeExport: Ext.Function.bind(_0x33f5x3['beforePrint'], _0x33f5x3),
            afterExport: Ext.Function.bind(_0x33f5x3['afterPrint'], _0x33f5x3)
        });
    },
    buildExporters: function() {
        return [ 'Ext.ux.Scheduler.plugin.exporter.MultiPage', 'Ext.ux.Scheduler.plugin.exporter.MultiPageVertical' ];
    },
    onPagesExtracted: function(_0x33f5x2, _0x33f5x3, _0x33f5x4, _0x33f5x1) {
        this['fireEvent']('updateprogressbar', .8, this.L('requestingPrintServer'));
        this['printPages'](_0x33f5x2, _0x33f5x3, _0x33f5x4, _0x33f5x1);
    },
    print: function() {
        this['showExportDialog']();
    },
    onBeforePageCommit: function(_0x33f5x3, _0x33f5x4, _0x33f5xe, _0x33f5xb) {
        var _0x33f5x7 = this['scheduler'], _0x33f5x8 = _0x33f5x7['lockedGrid'], _0x33f5x9 = _0x33f5x7['normalGrid'], _0x33f5x5 = function(_0x33f5xd) {
            return _0x33f5x4['select']('#' + _0x33f5xd)['first']();
        };
        var _0x33f5x2 = _0x33f5x4['select'](_0x33f5x3['normalBodySelector'])['first'](), _0x33f5xc = _0x33f5x5(_0x33f5x9['headerCt']['id']), _0x33f5xf = _0x33f5x4['select'](_0x33f5x3['lockedBodySelector'])['first'](), _0x33f5x1 = _0x33f5x5(_0x33f5x8['headerCt']['id']);
        _0x33f5x2['addCls']([ 'sch-print-normal-rows-ct', this['fakeBackgroundColor'] ? ' sch-print-fake-background' : '' ]);
        _0x33f5xf['addCls']('sch-print-locked-rows-ct');
        if (this['removeSecondaryCanvas']) {
            _0x33f5x4['select']('.sch-secondary-canvas')['remove']();
        }
        if (this['fakeBackgroundColor']) {
            var _0x33f5x11 = _0x33f5x2['select']('.sch-event');
            _0x33f5x11['each'](function(_0x33f5xd) {
                _0x33f5xd['setStyle']('border-right-width', _0x33f5xd['dom']['style']['width']);
            });
        }
        _0x33f5xc['addCls']('sch-print-normalheader');
        _0x33f5x1['addCls']('sch-print-lockedheader');
        if (this['wrapHeaders']) {
            _0x33f5xc['wrap']('<div class="sch-print-header-wrap"></div>');
            _0x33f5x1['wrap']('<div class="sch-print-header-wrap"></div>');
        }
    },
    prepareMainTplData: function(_0x33f5x2) {
        return _0x33f5x2;
    },
    printPages: function(_0x33f5x1, _0x33f5x4, _0x33f5x9, _0x33f5x3) {
        if (!this['mainTpl'] || !this['mainTpl']['isTemplate']) {
            this['mainTpl'] = new Ext.XTemplate(this['mainTpl'], {
                compiled: true,
                disableFormats: true
            });
        }
        var _0x33f5x8 = _0x33f5x9['getStylesheets'](), _0x33f5x2 = document['body'];
        var _0x33f5x5 = this['mainTpl']['apply'](this['prepareMainTplData']({
            docType: this['docType'],
            htmlClasses: _0x33f5x2['parentNode']['className'],
            bodyClasses: _0x33f5x2['className'],
            title: _0x33f5x4['title'] || '',
            styles: _0x33f5x8,
            totalWidth: _0x33f5x9['paperWidth'],
            setupScript: this['setupScriptTpl']['replace']('{autoPrintAndClose}', this['autoPrintAndClose'])['replace']('{isChrome}', Ext['isChrome']),
            pages: _0x33f5x1
        }));
        var _0x33f5x7 = window['open']('', 'printgrid');
        if (!_0x33f5x7 || !_0x33f5x7['document']) {
            return false;
        }
        this['printWindow'] = _0x33f5x7;
        _0x33f5x7['document']['write'](_0x33f5x5);
        _0x33f5x7['document']['close']();
        this['onExportSuccess']({
            success: true,
            url: 'foo',
            htmlArray: [ _0x33f5x5 ]
        });
    },
    bindExporter: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x2['callParent'](arguments);
        _0x33f5x2['mon'](_0x33f5x1, {
            beforecommitpage: _0x33f5x2['onBeforePageCommit'],
            scope: _0x33f5x2
        });
    },
    unbindExporter: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x2['callParent'](arguments);
        _0x33f5x2['mun'](_0x33f5x1, {
            beforecommitpage: _0x33f5x2['onBeforePageCommit'],
            scope: _0x33f5x2
        });
    }
});

Ext.define('Ext.ux.Scheduler.plugin.SimpleEditor', {
    extend: Ext['Editor'],
    alias: 'plugin.scheduler_simpleeditor',
    mixins: [ Ext.AbstractPlugin, Ext.ux.Scheduler.mixin.Localizable ],
    lockableScope: 'top',
    cls: 'sch-simpleeditor',
    allowBlur: false,
    delegate: '.sch-event-inner',
    dataIndex: null,
    completeOnEnter: true,
    cancelOnEsc: true,
    ignoreNoChange: true,
    height: 19,
    dragProxyEl: null,
    resourceRecord: null,
    newEventText: null,
    autoSize: {
        width: 'boundEl'
    },
    initComponent: function() {
        this['field'] = this['field'] || {
            xtype: 'textfield',
            selectOnFocus: true
        };
        this['callParent'](arguments);
    },
    init: function(_0x33f5x2) {
        this['scheduler'] = _0x33f5x2['getSchedulingView']();
        _0x33f5x2['on']('afterrender', this['onSchedulerRender'], this);
        this['scheduler']['registerEventEditor'](this);
        this['dataIndex'] = this['dataIndex'] || this['scheduler']['getEventStore']()['model']['prototype']['nameField'];
    },
    edit: function(_0x33f5x2, _0x33f5x1) {
        _0x33f5x1 = _0x33f5x1 || this['scheduler']['getElementsFromEventRecord'](_0x33f5x2)[0];
        this['startEdit'](_0x33f5x1['child'](this['delegate']));
        this['realign']();
        this['record'] = _0x33f5x2;
        this['setValue'](this['record']['get'](this['dataIndex']));
    },
    onSchedulerRender: function(_0x33f5x2) {
        this['on']({
            startedit: this['onStartEdit'],
            complete: function(_0x33f5x5, _0x33f5x8, _0x33f5x4) {
                var _0x33f5x1 = this['record'];
                var _0x33f5x3 = this['scheduler']['getEventStore']();
                _0x33f5x1['set'](this['dataIndex'], _0x33f5x8);
                if (_0x33f5x3['indexOf'](_0x33f5x1) < 0) {
                    if (this['scheduler']['fireEvent']('beforeeventadd', this['scheduler'], _0x33f5x1, [ this['resourceRecord'] ]) !== false) {
                        _0x33f5x3['append'](_0x33f5x1);
                        _0x33f5x1['assign'](this['resourceRecord']);
                        this['resourceRecord'] = null;
                    }
                }
                this['onAfterEdit']();
            },
            canceledit: this['onAfterEdit'],
            hide: function() {
                if (this['dragProxyEl']) {
                    this['dragProxyEl']['hide']();
                }
            },
            scope: this
        });
        _0x33f5x2['on']({
            eventdblclick: function(_0x33f5x1, _0x33f5x3, _0x33f5x4) {
                if (!_0x33f5x2['isReadOnly']()) {
                    this['edit'](_0x33f5x3);
                }
            },
            dragcreateend: this['onDragCreateEnd'],
            scope: this
        });
    },
    onStartEdit: function() {
        if (!this['allowBlur']) {
            Ext.getBody()['on']('mousedown', this['onMouseDown'], this);
            this['scheduler']['on']('eventmousedown', function() {
                this['cancelEdit']();
            }, this);
        }
    },
    onAfterEdit: function() {
        if (!this['allowBlur']) {
            Ext.getBody()['un']('mousedown', this['onMouseDown'], this);
            this['scheduler']['un']('eventmousedown', function() {
                this['cancelEdit']();
            }, this);
        }
    },
    onMouseDown: function(_0x33f5x1, _0x33f5x2) {
        if (this['editing'] && this['el'] && !_0x33f5x1['within'](this['el'])) {
            this['cancelEdit']();
        }
    },
    onDragCreateEnd: function(_0x33f5x3, _0x33f5x1, _0x33f5x4, _0x33f5x8, _0x33f5x2) {
        this['dragProxyEl'] = _0x33f5x2;
        this['resourceRecord'] = _0x33f5x4;
        this['scheduler']['onEventCreated'](_0x33f5x1);
        if (_0x33f5x1['get'](this['dataIndex']) === '') {
            _0x33f5x1['set'](this['dataIndex'], this['newEventText'] || this.L('newEventText'));
        }
        this['edit'](_0x33f5x1, this['dragProxyEl']);
    }
});

Ext.define('Ext.ux.Scheduler.plugin.TimeGap', {
    extend: Ext.ux.Scheduler.plugin.Zones,
    alias: 'plugin.scheduler_timegap',
    getZoneCls: Ext.emptyFn,
    eventStoreListeners: null,
    init: function(_0x33f5x2) {
        this['store'] = new Ext.data.JsonStore({
            model: 'Ext.ux.Scheduler.model.Range'
        });
        this['scheduler'] = _0x33f5x2;
        this['setEventStore'](_0x33f5x2['getEventStore']());
        _0x33f5x2['on']({
            afterrender: this['populateStore'],
            eventstorechange: function(_0x33f5x1, _0x33f5x3) {
                this['setEventStore'](_0x33f5x3);
                this['populateStore']();
            },
            scope: this
        });
        this['schedulerView'] = _0x33f5x2['getSchedulingView']();
        this['callParent'](arguments);
    },
    setEventStore: function(_0x33f5x2) {
        this['eventStoreListeners'] && this['eventStoreListeners']['destroy']();
        this['eventStoreListeners'] = this['mon'](_0x33f5x2, {
            load: this['populateStore'],
            update: this['populateStore'],
            remove: this['populateStore'],
            add: this['populateStore'],
            datachanged: this['populateStore'],
            destroyable: true,
            scope: this
        });
    },
    populateStore: function(_0x33f5x3) {
        var _0x33f5x1 = this['schedulerView']['getEventsInView'](), _0x33f5x8 = [], _0x33f5x5 = this['scheduler']['getStart'](), _0x33f5xf = this['scheduler']['getEnd'](), _0x33f5x4 = _0x33f5x1['getCount'](), _0x33f5xe = _0x33f5x5, _0x33f5x9 = 0, _0x33f5x7, _0x33f5x2;
        _0x33f5x1['sortBy'](function(_0x33f5x11, _0x33f5xb) {
            return _0x33f5x11['getStartDate']() - _0x33f5xb['getStartDate']();
        });
        _0x33f5x2 = _0x33f5x1['getAt'](0);
        while (_0x33f5xe < _0x33f5xf && _0x33f5x9 < _0x33f5x4) {
            _0x33f5x7 = _0x33f5x2['getStartDate']();
            if (!Ext.ux.Scheduler.util.Date['betweenLesser'](_0x33f5xe, _0x33f5x7, _0x33f5x2['getEndDate']()) && _0x33f5xe < _0x33f5x7) {
                _0x33f5x8['push'](new this['store']['model']({
                    StartDate: _0x33f5xe,
                    EndDate: _0x33f5x7,
                    Cls: this['getZoneCls'](_0x33f5xe, _0x33f5x7) || ''
                }));
            }
            _0x33f5xe = Ext.ux.Scheduler.util.Date.max(_0x33f5x2['getEndDate'](), _0x33f5xe);
            _0x33f5x9++;
            _0x33f5x2 = _0x33f5x1['getAt'](_0x33f5x9);
        }
        if (_0x33f5xe < _0x33f5xf) {
            _0x33f5x8['push']({
                StartDate: _0x33f5xe,
                EndDate: _0x33f5xf,
                Cls: this['getZoneCls'](_0x33f5xe, _0x33f5xf) || ''
            });
        }
        this['store']['removeAll'](_0x33f5x8['length'] > 0);
        this['store']['add'](_0x33f5x8);
    }
});

Ext.define('Ext.ux.Scheduler.plugin.TreeCellEditing', {
    extend: Ext.grid.plugin.CellEditing,
    alias: 'plugin.scheduler_treecellediting',
    lockableScope: 'locked',
    editorsStarted: 0,
    init: function() {
        this['on']('beforeedit', this['onMyBeforeEdit'], this);
        this['callParent'](arguments);
    },
    activateCell: function(_0x33f5x2) {
        var _0x33f5x1 = this['callParent'](arguments);
        if (_0x33f5x1) {
            var _0x33f5x3 = this['getEditor'](_0x33f5x2['record'], _0x33f5x2['column']);
            if (!_0x33f5x3['_cancelEdit']) {
                _0x33f5x3['_cancelEdit'] = _0x33f5x3['cancelEdit'];
                _0x33f5x3['cancelEdit'] = this['myCancelEdit'];
            }
            this['fireEvent']('editingstart', this, _0x33f5x3);
        }
        return _0x33f5x1;
    },
    checkReadOnly: function() {
        var _0x33f5x2 = this['getCmp']();
        if (_0x33f5x2) {
            if (!_0x33f5x2['isTimelineTreePanel'] && !_0x33f5x2['isTimelineGridPanel']) {
                _0x33f5x2 = _0x33f5x2['up']('tablepanel');
            }
            return !_0x33f5x2['isReadOnly']();
        }
    },
    onEditComplete: function(_0x33f5x1, _0x33f5x4, _0x33f5x2) {
        var _0x33f5x3 = this;
        if (_0x33f5x1['field']['applyChanges']) {
            if (_0x33f5x4 !== _0x33f5x2) {
                _0x33f5x1['field']['applyChanges'](_0x33f5x1['field']['task'] || _0x33f5x3['context']['record']);
            }
            return _0x33f5x3['callParent']([ _0x33f5x1, _0x33f5x4, _0x33f5x4 ]);
        } else {
            return _0x33f5x3['callParent']([ _0x33f5x1, _0x33f5x4, _0x33f5x2 ]);
        }
    },
    myCancelEdit: function() {
        var _0x33f5x1 = this, _0x33f5x4 = _0x33f5x1['field'];
        if (_0x33f5x4 && _0x33f5x4['applyChanges']) {
            var _0x33f5x3 = _0x33f5x4['instantUpdate'];
            _0x33f5x4['instantUpdate'] = true;
            var _0x33f5x2 = _0x33f5x1['_cancelEdit']['apply'](this, arguments);
            _0x33f5x4['instantUpdate'] = _0x33f5x3;
            return _0x33f5x2;
        } else {
            return _0x33f5x1['_cancelEdit']['apply'](this, arguments);
        }
    },
    onMyBeforeEdit: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = _0x33f5x2['column']['getEditor']();
        if (_0x33f5x3 && _0x33f5x3['setTask']) {
            _0x33f5x3['setTask'](_0x33f5x2['record']);
            _0x33f5x2['_valueFromTaskField'] = _0x33f5x3['getValue']();
        }
        return this['checkReadOnly']();
    },
    setEditingContext: function(_0x33f5x2) {
        if (_0x33f5x2['hasOwnProperty']('_valueFromTaskField')) {
            _0x33f5x2['value'] = _0x33f5x2['originalValue'] = _0x33f5x2['_valueFromTaskField'];
            delete _0x33f5x2['_valueFromTaskField'];
        }
        this['callParent'](arguments);
    }
});

Ext.define('Ext.ux.Scheduler.preset.ViewPresetHeaderRow', {});

Ext.define('Ext.ux.Scheduler.template.Dependency', {
    extend: Ext.XTemplate,
    disableFormats: true,
    rtl: null,
    text: '<tpl if="startArrow"><div style="__SIDE__:{startArrow.side}px;top:{startArrow.top}px" class="sch-dependency sch-dependency-arrow sch-dependency-start-arrow sch-dependency-arrow-{startArrow.dir} {[ this.getSuffixedCls(values.cls, "-arrow") ]} {[ values.isHighlighted ? "sch-dependency-selected" : "" ]}" <tpl if="dependencyId">data-sch-dependency-id="{[values.dependencyId]}"</tpl>></div></tpl><tpl for="segments"><div class="sch-dependency sch-dependency-line sch-dependency-line-{dir} {[ parent.isHighlighted ? "sch-dependency-selected" : "" ]} {[ this.getSuffixedCls(parent.cls, "-line") ]}" style="__SIDE__:{side}px;top:{top}px;<tpl if="width !== null && width !== undefined">width:{width}px;</tpl><tpl if="height !== null && height !== undefined">height:{height}px</tpl>" <tpl if="parent.dependencyId">data-sch-dependency-id="{parent.dependencyId}"</tpl>></div></tpl><tpl if="endArrow"><div style="__SIDE__:{endArrow.side}px;top:{endArrow.top}px" class="sch-dependency sch-dependency-arrow sch-dependency-end-arrow sch-dependency-arrow-{endArrow.dir} {[ this.getSuffixedCls(values.cls, "-arrow") ]} {[ values.isHighlighted ? "sch-dependency-selected" : "" ]}" <tpl if="dependencyId">data-sch-dependency-id="{dependencyId}"</tpl>></div></tpl>',
    constructor: function(_0x33f5x2) {
        Ext.apply(this, _0x33f5x2);
        this['text'] = this['text']['replace'](/__SIDE__/g, this['rtl'] ? 'right' : 'left');
        this['callParent']([ this['text'] ]);
    },
    getSuffixedCls: function(_0x33f5x1, _0x33f5x3) {
        var _0x33f5x2 = '';
        if (_0x33f5x1 && _0x33f5x1['indexOf'](' ') != -1) {
            _0x33f5x2 = _0x33f5x1['replace'](/^\s*(.*)\s*$/, '$1')['split'](/\s+/)['join'](_0x33f5x3 + ' ') + _0x33f5x3;
        } else {
            if (_0x33f5x1) {
                _0x33f5x2 = _0x33f5x1 + _0x33f5x3;
            }
        }
        return _0x33f5x2;
    }
});

Ext.define('Ext.ux.Scheduler.util.Debug', {
    singleton: true,
    runDiagnostics: function() {
        var _0x33f5x4;
        var _0x33f5xb = this;
        var _0x33f5x1 = window['console'];
        if (_0x33f5x1 && _0x33f5x1['log']) {
            _0x33f5x4 = function() {
                _0x33f5x1['log']['apply'](_0x33f5x1, arguments);
            };
        } else {
            if (!_0x33f5xb['schedulerDebugWin']) {
                _0x33f5xb['schedulerDebugWin'] = new Ext.Window({
                    height: 400,
                    width: 500,
                    bodyStyle: 'padding:10px',
                    closeAction: 'hide',
                    autoScroll: true
                });
            }
            _0x33f5xb['schedulerDebugWin']['show']();
            _0x33f5xb['schedulerDebugWin']['update']('');
            _0x33f5x4 = function(_0x33f5xf) {
                _0x33f5xb['schedulerDebugWin']['update']((_0x33f5xb['schedulerDebugWin']['body']['dom']['innerHTML'] || '') + _0x33f5xf + '<br/>');
            };
        }
        var _0x33f5x5 = Ext.select('.sch-schedulerpanel');
        if (_0x33f5x5['getCount']() === 0) {
            _0x33f5x4('No scheduler component found');
        }
        var _0x33f5x6 = Ext.getCmp(_0x33f5x5['elements'][0]['id']), _0x33f5xd = _0x33f5x6['getResourceStore'](), _0x33f5x3 = _0x33f5x6['getEventStore']();
        if (!_0x33f5x3['isEventStore']) {
            _0x33f5x4('Your event store must be or extend Ext.ux.Scheduler.data.EventStore');
        }
        _0x33f5x4('Scheduler view start: ' + _0x33f5x6['getStart']() + ', end: ' + _0x33f5x6['getEnd']());
        if (!_0x33f5xd) {
            _0x33f5x4('No store configured');
            return;
        }
        if (!_0x33f5x3) {
            _0x33f5x4('No event store configured');
            return;
        }
        var _0x33f5x9 = new Ext.util.MixedCollection(), _0x33f5xe = new Ext.util.MixedCollection();
        for (var _0x33f5x8 = 0; _0x33f5x8 < _0x33f5x3['model']['prototype']['fields']['length']; _0x33f5x8++) {
            _0x33f5x9['add'](_0x33f5x3['model']['prototype']['fields'][_0x33f5x8]['name'], _0x33f5x3['model']['prototype']['fields'][_0x33f5x8]);
        }
        for (_0x33f5x8 = 0; _0x33f5x8 < _0x33f5xd['model']['prototype']['fields']['length']; _0x33f5x8++) {
            _0x33f5xe['add'](_0x33f5xd['model']['prototype']['fields'][_0x33f5x8]['name'], _0x33f5xd['model']['prototype']['fields'][_0x33f5x8]);
        }
        _0x33f5x4(_0x33f5xd['getCount']() + ' records in the resource store');
        _0x33f5x4(_0x33f5x3['getCount']() + ' records in the eventStore');
        var _0x33f5xa = _0x33f5x3['model']['prototype']['idProperty'];
        var _0x33f5x2 = _0x33f5xd['model']['prototype']['idProperty'];
        var _0x33f5xc = _0x33f5x9['getByKey'](_0x33f5xa);
        var _0x33f5x7 = _0x33f5xe['getByKey'](_0x33f5x2);
        if (!(new _0x33f5x3['model']() instanceof Ext.ux.Scheduler.model.Event)) {
            _0x33f5x4('Your event model must extend Ext.ux.Scheduler.model.Event');
        }
        if (!(new _0x33f5xd['model']() instanceof Ext.ux.Scheduler.model.Resource)) {
            _0x33f5x4('Your resource model must extend Ext.ux.Scheduler.model.Resource');
        }
        if (!_0x33f5xc) {
            _0x33f5x4('idProperty on the event model is incorrectly setup, value: ' + _0x33f5xa);
        }
        if (!_0x33f5x7) {
            _0x33f5x4('idProperty on the resource model is incorrectly setup, value: ' + _0x33f5x2);
        }
        var _0x33f5x11 = _0x33f5x6['getSchedulingView']();
        _0x33f5x4(_0x33f5x11['el']['select'](_0x33f5x11['eventSelector'])['getCount']() + ' events present in the DOM');
        if (_0x33f5x3['getCount']() > 0) {
            if (!_0x33f5x3['first']()['getStartDate']() || !(_0x33f5x3['first']()['getStartDate']() instanceof Date)) {
                _0x33f5x4('The eventStore reader is misconfigured - The StartDate field is not setup correctly, please investigate');
                _0x33f5x4('StartDate is configured with dateFormat: ' + _0x33f5x9['getByKey'](_0x33f5x3['model']['prototype']['startDateField'])['dateFormat']);
                _0x33f5x4('See Ext JS docs for information about different date formats: http://docs.sencha.com/extjs/#!/api/Ext.Date');
            }
            if (!_0x33f5x3['first']()['getEndDate']() || !(_0x33f5x3['first']()['getEndDate']() instanceof Date)) {
                _0x33f5x4('The eventStore reader is misconfigured - The EndDate field is not setup correctly, please investigate');
                _0x33f5x4('EndDate is configured with dateFormat: ' + _0x33f5x9['getByKey'](_0x33f5x3['model']['prototype']['endDateField'])['dateFormat']);
                _0x33f5x4('See Ext JS docs for information about different date formats: http://docs.sencha.com/extjs/#!/api/Ext.Date');
            }
            if (_0x33f5x3['proxy'] && _0x33f5x3['proxy']['reader'] && _0x33f5x3['proxy']['reader']['jsonData']) {
                _0x33f5x4('Dumping jsonData to console');
                console && console['dir'] && console['dir'](_0x33f5x3['proxy']['reader']['rawData']);
            }
            _0x33f5x4('Records in the event store:');
            _0x33f5x3['each'](function(_0x33f5x15, _0x33f5x10) {
                _0x33f5x4(_0x33f5x10 + 1 + '. ' + _0x33f5x15['startDateField'] + ':' + _0x33f5x15['getStartDate']() + ', ' + _0x33f5x15['endDateField'] + ':' + _0x33f5x15['getEndDate']() + ', ' + _0x33f5x15['resourceIdField'] + ':' + _0x33f5x15['getResourceId']());
                if (!_0x33f5x15['getStartDate']()) {
                    _0x33f5x4(_0x33f5x15['getStartDate']());
                }
            });
        } else {
            _0x33f5x4('Event store has no data. Has it been loaded properly?');
        }
        if (Ext.data.TreeStore && _0x33f5xd instanceof Ext.data.TreeStore) {
            _0x33f5xd = _0x33f5xd['nodeStore'];
        }
        if (_0x33f5xd['getCount']() > 0) {
            _0x33f5x4('Records in the resource store:');
            _0x33f5xd['each'](function(_0x33f5x15, _0x33f5x10) {
                _0x33f5x4(_0x33f5x10 + 1 + '. ' + _0x33f5x15['idProperty'] + ':' + _0x33f5x15['getId']());
                return;
            });
        } else {
            _0x33f5x4('Resource store has no data.');
            return;
        }
        _0x33f5x4('Everything seems to be setup ok!');
    }
});

Ext.define('Ext.ux.Scheduler.util.RectangularPathFinder', {
    alias: 'schpathfinder.rectangular',
    mixins: [ Ext.mixin.Factoryable ],
    config: {
        startSide: 'right',
        startArrowSize: 8,
        startArrowMargin: 6,
        startShift: 0,
        endSide: 'left',
        endArrowSize: 8,
        endArrowMargin: 6,
        endShift: 0,
        verticalMargin: 2,
        horizontalMargin: 5,
        otherBoxes: null
    },
    constructor: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['callParent']([ _0x33f5x2 ]);
        _0x33f5x1['initConfig'](_0x33f5x2);
    },
    findPath: function(_0x33f5x4) {
        var _0x33f5x19 = this, _0x33f5xc = Ext.applyIf(_0x33f5x4, _0x33f5x19['getConfig']()), _0x33f5x8 = _0x33f5xc['startBox'], _0x33f5x15 = _0x33f5xc['endBox'], _0x33f5x6 = _0x33f5xc['startShift'], _0x33f5xa = _0x33f5xc['endShift'], _0x33f5xe = _0x33f5xc['startSide'], _0x33f5x1c = _0x33f5xc['endSide'], _0x33f5x1d = _0x33f5xc['startArrowSize'], _0x33f5x3 = _0x33f5xc['endArrowSize'], _0x33f5x14 = _0x33f5xc['startArrowMargin'], _0x33f5x1 = _0x33f5xc['endArrowMargin'], _0x33f5x11 = _0x33f5xc['horizontalMargin'], _0x33f5x18 = _0x33f5xc['verticalMargin'], _0x33f5x7 = _0x33f5xc['otherBoxes'], _0x33f5x13, _0x33f5xf, _0x33f5x17, _0x33f5x16, _0x33f5x10, _0x33f5x5, _0x33f5x9, _0x33f5xb, _0x33f5x2, _0x33f5xd, _0x33f5x12;
        _0x33f5xe = _0x33f5x19['normalizeSide'](_0x33f5xe);
        _0x33f5x1c = _0x33f5x19['normalizeSide'](_0x33f5x1c);
        _0x33f5x13 = _0x33f5x19['getConnectionCoordinatesFromBoxSideShift'](_0x33f5x8, _0x33f5xe, _0x33f5x6);
        _0x33f5xf = _0x33f5x19['getConnectionCoordinatesFromBoxSideShift'](_0x33f5x15, _0x33f5x1c, _0x33f5xa);
        _0x33f5x9 = _0x33f5x19['calcGridBaseBoxFromBoxAndDrawParams'](_0x33f5x8, _0x33f5xe, _0x33f5x1d, _0x33f5x14, _0x33f5x11, _0x33f5x18);
        _0x33f5xb = _0x33f5x19['calcGridBaseBoxFromBoxAndDrawParams'](_0x33f5x15, _0x33f5x1c, _0x33f5x3, _0x33f5x1, _0x33f5x11, _0x33f5x18);
        _0x33f5x7 = _0x33f5x7 && Ext.Array.map(_0x33f5x7, function(_0x33f5x1a) {
            return _0x33f5x19['calcGridBaseBoxFromBoxAndDrawParams'](_0x33f5x1a, false, 0, 0, _0x33f5x11, _0x33f5x18);
        });
        _0x33f5x17 = _0x33f5x19['getConnectionCoordinatesFromBoxSideShift'](_0x33f5x9, _0x33f5xe, _0x33f5x6);
        _0x33f5x16 = _0x33f5x19['getConnectionCoordinatesFromBoxSideShift'](_0x33f5xb, _0x33f5x1c, _0x33f5xa);
        _0x33f5x2 = _0x33f5x19['buildPathGrid'](_0x33f5x9, _0x33f5xb, _0x33f5x17, _0x33f5x16, _0x33f5xe, _0x33f5x1c, _0x33f5x7);
        _0x33f5x10 = _0x33f5x19['convertDecartPointToGridPoint'](_0x33f5x2, _0x33f5x17);
        _0x33f5x5 = _0x33f5x19['convertDecartPointToGridPoint'](_0x33f5x2, _0x33f5x16);
        _0x33f5xd = _0x33f5x19['findPathOnGrid'](_0x33f5x2, _0x33f5x10, _0x33f5x5, _0x33f5xe, _0x33f5x1c);
        if (_0x33f5xd) {
            _0x33f5xd = _0x33f5x19['prependPathWithArrowStaffSegment'](_0x33f5xd, _0x33f5x13, _0x33f5x1d, _0x33f5xe);
            _0x33f5xd = _0x33f5x19['appendPathWithArrowStaffSegment'](_0x33f5xd, _0x33f5xf, _0x33f5x3, _0x33f5x1c);
            _0x33f5xd = _0x33f5x19['optimizePath'](_0x33f5xd);
        }
        return _0x33f5xd;
    },
    getConnectionCoordinatesFromBoxSideShift: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
        var _0x33f5x4;
        switch (_0x33f5x1) {
          case 'left':
            _0x33f5x4 = {
                x: _0x33f5x3['start'],
                y: (_0x33f5x3['top'] + _0x33f5x3['bottom']) / 2 + _0x33f5x2
            };
            break;

          case 'right':
            _0x33f5x4 = {
                x: _0x33f5x3['end'],
                y: (_0x33f5x3['top'] + _0x33f5x3['bottom']) / 2 + _0x33f5x2
            };
            break;

          case 'top':
            _0x33f5x4 = {
                x: (_0x33f5x3['start'] + _0x33f5x3['end']) / 2 + _0x33f5x2,
                y: _0x33f5x3['top']
            };
            break;

          case 'bottom':
            _0x33f5x4 = {
                x: (_0x33f5x3['start'] + _0x33f5x3['end']) / 2 + _0x33f5x2,
                y: _0x33f5x3['bottom']
            };
            break;
        }
        return _0x33f5x4;
    },
    calcGridBaseBoxFromBoxAndDrawParams: function(_0x33f5x8, _0x33f5x3, _0x33f5x4, _0x33f5x9, _0x33f5x1, _0x33f5x2) {
        var _0x33f5x5;
        switch (_0x33f5x3) {
          case 'left':
            _0x33f5x5 = {
                start: _0x33f5x8['start'] - Math['max'](_0x33f5x4 + _0x33f5x9, _0x33f5x1),
                end: _0x33f5x8['end'] + _0x33f5x1,
                top: _0x33f5x8['top'] - _0x33f5x2,
                bottom: _0x33f5x8['bottom'] + _0x33f5x2
            };
            break;

          case 'right':
            _0x33f5x5 = {
                start: _0x33f5x8['start'] - _0x33f5x1,
                end: _0x33f5x8['end'] + Math['max'](_0x33f5x4 + _0x33f5x9, _0x33f5x1),
                top: _0x33f5x8['top'] - _0x33f5x2,
                bottom: _0x33f5x8['bottom'] + _0x33f5x2
            };
            break;

          case 'top':
            _0x33f5x5 = {
                start: _0x33f5x8['start'] - _0x33f5x1,
                end: _0x33f5x8['end'] + _0x33f5x1,
                top: _0x33f5x8['top'] - Math['max'](_0x33f5x4 + _0x33f5x9, _0x33f5x2),
                bottom: _0x33f5x8['bottom'] + _0x33f5x2
            };
            break;

          case 'bottom':
            _0x33f5x5 = {
                start: _0x33f5x8['start'] - _0x33f5x1,
                end: _0x33f5x8['end'] + _0x33f5x1,
                top: _0x33f5x8['top'] - _0x33f5x2,
                bottom: _0x33f5x8['bottom'] + Math['max'](_0x33f5x4 + _0x33f5x9, _0x33f5x2)
            };
            break;

          default:
            _0x33f5x5 = {
                start: _0x33f5x8['start'] - _0x33f5x1,
                end: _0x33f5x8['end'] + _0x33f5x1,
                top: _0x33f5x8['top'] - _0x33f5x2,
                bottom: _0x33f5x8['bottom'] + _0x33f5x2
            };
        }
        return _0x33f5x5;
    },
    buildPathGrid: function(_0x33f5x2, _0x33f5xb, _0x33f5x15, _0x33f5x14, _0x33f5x4, _0x33f5x13, _0x33f5x8) {
        var _0x33f5x9, _0x33f5x6, _0x33f5x7, _0x33f5xe, _0x33f5x3, _0x33f5x1, _0x33f5x12, _0x33f5x11, _0x33f5xd, _0x33f5x5, _0x33f5xf, _0x33f5x17, _0x33f5xa, _0x33f5x10 = {}, _0x33f5xc = [];
        _0x33f5x9 = [ _0x33f5x2['start'], _0x33f5x4 == 'left' || _0x33f5x4 == 'right' ? (_0x33f5x2['start'] + _0x33f5x2['end']) / 2 : _0x33f5x15['x'], _0x33f5x2['end'], _0x33f5xb['start'], _0x33f5x13 == 'left' || _0x33f5x13 == 'right' ? (_0x33f5xb['start'] + _0x33f5xb['end']) / 2 : _0x33f5x14['x'], _0x33f5xb['end'] ];
        _0x33f5x6 = [ _0x33f5x2['top'], _0x33f5x4 == 'top' || _0x33f5x4 == 'bottom' ? (_0x33f5x2['top'] + _0x33f5x2['bottom']) / 2 : _0x33f5x15['y'], _0x33f5x2['bottom'], _0x33f5xb['top'], _0x33f5x13 == 'top' || _0x33f5x13 == 'bottom' ? (_0x33f5xb['top'] + _0x33f5xb['bottom']) / 2 : _0x33f5x14['y'], _0x33f5xb['bottom'] ];
        if (_0x33f5x8) {
            Ext.Array['forEach'](_0x33f5x8, function(_0x33f5x16) {
                _0x33f5x9['push'](_0x33f5x16['start'], (_0x33f5x16['start'] + _0x33f5x16['end']) / 2, _0x33f5x16['end']);
                _0x33f5x6['push'](_0x33f5x16['top'], (_0x33f5x16['top'] + _0x33f5x16['bottom']) / 2, _0x33f5x16['bottom']);
            });
        }
        _0x33f5x9 = Ext.Array['unique'](Ext.Array['sort'](_0x33f5x9, Ext.Array['numericSortFn']));
        _0x33f5x6 = Ext.Array['unique'](Ext.Array['sort'](_0x33f5x6, Ext.Array['numericSortFn']));
        for (_0x33f5x1 = 0, _0x33f5x11 = _0x33f5x6['length']; _0x33f5x1 < _0x33f5x11; ++_0x33f5x1) {
            _0x33f5x10[_0x33f5x1] = _0x33f5x10[_0x33f5x1] || {};
            _0x33f5x7 = _0x33f5x6[_0x33f5x1];
            for (_0x33f5x3 = 0, _0x33f5x12 = _0x33f5x9['length']; _0x33f5x3 < _0x33f5x12; ++_0x33f5x3) {
                _0x33f5xe = _0x33f5x9[_0x33f5x3];
                _0x33f5x17 = (_0x33f5xe <= _0x33f5x2['start'] || _0x33f5xe >= _0x33f5x2['end'] || _0x33f5x7 <= _0x33f5x2['top'] || _0x33f5x7 >= _0x33f5x2['bottom']) && (_0x33f5xe <= _0x33f5xb['start'] || _0x33f5xe >= _0x33f5xb['end'] || _0x33f5x7 <= _0x33f5xb['top'] || _0x33f5x7 >= _0x33f5xb['bottom']);
                if (_0x33f5x8) {
                    for (_0x33f5xd = 0, _0x33f5x5 = _0x33f5x8['length']; _0x33f5x17 && _0x33f5xd < _0x33f5x5; ++_0x33f5xd) {
                        _0x33f5xf = _0x33f5x8[_0x33f5xd];
                        _0x33f5x17 = _0x33f5xe <= _0x33f5xf['start'] || _0x33f5xe >= _0x33f5xf['end'] || _0x33f5x7 <= _0x33f5xf['top'] || _0x33f5x7 >= _0x33f5xf['bottom'];
                    }
                }
                _0x33f5xa = {
                    distance: Math['pow'](2, 53) - 1,
                    permitted: _0x33f5x17,
                    x: _0x33f5xe,
                    y: _0x33f5x7,
                    ix: _0x33f5x3,
                    iy: _0x33f5x1
                };
                _0x33f5x10[_0x33f5x1][_0x33f5x3] = _0x33f5xa;
                _0x33f5xc['push'](_0x33f5xa);
            }
        }
        return {
            width: _0x33f5x9['length'],
            height: _0x33f5x6['length'],
            xs: _0x33f5x9,
            ys: _0x33f5x6,
            points: _0x33f5x10,
            linearPoints: _0x33f5xc
        };
    },
    convertDecartPointToGridPoint: function(_0x33f5x3, _0x33f5x1) {
        var _0x33f5x2 = Ext.Array.indexOf(_0x33f5x3['xs'], _0x33f5x1['x']), _0x33f5x4 = Ext.Array.indexOf(_0x33f5x3['ys'], _0x33f5x1['y']);
        return _0x33f5x3['points'][_0x33f5x4][_0x33f5x2];
    },
    findPathOnGrid: function(_0x33f5x3, _0x33f5x9, _0x33f5x1, _0x33f5x2, _0x33f5x8) {
        var _0x33f5x4 = this, _0x33f5x5 = false;
        if (_0x33f5x9['permitted'] && _0x33f5x1['permitted']) {
            _0x33f5x3 = _0x33f5x4['waveForward'](_0x33f5x3, _0x33f5x9, 0);
            _0x33f5x5 = _0x33f5x4['collectPath'](_0x33f5x3, _0x33f5x1, _0x33f5x8);
        }
        return _0x33f5x5;
    },
    getGridPointNeighbors: function(_0x33f5x5, _0x33f5x4, _0x33f5x9) {
        var _0x33f5x3 = _0x33f5x4['ix'], _0x33f5x1 = _0x33f5x4['iy'], _0x33f5x2 = [], _0x33f5x8;
        if (_0x33f5x1 < _0x33f5x5['height'] - 1) {
            _0x33f5x8 = _0x33f5x5['points'][_0x33f5x1 + 1][_0x33f5x3];
            (!_0x33f5x9 || _0x33f5x9(_0x33f5x8)) && _0x33f5x2['push'](_0x33f5x8);
        }
        if (_0x33f5x1 > 0) {
            _0x33f5x8 = _0x33f5x5['points'][_0x33f5x1 - 1][_0x33f5x3];
            (!_0x33f5x9 || _0x33f5x9(_0x33f5x8)) && _0x33f5x2['push'](_0x33f5x8);
        }
        if (_0x33f5x3 < _0x33f5x5['width'] - 1) {
            _0x33f5x8 = _0x33f5x5['points'][_0x33f5x1][_0x33f5x3 + 1];
            (!_0x33f5x9 || _0x33f5x9(_0x33f5x8)) && _0x33f5x2['push'](_0x33f5x8);
        }
        if (_0x33f5x3 > 0) {
            _0x33f5x8 = _0x33f5x5['points'][_0x33f5x1][_0x33f5x3 - 1];
            (!_0x33f5x9 || _0x33f5x9(_0x33f5x8)) && _0x33f5x2['push'](_0x33f5x8);
        }
        return _0x33f5x2;
    },
    waveForward: function(_0x33f5x1, _0x33f5x5, _0x33f5x4) {
        var _0x33f5xe = this, _0x33f5xc, _0x33f5x8, _0x33f5x9, _0x33f5x11, _0x33f5x2, _0x33f5x3, _0x33f5xb, _0x33f5x7;
        _0x33f5x5['distance'] = _0x33f5x4;
        _0x33f5xc = _0x33f5xe['getGridPointNeighbors'](_0x33f5x1, _0x33f5x5, function(_0x33f5xf) {
            return _0x33f5xf['permitted'] && _0x33f5xf['distance'] > _0x33f5x4 + 1;
        });
        for (_0x33f5x8 = 0, _0x33f5x9 = _0x33f5xc['length']; _0x33f5x8 < _0x33f5x9; ++_0x33f5x8) {
            _0x33f5x11 = _0x33f5xc[_0x33f5x8];
            _0x33f5x11['distance'] = _0x33f5x4 + 1;
        }
        for (_0x33f5x8 = 0, _0x33f5x9 = _0x33f5xc['length']; _0x33f5x8 < _0x33f5x9; ++_0x33f5x8) {
            _0x33f5x11 = _0x33f5xc[_0x33f5x8];
            _0x33f5xe['waveForward'](_0x33f5x1, _0x33f5x11, _0x33f5x4 + 1);
        }
        return _0x33f5x1;
    },
    collectPath: function(_0x33f5x2, _0x33f5x1, _0x33f5x9) {
        var _0x33f5x5 = this, _0x33f5x3 = true, _0x33f5xf, _0x33f5x7, _0x33f5x8, _0x33f5x4, _0x33f5xe = [];
        while (_0x33f5x3 && _0x33f5x1['distance']) {
            _0x33f5xf = _0x33f5x5['getGridPointNeighbors'](_0x33f5x2, _0x33f5x1, function(_0x33f5xb) {
                return _0x33f5xb['permitted'] && _0x33f5xb['distance'] == _0x33f5x1['distance'] - 1;
            });
            _0x33f5x3 = _0x33f5xf['length'] > 0;
            if (_0x33f5x3) {
                _0x33f5xf = Ext.Array['sort'](_0x33f5xf, function(_0x33f5x11, _0x33f5xb) {
                    var _0x33f5x6, _0x33f5xa;
                    _0x33f5x6 = _0x33f5x11['ix'] - _0x33f5x1['ix'];
                    _0x33f5xa = _0x33f5x11['iy'] - _0x33f5x1['iy'];
                    var _0x33f5xd = (_0x33f5x9 == 'left' || _0x33f5x9 == 'right') && _0x33f5xa === 0 || (_0x33f5x9 == 'top' || _0x33f5x9 == 'bottom') && _0x33f5x6 === 0 ? -1 : 1;
                    _0x33f5x6 = _0x33f5xb['ix'] - _0x33f5x1['ix'];
                    _0x33f5xa = _0x33f5xb['iy'] - _0x33f5x1['iy'];
                    var _0x33f5xc = (_0x33f5x9 == 'left' || _0x33f5x9 == 'right') && _0x33f5xa === 0 || (_0x33f5x9 == 'top' || _0x33f5x9 == 'bottom') && _0x33f5x6 === 0 ? -1 : 1;
                    if (_0x33f5xd > _0x33f5xc) {
                        return 1;
                    } else {
                        if (_0x33f5xd < _0x33f5xc) {
                            return -1;
                        } else {
                            if (_0x33f5xd == _0x33f5xc) {
                                return _0x33f5x11['y'] > _0x33f5xb['y'] ? -1 : 1;
                            }
                        }
                    }
                });
                _0x33f5x7 = _0x33f5xf[0];
                _0x33f5xe['push']({
                    x1: _0x33f5x7['x'],
                    y1: _0x33f5x7['y'],
                    x2: _0x33f5x1['x'],
                    y2: _0x33f5x1['y']
                });
                _0x33f5x8 = _0x33f5x7['ix'] - _0x33f5x1['ix'];
                _0x33f5x4 = _0x33f5x7['iy'] - _0x33f5x1['iy'];
                switch (true) {
                  case !_0x33f5x4 && _0x33f5x8 > 0:
                    _0x33f5x9 = 'left';
                    break;

                  case !_0x33f5x4 && _0x33f5x8 < 0:
                    _0x33f5x9 = 'right';
                    break;

                  case !_0x33f5x8 && _0x33f5x4 > 0:
                    _0x33f5x9 = 'top';
                    break;

                  case !_0x33f5x8 && _0x33f5x4 < 0:
                    _0x33f5x9 = 'bottom';
                    break;
                }
                _0x33f5x1 = _0x33f5x7;
            }
        }
        return _0x33f5x3 && _0x33f5xe['reverse']() || false;
    },
    prependPathWithArrowStaffSegment: function(_0x33f5x5, _0x33f5x3, _0x33f5x8, _0x33f5x2) {
        var _0x33f5x1, _0x33f5x4;
        if (_0x33f5x5['length'] > 0) {
            _0x33f5x4 = _0x33f5x5[0];
            _0x33f5x1 = {
                x2: _0x33f5x4['x1'],
                y2: _0x33f5x4['y1']
            };
            switch (_0x33f5x2) {
              case 'left':
                _0x33f5x1['x1'] = _0x33f5x3['x'] - _0x33f5x8;
                _0x33f5x1['y1'] = _0x33f5x4['y1'];
                break;

              case 'right':
                _0x33f5x1['x1'] = _0x33f5x3['x'] + _0x33f5x8;
                _0x33f5x1['y1'] = _0x33f5x4['y1'];
                break;

              case 'top':
                _0x33f5x1['x1'] = _0x33f5x4['x1'];
                _0x33f5x1['y1'] = _0x33f5x3['y'] - _0x33f5x8;
                break;

              case 'bottom':
                _0x33f5x1['x1'] = _0x33f5x4['x1'];
                _0x33f5x1['y1'] = _0x33f5x3['y'] + _0x33f5x8;
                break;
            }
            _0x33f5x5['unshift'](_0x33f5x1);
        }
        return _0x33f5x5;
    },
    appendPathWithArrowStaffSegment: function(_0x33f5x5, _0x33f5x3, _0x33f5x2, _0x33f5x8) {
        var _0x33f5x4, _0x33f5x1;
        if (_0x33f5x5['length'] > 0) {
            _0x33f5x1 = _0x33f5x5[_0x33f5x5['length'] - 1];
            _0x33f5x4 = {
                x1: _0x33f5x1['x2'],
                y1: _0x33f5x1['y2']
            };
            switch (_0x33f5x8) {
              case 'left':
                _0x33f5x4['x2'] = _0x33f5x3['x'] - _0x33f5x2;
                _0x33f5x4['y2'] = _0x33f5x1['y2'];
                break;

              case 'right':
                _0x33f5x4['x2'] = _0x33f5x3['x'] + _0x33f5x2;
                _0x33f5x4['y2'] = _0x33f5x1['y2'];
                break;

              case 'top':
                _0x33f5x4['x2'] = _0x33f5x1['x2'];
                _0x33f5x4['y2'] = _0x33f5x3['y'] - _0x33f5x2;
                break;

              case 'bottom':
                _0x33f5x4['x2'] = _0x33f5x1['x2'];
                _0x33f5x4['y2'] = _0x33f5x3['y'] + _0x33f5x2;
                break;
            }
            _0x33f5x5['push'](_0x33f5x4);
        }
        return _0x33f5x5;
    },
    optimizePath: function(_0x33f5x4) {
        var _0x33f5x2 = [], _0x33f5x1, _0x33f5x3;
        if (_0x33f5x4['length'] > 0) {
            _0x33f5x1 = _0x33f5x4['shift']();
            _0x33f5x2['push'](_0x33f5x1);
            while (_0x33f5x4['length'] > 0) {
                _0x33f5x3 = _0x33f5x4['shift']();
                if (_0x33f5x1['x1'] == _0x33f5x3['x1'] && _0x33f5x1['y1'] == _0x33f5x3['y1'] && _0x33f5x1['x2'] == _0x33f5x3['x2'] && _0x33f5x1['y2'] == _0x33f5x3['y2']) {
                    _0x33f5x1 = _0x33f5x3;
                } else {
                    if (_0x33f5x1['y1'] - _0x33f5x1['y2'] === 0 && _0x33f5x3['y1'] - _0x33f5x3['y2'] === 0) {
                        _0x33f5x1['x2'] = _0x33f5x3['x2'];
                    } else {
                        if (_0x33f5x1['x1'] - _0x33f5x1['x2'] === 0 && _0x33f5x3['x1'] - _0x33f5x3['x2'] === 0) {
                            _0x33f5x1['y2'] = _0x33f5x3['y2'];
                        } else {
                            _0x33f5x2['push'](_0x33f5x3);
                            _0x33f5x1 = _0x33f5x3;
                        }
                    }
                }
            }
        }
        return _0x33f5x2;
    },
    normalizeSide: function(_0x33f5x2) {
        return this['self']['sideToSide'][_0x33f5x2] || _0x33f5x2;
    },
    statics: {
        sideToSide: {
            l: 'left',
            r: 'right',
            t: 'top',
            b: 'bottom'
        }
    }
});

Ext.define('Ext.ux.Scheduler.view.dependency.Painter', {
    alias: 'schdependencypainter.default',
    mixins: [ Ext.mixin.Factoryable ],
    config: {
        selectedCls: 'sch-dependency-selected',
        cls: '',
        rtl: false,
        lineTpl: null,
        canvasCls: null,
        pathFinderConfig: null,
        realLineThickness: null
    },
    pathFinder: null,
    dependencyIdAttr: 'data-sch-dependency-id',
    constructor: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['initConfig'](_0x33f5x2);
        _0x33f5x1['pathFinder'] = _0x33f5x1['createPathFinder'](_0x33f5x1['getPathFinderConfig']());
        if (!_0x33f5x1['getLineTpl']()) {
            _0x33f5x1['setLineTpl'](new Ext.ux.Scheduler.template.Dependency({
                rtl: _0x33f5x1['getRtl']()
            }));
        }
    },
    clone: function() {
        var _0x33f5x2 = this;
        return new _0x33f5x2['self'](_0x33f5x2['getConfig']());
    },
    applyLineTpl: function(_0x33f5x2) {
        return _0x33f5x2 instanceof Ext.XTemplate ? _0x33f5x2 : new Ext.XTemplate(_0x33f5x2);
    },
    updatePathFinderConfig: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        if (_0x33f5x1['pathFinder']) {
            if (_0x33f5x2 && 'type' in _0x33f5x2 && _0x33f5x2['type'] !== _0x33f5x1['pathFinder']['type']) {
                Ext.destroy(_0x33f5x1['pathFinder']);
                _0x33f5x1['pathFinder'] = _0x33f5x1['createPathFinder'](_0x33f5x2);
            } else {
                _0x33f5x1['pathFinder']['setConfig'](_0x33f5x2);
            }
        }
    },
    createPathFinder: function(_0x33f5x2) {
        return Ext.ux.Scheduler.util.RectangularPathFinder.create(_0x33f5x2);
    },
    getCanvasSpecification: function() {
        return {
            tag: 'div',
            role: 'presentation',
            cls: this['undefined']()
        };
    },
    paint: function(_0x33f5x9, _0x33f5x4, _0x33f5x8, _0x33f5x1) {
        var _0x33f5x5 = this, _0x33f5x2 = _0x33f5x5['generatePaintMarkup'](_0x33f5x9, _0x33f5x8);
        _0x33f5x4 = Ext.fly(_0x33f5x4);
        if (_0x33f5x1) {
            var _0x33f5x3 = document['createElement']('div');
            _0x33f5x3['innerHTML'] = _0x33f5x2;
            _0x33f5x4['syncContent'](_0x33f5x3);
        } else {
            _0x33f5x4['insertHtml']('beforeEnd', _0x33f5x2);
        }
    },
    generatePaintMarkup: function(_0x33f5x4, _0x33f5x3) {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getLineDefsForDependencies'](_0x33f5x4, _0x33f5x3);
        if (!Ext.isArray(_0x33f5x2)) {
            _0x33f5x2 = [ _0x33f5x2 ];
        }
        return Ext.Array.map(_0x33f5x2, function(_0x33f5x8) {
            var _0x33f5x5 = _0x33f5x1['getLineTplData'](_0x33f5x8);
            return _0x33f5x5 && _0x33f5x1['getLineTpl']()['apply'](_0x33f5x5) || '';
        })['join']('');
    },
    isDependencyElement: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x2 = Ext.fly(_0x33f5x2);
        return _0x33f5x2['is']('.sch-dependency') || _0x33f5x2['is']('.sch-dependency-arrow');
    },
    getElementsForDependency: function(_0x33f5x2, _0x33f5x3) {
        var _0x33f5x4 = Ext.dom['Query'], _0x33f5x1 = this;
        if (_0x33f5x3 && !Ext.isArray(_0x33f5x3)) {
            _0x33f5x3 = [ _0x33f5x3 ];
        }
        return new Ext.dom.CompositeElementLite(Ext.Array['reduce'](_0x33f5x3 || [], function(_0x33f5x5, _0x33f5x8) {
            return _0x33f5x5['concat'](_0x33f5x4['select']('[' + _0x33f5x1['dependencyIdAttr'] + '="' + _0x33f5x8['internalId'] + '"]', Ext.getDom(_0x33f5x2)));
        }, []));
    },
    getDependencyElements: function(_0x33f5x1) {
        var _0x33f5x2 = Ext.getDom(_0x33f5x1);
        return new Ext.dom.CompositeElementLite(_0x33f5x2 && _0x33f5x2['childNodes'] || []);
    },
    getElementDependencyInternalId: function(_0x33f5x2) {
        return Ext.fly(_0x33f5x2)['getAttribute'](this['dependencyIdAttr']);
    },
    highlightDependency: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
        var _0x33f5x4 = this;
        _0x33f5x4['getElementsForDependency'](_0x33f5x3, _0x33f5x1)['addCls'](_0x33f5x2 || _0x33f5x4['getSelectedCls']());
    },
    unhighlightDependency: function(_0x33f5x3, _0x33f5x1, _0x33f5x2) {
        var _0x33f5x4 = this;
        _0x33f5x4['getElementsForDependency'](_0x33f5x3, _0x33f5x1)['removeCls'](_0x33f5x2 || _0x33f5x4['getSelectedCls']());
    },
    getSelectedDependencyElements: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        return Ext.fly(_0x33f5x2)['select']('.' + _0x33f5x1['getSelectedCls']());
    },
    clearSelectedDependencies: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['getDependencyElements'](_0x33f5x2)['removeCls'](_0x33f5x1['getSelectedCls']());
    },
    getLineTplData: function(_0x33f5x2) {
        var _0x33f5x4 = this, _0x33f5x8, _0x33f5x3, _0x33f5x9, _0x33f5x5, _0x33f5xe;
        _0x33f5x2 = Ext.apply({}, _0x33f5x2, _0x33f5x4['getConfig']());
        _0x33f5xe = _0x33f5x4['pathFinder']['findPath'](_0x33f5x2);
        if (_0x33f5xe) {
            if (!_0x33f5x2['startBox']['rendered'] && !_0x33f5x2['endBox']['rendered']) {
                for (var _0x33f5x1 = _0x33f5xe['length'] - 1; _0x33f5x1 >= 0; _0x33f5x1--) {
                    var _0x33f5x7 = _0x33f5xe[_0x33f5x1];
                    if (_0x33f5x7['x1'] === _0x33f5x7['x2']) {
                        _0x33f5xe = [ _0x33f5x7 ];
                        _0x33f5x2['startArrowSize'] = _0x33f5x2['endArrowSize'] = 0;
                        break;
                    }
                }
            }
            _0x33f5x8 = _0x33f5x4['getRtl']();
            _0x33f5x3 = _0x33f5x4['getRealLineThickness']();
            _0x33f5x9 = _0x33f5xe['length'] && _0x33f5xe[0];
            _0x33f5x5 = _0x33f5xe['length'] && _0x33f5xe[_0x33f5xe['length'] - 1];
            _0x33f5xe = {
                cls: _0x33f5x2['cls'] || '',
                dependencyId: _0x33f5x2['dependencyId'] || '',
                isHighlighted: _0x33f5x2['isHighlighted'],
                segments: Ext.Array.map(_0x33f5xe, function(_0x33f5x11) {
                    var _0x33f5xb = _0x33f5x4['getSegmentDir'](_0x33f5x11), _0x33f5xf;
                    if (_0x33f5xb == 'horizontal') {
                        _0x33f5xf = {
                            width: Math['abs'](_0x33f5x11['x1'] - _0x33f5x11['x2']) + 1,
                            height: _0x33f5x3,
                            top: Math['min'](_0x33f5x11['y1'], _0x33f5x11['y2']),
                            side: Math['min'](_0x33f5x11['x1'], _0x33f5x11['x2']),
                            dir: _0x33f5xb
                        };
                    } else {
                        _0x33f5xf = {
                            height: Math['abs'](_0x33f5x11['y1'] - _0x33f5x11['y2']) + 1,
                            width: _0x33f5x3,
                            top: Math['min'](_0x33f5x11['y1'], _0x33f5x11['y2']),
                            side: Math['min'](_0x33f5x11['x1'], _0x33f5x11['x2']),
                            dir: _0x33f5xb
                        };
                    }
                    return _0x33f5xf;
                }),
                startArrow: _0x33f5x2['startArrowSize'] && {
                    side: _0x33f5x9['x1'],
                    top: _0x33f5x9['y1'],
                    dir: _0x33f5x4['convertSideToDir'](_0x33f5x2['startSide'], _0x33f5x8)
                },
                endArrow: _0x33f5x2['endArrowSize'] && {
                    side: _0x33f5x5['x2'],
                    top: _0x33f5x5['y2'],
                    dir: _0x33f5x4['convertSideToDir'](_0x33f5x2['endSide'], _0x33f5x8)
                },
                realLineThickness: _0x33f5x4['getRealLineThickness']()
            };
        }
        return _0x33f5xe;
    },
    getLineDefsForDependencies: function(_0x33f5x9, _0x33f5x8) {
        var _0x33f5x5 = Ext.Array, _0x33f5x4 = this, _0x33f5x2 = _0x33f5x9['getId'](), _0x33f5x3 = {}, _0x33f5x1;
        if (!Ext.isArray(_0x33f5x8)) {
            _0x33f5x8 = [ _0x33f5x8 ];
        }
        return _0x33f5x5['reduce'](_0x33f5x8 || [], function(_0x33f5x7, _0x33f5xb) {
            var _0x33f5x11 = _0x33f5xb['getSourceEvent'](), _0x33f5xc = _0x33f5xb['getTargetEvent'](), _0x33f5xf, _0x33f5xe;
            if (_0x33f5x11 && _0x33f5xc && _0x33f5x11['isScheduled']() && _0x33f5xc['isScheduled']()) {
                _0x33f5x1 = _0x33f5x11['internalId'];
                if (!_0x33f5x3[_0x33f5x1]) {
                    _0x33f5xf = _0x33f5x4['getItemBox'](_0x33f5x9, _0x33f5x11) || [];
                    if (!Ext.isArray(_0x33f5xf)) {
                        _0x33f5xf = [ _0x33f5xf ];
                    }
                    _0x33f5x3[_0x33f5x1] = _0x33f5xf;
                } else {
                    _0x33f5xf = _0x33f5x3[_0x33f5x1];
                }
                _0x33f5x1 = _0x33f5xc['internalId'];
                if (!_0x33f5x3[_0x33f5x1]) {
                    _0x33f5xe = _0x33f5x4['getItemBox'](_0x33f5x9, _0x33f5xc) || [];
                    if (!Ext.isArray(_0x33f5xe)) {
                        _0x33f5xe = [ _0x33f5xe ];
                    }
                    _0x33f5x3[_0x33f5x1] = _0x33f5xe;
                } else {
                    _0x33f5xe = _0x33f5x3[_0x33f5x1];
                }
                _0x33f5x7 = _0x33f5x5['reduce'](_0x33f5xf, function(_0x33f5xd, _0x33f5x6, _0x33f5xa) {
                    return _0x33f5x5['reduce'](_0x33f5xe, function(_0x33f5x10, _0x33f5x17, _0x33f5x15) {
                        if (_0x33f5x6 && _0x33f5x17 && (_0x33f5x6['rendered'] || _0x33f5x17['rendered'] || _0x33f5x6['relPos'] != _0x33f5x17['relPos'])) {
                            _0x33f5x10['push'](_0x33f5x4['createLineDef'](_0x33f5x9, _0x33f5xb, _0x33f5x11, _0x33f5xc, _0x33f5x6, _0x33f5x17, null));
                        }
                        return _0x33f5x10;
                    }, _0x33f5xd);
                }, _0x33f5x7);
            }
            return _0x33f5x7;
        }, []);
    },
    getItemBox: function(_0x33f5x1, _0x33f5x2) {
        return _0x33f5x1['getItemBox'](_0x33f5x2);
    },
    createLineDef: function(_0x33f5xf, _0x33f5x17, _0x33f5x15, _0x33f5x19, _0x33f5x2, _0x33f5x11, _0x33f5xe) {
        var _0x33f5x12 = _0x33f5x17['self']['Type'], _0x33f5x18 = this, _0x33f5x7 = _0x33f5x17['getType'](), _0x33f5x6 = 0, _0x33f5xa = _0x33f5x18['pathFinder']['getHorizontalMargin'](), _0x33f5x16 = _0x33f5x18['pathFinder']['getVerticalMargin'](), _0x33f5x8 = _0x33f5x17['getBidirectional'](), _0x33f5x13 = _0x33f5x8 ? _0x33f5x18['pathFinder']['getStartArrowMargin']() : 0, _0x33f5x1d = _0x33f5x8 ? _0x33f5x18['pathFinder']['getStartArrowSize']() : 0, _0x33f5x1 = _0x33f5x18['pathFinder']['getEndArrowMargin'](), _0x33f5x4 = _0x33f5x18['pathFinder']['getEndArrowSize'](), _0x33f5xc, _0x33f5x1c;
        switch (true) {
          case _0x33f5x7 == _0x33f5x12['StartToEnd']:
            _0x33f5xc = _0x33f5xf['getConnectorStartSide'](_0x33f5x15);
            _0x33f5x1c = _0x33f5xf['getConnectorEndSide'](_0x33f5x19);
            break;

          case _0x33f5x7 == _0x33f5x12['StartToStart']:
            _0x33f5xc = _0x33f5xf['getConnectorStartSide'](_0x33f5x15);
            _0x33f5x1c = _0x33f5xf['getConnectorStartSide'](_0x33f5x19);
            break;

          case _0x33f5x7 == _0x33f5x12['EndToStart']:
            _0x33f5xc = _0x33f5xf['getConnectorEndSide'](_0x33f5x15);
            _0x33f5x1c = _0x33f5xf['getConnectorStartSide'](_0x33f5x19);
            break;

          case _0x33f5x7 == _0x33f5x12['EndToEnd']:
            _0x33f5xc = _0x33f5xf['getConnectorEndSide'](_0x33f5x15);
            _0x33f5x1c = _0x33f5xf['getConnectorEndSide'](_0x33f5x19);
            break;

          default:
            throw 'Invalid dependency type: ' + _0x33f5x17['getType']();
        }
        if (_0x33f5x2['top'] === _0x33f5x11['top']) {
            _0x33f5x13 = _0x33f5x1 = 0;
            if (Math['abs'](_0x33f5x2['end'] - _0x33f5x11['start']) < _0x33f5x4 + _0x33f5x1d) {
                _0x33f5x1d = _0x33f5x4 = 0;
            }
        }
        switch (true) {
          case (_0x33f5xc == 'left' || _0x33f5xc == 'right') && (_0x33f5x1c == 'left' || _0x33f5x1c == 'right'):
            _0x33f5x16 = 2;
            _0x33f5xa = 5;
            break;

          case (_0x33f5xc == 'top' || _0x33f5xc == 'bottom') && (_0x33f5x1c == 'top' || _0x33f5x1c == 'bottom'):
            _0x33f5x16 = 7;
            _0x33f5xa = 2;
        }
        var _0x33f5x9 = Number['MAX_VALUE'];
        var _0x33f5xd = {
            from: _0x33f5x2['start'] + (_0x33f5x2['end'] - _0x33f5x2['start']) / 2,
            to: _0x33f5x11['start'] + (_0x33f5x11['end'] - _0x33f5x11['start']) / 2
        };
        var _0x33f5x5 = {
            from: _0x33f5x2['top'] + (_0x33f5x2['bottom'] - _0x33f5x2['top']) / 2,
            to: _0x33f5x11['top'] + (_0x33f5x11['bottom'] - _0x33f5x11['top']) / 2
        };
        if ((_0x33f5xc === 'top' && _0x33f5x1c === 'bottom' || _0x33f5xc === 'bottom' && _0x33f5x1c === 'top') && _0x33f5xd['from'] === _0x33f5xd['to']) {
            _0x33f5x9 = Math['abs'](_0x33f5x2[_0x33f5xc] - _0x33f5x11[_0x33f5x1c]);
        } else {
            if ((_0x33f5xc === 'left' && _0x33f5x1c === 'right' || _0x33f5xc === 'right' && _0x33f5x1c === 'left') && _0x33f5x5['from'] === _0x33f5x5['to']) {
                var _0x33f5xb = _0x33f5xc === 'left' ? 'start' : 'end';
                var _0x33f5x10 = _0x33f5x1c === 'left' ? 'start' : 'end';
                if (_0x33f5xf['rtl']) {
                    _0x33f5xb = _0x33f5xb === 'start' ? 'end' : 'start';
                    _0x33f5x10 = _0x33f5x10 === 'start' ? 'end' : 'start';
                }
                var _0x33f5x14 = _0x33f5x2[_0x33f5xb];
                var _0x33f5x3 = _0x33f5x11[_0x33f5x10];
                _0x33f5x9 = Math['abs'](_0x33f5x14 - _0x33f5x3);
            }
        }
        if (_0x33f5x9 < _0x33f5x4 * _0x33f5x1 * 2) {
            _0x33f5x13 = _0x33f5x1 = 0;
            if (_0x33f5x9 <= _0x33f5x4 * 2) {
                _0x33f5x1d = _0x33f5x4 = 0;
            }
        }
        return {
            startBox: _0x33f5x2,
            startSide: _0x33f5xc,
            startArrowSize: _0x33f5x1d,
            startArrowMargin: _0x33f5x13,
            endBox: _0x33f5x11,
            endSide: _0x33f5x1c,
            endArrowSize: _0x33f5x4,
            endArrowMargin: _0x33f5x1,
            verticalMargin: _0x33f5x16,
            horizontalMargin: _0x33f5xa,
            otherBoxes: _0x33f5xe,
            dependencyId: _0x33f5x17['internalId'],
            cls: _0x33f5x17['getCls'](),
            isHighlighted: _0x33f5x17['isHighlighted']
        };
    },
    convertSideToDir: function(_0x33f5x2, _0x33f5x1) {
        return this['self']['sideToDir'][_0x33f5x2 + (_0x33f5x1 && '-rtl' || '')];
    },
    getSegmentDir: function(_0x33f5x1) {
        var _0x33f5x2 = 'vertical';
        if (_0x33f5x1['y1'] === _0x33f5x1['y2']) {
            _0x33f5x2 = 'horizontal';
        }
        return _0x33f5x2;
    },
    inheritableStatics: {
        sideToDir: {
            left: 'right',
            right: 'left',
            top: 'down',
            bottom: 'up',
            "left-rtl": 'left',
            "right-rtl": 'right',
            "top-rtl": 'down',
            "bottom-rtl": 'up'
        }
    }
});

Ext.define('Ext.ux.Scheduler.view.dependency.View', {
    alias: 'schdependencyview.base',
    mixins: [ Ext.mixin.Factoryable, Ext.mixin.Observable ],
    config: {
        primaryView: null,
        dependencyStore: null,
        drawDependencies: true,
        painterConfig: {
            canvasCls: 'sch-dependencyview-ct'
        },
        canvasLayer: 0,
        overCls: null
    },
    renderTimer: null,
    painter: null,
    primaryViewDetacher: null,
    primaryViewLockableDetacher: null,
    primaryViewElDetacher: null,
    dependencyStoreDetacher: null,
    constructor: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['callParent']([ _0x33f5x2 ]);
        _0x33f5x1['mixins']['observable']['constructor']['call'](_0x33f5x1, _0x33f5x2);
        _0x33f5x1['initConfig'](_0x33f5x2);
        Ext.Assert && Ext.Assert.isObject(_0x33f5x1['getPrimaryView'](), 'Dependency view requires a primary view to be configured in');
        Ext.Assert && Ext.Assert.isFunctionProp(_0x33f5x1['getPrimaryView'](), 'isItemCanvasAvailable', 'Dependency view requires `Ext.ux.Scheduler.mixin.GridViewCanvas` mixin to be mixed into scheduling view, or the corresponding interface to be implemented');
        Ext.Assert && Ext.Assert.isFunctionProp(_0x33f5x1['getPrimaryView'](), 'getItemCanvasEl', 'Dependency view requires `Ext.ux.Scheduler.mixin.GridViewCanvas` mixin to be mixed into scheduling view, or the corresponding interface to be implemented');
        _0x33f5x1['painter'] = _0x33f5x1['createPainter'](Ext.apply({}, {
            rtl: _0x33f5x1['getPrimaryView']()['rtl']
        }, _0x33f5x1['getPainterConfig']()));
        if (_0x33f5x1['canDrawDependencies']()) {
            _0x33f5x1['startDrawDependencies']();
        }
    },
    destroy: function() {
        this['stopDrawDependencies']();
    },
    destroyDetachers: function() {
        var _0x33f5x2 = this;
        Ext.destroyMembers(this, [ 'primaryViewDetacher', 'primaryViewLockableDetacher', 'primaryViewElDetacher', 'dependencyStoreDetacher' ]);
    },
    destroyDependencyCanvas: function() {
        var _0x33f5x2 = this;
        if (_0x33f5x2['isDependencyCanvasPresent']()) {
            Ext.destroy(_0x33f5x2['getDependencyCanvas']());
        }
    },
    canDrawDependencies: function(_0x33f5x1, _0x33f5x2, _0x33f5x4) {
        var _0x33f5x3 = this;
        return !!(_0x33f5x3['painter'] && (_0x33f5x1 || _0x33f5x3['getDrawDependencies']()) && (_0x33f5x2 || _0x33f5x3['isDependencyCanvasAvailable']()) && (_0x33f5x4 || _0x33f5x3['getDependencyStore']()));
    },
    startDrawDependencies: function() {
        var _0x33f5x1 = this, _0x33f5x3 = _0x33f5x1['getPrimaryView'](), _0x33f5x2 = _0x33f5x1['getDependencyStore'](), _0x33f5x4;
        _0x33f5x1['primaryViewDetacher'] = _0x33f5x3['on'](Ext.applyIf({
            destroyable: true
        }, _0x33f5x1['getPrimaryViewListeners']()));
        _0x33f5x1['primaryViewElDetacher'] = _0x33f5x3['getEl']()['on'](Ext.applyIf({
            destroyable: true
        }, _0x33f5x1['getPrimaryViewElListeners']()));
        _0x33f5x4 = _0x33f5x3['grid']['ownerLockable'] && _0x33f5x3['grid']['ownerLockable']['getView']();
        if (_0x33f5x3 != _0x33f5x4) {
            _0x33f5x1['primaryViewLockableDetacher'] = _0x33f5x4['on'](Ext.applyIf({
                destroyable: true
            }, _0x33f5x1['getPriviewViewLockableListeners']()));
        }
        _0x33f5x1['dependencyStoreDetacher'] = _0x33f5x2['on'](Ext.applyIf({
            destroyable: true
        }, _0x33f5x1['getDependencyStoreListeners']()));
        _0x33f5x1['scheduleAllDependenciesRendering']();
    },
    stopDrawDependencies: function() {
        var _0x33f5x2 = this;
        _0x33f5x2['destroyDetachers']();
        _0x33f5x2['destroyDependencyCanvas']();
    },
    updatePrimaryView: function(_0x33f5x4, _0x33f5x2) {
        var _0x33f5x1 = this, _0x33f5x3;
        if (_0x33f5x2) {
            _0x33f5x1['stopDrawDependencies']();
        }
        if (_0x33f5x4) {
            if (!_0x33f5x1['getDependencyStore']() && _0x33f5x4['getEventStore']()) {
                _0x33f5x1['setDependencyStore'](_0x33f5x4['getEventStore']()['getDependencyStore']());
            }
            if (_0x33f5x1['canDrawDependencies']()) {
                _0x33f5x1['startDrawDependencies']();
            }
        }
    },
    applyDependencyStore: function(_0x33f5x2) {
        return _0x33f5x2 && Ext.StoreMgr.lookup(_0x33f5x2);
    },
    updateDependencyStore: function(_0x33f5x2, _0x33f5x3) {
        var _0x33f5x1 = this;
        if (_0x33f5x3) {
            _0x33f5x1['stopDrawDependencies']();
        }
        if (_0x33f5x2 && _0x33f5x1['canDrawDependencies']()) {
            _0x33f5x1['startDrawDependencies']();
        }
    },
    updateDrawDependencies: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x1 = this;
        if (_0x33f5x3 && _0x33f5x1['canDrawDependencies'](true)) {
            _0x33f5x1['startDrawDependencies']();
        } else {
            if (!_0x33f5x3) {
                _0x33f5x1['stopDrawDependencies']();
            }
        }
    },
    applyPainterConfig: function(_0x33f5x2) {
        return Ext.isObject(_0x33f5x2) ? Ext.apply({}, _0x33f5x2) : _0x33f5x2;
    },
    updatePainterConfig: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        if (_0x33f5x1['painter']) {
            if (_0x33f5x2) {
                _0x33f5x2 = Ext.apply({}, {
                    rtl: _0x33f5x1['getPrimaryView']()['rtl']
                }, _0x33f5x2);
            }
            if (_0x33f5x2 && 'type' in _0x33f5x2 && _0x33f5x2['type'] !== _0x33f5x1['painter']['type']) {
                Ext.destroy(_0x33f5x1['painter']);
                _0x33f5x1['painter'] = _0x33f5x1['createPainter'](_0x33f5x2);
            } else {
                _0x33f5x1['painter']['setConfig'](_0x33f5x2);
            }
            _0x33f5x1['destroyDependencyCanvas']();
            if (_0x33f5x1['canDrawDependencies']()) {
                _0x33f5x1['scheduleAllDependenciesRendering']();
            }
        }
    },
    updateCanvasLayer: function(_0x33f5x2) {
        var _0x33f5x1 = this;
        _0x33f5x1['destroyDependencyCanvas']();
        if (_0x33f5x1['canDrawDependencies']()) {
            _0x33f5x1['scheduleAllDependenciesRendering']();
        }
    },
    getPrimaryViewListeners: function() {
        var _0x33f5x2 = this;
        return {
            itemadd: _0x33f5x2['onPrimaryViewItemAdd'],
            itemremove: _0x33f5x2['onPrimaryViewItemRemove'],
            itemupdate: _0x33f5x2['onPrimaryViewItemUpdate'],
            refresh: _0x33f5x2['onPrimaryViewRefresh'],
            bufferedrefresh: _0x33f5x2['onPrimaryViewRefresh'],
            expandbody: _0x33f5x2['onPrimaryViewRowExpand'],
            collapsebody: _0x33f5x2['onPrimaryViewRowCollapse'],
            eventrepaint: _0x33f5x2['onPrimaryViewEventRepaint'],
            scope: _0x33f5x2
        };
    },
    getPriviewViewLockableListeners: function() {
        var _0x33f5x2 = this;
        return {
            expandbody: _0x33f5x2['onPrimaryViewRowExpand'],
            collapsebody: _0x33f5x2['onPrimaryViewRowCollapse'],
            scope: _0x33f5x2
        };
    },
    getPrimaryViewElListeners: function() {
        var _0x33f5x2 = this;
        return {
            dblclick: _0x33f5x2['onPrimaryViewDependencyElPointerEvent'],
            click: _0x33f5x2['onPrimaryViewDependencyElPointerEvent'],
            contextmenu: _0x33f5x2['onPrimaryViewDependencyElPointerEvent'],
            mouseover: _0x33f5x2['onPrimaryViewDependencyElPointerEvent'],
            mouseout: _0x33f5x2['onPrimaryViewDependencyElPointerEvent'],
            delegate: '.sch-dependency',
            scope: _0x33f5x2
        };
    },
    getDependencyStoreListeners: function() {
        var _0x33f5x2 = this;
        return {
            add: _0x33f5x2['onDependencyStoreAdd'],
            remove: _0x33f5x2['onDependencyStoreRemove'],
            update: _0x33f5x2['onDependencyStoreUpdate'],
            refresh: _0x33f5x2['onDependencyStoreRefresh'],
            clear: _0x33f5x2['onDependencyStoreClear'],
            scope: _0x33f5x2
        };
    },
    createPainter: function(_0x33f5x2) {
        return Ext.ux.Scheduler.view.dependency.Painter.create(_0x33f5x2);
    },
    clonePainter: function() {
        var _0x33f5x2 = this;
        return _0x33f5x2['painter'] && _0x33f5x2['painter']['clone']() || null;
    },
    isDependencyCanvasAvailable: function() {
        var _0x33f5x2 = this['getPrimaryView']();
        return _0x33f5x2 && _0x33f5x2['isItemCanvasAvailable']();
    },
    isDependencyCanvasPresent: function() {
        var _0x33f5x2 = this, _0x33f5x1 = _0x33f5x2['getPrimaryView']();
        return _0x33f5x1 && _0x33f5x1['isItemCanvasAvailable'](_0x33f5x2['getCanvasLayer']());
    },
    getDependencyCanvas: function() {
        var _0x33f5x2 = this;
        return _0x33f5x2['getPrimaryView']()['getItemCanvasEl'](_0x33f5x2['getCanvasLayer'](), _0x33f5x2['painter']['getCanvasSpecification']());
    },
    isDependencyRenderingScheduled: function() {
        return !!this['renderTimer'];
    },
    scheduleAllDependenciesRendering: function() {
        var _0x33f5x1 = this, _0x33f5x2;
        if (!_0x33f5x1['isDependencyRenderingScheduled']() && _0x33f5x1['canDrawDependencies']()) {
            _0x33f5x2 = _0x33f5x1['getPrimaryView']()['up']('{isHidden()}');
            if (_0x33f5x2) {
                _0x33f5x1['renderTimer'] = true;
                _0x33f5x2['on']('show', function() {
                    _0x33f5x1['renderTimer'] = null;
                    _0x33f5x1['renderAllDependencies']();
                }, _0x33f5x1, {
                    single: true
                });
            } else {
                _0x33f5x1['renderTimer'] = setTimeout(function() {
                    _0x33f5x1['renderTimer'] = null;
                    _0x33f5x1['renderAllDependencies']();
                });
            }
        }
    },
    renderAllDependencies: function() {
        var _0x33f5x2 = this, _0x33f5x1;
        if (_0x33f5x2['canDrawDependencies']()) {
            _0x33f5x1 = _0x33f5x2['getDependencyCanvas']();
            _0x33f5x2['renderDependencies'](_0x33f5x2['getDependencyStore']()['getRange'](), true);
            _0x33f5x2['fireEvent']('refresh', _0x33f5x2);
        }
    },
    renderDependencies: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x1 = this;
        if (_0x33f5x1['canDrawDependencies']()) {
            _0x33f5x1['painter']['paint'](_0x33f5x1['getPrimaryView'](), _0x33f5x1['getDependencyCanvas'](), _0x33f5x3 || [], _0x33f5x2);
        }
    },
    updateDependencies: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        _0x33f5x2['clearDependencies'](_0x33f5x1);
        _0x33f5x2['renderDependencies'](_0x33f5x1, false);
    },
    clearDependencies: function(_0x33f5x1) {
        var _0x33f5x2 = this;
        if (_0x33f5x2['canDrawDependencies']() && _0x33f5x2['isDependencyCanvasPresent']()) {
            Ext.destroy(_0x33f5x2['getElementsForDependency'](_0x33f5x1));
        }
    },
    clearAllDependencies: function() {
        this['renderDependencies']([], true);
    },
    getElementsForDependency: function(_0x33f5x3) {
        var _0x33f5x1 = this, _0x33f5x2 = false;
        if (_0x33f5x1['canDrawDependencies']() && _0x33f5x1['isDependencyCanvasPresent']()) {
            _0x33f5x2 = _0x33f5x1['painter']['getElementsForDependency'](_0x33f5x1['getDependencyCanvas'](), _0x33f5x3);
        }
        return _0x33f5x2;
    },
    getDependencyForElement: function(_0x33f5x3) {
        var _0x33f5x5 = this, _0x33f5x1 = _0x33f5x5['getDependencyStore'](), _0x33f5x2 = null, _0x33f5x4;
        if (_0x33f5x1) {
            _0x33f5x4 = _0x33f5x5['painter']['getElementDependencyInternalId'](_0x33f5x3);
            _0x33f5x2 = _0x33f5x1['getByInternalId'](_0x33f5x4);
        }
        return _0x33f5x2;
    },
    getDependencyElements: function() {
        var _0x33f5x3 = this, _0x33f5x2 = false, _0x33f5x1;
        if (_0x33f5x3['canDrawDependencies']() && _0x33f5x3['isDependencyCanvasPresent']()) {
            _0x33f5x2 = _0x33f5x3['painter']['getDependencyElements'](_0x33f5x3['getDependencyCanvas']());
        }
        return _0x33f5x2;
    },
    highlightDependency: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this;
        if (_0x33f5x3['canDrawDependencies']() && _0x33f5x3['isDependencyCanvasPresent']()) {
            if (!(_0x33f5x1 instanceof Ext.data.Model)) {
                _0x33f5x1 = _0x33f5x3['getDependencyStore']()['getById'](_0x33f5x1);
            }
            if (_0x33f5x1) {
                _0x33f5x3['painter']['highlightDependency'](_0x33f5x3['getDependencyCanvas'](), _0x33f5x1, _0x33f5x2);
                _0x33f5x1['isHighlighted'] = true;
            }
        }
    },
    unhighlightDependency: function(_0x33f5x1, _0x33f5x2) {
        var _0x33f5x3 = this;
        if (_0x33f5x3['canDrawDependencies']() && _0x33f5x3['isDependencyCanvasPresent']()) {
            if (!(_0x33f5x1 instanceof Ext.data.Model)) {
                _0x33f5x1 = _0x33f5x3['getDependencyStore']()['getById'](_0x33f5x1);
            }
            if (_0x33f5x1) {
                _0x33f5x3['painter']['unhighlightDependency'](_0x33f5x3['getDependencyCanvas'](), _0x33f5x1, _0x33f5x2);
                _0x33f5x1['isHighlighted'] = false;
            }
        }
    },
    getSelectedDependencyElements: function() {
        var _0x33f5x1 = this, _0x33f5x2 = false;
        if (_0x33f5x1['canDrawDependencies']() && _0x33f5x1['isDependencyCanvasPresent']()) {
            _0x33f5x2 = _0x33f5x1['painter']['getSelectedDependencyElements'](_0x33f5x1['getDependencyCanvas']());
        }
        return _0x33f5x2;
    },
    clearSelectedDependencies: function() {
        var _0x33f5x2 = this;
        if (_0x33f5x2['canDrawDependencies']() && _0x33f5x2['isDependencyCanvasPresent']()) {
            _0x33f5x2['painter']['clearSelectedDependencies'](_0x33f5x2['getDependencyCanvas']());
            _0x33f5x2['getDependencyStore']()['each'](function(_0x33f5x1) {
                _0x33f5x1['isHighlighted'] = false;
            });
        }
    },
    onPrimaryViewItemAdd: function() {
        this['scheduleAllDependenciesRendering']();
    },
    onPrimaryViewItemRemove: function() {
        this['scheduleAllDependenciesRendering']();
    },
    onPrimaryViewItemUpdate: function(_0x33f5x2, _0x33f5x1, _0x33f5x3) {
        this['scheduleAllDependenciesRendering']();
    },
    onPrimaryViewRefresh: function() {
        this['scheduleAllDependenciesRendering']();
    },
    onPrimaryViewRowExpand: function() {
        this['scheduleAllDependenciesRendering']();
    },
    onPrimaryViewRowCollapse: function() {
        this['scheduleAllDependenciesRendering']();
    },
    onPrimaryViewEventRepaint: function(_0x33f5x1, _0x33f5x2, _0x33f5x3) {
        this['scheduleAllDependenciesRendering']();
    },
    onPrimaryViewDependencyElPointerEvent: function(_0x33f5x8, _0x33f5x1, _0x33f5x4) {
        var _0x33f5x5 = this, _0x33f5x2, _0x33f5x3;
        _0x33f5x2 = _0x33f5x5['painter']['getElementDependencyInternalId'](_0x33f5x1);
        _0x33f5x3 = _0x33f5x5['getDependencyStore']()['getByInternalId'](_0x33f5x2);
        if (_0x33f5x3) {
            var _0x33f5x9 = this['getOverCls']();
            _0x33f5x5['fireEvent']('dependency' + _0x33f5x8['type'], _0x33f5x5, _0x33f5x3, _0x33f5x8, _0x33f5x1);
            if (_0x33f5x9) {
                if (_0x33f5x8['type'] === 'mouseover') {
                    this['highlightDependency'](_0x33f5x3, _0x33f5x9);
                } else {
                    if (_0x33f5x8['type'] === 'mouseout') {
                        this['unhighlightDependency'](_0x33f5x3, _0x33f5x9);
                    }
                }
            }
        }
    },
    onDependencyStoreAdd: function(_0x33f5x2, _0x33f5x1) {
        this['renderDependencies'](_0x33f5x1);
    },
    onDependencyStoreRemove: function(_0x33f5x2, _0x33f5x1) {
        this['clearDependencies'](_0x33f5x1);
    },
    onDependencyStoreUpdate: function(_0x33f5x2, _0x33f5x1) {
        this['updateDependencies'](_0x33f5x1);
    },
    onDependencyStoreRefresh: function(_0x33f5x2) {
        this['scheduleAllDependenciesRendering']();
    },
    onDependencyStoreClear: function(_0x33f5x2) {
        this['scheduleAllDependenciesRendering']();
    }
});

Ext.define('Ext.ux.Scheduler.widget.PagingToolbar', {
    extend: Ext.toolbar.Paging,
    alias: 'widget.sch_pagingtoolbar',
    getStoreId: function() {
        if (this['storeId']) {
            return this['storeId'];
        }
        var _0x33f5x2 = this['store']['storeId'];
        if (!_0x33f5x2) {
            var _0x33f5x3 = this['store']['crudManager'];
            var _0x33f5x1 = _0x33f5x3 && _0x33f5x3['getStore'](this['store']);
            _0x33f5x2 = _0x33f5x1 && _0x33f5x1['storeId'];
        }
        this['storeId'] = _0x33f5x2;
        return _0x33f5x2;
    },
    loadPage: function(_0x33f5x3) {
        var _0x33f5x1 = this;
        if (_0x33f5x1['store']['crudManager']) {
            var _0x33f5x2 = _0x33f5x1['getStoreId']();
            if (_0x33f5x2) {
                var _0x33f5x4 = {};
                _0x33f5x4[_0x33f5x2] = {
                    pageSize: _0x33f5x1['store']['pageSize'],
                    page: _0x33f5x3
                };
                _0x33f5x1['store']['crudManager']['load'](_0x33f5x4);
            }
        } else {
            _0x33f5x1['store']['loadPage'](_0x33f5x3);
        }
    },
    onPagingKeyDown: function(_0x33f5x7, _0x33f5x9) {
        var _0x33f5x4 = this, _0x33f5x1 = _0x33f5x9['getKey'](), _0x33f5x3 = _0x33f5x4['getPageData'](), _0x33f5x2 = _0x33f5x9['shiftKey'] ? 10 : 1, _0x33f5x8;
        if (_0x33f5x1 == _0x33f5x9['RETURN']) {
            _0x33f5x9['stopEvent']();
            _0x33f5x8 = _0x33f5x4['readPageFromInput'](_0x33f5x3);
            if (_0x33f5x8 !== false) {
                _0x33f5x8 = Math['min'](Math['max'](1, _0x33f5x8), _0x33f5x3['pageCount']);
                if (_0x33f5x4['fireEvent']('beforechange', _0x33f5x4, _0x33f5x8) !== false) {
                    _0x33f5x4['loadPage'](_0x33f5x8);
                }
            }
        } else {
            if (_0x33f5x1 == _0x33f5x9['HOME'] || _0x33f5x1 == _0x33f5x9['END']) {
                _0x33f5x9['stopEvent']();
                _0x33f5x8 = _0x33f5x1 == _0x33f5x9['HOME'] ? 1 : _0x33f5x3['pageCount'];
                _0x33f5x7['setValue'](_0x33f5x8);
            } else {
                if (_0x33f5x1 == _0x33f5x9['UP'] || _0x33f5x1 == _0x33f5x9['PAGE_UP'] || _0x33f5x1 == _0x33f5x9['DOWN'] || _0x33f5x1 == _0x33f5x9['PAGE_DOWN']) {
                    _0x33f5x9['stopEvent']();
                    _0x33f5x8 = _0x33f5x4['readPageFromInput'](_0x33f5x3);
                    if (_0x33f5x8) {
                        if (_0x33f5x1 == _0x33f5x9['DOWN'] || _0x33f5x1 == _0x33f5x9['PAGE_DOWN']) {
                            _0x33f5x2 *= -1;
                        }
                        _0x33f5x8 += _0x33f5x2;
                        if (_0x33f5x8 >= 1 && _0x33f5x8 <= _0x33f5x3['pageCount']) {
                            _0x33f5x7['setValue'](_0x33f5x8);
                        }
                    }
                }
            }
        }
    },
    moveFirst: function() {
        if (this['fireEvent']('beforechange', this, 1) !== false) {
            this['loadPage'](1);
        }
    },
    movePrevious: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['store']['currentPage'] - 1;
        if (_0x33f5x2 > 0) {
            if (_0x33f5x1['fireEvent']('beforechange', _0x33f5x1, _0x33f5x2) !== false) {
                _0x33f5x1['loadPage'](_0x33f5x2);
            }
        }
    },
    moveNext: function() {
        var _0x33f5x3 = this, _0x33f5x1 = _0x33f5x3['getPageData']()['pageCount'], _0x33f5x2 = _0x33f5x3['store']['currentPage'] + 1;
        if (_0x33f5x2 <= _0x33f5x1) {
            if (_0x33f5x3['fireEvent']('beforechange', _0x33f5x3, _0x33f5x2) !== false) {
                _0x33f5x3['loadPage'](_0x33f5x2);
            }
        }
    },
    moveLast: function() {
        var _0x33f5x1 = this, _0x33f5x2 = _0x33f5x1['getPageData']()['pageCount'];
        if (_0x33f5x1['fireEvent']('beforechange', _0x33f5x1, _0x33f5x2) !== false) {
            _0x33f5x1['loadPage'](_0x33f5x2);
        }
    },
    doRefresh: function() {
        var _0x33f5x2 = this, _0x33f5x1 = _0x33f5x2['store']['currentPage'];
        if (_0x33f5x2['fireEvent']('beforechange', _0x33f5x2, _0x33f5x1) !== false) {
            _0x33f5x2['loadPage'](_0x33f5x1);
        }
    }
});

Ext.define('Robo.util.Array', {
    singleton: true,
    reduce: function(_0x33f5x8, _0x33f5x5, _0x33f5x2) {
        _0x33f5x8 = Object(_0x33f5x8);
        if (!Ext.isFunction(_0x33f5x5)) {
            Ext.raise('Invalid parameter: expected a function.');
        }
        var _0x33f5x3 = 0, _0x33f5x4 = _0x33f5x8['length'] >>> 0, _0x33f5x1 = _0x33f5x2;
        if (arguments['length'] < 3) {
            while (true) {
                if (_0x33f5x3 in _0x33f5x8) {
                    _0x33f5x1 = _0x33f5x8[_0x33f5x3++];
                    break;
                }
                if (++_0x33f5x3 >= _0x33f5x4) {
                    throw new TypeError('Reduce of empty array with no initial value');
                }
            }
        }
        for (;_0x33f5x3 < _0x33f5x4; ++_0x33f5x3) {
            if (_0x33f5x3 in _0x33f5x8) {
                _0x33f5x1 = _0x33f5x5(_0x33f5x1, _0x33f5x8[_0x33f5x3], _0x33f5x3, _0x33f5x8);
            }
        }
        return _0x33f5x1;
    }
});

Ext.define('Robo.widget.UndoButton', {
    extend: Ext.button.Split,
    alias: 'widget.roboundobutton',
    glyph: 'xf0e2@FontAwesome',
    robo: null,
    transactionList: null,
    type: 'undo',
    text: 'Undo',
    disabled: true,
    constructor: function(_0x33f5x2) {
        _0x33f5x2 = _0x33f5x2 || {};
        Ext.apply(this, _0x33f5x2);
        if (!this['robo']) {
            throw new Error('`robo` is a required config for the ' + this['$className']);
        }
        this['callParent'](_0x33f5x2);
    },
    initComponent: function() {
        var _0x33f5x2 = this;
        Ext.apply(this, {
            menu: new Ext.menu.Menu({
                cls: 'robo-transaction-list',
                items: this['getTransactionItems'](),
                listeners: {
                    click: this['onTransactionClick'],
                    scope: this
                }
            })
        });
        this['on']('click', function() {
            _0x33f5x2['robo'][_0x33f5x2['type']]();
        });
        this['mon'](_0x33f5x2['robo'], _0x33f5x2['type'] + 'queuechange', this['onTransactionQueueChange'], this);
        this['callParent']();
    },
    onTransactionQueueChange: function(_0x33f5x1, _0x33f5x2) {
        this['setDisabled'](_0x33f5x2['length'] === 0);
        var _0x33f5x3 = this['menu'];
        _0x33f5x3['removeAll']();
        _0x33f5x3['add'](this['getTransactionItems']());
        if (!_0x33f5x2['length']) {
            _0x33f5x3['hide']();
        }
    },
    getTransactionItems: function() {
        var _0x33f5x1 = this;
        var _0x33f5x2 = Ext.Array.map(this['robo'][this['type'] + 'Queue'], function(_0x33f5x3) {
            return new Ext.menu.Item({
                text: _0x33f5x3['getTitle'](),
                transaction: _0x33f5x3,
                listeners: {
                    activate: _0x33f5x1['onTransactionItemActivated'],
                    deactivate: _0x33f5x1['onTransactionItemDeActivated'],
                    scope: _0x33f5x1
                }
            });
        });
        if (this['type'] == 'undo') {
            _0x33f5x2['reverse']();
        }
        return _0x33f5x2;
    },
    onTransactionClick: function(_0x33f5x1, _0x33f5x2) {
        if (!_0x33f5x2) {
            return;
        }
        this['robo'][this['type']](_0x33f5x2['transaction']);
    },
    onTransactionItemActivated: function(_0x33f5x2) {
        this['menu']['items']['each'](function(_0x33f5x1) {
            if (_0x33f5x1 == _0x33f5x2) {
                return false;
            }
            if (_0x33f5x1['rendered']) {
                _0x33f5x1['el']['addCls'](_0x33f5x1['activeCls']);
            }
        });
    },
    onTransactionItemDeActivated: function(_0x33f5x2) {
        this['menu']['items']['each'](function(_0x33f5x1) {
            if (_0x33f5x1 == _0x33f5x2) {
                return false;
            }
            if (_0x33f5x1['rendered']) {
                _0x33f5x1['el']['removeCls'](_0x33f5x1['activeCls']);
            }
        });
    }
});

Ext.define('Robo.widget.RedoButton', {
    extend: Robo['widget']['UndoButton'],
    alias: 'widget.roboredobutton',
    glyph: 'xf01e@FontAwesome',
    type: 'redo',
    text: 'Redo'
});

Ext.define('Robo.widget.StatusPanel', {
    extend: Ext.tree.Panel,
    alias: 'widget.robostatuspanel',
    robo: null,
    type: 'undo',
    constructor: function(_0x33f5x2) {
        _0x33f5x2 = _0x33f5x2 || {};
        Ext.apply(this, _0x33f5x2);
        if (!this['robo']) {
            throw new Error('`robo` is a required config for the ' + this['$className']);
        }
        this['callParent'](_0x33f5x2);
    },
    initComponent: function() {
        var _0x33f5x2 = this;
        Ext.apply(this, {
            rootVisible: false,
            columns: [ {
                xtype: 'treecolumn',
                text: 'Title',
                dataIndex: 'title',
                width: 250
            }, {
                text: 'Changed fields',
                dataIndex: 'fieldNames',
                flex: 1,
                tdCls: 'fieldnames'
            } ],
            store: {
                fields: [ 'title', 'fieldNames', 'isActive' ]
            },
            viewConfig: {
                getRowClass: Ext.Function.bind(this['getActiveRowClass'], this)
            }
        });
        this['mon'](_0x33f5x2['robo'], _0x33f5x2['type'] + 'queuechange', this['onTransactionQueueChange'], this);
        this['callParent']();
    },
    getActiveRowClass: function(_0x33f5x2, _0x33f5x4, _0x33f5x3, _0x33f5x1) {
        return _0x33f5x2['get']('isActive') ? 'robo-status-active' : '';
    },
    onTransactionQueueChange: function(_0x33f5x3, _0x33f5x2) {
        var _0x33f5x4 = this['type'];
        var _0x33f5x1 = Ext.Array.map(_0x33f5x2, function(_0x33f5x9, _0x33f5x5) {
            var _0x33f5x8 = _0x33f5x4 == 'undo' ? _0x33f5x5 == _0x33f5x2['length'] - 1 : _0x33f5x5 === 0;
            return {
                leaf: false,
                expanded: true,
                title: _0x33f5x9['getTitle'](),
                isActive: _0x33f5x8,
                children: Ext.Array.map(_0x33f5x9['getActions'](), function(_0x33f5xf) {
                    var _0x33f5x7 = _0x33f5xf['getRecord']();
                    return {
                        leaf: true,
                        title: _0x33f5xf['getTitle'](),
                        fieldNames: _0x33f5xf instanceof Robo['action']['flat']['Update'] ? _0x33f5xf['fieldNames']['join'](', ') : '',
                        isActive: _0x33f5x8
                    };
                })
            };
        });
        this['store']['setRootNode']({
            expanded: true,
            children: _0x33f5x1
        });
        this['getView']()['scrollTo'](0, Infinity);
    }
});

Ext.data.Connection.override({
    parseStatus: function(_0x33f5x1) {
        var _0x33f5x2 = this['callOverridden'](arguments);
        if (_0x33f5x1 === 0) {
            _0x33f5x2['success'] = true;
        }
        return _0x33f5x2;
    }
});